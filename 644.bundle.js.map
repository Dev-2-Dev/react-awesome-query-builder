{"version":3,"file":"644.bundle.js","mappings":"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","sources":["webpack://react-awesome-query-builder-demo-local/./demo_switch/select.tsx","webpack://react-awesome-query-builder-demo-local/./demo_switch/index.tsx","webpack://react-awesome-query-builder-demo-local/./demo_switch/config.tsx"],"sourcesContent":["import React, { FC, memo } from \"react\";\nimport Creatable from \"react-select/creatable\";\nimport { MultiValue } from \"react-select\";\nimport { SpelConcatPart } from \"react-awesome-query-builder\";\n\ninterface OptionItem {\n  id: string\n  label: string\n  properties?: any\n  type?: any\n  __isNew__?: boolean\n}\n\nconst options: OptionItem[] = [\n  {\n    id: \"foo\",\n    label: \"Foo\",\n    properties: [\"REQUIRED\", \"CREATE\", \"UPDATE\"],\n    type: { format: \"INTEGER\" },\n  },\n  {\n    id: \"bar\",\n    label: \"Bar\",\n    properties: [\"REQUIRED\", \"CREATE\", \"UPDATE\"],\n    type: { format: \"INTEGER\" },\n  },\n];\n\n\ninterface Iprops {\n  k: string\n  value?: SpelConcatPart[]\n  setValue(value: SpelConcatPart[]): void\n}\n\nconst MltSelector: FC<Iprops> = ({\n  k,\n  value,\n  setValue,\n}) => {\n  function initMltSelectValueHandler(list: OptionItem[], val: SpelConcatPart[]) {\n    if (val) {\n      return val.map((item: SpelConcatPart) => {\n        let res = item.type != \"const\" && list && list.find((obj) => obj.id === item.value);\n        if (!res) {\n          res = { id: item.value, label: item.value, __isNew__: true };\n        }\n        return res;\n      });\n    }\n    return [];\n  }\n\n  function changeHandler(values: MultiValue<OptionItem>, actionMeta: any, setValue: (value: SpelConcatPart[]) => void): any[] {\n    const res = values.map((val) => ({\n      value: val.id || val.label,\n      type: val.__isNew__ ? \"const\" : \"property\"\n    }));\n    setValue(res as SpelConcatPart[]);\n    return res;\n  }\n\n  return (\n    <Creatable\n      menuPortalTarget={document.body}\n      key={k}\n      isMulti\n      options={options}\n      value={initMltSelectValueHandler(options, value)}\n      getOptionValue={(option: OptionItem) => option.id}\n      getOptionLabel={(option: OptionItem) => option.label}\n      onChange={(values, actionMeta) => {\n        changeHandler(values, actionMeta, setValue);\n      }}\n    />\n  );\n};\n\nexport default memo(MltSelector);\n","import React, { useState, useCallback } from \"react\";\nimport {\n  Query, Builder, Utils as QbUtils,\n  JsonSwitchGroup,\n  Config,\n  ImmutableTree,\n  BuilderProps\n} from \"react-awesome-query-builder\";\nimport \"../../css/styles.scss\";\nimport getConfig from \"./config\";\n\nconst config: Config = getConfig();\n\nconst preStyle = { backgroundColor: \"darkgrey\", margin: \"10px\", padding: \"10px\" };\nconst preErrorStyle = { backgroundColor: \"lightpink\", margin: \"10px\", padding: \"10px\" };\n\nconst emptyJsonTree: JsonSwitchGroup = {\n  id: QbUtils.uuid(),\n  type: \"switch_group\",\n};\nconst emptyTree: ImmutableTree = QbUtils.checkTree(QbUtils.loadTree(emptyJsonTree), config);\n\n\nconst Demo: React.FC = () => {\n  const [state, setState] = useState({\n    tree: emptyTree,\n    config: config,\n    spelStr: \"\",\n    spelErrors: [] as string[],\n  });\n\n  const onChange = useCallback((tree: ImmutableTree, config: Config) => {\n    setState(prevState => ({ ...prevState, tree, config }));\n  }, []);\n\n  const renderBuilder = useCallback((props: BuilderProps) => (\n    <div className=\"query-builder-container\" style={{ padding: \"10px\" }}>\n      <div className=\"query-builder qb-lite\">\n        <Builder {...props} />\n      </div>\n    </div>\n  ), []);\n\n  const onChangeSpelStr = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const spelStr = e.target.value;\n    setState({\n      ...state, \n      spelStr\n    });\n  };\n\n  const importFromSpel = () => {\n    const [tree, spelErrors] = QbUtils.loadFromSpel(state.spelStr, state.config);\n    setState({\n      ...state, \n      tree: tree ? QbUtils.checkTree(tree, state.config) : state.tree,\n      spelErrors\n    });\n  };\n\n  const renderQueryBuilder = () => (\n    <Query\n      {...config}\n      value={state.tree}\n      onChange={onChange}\n      renderBuilder={renderBuilder}\n    />\n  );\n\n  const renderSpelOutput = () => (\n    <div className=\"query-builder-result\">\n      Output SpEL:\n      <pre>\n        {QbUtils.spelFormat(state.tree, state.config)}\n      </pre>\n      Values:\n      <pre>\n        {JSON.stringify(QbUtils.getSwitchValues(state.tree), undefined, 2)}\n      </pre>\n    </div>\n  );\n\n  const renderSpelInput = () => (\n    <div className=\"query-import-spel\">\n      Input SpEL:\n      <input type=\"text\" size={150} value={state.spelStr} onChange={onChangeSpelStr} />\n      <button onClick={importFromSpel}>import</button>\n      <br />\n      { state.spelErrors.length > 0 \n          && <pre style={preErrorStyle}>\n            {JSON.stringify(state.spelErrors, undefined, 2)}\n          </pre> \n      }\n    </div>\n  );\n\n  return (\n    <div>\n      {renderSpelInput()}\n      {renderQueryBuilder()}\n      {renderSpelOutput()}\n    </div>\n  );\n};\n\nexport default Demo;\n","import React from \"react\";\nimport {\n  Utils as QbUtils, \n  Widgets, Fields, Config, Settings, SpelConcatPart\n} from \"react-awesome-query-builder\";\nimport MaterialConfig from \"react-awesome-query-builder/config/material\";\nimport ReactSelect from \"./select\";\n\nexport default (): Config => {\n  const InitialConfig = MaterialConfig;\n\n  const widgets: Widgets = {\n    ...InitialConfig.widgets,\n    case_value: {\n      ...InitialConfig.widgets.case_value,\n      spelFormatValue: QbUtils.ExportUtils.spelFormatConcat,\n      spelImportValue: QbUtils.ExportUtils.spelImportConcat,\n      factory: ({value, setValue, id}) => \n        <ReactSelect \n          value={value as Array<SpelConcatPart>}\n          setValue={setValue}\n          k={id}\n        />\n    }\n  };\n\n  const fields: Fields = {\n    text: {\n      label: \"Text\",\n      type: \"text\",\n      valueSources: [\"value\", \"field\"],\n      excludeOperators: [\"proximity\"]\n    },\n    qty: {\n      label: \"Qty\",\n      type: \"number\",\n      fieldSettings: {\n        min: 0\n      },\n      valueSources: [\"value\", \"field\"],\n      preferWidgets: [\"number\"]\n    },\n    price: {\n      label: \"Price\",\n      type: \"number\",\n      valueSources: [\"value\"],\n      fieldSettings: {\n        min: 10,\n        max: 100\n      },\n      preferWidgets: [\"slider\", \"rangeslider\"],\n      isSpelVariable: true\n    },\n    color: {\n      label: \"Color\",\n      type: \"select\",\n      valueSources: [\"value\"],\n      fieldSettings: {\n        listValues: [\n          { value: \"yellow\", title: \"Yellow\" },\n          { value: \"green\", title: \"Green\" },\n          { value: \"orange\", title: \"Orange\" }\n        ]\n      }\n    },\n    is_promotion: {\n      label: \"Promo?\",\n      type: \"boolean\",\n      operators: [\"equal\"],\n      valueSources: [\"value\"]\n    }\n  };\n\n  const settings: Settings = {\n    ...InitialConfig.settings,\n    maxNumberOfCases: 3,\n    canRegroupCases: true,\n    maxNesting: 3,\n    canLeaveEmptyCase: false,\n  };\n\n  const config: Config = {\n    ...InitialConfig,\n    widgets,\n    fields,\n    settings\n  };\n\n  return config;\n};\n\n\n"],"names":["options","id","label","properties","type","format","MltSelector","list","val","k","value","setValue","menuPortalTarget","document","body","key","isMulti","map","item","res","find","obj","__isNew__","getOptionValue","option","getOptionLabel","onChange","values","actionMeta","changeHandler","memo","InitialConfig","widgets","settings","config","MaterialConfig","case_value","spelFormatValue","QbUtils","spelImportValue","factory","maxNumberOfCases","canRegroupCases","maxNesting","canLeaveEmptyCase","fields","text","valueSources","excludeOperators","qty","fieldSettings","min","preferWidgets","price","max","isSpelVariable","color","listValues","title","is_promotion","operators","preErrorStyle","backgroundColor","margin","padding","emptyJsonTree","emptyTree","useState","tree","spelStr","spelErrors","state","setState","useCallback","prevState","renderBuilder","props","className","style","size","e","target","onClick","length","JSON","stringify","undefined"],"sourceRoot":""}