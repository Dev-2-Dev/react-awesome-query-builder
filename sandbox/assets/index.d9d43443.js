var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var require_index_d9d43443 = __commonJS({
  "assets/index.d9d43443.js"(exports, module) {
    function _mergeNamespaces(n, m) {
      for (var i = 0; i < m.length; i++) {
        const e = m[i];
        if (typeof e !== "string" && !Array.isArray(e)) {
          for (const k in e) {
            if (k !== "default" && !(k in n)) {
              const d = Object.getOwnPropertyDescriptor(e, k);
              if (d) {
                Object.defineProperty(n, k, d.get ? d : {
                  enumerable: true,
                  get: () => e[k]
                });
              }
            }
          }
        }
      }
      return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }));
    }
    const BasicFuncs = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      get LOWER() {
        return LOWER;
      },
      get UPPER() {
        return UPPER;
      },
      get NOW() {
        return NOW;
      },
      get RELATIVE_DATETIME() {
        return RELATIVE_DATETIME;
      },
      get LINEAR_REGRESSION() {
        return LINEAR_REGRESSION;
      }
    }, Symbol.toStringTag, { value: "Module" }));
    (function polyfill() {
      const relList = document.createElement("link").relList;
      if (relList && relList.supports && relList.supports("modulepreload")) {
        return;
      }
      for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
        processPreload(link);
      }
      new MutationObserver((mutations) => {
        for (const mutation of mutations) {
          if (mutation.type !== "childList") {
            continue;
          }
          for (const node2 of mutation.addedNodes) {
            if (node2.tagName === "LINK" && node2.rel === "modulepreload")
              processPreload(node2);
          }
        }
      }).observe(document, { childList: true, subtree: true });
      function getFetchOpts(script) {
        const fetchOpts = {};
        if (script.integrity)
          fetchOpts.integrity = script.integrity;
        if (script.referrerpolicy)
          fetchOpts.referrerPolicy = script.referrerpolicy;
        if (script.crossorigin === "use-credentials")
          fetchOpts.credentials = "include";
        else if (script.crossorigin === "anonymous")
          fetchOpts.credentials = "omit";
        else
          fetchOpts.credentials = "same-origin";
        return fetchOpts;
      }
      function processPreload(link) {
        if (link.ep)
          return;
        link.ep = true;
        const fetchOpts = getFetchOpts(link);
        fetch(link.href, fetchOpts);
      }
    })();
    var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
    function getDefaultExportFromCjs(x) {
      return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
    }
    function getAugmentedNamespace(n) {
      var f = n.default;
      if (typeof f == "function") {
        var a = function() {
          return f.apply(this, arguments);
        };
        a.prototype = f.prototype;
      } else
        a = {};
      Object.defineProperty(a, "__esModule", { value: true });
      Object.keys(n).forEach(function(k) {
        var d = Object.getOwnPropertyDescriptor(n, k);
        Object.defineProperty(a, k, d.get ? d : {
          enumerable: true,
          get: function() {
            return n[k];
          }
        });
      });
      return a;
    }
    var reactDom = { exports: {} };
    var reactDom_development = {};
    var react = { exports: {} };
    var react_development = {};
    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */
    var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
    var hasOwnProperty$e = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject$1(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    var objectAssign = shouldUseNative() ? Object.assign : function(target, source) {
      var from2;
      var to2 = toObject$1(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from2 = Object(arguments[s]);
        for (var key in from2) {
          if (hasOwnProperty$e.call(from2, key)) {
            to2[key] = from2[key];
          }
        }
        if (getOwnPropertySymbols$1) {
          symbols = getOwnPropertySymbols$1(from2);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from2, symbols[i])) {
              to2[symbols[i]] = from2[symbols[i]];
            }
          }
        }
      }
      return to2;
    };
    /** @license React v17.0.2
     * react.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    (function(exports2) {
      {
        (function() {
          var _assign = objectAssign;
          var ReactVersion = "17.0.2";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports2.Fragment = 60107;
          exports2.StrictMode = 60108;
          exports2.Profiler = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          exports2.Suspense = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports2.Fragment = symbolFor("react.fragment");
            exports2.StrictMode = symbolFor("react.strict_mode");
            exports2.Profiler = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            exports2.Suspense = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            symbolFor("react.scope");
            symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: 0
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var IsSomeRendererActing = {
            current: false
          };
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner,
            IsSomeRendererActing,
            assign: _assign
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          }
          function warn2(format2) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning2("warn", format2, args);
            }
          }
          function error(format2) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning2("error", format2, args);
            }
          }
          function printWarning2(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context2, updater) {
            this.props = props;
            this.context = context2;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
              {
                throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
              }
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn2("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context2, updater) {
            this.props = props;
            this.context = context2;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          _assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          function getWrappedName2(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case exports2.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case exports2.Profiler:
                return "Profiler";
              case exports2.StrictMode:
                return "StrictMode";
              case exports2.Suspense:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context2 = type;
                  return getContextName(context2) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName2(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config2) {
            {
              if (hasOwnProperty2.call(config2, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.ref !== void 0;
          }
          function hasValidKey(config2) {
            {
              if (hasOwnProperty2.call(config2, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config2) {
            {
              if (typeof config2.ref === "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config2.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement(type, config2, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config2);
                }
              }
              if (hasValidKey(config2)) {
                key = "" + config2.key;
              }
              self2 = config2.__self === void 0 ? null : config2.__self;
              source = config2.__source === void 0 ? null : config2.__source;
              for (propName in config2) {
                if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config2[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps2 = type.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config2, children) {
            if (!!(element === null || element === void 0)) {
              {
                throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
              }
            }
            var propName;
            var props = _assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config2)) {
                key = "" + config2.key;
              }
              var defaultProps2;
              if (element.type && element.type.defaultProps) {
                defaultProps2 = element.type.defaultProps;
              }
              for (propName in config2) {
                if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config2[propName] === void 0 && defaultProps2 !== void 0) {
                    props[propName] = defaultProps2[propName];
                  } else {
                    props[propName] = config2[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match5) {
              return escaperLookup[match5];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (Array.isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (Array.isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = "" + children;
                {
                  {
                    throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                  }
                }
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context2) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context2, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray2(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              {
                throw Error("React.Children.only expected to receive a single React element child.");
              }
            }
            return children;
          }
          function createContext(defaultValue2, calculateChangedBits) {
            if (calculateChangedBits === void 0) {
              calculateChangedBits = null;
            } else {
              {
                if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                  error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
                }
              }
            }
            var context2 = {
              $$typeof: REACT_CONTEXT_TYPE,
              _calculateChangedBits: calculateChangedBits,
              _currentValue: defaultValue2,
              _currentValue2: defaultValue2,
              _threadCount: 0,
              Provider: null,
              Consumer: null
            };
            context2.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context2
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context2,
                _calculateChangedBits: context2._calculateChangedBits
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context2.Provider;
                  },
                  set: function(_Provider) {
                    context2.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context2._currentValue;
                  },
                  set: function(_currentValue) {
                    context2._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context2._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context2._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context2._threadCount;
                  },
                  set: function(_threadCount) {
                    context2._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context2.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context2.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn2("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context2.Consumer = Consumer;
            }
            {
              context2._currentRenderer = null;
              context2._currentRenderer2 = null;
            }
            return context2;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
              thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                  var defaultExport = moduleObject.default;
                  {
                    if (defaultExport === void 0) {
                      error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    }
                  }
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = defaultExport;
                }
              }, function(error2) {
                if (payload._status === Pending) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
            }
            if (payload._status === Resolved) {
              return payload._result;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: -1,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps2;
              var propTypes2;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps2;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps2 = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes2;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes2 = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (render.displayName == null) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === exports2.Fragment || type === exports2.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports2.StrictMode || type === exports2.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (type.displayName == null) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            if (!(dispatcher !== null)) {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext(Context, unstable_observedBits) {
            var dispatcher = resolveDispatcher();
            {
              if (unstable_observedBits !== void 0) {
                error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
              }
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context, unstable_observedBits);
          }
          function useState(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useLayoutEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value2, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value2, formatterFn);
            }
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match5 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match5 && match5[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case exports2.Suspense:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures2 = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes2(typeSpecs, values2, location, componentName, element) {
            {
              var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures2)) {
                    loggedTypeFailures2[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentName(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            if (typeof node2 !== "object") {
              return;
            }
            if (Array.isArray(node2)) {
              for (var i = 0; i < node2.length; i++) {
                var child = node2[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node2)) {
              if (node2._store) {
                node2._store.validated = true;
              }
            } else if (node2) {
              var iteratorFn = getIteratorFn(node2);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node2.entries) {
                  var iterator = iteratorFn.call(node2);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes2;
              if (typeof type === "function") {
                propTypes2 = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes2 = type.propTypes;
              } else {
                return;
              }
              if (propTypes2) {
                var name = getComponentName(type);
                checkPropTypes2(propTypes2, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i = 0; i < keys2.length; i++) {
                var key = keys2[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (Array.isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === exports2.Fragment) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn2("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn2("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          {
            try {
              var frozenObject = Object.freeze({});
              /* @__PURE__ */ new Map([[frozenObject, null]]);
              /* @__PURE__ */ new Set([frozenObject]);
            } catch (e) {
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray2,
            only: onlyChild
          };
          exports2.Children = Children;
          exports2.Component = Component;
          exports2.PureComponent = PureComponent;
          exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports2.cloneElement = cloneElement$1;
          exports2.createContext = createContext;
          exports2.createElement = createElement$1;
          exports2.createFactory = createFactory;
          exports2.createRef = createRef;
          exports2.forwardRef = forwardRef;
          exports2.isValidElement = isValidElement;
          exports2.lazy = lazy;
          exports2.memo = memo;
          exports2.useCallback = useCallback;
          exports2.useContext = useContext;
          exports2.useDebugValue = useDebugValue;
          exports2.useEffect = useEffect;
          exports2.useImperativeHandle = useImperativeHandle;
          exports2.useLayoutEffect = useLayoutEffect;
          exports2.useMemo = useMemo;
          exports2.useReducer = useReducer;
          exports2.useRef = useRef;
          exports2.useState = useState;
          exports2.version = ReactVersion;
        })();
      }
    })(react_development);
    (function(module2) {
      {
        module2.exports = react_development;
      }
    })(react);
    const React = /* @__PURE__ */ getDefaultExportFromCjs(react.exports);
    const React$1 = /* @__PURE__ */ _mergeNamespaces({
      __proto__: null,
      default: React
    }, [react.exports]);
    var scheduler = { exports: {} };
    var scheduler_development = {};
    /** @license React v0.20.2
     * scheduler.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    (function(exports2) {
      {
        (function() {
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var requestHostCallback;
          var requestHostTimeout;
          var cancelHostTimeout;
          var requestPaint;
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports2.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports2.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          if (typeof window === "undefined" || typeof MessageChannel !== "function") {
            var _callback = null;
            var _timeoutID = null;
            var _flushCallback = function() {
              if (_callback !== null) {
                try {
                  var currentTime = exports2.unstable_now();
                  var hasRemainingTime = true;
                  _callback(hasRemainingTime, currentTime);
                  _callback = null;
                } catch (e) {
                  setTimeout(_flushCallback, 0);
                  throw e;
                }
              }
            };
            requestHostCallback = function(cb) {
              if (_callback !== null) {
                setTimeout(requestHostCallback, 0, cb);
              } else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
              }
            };
            requestHostTimeout = function(cb, ms) {
              _timeoutID = setTimeout(cb, ms);
            };
            cancelHostTimeout = function() {
              clearTimeout(_timeoutID);
            };
            exports2.unstable_shouldYield = function() {
              return false;
            };
            requestPaint = exports2.unstable_forceFrameRate = function() {
            };
          } else {
            var _setTimeout = window.setTimeout;
            var _clearTimeout = window.clearTimeout;
            if (typeof console !== "undefined") {
              var requestAnimationFrame2 = window.requestAnimationFrame;
              var cancelAnimationFrame = window.cancelAnimationFrame;
              if (typeof requestAnimationFrame2 !== "function") {
                console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
              if (typeof cancelAnimationFrame !== "function") {
                console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var yieldInterval = 5;
            var deadline = 0;
            {
              exports2.unstable_shouldYield = function() {
                return exports2.unstable_now() >= deadline;
              };
              requestPaint = function() {
              };
            }
            exports2.unstable_forceFrameRate = function(fps) {
              if (fps < 0 || fps > 125) {
                console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
              }
              if (fps > 0) {
                yieldInterval = Math.floor(1e3 / fps);
              } else {
                yieldInterval = 5;
              }
            };
            var performWorkUntilDeadline = function() {
              if (scheduledHostCallback !== null) {
                var currentTime = exports2.unstable_now();
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                  var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                  if (!hasMoreWork) {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                  } else {
                    port.postMessage(null);
                  }
                } catch (error) {
                  port.postMessage(null);
                  throw error;
                }
              } else {
                isMessageLoopRunning = false;
              }
            };
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            requestHostCallback = function(callback) {
              scheduledHostCallback = callback;
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
              }
            };
            requestHostTimeout = function(callback, ms) {
              taskTimeoutID = _setTimeout(function() {
                callback(exports2.unstable_now());
              }, ms);
            };
            cancelHostTimeout = function() {
              _clearTimeout(taskTimeoutID);
              taskTimeoutID = -1;
            };
          }
          function push(heap, node2) {
            var index = heap.length;
            heap.push(node2);
            siftUp(heap, node2, index);
          }
          function peek2(heap) {
            var first = heap[0];
            return first === void 0 ? null : first;
          }
          function pop(heap) {
            var first = heap[0];
            if (first !== void 0) {
              var last2 = heap.pop();
              if (last2 !== first) {
                heap[0] = last2;
                siftDown(heap, last2, 0);
              }
              return first;
            } else {
              return null;
            }
          }
          function siftUp(heap, node2, i) {
            var index = i;
            while (true) {
              var parentIndex = index - 1 >>> 1;
              var parent2 = heap[parentIndex];
              if (parent2 !== void 0 && compare(parent2, node2) > 0) {
                heap[parentIndex] = node2;
                heap[index] = parent2;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node2, i) {
            var index = i;
            var length2 = heap.length;
            while (index < length2) {
              var leftIndex = (index + 1) * 2 - 1;
              var left2 = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right2 = heap[rightIndex];
              if (left2 !== void 0 && compare(left2, node2) < 0) {
                if (right2 !== void 0 && compare(right2, left2) < 0) {
                  heap[index] = right2;
                  heap[rightIndex] = node2;
                  index = rightIndex;
                } else {
                  heap[index] = left2;
                  heap[leftIndex] = node2;
                  index = leftIndex;
                }
              } else if (right2 !== void 0 && compare(right2, node2) < 0) {
                heap[index] = right2;
                heap[rightIndex] = node2;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff2 = a.sortIndex - b.sortIndex;
            return diff2 !== 0 ? diff2 : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          function advanceTimers(currentTime) {
            var timer = peek2(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek2(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek2(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek2(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              var currentTime;
              if (enableProfiling)
                ;
              else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek2(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports2.unstable_shouldYield())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports2.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek2(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek2(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports2.unstable_now();
            var startTime;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime = currentTime + delay;
              } else {
                startTime = currentTime;
              }
            } else {
              startTime = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime,
              expirationTime,
              sortIndex: -1
            };
            if (startTime > currentTime) {
              newTask.sortIndex = startTime;
              push(timerQueue, newTask);
              if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek2(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports2.unstable_IdlePriority = IdlePriority;
          exports2.unstable_ImmediatePriority = ImmediatePriority;
          exports2.unstable_LowPriority = LowPriority;
          exports2.unstable_NormalPriority = NormalPriority;
          exports2.unstable_Profiling = unstable_Profiling;
          exports2.unstable_UserBlockingPriority = UserBlockingPriority;
          exports2.unstable_cancelCallback = unstable_cancelCallback;
          exports2.unstable_continueExecution = unstable_continueExecution;
          exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports2.unstable_next = unstable_next;
          exports2.unstable_pauseExecution = unstable_pauseExecution;
          exports2.unstable_requestPaint = unstable_requestPaint;
          exports2.unstable_runWithPriority = unstable_runWithPriority;
          exports2.unstable_scheduleCallback = unstable_scheduleCallback;
          exports2.unstable_wrapCallback = unstable_wrapCallback;
        })();
      }
    })(scheduler_development);
    (function(module2) {
      {
        module2.exports = scheduler_development;
      }
    })(scheduler);
    var tracing = { exports: {} };
    var schedulerTracing_development = {};
    /** @license React v0.20.2
     * scheduler-tracing.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    (function(exports2) {
      {
        (function() {
          var DEFAULT_THREAD_ID = 0;
          var interactionIDCounter = 0;
          var threadIDCounter = 0;
          exports2.__interactionsRef = null;
          exports2.__subscriberRef = null;
          {
            exports2.__interactionsRef = {
              current: /* @__PURE__ */ new Set()
            };
            exports2.__subscriberRef = {
              current: null
            };
          }
          function unstable_clear(callback) {
            var prevInteractions = exports2.__interactionsRef.current;
            exports2.__interactionsRef.current = /* @__PURE__ */ new Set();
            try {
              return callback();
            } finally {
              exports2.__interactionsRef.current = prevInteractions;
            }
          }
          function unstable_getCurrent() {
            {
              return exports2.__interactionsRef.current;
            }
          }
          function unstable_getThreadID() {
            return ++threadIDCounter;
          }
          function unstable_trace(name, timestamp, callback) {
            var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
            var interaction = {
              __count: 1,
              id: interactionIDCounter++,
              name,
              timestamp
            };
            var prevInteractions = exports2.__interactionsRef.current;
            var interactions = new Set(prevInteractions);
            interactions.add(interaction);
            exports2.__interactionsRef.current = interactions;
            var subscriber = exports2.__subscriberRef.current;
            var returnValue;
            try {
              if (subscriber !== null) {
                subscriber.onInteractionTraced(interaction);
              }
            } finally {
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(interactions, threadID);
                }
              } finally {
                try {
                  returnValue = callback();
                } finally {
                  exports2.__interactionsRef.current = prevInteractions;
                  try {
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(interactions, threadID);
                    }
                  } finally {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  }
                }
              }
            }
            return returnValue;
          }
          function unstable_wrap(callback) {
            var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
            var wrappedInteractions = exports2.__interactionsRef.current;
            var subscriber = exports2.__subscriberRef.current;
            if (subscriber !== null) {
              subscriber.onWorkScheduled(wrappedInteractions, threadID);
            }
            wrappedInteractions.forEach(function(interaction) {
              interaction.__count++;
            });
            var hasRun = false;
            function wrapped() {
              var prevInteractions = exports2.__interactionsRef.current;
              exports2.__interactionsRef.current = wrappedInteractions;
              subscriber = exports2.__subscriberRef.current;
              try {
                var returnValue;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStarted(wrappedInteractions, threadID);
                  }
                } finally {
                  try {
                    returnValue = callback.apply(void 0, arguments);
                  } finally {
                    exports2.__interactionsRef.current = prevInteractions;
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                  }
                }
                return returnValue;
              } finally {
                if (!hasRun) {
                  hasRun = true;
                  wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  });
                }
              }
            }
            wrapped.cancel = function cancel() {
              subscriber = exports2.__subscriberRef.current;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkCanceled(wrappedInteractions, threadID);
                }
              } finally {
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            };
            return wrapped;
          }
          var subscribers = null;
          {
            subscribers = /* @__PURE__ */ new Set();
          }
          function unstable_subscribe(subscriber) {
            {
              subscribers.add(subscriber);
              if (subscribers.size === 1) {
                exports2.__subscriberRef.current = {
                  onInteractionScheduledWorkCompleted,
                  onInteractionTraced,
                  onWorkCanceled,
                  onWorkScheduled,
                  onWorkStarted,
                  onWorkStopped
                };
              }
            }
          }
          function unstable_unsubscribe(subscriber) {
            {
              subscribers.delete(subscriber);
              if (subscribers.size === 0) {
                exports2.__subscriberRef.current = null;
              }
            }
          }
          function onInteractionTraced(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionTraced(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onInteractionScheduledWorkCompleted(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkScheduled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkScheduled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStarted(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStopped(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStopped(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkCanceled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkCanceled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          exports2.unstable_clear = unstable_clear;
          exports2.unstable_getCurrent = unstable_getCurrent;
          exports2.unstable_getThreadID = unstable_getThreadID;
          exports2.unstable_subscribe = unstable_subscribe;
          exports2.unstable_trace = unstable_trace;
          exports2.unstable_unsubscribe = unstable_unsubscribe;
          exports2.unstable_wrap = unstable_wrap;
        })();
      }
    })(schedulerTracing_development);
    (function(module2) {
      {
        module2.exports = schedulerTracing_development;
      }
    })(tracing);
    /** @license React v17.0.2
     * react-dom.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    {
      (function() {
        var React2 = react.exports;
        var _assign = objectAssign;
        var Scheduler = scheduler.exports;
        var tracing$1 = tracing.exports;
        var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function warn2(format2) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning2("warn", format2, args);
          }
        }
        function error(format2) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning2("error", format2, args);
          }
        }
        function printWarning2(level, format2, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format2 += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format2);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        if (!React2) {
          {
            throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
          }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment2 = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var FundamentalComponent = 20;
        var ScopeComponent = 21;
        var Block = 22;
        var OffscreenComponent = 23;
        var LegacyHiddenComponent = 24;
        var enableProfilerTimer = true;
        var enableFundamentalAPI = false;
        var enableNewReconciler = false;
        var warnAboutStringRefs = false;
        var allNativeEvents = /* @__PURE__ */ new Set();
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
          for (var i = 0; i < dependencies.length; i++) {
            allNativeEvents.add(dependencies[i]);
          }
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var ROOT_ATTRIBUTE_NAME = "data-reactroot";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value2, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value2) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix3 = name.toLowerCase().slice(0, 5);
                return prefix3 !== "data-" && prefix3 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name, value2, propertyInfo, isCustomComponentTag) {
          if (value2 === null || typeof value2 === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value2, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value2;
              case OVERLOADED_BOOLEAN:
                return value2 === false;
              case NUMERIC:
                return isNaN(value2);
              case POSITIVE_NUMERIC:
                return isNaN(value2) || value2 < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name) {
          return properties2.hasOwnProperty(name) ? properties2[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties2 = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(
            name,
            RESERVED,
            false,
            name,
            null,
            false,
            false
          );
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties2[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            attributeName,
            null,
            false,
            false
          );
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            name.toLowerCase(),
            null,
            false,
            false
          );
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            name,
            null,
            false,
            false
          );
        });
        [
          "allowFullScreen",
          "async",
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          "itemScope"
        ].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            false,
            name.toLowerCase(),
            null,
            false,
            false
          );
        });
        [
          "checked",
          "multiple",
          "muted",
          "selected"
        ].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            true,
            name,
            null,
            false,
            false
          );
        });
        [
          "capture",
          "download"
        ].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(
            name,
            OVERLOADED_BOOLEAN,
            false,
            name,
            null,
            false,
            false
          );
        });
        [
          "cols",
          "rows",
          "size",
          "span"
        ].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(
            name,
            POSITIVE_NUMERIC,
            false,
            name,
            null,
            false,
            false
          );
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties2[name] = new PropertyInfoRecord(
            name,
            NUMERIC,
            false,
            name.toLowerCase(),
            null,
            false,
            false
          );
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize2 = function(token2) {
          return token2[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize2);
          properties2[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            attributeName,
            null,
            false,
            false
          );
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize2);
          properties2[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            attributeName,
            "http://www.w3.org/1999/xlink",
            false,
            false
          );
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize2);
          properties2[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            attributeName,
            "http://www.w3.org/XML/1998/namespace",
            false,
            false
          );
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties2[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            attributeName.toLowerCase(),
            null,
            false,
            false
          );
        });
        var xlinkHref = "xlinkHref";
        properties2[xlinkHref] = new PropertyInfoRecord(
          "xlinkHref",
          STRING,
          false,
          "xlink:href",
          "http://www.w3.org/1999/xlink",
          true,
          false
        );
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties2[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            attributeName.toLowerCase(),
            null,
            true,
            true
          );
        });
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node2, name, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node2[propertyName];
            } else {
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node2.hasAttribute(attributeName)) {
                  var value2 = node2.getAttribute(attributeName);
                  if (value2 === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return value2;
                  }
                  if (value2 === "" + expected) {
                    return expected;
                  }
                  return value2;
                }
              } else if (node2.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return node2.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node2.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node2, name, expected) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (isOpaqueHydratingObject(expected)) {
              return expected;
            }
            if (!node2.hasAttribute(name)) {
              return expected === void 0 ? void 0 : null;
            }
            var value2 = node2.getAttribute(name);
            if (value2 === "" + expected) {
              return expected;
            }
            return value2;
          }
        }
        function setValueForProperty(node2, name, value2, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name);
          if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name, value2, propertyInfo, isCustomComponentTag)) {
            value2 = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              if (value2 === null) {
                node2.removeAttribute(_attributeName);
              } else {
                node2.setAttribute(_attributeName, "" + value2);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value2 === null) {
              var type = propertyInfo.type;
              node2[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node2[propertyName] = value2;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value2 === null) {
            node2.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value2 === true) {
              attributeValue = "";
            } else {
              {
                attributeValue = "" + value2;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node2.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        var REACT_FRAGMENT_TYPE = 60107;
        var REACT_STRICT_MODE_TYPE = 60108;
        var REACT_PROFILER_TYPE = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        var REACT_SUSPENSE_TYPE = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SCOPE_TYPE = 60119;
        var REACT_OPAQUE_ID_TYPE = 60128;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_OFFSCREEN_TYPE = 60130;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
          REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
          REACT_PROFILER_TYPE = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          symbolFor("react.server.block");
          symbolFor("react.fundamental");
          REACT_SCOPE_TYPE = symbolFor("react.scope");
          REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog
                }),
                info: _assign({}, props, {
                  value: prevInfo
                }),
                warn: _assign({}, props, {
                  value: prevWarn
                }),
                error: _assign({}, props, {
                  value: prevError
                }),
                group: _assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix2;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match5 = x.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match5 && match5[1] || "";
              }
            }
            return "\n" + prefix2 + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        function describeFiber(fiber) {
          fiber._debugOwner ? fiber._debugOwner.type : null;
          fiber._debugSource;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);
            case Block:
              return describeFunctionComponentFrame(fiber.type._render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            var node2 = workInProgress2;
            do {
              info += describeFiber(node2);
              node2 = node2.return;
            } while (node2);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        function getWrappedName2(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context2 = type;
                return getContextName(context2) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName2(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentName(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentName(owner.type);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function getIsRendering() {
          {
            return isRendering;
          }
        }
        function toString2(value2) {
          return "" + value2;
        }
        function getToStringValue(value2) {
          switch (typeof value2) {
            case "boolean":
            case "number":
            case "object":
            case "string":
            case "undefined":
              return value2;
            default:
              return "";
          }
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node2) {
          return node2._valueTracker;
        }
        function detachTracker(node2) {
          node2._valueTracker = null;
        }
        function getValueFromNode(node2) {
          var value2 = "";
          if (!node2) {
            return value2;
          }
          if (isCheckable(node2)) {
            value2 = node2.checked ? "true" : "false";
          } else {
            value2 = node2.value;
          }
          return value2;
        }
        function trackValueOnNode(node2) {
          var valueField = isCheckable(node2) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
          var currentValue = "" + node2[valueField];
          if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get3 = descriptor.get, set3 = descriptor.set;
          Object.defineProperty(node2, valueField, {
            configurable: true,
            get: function() {
              return get3.call(this);
            },
            set: function(value2) {
              currentValue = "" + value2;
              set3.call(this, value2);
            }
          });
          Object.defineProperty(node2, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value2) {
              currentValue = "" + value2;
            },
            stopTracking: function() {
              detachTracker(node2);
              delete node2[valueField];
            }
          };
          return tracker;
        }
        function track(node2) {
          if (getTracker(node2)) {
            return;
          }
          node2._valueTracker = trackValueOnNode(node2);
        }
        function updateValueIfChanged(node2) {
          if (!node2) {
            return false;
          }
          var tracker = getTracker(node2);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node2);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        function getActiveElement2(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node2 = element;
          var checked = props.checked;
          var hostProps = _assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node2._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node2 = element;
          var defaultValue2 = props.defaultValue == null ? "" : props.defaultValue;
          node2._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue2),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node2 = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node2, "checked", checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node2 = element;
          {
            var controlled = isControlled(props);
            if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnUncontrolledToControlled = true;
            }
            if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value2 = getToStringValue(props.value);
          var type = props.type;
          if (value2 != null) {
            if (type === "number") {
              if (value2 === 0 && node2.value === "" || node2.value != value2) {
                node2.value = toString2(value2);
              }
            } else if (node2.value !== toString2(value2)) {
              node2.value = toString2(value2);
            }
          } else if (type === "submit" || type === "reset") {
            node2.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node2, props.type, value2);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node2.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node2 = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString2(node2._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node2.value) {
                  node2.value = initialValue;
                }
              }
            }
            {
              node2.defaultValue = initialValue;
            }
          }
          var name = node2.name;
          if (name !== "") {
            node2.name = "";
          }
          {
            node2.defaultChecked = !node2.defaultChecked;
            node2.defaultChecked = !!node2._wrapperState.initialChecked;
          }
          if (name !== "") {
            node2.name = name;
          }
        }
        function restoreControlledState(element, props) {
          var node2 = element;
          updateWrapper(node2, props);
          updateNamedCousins(node2, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name = props.name;
          if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            var group2 = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for (var i = 0; i < group2.length; i++) {
              var otherNode = group2[i];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps) {
                {
                  throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node2, type, value2) {
          if (type !== "number" || getActiveElement2(node2.ownerDocument) !== node2) {
            if (value2 == null) {
              node2.defaultValue = toString2(node2._wrapperState.initialValue);
            } else if (node2.defaultValue !== toString2(value2)) {
              node2.defaultValue = toString2(value2);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        function flattenChildren(children) {
          var content = "";
          React2.Children.forEach(children, function(child) {
            if (child == null) {
              return;
            }
            content += child;
          });
          return content;
        }
        function validateProps(element, props) {
          {
            if (typeof props.children === "object" && props.children !== null) {
              React2.Children.forEach(props.children, function(child) {
                if (child == null) {
                  return;
                }
                if (typeof child === "string" || typeof child === "number") {
                  return;
                }
                if (typeof child.type !== "string") {
                  return;
                }
                if (!didWarnInvalidChild) {
                  didWarnInvalidChild = true;
                  error("Only strings and numbers are supported as <option> children.");
                }
              });
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute("value", toString2(getToStringValue(props.value)));
          }
        }
        function getHostProps$1(element, props) {
          var hostProps = _assign({
            children: void 0
          }, props);
          var content = flattenChildren(props.children);
          if (content) {
            hostProps.children = content;
          }
          return hostProps;
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps("select", props);
            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i];
              if (props[propName] == null) {
                continue;
              }
              var isArray3 = Array.isArray(props[propName]);
              if (props.multiple && !isArray3) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && isArray3) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node2, multiple, propValue, setDefaultSelected) {
          var options2 = node2.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i = 0; i < selectedValues.length; i++) {
              selectedValue["$" + selectedValues[i]] = true;
            }
            for (var _i = 0; _i < options2.length; _i++) {
              var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
              if (options2[_i].selected !== selected) {
                options2[_i].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options2[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString2(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options2.length; _i2++) {
              if (options2[_i2].value === _selectedValue) {
                options2[_i2].selected = true;
                if (setDefaultSelected) {
                  options2[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options2[_i2].disabled) {
                defaultSelected = options2[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$2(element, props) {
          return _assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node2 = element;
          {
            checkSelectPropTypes(props);
          }
          node2._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node2 = element;
          node2.multiple = !!props.multiple;
          var value2 = props.value;
          if (value2 != null) {
            updateOptions(node2, !!props.multiple, value2, false);
          } else if (props.defaultValue != null) {
            updateOptions(node2, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node2 = element;
          var wasMultiple = node2._wrapperState.wasMultiple;
          node2._wrapperState.wasMultiple = !!props.multiple;
          var value2 = props.value;
          if (value2 != null) {
            updateOptions(node2, !!props.multiple, value2, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node2, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node2 = element;
          var value2 = props.value;
          if (value2 != null) {
            updateOptions(node2, !!props.multiple, value2, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$3(element, props) {
          var node2 = element;
          if (!(props.dangerouslySetInnerHTML == null)) {
            {
              throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
          }
          var hostProps = _assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString2(node2._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node2 = element;
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children, defaultValue2 = props.defaultValue;
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (!(defaultValue2 == null)) {
                  {
                    throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                }
                if (Array.isArray(children)) {
                  if (!(children.length <= 1)) {
                    {
                      throw Error("<textarea> can only have at most one child.");
                    }
                  }
                  children = children[0];
                }
                defaultValue2 = children;
              }
            }
            if (defaultValue2 == null) {
              defaultValue2 = "";
            }
            initialValue = defaultValue2;
          }
          node2._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node2 = element;
          var value2 = getToStringValue(props.value);
          var defaultValue2 = getToStringValue(props.defaultValue);
          if (value2 != null) {
            var newValue = toString2(value2);
            if (newValue !== node2.value) {
              node2.value = newValue;
            }
            if (props.defaultValue == null && node2.defaultValue !== newValue) {
              node2.defaultValue = newValue;
            }
          }
          if (defaultValue2 != null) {
            node2.defaultValue = toString2(defaultValue2);
          }
        }
        function postMountWrapper$3(element, props) {
          var node2 = element;
          var textContent = node2.textContent;
          if (textContent === node2._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node2.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        var Namespaces = {
          html: HTML_NAMESPACE,
          mathml: MATH_NAMESPACE,
          svg: SVG_NAMESPACE
        };
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html) {
          if (node2.namespaceURI === Namespaces.svg) {
            if (!("innerHTML" in node2)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node2.firstChild) {
                node2.removeChild(node2.firstChild);
              }
              while (svgNode.firstChild) {
                node2.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node2.innerHTML = html;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function(node2, text) {
          if (text) {
            var firstChild = node2.firstChild;
            if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node2.textContent = text;
        };
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix3, key) {
          return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix3) {
            isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name, value2, isCustomProperty2) {
          var isEmpty2 = value2 == null || typeof value2 === "boolean" || value2 === "";
          if (isEmpty2) {
            return "";
          }
          if (!isCustomProperty2 && typeof value2 === "number" && value2 !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
            return value2 + "px";
          }
          return ("" + value2).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern2 = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern2, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern2 = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern2, function(_2, character2) {
              return character2.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error(
              "Unsupported style property %s. Did you mean %s?",
              name,
              camelize(name.replace(msPattern$1, "ms-"))
            );
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value2) {
            if (warnedStyleValues.hasOwnProperty(value2) && warnedStyleValues[value2]) {
              return;
            }
            warnedStyleValues[value2] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value2.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value2) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value2) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value2) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value2)) {
              warnStyleValueWithSemicolon(name, value2);
            }
            if (typeof value2 === "number") {
              if (isNaN(value2)) {
                warnStyleValueIsNaN(name, value2);
              } else if (!isFinite(value2)) {
                warnStyleValueIsInfinity(name, value2);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles2) {
          {
            var serialized = "";
            var delimiter2 = "";
            for (var styleName in styles2) {
              if (!styles2.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles2[styleName];
              if (styleValue != null) {
                var isCustomProperty2 = styleName.indexOf("--") === 0;
                serialized += delimiter2 + (isCustomProperty2 ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty2);
                delimiter2 = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node2, styles2) {
          var style3 = node2.style;
          for (var styleName in styles2) {
            if (!styles2.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty2 = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty2) {
                warnValidStyle$1(styleName, styles2[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles2[styleName], isCustomProperty2);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty2) {
              style3.setProperty(styleName, styleValue);
            } else {
              style3[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value2) {
          return value2 == null || typeof value2 === "boolean" || value2 === "";
        }
        function expandShorthandMap(styles2) {
          var expanded = {};
          for (var key in styles2) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i = 0; i < longhands.length; i++) {
              expanded[longhands[i]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
        };
        var voidElementTags = _assign({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
              {
                throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (!(props.children == null)) {
              {
                throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
            }
            if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
              {
                throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (!(props.style == null || typeof props.style === "object")) {
            {
              throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var hasOwnProperty$12 = Object.prototype.hasOwnProperty;
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty$12.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid2 = validateProperty(type, key);
              if (!isValid2) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var _hasOwnProperty = Object.prototype.hasOwnProperty;
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value2, eventRegistry) {
            if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies2.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value2 !== null && value2 !== void 0 && typeof value2 !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value2);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value2 === "number" && isNaN(value2)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value2 === "boolean" && shouldRemoveAttributeWithWarning(name, value2, propertyInfo, false)) {
              if (value2) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value2, name, name, value2, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value2, name, name, value2, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value2, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value2 === "false" || value2 === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value2, name, value2 === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value2);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid2 = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid2) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        var IS_NON_DELEGATED = 1 << 1;
        var IS_CAPTURE_PHASE = 1 << 2;
        var IS_REPLAYED = 1 << 4;
        var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (!(typeof restoreImpl === "function")) {
            {
              throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i = 0; i < queuedTargets.length; i++) {
              restoreStateOfTarget(queuedTargets[i]);
            }
          }
        }
        var batchedUpdatesImpl = function(fn, bookkeeping) {
          return fn(bookkeeping);
        };
        var discreteUpdatesImpl = function(fn, a, b, c, d) {
          return fn(a, b, c, d);
        };
        var flushDiscreteUpdatesImpl = function() {
        };
        var batchedEventUpdatesImpl = batchedUpdatesImpl;
        var isInsideEventHandler = false;
        var isBatchingEventUpdates = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushDiscreteUpdatesImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, bookkeeping) {
          if (isInsideEventHandler) {
            return fn(bookkeeping);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn, bookkeeping);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function batchedEventUpdates(fn, a, b) {
          if (isBatchingEventUpdates) {
            return fn(a, b);
          }
          isBatchingEventUpdates = true;
          try {
            return batchedEventUpdatesImpl(fn, a, b);
          } finally {
            isBatchingEventUpdates = false;
            finishEventHandler();
          }
        }
        function discreteUpdates(fn, a, b, c, d) {
          var prevIsInsideEventHandler = isInsideEventHandler;
          isInsideEventHandler = true;
          try {
            return discreteUpdatesImpl(fn, a, b, c, d);
          } finally {
            isInsideEventHandler = prevIsInsideEventHandler;
            if (!isInsideEventHandler) {
              finishEventHandler();
            }
          }
        }
        function flushDiscreteUpdatesIfNeeded(timeStamp) {
          {
            if (!isInsideEventHandler) {
              flushDiscreteUpdatesImpl();
            }
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          discreteUpdatesImpl = _discreteUpdatesImpl;
          flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
          batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (stateNode === null) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (props === null) {
            return null;
          }
          var listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (!(!listener || typeof listener === "function")) {
            {
              throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
          }
          return listener;
        }
        var passiveBrowserEventsSupported = false;
        if (canUseDOM) {
          try {
            var options = {};
            Object.defineProperty(options, "passive", {
              get: function() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options, options);
            window.removeEventListener("test", options, options);
          } catch (e) {
            passiveBrowserEventsSupported = false;
          }
        }
        function invokeGuardedCallbackProd(name, func, context2, a, b, c, d, e, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context2, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context2, a, b, c, d, e, f) {
              if (!(typeof document !== "undefined")) {
                {
                  throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
              }
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context2, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name, func, context2, a, b, c, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name, func, context2, a, b, c, d, e, f) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            {
              {
                throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        function get2(key) {
          return key._reactInternals;
        }
        function has2(key) {
          return key._reactInternals !== void 0;
        }
        function set2(key, value2) {
          key._reactInternals = value2;
        }
        var NoFlags = 0;
        var PerformedWork = 1;
        var Placement = 2;
        var Update = 4;
        var PlacementAndUpdate = 6;
        var Deletion = 8;
        var ContentReset = 16;
        var Callback = 32;
        var DidCapture = 64;
        var Ref = 128;
        var Snapshot = 256;
        var Passive = 512;
        var PassiveUnmountPendingDev = 8192;
        var Hydrating = 1024;
        var HydratingAndUpdate = 1028;
        var LifecycleEffectMask = 932;
        var HostEffectMask = 2047;
        var Incomplete = 2048;
        var ShouldCapture = 4096;
        var ForceUpdateForLegacySuspense = 16384;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node2 = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node2;
            do {
              node2 = nextNode;
              if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
                nearestMounted = node2.return;
              }
              nextNode = node2.return;
            } while (nextNode);
          } else {
            while (node2.return) {
              node2 = node2.return;
            }
          }
          if (node2.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get2(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (!(getNearestMountedFiber(fiber) === fiber)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (!(nearestMounted !== null)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a = fiber;
          var b = alternate;
          while (true) {
            var parentA = a.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a = b = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
            }
            if (a.return !== b.return) {
              a = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  {
                    throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
            }
            if (!(a.alternate === b)) {
              {
                throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if (!(a.tag === HostRoot)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
          if (a.stateNode.current === a) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent2) {
          var currentParent = findCurrentFiberUsingSlowPath(parent2);
          if (!currentParent) {
            return null;
          }
          var node2 = currentParent;
          while (true) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            } else if (node2.child) {
              node2.child.return = node2;
              node2 = node2.child;
              continue;
            }
            if (node2 === currentParent) {
              return null;
            }
            while (!node2.sibling) {
              if (!node2.return || node2.return === currentParent) {
                return null;
              }
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent2) {
          var currentParent = findCurrentFiberUsingSlowPath(parent2);
          if (!currentParent) {
            return null;
          }
          var node2 = currentParent;
          while (true) {
            if (node2.tag === HostComponent || node2.tag === HostText || enableFundamentalAPI) {
              return node2;
            } else if (node2.child && node2.tag !== HostPortal) {
              node2.child.return = node2;
              node2 = node2.child;
              continue;
            }
            if (node2 === currentParent) {
              return null;
            }
            while (!node2.sibling) {
              if (!node2.return || node2.return === currentParent) {
                return null;
              }
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
          return null;
        }
        function doesFiberContain(parentFiber, childFiber) {
          var node2 = childFiber;
          var parentFiberAlternate = parentFiber.alternate;
          while (node2 !== null) {
            if (node2 === parentFiber || node2 === parentFiberAlternate) {
              return true;
            }
            node2 = node2.return;
          }
          return false;
        }
        var attemptUserBlockingHydration;
        function setAttemptUserBlockingHydration(fn) {
          attemptUserBlockingHydration = fn;
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var attemptHydrationAtPriority;
        function setAttemptHydrationAtPriority(fn) {
          attemptHydrationAtPriority = fn;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = /* @__PURE__ */ new Map();
        var queuedPointerCaptures = /* @__PURE__ */ new Map();
        var queuedExplicitHydrationTargets = [];
        function hasQueuedDiscreteEvents() {
          return queuedDiscreteEvents.length > 0;
        }
        var discreteReplayableEvents = [
          "mousedown",
          "mouseup",
          "touchcancel",
          "touchend",
          "touchstart",
          "auxclick",
          "dblclick",
          "pointercancel",
          "pointerdown",
          "pointerup",
          "dragend",
          "dragstart",
          "drop",
          "compositionend",
          "compositionstart",
          "keydown",
          "keypress",
          "keyup",
          "input",
          "textInput",
          "copy",
          "cut",
          "paste",
          "click",
          "change",
          "contextmenu",
          "reset",
          "submit"
        ];
        function isReplayableDiscreteEvent(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags: eventSystemFlags | IS_REPLAYED,
            nativeEvent,
            targetContainers: [targetContainer]
          };
        }
        function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          queuedDiscreteEvents.push(queuedEvent);
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout": {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case "gotpointercapture":
            case "lostpointercapture": {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;
          if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
            targetContainers.push(targetContainer);
          }
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin": {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
              return true;
            }
            case "dragenter": {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
              return true;
            }
            case "mouseover": {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
              return true;
            }
            case "pointerover": {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
              return true;
            }
            case "gotpointercapture": {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                    Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root3 = nearestMounted.stateNode;
                if (root3.hydrate) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var targetContainers = queuedEvent.targetContainers;
          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn !== null) {
              var _fiber3 = getInstanceFromNode(nextBlockedOn);
              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map2) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map2.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          while (queuedDiscreteEvents.length > 0) {
            var nextDiscreteEvent = queuedDiscreteEvents[0];
            if (nextDiscreteEvent.blockedOn !== null) {
              var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
              if (_fiber4 !== null) {
                attemptUserBlockingHydration(_fiber4);
              }
              break;
            }
            var targetContainers = nextDiscreteEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
              if (nextBlockedOn !== null) {
                nextDiscreteEvent.blockedOn = nextBlockedOn;
                break;
              }
              targetContainers.shift();
            }
            if (nextDiscreteEvent.blockedOn === null) {
              queuedDiscreteEvents.shift();
            }
          }
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i = 1; i < queuedDiscreteEvents.length; i++) {
              var queuedEvent = queuedDiscreteEvents[i];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        var DiscreteEvent = 0;
        var UserBlockingEvent = 1;
        var ContinuousEvent = 2;
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style2 = {};
        if (canUseDOM) {
          style2 = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style2) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var ANIMATION_END = getVendorPrefixedEventName("animationend");
        var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
        var ANIMATION_START = getVendorPrefixedEventName("animationstart");
        var TRANSITION_END = getVendorPrefixedEventName("transitionend");
        var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
        var eventPriorities = /* @__PURE__ */ new Map();
        var discreteEventPairsForSimpleEventPlugin = [
          "cancel",
          "cancel",
          "click",
          "click",
          "close",
          "close",
          "contextmenu",
          "contextMenu",
          "copy",
          "copy",
          "cut",
          "cut",
          "auxclick",
          "auxClick",
          "dblclick",
          "doubleClick",
          "dragend",
          "dragEnd",
          "dragstart",
          "dragStart",
          "drop",
          "drop",
          "focusin",
          "focus",
          "focusout",
          "blur",
          "input",
          "input",
          "invalid",
          "invalid",
          "keydown",
          "keyDown",
          "keypress",
          "keyPress",
          "keyup",
          "keyUp",
          "mousedown",
          "mouseDown",
          "mouseup",
          "mouseUp",
          "paste",
          "paste",
          "pause",
          "pause",
          "play",
          "play",
          "pointercancel",
          "pointerCancel",
          "pointerdown",
          "pointerDown",
          "pointerup",
          "pointerUp",
          "ratechange",
          "rateChange",
          "reset",
          "reset",
          "seeked",
          "seeked",
          "submit",
          "submit",
          "touchcancel",
          "touchCancel",
          "touchend",
          "touchEnd",
          "touchstart",
          "touchStart",
          "volumechange",
          "volumeChange"
        ];
        var otherDiscreteEvents = ["change", "selectionchange", "textInput", "compositionstart", "compositionend", "compositionupdate"];
        var userBlockingPairsForSimpleEventPlugin = ["drag", "drag", "dragenter", "dragEnter", "dragexit", "dragExit", "dragleave", "dragLeave", "dragover", "dragOver", "mousemove", "mouseMove", "mouseout", "mouseOut", "mouseover", "mouseOver", "pointermove", "pointerMove", "pointerout", "pointerOut", "pointerover", "pointerOver", "scroll", "scroll", "toggle", "toggle", "touchmove", "touchMove", "wheel", "wheel"];
        var continuousPairsForSimpleEventPlugin = ["abort", "abort", ANIMATION_END, "animationEnd", ANIMATION_ITERATION, "animationIteration", ANIMATION_START, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", TRANSITION_END, "transitionEnd", "waiting", "waiting"];
        function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
          for (var i = 0; i < eventTypes.length; i += 2) {
            var topEvent = eventTypes[i];
            var event = eventTypes[i + 1];
            var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
            var reactName = "on" + capitalizedEvent;
            eventPriorities.set(topEvent, priority);
            topLevelEventsToReactNames.set(topEvent, reactName);
            registerTwoPhaseEvent(reactName, [topEvent]);
          }
        }
        function setEventPriorities(eventTypes, priority) {
          for (var i = 0; i < eventTypes.length; i++) {
            eventPriorities.set(eventTypes[i], priority);
          }
        }
        function getEventPriorityForPluginSystem(domEventName) {
          var priority = eventPriorities.get(domEventName);
          return priority === void 0 ? ContinuousEvent : priority;
        }
        function registerSimpleEvents() {
          registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
          registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
          registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
          setEventPriorities(otherDiscreteEvents, DiscreteEvent);
        }
        var Scheduler_now = Scheduler.unstable_now;
        {
          if (!(tracing$1.__interactionsRef != null && tracing$1.__interactionsRef.current != null)) {
            {
              throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
            }
          }
        }
        var ImmediatePriority = 99;
        var UserBlockingPriority = 98;
        var NormalPriority = 97;
        var LowPriority = 96;
        var IdlePriority = 95;
        var NoPriority = 90;
        Scheduler_now();
        var SyncLanePriority = 15;
        var SyncBatchedLanePriority = 14;
        var InputDiscreteHydrationLanePriority = 13;
        var InputDiscreteLanePriority = 12;
        var InputContinuousHydrationLanePriority = 11;
        var InputContinuousLanePriority = 10;
        var DefaultHydrationLanePriority = 9;
        var DefaultLanePriority = 8;
        var TransitionHydrationPriority = 7;
        var TransitionPriority = 6;
        var RetryLanePriority = 5;
        var SelectiveHydrationLanePriority = 4;
        var IdleHydrationLanePriority = 3;
        var IdleLanePriority = 2;
        var OffscreenLanePriority = 1;
        var NoLanePriority = 0;
        var TotalLanes = 31;
        var NoLanes = 0;
        var NoLane = 0;
        var SyncLane = 1;
        var SyncBatchedLane = 2;
        var InputDiscreteHydrationLane = 4;
        var InputDiscreteLanes = 24;
        var InputContinuousHydrationLane = 32;
        var InputContinuousLanes = 192;
        var DefaultHydrationLane = 256;
        var DefaultLanes = 3584;
        var TransitionHydrationLane = 4096;
        var TransitionLanes = 4186112;
        var RetryLanes = 62914560;
        var SomeRetryLane = 33554432;
        var SelectiveHydrationLane = 67108864;
        var NonIdleLanes = 134217727;
        var IdleHydrationLane = 134217728;
        var IdleLanes = 805306368;
        var OffscreenLane = 1073741824;
        var NoTimestamp = -1;
        function setCurrentUpdateLanePriority(newLanePriority) {
        }
        var return_highestLanePriority = DefaultLanePriority;
        function getHighestPriorityLanes(lanes) {
          if ((SyncLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncLanePriority;
            return SyncLane;
          }
          if ((SyncBatchedLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncBatchedLanePriority;
            return SyncBatchedLane;
          }
          if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
            return_highestLanePriority = InputDiscreteHydrationLanePriority;
            return InputDiscreteHydrationLane;
          }
          var inputDiscreteLanes = InputDiscreteLanes & lanes;
          if (inputDiscreteLanes !== NoLanes) {
            return_highestLanePriority = InputDiscreteLanePriority;
            return inputDiscreteLanes;
          }
          if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
            return_highestLanePriority = InputContinuousHydrationLanePriority;
            return InputContinuousHydrationLane;
          }
          var inputContinuousLanes = InputContinuousLanes & lanes;
          if (inputContinuousLanes !== NoLanes) {
            return_highestLanePriority = InputContinuousLanePriority;
            return inputContinuousLanes;
          }
          if ((lanes & DefaultHydrationLane) !== NoLanes) {
            return_highestLanePriority = DefaultHydrationLanePriority;
            return DefaultHydrationLane;
          }
          var defaultLanes = DefaultLanes & lanes;
          if (defaultLanes !== NoLanes) {
            return_highestLanePriority = DefaultLanePriority;
            return defaultLanes;
          }
          if ((lanes & TransitionHydrationLane) !== NoLanes) {
            return_highestLanePriority = TransitionHydrationPriority;
            return TransitionHydrationLane;
          }
          var transitionLanes = TransitionLanes & lanes;
          if (transitionLanes !== NoLanes) {
            return_highestLanePriority = TransitionPriority;
            return transitionLanes;
          }
          var retryLanes = RetryLanes & lanes;
          if (retryLanes !== NoLanes) {
            return_highestLanePriority = RetryLanePriority;
            return retryLanes;
          }
          if (lanes & SelectiveHydrationLane) {
            return_highestLanePriority = SelectiveHydrationLanePriority;
            return SelectiveHydrationLane;
          }
          if ((lanes & IdleHydrationLane) !== NoLanes) {
            return_highestLanePriority = IdleHydrationLanePriority;
            return IdleHydrationLane;
          }
          var idleLanes = IdleLanes & lanes;
          if (idleLanes !== NoLanes) {
            return_highestLanePriority = IdleLanePriority;
            return idleLanes;
          }
          if ((OffscreenLane & lanes) !== NoLanes) {
            return_highestLanePriority = OffscreenLanePriority;
            return OffscreenLane;
          }
          {
            error("Should have found matching lanes. This is a bug in React.");
          }
          return_highestLanePriority = DefaultLanePriority;
          return lanes;
        }
        function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
          switch (schedulerPriorityLevel) {
            case ImmediatePriority:
              return SyncLanePriority;
            case UserBlockingPriority:
              return InputContinuousLanePriority;
            case NormalPriority:
            case LowPriority:
              return DefaultLanePriority;
            case IdlePriority:
              return IdleLanePriority;
            default:
              return NoLanePriority;
          }
        }
        function lanePriorityToSchedulerPriority(lanePriority) {
          switch (lanePriority) {
            case SyncLanePriority:
            case SyncBatchedLanePriority:
              return ImmediatePriority;
            case InputDiscreteHydrationLanePriority:
            case InputDiscreteLanePriority:
            case InputContinuousHydrationLanePriority:
            case InputContinuousLanePriority:
              return UserBlockingPriority;
            case DefaultHydrationLanePriority:
            case DefaultLanePriority:
            case TransitionHydrationPriority:
            case TransitionPriority:
            case SelectiveHydrationLanePriority:
            case RetryLanePriority:
              return NormalPriority;
            case IdleHydrationLanePriority:
            case IdleLanePriority:
            case OffscreenLanePriority:
              return IdlePriority;
            case NoLanePriority:
              return NoPriority;
            default: {
              {
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
              }
            }
          }
        }
        function getNextLanes(root3, wipLanes) {
          var pendingLanes = root3.pendingLanes;
          if (pendingLanes === NoLanes) {
            return_highestLanePriority = NoLanePriority;
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var nextLanePriority = NoLanePriority;
          var expiredLanes = root3.expiredLanes;
          var suspendedLanes = root3.suspendedLanes;
          var pingedLanes = root3.pingedLanes;
          if (expiredLanes !== NoLanes) {
            nextLanes = expiredLanes;
            nextLanePriority = return_highestLanePriority = SyncLanePriority;
          } else {
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                nextLanePriority = return_highestLanePriority;
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                  nextLanePriority = return_highestLanePriority;
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
                nextLanePriority = return_highestLanePriority;
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                  nextLanePriority = return_highestLanePriority;
                }
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
          if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
            getHighestPriorityLanes(wipLanes);
            var wipLanePriority = return_highestLanePriority;
            if (nextLanePriority <= wipLanePriority) {
              return wipLanes;
            } else {
              return_highestLanePriority = nextLanePriority;
            }
          }
          var entangledLanes = root3.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root3.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              nextLanes |= entanglements[index2];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function getMostRecentEventTime(root3, lanes) {
          var eventTimes = root3.eventTimes;
          var mostRecentEventTime = NoTimestamp;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var eventTime = eventTimes[index2];
            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }
            lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
          getHighestPriorityLanes(lane);
          var priority = return_highestLanePriority;
          if (priority >= InputContinuousLanePriority) {
            return currentTime + 250;
          } else if (priority >= TransitionPriority) {
            return currentTime + 5e3;
          } else {
            return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root3, currentTime) {
          var pendingLanes = root3.pendingLanes;
          var suspendedLanes = root3.suspendedLanes;
          var pingedLanes = root3.pingedLanes;
          var expirationTimes = root3.expirationTimes;
          var lanes = pendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var expirationTime = expirationTimes[index2];
            if (expirationTime === NoTimestamp) {
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                expirationTimes[index2] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              root3.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getLanesToRetrySynchronouslyOnError(root3) {
          var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function returnNextLanesPriority() {
          return return_highestLanePriority;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function findUpdateLane(lanePriority, wipLanes) {
          switch (lanePriority) {
            case NoLanePriority:
              break;
            case SyncLanePriority:
              return SyncLane;
            case SyncBatchedLanePriority:
              return SyncBatchedLane;
            case InputDiscreteLanePriority: {
              var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
              if (_lane === NoLane) {
                return findUpdateLane(InputContinuousLanePriority, wipLanes);
              }
              return _lane;
            }
            case InputContinuousLanePriority: {
              var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
              if (_lane2 === NoLane) {
                return findUpdateLane(DefaultLanePriority, wipLanes);
              }
              return _lane2;
            }
            case DefaultLanePriority: {
              var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
              if (_lane3 === NoLane) {
                _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(DefaultLanes);
                }
              }
              return _lane3;
            }
            case TransitionPriority:
            case RetryLanePriority:
              break;
            case IdleLanePriority:
              var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
              if (lane === NoLane) {
                lane = pickArbitraryLane(IdleLanes);
              }
              return lane;
          }
          {
            {
              throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
            }
          }
        }
        function findTransitionLane(wipLanes, pendingLanes) {
          var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
          if (lane === NoLane) {
            lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(TransitionLanes);
            }
          }
          return lane;
        }
        function findRetryLane(wipLanes) {
          var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
          if (lane === NoLane) {
            lane = pickArbitraryLane(RetryLanes);
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function getLowestPriorityLane(lanes) {
          var index2 = 31 - clz32(lanes);
          return index2 < 0 ? NoLanes : 1 << index2;
        }
        function getEqualOrHigherPriorityLanes(lanes) {
          return (getLowestPriorityLane(lanes) << 1) - 1;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a, b) {
          return (a & b) !== NoLanes;
        }
        function isSubsetOfLanes(set3, subset) {
          return (set3 & subset) === subset;
        }
        function mergeLanes(a, b) {
          return a | b;
        }
        function removeLanes(set3, subset) {
          return set3 & ~subset;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a, b) {
          return a !== NoLane && a < b ? a : b;
        }
        function createLaneMap(initial) {
          var laneMap = [];
          for (var i = 0; i < TotalLanes; i++) {
            laneMap.push(initial);
          }
          return laneMap;
        }
        function markRootUpdated(root3, updateLane, eventTime) {
          root3.pendingLanes |= updateLane;
          var higherPriorityLanes = updateLane - 1;
          root3.suspendedLanes &= higherPriorityLanes;
          root3.pingedLanes &= higherPriorityLanes;
          var eventTimes = root3.eventTimes;
          var index2 = laneToIndex(updateLane);
          eventTimes[index2] = eventTime;
        }
        function markRootSuspended(root3, suspendedLanes) {
          root3.suspendedLanes |= suspendedLanes;
          root3.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root3.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged(root3, pingedLanes, eventTime) {
          root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
        }
        function markDiscreteUpdatesExpired(root3) {
          root3.expiredLanes |= InputDiscreteLanes & root3.pendingLanes;
        }
        function hasDiscreteLanes(lanes) {
          return (lanes & InputDiscreteLanes) !== NoLanes;
        }
        function markRootMutableRead(root3, updateLane) {
          root3.mutableReadLanes |= updateLane & root3.pendingLanes;
        }
        function markRootFinished(root3, remainingLanes) {
          var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
          root3.pendingLanes = remainingLanes;
          root3.suspendedLanes = 0;
          root3.pingedLanes = 0;
          root3.expiredLanes &= remainingLanes;
          root3.mutableReadLanes &= remainingLanes;
          root3.entangledLanes &= remainingLanes;
          var entanglements = root3.entanglements;
          var eventTimes = root3.eventTimes;
          var expirationTimes = root3.expirationTimes;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            entanglements[index2] = NoLanes;
            eventTimes[index2] = NoTimestamp;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root3, entangledLanes) {
          root3.entangledLanes |= entangledLanes;
          var entanglements = root3.entanglements;
          var lanes = entangledLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            entanglements[index2] |= entangledLanes;
            lanes &= ~lane;
          }
        }
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(lanes) {
          if (lanes === 0) {
            return 32;
          }
          return 31 - (log(lanes) / LN2 | 0) | 0;
        }
        var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          var eventPriority = getEventPriorityForPluginSystem(domEventName);
          var listenerWrapper;
          switch (eventPriority) {
            case DiscreteEvent:
              listenerWrapper = dispatchDiscreteEvent;
              break;
            case UserBlockingEvent:
              listenerWrapper = dispatchUserBlockingUpdate;
              break;
            case ContinuousEvent:
            default:
              listenerWrapper = dispatchEvent;
              break;
          }
          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          {
            flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
          }
          discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
        }
        function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
          {
            runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
          }
        }
        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!_enabled) {
            return;
          }
          var allowReplay = true;
          {
            allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
          }
          if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
            queueDiscreteEvent(
              null,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            );
            return;
          }
          var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn === null) {
            if (allowReplay) {
              clearIfContinuousEvent(domEventName, nativeEvent);
            }
            return;
          }
          if (allowReplay) {
            if (isReplayableDiscreteEvent(domEventName)) {
              queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        }
        function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root3 = nearestMounted.stateNode;
                if (root3.hydrate) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
          return null;
        }
        function addEventBubbleListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, false);
          return listener;
        }
        function addEventCaptureListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, true);
          return listener;
        }
        function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive2) {
          target.addEventListener(eventType, listener, {
            capture: true,
            passive: passive2
          });
          return listener;
        }
        function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive2) {
          target.addEventListener(eventType, listener, {
            passive: passive2
          });
          return listener;
        }
        var root2 = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root2 = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset() {
          root2 = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start2;
          var startValue = startText;
          var startLength = startValue.length;
          var end2;
          var endValue = getText();
          var endLength = endValue.length;
          for (start2 = 0; start2 < startLength; start2++) {
            if (startValue[start2] !== endValue[start2]) {
              break;
            }
          }
          var minEnd = startLength - start2;
          for (end2 = 1; end2 <= minEnd; end2++) {
            if (startValue[startLength - end2] !== endValue[endLength - end2]) {
              break;
            }
          }
          var sliceTail = end2 > 1 ? 1 - end2 : void 0;
          fallbackText = endValue.slice(start2, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root2) {
            return root2.value;
          }
          return root2.textContent;
        }
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }
              var normalize = Interface[_propName];
              if (normalize) {
                this[_propName] = normalize(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          _assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            persist: function() {
            },
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);
        var UIEventInterface = _assign({}, EventInterface, {
          view: 0,
          detail: 0
        });
        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }
            lastMouseEvent = event;
          }
        }
        var MouseEventInterface = _assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            if (event.relatedTarget === void 0)
              return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            return lastMovementY;
          }
        });
        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        var DragEventInterface = _assign({}, MouseEventInterface, {
          dataTransfer: 0
        });
        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        var FocusEventInterface = _assign({}, UIEventInterface, {
          relatedTarget: 0
        });
        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        var AnimationEventInterface = _assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        var ClipboardEventInterface = _assign({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        var CompositionEventInterface = _assign({}, EventInterface, {
          data: 0
        });
        var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        var SyntheticInputEvent = SyntheticCompositionEvent;
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = _assign({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        var PointerEventInterface = _assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        });
        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        var TouchEventInterface = _assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        });
        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        var TransitionEventInterface = _assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        var WheelEventInterface = _assign({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
          },
          deltaZ: 0,
          deltaMode: 0
        });
        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        function registerEvents() {
          registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
          registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        }
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case "compositionstart":
              return "onCompositionStart";
            case "compositionend":
              return "onCompositionEnd";
            case "compositionupdate":
              return "onCompositionUpdate";
          }
        }
        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType = "onCompositionStart";
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType = "onCompositionEnd";
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === "onCompositionStart") {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === "onCompositionEnd") {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
          if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.data = chars;
          }
        }
        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        /**
         * Checks if an event is supported in the current execution environment.
         *
         * NOTE: This will not work correctly for non-generic events such as `change`,
         * `reset`, `load`, `error`, and `select`.
         *
         * Borrows from Modernizr.
         *
         * @param {string} eventNameSuffix Event name, e.g. "click".
         * @return {boolean} True if the event is supported.
         * @internal
         * @license Modernizr 3.0.0pre (Custom Build) | MIT
         */
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          return isSupported;
        }
        function registerEvents$1() {
          registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          enqueueStateRestore(target);
          var listeners = accumulateTwoPhaseListeners(inst, "onChange");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, dispatchQueue);
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === "change") {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          if (domEventName === "focusin") {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (domEventName === "focusout") {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === "click") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === "input" || domEventName === "change") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node2) {
          var state = node2._wrapperState;
          if (!state || !state.controlled || node2.type !== "number") {
            return;
          }
          {
            setDefaultValue(node2, "number", node2.value);
          }
        }
        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          var getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }
          if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
              createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
              return;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          }
          if (domEventName === "focusout") {
            handleControlledInputBlur(targetNode);
          }
        }
        function registerEvents$2() {
          registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
          registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
          registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
          registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        }
        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
          var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
          if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
              if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                return;
              }
            }
          }
          if (!isOutEvent && !isOverEvent) {
            return;
          }
          var win;
          if (nativeEventTarget.window === nativeEventTarget) {
            win = nativeEventTarget;
          } else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }
          var from2;
          var to2;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from2 = targetInst;
            to2 = _related ? getClosestInstanceFromNode(_related) : null;
            if (to2 !== null) {
              var nearestMounted = getNearestMountedFiber(to2);
              if (to2 !== nearestMounted || to2.tag !== HostComponent && to2.tag !== HostText) {
                to2 = null;
              }
            }
          } else {
            from2 = null;
            to2 = targetInst;
          }
          if (from2 === to2) {
            return;
          }
          var SyntheticEventCtor = SyntheticMouseEvent;
          var leaveEventType = "onMouseLeave";
          var enterEventType = "onMouseEnter";
          var eventTypePrefix = "mouse";
          if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
          }
          var fromNode = from2 == null ? win : getNodeFromInstance(from2);
          var toNode = to2 == null ? win : getNodeFromInstance(to2);
          var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          var enter = null;
          var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to2, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
          }
          accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from2, to2);
        }
        function is2(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is2;
        var hasOwnProperty$22 = Object.prototype.hasOwnProperty;
        function shallowEqual2(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i = 0; i < keysA.length; i++) {
            if (!hasOwnProperty$22.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
              return false;
            }
          }
          return true;
        }
        function getLeafNode(node2) {
          while (node2 && node2.firstChild) {
            node2 = node2.firstChild;
          }
          return node2;
        }
        function getSiblingNode(node2) {
          while (node2) {
            if (node2.nextSibling) {
              return node2.nextSibling;
            }
            node2 = node2.parentNode;
          }
        }
        function getNodeForCharacterOffset(root3, offset2) {
          var node2 = getLeafNode(root3);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node2) {
            if (node2.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node2.textContent.length;
              if (nodeStart <= offset2 && nodeEnd >= offset2) {
                return {
                  node: node2,
                  offset: offset2 - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node2 = getLeafNode(getSiblingNode(node2));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument2 = outerNode.ownerDocument;
          var win = ownerDocument2 && ownerDocument2.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length2 = 0;
          var start2 = -1;
          var end2 = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node2 = outerNode;
          var parentNode = null;
          outer:
            while (true) {
              var next2 = null;
              while (true) {
                if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
                  start2 = length2 + anchorOffset;
                }
                if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
                  end2 = length2 + focusOffset;
                }
                if (node2.nodeType === TEXT_NODE) {
                  length2 += node2.nodeValue.length;
                }
                if ((next2 = node2.firstChild) === null) {
                  break;
                }
                parentNode = node2;
                node2 = next2;
              }
              while (true) {
                if (node2 === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start2 = length2;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end2 = length2;
                }
                if ((next2 = node2.nextSibling) !== null) {
                  break;
                }
                node2 = parentNode;
                parentNode = node2.parentNode;
              }
              node2 = next2;
            }
          if (start2 === -1 || end2 === -1) {
            return null;
          }
          return {
            start: start2,
            end: end2
          };
        }
        function setOffsets(node2, offsets) {
          var doc = node2.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length2 = node2.textContent.length;
          var start2 = Math.min(offsets.start, length2);
          var end2 = offsets.end === void 0 ? start2 : Math.min(offsets.end, length2);
          if (!selection.extend && start2 > end2) {
            var temp = end2;
            end2 = start2;
            start2 = temp;
          }
          var startMarker = getNodeForCharacterOffset(node2, start2);
          var endMarker = getNodeForCharacterOffset(node2, end2);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range2 = doc.createRange();
            range2.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start2 > end2) {
              selection.addRange(range2);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range2.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range2);
            }
          }
        }
        function isTextNode(node2) {
          return node2 && node2.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node2) {
          return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement2();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement2(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection2(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i = 0; i < ancestors.length; i++) {
              var info = ancestors[i];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection2(input) {
          var selection;
          if ("selectionStart" in input) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection = getOffsets(input);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input, offsets) {
          var start2 = offsets.start;
          var end2 = offsets.end;
          if (end2 === void 0) {
            end2 = start2;
          }
          if ("selectionStart" in input) {
            input.selectionStart = start2;
            input.selectionEnd = Math.min(end2, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
        function registerEvents$3() {
          registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
        }
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node2) {
          if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
            return {
              start: node2.selectionStart,
              end: node2.selectionEnd
            };
          } else {
            var win = node2.ownerDocument && node2.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement2(doc)) {
            return;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual2(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.target = activeElement$1;
            }
          }
        }
        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            case "focusin":
              if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }
              break;
            case "focusout":
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
            case "mousedown":
              mouseDown = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent) {
                break;
              }
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }
        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName === void 0) {
            return;
          }
          var SyntheticEventCtor = SyntheticEvent;
          var reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2) {
                return;
              }
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
            var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
        registerSimpleEvents();
        registerEvents$2();
        registerEvents$1();
        registerEvents$3();
        registerEvents();
        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
          if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
        }
        var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
        var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
        function executeDispatch(event, listener, currentTarget) {
          var type = event.type || "unknown-event";
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          var previousInstance;
          if (inCapturePhase) {
            for (var i = dispatchListeners.length - 1; i >= 0; i--) {
              var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, listener, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (var _i = 0; _i < dispatchListeners.length; _i++) {
              var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
              if (_instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          for (var i = 0; i < dispatchQueue.length; i++) {
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
          }
          rethrowCaughtError();
        }
        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var dispatchQueue = [];
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          var isCapturePhaseListener = false;
          var listenerSet = getEventListenerSet(targetElement);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
        function listenToAllSupportedEvents(rootContainerElement) {
          {
            if (rootContainerElement[listeningMarker]) {
              return;
            }
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
              if (!nonDelegatedEvents.has(domEventName)) {
                listenToNativeEvent(domEventName, false, rootContainerElement, null);
              }
              listenToNativeEvent(domEventName, true, rootContainerElement, null);
            });
          }
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
          var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
          var target = rootContainerElement;
          if (domEventName === "selectionchange" && rootContainerElement.nodeType !== DOCUMENT_NODE) {
            target = rootContainerElement.ownerDocument;
          }
          if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
            if (domEventName !== "scroll") {
              return;
            }
            eventSystemFlags |= IS_NON_DELEGATED;
            target = targetElement;
          }
          var listenerSet = getEventListenerSet(target);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
          var isPassiveListener = void 0;
          if (passiveBrowserEventsSupported) {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
              isPassiveListener = true;
            }
          }
          targetContainer = targetContainer;
          if (isCapturePhaseListener) {
            if (isPassiveListener !== void 0) {
              addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              addEventCaptureListener(targetContainer, domEventName, listener);
            }
          } else {
            if (isPassiveListener !== void 0) {
              addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              addEventBubbleListener(targetContainer, domEventName, listener);
            }
          }
        }
        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var ancestorInst = targetInst;
          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
              var node2 = targetInst;
              mainLoop:
                while (true) {
                  if (node2 === null) {
                    return;
                  }
                  var nodeTag = node2.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node2.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node2.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node2 = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node2 = node2.return;
                }
            }
          }
          batchedEventUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
          var captureName = reactName !== null ? reactName + "Capture" : null;
          var reactEventName = inCapturePhase ? captureName : reactName;
          var listeners = [];
          var instance = targetFiber;
          var lastHostComponent = null;
          while (instance !== null) {
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
            if (tag === HostComponent && stateNode !== null) {
              lastHostComponent = stateNode;
              if (reactEventName !== null) {
                var listener = getListener(instance, reactEventName);
                if (listener != null) {
                  listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
              }
            }
            if (accumulateTargetOnly) {
              break;
            }
            instance = instance.return;
          }
          return listeners;
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          var captureName = reactName + "Capture";
          var listeners = [];
          var instance = targetFiber;
          while (instance !== null) {
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              var captureListener = getListener(instance, captureName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
              var bubbleListener = getListener(instance, reactName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
            instance = instance.return;
          }
          return listeners;
        }
        function getParent(inst) {
          if (inst === null) {
            return null;
          }
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var nodeA = instA;
          var nodeB = instB;
          var depthA = 0;
          for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
              return nodeA;
            }
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }
          return null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common2, inCapturePhase) {
          var registrationName = event._reactName;
          var listeners = [];
          var instance = target;
          while (instance !== null) {
            if (instance === common2) {
              break;
            }
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common2) {
              break;
            }
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
            }
            instance = instance.return;
          }
          if (listeners.length !== 0) {
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from2, to2) {
          var common2 = from2 && to2 ? getLowestCommonAncestor(from2, to2) : null;
          if (from2 !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from2, common2, false);
          }
          if (to2 !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to2, common2, true);
          }
        }
        function getListenerSetKey(domEventName, capture) {
          return domEventName + "__" + (capture ? "capture" : "bubble");
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var HTML_NAMESPACE$1 = Namespaces.html;
        var warnedUnknownTags;
        var suppressHydrationWarning;
        var validatePropertiesInDevelopment;
        var warnForTextDifference;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeMarkupForTextOrAttribute;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            dialog: true,
            webview: true
          };
          validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, {
              registrationNameDependencies,
              possibleRegistrationNames
            });
          };
          canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          normalizeMarkupForTextOrAttribute = function(markup) {
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          };
          warnForTextDifference = function(serverText, clientText) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
          };
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function(name) {
              names.push(name);
            });
            error("Extra attributes from the server: %s", names);
          };
          warnForInvalidEventListener = function(registrationName, listener) {
            if (listener === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function(parent2, html) {
            var testElement = parent2.namespaceURI === HTML_NAMESPACE$1 ? parent2.ownerDocument.createElement(parent2.tagName) : parent2.ownerDocument.createElementNS(parent2.namespaceURI, parent2.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop2() {
        }
        function trapClickOnNonInteractiveElement(node2) {
          node2.onclick = noop2;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i = 0; i < updatePayload.length; i += 2) {
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument2 = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE$1) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE$1) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div = ownerDocument2.createElement("div");
              div.innerHTML = "<script><\/script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument2.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument2.createElement(type);
              if (type === "select") {
                var node2 = domElement;
                if (props.multiple) {
                  node2.multiple = true;
                } else if (props.size) {
                  node2.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument2.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE$1) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              props = rawProps;
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              props = rawProps;
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$3(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "option":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$3(domElement, lastRawProps);
              nextProps = getHostProps$3(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string" || typeof nextProp === "number") {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else if (typeof nextProp === "object" && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
              nextProp.toString();
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = /* @__PURE__ */ new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name = attributes[_i].name.toLowerCase();
              switch (name) {
                case "data-reactroot":
                  break;
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = getPropertyInfo(propKey);
              if (suppressHydrationWarning)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE$1) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE$1) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
              warnForExtraAttributes(extraAttributeNames);
            }
          }
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForUnmatchedText(textNode, text) {
          {
            warnForTextDifference(textNode.nodeValue, text);
          }
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag) {
            var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              case "option":
                return tag === "#text";
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              case "colgroup":
                return tag === "col" || tag === "template";
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1;
        {
          SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        }
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function shouldAutoFocusHostComponent(type, props) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
          }
          return false;
        }
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root3 = rootContainerInstance.documentElement;
              namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container.namespaceURI || null;
              type = container.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          var activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          return shouldAutoFocusHostComponent(type, props);
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          if (shouldAutoFocusHostComponent(type, newProps)) {
            domElement.focus();
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateFiberProps(domElement, newProps);
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container, child) {
          var parentNode;
          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }
        function hideInstance(instance) {
          instance = instance;
          var style3 = instance.style;
          if (typeof style3.setProperty === "function") {
            style3.setProperty("display", "none", "important");
          } else {
            style3.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainer(container) {
          if (container.nodeType === ELEMENT_NODE) {
            container.textContent = "";
          } else if (container.nodeType === DOCUMENT_NODE) {
            var body = container.body;
            if (body != null) {
              body.textContent = "";
            }
          }
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getNextHydratable(node2) {
          for (; node2 != null; node2 = node2.nextSibling) {
            var nodeType = node2.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
          }
          return node2;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          return diffHydratedProperties(instance, type, props, parentNamespace);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          return diffHydratedText(textInstance, text);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node2 = suspenseInstance.nextSibling;
          var depth = 0;
          while (node2) {
            if (node2.nodeType === COMMENT_NODE) {
              var data = node2.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node2);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node2 = node2.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node2 = targetInstance.previousSibling;
          var depth = 0;
          while (node2) {
            if (node2.nodeType === COMMENT_NODE) {
              var data = node2.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node2;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node2 = node2.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
          {
            warnForUnmatchedText(textInstance, text);
          }
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForUnmatchedText(textInstance, text);
          }
        }
        function didNotHydrateContainerInstance(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentInstance, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentInstance, instance);
            }
          }
        }
        function didNotFindHydratableContainerInstance(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableContainerTextInstance(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedElement(parentInstance, type);
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedText(parentInstance, text);
          }
        }
        function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
            ;
        }
        var clientId = 0;
        function makeClientIdInDEV(warnOnAccessInDEV) {
          var id = "r:" + (clientId++).toString(36);
          return {
            toString: function() {
              warnOnAccessInDEV();
              return id;
            },
            valueOf: function() {
              warnOnAccessInDEV();
              return id;
            }
          };
        }
        function isOpaqueHydratingObject(value2) {
          return value2 !== null && typeof value2 === "object" && value2.$$typeof === REACT_OPAQUE_ID_TYPE;
        }
        function makeOpaqueHydratingObject(attemptToReadValue) {
          return {
            $$typeof: REACT_OPAQUE_ID_TYPE,
            toString: attemptToReadValue,
            valueOf: attemptToReadValue
          };
        }
        function preparePortalMount(portalInstance) {
          {
            listenToAllSupportedEvents(portalInstance);
          }
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactFiber$" + randomKey;
        var internalPropsKey = "__reactProps$" + randomKey;
        var internalContainerInstanceKey = "__reactContainer$" + randomKey;
        var internalEventHandlersKey = "__reactEvents$" + randomKey;
        function precacheFiberNode(hostInst, node2) {
          node2[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node2) {
          node2[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node2) {
          node2[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node2) {
          return !!node2[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node2) {
          var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          {
            {
              throw Error("getNodeFromInstance: Invalid argument.");
            }
          }
        }
        function getFiberCurrentPropsFromNode(node2) {
          return node2[internalPropsKey] || null;
        }
        function updateFiberProps(node2, props) {
          node2[internalPropsKey] = props;
        }
        function getEventListenerSet(node2) {
          var elementListenerSet = node2[internalEventHandlersKey];
          if (elementListenerSet === void 0) {
            elementListenerSet = node2[internalEventHandlersKey] = /* @__PURE__ */ new Set();
          }
          return elementListenerSet;
        }
        var loggedTypeFailures2 = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes2(typeSpecs, values2, location, componentName, element) {
          {
            var has3 = Function.call.bind(Object.prototype.hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has3(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures2)) {
                  loggedTypeFailures2[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue2) {
          return {
            current: defaultValue2
          };
        }
        function pop(cursor2, fiber) {
          if (index < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor2.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
        function push(cursor2, value2, fiber) {
          index++;
          valueStack[index] = cursor2.current;
          {
            fiberStack[index] = fiber;
          }
          cursor2.current = value2;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context2 = {};
            for (var key in contextTypes) {
              context2[key] = unmaskedContext[key];
            }
            {
              var name = getComponentName(type) || "Unknown";
              checkPropTypes2(contextTypes, context2, "context", name);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context2);
            }
            return context2;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context2, didChange) {
          {
            if (!(contextStackCursor.current === emptyContextObject)) {
              {
                throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            push(contextStackCursor, context2, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentName(type) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                {
                  throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
            }
            {
              var name = getComponentName(type) || "Unknown";
              checkPropTypes2(childContextTypes, childContext, "child context", name);
            }
            return _assign({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              {
                throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
              {
                throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var node2 = fiber;
            do {
              switch (node2.tag) {
                case HostRoot:
                  return node2.stateNode.context;
                case ClassComponent: {
                  var Component = node2.type;
                  if (isContextProvider(Component)) {
                    return node2.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node2 = node2.return;
            } while (node2 !== null);
            {
              {
                throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        var LegacyRoot = 0;
        var BlockingRoot = 1;
        var ConcurrentRoot = 2;
        var rendererID = null;
        var injectedHook = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            }
            return true;
          }
          try {
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          return true;
        }
        function onScheduleRoot(root3, children) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root3, children);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitRoot(root3, priorityLevel) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
            try {
              var didError = (root3.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                injectedHook.onCommitFiberRoot(rendererID, root3, priorityLevel, didError);
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
        {
          if (!(tracing$1.__interactionsRef != null && tracing$1.__interactionsRef.current != null)) {
            {
              throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
            }
          }
        }
        var fakeCallbackNode = {};
        var ImmediatePriority$1 = 99;
        var UserBlockingPriority$2 = 98;
        var NormalPriority$1 = 97;
        var LowPriority$1 = 96;
        var IdlePriority$1 = 95;
        var NoPriority$1 = 90;
        var shouldYield = Scheduler_shouldYield;
        var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
        };
        var syncQueue = null;
        var immediateQueueCallbackNode = null;
        var isFlushingSyncQueue = false;
        var initialTimeMs$1 = Scheduler_now$1();
        var now2 = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function() {
          return Scheduler_now$1() - initialTimeMs$1;
        };
        function getCurrentPriorityLevel() {
          switch (Scheduler_getCurrentPriorityLevel()) {
            case Scheduler_ImmediatePriority:
              return ImmediatePriority$1;
            case Scheduler_UserBlockingPriority:
              return UserBlockingPriority$2;
            case Scheduler_NormalPriority:
              return NormalPriority$1;
            case Scheduler_LowPriority:
              return LowPriority$1;
            case Scheduler_IdlePriority:
              return IdlePriority$1;
            default: {
              {
                throw Error("Unknown priority level.");
              }
            }
          }
        }
        function reactPriorityToSchedulerPriority(reactPriorityLevel) {
          switch (reactPriorityLevel) {
            case ImmediatePriority$1:
              return Scheduler_ImmediatePriority;
            case UserBlockingPriority$2:
              return Scheduler_UserBlockingPriority;
            case NormalPriority$1:
              return Scheduler_NormalPriority;
            case LowPriority$1:
              return Scheduler_LowPriority;
            case IdlePriority$1:
              return Scheduler_IdlePriority;
            default: {
              {
                throw Error("Unknown priority level.");
              }
            }
          }
        }
        function runWithPriority$1(reactPriorityLevel, fn) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_runWithPriority(priorityLevel, fn);
        }
        function scheduleCallback(reactPriorityLevel, callback, options2) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_scheduleCallback(priorityLevel, callback, options2);
        }
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
          } else {
            syncQueue.push(callback);
          }
          return fakeCallbackNode;
        }
        function cancelCallback(callbackNode) {
          if (callbackNode !== fakeCallbackNode) {
            Scheduler_cancelCallback(callbackNode);
          }
        }
        function flushSyncCallbackQueue() {
          if (immediateQueueCallbackNode !== null) {
            var node2 = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node2);
          }
          flushSyncCallbackQueueImpl();
        }
        function flushSyncCallbackQueueImpl() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i = 0;
            {
              try {
                var _isSync2 = true;
                var _queue = syncQueue;
                runWithPriority$1(ImmediatePriority$1, function() {
                  for (; i < _queue.length; i++) {
                    var callback = _queue[i];
                    do {
                      callback = callback(_isSync2);
                    } while (callback !== null);
                  }
                });
                syncQueue = null;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                throw error2;
              } finally {
                isFlushingSyncQueue = false;
              }
            }
          }
        }
        var ReactVersion = "17.0.2";
        var NoMode = 0;
        var StrictMode = 1;
        var BlockingMode = 2;
        var ConcurrentMode = 4;
        var ProfileMode = 8;
        var DebugTracingMode = 16;
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = 0;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig.transition;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node2 = fiber;
            while (node2 !== null) {
              if (node2.mode & StrictMode) {
                maybeStrictRoot = node2;
              }
              node2 = node2.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set3) {
            var array = [];
            set3.forEach(function(value2) {
              array.push(value2);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn2("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn2("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn2("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          };
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = _assign({}, baseProps);
            var defaultProps2 = Component.defaultProps;
            for (var propName in defaultProps2) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps2[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var MAX_SIGNED_31_BIT_INT = 1073741823;
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastContextWithAllBitsObserved = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, nextValue) {
          var context2 = providerFiber.type._context;
          {
            push(valueCursor, context2._currentValue, providerFiber);
            context2._currentValue = nextValue;
            {
              if (context2._currentRenderer !== void 0 && context2._currentRenderer !== null && context2._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context2._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          var context2 = providerFiber.type._context;
          {
            context2._currentValue = currentValue;
          }
        }
        function calculateChangedBits(context2, newValue, oldValue) {
          if (objectIs(oldValue, newValue)) {
            return 0;
          } else {
            var changedBits = typeof context2._calculateChangedBits === "function" ? context2._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            {
              if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
              }
            }
            return changedBits | 0;
          }
        }
        function scheduleWorkOnParentPath(parent2, renderLanes2) {
          var node2 = parent2;
          while (node2 !== null) {
            var alternate = node2.alternate;
            if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
              node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            } else {
              break;
            }
            node2 = node2.return;
          }
        }
        function propagateContextChange(workInProgress2, context2, changedBits, renderLanes2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context2 && (dependency.observedBits & changedBits) !== 0) {
                  if (fiber.tag === ClassComponent) {
                    var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
                    update.tag = ForceUpdate;
                    enqueueUpdate(fiber, update);
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleWorkOnParentPath(fiber.return, renderLanes2);
                  list.lanes = mergeLanes(list.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
              if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                markWorkInProgressReceivedUpdate();
              }
              dependencies.firstContext = null;
            }
          }
        }
        function readContext(context2, observedBits) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          if (lastContextWithAllBitsObserved === context2)
            ;
          else if (observedBits === false || observedBits === 0)
            ;
          else {
            var resolvedObservedBits;
            if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
              lastContextWithAllBitsObserved = context2;
              resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
            } else {
              resolvedObservedBits = observedBits;
            }
            var contextItem = {
              context: context2,
              observedBits: resolvedObservedBits,
              next: null
            };
            if (lastContextDependency === null) {
              if (!(currentlyRenderingFiber !== null)) {
                {
                  throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem,
                responders: null
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return context2._currentValue;
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone2 = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone2;
          }
        }
        function createUpdate(eventTime, lane) {
          var update = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update;
        }
        function enqueueUpdate(fiber, update) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          var pending = sharedQueue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          sharedQueue.pending = update;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update = firstBaseUpdate;
                do {
                  var clone2 = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone2;
                  } else {
                    newLast.next = clone2;
                    newLast = clone2;
                  }
                  update = update.next;
                } while (update !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictMode) {
                    disableLogs();
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      reenableLogs();
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictMode) {
                    disableLogs();
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      reenableLogs();
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return _assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
              var updateLane = update.lane;
              var updateEventTime = update.eventTime;
              if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                var clone2 = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone2;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone2;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                var callback = update.callback;
                if (callback !== null) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }
              update = update.next;
              if (update === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context2) {
          if (!(typeof callback === "function")) {
            {
              throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
            }
          }
          callback.call(context2);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i = 0; i < effects.length; i++) {
              var effect2 = effects[i];
              var callback = effect2.callback;
              if (callback !== null) {
                effect2.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var fakeInternalInstance = {};
        var isArray2 = Array.isArray;
        var emptyRefsObject = new React2.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentName(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              {
                {
                  throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                }
              }
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          {
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                getDerivedStateFromProps(nextProps, prevState);
              } finally {
                reenableLogs();
              }
            }
          }
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get2(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get2(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get2(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  reenableLogs();
                }
              }
            }
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual2(oldProps, newProps) || !shallowEqual2(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentName(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray2(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set2(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context2 = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid2 = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context2 = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context2 = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          {
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                new ctor(props, context2);
              } finally {
                reenableLogs();
              }
            }
          }
          var instance = new ctor(props, context2);
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context2);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName = getComponentName(workInProgress2.type) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = emptyRefsObject;
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            workInProgress2.flags |= Update;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child, returnFiber) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child, returnFiber) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (!(typeof child._store === "object")) {
              {
                throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            child._store.validated = true;
            var componentName = getComponentName(returnFiber.type) || "Component";
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
          };
        }
        var isArray$12 = Array.isArray;
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentName(returnFiber.type) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (!(ownerFiber.tag === ClassComponent)) {
                  {
                    throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                {
                  throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function(value2) {
                var refs = inst.refs;
                if (refs === emptyRefsObject) {
                  refs = inst.refs = {};
                }
                if (value2 === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value2;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (!(typeof mixedRef === "string")) {
                {
                  throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
              }
              if (!element._owner) {
                {
                  throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          if (returnFiber.type !== "textarea") {
            {
              {
                throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
          }
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentName(returnFiber.type) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var last2 = returnFiber.lastEffect;
            if (last2 !== null) {
              last2.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
            childToDelete.nextEffect = null;
            childToDelete.flags = Deletion;
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = /* @__PURE__ */ new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone2 = createWorkInProgress(fiber, pendingProps);
            clone2.index = 0;
            clone2.sibling = null;
            return clone2;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags = Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags = Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags = Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, lanes) {
            if (current2 !== null) {
              if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, lanes, key) {
            if (current2 === null || current2.tag !== Fragment2) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  _created2.return = returnFiber;
                  return _created2;
                }
              }
              if (isArray$12(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key);
                    }
                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
              }
              if (isArray$12(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                  }
                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
              }
              if (isArray$12(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = /* @__PURE__ */ new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            {
              var knownKeys = null;
              for (var i = 0; i < newChildren.length; i++) {
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (!(typeof iteratorFn === "function")) {
              {
                throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            {
              if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (!(newChildren != null)) {
              {
                throw Error("An iterable object provided no iterator.");
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                switch (child.tag) {
                  case Fragment2: {
                    if (element.type === REACT_FRAGMENT_TYPE) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                    break;
                  }
                  case Block:
                  default: {
                    if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing3 = useFiber(child, element.props);
                      _existing3.ref = coerceRef(returnFiber, child, element);
                      _existing3.return = returnFiber;
                      {
                        _existing3._debugSource = element._source;
                        _existing3._debugOwner = element._owner;
                      }
                      return _existing3;
                    }
                    break;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            var isObject2 = typeof newChild === "object" && newChild !== null;
            if (isObject2) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
              }
            }
            if (typeof newChild === "string" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            }
            if (isArray$12(newChild)) {
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (getIteratorFn(newChild)) {
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (isObject2) {
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
              switch (returnFiber.tag) {
                case ClassComponent: {
                  {
                    var instance = returnFiber.stateNode;
                    if (instance.render._isMockFunction) {
                      break;
                    }
                  }
                }
                case Block:
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  {
                    {
                      throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                    }
                  }
                }
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (!(current2 === null || workInProgress2.child === current2.child)) {
            {
              throw Error("Resuming work not yet implemented.");
            }
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c) {
          if (!(c !== NO_CONTEXT)) {
            {
              throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return c;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context2 = requiredContext(contextStackCursor$1.current);
          return context2;
        }
        function pushHostContext(fiber) {
          requiredContext(rootInstanceStackCursor.current);
          var context2 = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context2, fiber.type);
          if (context2 === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          if (props.fallback === void 0) {
            return false;
          }
          if (props.unstable_avoidThisFallback !== true) {
            return true;
          }
          if (hasInvisibleParent) {
            return false;
          }
          return true;
        }
        function findFirstSuspended(row) {
          var node2 = row;
          while (node2 !== null) {
            if (node2.tag === SuspenseComponent) {
              var state = node2.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node2;
                }
              }
            } else if (node2.tag === SuspenseListComponent && node2.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node2.flags & DidCapture) !== NoFlags;
              if (didSuspend) {
                return node2;
              }
            } else if (node2.child !== null) {
              node2.child.return = node2;
              node2 = node2.child;
              continue;
            }
            if (node2 === row) {
              return null;
            }
            while (node2.sibling === null) {
              if (node2.return === null || node2.return === row) {
                return null;
              }
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
          return null;
        }
        var NoFlags$1 = 0;
        var HasEffect = 1;
        var Layout = 2;
        var Passive$1 = 4;
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChild(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          return true;
        }
        function deleteHydratableInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;
              case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
            }
          }
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          childToDelete.flags = Deletion;
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement;
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    fiber.pendingProps;
                    didNotFindHydratableContainerInstance(parentContainer, type);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableContainerTextInstance(parentContainer, text);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent:
                    var _type = fiber.type;
                    fiber.pendingProps;
                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                    break;
                  case HostText:
                    var _text = fiber.pendingProps;
                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                    break;
                  case SuspenseComponent:
                    didNotFindHydratableSuspenseInstance(parentType, parentProps);
                    break;
                }
                break;
              }
              default:
                return;
            }
          }
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              return false;
            }
            default:
              return false;
          }
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
          }
          hydrationParentFiber = fiber;
          nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          {
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
                  }
                }
              }
            }
          }
          return shouldUpdate;
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            {
              throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent2 = fiber.return;
          while (parent2 !== null && parent2.tag !== HostComponent && parent2.tag !== HostRoot && parent2.tag !== SuspenseComponent) {
            parent2 = parent2.return;
          }
          hydrationParentFiber = parent2;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          var type = fiber.type;
          if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              deleteHydratableInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
        }
        function getIsHydrating() {
          return isHydrating;
        }
        var workInProgressSources = [];
        var rendererSigil$1;
        {
          rendererSigil$1 = {};
        }
        function markSourceAsDirty(mutableSource) {
          workInProgressSources.push(mutableSource);
        }
        function resetWorkInProgressVersions() {
          for (var i = 0; i < workInProgressSources.length; i++) {
            var mutableSource = workInProgressSources[i];
            {
              mutableSource._workInProgressVersionPrimary = null;
            }
          }
          workInProgressSources.length = 0;
        }
        function getWorkInProgressVersion(mutableSource) {
          {
            return mutableSource._workInProgressVersionPrimary;
          }
        }
        function setWorkInProgressVersion(mutableSource, version) {
          {
            mutableSource._workInProgressVersionPrimary = version;
          }
          workInProgressSources.push(mutableSource);
        }
        function warnAboutMultipleRenderersDEV(mutableSource) {
          {
            {
              if (mutableSource._currentPrimaryRenderer == null) {
                mutableSource._currentPrimaryRenderer = rendererSigil$1;
              } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
              }
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnAboutUseOpaqueIdentifier;
        {
          didWarnAboutUseOpaqueIdentifier = {};
          didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentName(currentlyRenderingFiber$1.type);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                  var oldHookName = hookTypesDev[i];
                  var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;
              if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                {
                  throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children = Component(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
          }
          didScheduleRenderPhaseUpdate = false;
          if (!!didRenderTooFewHooks) {
            {
              throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
          }
          return children;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.flags &= ~(Passive | Update);
          current2.lanes = removeLanes(current2.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (!(nextCurrentHook !== null)) {
              {
                throw Error("Rendered more hooks than during the previous render.");
              }
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (!(queue !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }
          queue.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current2.baseQueue !== baseQueue) {
                error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
              }
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateLane = update.lane;
              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                var clone2 = {
                  lane: updateLane,
                  action: update.action,
                  eagerReducer: update.eagerReducer,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone2;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone2;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    lane: NoLane,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update.eagerReducer === reducer) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (!(queue !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function readFromUnsubcribedMutableSource(root3, source, getSnapshot) {
          {
            warnAboutMultipleRenderersDEV(source);
          }
          var getVersion = source._getVersion;
          var version = getVersion(source._source);
          var isSafeToReadFromSource = false;
          var currentRenderVersion = getWorkInProgressVersion(source);
          if (currentRenderVersion !== null) {
            isSafeToReadFromSource = currentRenderVersion === version;
          } else {
            isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root3.mutableReadLanes);
            if (isSafeToReadFromSource) {
              setWorkInProgressVersion(source, version);
            }
          }
          if (isSafeToReadFromSource) {
            var snapshot = getSnapshot(source._source);
            {
              if (typeof snapshot === "function") {
                error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
              }
            }
            return snapshot;
          } else {
            markSourceAsDirty(source);
            {
              {
                throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
              }
            }
          }
        }
        function useMutableSource(hook, source, getSnapshot, subscribe) {
          var root3 = getWorkInProgressRoot();
          if (!(root3 !== null)) {
            {
              throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
          }
          var getVersion = source._getVersion;
          var version = getVersion(source._source);
          var dispatcher = ReactCurrentDispatcher$1.current;
          var _dispatcher$useState = dispatcher.useState(function() {
            return readFromUnsubcribedMutableSource(root3, source, getSnapshot);
          }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
          var snapshot = currentSnapshot;
          var stateHook = workInProgressHook;
          var memoizedState = hook.memoizedState;
          var refs = memoizedState.refs;
          var prevGetSnapshot = refs.getSnapshot;
          var prevSource = memoizedState.source;
          var prevSubscribe = memoizedState.subscribe;
          var fiber = currentlyRenderingFiber$1;
          hook.memoizedState = {
            refs,
            source,
            subscribe
          };
          dispatcher.useEffect(function() {
            refs.getSnapshot = getSnapshot;
            refs.setSnapshot = setSnapshot;
            var maybeNewVersion = getVersion(source._source);
            if (!objectIs(version, maybeNewVersion)) {
              var maybeNewSnapshot = getSnapshot(source._source);
              {
                if (typeof maybeNewSnapshot === "function") {
                  error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                }
              }
              if (!objectIs(snapshot, maybeNewSnapshot)) {
                setSnapshot(maybeNewSnapshot);
                var lane = requestUpdateLane(fiber);
                markRootMutableRead(root3, lane);
              }
              markRootEntangled(root3, root3.mutableReadLanes);
            }
          }, [getSnapshot, source, subscribe]);
          dispatcher.useEffect(function() {
            var handleChange = function() {
              var latestGetSnapshot = refs.getSnapshot;
              var latestSetSnapshot = refs.setSnapshot;
              try {
                latestSetSnapshot(latestGetSnapshot(source._source));
                var lane = requestUpdateLane(fiber);
                markRootMutableRead(root3, lane);
              } catch (error2) {
                latestSetSnapshot(function() {
                  throw error2;
                });
              }
            };
            var unsubscribe = subscribe(source._source, handleChange);
            {
              if (typeof unsubscribe !== "function") {
                error("Mutable source subscribe function must return an unsubscribe function.");
              }
            }
            return unsubscribe;
          }, [source, subscribe]);
          if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
            var newQueue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: snapshot
            };
            newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
            stateHook.queue = newQueue;
            stateHook.baseQueue = null;
            snapshot = readFromUnsubcribedMutableSource(root3, source, getSnapshot);
            stateHook.memoizedState = stateHook.baseState = snapshot;
          }
          return snapshot;
        }
        function mountMutableSource(source, getSnapshot, subscribe) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = {
            refs: {
              getSnapshot,
              setSnapshot: null
            },
            source,
            subscribe
          };
          return useMutableSource(hook, source, getSnapshot, subscribe);
        }
        function updateMutableSource(source, getSnapshot, subscribe) {
          var hook = updateWorkInProgressHook();
          return useMutableSource(hook, source, getSnapshot, subscribe);
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create, destroy, deps) {
          var effect2 = {
            tag,
            create,
            destroy,
            deps,
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect2.next = effect2;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect2.next = effect2;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect2;
              effect2.next = firstEffect;
              componentUpdateQueue.lastEffect = effect2;
            }
          }
          return effect2;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          var ref = {
            current: initialValue
          };
          {
            Object.seal(ref);
          }
          hook.memoizedState = ref;
          return ref;
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                pushEffect(hookFlags, create, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
        }
        function mountEffect(create, deps) {
          {
            if ("undefined" !== typeof jest) {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return mountEffectImpl(Update | Passive, Passive$1, create, deps);
        }
        function updateEffect(create, deps) {
          {
            if ("undefined" !== typeof jest) {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return updateEffectImpl(Update | Passive, Passive$1, create, deps);
        }
        function mountLayoutEffect(create, deps) {
          return mountEffectImpl(Update, Layout, create, deps);
        }
        function updateLayoutEffect(create, deps) {
          return updateEffectImpl(Update, Layout, create, deps);
        }
        function imperativeHandleEffect(create, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function mountDebugValue(value2, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value2) {
          var _mountState = mountState(value2), prevValue = _mountState[0], setValue2 = _mountState[1];
          mountEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setValue2(value2);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value2]);
          return prevValue;
        }
        function updateDeferredValue(value2) {
          var _updateState = updateState(), prevValue = _updateState[0], setValue2 = _updateState[1];
          updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setValue2(value2);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value2]);
          return prevValue;
        }
        function rerenderDeferredValue(value2) {
          var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue2 = _rerenderState[1];
          updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setValue2(value2);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value2]);
          return prevValue;
        }
        function startTransition(setPending, callback) {
          var priorityLevel = getCurrentPriorityLevel();
          {
            runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
              setPending(true);
            });
            runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setPending(false);
                callback();
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            });
          }
        }
        function mountTransition() {
          var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
          var start2 = startTransition.bind(null, setPending);
          mountRef(start2);
          return [start2, isPending];
        }
        function updateTransition() {
          var _updateState2 = updateState(), isPending = _updateState2[0];
          var startRef = updateRef();
          var start2 = startRef.current;
          return [start2, isPending];
        }
        function rerenderTransition() {
          var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
          var startRef = updateRef();
          var start2 = startRef.current;
          return [start2, isPending];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }
        function warnOnOpaqueIdentifierAccessInDEV(fiber) {
          {
            var name = getComponentName(fiber.type) || "Unknown";
            if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
              error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
              didWarnAboutUseOpaqueIdentifier[name] = true;
            }
          }
        }
        function mountOpaqueIdentifier() {
          var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
          if (getIsHydrating()) {
            var didUpgrade = false;
            var fiber = currentlyRenderingFiber$1;
            var readValue = function() {
              if (!didUpgrade) {
                didUpgrade = true;
                {
                  isUpdatingOpaqueValueInRenderPhase = true;
                  setId(makeId());
                  isUpdatingOpaqueValueInRenderPhase = false;
                  warnOnOpaqueIdentifierAccessInDEV(fiber);
                }
              }
              {
                {
                  throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                }
              }
            };
            var id = makeOpaqueHydratingObject(readValue);
            var setId = mountState(id)[1];
            if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
              currentlyRenderingFiber$1.flags |= Update | Passive;
              pushEffect(HasEffect | Passive$1, function() {
                setId(makeId());
              }, void 0, null);
            }
            return id;
          } else {
            var _id = makeId();
            mountState(_id);
            return _id;
          }
        }
        function updateOpaqueIdentifier() {
          var id = updateState()[0];
          return id;
        }
        function rerenderOpaqueIdentifier() {
          var id = rerenderState()[0];
          return id;
        }
        function dispatchAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            eagerReducer: null,
            eagerState: null,
            next: null
          };
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
          var alternate = fiber.alternate;
          if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          } else {
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.eagerReducer = lastRenderedReducer;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            {
              if ("undefined" !== typeof jest) {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
              }
            }
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useOpaqueIdentifier: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context2, observedBits) {
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value2, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value2) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value2);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              mountHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context2, observedBits) {
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value2, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value2) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value2);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              updateHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context2, observedBits) {
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value2, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value2) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value2);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              updateHookTypesDev();
              return updateOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context2, observedBits) {
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value2, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value2) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value2);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              updateHookTypesDev();
              return rerenderOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context2, observedBits) {
              warnInvalidContextAccess();
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value2, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value2) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value2);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context2, observedBits) {
              warnInvalidContextAccess();
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value2, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value2) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value2);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context2, observedBits) {
              warnInvalidContextAccess();
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value2, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value2) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value2);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$12 = Scheduler.unstable_now;
        var commitTime = 0;
        var profilerStartTime = -1;
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$12();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$12();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$12();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$12() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes2(
                  innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentName(Component)
                );
              }
            }
          }
          var render2 = Component.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              } finally {
                reenableLogs();
              }
            }
            setIsRendering(false);
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
          if (current2 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes2(
                  innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentName(type)
                );
              }
            }
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes2(
                _innerPropTypes,
                nextProps,
                "prop",
                getComponentName(_type)
              );
            }
          }
          var currentChild = current2.child;
          if (!includesSomeLane(updateLanes, renderLanes2)) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual2;
            if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  outerMemoType = init(payload);
                } catch (x) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes2(
                    outerPropTypes,
                    nextProps,
                    "prop",
                    getComponentName(outerMemoType)
                  );
                }
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual2(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              if (!includesSomeLane(renderLanes2, updateLanes)) {
                workInProgress2.lanes = current2.lanes;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current2 !== null ? current2.memoizedState : null;
          if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes
              };
              workInProgress2.memoizedState = nextState;
              pushRenderLanes(workInProgress2, renderLanes2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else {
                nextBaseLanes = renderLanes2;
              }
              {
                markSpawnedWork(OffscreenLane);
              }
              workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes
              };
              workInProgress2.memoizedState = _nextState;
              pushRenderLanes(workInProgress2, nextBaseLanes);
              return null;
            } else {
              var _nextState2 = {
                baseLanes: NoLanes
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            }
          } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
              workInProgress2.memoizedState = null;
            } else {
              _subtreeRenderLanes = renderLanes2;
            }
            pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        var updateLegacyHiddenComponent = updateOffscreenComponent;
        function updateFragment(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            var stateNode = workInProgress2.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.flags |= Ref;
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes2(
                  innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentName(Component)
                );
              }
            }
          }
          var context2;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
            context2 = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context2, renderLanes2);
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context2, renderLanes2);
              } finally {
                reenableLogs();
              }
            }
            setIsRendering(false);
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes2(
                  innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentName(Component)
                );
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
          {
            var inst = workInProgress2.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  instance.render();
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root3 = workInProgress2.stateNode;
          if (root3.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
          } else if (root3.context) {
            pushTopLevelContextObject(workInProgress2, root3.context, false);
          }
          pushHostContainer(workInProgress2, root3.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          var updateQueue = workInProgress2.updateQueue;
          if (!(current2 !== null && updateQueue !== null)) {
            {
              throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState !== null ? prevState.element : null;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          var nextChildren = nextState.element;
          if (nextChildren === prevChildren) {
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var root3 = workInProgress2.stateNode;
          if (root3.hydrate && enterHydrationState(workInProgress2)) {
            {
              var mutableSourceEagerHydrationData = root3.mutableSourceEagerHydrationData;
              if (mutableSourceEagerHydrationData != null) {
                for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
                  var mutableSource = mutableSourceEagerHydrationData[i];
                  var version = mutableSourceEagerHydrationData[i + 1];
                  setWorkInProgressVersion(mutableSource, version);
                }
              }
            }
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            workInProgress2.child = child;
            var node2 = child;
            while (node2) {
              node2.flags = node2.flags & ~Placement | Hydrating;
              node2 = node2.sibling;
            }
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            resetHydrationState();
          }
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.flags |= ContentReset;
          }
          markRef(current2, workInProgress2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload);
          workInProgress2.type = Component;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
          var resolvedProps = resolveDefaultProps(Component, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component);
                workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component = resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes2(
                      outerPropTypes,
                      resolvedProps,
                      "prop",
                      getComponentName(Component)
                    );
                  }
                }
              }
              child = updateMemoComponent(
                null,
                workInProgress2,
                Component,
                resolveDefaultProps(Component.type, resolvedProps),
                updateLanes,
                renderLanes2
              );
              return child;
            }
          }
          var hint = "";
          {
            if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          {
            {
              throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
            }
          }
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
          var props = workInProgress2.pendingProps;
          var context2;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
            context2 = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value2;
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentName(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value2 = renderWithHooks(null, workInProgress2, Component, props, context2, renderLanes2);
            setIsRendering(false);
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (typeof value2 === "object" && value2 !== null && typeof value2.render === "function" && value2.$$typeof === void 0) {
              var _componentName = getComponentName(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (typeof value2 === "object" && value2 !== null && typeof value2.render === "function" && value2.$$typeof === void 0) {
            {
              var _componentName2 = getComponentName(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value2.state !== null && value2.state !== void 0 ? value2.state : null;
            initializeUpdateQueue(workInProgress2);
            var getDerivedStateFromProps = Component.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, Component, getDerivedStateFromProps, props);
            }
            adoptClassInstance(workInProgress2, value2);
            mountClassInstance(workInProgress2, Component, props, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  value2 = renderWithHooks(null, workInProgress2, Component, props, context2, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
            }
            reconcileChildren(null, workInProgress2, value2, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || workInProgress2._debugID || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentName(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentName(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
          };
        }
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            var suspenseState = current2.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
          return removeLanes(current2.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            if (nextProps.fallback !== void 0) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
              var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var _primaryChildFragment = workInProgress2.child;
              _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              workInProgress2.lanes = SomeRetryLane;
              {
                markSpawnedWork(SomeRetryLane);
              }
              return _fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              if (showFallback) {
                var _nextFallbackChildren2 = nextProps.fallback;
                var _nextPrimaryChildren2 = nextProps.children;
                var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                var _primaryChildFragment3 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment;
              } else {
                var _nextPrimaryChildren3 = nextProps.children;
                var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment4;
              }
            } else {
              if (showFallback) {
                var _nextFallbackChildren3 = nextProps.fallback;
                var _nextPrimaryChildren4 = nextProps.children;
                var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                var _primaryChildFragment5 = workInProgress2.child;
                var _prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment2;
              } else {
                var _nextPrimaryChildren5 = nextProps.children;
                var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment6;
              }
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes2, null);
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          } else {
            primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
          return createWorkInProgress(current2, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          if ((workInProgress2.mode & BlockingMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            currentFallbackChildFragment.nextEffect = null;
            currentFallbackChildFragment.flags = Deletion;
            workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment;
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          if ((mode & BlockingMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            var progressedLastEffect = primaryChildFragment.lastEffect;
            if (progressedLastEffect !== null) {
              workInProgress2.firstEffect = primaryChildFragment.firstEffect;
              workInProgress2.lastEffect = progressedLastEffect;
              progressedLastEffect.nextEffect = null;
            } else {
              workInProgress2.firstEffect = workInProgress2.lastEffect = null;
            }
          } else {
            primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function scheduleWorkOnFiber(fiber, renderLanes2) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleWorkOnParentPath(fiber.return, renderLanes2);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          var node2 = firstChild;
          while (node2 !== null) {
            if (node2.tag === SuspenseComponent) {
              var state = node2.memoizedState;
              if (state !== null) {
                scheduleWorkOnFiber(node2, renderLanes2);
              }
            } else if (node2.tag === SuspenseListComponent) {
              scheduleWorkOnFiber(node2, renderLanes2);
            } else if (node2.child !== null) {
              node2.child.return = node2;
              node2 = node2.child;
              continue;
            }
            if (node2 === workInProgress2) {
              return;
            }
            while (node2.sibling === null) {
              if (node2.return === null || node2.return === workInProgress2) {
                return;
              }
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index2) {
          {
            var isArray3 = Array.isArray(childSlot);
            var isIterable = !isArray3 && typeof getIteratorFn(childSlot) === "function";
            if (isArray3 || isIterable) {
              var type = isArray3 ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (Array.isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  if (!validateSuspenseListNestedChild(children[i], i)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode,
              lastEffect: lastEffectBeforeRendering
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & BlockingMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  tail,
                  lastContentRow,
                  tailMode,
                  workInProgress2.lastEffect
                );
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  true,
                  _tail,
                  null,
                  tailMode,
                  workInProgress2.lastEffect
                );
                break;
              }
              case "together": {
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  null,
                  null,
                  void 0,
                  workInProgress2.lastEffect
                );
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current2, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type;
          var context2 = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!("value" in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes2(providerPropTypes, newProps, "prop", "Context.Provider");
            }
          }
          pushProvider(workInProgress2, newValue);
          if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context2, newValue, oldValue);
            if (changedBits === 0) {
              if (oldProps.children === newProps.children && !hasContextChanged()) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            } else {
              propagateContextChange(workInProgress2, context2, changedBits, renderLanes2);
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderLanes2) {
          var context2 = workInProgress2.type;
          {
            if (context2._context === void 0) {
              if (context2 !== context2.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context2 = context2._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context2, newProps.unstable_observedBits);
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            return null;
          } else {
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var last2 = returnFiber.lastEffect;
            if (last2 !== null) {
              last2.nextEffect = current2;
              returnFiber.lastEffect = current2;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = current2;
            }
            current2.nextEffect = null;
            current2.flags = Deletion;
            newWorkInProgress.flags |= Placement;
            return newWorkInProgress;
          }
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          var updateLanes = workInProgress2.lanes;
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else if (!includesSomeLane(renderLanes2, updateLanes)) {
              didReceiveUpdate = false;
              switch (workInProgress2.tag) {
                case HostRoot:
                  pushHostRootContext(workInProgress2);
                  resetHydrationState();
                  break;
                case HostComponent:
                  pushHostContext(workInProgress2);
                  break;
                case ClassComponent: {
                  var Component = workInProgress2.type;
                  if (isContextProvider(Component)) {
                    pushContextProvider(workInProgress2);
                  }
                  break;
                }
                case HostPortal:
                  pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                  break;
                case ContextProvider: {
                  var newValue = workInProgress2.memoizedProps.value;
                  pushProvider(workInProgress2, newValue);
                  break;
                }
                case Profiler:
                  {
                    var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                    if (hasChildWork) {
                      workInProgress2.flags |= Update;
                    }
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                  break;
                case SuspenseComponent: {
                  var state = workInProgress2.memoizedState;
                  if (state !== null) {
                    var primaryChildFragment = workInProgress2.child;
                    var primaryChildLanes = primaryChildFragment.childLanes;
                    if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                      return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                      var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                      if (child !== null) {
                        return child.sibling;
                      } else {
                        return null;
                      }
                    }
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  }
                  break;
                }
                case SuspenseListComponent: {
                  var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                  var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (didSuspendBefore) {
                    if (_hasChildWork) {
                      return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                    }
                    workInProgress2.flags |= DidCapture;
                  }
                  var renderState = workInProgress2.memoizedState;
                  if (renderState !== null) {
                    renderState.rendering = null;
                    renderState.tail = null;
                    renderState.lastEffect = null;
                  }
                  pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                  if (_hasChildWork) {
                    break;
                  } else {
                    return null;
                  }
                }
                case OffscreenComponent:
                case LegacyHiddenComponent: {
                  workInProgress2.lanes = NoLanes;
                  return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
                }
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            } else {
              if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, updateLanes, renderLanes2);
            }
            case FunctionComponent: {
              var _Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2);
            }
            case ClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderLanes2);
            case ForwardRef: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
            }
            case Fragment2:
              return updateFragment(current2, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current2, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderLanes2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes2(
                      outerPropTypes,
                      _resolvedProps3,
                      "prop",
                      getComponentName(_type2)
                    );
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
            }
            case IncompleteClassComponent: {
              var _Component3 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            case FundamentalComponent: {
              break;
            }
            case ScopeComponent: {
              break;
            }
            case Block: {
              break;
            }
            case OffscreenComponent: {
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
            case LegacyHiddenComponent: {
              return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.flags |= Ref;
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function(parent2, workInProgress2, needsVisibilityToggle, isHidden) {
            var node2 = workInProgress2.child;
            while (node2 !== null) {
              if (node2.tag === HostComponent || node2.tag === HostText) {
                appendInitialChild(parent2, node2.stateNode);
              } else if (node2.tag === HostPortal)
                ;
              else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === workInProgress2) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === workInProgress2) {
                  return;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          };
          updateHostContainer = function(workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment2:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              return null;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              return null;
            }
            case HostRoot: {
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var fiberRoot = workInProgress2.stateNode;
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                } else if (!fiberRoot.hydrate) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              updateHostContainer(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (!(workInProgress2.stateNode !== null)) {
                    {
                      throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (!(workInProgress2.stateNode !== null)) {
                    {
                      throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                workInProgress2.lanes = renderLanes2;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = false;
              if (current2 === null) {
                if (workInProgress2.memoizedProps.fallback !== void 0) {
                  popHydrationState(workInProgress2);
                }
              } else {
                var prevState = current2.memoizedState;
                prevDidTimeout = prevState !== null;
              }
              if (nextDidTimeout && !prevDidTimeout) {
                if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                  var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                    renderDidSuspend();
                  } else {
                    renderDidSuspendDelayIfPossible();
                  }
                }
              }
              {
                if (nextDidTimeout || prevDidTimeout) {
                  workInProgress2.flags |= Update;
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(workInProgress2);
              if (current2 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              return null;
            case ContextProvider:
              popProvider(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                return null;
              }
              var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThennables = suspended.updateQueue;
                        if (newThennables !== null) {
                          workInProgress2.updateQueue = newThennables;
                          workInProgress2.flags |= Update;
                        }
                        if (renderState.lastEffect === null) {
                          workInProgress2.firstEffect = null;
                        }
                        workInProgress2.lastEffect = renderState.lastEffect;
                        resetChildFibers(workInProgress2, renderLanes2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                  if (renderState.tail !== null && now2() > getRenderTargetTime()) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                    {
                      markSpawnedWork(SomeRetryLane);
                    }
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThennables = _suspended.updateQueue;
                    if (_newThennables !== null) {
                      workInProgress2.updateQueue = _newThennables;
                      workInProgress2.flags |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                      var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                      if (lastEffect !== null) {
                        lastEffect.nextEffect = null;
                      }
                      return null;
                    }
                  } else if (now2() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                    {
                      markSpawnedWork(SomeRetryLane);
                    }
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next2 = renderState.tail;
                renderState.rendering = next2;
                renderState.tail = next2.sibling;
                renderState.lastEffect = workInProgress2.lastEffect;
                renderState.renderingStartTime = now2();
                next2.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next2;
              }
              return null;
            }
            case FundamentalComponent: {
              break;
            }
            case ScopeComponent: {
              break;
            }
            case Block:
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popRenderLanes(workInProgress2);
              if (current2 !== null) {
                var _nextState = workInProgress2.memoizedState;
                var _prevState = current2.memoizedState;
                var prevIsHidden = _prevState !== null;
                var nextIsHidden = _nextState !== null;
                if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                  workInProgress2.flags |= Update;
                }
              }
              return null;
            }
          }
          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function unwindWork(workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              var flags = workInProgress2.flags;
              if (flags & ShouldCapture) {
                workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var _flags = workInProgress2.flags;
              if (!((_flags & DidCapture) === NoFlags)) {
                {
                  throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                }
              }
              workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
              return workInProgress2;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var _flags2 = workInProgress2.flags;
              if (_flags2 & ShouldCapture) {
                workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              popProvider(workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress2);
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(interruptedWork) {
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              popProvider(interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        function createCapturedValue(value2, source) {
          return {
            value: value2,
            source,
            stack: getStackByFiberInDevAndProd(source)
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error2 = errorInfo.value;
            if (true) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : "";
              if (error2 != null && error2._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console["error"](error2);
              }
              var componentName = source ? getComponentName(source.type) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              var errorBoundaryName = getComponentName(boundary.type);
              if (errorBoundaryName) {
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              } else {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              }
              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            }
          } catch (e) {
            setTimeout(function() {
              throw e;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error2);
            logCapturedError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              logCapturedError(fiber, errorInfo);
              return getDerivedStateFromError(error$1);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
                logCapturedError(fiber, errorInfo);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                  }
                }
              }
            };
          } else {
            update.callback = function() {
              markFailedErrorBoundaryForHotReloading(fiber);
            };
          }
          return update;
        }
        function attachPingListener(root3, wakeable, lanes) {
          var pingCache = root3.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root3.pingCache = new PossiblyWeakMap$1();
            threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
            wakeable.then(ping, ping);
          }
        }
        function throwException(root3, returnFiber, sourceFiber, value2, rootRenderLanes) {
          sourceFiber.flags |= Incomplete;
          sourceFiber.firstEffect = sourceFiber.lastEffect = null;
          if (value2 !== null && typeof value2 === "object" && typeof value2.then === "function") {
            var wakeable = value2;
            if ((sourceFiber.mode & BlockingMode) === NoMode) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
            var _workInProgress = returnFiber;
            do {
              if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                var wakeables = _workInProgress.updateQueue;
                if (wakeables === null) {
                  var updateQueue = /* @__PURE__ */ new Set();
                  updateQueue.add(wakeable);
                  _workInProgress.updateQueue = updateQueue;
                } else {
                  wakeables.add(wakeable);
                }
                if ((_workInProgress.mode & BlockingMode) === NoMode) {
                  _workInProgress.flags |= DidCapture;
                  sourceFiber.flags |= ForceUpdateForLegacySuspense;
                  sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                  if (sourceFiber.tag === ClassComponent) {
                    var currentSourceFiber = sourceFiber.alternate;
                    if (currentSourceFiber === null) {
                      sourceFiber.tag = IncompleteClassComponent;
                    } else {
                      var update = createUpdate(NoTimestamp, SyncLane);
                      update.tag = ForceUpdate;
                      enqueueUpdate(sourceFiber, update);
                    }
                  }
                  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                  return;
                }
                attachPingListener(root3, wakeable, rootRenderLanes);
                _workInProgress.flags |= ShouldCapture;
                _workInProgress.lanes = rootRenderLanes;
                return;
              }
              _workInProgress = _workInProgress.return;
            } while (_workInProgress !== null);
            value2 = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
          }
          renderDidError();
          value2 = createCapturedValue(value2, sourceFiber);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value2;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                enqueueCapturedUpdate(workInProgress2, _update);
                return;
              }
              case ClassComponent:
                var errorInfo = value2;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update2);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
        }
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          {
            instance.componentWillUnmount();
          }
        };
        function safelyCallComponentWillUnmount(current2, instance) {
          {
            invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
            if (hasCaughtError()) {
              var unmountError = clearCaughtError();
              captureCommitPhaseError(current2, unmountError);
            }
          }
        }
        function safelyDetachRef(current2) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              {
                invokeGuardedCallback(null, ref, null, null);
                if (hasCaughtError()) {
                  var refError = clearCaughtError();
                  captureCommitPhaseError(current2, refError);
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, destroy) {
          {
            invokeGuardedCallback(null, destroy, null);
            if (hasCaughtError()) {
              var error2 = clearCaughtError();
              captureCommitPhaseError(current2, error2);
            }
          }
        }
        function commitBeforeMutationLifeCycles(current2, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block: {
              return;
            }
            case ClassComponent: {
              if (finishedWork.flags & Snapshot) {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
              }
              return;
            }
            case HostRoot: {
              {
                if (finishedWork.flags & Snapshot) {
                  var root3 = finishedWork.stateNode;
                  clearContainer(root3.containerInfo);
                }
              }
              return;
            }
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              return;
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function commitHookEffectListUnmount(tag, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect2 = firstEffect;
            do {
              if ((effect2.tag & tag) === tag) {
                var destroy = effect2.destroy;
                effect2.destroy = void 0;
                if (destroy !== void 0) {
                  destroy();
                }
              }
              effect2 = effect2.next;
            } while (effect2 !== firstEffect);
          }
        }
        function commitHookEffectListMount(tag, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect2 = firstEffect;
            do {
              if ((effect2.tag & tag) === tag) {
                var create = effect2.create;
                effect2.destroy = create();
                {
                  var destroy = effect2.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                  }
                }
              }
              effect2 = effect2.next;
            } while (effect2 !== firstEffect);
          }
        }
        function schedulePassiveEffects(finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect2 = firstEffect;
            do {
              var _effect = effect2, next2 = _effect.next, tag = _effect.tag;
              if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                enqueuePendingPassiveHookEffectUnmount(finishedWork, effect2);
                enqueuePendingPassiveHookEffectMount(finishedWork, effect2);
              }
              effect2 = next2;
            } while (effect2 !== firstEffect);
          }
        }
        function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block: {
              {
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
              }
              schedulePassiveEffects(finishedWork);
              return;
            }
            case ClassComponent: {
              var instance = finishedWork.stateNode;
              if (finishedWork.flags & Update) {
                if (current2 === null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  {
                    instance.componentDidMount();
                  }
                } else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                  var prevState = current2.memoizedState;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  {
                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                  }
                }
              }
              var updateQueue = finishedWork.updateQueue;
              if (updateQueue !== null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                  }
                }
                commitUpdateQueue(finishedWork, updateQueue, instance);
              }
              return;
            }
            case HostRoot: {
              var _updateQueue = finishedWork.updateQueue;
              if (_updateQueue !== null) {
                var _instance = null;
                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;
                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                }
                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }
              return;
            }
            case HostComponent: {
              var _instance2 = finishedWork.stateNode;
              if (current2 === null && finishedWork.flags & Update) {
                var type = finishedWork.type;
                var props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props);
              }
              return;
            }
            case HostText: {
              return;
            }
            case HostPortal: {
              return;
            }
            case Profiler: {
              {
                var _finishedWork$memoize2 = finishedWork.memoizedProps;
                _finishedWork$memoize2.onCommit;
                var onRender = _finishedWork$memoize2.onRender;
                finishedWork.stateNode.effectDuration;
                var commitTime2 = getCommitTime();
                if (typeof onRender === "function") {
                  {
                    onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
                  }
                }
              }
              return;
            }
            case SuspenseComponent: {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              return;
            }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
              return;
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          {
            var node2 = finishedWork;
            while (true) {
              if (node2.tag === HostComponent) {
                var instance = node2.stateNode;
                if (isHidden) {
                  hideInstance(instance);
                } else {
                  unhideInstance(node2.stateNode, node2.memoizedProps);
                }
              } else if (node2.tag === HostText) {
                var _instance3 = node2.stateNode;
                if (isHidden) {
                  hideTextInstance(_instance3);
                } else {
                  unhideTextInstance(_instance3, node2.memoizedProps);
                }
              } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork)
                ;
              else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === finishedWork) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === finishedWork) {
                  return;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              ref(instanceToUse);
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function commitDetachRef(current2) {
          var currentRef = current2.ref;
          if (currentRef !== null) {
            if (typeof currentRef === "function") {
              currentRef(null);
            } else {
              currentRef.current = null;
            }
          }
        }
        function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
          onCommitUnmount(current2);
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block: {
              var updateQueue = current2.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next;
                  var effect2 = firstEffect;
                  do {
                    var _effect2 = effect2, destroy = _effect2.destroy, tag = _effect2.tag;
                    if (destroy !== void 0) {
                      if ((tag & Passive$1) !== NoFlags$1) {
                        enqueuePendingPassiveHookEffectUnmount(current2, effect2);
                      } else {
                        {
                          safelyCallDestroy(current2, destroy);
                        }
                      }
                    }
                    effect2 = effect2.next;
                  } while (effect2 !== firstEffect);
                }
              }
              return;
            }
            case ClassComponent: {
              safelyDetachRef(current2);
              var instance = current2.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(current2, instance);
              }
              return;
            }
            case HostComponent: {
              safelyDetachRef(current2);
              return;
            }
            case HostPortal: {
              {
                unmountHostComponents(finishedRoot, current2);
              }
              return;
            }
            case FundamentalComponent: {
              return;
            }
            case DehydratedFragment: {
              return;
            }
            case ScopeComponent: {
              return;
            }
          }
        }
        function commitNestedUnmounts(finishedRoot, root3, renderPriorityLevel) {
          var node2 = root3;
          while (true) {
            commitUnmount(finishedRoot, node2);
            if (node2.child !== null && node2.tag !== HostPortal) {
              node2.child.return = node2;
              node2 = node2.child;
              continue;
            }
            if (node2 === root3) {
              return;
            }
            while (node2.sibling === null) {
              if (node2.return === null || node2.return === root3) {
                return;
              }
              node2 = node2.return;
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
        }
        function detachFiberMutation(fiber) {
          fiber.alternate = null;
          fiber.child = null;
          fiber.dependencies = null;
          fiber.firstEffect = null;
          fiber.lastEffect = null;
          fiber.memoizedProps = null;
          fiber.memoizedState = null;
          fiber.pendingProps = null;
          fiber.return = null;
          fiber.updateQueue = null;
          {
            fiber._debugOwner = null;
          }
        }
        function getHostParentFiber(fiber) {
          var parent2 = fiber.return;
          while (parent2 !== null) {
            if (isHostParent(parent2)) {
              return parent2;
            }
            parent2 = parent2.return;
          }
          {
            {
              throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node2 = fiber;
          siblings:
            while (true) {
              while (node2.sibling === null) {
                if (node2.return === null || isHostParent(node2.return)) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
              while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
                if (node2.flags & Placement) {
                  continue siblings;
                }
                if (node2.child === null || node2.tag === HostPortal) {
                  continue siblings;
                } else {
                  node2.child.return = node2;
                  node2 = node2.child;
                }
              }
              if (!(node2.flags & Placement)) {
                return node2.stateNode;
              }
            }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          var parent2;
          var isContainer;
          var parentStateNode = parentFiber.stateNode;
          switch (parentFiber.tag) {
            case HostComponent:
              parent2 = parentStateNode;
              isContainer = false;
              break;
            case HostRoot:
              parent2 = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case HostPortal:
              parent2 = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case FundamentalComponent:
            default: {
              {
                throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if (parentFiber.flags & ContentReset) {
            resetTextContent(parent2);
            parentFiber.flags &= ~ContentReset;
          }
          var before = getHostSibling(finishedWork);
          if (isContainer) {
            insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent2);
          } else {
            insertOrAppendPlacementNode(finishedWork, before, parent2);
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node2, before, parent2) {
          var tag = node2.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node2.stateNode : node2.stateNode.instance;
            if (before) {
              insertInContainerBefore(parent2, stateNode, before);
            } else {
              appendChildToContainer(parent2, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node2.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent2);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent2);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node2, before, parent2) {
          var tag = node2.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node2.stateNode : node2.stateNode.instance;
            if (before) {
              insertBefore(parent2, stateNode, before);
            } else {
              appendChild(parent2, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node2.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent2);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent2);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
          var node2 = current2;
          var currentParentIsValid = false;
          var currentParent;
          var currentParentIsContainer;
          while (true) {
            if (!currentParentIsValid) {
              var parent2 = node2.return;
              findParent:
                while (true) {
                  if (!(parent2 !== null)) {
                    {
                      throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var parentStateNode = parent2.stateNode;
                  switch (parent2.tag) {
                    case HostComponent:
                      currentParent = parentStateNode;
                      currentParentIsContainer = false;
                      break findParent;
                    case HostRoot:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                    case HostPortal:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                  }
                  parent2 = parent2.return;
                }
              currentParentIsValid = true;
            }
            if (node2.tag === HostComponent || node2.tag === HostText) {
              commitNestedUnmounts(finishedRoot, node2);
              if (currentParentIsContainer) {
                removeChildFromContainer(currentParent, node2.stateNode);
              } else {
                removeChild(currentParent, node2.stateNode);
              }
            } else if (node2.tag === HostPortal) {
              if (node2.child !== null) {
                currentParent = node2.stateNode.containerInfo;
                currentParentIsContainer = true;
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
            } else {
              commitUnmount(finishedRoot, node2);
              if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
            }
            if (node2 === current2) {
              return;
            }
            while (node2.sibling === null) {
              if (node2.return === null || node2.return === current2) {
                return;
              }
              node2 = node2.return;
              if (node2.tag === HostPortal) {
                currentParentIsValid = false;
              }
            }
            node2.sibling.return = node2.return;
            node2 = node2.sibling;
          }
        }
        function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
          {
            unmountHostComponents(finishedRoot, current2);
          }
          var alternate = current2.alternate;
          detachFiberMutation(current2);
          if (alternate !== null) {
            detachFiberMutation(alternate);
          }
        }
        function commitWork(current2, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block: {
              {
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
              }
              return;
            }
            case ClassComponent: {
              return;
            }
            case HostComponent: {
              var instance = finishedWork.stateNode;
              if (instance != null) {
                var newProps = finishedWork.memoizedProps;
                var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                var type = finishedWork.type;
                var updatePayload = finishedWork.updateQueue;
                finishedWork.updateQueue = null;
                if (updatePayload !== null) {
                  commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
              }
              return;
            }
            case HostText: {
              if (!(finishedWork.stateNode !== null)) {
                {
                  throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var textInstance = finishedWork.stateNode;
              var newText = finishedWork.memoizedProps;
              var oldText = current2 !== null ? current2.memoizedProps : newText;
              commitTextUpdate(textInstance, oldText, newText);
              return;
            }
            case HostRoot: {
              {
                var _root2 = finishedWork.stateNode;
                if (_root2.hydrate) {
                  _root2.hydrate = false;
                  commitHydratedContainer(_root2.containerInfo);
                }
              }
              return;
            }
            case Profiler: {
              return;
            }
            case SuspenseComponent: {
              commitSuspenseComponent(finishedWork);
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case SuspenseListComponent: {
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case IncompleteClassComponent: {
              return;
            }
            case FundamentalComponent: {
              break;
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              var newState = finishedWork.memoizedState;
              var isHidden = newState !== null;
              hideOrUnhideAllChildren(finishedWork, isHidden);
              return;
            }
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function commitSuspenseComponent(finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState !== null) {
            markCommitTimeOfFallback();
            {
              var primaryChildParent = finishedWork.child;
              hideOrUnhideAllChildren(primaryChildParent, true);
            }
          }
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            wakeables.forEach(function(wakeable) {
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              if (!retryCache.has(wakeable)) {
                {
                  if (wakeable.__reactDoNotTraceInteractions !== true) {
                    retry = tracing$1.unstable_wrap(retry);
                  }
                }
                retryCache.add(wakeable);
                wakeable.then(retry, retry);
              }
            });
          }
        }
        function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
          if (current2 !== null) {
            var oldState = current2.memoizedState;
            if (oldState === null || oldState.dehydrated !== null) {
              var newState = finishedWork.memoizedState;
              return newState !== null && newState.dehydrated === null;
            }
          }
          return false;
        }
        function commitResetTextContent(current2) {
          resetTextContent(current2.stateNode);
        }
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor$1 = Symbol.for;
          symbolFor$1("selector.component");
          symbolFor$1("selector.has_pseudo_class");
          symbolFor$1("selector.role");
          symbolFor$1("selector.test_id");
          symbolFor$1("selector.text");
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          {
            commitHooks.forEach(function(commitHook) {
              return commitHook();
            });
          }
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
        var NoContext = 0;
        var BatchedContext = 1;
        var EventContext = 2;
        var DiscreteEventContext = 4;
        var LegacyUnbatchedContext = 8;
        var RenderContext = 16;
        var CommitContext = 32;
        var RetryAfterError = 64;
        var RootIncomplete = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootIncomplete;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var mostRecentlyUpdatedRoot = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now2() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var nextEffect = null;
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsRenderPriority = NoPriority$1;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveHookEffectsMount = [];
        var pendingPassiveHookEffectsUnmount = [];
        var rootsWithPendingDiscreteUpdates = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var spawnedWorkDuringRender = null;
        var currentEventTime = NoTimestamp;
        var currentEventWipLanes = NoLanes;
        var currentEventPendingLanes = NoLanes;
        var isFlushingPassiveEffects = false;
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return now2();
          }
          if (currentEventTime !== NoTimestamp) {
            return currentEventTime;
          }
          currentEventTime = now2();
          return currentEventTime;
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & BlockingMode) === NoMode) {
            return SyncLane;
          } else if ((mode & ConcurrentMode) === NoMode) {
            return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
          }
          if (currentEventWipLanes === NoLanes) {
            currentEventWipLanes = workInProgressRootIncludedLanes;
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (currentEventPendingLanes !== NoLanes) {
              currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
            }
            return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
          }
          var schedulerPriority = getCurrentPriorityLevel();
          var lane;
          if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
            lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
          } else {
            var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
            lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
          }
          return lane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          if ((mode & BlockingMode) === NoMode) {
            return SyncLane;
          } else if ((mode & ConcurrentMode) === NoMode) {
            return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
          }
          if (currentEventWipLanes === NoLanes) {
            currentEventWipLanes = workInProgressRootIncludedLanes;
          }
          return findRetryLane(currentEventWipLanes);
        }
        function scheduleUpdateOnFiber(fiber, lane, eventTime) {
          checkForNestedUpdates();
          warnAboutRenderPhaseUpdatesInDEV(fiber);
          var root3 = markUpdateLaneFromFiberToRoot(fiber, lane);
          if (root3 === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return null;
          }
          markRootUpdated(root3, lane, eventTime);
          if (root3 === workInProgressRoot) {
            {
              workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
            }
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
              markRootSuspended$1(root3, workInProgressRootRenderLanes);
            }
          }
          var priorityLevel = getCurrentPriorityLevel();
          if (lane === SyncLane) {
            if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              schedulePendingInteractions(root3, lane);
              performSyncWorkOnRoot(root3);
            } else {
              ensureRootIsScheduled(root3, eventTime);
              schedulePendingInteractions(root3, lane);
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          } else {
            if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
              if (rootsWithPendingDiscreteUpdates === null) {
                rootsWithPendingDiscreteUpdates = /* @__PURE__ */ new Set([root3]);
              } else {
                rootsWithPendingDiscreteUpdates.add(root3);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
            schedulePendingInteractions(root3, lane);
          }
          mostRecentlyUpdatedRoot = root3;
        }
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          {
            if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
          var node2 = sourceFiber;
          var parent2 = sourceFiber.return;
          while (parent2 !== null) {
            parent2.childLanes = mergeLanes(parent2.childLanes, lane);
            alternate = parent2.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent2.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }
            node2 = parent2;
            parent2 = parent2.return;
          }
          if (node2.tag === HostRoot) {
            var root3 = node2.stateNode;
            return root3;
          } else {
            return null;
          }
        }
        function ensureRootIsScheduled(root3, currentTime) {
          var existingCallbackNode = root3.callbackNode;
          markStarvedLanesAsExpired(root3, currentTime);
          var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          var newCallbackPriority = returnNextLanesPriority();
          if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) {
              cancelCallback(existingCallbackNode);
              root3.callbackNode = null;
              root3.callbackPriority = NoLanePriority;
            }
            return;
          }
          if (existingCallbackNode !== null) {
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority) {
              return;
            }
            cancelCallback(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLanePriority) {
            newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
          } else if (newCallbackPriority === SyncBatchedLanePriority) {
            newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root3));
          } else {
            var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
            newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
          }
          root3.callbackPriority = newCallbackPriority;
          root3.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root3) {
          currentEventTime = NoTimestamp;
          currentEventWipLanes = NoLanes;
          currentEventPendingLanes = NoLanes;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          var originalCallbackNode = root3.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root3.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes) {
            return null;
          }
          var exitStatus = renderRootConcurrent(root3, lanes);
          if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
            prepareFreshStack(root3, NoLanes);
          } else if (exitStatus !== RootIncomplete) {
            if (exitStatus === RootErrored) {
              executionContext |= RetryAfterError;
              if (root3.hydrate) {
                root3.hydrate = false;
                clearContainer(root3.containerInfo);
              }
              lanes = getLanesToRetrySynchronouslyOnError(root3);
              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root3, lanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now2());
              throw fatalError;
            }
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            finishConcurrentRender(root3, exitStatus, lanes);
          }
          ensureRootIsScheduled(root3, now2());
          if (root3.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root3);
          }
          return null;
        }
        function finishConcurrentRender(root3, exitStatus, lanes) {
          switch (exitStatus) {
            case RootIncomplete:
            case RootFatalErrored: {
              {
                {
                  throw Error("Root did not complete. This is a bug in React.");
                }
              }
            }
            case RootErrored: {
              commitRoot(root3);
              break;
            }
            case RootSuspended: {
              markRootSuspended$1(root3, lanes);
              if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now2();
                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root3, NoLanes);
                  if (nextLanes !== NoLanes) {
                    break;
                  }
                  var suspendedLanes = root3.suspendedLanes;
                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    requestEventTime();
                    markRootPinged(root3, suspendedLanes);
                    break;
                  }
                  root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root3);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspended$1(root3, lanes);
              if (includesOnlyTransitions(lanes)) {
                break;
              }
              {
                var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now2() - eventTimeMs;
                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                if (_msUntilTimeout > 10) {
                  root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root3);
              break;
            }
            case RootCompleted: {
              commitRoot(root3);
              break;
            }
            default: {
              {
                {
                  throw Error("Unknown root exit status.");
                }
              }
            }
          }
        }
        function markRootSuspended$1(root3, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
          markRootSuspended(root3, suspendedLanes);
        }
        function performSyncWorkOnRoot(root3) {
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          flushPassiveEffects();
          var lanes;
          var exitStatus;
          if (root3 === workInProgressRoot && includesSomeLane(root3.expiredLanes, workInProgressRootRenderLanes)) {
            lanes = workInProgressRootRenderLanes;
            exitStatus = renderRootSync(root3, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              lanes = getNextLanes(root3, lanes);
              exitStatus = renderRootSync(root3, lanes);
            }
          } else {
            lanes = getNextLanes(root3, NoLanes);
            exitStatus = renderRootSync(root3, lanes);
          }
          if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
            executionContext |= RetryAfterError;
            if (root3.hydrate) {
              root3.hydrate = false;
              clearContainer(root3.containerInfo);
            }
            lanes = getLanesToRetrySynchronouslyOnError(root3);
            if (lanes !== NoLanes) {
              exitStatus = renderRootSync(root3, lanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root3, NoLanes);
            markRootSuspended$1(root3, lanes);
            ensureRootIsScheduled(root3, now2());
            throw fatalError;
          }
          var finishedWork = root3.current.alternate;
          root3.finishedWork = finishedWork;
          root3.finishedLanes = lanes;
          commitRoot(root3);
          ensureRootIsScheduled(root3, now2());
          return null;
        }
        function flushDiscreteUpdates() {
          if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
              }
            }
            return;
          }
          flushPendingDiscreteUpdates();
          flushPassiveEffects();
        }
        function flushPendingDiscreteUpdates() {
          if (rootsWithPendingDiscreteUpdates !== null) {
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(function(root3) {
              markDiscreteUpdatesExpired(root3);
              ensureRootIsScheduled(root3, now2());
            });
          }
          flushSyncCallbackQueue();
        }
        function batchedUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }
        function batchedEventUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= EventContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }
        function discreteUpdates$1(fn, a, b, c, d) {
          var prevExecutionContext = executionContext;
          executionContext |= DiscreteEventContext;
          {
            try {
              return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
        }
        function unbatchedUpdates(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext &= ~BatchedContext;
          executionContext |= LegacyUnbatchedContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }
        function flushSync(fn, a) {
          var prevExecutionContext = executionContext;
          if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
            {
              error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            }
            return fn(a);
          }
          executionContext |= BatchedContext;
          {
            try {
              if (fn) {
                return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
              } else {
                return void 0;
              }
            } finally {
              executionContext = prevExecutionContext;
              flushSyncCallbackQueue();
            }
          }
        }
        function pushRenderLanes(fiber, lanes) {
          push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root3, lanes) {
          root3.finishedWork = null;
          root3.finishedLanes = NoLanes;
          var timeoutHandle = root3.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root3.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              unwindInterruptedWork(interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root3;
          workInProgress = createWorkInProgress(root3.current, null);
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootIncomplete;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          {
            spawnedWorkDuringRender = null;
          }
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
        }
        function handleError(root3, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              ReactCurrentOwner$2.current = null;
              if (erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return;
              }
              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }
              throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              if (workInProgress === erroredWork && erroredWork !== null) {
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function pushInteractions(root3) {
          {
            var prevInteractions = tracing$1.__interactionsRef.current;
            tracing$1.__interactionsRef.current = root3.memoizedInteractions;
            return prevInteractions;
          }
        }
        function popInteractions(prevInteractions) {
          {
            tracing$1.__interactionsRef.current = prevInteractions;
          }
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now2();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }
        function renderDidError() {
          if (workInProgressRootExitStatus !== RootCompleted) {
            workInProgressRootExitStatus = RootErrored;
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootIncomplete;
        }
        function renderRootSync(root3, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            prepareFreshStack(root3, lanes);
            startWorkOnPendingInteractions(root3, lanes);
          }
          var prevInteractions = pushInteractions(root3);
          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root3, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          {
            popInteractions(prevInteractions);
          }
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          if (workInProgress !== null) {
            {
              {
                throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root3, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            resetRenderTimer();
            prepareFreshStack(root3, lanes);
            startWorkOnPendingInteractions(root3, lanes);
          }
          var prevInteractions = pushInteractions(root3);
          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root3, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          {
            popInteractions(prevInteractions);
          }
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            return RootIncomplete;
          } else {
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next2;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next2 === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next2;
          }
          ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current2 = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next2 = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode) {
                next2 = completeWork(current2, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }
              resetCurrentFiber();
              if (next2 !== null) {
                workInProgress = next2;
                return;
              }
              resetChildLanes(completedWork);
              if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                if (returnFiber.firstEffect === null) {
                  returnFiber.firstEffect = completedWork.firstEffect;
                }
                if (completedWork.lastEffect !== null) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                  }
                  returnFiber.lastEffect = completedWork.lastEffect;
                }
                var flags = completedWork.flags;
                if (flags > PerformedWork) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = completedWork;
                  } else {
                    returnFiber.firstEffect = completedWork;
                  }
                  returnFiber.lastEffect = completedWork;
                }
              }
            } else {
              var _next = unwindWork(completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
              }
              if (returnFiber !== null) {
                returnFiber.firstEffect = returnFiber.lastEffect = null;
                returnFiber.flags |= Incomplete;
              }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function resetChildLanes(completedWork) {
          if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
            return;
          }
          var newChildLanes = NoLanes;
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration;
            var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            var child = completedWork.child;
            while (child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
              if (shouldBubbleActualDurations) {
                actualDuration += child.actualDuration;
              }
              treeBaseDuration += child.treeBaseDuration;
              child = child.sibling;
            }
            var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
            if (isTimedOutSuspense) {
              var primaryChildFragment = completedWork.child;
              if (primaryChildFragment !== null) {
                treeBaseDuration -= primaryChildFragment.treeBaseDuration;
              }
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
          } else {
            var _child = completedWork.child;
            while (_child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
              _child = _child.sibling;
            }
          }
          completedWork.childLanes = newChildLanes;
        }
        function commitRoot(root3) {
          var renderPriorityLevel = getCurrentPriorityLevel();
          runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root3, renderPriorityLevel));
          return null;
        }
        function commitRootImpl(root3, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          var finishedWork = root3.finishedWork;
          var lanes = root3.finishedLanes;
          if (finishedWork === null) {
            return null;
          }
          root3.finishedWork = null;
          root3.finishedLanes = NoLanes;
          if (!(finishedWork !== root3.current)) {
            {
              throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          root3.callbackNode = null;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root3, remainingLanes);
          if (rootsWithPendingDiscreteUpdates !== null) {
            if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root3)) {
              rootsWithPendingDiscreteUpdates.delete(root3);
            }
          }
          if (root3 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          var firstEffect;
          if (finishedWork.flags > PerformedWork) {
            if (finishedWork.lastEffect !== null) {
              finishedWork.lastEffect.nextEffect = finishedWork;
              firstEffect = finishedWork.firstEffect;
            } else {
              firstEffect = finishedWork;
            }
          } else {
            firstEffect = finishedWork.firstEffect;
          }
          if (firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root3);
            ReactCurrentOwner$2.current = null;
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            shouldFireAfterActiveInstanceBlur = false;
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var error2 = clearCaughtError();
                  captureCommitPhaseError(nextEffect, error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            focusedInstanceHandle = null;
            {
              recordCommitTime();
            }
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitMutationEffects, null, root3, renderPriorityLevel);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            resetAfterCommit(root3.containerInfo);
            root3.current = finishedWork;
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitLayoutEffects, null, root3, lanes);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error2 = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            nextEffect = null;
            requestPaint();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
          } else {
            root3.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root3;
            pendingPassiveEffectsLanes = lanes;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
          } else {
            nextEffect = firstEffect;
            while (nextEffect !== null) {
              var nextNextEffect = nextEffect.nextEffect;
              nextEffect.nextEffect = null;
              if (nextEffect.flags & Deletion) {
                detachFiberAfterEffects(nextEffect);
              }
              nextEffect = nextNextEffect;
            }
          }
          remainingLanes = root3.pendingLanes;
          if (remainingLanes !== NoLanes) {
            {
              if (spawnedWorkDuringRender !== null) {
                var expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;
                for (var i = 0; i < expirationTimes.length; i++) {
                  scheduleInteractions(root3, expirationTimes[i], root3.memoizedInteractions);
                }
              }
              schedulePendingInteractions(root3, remainingLanes);
            }
          } else {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              finishPendingInteractions(root3, lanes);
            }
          }
          if (remainingLanes === SyncLane) {
            if (root3 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root3;
            }
          } else {
            nestedUpdateCount = 0;
          }
          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            onCommitRoot$1();
          }
          ensureRootIsScheduled(root3, now2());
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
          }
          if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
            return null;
          }
          flushSyncCallbackQueue();
          return null;
        }
        function commitBeforeMutationEffects() {
          while (nextEffect !== null) {
            var current2 = nextEffect.alternate;
            if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
              if ((nextEffect.flags & Deletion) !== NoFlags) {
                if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                  shouldFireAfterActiveInstanceBlur = true;
                }
              } else {
                if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current2, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                  shouldFireAfterActiveInstanceBlur = true;
                }
              }
            }
            var flags = nextEffect.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(nextEffect);
              commitBeforeMutationLifeCycles(current2, nextEffect);
              resetCurrentFiber();
            }
            if ((flags & Passive) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback(NormalPriority$1, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitMutationEffects(root3, renderPriorityLevel) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & ContentReset) {
              commitResetTextContent(nextEffect);
            }
            if (flags & Ref) {
              var current2 = nextEffect.alternate;
              if (current2 !== null) {
                commitDetachRef(current2);
              }
            }
            var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
            switch (primaryFlags) {
              case Placement: {
                commitPlacement(nextEffect);
                nextEffect.flags &= ~Placement;
                break;
              }
              case PlacementAndUpdate: {
                commitPlacement(nextEffect);
                nextEffect.flags &= ~Placement;
                var _current = nextEffect.alternate;
                commitWork(_current, nextEffect);
                break;
              }
              case Hydrating: {
                nextEffect.flags &= ~Hydrating;
                break;
              }
              case HydratingAndUpdate: {
                nextEffect.flags &= ~Hydrating;
                var _current2 = nextEffect.alternate;
                commitWork(_current2, nextEffect);
                break;
              }
              case Update: {
                var _current3 = nextEffect.alternate;
                commitWork(_current3, nextEffect);
                break;
              }
              case Deletion: {
                commitDeletion(root3, nextEffect);
                break;
              }
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitLayoutEffects(root3, committedLanes) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & (Update | Callback)) {
              var current2 = nextEffect.alternate;
              commitLifeCycles(root3, current2, nextEffect);
            }
            {
              if (flags & Ref) {
                commitAttachRef(nextEffect);
              }
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function flushPassiveEffects() {
          if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority$1;
            {
              return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
            }
          }
          return false;
        }
        function enqueuePendingPassiveHookEffectMount(fiber, effect2) {
          pendingPassiveHookEffectsMount.push(effect2, fiber);
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
        function enqueuePendingPassiveHookEffectUnmount(fiber, effect2) {
          pendingPassiveHookEffectsUnmount.push(effect2, fiber);
          {
            fiber.flags |= PassiveUnmountPendingDev;
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.flags |= PassiveUnmountPendingDev;
            }
          }
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
        function invokePassiveEffectCreate(effect2) {
          var create = effect2.create;
          effect2.destroy = create();
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var root3 = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Cannot flush passive effects while already rendering.");
            }
          }
          {
            isFlushingPassiveEffects = true;
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          var prevInteractions = pushInteractions(root3);
          var unmountEffects = pendingPassiveHookEffectsUnmount;
          pendingPassiveHookEffectsUnmount = [];
          for (var i = 0; i < unmountEffects.length; i += 2) {
            var _effect = unmountEffects[i];
            var fiber = unmountEffects[i + 1];
            var destroy = _effect.destroy;
            _effect.destroy = void 0;
            {
              fiber.flags &= ~PassiveUnmountPendingDev;
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.flags &= ~PassiveUnmountPendingDev;
              }
            }
            if (typeof destroy === "function") {
              {
                setCurrentFiber(fiber);
                {
                  invokeGuardedCallback(null, destroy, null);
                }
                if (hasCaughtError()) {
                  if (!(fiber !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var error2 = clearCaughtError();
                  captureCommitPhaseError(fiber, error2);
                }
                resetCurrentFiber();
              }
            }
          }
          var mountEffects = pendingPassiveHookEffectsMount;
          pendingPassiveHookEffectsMount = [];
          for (var _i = 0; _i < mountEffects.length; _i += 2) {
            var _effect2 = mountEffects[_i];
            var _fiber = mountEffects[_i + 1];
            {
              setCurrentFiber(_fiber);
              {
                invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
              }
              if (hasCaughtError()) {
                if (!(_fiber !== null)) {
                  {
                    throw Error("Should be working on an effect.");
                  }
                }
                var _error4 = clearCaughtError();
                captureCommitPhaseError(_fiber, _error4);
              }
              resetCurrentFiber();
            }
          }
          var effect2 = root3.current.firstEffect;
          while (effect2 !== null) {
            var nextNextEffect = effect2.nextEffect;
            effect2.nextEffect = null;
            if (effect2.flags & Deletion) {
              detachFiberAfterEffects(effect2);
            }
            effect2 = nextNextEffect;
          }
          {
            popInteractions(prevInteractions);
            finishPendingInteractions(root3, lanes);
          }
          {
            isFlushingPassiveEffects = false;
          }
          executionContext = prevExecutionContext;
          flushSyncCallbackQueue();
          nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValue(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          enqueueUpdate(rootFiber, update);
          var eventTime = requestEventTime();
          var root3 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
          if (root3 !== null) {
            markRootUpdated(root3, SyncLane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
            schedulePendingInteractions(root3, SyncLane);
          }
        }
        function captureCommitPhaseError(sourceFiber, error2) {
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
            return;
          }
          var fiber = sourceFiber.return;
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValue(error2, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                enqueueUpdate(fiber, update);
                var eventTime = requestEventTime();
                var root3 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                if (root3 !== null) {
                  markRootUpdated(root3, SyncLane, eventTime);
                  ensureRootIsScheduled(root3, eventTime);
                  schedulePendingInteractions(root3, SyncLane);
                } else {
                  if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    try {
                      instance.componentDidCatch(error2, errorInfo);
                    } catch (errorToIgnore) {
                    }
                  }
                }
                return;
              }
            }
            fiber = fiber.return;
          }
        }
        function pingSuspendedRoot(root3, wakeable, pingedLanes) {
          var pingCache = root3.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          var eventTime = requestEventTime();
          markRootPinged(root3, pingedLanes);
          if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now2() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root3, NoLanes);
            } else {
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }
          ensureRootIsScheduled(root3, eventTime);
          schedulePendingInteractions(root3, pingedLanes);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var eventTime = requestEventTime();
          var root3 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
          if (root3 !== null) {
            markRootUpdated(root3, retryLane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
            schedulePendingInteractions(root3, retryLane);
          }
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          {
            retryCache = boundaryFiber.stateNode;
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            {
              {
                throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
              }
            }
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
              return;
            }
            var tag = fiber.tag;
            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
              return;
            }
            var componentName = getComponentName(fiber.type) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
            }
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var didWarnStateUpdateForUnmountedComponent = null;
        function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
          {
            var tag = fiber.tag;
            if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
              return;
            }
            if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
              return;
            }
            var componentName = getComponentName(fiber.type) || "ReactComponent";
            if (didWarnStateUpdateForUnmountedComponent !== null) {
              if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForUnmountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForUnmountedComponent = /* @__PURE__ */ new Set([componentName]);
            }
            if (isFlushingPassiveEffects)
              ;
            else {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, lanes);
            } catch (originalError) {
              if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                throw replayError;
              } else {
                throw originalError;
              }
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        var IsThisRendererActing = {
          current: false
        };
        function warnIfNotScopedWithMatchingAct(fiber) {
          {
            if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
          {
            if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
            }
          }
        }
        function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
          {
            if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
        var didWarnAboutUnmockedScheduler = false;
        function warnIfUnmockedScheduler(fiber) {
          {
            if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
              if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
              }
            }
          }
        }
        function computeThreadID(root3, lane) {
          return lane * 1e3 + root3.interactionThreadID;
        }
        function markSpawnedWork(lane) {
          if (spawnedWorkDuringRender === null) {
            spawnedWorkDuringRender = [lane];
          } else {
            spawnedWorkDuringRender.push(lane);
          }
        }
        function scheduleInteractions(root3, lane, interactions) {
          if (interactions.size > 0) {
            var pendingInteractionMap = root3.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(lane);
            if (pendingInteractions != null) {
              interactions.forEach(function(interaction) {
                if (!pendingInteractions.has(interaction)) {
                  interaction.__count++;
                }
                pendingInteractions.add(interaction);
              });
            } else {
              pendingInteractionMap.set(lane, new Set(interactions));
              interactions.forEach(function(interaction) {
                interaction.__count++;
              });
            }
            var subscriber = tracing$1.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root3, lane);
              subscriber.onWorkScheduled(interactions, threadID);
            }
          }
        }
        function schedulePendingInteractions(root3, lane) {
          scheduleInteractions(root3, lane, tracing$1.__interactionsRef.current);
        }
        function startWorkOnPendingInteractions(root3, lanes) {
          var interactions = /* @__PURE__ */ new Set();
          root3.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
            if (includesSomeLane(lanes, scheduledLane)) {
              scheduledInteractions.forEach(function(interaction) {
                return interactions.add(interaction);
              });
            }
          });
          root3.memoizedInteractions = interactions;
          if (interactions.size > 0) {
            var subscriber = tracing$1.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root3, lanes);
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error2) {
                scheduleCallback(ImmediatePriority$1, function() {
                  throw error2;
                });
              }
            }
          }
        }
        function finishPendingInteractions(root3, committedLanes) {
          var remainingLanesAfterCommit = root3.pendingLanes;
          var subscriber;
          try {
            subscriber = tracing$1.__subscriberRef.current;
            if (subscriber !== null && root3.memoizedInteractions.size > 0) {
              var threadID = computeThreadID(root3, committedLanes);
              subscriber.onWorkStopped(root3.memoizedInteractions, threadID);
            }
          } catch (error2) {
            scheduleCallback(ImmediatePriority$1, function() {
              throw error2;
            });
          } finally {
            var pendingInteractionMap = root3.pendingInteractionMap;
            pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
              if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                pendingInteractionMap.delete(lane);
                scheduledInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    try {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    } catch (error2) {
                      scheduleCallback(ImmediatePriority$1, function() {
                        throw error2;
                      });
                    }
                  }
                });
              }
            });
          }
        }
        function shouldForceFlushFallbacksInDEV() {
          return actingUpdatesScopeDepth > 0;
        }
        var actingUpdatesScopeDepth = 0;
        function detachFiberAfterEffects(fiber) {
          fiber.sibling = null;
          fiber.stateNode = null;
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = /* @__PURE__ */ new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root3, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync(function() {
              scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root3, element) {
          {
            if (root3.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync(function() {
              updateContainer(element, root3, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root3, families) {
          {
            var hostInstances = /* @__PURE__ */ new Set();
            var types2 = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root3.current, types2, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types2, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types2.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types2, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types2, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node2 = fiber;
            while (true) {
              switch (node2.tag) {
                case HostComponent:
                  hostInstances.add(node2.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node2.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node2.stateNode.containerInfo);
                  return;
              }
              if (node2.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node2 = node2.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node2 = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node2.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node2.stateNode);
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === fiber) {
                return foundHostInstances;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === fiber) {
                  return foundHostInstances;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
            /* @__PURE__ */ new Set([nonExtensibleObject]);
          } catch (e) {
            hasBadMapPolyfill = true;
          }
        }
        var debugCounter = 1;
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.flags = NoFlags;
          this.nextEffect = null;
          this.firstEffect = null;
          this.lastEffect = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugID = debugCounter++;
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct$1(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component) {
          if (typeof Component === "function") {
            return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
          } else if (Component !== void 0 && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              workInProgress2._debugID = current2._debugID;
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current2.type;
            workInProgress2.flags = NoFlags;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= Placement;
          workInProgress2.nextEffect = null;
          workInProgress2.firstEffect = null;
          workInProgress2.lastEffect = null;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.type = current2.type;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode | BlockingMode | StrictMode;
          } else if (tag === BlockingRoot) {
            mode = BlockingMode | StrictMode;
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag:
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_DEBUG_TRACING_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= DebugTracingMode;
                  break;
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictMode;
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                  return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
                case REACT_SCOPE_TYPE:
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                      case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentName(owner.type) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  {
                    {
                      throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                    }
                  }
                }
              }
          }
          var fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element, mode, lanes) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          var fiber = createFiber(Fragment2, elements, key, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          {
            if (typeof pendingProps.id !== "string") {
              error('Profiler must specify an "id" as a prop');
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.type = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.type = REACT_SUSPENSE_TYPE;
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          {
            fiber.type = REACT_SUSPENSE_LIST_TYPE;
          }
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
          {
            fiber.type = REACT_OFFSCREEN_TYPE;
          }
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
          var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
          {
            fiber.type = REACT_LEGACY_HIDDEN_TYPE;
          }
          fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromText(content, mode, lanes) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          fiber.type = "DELETED";
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.nextEffect = source.nextEffect;
          target.firstEffect = source.firstEffect;
          target.lastEffect = source.lastEffect;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugID = source._debugID;
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.hydrate = hydrate2;
          this.callbackNode = null;
          this.callbackPriority = NoLanePriority;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.interactionThreadID = tracing$1.unstable_getThreadID();
            this.memoizedInteractions = /* @__PURE__ */ new Set();
            this.pendingInteractionMap = /* @__PURE__ */ new Map();
          }
          {
            switch (tag) {
              case BlockingRoot:
                this._debugRootType = "createBlockingRoot()";
                break;
              case ConcurrentRoot:
                this._debugRootType = "createRoot()";
                break;
              case LegacyRoot:
                this._debugRootType = "createLegacyRoot()";
                break;
            }
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
          var root3 = new FiberRootNode(containerInfo, tag, hydrate2);
          var uninitializedFiber = createHostRootFiber(tag);
          root3.current = uninitializedFiber;
          uninitializedFiber.stateNode = root3;
          initializeUpdateQueue(uninitializedFiber);
          return root3;
        }
        function registerMutableSourceForHydration(root3, mutableSource) {
          var getVersion = mutableSource._getVersion;
          var version = getVersion(mutableSource._source);
          if (root3.mutableSourceEagerHydrationData == null) {
            root3.mutableSourceEagerHydrationData = [mutableSource, version];
          } else {
            root3.mutableSourceEagerHydrationData.push(mutableSource, version);
          }
        }
        function createPortal(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          return {
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get2(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) {
              return processChildContext(fiber, Component, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get2(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              } else {
                {
                  {
                    throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                  }
                }
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictMode) {
              var componentName = getComponentName(fiber.type) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictMode) {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  } else {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
          return createFiberRoot(containerInfo, tag, hydrate2);
        }
        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var eventTime = requestEventTime();
          {
            if ("undefined" !== typeof jest) {
              warnIfUnmockedScheduler(current$1);
              warnIfNotScopedWithMatchingAct(current$1);
            }
          }
          var lane = requestUpdateLane(current$1);
          var context2 = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context2;
          } else {
            container.pendingContext = context2;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
            }
          }
          var update = createUpdate(eventTime, lane);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          enqueueUpdate(current$1, update);
          scheduleUpdateOnFiber(current$1, lane, eventTime);
          return lane;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptUserBlockingHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var eventTime = requestEventTime();
          var lane = InputDiscreteHydrationLane;
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var eventTime = requestEventTime();
          var lane = SelectiveHydrationLane;
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function runWithPriority$2(priority, fn) {
          try {
            setCurrentUpdateLanePriority(priority);
            return fn();
          } finally {
          }
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.tag === FundamentalComponent) {
            return hostFiber.stateNode.instance;
          }
          return hostFiber.stateNode;
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function(obj, path, index2) {
            var key = path[index2];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            if (index2 + 1 === path.length) {
              if (Array.isArray(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }
              return updated;
            }
            updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
            return updated;
          };
          var copyWithDelete = function(obj, path) {
            return copyWithDeleteImpl(obj, path, 0);
          };
          var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
            var oldKey = oldPath[index2];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            if (index2 + 1 === oldPath.length) {
              var newKey = newPath[index2];
              updated[newKey] = updated[oldKey];
              if (Array.isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(
                obj[oldKey],
                oldPath,
                newPath,
                index2 + 1
              );
            }
            return updated;
          };
          var copyWithRename = function(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn2("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i = 0; i < newPath.length - 1; i++) {
                if (oldPath[i] !== newPath[i]) {
                  warn2("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function(obj, path, index2, value2) {
            if (index2 >= path.length) {
              return value2;
            }
            var key = path[index2];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value2);
            return updated;
          };
          var copyWithSet = function(obj, path, value2) {
            return copyWithSetImpl(obj, path, 0, value2);
          };
          var findHook = function(fiber, id) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            return currentHook2;
          };
          overrideHookState = function(fiber, id, path, value2) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path, value2);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };
          overrideHookStateDeletePath = function(fiber, id, path) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };
          overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };
          overrideProps = function(fiber, path, value2) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value2);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          overridePropsDeletePath = function(fiber, path) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          overridePropsRenamePath = function(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          scheduleUpdate = function(fiber) {
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            getCurrentFiber: getCurrentFiberForDevTools
          });
        }
        function ReactDOMBlockingRoot(container, tag, options2) {
          this._internalRoot = createRootImpl(container, tag, options2);
        }
        ReactDOMBlockingRoot.prototype.render = function(children) {
          var root3 = this._internalRoot;
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
            var container = root3.containerInfo;
            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root3.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root3, null, null);
        };
        ReactDOMBlockingRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root3 = this._internalRoot;
          var container = root3.containerInfo;
          updateContainer(null, root3, null, function() {
            unmarkContainerAsRoot(container);
          });
        };
        function createRootImpl(container, tag, options2) {
          var hydrate2 = options2 != null && options2.hydrate === true;
          options2 != null && options2.hydrationOptions || null;
          var mutableSources = options2 != null && options2.hydrationOptions != null && options2.hydrationOptions.mutableSources || null;
          var root3 = createContainer(container, tag, hydrate2);
          markContainerAsRoot(root3.current, container);
          container.nodeType;
          {
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
          }
          if (mutableSources) {
            for (var i = 0; i < mutableSources.length; i++) {
              var mutableSource = mutableSources[i];
              registerMutableSourceForHydration(root3, mutableSource);
            }
          }
          return root3;
        }
        function createLegacyRoot(container, options2) {
          return new ReactDOMBlockingRoot(container, LegacyRoot, options2);
        }
        function isValidContainer(node2) {
          return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        var warnedAboutHydrateAPI = false;
        {
          topLevelUpdateWarnings = function(container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function shouldHydrateDueToLegacyHeuristic(container) {
          var rootElement2 = getReactRootElementInContainer(container);
          return !!(rootElement2 && rootElement2.nodeType === ELEMENT_NODE && rootElement2.hasAttribute(ROOT_ATTRIBUTE_NAME));
        }
        function legacyCreateRootFromDOMContainer(container, forceHydrate) {
          var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
          if (!shouldHydrate) {
            var warned = false;
            var rootSibling;
            while (rootSibling = container.lastChild) {
              {
                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                  warned = true;
                  error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                }
              }
              container.removeChild(rootSibling);
            }
          }
          {
            if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
              warnedAboutHydrateAPI = true;
              warn2("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
            }
          }
          return createLegacyRoot(container, shouldHydrate ? {
            hydrate: true
          } : void 0);
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var root3 = container._reactRootContainer;
          var fiberRoot;
          if (!root3) {
            root3 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
            fiberRoot = root3._internalRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(fiberRoot);
                originalCallback.call(instance);
              };
            }
            unbatchedUpdates(function() {
              updateContainer(children, fiberRoot, parentComponent, callback);
            });
          } else {
            fiberRoot = root3._internalRoot;
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(fiberRoot);
                _originalCallback.call(instance);
              };
            }
            updateContainer(children, fiberRoot, parentComponent, callback);
          }
          return getPublicRootInstance(fiberRoot);
        }
        function findDOMNode(componentOrElement) {
          {
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container, callback) {
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        }
        function render(element, container, callback) {
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          if (!isValidContainer(containerNode)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          if (!(parentComponent != null && has2(parentComponent))) {
            {
              throw Error("parentComponent must be a valid React Component");
            }
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        function unmountComponentAtNode(container) {
          if (!isValidContainer(container)) {
            {
              throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            unbatchedUpdates(function() {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                container._reactRootContainer = null;
                unmarkContainerAsRoot(container);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
              var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        setAttemptHydrationAtPriority(runWithPriority$2);
        var didWarnAboutUnstableCreatePortal = false;
        {
          if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
        function createPortal$1(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          return createPortal(children, container, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        function unstable_createPortal(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          {
            if (!didWarnAboutUnstableCreatePortal) {
              didWarnAboutUnstableCreatePortal = true;
              warn2('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
            }
          }
          return createPortal$1(children, container, key);
        }
        var Internals = {
          Events: [
            getInstanceFromNode,
            getNodeFromInstance,
            getFiberCurrentPropsFromNode,
            enqueueStateRestore,
            restoreStateIfNeeded,
            flushPassiveEffects,
            IsThisRendererActing
          ]
        };
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        reactDom_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        reactDom_development.createPortal = createPortal$1;
        reactDom_development.findDOMNode = findDOMNode;
        reactDom_development.flushSync = flushSync;
        reactDom_development.hydrate = hydrate;
        reactDom_development.render = render;
        reactDom_development.unmountComponentAtNode = unmountComponentAtNode;
        reactDom_development.unstable_batchedUpdates = batchedUpdates$1;
        reactDom_development.unstable_createPortal = unstable_createPortal;
        reactDom_development.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        reactDom_development.version = ReactVersion;
      })();
    }
    (function(module2) {
      {
        module2.exports = reactDom_development;
      }
    })(reactDom);
    const ReactDOM = /* @__PURE__ */ getDefaultExportFromCjs(reactDom.exports);
    function _typeof$1(obj) {
      "@babel/helpers - typeof";
      return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof$1(obj);
    }
    function _toPrimitive(input, hint) {
      if (_typeof$1(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof$1(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof$1(key) === "symbol" ? key : String(key);
    }
    function _defineProperty$2(obj, key, value2) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value2,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function chainPropTypes(propType1, propType2) {
      return function validate(...args) {
        return propType1(...args) || propType2(...args);
      };
    }
    function _extends$1() {
      _extends$1 = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends$1.apply(this, arguments);
    }
    function isPlainObject$5(item) {
      return item !== null && typeof item === "object" && item.constructor === Object;
    }
    function deepClone(source) {
      if (!isPlainObject$5(source)) {
        return source;
      }
      const output = {};
      Object.keys(source).forEach((key) => {
        output[key] = deepClone(source[key]);
      });
      return output;
    }
    function deepmerge(target, source, options = {
      clone: true
    }) {
      const output = options.clone ? _extends$1({}, target) : target;
      if (isPlainObject$5(target) && isPlainObject$5(source)) {
        Object.keys(source).forEach((key) => {
          if (key === "__proto__") {
            return;
          }
          if (isPlainObject$5(source[key]) && key in target && isPlainObject$5(target[key])) {
            output[key] = deepmerge(target[key], source[key], options);
          } else if (options.clone) {
            output[key] = isPlainObject$5(source[key]) ? deepClone(source[key]) : source[key];
          } else {
            output[key] = source[key];
          }
        });
      }
      return output;
    }
    var propTypes = { exports: {} };
    var reactIs$3 = { exports: {} };
    var reactIs_development$2 = {};
    /** @license React v16.13.1
     * react-is.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    {
      (function() {
        var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf2(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment2 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal2 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf2(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf2(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf2(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf2(object) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf2(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf2(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf2(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf2(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf2(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf2(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf2(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf2(object) === REACT_SUSPENSE_TYPE;
        }
        reactIs_development$2.AsyncMode = AsyncMode;
        reactIs_development$2.ConcurrentMode = ConcurrentMode;
        reactIs_development$2.ContextConsumer = ContextConsumer;
        reactIs_development$2.ContextProvider = ContextProvider;
        reactIs_development$2.Element = Element2;
        reactIs_development$2.ForwardRef = ForwardRef;
        reactIs_development$2.Fragment = Fragment2;
        reactIs_development$2.Lazy = Lazy;
        reactIs_development$2.Memo = Memo;
        reactIs_development$2.Portal = Portal2;
        reactIs_development$2.Profiler = Profiler;
        reactIs_development$2.StrictMode = StrictMode;
        reactIs_development$2.Suspense = Suspense;
        reactIs_development$2.isAsyncMode = isAsyncMode;
        reactIs_development$2.isConcurrentMode = isConcurrentMode;
        reactIs_development$2.isContextConsumer = isContextConsumer;
        reactIs_development$2.isContextProvider = isContextProvider;
        reactIs_development$2.isElement = isElement2;
        reactIs_development$2.isForwardRef = isForwardRef;
        reactIs_development$2.isFragment = isFragment;
        reactIs_development$2.isLazy = isLazy;
        reactIs_development$2.isMemo = isMemo;
        reactIs_development$2.isPortal = isPortal;
        reactIs_development$2.isProfiler = isProfiler;
        reactIs_development$2.isStrictMode = isStrictMode;
        reactIs_development$2.isSuspense = isSuspense;
        reactIs_development$2.isValidElementType = isValidElementType;
        reactIs_development$2.typeOf = typeOf2;
      })();
    }
    (function(module2) {
      {
        module2.exports = reactIs_development$2;
      }
    })(reactIs$3);
    var ReactPropTypesSecret$2 = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    var ReactPropTypesSecret_1 = ReactPropTypesSecret$2;
    var has$2 = Function.call.bind(Object.prototype.hasOwnProperty);
    var printWarning$1 = function() {
    };
    {
      var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
      var loggedTypeFailures = {};
      var has$1 = has$2;
      printWarning$1 = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function checkPropTypes$1(typeSpecs, values2, location, componentName, getStack) {
      {
        for (var typeSpecName in typeSpecs) {
          if (has$1(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning$1(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning$1(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes$1.resetWarningCache = function() {
      {
        loggedTypeFailures = {};
      }
    };
    var checkPropTypes_1 = checkPropTypes$1;
    var ReactIs$1 = reactIs$3.exports;
    var assign$1 = objectAssign;
    var ReactPropTypesSecret = ReactPropTypesSecret_1;
    var has = has$2;
    var checkPropTypes = checkPropTypes_1;
    var printWarning = function() {
    };
    {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess2) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is2(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess2) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs$1.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is2(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value2) {
            var type = getPreciseType(value2);
            if (type === "symbol") {
              return String(value2);
            }
            return value2;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          printWarning("Invalid argument supplied to oneOfType, expected an instance of array.");
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign$1({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol2(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol2(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value2) {
        var type = getPreciseType(value2);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
    {
      var ReactIs = reactIs$3.exports;
      var throwOnDirectAccess = true;
      propTypes.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
    }
    function isClassComponent$1(elementType) {
      const {
        prototype = {}
      } = elementType;
      return Boolean(prototype.isReactComponent);
    }
    function acceptingRef(props, propName, componentName, location, propFullName) {
      const element = props[propName];
      const safePropName = propFullName || propName;
      if (element == null || typeof window === "undefined") {
        return null;
      }
      let warningHint;
      const elementType = element.type;
      if (typeof elementType === "function" && !isClassComponent$1(elementType)) {
        warningHint = "Did you accidentally use a plain function component for an element instead?";
      }
      if (warningHint !== void 0) {
        return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
      }
      return null;
    }
    const elementAcceptingRef = chainPropTypes(propTypes.exports.element, acceptingRef);
    elementAcceptingRef.isRequired = chainPropTypes(propTypes.exports.element.isRequired, acceptingRef);
    const elementAcceptingRef$1 = elementAcceptingRef;
    function isClassComponent(elementType) {
      const {
        prototype = {}
      } = elementType;
      return Boolean(prototype.isReactComponent);
    }
    function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
      const propValue = props[propName];
      const safePropName = propFullName || propName;
      if (propValue == null || typeof window === "undefined") {
        return null;
      }
      let warningHint;
      if (typeof propValue === "function" && !isClassComponent(propValue)) {
        warningHint = "Did you accidentally provide a plain function component instead?";
      }
      if (warningHint !== void 0) {
        return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element type that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
      }
      return null;
    }
    const elementTypeAcceptingRef$1 = chainPropTypes(propTypes.exports.elementType, elementTypeAcceptingRef);
    const specialProperty = "exact-prop: \u200B";
    function exactProp(propTypes2) {
      return _extends$1({}, propTypes2, {
        [specialProperty]: (props) => {
          const unsupportedProps = Object.keys(props).filter((prop) => !propTypes2.hasOwnProperty(prop));
          if (unsupportedProps.length > 0) {
            return new Error(`The following props are not supported: ${unsupportedProps.map((prop) => `\`${prop}\``).join(", ")}. Please remove them.`);
          }
          return null;
        }
      });
    }
    var reactIs$2 = { exports: {} };
    var reactIs_development$1 = {};
    /**
     * @license React
     * react-is.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    {
      (function() {
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function typeOf2(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_SERVER_CONTEXT_TYPE:
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment2 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal2 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        var hasWarnedAboutDeprecatedIsConcurrentMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isConcurrentMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
              hasWarnedAboutDeprecatedIsConcurrentMode = true;
              console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isContextConsumer(object) {
          return typeOf2(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf2(object) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf2(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf2(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf2(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf2(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf2(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf2(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf2(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf2(object) === REACT_SUSPENSE_TYPE;
        }
        function isSuspenseList(object) {
          return typeOf2(object) === REACT_SUSPENSE_LIST_TYPE;
        }
        reactIs_development$1.ContextConsumer = ContextConsumer;
        reactIs_development$1.ContextProvider = ContextProvider;
        reactIs_development$1.Element = Element2;
        reactIs_development$1.ForwardRef = ForwardRef;
        reactIs_development$1.Fragment = Fragment2;
        reactIs_development$1.Lazy = Lazy;
        reactIs_development$1.Memo = Memo;
        reactIs_development$1.Portal = Portal2;
        reactIs_development$1.Profiler = Profiler;
        reactIs_development$1.StrictMode = StrictMode;
        reactIs_development$1.Suspense = Suspense;
        reactIs_development$1.SuspenseList = SuspenseList;
        reactIs_development$1.isAsyncMode = isAsyncMode;
        reactIs_development$1.isConcurrentMode = isConcurrentMode;
        reactIs_development$1.isContextConsumer = isContextConsumer;
        reactIs_development$1.isContextProvider = isContextProvider;
        reactIs_development$1.isElement = isElement2;
        reactIs_development$1.isForwardRef = isForwardRef;
        reactIs_development$1.isFragment = isFragment;
        reactIs_development$1.isLazy = isLazy;
        reactIs_development$1.isMemo = isMemo;
        reactIs_development$1.isPortal = isPortal;
        reactIs_development$1.isProfiler = isProfiler;
        reactIs_development$1.isStrictMode = isStrictMode;
        reactIs_development$1.isSuspense = isSuspense;
        reactIs_development$1.isSuspenseList = isSuspenseList;
        reactIs_development$1.isValidElementType = isValidElementType;
        reactIs_development$1.typeOf = typeOf2;
      })();
    }
    (function(module2) {
      {
        module2.exports = reactIs_development$1;
      }
    })(reactIs$2);
    const fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
    function getFunctionName(fn) {
      const match5 = `${fn}`.match(fnNameMatchRegex);
      const name = match5 && match5[1];
      return name || "";
    }
    function getFunctionComponentName(Component, fallback = "") {
      return Component.displayName || Component.name || getFunctionName(Component) || fallback;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      const functionName = getFunctionComponentName(innerType);
      return outerType.displayName || (functionName !== "" ? `${wrapperName}(${functionName})` : wrapperName);
    }
    function getDisplayName(Component) {
      if (Component == null) {
        return void 0;
      }
      if (typeof Component === "string") {
        return Component;
      }
      if (typeof Component === "function") {
        return getFunctionComponentName(Component, "Component");
      }
      if (typeof Component === "object") {
        switch (Component.$$typeof) {
          case reactIs$2.exports.ForwardRef:
            return getWrappedName(Component, Component.render, "ForwardRef");
          case reactIs$2.exports.Memo:
            return getWrappedName(Component, Component.type, "memo");
          default:
            return void 0;
        }
      }
      return void 0;
    }
    function HTMLElementType(props, propName, componentName, location, propFullName) {
      const propValue = props[propName];
      const safePropName = propFullName || propName;
      if (propValue == null) {
        return null;
      }
      if (propValue && propValue.nodeType !== 1) {
        return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an HTMLElement.`);
      }
      return null;
    }
    const refType = propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]);
    const refType$1 = refType;
    function capitalize(string) {
      if (typeof string !== "string") {
        throw new Error(`MUI: \`capitalize(string)\` expects a string argument.`);
      }
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
    function createChainedFunction(...funcs) {
      return funcs.reduce((acc, func) => {
        if (func == null) {
          return acc;
        }
        return function chainedFunction(...args) {
          acc.apply(this, args);
          func.apply(this, args);
        };
      }, () => {
      });
    }
    function debounce$3(func, wait = 166) {
      let timeout;
      function debounced(...args) {
        const later = () => {
          func.apply(this, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      }
      debounced.clear = () => {
        clearTimeout(timeout);
      };
      return debounced;
    }
    function deprecatedPropType(validator2, reason) {
      return (props, propName, componentName, location, propFullName) => {
        const componentNameSafe = componentName || "<<anonymous>>";
        const propFullNameSafe = propFullName || propName;
        if (typeof props[propName] !== "undefined") {
          return new Error(`The ${location} \`${propFullNameSafe}\` of \`${componentNameSafe}\` is deprecated. ${reason}`);
        }
        return null;
      };
    }
    function isMuiElement(element, muiNames) {
      return /* @__PURE__ */ react.exports.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
    }
    function ownerDocument(node2) {
      return node2 && node2.ownerDocument || document;
    }
    function ownerWindow(node2) {
      const doc = ownerDocument(node2);
      return doc.defaultView || window;
    }
    function requirePropFactory(componentNameInError, Component) {
      const prevPropTypes = Component ? _extends$1({}, Component.propTypes) : null;
      const requireProp = (requiredProp) => (props, propName, componentName, location, propFullName, ...args) => {
        const propFullNameSafe = propFullName || propName;
        const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];
        if (defaultTypeChecker) {
          const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);
          if (typeCheckerResult) {
            return typeCheckerResult;
          }
        }
        if (typeof props[propName] !== "undefined" && !props[requiredProp]) {
          return new Error(`The prop \`${propFullNameSafe}\` of \`${componentNameInError}\` can only be used together with the \`${requiredProp}\` prop.`);
        }
        return null;
      };
      return requireProp;
    }
    function setRef(ref, value2) {
      if (typeof ref === "function") {
        ref(value2);
      } else if (ref) {
        ref.current = value2;
      }
    }
    const useEnhancedEffect = typeof window !== "undefined" ? react.exports.useLayoutEffect : react.exports.useEffect;
    const useEnhancedEffect$1 = useEnhancedEffect;
    let globalId = 0;
    function useGlobalId(idOverride) {
      const [defaultId, setDefaultId] = react.exports.useState(idOverride);
      const id = idOverride || defaultId;
      react.exports.useEffect(() => {
        if (defaultId == null) {
          globalId += 1;
          setDefaultId(`mui-${globalId}`);
        }
      }, [defaultId]);
      return id;
    }
    const maybeReactUseId = React$1["useId"];
    function useId(idOverride) {
      if (maybeReactUseId !== void 0) {
        const reactId = maybeReactUseId();
        return idOverride != null ? idOverride : reactId;
      }
      return useGlobalId(idOverride);
    }
    function unsupportedProp(props, propName, componentName, location, propFullName) {
      const propFullNameSafe = propFullName || propName;
      if (typeof props[propName] !== "undefined") {
        return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
      }
      return null;
    }
    function useControlled({
      controlled,
      default: defaultProp,
      name,
      state = "value"
    }) {
      const {
        current: isControlled
      } = react.exports.useRef(controlled !== void 0);
      const [valueState, setValue2] = react.exports.useState(defaultProp);
      const value2 = isControlled ? controlled : valueState;
      {
        react.exports.useEffect(() => {
          if (isControlled !== (controlled !== void 0)) {
            console.error([`MUI: A component is changing the ${isControlled ? "" : "un"}controlled ${state} state of ${name} to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${name} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
          }
        }, [state, name, controlled]);
        const {
          current: defaultValue2
        } = react.exports.useRef(defaultProp);
        react.exports.useEffect(() => {
          if (!isControlled && defaultValue2 !== defaultProp) {
            console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. To suppress this warning opt to use a controlled ${name}.`].join("\n"));
          }
        }, [JSON.stringify(defaultProp)]);
      }
      const setValueIfUncontrolled = react.exports.useCallback((newValue) => {
        if (!isControlled) {
          setValue2(newValue);
        }
      }, []);
      return [value2, setValueIfUncontrolled];
    }
    function useEventCallback(fn) {
      const ref = react.exports.useRef(fn);
      useEnhancedEffect$1(() => {
        ref.current = fn;
      });
      return react.exports.useCallback((...args) => (0, ref.current)(...args), []);
    }
    function useForkRef(...refs) {
      return react.exports.useMemo(() => {
        if (refs.every((ref) => ref == null)) {
          return null;
        }
        return (instance) => {
          refs.forEach((ref) => {
            setRef(ref, instance);
          });
        };
      }, refs);
    }
    let hadKeyboardEvent = true;
    let hadFocusVisibleRecently = false;
    let hadFocusVisibleRecentlyTimeout;
    const inputTypesWhitelist = {
      text: true,
      search: true,
      url: true,
      tel: true,
      email: true,
      password: true,
      number: true,
      date: true,
      month: true,
      week: true,
      time: true,
      datetime: true,
      "datetime-local": true
    };
    function focusTriggersKeyboardModality(node2) {
      const {
        type,
        tagName
      } = node2;
      if (tagName === "INPUT" && inputTypesWhitelist[type] && !node2.readOnly) {
        return true;
      }
      if (tagName === "TEXTAREA" && !node2.readOnly) {
        return true;
      }
      if (node2.isContentEditable) {
        return true;
      }
      return false;
    }
    function handleKeyDown(event) {
      if (event.metaKey || event.altKey || event.ctrlKey) {
        return;
      }
      hadKeyboardEvent = true;
    }
    function handlePointerDown() {
      hadKeyboardEvent = false;
    }
    function handleVisibilityChange() {
      if (this.visibilityState === "hidden") {
        if (hadFocusVisibleRecently) {
          hadKeyboardEvent = true;
        }
      }
    }
    function prepare(doc) {
      doc.addEventListener("keydown", handleKeyDown, true);
      doc.addEventListener("mousedown", handlePointerDown, true);
      doc.addEventListener("pointerdown", handlePointerDown, true);
      doc.addEventListener("touchstart", handlePointerDown, true);
      doc.addEventListener("visibilitychange", handleVisibilityChange, true);
    }
    function isFocusVisible(event) {
      const {
        target
      } = event;
      try {
        return target.matches(":focus-visible");
      } catch (error) {
      }
      return hadKeyboardEvent || focusTriggersKeyboardModality(target);
    }
    function useIsFocusVisible() {
      const ref = react.exports.useCallback((node2) => {
        if (node2 != null) {
          prepare(node2.ownerDocument);
        }
      }, []);
      const isFocusVisibleRef = react.exports.useRef(false);
      function handleBlurVisible() {
        if (isFocusVisibleRef.current) {
          hadFocusVisibleRecently = true;
          window.clearTimeout(hadFocusVisibleRecentlyTimeout);
          hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {
            hadFocusVisibleRecently = false;
          }, 100);
          isFocusVisibleRef.current = false;
          return true;
        }
        return false;
      }
      function handleFocusVisible(event) {
        if (isFocusVisible(event)) {
          isFocusVisibleRef.current = true;
          return true;
        }
        return false;
      }
      return {
        isFocusVisibleRef,
        onFocus: handleFocusVisible,
        onBlur: handleBlurVisible,
        ref
      };
    }
    function getScrollbarSize(doc) {
      const documentWidth = doc.documentElement.clientWidth;
      return Math.abs(window.innerWidth - documentWidth);
    }
    let cachedType;
    function detectScrollType() {
      if (cachedType) {
        return cachedType;
      }
      const dummy = document.createElement("div");
      const container = document.createElement("div");
      container.style.width = "10px";
      container.style.height = "1px";
      dummy.appendChild(container);
      dummy.dir = "rtl";
      dummy.style.fontSize = "14px";
      dummy.style.width = "4px";
      dummy.style.height = "1px";
      dummy.style.position = "absolute";
      dummy.style.top = "-1000px";
      dummy.style.overflow = "scroll";
      document.body.appendChild(dummy);
      cachedType = "reverse";
      if (dummy.scrollLeft > 0) {
        cachedType = "default";
      } else {
        dummy.scrollLeft = 1;
        if (dummy.scrollLeft === 0) {
          cachedType = "negative";
        }
      }
      document.body.removeChild(dummy);
      return cachedType;
    }
    function getNormalizedScrollLeft(element, direction) {
      const scrollLeft = element.scrollLeft;
      if (direction !== "rtl") {
        return scrollLeft;
      }
      const type = detectScrollType();
      switch (type) {
        case "negative":
          return element.scrollWidth - element.clientWidth + scrollLeft;
        case "reverse":
          return element.scrollWidth - element.clientWidth - scrollLeft;
        default:
          return scrollLeft;
      }
    }
    const usePreviousProps = (value2) => {
      const ref = react.exports.useRef({});
      react.exports.useEffect(() => {
        ref.current = value2;
      });
      return ref.current;
    };
    const usePreviousProps$1 = usePreviousProps;
    const visuallyHidden = {
      border: 0,
      clip: "rect(0 0 0 0)",
      height: "1px",
      margin: -1,
      overflow: "hidden",
      padding: 0,
      position: "absolute",
      whiteSpace: "nowrap",
      width: "1px"
    };
    const visuallyHidden$1 = visuallyHidden;
    function getTypeByValue(value2) {
      const valueType = typeof value2;
      switch (valueType) {
        case "number":
          if (Number.isNaN(value2)) {
            return "NaN";
          }
          if (!Number.isFinite(value2)) {
            return "Infinity";
          }
          if (value2 !== Math.floor(value2)) {
            return "float";
          }
          return "number";
        case "object":
          if (value2 === null) {
            return "null";
          }
          return value2.constructor.name;
        default:
          return valueType;
      }
    }
    function ponyfillIsInteger(x) {
      return typeof x === "number" && isFinite(x) && Math.floor(x) === x;
    }
    const isInteger = Number.isInteger || ponyfillIsInteger;
    function requiredInteger(props, propName, componentName, location) {
      const propValue = props[propName];
      if (propValue == null || !isInteger(propValue)) {
        const propType = getTypeByValue(propValue);
        return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
      }
      return null;
    }
    function validator(props, propName, ...other) {
      const propValue = props[propName];
      if (propValue === void 0) {
        return null;
      }
      return requiredInteger(props, propName, ...other);
    }
    function validatorNoop() {
      return null;
    }
    validator.isRequired = requiredInteger;
    validatorNoop.isRequired = validatorNoop;
    const integerPropType = validator;
    function resolveProps(defaultProps2, props) {
      const output = _extends$1({}, props);
      Object.keys(defaultProps2).forEach((propName) => {
        if (propName.toString().match(/^(components|slots)$/)) {
          output[propName] = _extends$1({}, defaultProps2[propName], output[propName]);
        } else if (propName.toString().match(/^(componentsProps|slotProps)$/)) {
          const defaultSlotProps = defaultProps2[propName] || {};
          const slotProps = props[propName];
          output[propName] = {};
          if (!slotProps || !Object.keys(slotProps)) {
            output[propName] = defaultSlotProps;
          } else if (!defaultSlotProps || !Object.keys(defaultSlotProps)) {
            output[propName] = slotProps;
          } else {
            output[propName] = _extends$1({}, slotProps);
            Object.keys(defaultSlotProps).forEach((slotPropName) => {
              output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
            });
          }
        } else if (output[propName] === void 0) {
          output[propName] = defaultProps2[propName];
        }
      });
      return output;
    }
    function composeClasses(slots, getUtilityClass, classes = void 0) {
      const output = {};
      Object.keys(slots).forEach(
        (slot) => {
          output[slot] = slots[slot].reduce((acc, key) => {
            if (key) {
              const utilityClass = getUtilityClass(key);
              if (utilityClass !== "") {
                acc.push(utilityClass);
              }
              if (classes && classes[key]) {
                acc.push(classes[key]);
              }
            }
            return acc;
          }, []).join(" ");
        }
      );
      return output;
    }
    const defaultGenerator = (componentName) => componentName;
    const createClassNameGenerator = () => {
      let generate = defaultGenerator;
      return {
        configure(generator) {
          generate = generator;
        },
        generate(componentName) {
          return generate(componentName);
        },
        reset() {
          generate = defaultGenerator;
        }
      };
    };
    const ClassNameGenerator = createClassNameGenerator();
    const ClassNameGenerator$1 = ClassNameGenerator;
    const globalStateClassesMapping = {
      active: "active",
      checked: "checked",
      completed: "completed",
      disabled: "disabled",
      readOnly: "readOnly",
      error: "error",
      expanded: "expanded",
      focused: "focused",
      focusVisible: "focusVisible",
      required: "required",
      selected: "selected"
    };
    function generateUtilityClass(componentName, slot, globalStatePrefix = "Mui") {
      const globalStateClass = globalStateClassesMapping[slot];
      return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${ClassNameGenerator$1.generate(componentName)}-${slot}`;
    }
    function generateUtilityClasses(componentName, slots, globalStatePrefix = "Mui") {
      const result = {};
      slots.forEach((slot) => {
        result[slot] = generateUtilityClass(componentName, slot, globalStatePrefix);
      });
      return result;
    }
    const THEME_ID = "$$material";
    function _objectWithoutPropertiesLoose$1(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function memoize$3(fn) {
      var cache = /* @__PURE__ */ Object.create(null);
      return function(arg) {
        if (cache[arg] === void 0)
          cache[arg] = fn(arg);
        return cache[arg];
      };
    }
    var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
    var isPropValid = /* @__PURE__ */ memoize$3(
      function(prop) {
        return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
      }
    );
    function sheetForTag(tag) {
      if (tag.sheet) {
        return tag.sheet;
      }
      for (var i = 0; i < document.styleSheets.length; i++) {
        if (document.styleSheets[i].ownerNode === tag) {
          return document.styleSheets[i];
        }
      }
    }
    function createStyleElement(options) {
      var tag = document.createElement("style");
      tag.setAttribute("data-emotion", options.key);
      if (options.nonce !== void 0) {
        tag.setAttribute("nonce", options.nonce);
      }
      tag.appendChild(document.createTextNode(""));
      tag.setAttribute("data-s", "");
      return tag;
    }
    var StyleSheet = /* @__PURE__ */ function() {
      function StyleSheet2(options) {
        var _this = this;
        this._insertTag = function(tag) {
          var before;
          if (_this.tags.length === 0) {
            if (_this.insertionPoint) {
              before = _this.insertionPoint.nextSibling;
            } else if (_this.prepend) {
              before = _this.container.firstChild;
            } else {
              before = _this.before;
            }
          } else {
            before = _this.tags[_this.tags.length - 1].nextSibling;
          }
          _this.container.insertBefore(tag, before);
          _this.tags.push(tag);
        };
        this.isSpeedy = options.speedy === void 0 ? false : options.speedy;
        this.tags = [];
        this.ctr = 0;
        this.nonce = options.nonce;
        this.key = options.key;
        this.container = options.container;
        this.prepend = options.prepend;
        this.insertionPoint = options.insertionPoint;
        this.before = null;
      }
      var _proto = StyleSheet2.prototype;
      _proto.hydrate = function hydrate(nodes) {
        nodes.forEach(this._insertTag);
      };
      _proto.insert = function insert(rule2) {
        if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
          this._insertTag(createStyleElement(this));
        }
        var tag = this.tags[this.tags.length - 1];
        {
          var isImportRule2 = rule2.charCodeAt(0) === 64 && rule2.charCodeAt(1) === 105;
          if (isImportRule2 && this._alreadyInsertedOrderInsensitiveRule) {
            console.error("You're attempting to insert the following rule:\n" + rule2 + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
          }
          this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule2;
        }
        if (this.isSpeedy) {
          var sheet = sheetForTag(tag);
          try {
            sheet.insertRule(rule2, sheet.cssRules.length);
          } catch (e) {
            if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule2)) {
              console.error('There was a problem inserting the following rule: "' + rule2 + '"', e);
            }
          }
        } else {
          tag.appendChild(document.createTextNode(rule2));
        }
        this.ctr++;
      };
      _proto.flush = function flush() {
        this.tags.forEach(function(tag) {
          return tag.parentNode && tag.parentNode.removeChild(tag);
        });
        this.tags = [];
        this.ctr = 0;
        {
          this._alreadyInsertedOrderInsensitiveRule = false;
        }
      };
      return StyleSheet2;
    }();
    var MS = "-ms-";
    var MOZ = "-moz-";
    var WEBKIT = "-webkit-";
    var COMMENT = "comm";
    var RULESET = "rule";
    var DECLARATION = "decl";
    var IMPORT = "@import";
    var KEYFRAMES = "@keyframes";
    var abs$2 = Math.abs;
    var from$1 = String.fromCharCode;
    var assign = Object.assign;
    function hash$2(value2, length2) {
      return charat(value2, 0) ^ 45 ? (((length2 << 2 ^ charat(value2, 0)) << 2 ^ charat(value2, 1)) << 2 ^ charat(value2, 2)) << 2 ^ charat(value2, 3) : 0;
    }
    function trim(value2) {
      return value2.trim();
    }
    function match$1(value2, pattern) {
      return (value2 = pattern.exec(value2)) ? value2[0] : value2;
    }
    function replace(value2, pattern, replacement) {
      return value2.replace(pattern, replacement);
    }
    function indexof(value2, search) {
      return value2.indexOf(search);
    }
    function charat(value2, index) {
      return value2.charCodeAt(index) | 0;
    }
    function substr(value2, begin, end2) {
      return value2.slice(begin, end2);
    }
    function strlen(value2) {
      return value2.length;
    }
    function sizeof(value2) {
      return value2.length;
    }
    function append(value2, array) {
      return array.push(value2), value2;
    }
    function combine(array, callback) {
      return array.map(callback).join("");
    }
    var line = 1;
    var column = 1;
    var length = 0;
    var position = 0;
    var character = 0;
    var characters = "";
    function node(value2, root2, parent2, type, props, children, length2) {
      return { value: value2, root: root2, parent: parent2, type, props, children, line, column, length: length2, return: "" };
    }
    function copy(root2, props) {
      return assign(node("", null, null, "", null, null, 0), root2, { length: -root2.length }, props);
    }
    function char() {
      return character;
    }
    function prev() {
      character = position > 0 ? charat(characters, --position) : 0;
      if (column--, character === 10)
        column = 1, line--;
      return character;
    }
    function next() {
      character = position < length ? charat(characters, position++) : 0;
      if (column++, character === 10)
        column = 1, line++;
      return character;
    }
    function peek() {
      return charat(characters, position);
    }
    function caret() {
      return position;
    }
    function slice(begin, end2) {
      return substr(characters, begin, end2);
    }
    function token$1(type) {
      switch (type) {
        case 0:
        case 9:
        case 10:
        case 13:
        case 32:
          return 5;
        case 33:
        case 43:
        case 44:
        case 47:
        case 62:
        case 64:
        case 126:
        case 59:
        case 123:
        case 125:
          return 4;
        case 58:
          return 3;
        case 34:
        case 39:
        case 40:
        case 91:
          return 2;
        case 41:
        case 93:
          return 1;
      }
      return 0;
    }
    function alloc(value2) {
      return line = column = 1, length = strlen(characters = value2), position = 0, [];
    }
    function dealloc(value2) {
      return characters = "", value2;
    }
    function delimit(type) {
      return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
    }
    function whitespace(type) {
      while (character = peek())
        if (character < 33)
          next();
        else
          break;
      return token$1(type) > 2 || token$1(character) > 3 ? "" : " ";
    }
    function escaping(index, count) {
      while (--count && next())
        if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
          break;
      return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
    }
    function delimiter(type) {
      while (next())
        switch (character) {
          case type:
            return position;
          case 34:
          case 39:
            if (type !== 34 && type !== 39)
              delimiter(character);
            break;
          case 40:
            if (type === 41)
              delimiter(type);
            break;
          case 92:
            next();
            break;
        }
      return position;
    }
    function commenter(type, index) {
      while (next())
        if (type + character === 47 + 10)
          break;
        else if (type + character === 42 + 42 && peek() === 47)
          break;
      return "/*" + slice(index, position - 1) + "*" + from$1(type === 47 ? type : next());
    }
    function identifier(index) {
      while (!token$1(peek()))
        next();
      return slice(index, position);
    }
    function compile(value2) {
      return dealloc(parse("", null, null, null, [""], value2 = alloc(value2), 0, [0], value2));
    }
    function parse(value2, root2, parent2, rule2, rules, rulesets, pseudo, points, declarations) {
      var index = 0;
      var offset2 = 0;
      var length2 = pseudo;
      var atrule = 0;
      var property2 = 0;
      var previous = 0;
      var variable = 1;
      var scanning = 1;
      var ampersand = 1;
      var character2 = 0;
      var type = "";
      var props = rules;
      var children = rulesets;
      var reference2 = rule2;
      var characters2 = type;
      while (scanning)
        switch (previous = character2, character2 = next()) {
          case 40:
            if (previous != 108 && charat(characters2, length2 - 1) == 58) {
              if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
                ampersand = -1;
              break;
            }
          case 34:
          case 39:
          case 91:
            characters2 += delimit(character2);
            break;
          case 9:
          case 10:
          case 13:
          case 32:
            characters2 += whitespace(previous);
            break;
          case 92:
            characters2 += escaping(caret() - 1, 7);
            continue;
          case 47:
            switch (peek()) {
              case 42:
              case 47:
                append(comment(commenter(next(), caret()), root2, parent2), declarations);
                break;
              default:
                characters2 += "/";
            }
            break;
          case 123 * variable:
            points[index++] = strlen(characters2) * ampersand;
          case 125 * variable:
          case 59:
          case 0:
            switch (character2) {
              case 0:
              case 125:
                scanning = 0;
              case 59 + offset2:
                if (property2 > 0 && strlen(characters2) - length2)
                  append(property2 > 32 ? declaration(characters2 + ";", rule2, parent2, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule2, parent2, length2 - 2), declarations);
                break;
              case 59:
                characters2 += ";";
              default:
                append(reference2 = ruleset(characters2, root2, parent2, index, offset2, rules, points, type, props = [], children = [], length2), rulesets);
                if (character2 === 123)
                  if (offset2 === 0)
                    parse(characters2, root2, reference2, reference2, props, rulesets, length2, points, children);
                  else
                    switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                      case 100:
                      case 109:
                      case 115:
                        parse(value2, reference2, reference2, rule2 && append(ruleset(value2, reference2, reference2, 0, 0, rules, points, type, rules, props = [], length2), children), rules, children, length2, points, rule2 ? props : children);
                        break;
                      default:
                        parse(characters2, reference2, reference2, reference2, [""], children, 0, points, children);
                    }
            }
            index = offset2 = property2 = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
            break;
          case 58:
            length2 = 1 + strlen(characters2), property2 = previous;
          default:
            if (variable < 1) {
              if (character2 == 123)
                --variable;
              else if (character2 == 125 && variable++ == 0 && prev() == 125)
                continue;
            }
            switch (characters2 += from$1(character2), character2 * variable) {
              case 38:
                ampersand = offset2 > 0 ? 1 : (characters2 += "\f", -1);
                break;
              case 44:
                points[index++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
                break;
              case 64:
                if (peek() === 45)
                  characters2 += delimit(next());
                atrule = peek(), offset2 = length2 = strlen(type = characters2 += identifier(caret())), character2++;
                break;
              case 45:
                if (previous === 45 && strlen(characters2) == 2)
                  variable = 0;
            }
        }
      return rulesets;
    }
    function ruleset(value2, root2, parent2, index, offset2, rules, points, type, props, children, length2) {
      var post = offset2 - 1;
      var rule2 = offset2 === 0 ? rules : [""];
      var size = sizeof(rule2);
      for (var i = 0, j = 0, k = 0; i < index; ++i)
        for (var x = 0, y = substr(value2, post + 1, post = abs$2(j = points[i])), z = value2; x < size; ++x)
          if (z = trim(j > 0 ? rule2[x] + " " + y : replace(y, /&\f/g, rule2[x])))
            props[k++] = z;
      return node(value2, root2, parent2, offset2 === 0 ? RULESET : type, props, children, length2);
    }
    function comment(value2, root2, parent2) {
      return node(value2, root2, parent2, COMMENT, from$1(char()), substr(value2, 2, -2), 0);
    }
    function declaration(value2, root2, parent2, length2) {
      return node(value2, root2, parent2, DECLARATION, substr(value2, 0, length2), substr(value2, length2 + 1, -1), length2);
    }
    function serialize(children, callback) {
      var output = "";
      var length2 = sizeof(children);
      for (var i = 0; i < length2; i++)
        output += callback(children[i], i, children, callback) || "";
      return output;
    }
    function stringify$1(element, index, children, callback) {
      switch (element.type) {
        case IMPORT:
        case DECLARATION:
          return element.return = element.return || element.value;
        case COMMENT:
          return "";
        case KEYFRAMES:
          return element.return = element.value + "{" + serialize(element.children, callback) + "}";
        case RULESET:
          element.value = element.props.join(",");
      }
      return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
    }
    function middleware(collection) {
      var length2 = sizeof(collection);
      return function(element, index, children, callback) {
        var output = "";
        for (var i = 0; i < length2; i++)
          output += collection[i](element, index, children, callback) || "";
        return output;
      };
    }
    var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index) {
      var previous = 0;
      var character2 = 0;
      while (true) {
        previous = character2;
        character2 = peek();
        if (previous === 38 && character2 === 12) {
          points[index] = 1;
        }
        if (token$1(character2)) {
          break;
        }
        next();
      }
      return slice(begin, position);
    };
    var toRules = function toRules2(parsed, points) {
      var index = -1;
      var character2 = 44;
      do {
        switch (token$1(character2)) {
          case 0:
            if (character2 === 38 && peek() === 12) {
              points[index] = 1;
            }
            parsed[index] += identifierWithPointTracking(position - 1, points, index);
            break;
          case 2:
            parsed[index] += delimit(character2);
            break;
          case 4:
            if (character2 === 44) {
              parsed[++index] = peek() === 58 ? "&\f" : "";
              points[index] = parsed[index].length;
              break;
            }
          default:
            parsed[index] += from$1(character2);
        }
      } while (character2 = next());
      return parsed;
    };
    var getRules = function getRules2(value2, points) {
      return dealloc(toRules(alloc(value2), points));
    };
    var fixedElements = /* @__PURE__ */ new WeakMap();
    var compat = function compat2(element) {
      if (element.type !== "rule" || !element.parent || element.length < 1) {
        return;
      }
      var value2 = element.value, parent2 = element.parent;
      var isImplicitRule = element.column === parent2.column && element.line === parent2.line;
      while (parent2.type !== "rule") {
        parent2 = parent2.parent;
        if (!parent2)
          return;
      }
      if (element.props.length === 1 && value2.charCodeAt(0) !== 58 && !fixedElements.get(parent2)) {
        return;
      }
      if (isImplicitRule) {
        return;
      }
      fixedElements.set(element, true);
      var points = [];
      var rules = getRules(value2, points);
      var parentRules = parent2.props;
      for (var i = 0, k = 0; i < rules.length; i++) {
        for (var j = 0; j < parentRules.length; j++, k++) {
          element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
        }
      }
    };
    var removeLabel = function removeLabel2(element) {
      if (element.type === "decl") {
        var value2 = element.value;
        if (value2.charCodeAt(0) === 108 && value2.charCodeAt(2) === 98) {
          element["return"] = "";
          element.value = "";
        }
      }
    };
    var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
    var isIgnoringComment = function isIgnoringComment2(element) {
      return element.type === "comm" && element.children.indexOf(ignoreFlag) > -1;
    };
    var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache) {
      return function(element, index, children) {
        if (element.type !== "rule" || cache.compat)
          return;
        var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
        if (unsafePseudoClasses) {
          var isNested = element.parent === children[0];
          var commentContainer = isNested ? children[0].children : children;
          for (var i = commentContainer.length - 1; i >= 0; i--) {
            var node2 = commentContainer[i];
            if (node2.line < element.line) {
              break;
            }
            if (node2.column < element.column) {
              if (isIgnoringComment(node2)) {
                return;
              }
              break;
            }
          }
          unsafePseudoClasses.forEach(function(unsafePseudoClass) {
            console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
          });
        }
      };
    };
    var isImportRule = function isImportRule2(element) {
      return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
    };
    var isPrependedWithRegularRules = function isPrependedWithRegularRules2(index, children) {
      for (var i = index - 1; i >= 0; i--) {
        if (!isImportRule(children[i])) {
          return true;
        }
      }
      return false;
    };
    var nullifyElement = function nullifyElement2(element) {
      element.type = "";
      element.value = "";
      element["return"] = "";
      element.children = "";
      element.props = "";
    };
    var incorrectImportAlarm = function incorrectImportAlarm2(element, index, children) {
      if (!isImportRule(element)) {
        return;
      }
      if (element.parent) {
        console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
        nullifyElement(element);
      } else if (isPrependedWithRegularRules(index, children)) {
        console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
        nullifyElement(element);
      }
    };
    function prefix(value2, length2) {
      switch (hash$2(value2, length2)) {
        case 5103:
          return WEBKIT + "print-" + value2 + value2;
        case 5737:
        case 4201:
        case 3177:
        case 3433:
        case 1641:
        case 4457:
        case 2921:
        case 5572:
        case 6356:
        case 5844:
        case 3191:
        case 6645:
        case 3005:
        case 6391:
        case 5879:
        case 5623:
        case 6135:
        case 4599:
        case 4855:
        case 4215:
        case 6389:
        case 5109:
        case 5365:
        case 5621:
        case 3829:
          return WEBKIT + value2 + value2;
        case 5349:
        case 4246:
        case 4810:
        case 6968:
        case 2756:
          return WEBKIT + value2 + MOZ + value2 + MS + value2 + value2;
        case 6828:
        case 4268:
          return WEBKIT + value2 + MS + value2 + value2;
        case 6165:
          return WEBKIT + value2 + MS + "flex-" + value2 + value2;
        case 5187:
          return WEBKIT + value2 + replace(value2, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value2;
        case 5443:
          return WEBKIT + value2 + MS + "flex-item-" + replace(value2, /flex-|-self/, "") + value2;
        case 4675:
          return WEBKIT + value2 + MS + "flex-line-pack" + replace(value2, /align-content|flex-|-self/, "") + value2;
        case 5548:
          return WEBKIT + value2 + MS + replace(value2, "shrink", "negative") + value2;
        case 5292:
          return WEBKIT + value2 + MS + replace(value2, "basis", "preferred-size") + value2;
        case 6060:
          return WEBKIT + "box-" + replace(value2, "-grow", "") + WEBKIT + value2 + MS + replace(value2, "grow", "positive") + value2;
        case 4554:
          return WEBKIT + replace(value2, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value2;
        case 6187:
          return replace(replace(replace(value2, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value2, "") + value2;
        case 5495:
        case 3959:
          return replace(value2, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
        case 4968:
          return replace(replace(value2, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value2 + value2;
        case 4095:
        case 3583:
        case 4068:
        case 2532:
          return replace(value2, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value2;
        case 8116:
        case 7059:
        case 5753:
        case 5535:
        case 5445:
        case 5701:
        case 4933:
        case 4677:
        case 5533:
        case 5789:
        case 5021:
        case 4765:
          if (strlen(value2) - 1 - length2 > 6)
            switch (charat(value2, length2 + 1)) {
              case 109:
                if (charat(value2, length2 + 4) !== 45)
                  break;
              case 102:
                return replace(value2, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value2, length2 + 3) == 108 ? "$3" : "$2-$3")) + value2;
              case 115:
                return ~indexof(value2, "stretch") ? prefix(replace(value2, "stretch", "fill-available"), length2) + value2 : value2;
            }
          break;
        case 4949:
          if (charat(value2, length2 + 1) !== 115)
            break;
        case 6444:
          switch (charat(value2, strlen(value2) - 3 - (~indexof(value2, "!important") && 10))) {
            case 107:
              return replace(value2, ":", ":" + WEBKIT) + value2;
            case 101:
              return replace(value2, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value2, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value2;
          }
          break;
        case 5936:
          switch (charat(value2, length2 + 11)) {
            case 114:
              return WEBKIT + value2 + MS + replace(value2, /[svh]\w+-[tblr]{2}/, "tb") + value2;
            case 108:
              return WEBKIT + value2 + MS + replace(value2, /[svh]\w+-[tblr]{2}/, "tb-rl") + value2;
            case 45:
              return WEBKIT + value2 + MS + replace(value2, /[svh]\w+-[tblr]{2}/, "lr") + value2;
          }
          return WEBKIT + value2 + MS + value2 + value2;
      }
      return value2;
    }
    var prefixer = function prefixer2(element, index, children, callback) {
      if (element.length > -1) {
        if (!element["return"])
          switch (element.type) {
            case DECLARATION:
              element["return"] = prefix(element.value, element.length);
              break;
            case KEYFRAMES:
              return serialize([copy(element, {
                value: replace(element.value, "@", "@" + WEBKIT)
              })], callback);
            case RULESET:
              if (element.length)
                return combine(element.props, function(value2) {
                  switch (match$1(value2, /(::plac\w+|:read-\w+)/)) {
                    case ":read-only":
                    case ":read-write":
                      return serialize([copy(element, {
                        props: [replace(value2, /:(read-\w+)/, ":" + MOZ + "$1")]
                      })], callback);
                    case "::placeholder":
                      return serialize([copy(element, {
                        props: [replace(value2, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                      }), copy(element, {
                        props: [replace(value2, /:(plac\w+)/, ":" + MOZ + "$1")]
                      }), copy(element, {
                        props: [replace(value2, /:(plac\w+)/, MS + "input-$1")]
                      })], callback);
                  }
                  return "";
                });
          }
      }
    };
    var defaultStylisPlugins = [prefixer];
    var createCache = function createCache2(options) {
      var key = options.key;
      if (!key) {
        throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
      }
      if (key === "css") {
        var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
        Array.prototype.forEach.call(ssrStyles, function(node2) {
          var dataEmotionAttribute = node2.getAttribute("data-emotion");
          if (dataEmotionAttribute.indexOf(" ") === -1) {
            return;
          }
          document.head.appendChild(node2);
          node2.setAttribute("data-s", "");
        });
      }
      var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
      {
        if (/[^a-z-]/.test(key)) {
          throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
        }
      }
      var inserted = {};
      var container;
      var nodesToHydrate = [];
      {
        container = options.container || document.head;
        Array.prototype.forEach.call(
          document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
          function(node2) {
            var attrib = node2.getAttribute("data-emotion").split(" ");
            for (var i = 1; i < attrib.length; i++) {
              inserted[attrib[i]] = true;
            }
            nodesToHydrate.push(node2);
          }
        );
      }
      var _insert;
      var omnipresentPlugins = [compat, removeLabel];
      {
        omnipresentPlugins.push(createUnsafeSelectorsAlarm({
          get compat() {
            return cache.compat;
          }
        }), incorrectImportAlarm);
      }
      {
        var currentSheet;
        var finalizingPlugins = [stringify$1, function(element) {
          if (!element.root) {
            if (element["return"]) {
              currentSheet.insert(element["return"]);
            } else if (element.value && element.type !== COMMENT) {
              currentSheet.insert(element.value + "{}");
            }
          }
        }];
        var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
        var stylis = function stylis2(styles2) {
          return serialize(compile(styles2), serializer);
        };
        _insert = function insert(selector, serialized, sheet, shouldCache) {
          currentSheet = sheet;
          if (serialized.map !== void 0) {
            currentSheet = {
              insert: function insert2(rule2) {
                sheet.insert(rule2 + serialized.map);
              }
            };
          }
          stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
          if (shouldCache) {
            cache.inserted[serialized.name] = true;
          }
        };
      }
      var cache = {
        key,
        sheet: new StyleSheet({
          key,
          container,
          nonce: options.nonce,
          speedy: options.speedy,
          prepend: options.prepend,
          insertionPoint: options.insertionPoint
        }),
        nonce: options.nonce,
        inserted,
        registered: {},
        insert: _insert
      };
      cache.sheet.hydrate(nodesToHydrate);
      return cache;
    };
    var reactIs$1 = reactIs$3.exports;
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      "$$typeof": true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      "$$typeof": true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs$1.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs$1.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs$1.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty$3 = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys2 = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys2 = keys2.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i = 0; i < keys2.length; ++i) {
          var key = keys2[i];
          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
            try {
              defineProperty$3(targetComponent, key, descriptor);
            } catch (e) {
            }
          }
        }
      }
      return targetComponent;
    }
    var hoistNonReactStatics_cjs = hoistNonReactStatics;
    var isBrowser$1 = true;
    function getRegisteredStyles(registered, registeredStyles, classNames2) {
      var rawClassName = "";
      classNames2.split(" ").forEach(function(className) {
        if (registered[className] !== void 0) {
          registeredStyles.push(registered[className] + ";");
        } else {
          rawClassName += className + " ";
        }
      });
      return rawClassName;
    }
    var registerStyles = function registerStyles2(cache, serialized, isStringTag2) {
      var className = cache.key + "-" + serialized.name;
      if ((isStringTag2 === false || isBrowser$1 === false) && cache.registered[className] === void 0) {
        cache.registered[className] = serialized.styles;
      }
    };
    var insertStyles = function insertStyles2(cache, serialized, isStringTag2) {
      registerStyles(cache, serialized, isStringTag2);
      var className = cache.key + "-" + serialized.name;
      if (cache.inserted[serialized.name] === void 0) {
        var current = serialized;
        do {
          cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
          current = current.next;
        } while (current !== void 0);
      }
    };
    function murmur2(str) {
      var h = 0;
      var k, i = 0, len = str.length;
      for (; len >= 4; ++i, len -= 4) {
        k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
        k = (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
        k ^= k >>> 24;
        h = (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
      }
      switch (len) {
        case 3:
          h ^= (str.charCodeAt(i + 2) & 255) << 16;
        case 2:
          h ^= (str.charCodeAt(i + 1) & 255) << 8;
        case 1:
          h ^= str.charCodeAt(i) & 255;
          h = (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
      }
      h ^= h >>> 13;
      h = (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
      return ((h ^ h >>> 15) >>> 0).toString(36);
    }
    var unitlessKeys = {
      animationIterationCount: 1,
      borderImageOutset: 1,
      borderImageSlice: 1,
      borderImageWidth: 1,
      boxFlex: 1,
      boxFlexGroup: 1,
      boxOrdinalGroup: 1,
      columnCount: 1,
      columns: 1,
      flex: 1,
      flexGrow: 1,
      flexPositive: 1,
      flexShrink: 1,
      flexNegative: 1,
      flexOrder: 1,
      gridRow: 1,
      gridRowEnd: 1,
      gridRowSpan: 1,
      gridRowStart: 1,
      gridColumn: 1,
      gridColumnEnd: 1,
      gridColumnSpan: 1,
      gridColumnStart: 1,
      msGridRow: 1,
      msGridRowSpan: 1,
      msGridColumn: 1,
      msGridColumnSpan: 1,
      fontWeight: 1,
      lineHeight: 1,
      opacity: 1,
      order: 1,
      orphans: 1,
      tabSize: 1,
      widows: 1,
      zIndex: 1,
      zoom: 1,
      WebkitLineClamp: 1,
      fillOpacity: 1,
      floodOpacity: 1,
      stopOpacity: 1,
      strokeDasharray: 1,
      strokeDashoffset: 1,
      strokeMiterlimit: 1,
      strokeOpacity: 1,
      strokeWidth: 1
    };
    var ILLEGAL_ESCAPE_SEQUENCE_ERROR$1 = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
    var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
    var hyphenateRegex = /[A-Z]|^ms/g;
    var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
    var isCustomProperty = function isCustomProperty2(property2) {
      return property2.charCodeAt(1) === 45;
    };
    var isProcessableValue = function isProcessableValue2(value2) {
      return value2 != null && typeof value2 !== "boolean";
    };
    var processStyleName = /* @__PURE__ */ memoize$3(function(styleName) {
      return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
    });
    var processStyleValue = function processStyleValue2(key, value2) {
      switch (key) {
        case "animation":
        case "animationName": {
          if (typeof value2 === "string") {
            return value2.replace(animationRegex, function(match5, p1, p2) {
              cursor = {
                name: p1,
                styles: p2,
                next: cursor
              };
              return p1;
            });
          }
        }
      }
      if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value2 === "number" && value2 !== 0) {
        return value2 + "px";
      }
      return value2;
    };
    {
      var contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
      var contentValues = ["normal", "none", "initial", "inherit", "unset"];
      var oldProcessStyleValue = processStyleValue;
      var msPattern = /^-ms-/;
      var hyphenPattern = /-(.)/g;
      var hyphenatedCache = {};
      processStyleValue = function processStyleValue2(key, value2) {
        if (key === "content") {
          if (typeof value2 !== "string" || contentValues.indexOf(value2) === -1 && !contentValuePattern.test(value2) && (value2.charAt(0) !== value2.charAt(value2.length - 1) || value2.charAt(0) !== '"' && value2.charAt(0) !== "'")) {
            throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value2 + "\"'`");
          }
        }
        var processed = oldProcessStyleValue(key, value2);
        if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
          hyphenatedCache[key] = true;
          console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
            return _char.toUpperCase();
          }) + "?");
        }
        return processed;
      };
    }
    var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
    function handleInterpolation(mergedProps, registered, interpolation) {
      if (interpolation == null) {
        return "";
      }
      if (interpolation.__emotion_styles !== void 0) {
        if (interpolation.toString() === "NO_COMPONENT_SELECTOR") {
          throw new Error(noComponentSelectorMessage);
        }
        return interpolation;
      }
      switch (typeof interpolation) {
        case "boolean": {
          return "";
        }
        case "object": {
          if (interpolation.anim === 1) {
            cursor = {
              name: interpolation.name,
              styles: interpolation.styles,
              next: cursor
            };
            return interpolation.name;
          }
          if (interpolation.styles !== void 0) {
            var next2 = interpolation.next;
            if (next2 !== void 0) {
              while (next2 !== void 0) {
                cursor = {
                  name: next2.name,
                  styles: next2.styles,
                  next: cursor
                };
                next2 = next2.next;
              }
            }
            var styles2 = interpolation.styles + ";";
            if (interpolation.map !== void 0) {
              styles2 += interpolation.map;
            }
            return styles2;
          }
          return createStringFromObject(mergedProps, registered, interpolation);
        }
        case "function": {
          if (mergedProps !== void 0) {
            var previousCursor = cursor;
            var result = interpolation(mergedProps);
            cursor = previousCursor;
            return handleInterpolation(mergedProps, registered, result);
          } else {
            console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
          }
          break;
        }
        case "string":
          {
            var matched = [];
            var replaced = interpolation.replace(animationRegex, function(match5, p1, p2) {
              var fakeVarName = "animation" + matched.length;
              matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
              return "${" + fakeVarName + "}";
            });
            if (matched.length) {
              console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
            }
          }
          break;
      }
      if (registered == null) {
        return interpolation;
      }
      var cached = registered[interpolation];
      return cached !== void 0 ? cached : interpolation;
    }
    function createStringFromObject(mergedProps, registered, obj) {
      var string = "";
      if (Array.isArray(obj)) {
        for (var i = 0; i < obj.length; i++) {
          string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
        }
      } else {
        for (var _key in obj) {
          var value2 = obj[_key];
          if (typeof value2 !== "object") {
            if (registered != null && registered[value2] !== void 0) {
              string += _key + "{" + registered[value2] + "}";
            } else if (isProcessableValue(value2)) {
              string += processStyleName(_key) + ":" + processStyleValue(_key, value2) + ";";
            }
          } else {
            if (_key === "NO_COMPONENT_SELECTOR" && true) {
              throw new Error(noComponentSelectorMessage);
            }
            if (Array.isArray(value2) && typeof value2[0] === "string" && (registered == null || registered[value2[0]] === void 0)) {
              for (var _i = 0; _i < value2.length; _i++) {
                if (isProcessableValue(value2[_i])) {
                  string += processStyleName(_key) + ":" + processStyleValue(_key, value2[_i]) + ";";
                }
              }
            } else {
              var interpolated = handleInterpolation(mergedProps, registered, value2);
              switch (_key) {
                case "animation":
                case "animationName": {
                  string += processStyleName(_key) + ":" + interpolated + ";";
                  break;
                }
                default: {
                  if (_key === "undefined") {
                    console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                  }
                  string += _key + "{" + interpolated + "}";
                }
              }
            }
          }
        }
      }
      return string;
    }
    var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
    var sourceMapPattern;
    {
      sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
    }
    var cursor;
    var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
      if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
        return args[0];
      }
      var stringMode = true;
      var styles2 = "";
      cursor = void 0;
      var strings = args[0];
      if (strings == null || strings.raw === void 0) {
        stringMode = false;
        styles2 += handleInterpolation(mergedProps, registered, strings);
      } else {
        if (strings[0] === void 0) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);
        }
        styles2 += strings[0];
      }
      for (var i = 1; i < args.length; i++) {
        styles2 += handleInterpolation(mergedProps, registered, args[i]);
        if (stringMode) {
          if (strings[i] === void 0) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);
          }
          styles2 += strings[i];
        }
      }
      var sourceMap;
      {
        styles2 = styles2.replace(sourceMapPattern, function(match7) {
          sourceMap = match7;
          return "";
        });
      }
      labelPattern.lastIndex = 0;
      var identifierName = "";
      var match5;
      while ((match5 = labelPattern.exec(styles2)) !== null) {
        identifierName += "-" + match5[1];
      }
      var name = murmur2(styles2) + identifierName;
      {
        return {
          name,
          styles: styles2,
          map: sourceMap,
          next: cursor,
          toString: function toString2() {
            return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
          }
        };
      }
    };
    var syncFallback = function syncFallback2(create) {
      return create();
    };
    var useInsertionEffect = React$1["useInsertionEffect"] ? React$1["useInsertionEffect"] : false;
    var useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect || syncFallback;
    var useInsertionEffectWithLayoutFallback = useInsertionEffect || react.exports.useLayoutEffect;
    var hasOwnProperty$d = {}.hasOwnProperty;
    var EmotionCacheContext = /* @__PURE__ */ react.exports.createContext(
      typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache({
        key: "css"
      }) : null
    );
    {
      EmotionCacheContext.displayName = "EmotionCacheContext";
    }
    EmotionCacheContext.Provider;
    var withEmotionCache = function withEmotionCache2(func) {
      return /* @__PURE__ */ react.exports.forwardRef(function(props, ref) {
        var cache = react.exports.useContext(EmotionCacheContext);
        return func(props, cache, ref);
      });
    };
    var ThemeContext$2 = /* @__PURE__ */ react.exports.createContext({});
    {
      ThemeContext$2.displayName = "EmotionThemeContext";
    }
    var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
    var labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
    var Insertion$2 = function Insertion2(_ref) {
      var cache = _ref.cache, serialized = _ref.serialized, isStringTag2 = _ref.isStringTag;
      registerStyles(cache, serialized, isStringTag2);
      useInsertionEffectAlwaysWithSyncFallback(function() {
        return insertStyles(cache, serialized, isStringTag2);
      });
      return null;
    };
    var Emotion = /* @__PURE__ */ withEmotionCache(function(props, cache, ref) {
      var cssProp = props.css;
      if (typeof cssProp === "string" && cache.registered[cssProp] !== void 0) {
        cssProp = cache.registered[cssProp];
      }
      var WrappedComponent = props[typePropName];
      var registeredStyles = [cssProp];
      var className = "";
      if (typeof props.className === "string") {
        className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
      } else if (props.className != null) {
        className = props.className + " ";
      }
      var serialized = serializeStyles(registeredStyles, void 0, react.exports.useContext(ThemeContext$2));
      if (serialized.name.indexOf("-") === -1) {
        var labelFromStack = props[labelPropName];
        if (labelFromStack) {
          serialized = serializeStyles([serialized, "label:" + labelFromStack + ";"]);
        }
      }
      className += cache.key + "-" + serialized.name;
      var newProps = {};
      for (var key in props) {
        if (hasOwnProperty$d.call(props, key) && key !== "css" && key !== typePropName && key !== labelPropName) {
          newProps[key] = props[key];
        }
      }
      newProps.ref = ref;
      newProps.className = className;
      return /* @__PURE__ */ react.exports.createElement(react.exports.Fragment, null, /* @__PURE__ */ react.exports.createElement(Insertion$2, {
        cache,
        serialized,
        isStringTag: typeof WrappedComponent === "string"
      }), /* @__PURE__ */ react.exports.createElement(WrappedComponent, newProps));
    });
    {
      Emotion.displayName = "EmotionCssPropInternal";
    }
    var pkg = {
      name: "@emotion/react",
      version: "11.10.5",
      main: "dist/emotion-react.cjs.js",
      module: "dist/emotion-react.esm.js",
      browser: {
        "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
      },
      exports: {
        ".": {
          module: {
            worker: "./dist/emotion-react.worker.esm.js",
            browser: "./dist/emotion-react.browser.esm.js",
            "default": "./dist/emotion-react.esm.js"
          },
          "default": "./dist/emotion-react.cjs.js"
        },
        "./jsx-runtime": {
          module: {
            worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
            browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
            "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
          },
          "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
        },
        "./_isolated-hnrs": {
          module: {
            worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
            browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
            "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
          },
          "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
        },
        "./jsx-dev-runtime": {
          module: {
            worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
            browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
            "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
          },
          "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
        },
        "./package.json": "./package.json",
        "./types/css-prop": "./types/css-prop.d.ts",
        "./macro": "./macro.js"
      },
      types: "types/index.d.ts",
      files: [
        "src",
        "dist",
        "jsx-runtime",
        "jsx-dev-runtime",
        "_isolated-hnrs",
        "types/*.d.ts",
        "macro.js",
        "macro.d.ts",
        "macro.js.flow"
      ],
      sideEffects: false,
      author: "Emotion Contributors",
      license: "MIT",
      scripts: {
        "test:typescript": "dtslint types"
      },
      dependencies: {
        "@babel/runtime": "^7.18.3",
        "@emotion/babel-plugin": "^11.10.5",
        "@emotion/cache": "^11.10.5",
        "@emotion/serialize": "^1.1.1",
        "@emotion/use-insertion-effect-with-fallbacks": "^1.0.0",
        "@emotion/utils": "^1.2.0",
        "@emotion/weak-memoize": "^0.3.0",
        "hoist-non-react-statics": "^3.3.1"
      },
      peerDependencies: {
        "@babel/core": "^7.0.0",
        react: ">=16.8.0"
      },
      peerDependenciesMeta: {
        "@babel/core": {
          optional: true
        },
        "@types/react": {
          optional: true
        }
      },
      devDependencies: {
        "@babel/core": "^7.18.5",
        "@definitelytyped/dtslint": "0.0.112",
        "@emotion/css": "11.10.5",
        "@emotion/css-prettifier": "1.1.1",
        "@emotion/server": "11.10.0",
        "@emotion/styled": "11.10.5",
        "html-tag-names": "^1.1.2",
        react: "16.14.0",
        "svg-tag-names": "^1.1.1",
        typescript: "^4.5.5"
      },
      repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
      publishConfig: {
        access: "public"
      },
      "umd:main": "dist/emotion-react.umd.min.js",
      preconstruct: {
        entrypoints: [
          "./index.js",
          "./jsx-runtime.js",
          "./jsx-dev-runtime.js",
          "./_isolated-hnrs.js"
        ],
        umdName: "emotionReact",
        exports: {
          envConditions: [
            "browser",
            "worker"
          ],
          extra: {
            "./types/css-prop": "./types/css-prop.d.ts",
            "./macro": "./macro.js"
          }
        }
      }
    };
    var warnedAboutCssPropForGlobal = false;
    var Global = /* @__PURE__ */ withEmotionCache(function(props, cache) {
      if (!warnedAboutCssPropForGlobal && (props.className || props.css)) {
        console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
        warnedAboutCssPropForGlobal = true;
      }
      var styles2 = props.styles;
      var serialized = serializeStyles([styles2], void 0, react.exports.useContext(ThemeContext$2));
      var sheetRef = react.exports.useRef();
      useInsertionEffectWithLayoutFallback(function() {
        var key = cache.key + "-global";
        var sheet = new cache.sheet.constructor({
          key,
          nonce: cache.sheet.nonce,
          container: cache.sheet.container,
          speedy: cache.sheet.isSpeedy
        });
        var rehydrating = false;
        var node2 = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
        if (cache.sheet.tags.length) {
          sheet.before = cache.sheet.tags[0];
        }
        if (node2 !== null) {
          rehydrating = true;
          node2.setAttribute("data-emotion", key);
          sheet.hydrate([node2]);
        }
        sheetRef.current = [sheet, rehydrating];
        return function() {
          sheet.flush();
        };
      }, [cache]);
      useInsertionEffectWithLayoutFallback(function() {
        var sheetRefCurrent = sheetRef.current;
        var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
        if (rehydrating) {
          sheetRefCurrent[1] = false;
          return;
        }
        if (serialized.next !== void 0) {
          insertStyles(cache, serialized.next, true);
        }
        if (sheet.tags.length) {
          var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
          sheet.before = element;
          sheet.flush();
        }
        cache.insert("", serialized, sheet, false);
      }, [cache, serialized.name]);
      return null;
    });
    {
      Global.displayName = "EmotionGlobal";
    }
    function css() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return serializeStyles(args);
    }
    var keyframes = function keyframes2() {
      var insertable = css.apply(void 0, arguments);
      var name = "animation-" + insertable.name;
      return {
        name,
        styles: "@keyframes " + name + "{" + insertable.styles + "}",
        anim: 1,
        toString: function toString2() {
          return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
        }
      };
    };
    var classnames$1 = function classnames2(args) {
      var len = args.length;
      var i = 0;
      var cls = "";
      for (; i < len; i++) {
        var arg = args[i];
        if (arg == null)
          continue;
        var toAdd = void 0;
        switch (typeof arg) {
          case "boolean":
            break;
          case "object": {
            if (Array.isArray(arg)) {
              toAdd = classnames2(arg);
            } else {
              if (arg.styles !== void 0 && arg.name !== void 0) {
                console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
              }
              toAdd = "";
              for (var k in arg) {
                if (arg[k] && k) {
                  toAdd && (toAdd += " ");
                  toAdd += k;
                }
              }
            }
            break;
          }
          default: {
            toAdd = arg;
          }
        }
        if (toAdd) {
          cls && (cls += " ");
          cls += toAdd;
        }
      }
      return cls;
    };
    function merge$2(registered, css2, className) {
      var registeredStyles = [];
      var rawClassName = getRegisteredStyles(registered, registeredStyles, className);
      if (registeredStyles.length < 2) {
        return className;
      }
      return rawClassName + css2(registeredStyles);
    }
    var Insertion$1 = function Insertion2(_ref) {
      var cache = _ref.cache, serializedArr = _ref.serializedArr;
      useInsertionEffectAlwaysWithSyncFallback(function() {
        for (var i = 0; i < serializedArr.length; i++) {
          insertStyles(cache, serializedArr[i], false);
        }
      });
      return null;
    };
    var ClassNames = /* @__PURE__ */ withEmotionCache(function(props, cache) {
      var hasRendered = false;
      var serializedArr = [];
      var css2 = function css3() {
        if (hasRendered && true) {
          throw new Error("css can only be used during render");
        }
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var serialized = serializeStyles(args, cache.registered);
        serializedArr.push(serialized);
        registerStyles(cache, serialized, false);
        return cache.key + "-" + serialized.name;
      };
      var cx2 = function cx3() {
        if (hasRendered && true) {
          throw new Error("cx can only be used during render");
        }
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return merge$2(cache.registered, css2, classnames$1(args));
      };
      var content = {
        css: css2,
        cx: cx2,
        theme: react.exports.useContext(ThemeContext$2)
      };
      var ele = props.children(content);
      hasRendered = true;
      return /* @__PURE__ */ react.exports.createElement(react.exports.Fragment, null, /* @__PURE__ */ react.exports.createElement(Insertion$1, {
        cache,
        serializedArr
      }), ele);
    });
    {
      ClassNames.displayName = "EmotionClassNames";
    }
    {
      var isBrowser = true;
      var isTestEnv = typeof jest !== "undefined" || typeof vi !== "undefined";
      if (isBrowser && !isTestEnv) {
        var globalContext = typeof globalThis !== "undefined" ? globalThis : isBrowser ? window : global;
        var globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
        if (globalContext[globalKey]) {
          console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
        }
        globalContext[globalKey] = true;
      }
    }
    var testOmitPropsOnStringTag = isPropValid;
    var testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
      return key !== "theme";
    };
    var getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
      return typeof tag === "string" && tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
    };
    var composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
      var shouldForwardProp2;
      if (options) {
        var optionsShouldForwardProp = options.shouldForwardProp;
        shouldForwardProp2 = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
          return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
        } : optionsShouldForwardProp;
      }
      if (typeof shouldForwardProp2 !== "function" && isReal) {
        shouldForwardProp2 = tag.__emotion_forwardProp;
      }
      return shouldForwardProp2;
    };
    var ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
    var Insertion = function Insertion2(_ref) {
      var cache = _ref.cache, serialized = _ref.serialized, isStringTag2 = _ref.isStringTag;
      registerStyles(cache, serialized, isStringTag2);
      useInsertionEffectAlwaysWithSyncFallback(function() {
        return insertStyles(cache, serialized, isStringTag2);
      });
      return null;
    };
    var createStyled$1 = function createStyled2(tag, options) {
      {
        if (tag === void 0) {
          throw new Error("You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.");
        }
      }
      var isReal = tag.__emotion_real === tag;
      var baseTag = isReal && tag.__emotion_base || tag;
      var identifierName;
      var targetClassName;
      if (options !== void 0) {
        identifierName = options.label;
        targetClassName = options.target;
      }
      var shouldForwardProp2 = composeShouldForwardProps(tag, options, isReal);
      var defaultShouldForwardProp = shouldForwardProp2 || getDefaultShouldForwardProp(baseTag);
      var shouldUseAs = !defaultShouldForwardProp("as");
      return function() {
        var args = arguments;
        var styles2 = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
        if (identifierName !== void 0) {
          styles2.push("label:" + identifierName + ";");
        }
        if (args[0] == null || args[0].raw === void 0) {
          styles2.push.apply(styles2, args);
        } else {
          if (args[0][0] === void 0) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
          }
          styles2.push(args[0][0]);
          var len = args.length;
          var i = 1;
          for (; i < len; i++) {
            if (args[0][i] === void 0) {
              console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            }
            styles2.push(args[i], args[0][i]);
          }
        }
        var Styled = withEmotionCache(function(props, cache, ref) {
          var FinalTag = shouldUseAs && props.as || baseTag;
          var className = "";
          var classInterpolations = [];
          var mergedProps = props;
          if (props.theme == null) {
            mergedProps = {};
            for (var key in props) {
              mergedProps[key] = props[key];
            }
            mergedProps.theme = react.exports.useContext(ThemeContext$2);
          }
          if (typeof props.className === "string") {
            className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
          } else if (props.className != null) {
            className = props.className + " ";
          }
          var serialized = serializeStyles(styles2.concat(classInterpolations), cache.registered, mergedProps);
          className += cache.key + "-" + serialized.name;
          if (targetClassName !== void 0) {
            className += " " + targetClassName;
          }
          var finalShouldForwardProp = shouldUseAs && shouldForwardProp2 === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
          var newProps = {};
          for (var _key in props) {
            if (shouldUseAs && _key === "as")
              continue;
            if (finalShouldForwardProp(_key)) {
              newProps[_key] = props[_key];
            }
          }
          newProps.className = className;
          newProps.ref = ref;
          return /* @__PURE__ */ react.exports.createElement(react.exports.Fragment, null, /* @__PURE__ */ react.exports.createElement(Insertion, {
            cache,
            serialized,
            isStringTag: typeof FinalTag === "string"
          }), /* @__PURE__ */ react.exports.createElement(FinalTag, newProps));
        });
        Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
        Styled.defaultProps = tag.defaultProps;
        Styled.__emotion_real = Styled;
        Styled.__emotion_base = baseTag;
        Styled.__emotion_styles = styles2;
        Styled.__emotion_forwardProp = shouldForwardProp2;
        Object.defineProperty(Styled, "toString", {
          value: function value2() {
            if (targetClassName === void 0 && true) {
              return "NO_COMPONENT_SELECTOR";
            }
            return "." + targetClassName;
          }
        });
        Styled.withComponent = function(nextTag, nextOptions) {
          return createStyled2(nextTag, _extends({}, options, nextOptions, {
            shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
          })).apply(void 0, styles2);
        };
        return Styled;
      };
    };
    var tags = [
      "a",
      "abbr",
      "address",
      "area",
      "article",
      "aside",
      "audio",
      "b",
      "base",
      "bdi",
      "bdo",
      "big",
      "blockquote",
      "body",
      "br",
      "button",
      "canvas",
      "caption",
      "cite",
      "code",
      "col",
      "colgroup",
      "data",
      "datalist",
      "dd",
      "del",
      "details",
      "dfn",
      "dialog",
      "div",
      "dl",
      "dt",
      "em",
      "embed",
      "fieldset",
      "figcaption",
      "figure",
      "footer",
      "form",
      "h1",
      "h2",
      "h3",
      "h4",
      "h5",
      "h6",
      "head",
      "header",
      "hgroup",
      "hr",
      "html",
      "i",
      "iframe",
      "img",
      "input",
      "ins",
      "kbd",
      "keygen",
      "label",
      "legend",
      "li",
      "link",
      "main",
      "map",
      "mark",
      "marquee",
      "menu",
      "menuitem",
      "meta",
      "meter",
      "nav",
      "noscript",
      "object",
      "ol",
      "optgroup",
      "option",
      "output",
      "p",
      "param",
      "picture",
      "pre",
      "progress",
      "q",
      "rp",
      "rt",
      "ruby",
      "s",
      "samp",
      "script",
      "section",
      "select",
      "small",
      "source",
      "span",
      "strong",
      "style",
      "sub",
      "summary",
      "sup",
      "table",
      "tbody",
      "td",
      "textarea",
      "tfoot",
      "th",
      "thead",
      "time",
      "title",
      "tr",
      "track",
      "u",
      "ul",
      "var",
      "video",
      "wbr",
      "circle",
      "clipPath",
      "defs",
      "ellipse",
      "foreignObject",
      "g",
      "image",
      "line",
      "linearGradient",
      "mask",
      "path",
      "pattern",
      "polygon",
      "polyline",
      "radialGradient",
      "rect",
      "stop",
      "svg",
      "text",
      "tspan"
    ];
    var newStyled = createStyled$1.bind();
    tags.forEach(function(tagName) {
      newStyled[tagName] = newStyled(tagName);
    });
    const emStyled = newStyled;
    var jsxRuntime$1 = { exports: {} };
    var reactJsxRuntime_development = {};
    /** @license React v17.0.2
     * react-jsx-runtime.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    (function(exports2) {
      {
        (function() {
          var React2 = react.exports;
          var _assign = objectAssign;
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports2.Fragment = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports2.Fragment = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            symbolFor("react.scope");
            symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format2) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning2("error", format2, args);
            }
          }
          function printWarning2(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === exports2.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName2(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case exports2.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context2 = type;
                  return getContextName(context2) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName2(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match5 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match5 && match5[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures2 = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes2(typeSpecs, values2, location, componentName, element) {
            {
              var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures2)) {
                    loggedTypeFailures2[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config2) {
            {
              if (hasOwnProperty2.call(config2, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.ref !== void 0;
          }
          function hasValidKey(config2) {
            {
              if (hasOwnProperty2.call(config2, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config2, self2) {
            {
              if (typeof config2.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config2.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV2(type, config2, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                key = "" + maybeKey;
              }
              if (hasValidKey(config2)) {
                key = "" + config2.key;
              }
              if (hasValidRef(config2)) {
                ref = config2.ref;
                warnIfStringRefCannotBeAutoConverted(config2, self2);
              }
              for (propName in config2) {
                if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config2[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps2 = type.defaultProps;
                for (propName in defaultProps2) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps2[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentName(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            {
              if (typeof node2 !== "object") {
                return;
              }
              if (Array.isArray(node2)) {
                for (var i = 0; i < node2.length; i++) {
                  var child = node2[i];
                  if (isValidElement(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement(node2)) {
                if (node2._store) {
                  node2._store.validated = true;
                }
              } else if (node2) {
                var iteratorFn = getIteratorFn(node2);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node2.entries) {
                    var iterator = iteratorFn.call(node2);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes2;
              if (typeof type === "function") {
                propTypes2 = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes2 = type.propTypes;
              } else {
                return;
              }
              if (propTypes2) {
                var name = getComponentName(type);
                checkPropTypes2(propTypes2, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i = 0; i < keys2.length; i++) {
                var key = keys2[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (Array.isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV2(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (Array.isArray(children)) {
                      for (var i = 0; i < children.length; i++) {
                        validateChildKeys(children[i], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === exports2.Fragment) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx2 = jsxWithValidationDynamic;
          var jsxs2 = jsxWithValidationStatic;
          exports2.jsx = jsx2;
          exports2.jsxs = jsxs2;
        })();
      }
    })(reactJsxRuntime_development);
    (function(module2) {
      {
        module2.exports = reactJsxRuntime_development;
      }
    })(jsxRuntime$1);
    const Fragment$1 = jsxRuntime$1.exports.Fragment;
    const jsx = jsxRuntime$1.exports.jsx;
    const jsxs = jsxRuntime$1.exports.jsxs;
    const jsxRuntime = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      Fragment: Fragment$1,
      jsx,
      jsxs
    }, Symbol.toStringTag, { value: "Module" }));
    function isEmpty$4(obj) {
      return obj === void 0 || obj === null || Object.keys(obj).length === 0;
    }
    function GlobalStyles$2(props) {
      const {
        styles: styles2,
        defaultTheme: defaultTheme2 = {}
      } = props;
      const globalStyles = typeof styles2 === "function" ? (themeInput) => styles2(isEmpty$4(themeInput) ? defaultTheme2 : themeInput) : styles2;
      return /* @__PURE__ */ jsx(Global, {
        styles: globalStyles
      });
    }
    GlobalStyles$2.propTypes = {
      defaultTheme: propTypes.exports.object,
      styles: propTypes.exports.oneOfType([propTypes.exports.array, propTypes.exports.string, propTypes.exports.object, propTypes.exports.func])
    };
    /**
     * @mui/styled-engine v5.12.3
     *
     * @license MIT
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    function styled$2(tag, options) {
      const stylesFactory = emStyled(tag, options);
      {
        return (...styles2) => {
          const component = typeof tag === "string" ? `"${tag}"` : "component";
          if (styles2.length === 0) {
            console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join("\n"));
          } else if (styles2.some((style2) => style2 === void 0)) {
            console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
          }
          return stylesFactory(...styles2);
        };
      }
    }
    const internal_processStyles = (tag, processor) => {
      if (Array.isArray(tag.__emotion_styles)) {
        tag.__emotion_styles = processor(tag.__emotion_styles);
      }
    };
    const _excluded$1K = ["values", "unit", "step"];
    const sortBreakpointsValues = (values2) => {
      const breakpointsAsArray = Object.keys(values2).map((key) => ({
        key,
        val: values2[key]
      })) || [];
      breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
      return breakpointsAsArray.reduce((acc, obj) => {
        return _extends$1({}, acc, {
          [obj.key]: obj.val
        });
      }, {});
    };
    function createBreakpoints(breakpoints) {
      const {
        values: values2 = {
          xs: 0,
          sm: 600,
          md: 900,
          lg: 1200,
          xl: 1536
        },
        unit = "px",
        step = 5
      } = breakpoints, other = _objectWithoutPropertiesLoose$1(breakpoints, _excluded$1K);
      const sortedValues = sortBreakpointsValues(values2);
      const keys2 = Object.keys(sortedValues);
      function up(key) {
        const value2 = typeof values2[key] === "number" ? values2[key] : key;
        return `@media (min-width:${value2}${unit})`;
      }
      function down(key) {
        const value2 = typeof values2[key] === "number" ? values2[key] : key;
        return `@media (max-width:${value2 - step / 100}${unit})`;
      }
      function between(start2, end2) {
        const endIndex = keys2.indexOf(end2);
        return `@media (min-width:${typeof values2[start2] === "number" ? values2[start2] : start2}${unit}) and (max-width:${(endIndex !== -1 && typeof values2[keys2[endIndex]] === "number" ? values2[keys2[endIndex]] : end2) - step / 100}${unit})`;
      }
      function only(key) {
        if (keys2.indexOf(key) + 1 < keys2.length) {
          return between(key, keys2[keys2.indexOf(key) + 1]);
        }
        return up(key);
      }
      function not(key) {
        const keyIndex = keys2.indexOf(key);
        if (keyIndex === 0) {
          return up(keys2[1]);
        }
        if (keyIndex === keys2.length - 1) {
          return down(keys2[keyIndex]);
        }
        return between(key, keys2[keys2.indexOf(key) + 1]).replace("@media", "@media not all and");
      }
      return _extends$1({
        keys: keys2,
        values: sortedValues,
        up,
        down,
        between,
        only,
        not,
        unit
      }, other);
    }
    const shape = {
      borderRadius: 4
    };
    const shape$1 = shape;
    const responsivePropType = propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string, propTypes.exports.object, propTypes.exports.array]);
    const responsivePropType$1 = responsivePropType;
    function merge$1(acc, item) {
      if (!item) {
        return acc;
      }
      return deepmerge(acc, item, {
        clone: false
      });
    }
    const values$1 = {
      xs: 0,
      sm: 600,
      md: 900,
      lg: 1200,
      xl: 1536
    };
    const defaultBreakpoints = {
      keys: ["xs", "sm", "md", "lg", "xl"],
      up: (key) => `@media (min-width:${values$1[key]}px)`
    };
    function handleBreakpoints(props, propValue, styleFromPropValue) {
      const theme = props.theme || {};
      if (Array.isArray(propValue)) {
        const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
        return propValue.reduce((acc, item, index) => {
          acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
          return acc;
        }, {});
      }
      if (typeof propValue === "object") {
        const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
        return Object.keys(propValue).reduce((acc, breakpoint) => {
          if (Object.keys(themeBreakpoints.values || values$1).indexOf(breakpoint) !== -1) {
            const mediaKey = themeBreakpoints.up(breakpoint);
            acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
          } else {
            const cssKey = breakpoint;
            acc[cssKey] = propValue[cssKey];
          }
          return acc;
        }, {});
      }
      const output = styleFromPropValue(propValue);
      return output;
    }
    function createEmptyBreakpointObject(breakpointsInput = {}) {
      var _breakpointsInput$key;
      const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
        const breakpointStyleKey = breakpointsInput.up(key);
        acc[breakpointStyleKey] = {};
        return acc;
      }, {});
      return breakpointsInOrder || {};
    }
    function removeUnusedBreakpoints(breakpointKeys, style2) {
      return breakpointKeys.reduce((acc, key) => {
        const breakpointOutput = acc[key];
        const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
        if (isBreakpointUnused) {
          delete acc[key];
        }
        return acc;
      }, style2);
    }
    function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
      if (typeof breakpointValues !== "object") {
        return {};
      }
      const base = {};
      const breakpointsKeys = Object.keys(themeBreakpoints);
      if (Array.isArray(breakpointValues)) {
        breakpointsKeys.forEach((breakpoint, i) => {
          if (i < breakpointValues.length) {
            base[breakpoint] = true;
          }
        });
      } else {
        breakpointsKeys.forEach((breakpoint) => {
          if (breakpointValues[breakpoint] != null) {
            base[breakpoint] = true;
          }
        });
      }
      return base;
    }
    function resolveBreakpointValues({
      values: breakpointValues,
      breakpoints: themeBreakpoints,
      base: customBase
    }) {
      const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
      const keys2 = Object.keys(base);
      if (keys2.length === 0) {
        return breakpointValues;
      }
      let previous;
      return keys2.reduce((acc, breakpoint, i) => {
        if (Array.isArray(breakpointValues)) {
          acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
          previous = i;
        } else if (typeof breakpointValues === "object") {
          acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
          previous = breakpoint;
        } else {
          acc[breakpoint] = breakpointValues;
        }
        return acc;
      }, {});
    }
    function getPath(obj, path, checkVars = true) {
      if (!path || typeof path !== "string") {
        return null;
      }
      if (obj && obj.vars && checkVars) {
        const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
        if (val != null) {
          return val;
        }
      }
      return path.split(".").reduce((acc, item) => {
        if (acc && acc[item] != null) {
          return acc[item];
        }
        return null;
      }, obj);
    }
    function getStyleValue$1(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
      let value2;
      if (typeof themeMapping === "function") {
        value2 = themeMapping(propValueFinal);
      } else if (Array.isArray(themeMapping)) {
        value2 = themeMapping[propValueFinal] || userValue;
      } else {
        value2 = getPath(themeMapping, propValueFinal) || userValue;
      }
      if (transform) {
        value2 = transform(value2, userValue, themeMapping);
      }
      return value2;
    }
    function style$1(options) {
      const {
        prop,
        cssProperty = options.prop,
        themeKey,
        transform
      } = options;
      const fn = (props) => {
        if (props[prop] == null) {
          return null;
        }
        const propValue = props[prop];
        const theme = props.theme;
        const themeMapping = getPath(theme, themeKey) || {};
        const styleFromPropValue = (propValueFinal) => {
          let value2 = getStyleValue$1(themeMapping, transform, propValueFinal);
          if (propValueFinal === value2 && typeof propValueFinal === "string") {
            value2 = getStyleValue$1(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : capitalize(propValueFinal)}`, propValueFinal);
          }
          if (cssProperty === false) {
            return value2;
          }
          return {
            [cssProperty]: value2
          };
        };
        return handleBreakpoints(props, propValue, styleFromPropValue);
      };
      fn.propTypes = {
        [prop]: responsivePropType$1
      };
      fn.filterProps = [prop];
      return fn;
    }
    function memoize$2(fn) {
      const cache = {};
      return (arg) => {
        if (cache[arg] === void 0) {
          cache[arg] = fn(arg);
        }
        return cache[arg];
      };
    }
    const properties = {
      m: "margin",
      p: "padding"
    };
    const directions = {
      t: "Top",
      r: "Right",
      b: "Bottom",
      l: "Left",
      x: ["Left", "Right"],
      y: ["Top", "Bottom"]
    };
    const aliases$1 = {
      marginX: "mx",
      marginY: "my",
      paddingX: "px",
      paddingY: "py"
    };
    const getCssProperties = memoize$2((prop) => {
      if (prop.length > 2) {
        if (aliases$1[prop]) {
          prop = aliases$1[prop];
        } else {
          return [prop];
        }
      }
      const [a, b] = prop.split("");
      const property2 = properties[a];
      const direction = directions[b] || "";
      return Array.isArray(direction) ? direction.map((dir) => property2 + dir) : [property2 + direction];
    });
    const marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
    const paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
    const spacingKeys = [...marginKeys, ...paddingKeys];
    function createUnaryUnit(theme, themeKey, defaultValue2, propName) {
      var _getPath;
      const themeSpacing = (_getPath = getPath(theme, themeKey, false)) != null ? _getPath : defaultValue2;
      if (typeof themeSpacing === "number") {
        return (abs2) => {
          if (typeof abs2 === "string") {
            return abs2;
          }
          {
            if (typeof abs2 !== "number") {
              console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs2}.`);
            }
          }
          return themeSpacing * abs2;
        };
      }
      if (Array.isArray(themeSpacing)) {
        return (abs2) => {
          if (typeof abs2 === "string") {
            return abs2;
          }
          {
            if (!Number.isInteger(abs2)) {
              console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
            } else if (abs2 > themeSpacing.length - 1) {
              console.error([`MUI: The value provided (${abs2}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs2} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
            }
          }
          return themeSpacing[abs2];
        };
      }
      if (typeof themeSpacing === "function") {
        return themeSpacing;
      }
      {
        console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
      }
      return () => void 0;
    }
    function createUnarySpacing(theme) {
      return createUnaryUnit(theme, "spacing", 8, "spacing");
    }
    function getValue$2(transformer, propValue) {
      if (typeof propValue === "string" || propValue == null) {
        return propValue;
      }
      const abs2 = Math.abs(propValue);
      const transformed = transformer(abs2);
      if (propValue >= 0) {
        return transformed;
      }
      if (typeof transformed === "number") {
        return -transformed;
      }
      return `-${transformed}`;
    }
    function getStyleFromPropValue(cssProperties, transformer) {
      return (propValue) => cssProperties.reduce((acc, cssProperty) => {
        acc[cssProperty] = getValue$2(transformer, propValue);
        return acc;
      }, {});
    }
    function resolveCssProperty(props, keys2, prop, transformer) {
      if (keys2.indexOf(prop) === -1) {
        return null;
      }
      const cssProperties = getCssProperties(prop);
      const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
      const propValue = props[prop];
      return handleBreakpoints(props, propValue, styleFromPropValue);
    }
    function style(props, keys2) {
      const transformer = createUnarySpacing(props.theme);
      return Object.keys(props).map((prop) => resolveCssProperty(props, keys2, prop, transformer)).reduce(merge$1, {});
    }
    function margin(props) {
      return style(props, marginKeys);
    }
    margin.propTypes = marginKeys.reduce((obj, key) => {
      obj[key] = responsivePropType$1;
      return obj;
    }, {});
    margin.filterProps = marginKeys;
    function padding(props) {
      return style(props, paddingKeys);
    }
    padding.propTypes = paddingKeys.reduce((obj, key) => {
      obj[key] = responsivePropType$1;
      return obj;
    }, {});
    padding.filterProps = paddingKeys;
    spacingKeys.reduce((obj, key) => {
      obj[key] = responsivePropType$1;
      return obj;
    }, {});
    function createSpacing(spacingInput = 8) {
      if (spacingInput.mui) {
        return spacingInput;
      }
      const transform = createUnarySpacing({
        spacing: spacingInput
      });
      const spacing = (...argsInput) => {
        {
          if (!(argsInput.length <= 4)) {
            console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
          }
        }
        const args = argsInput.length === 0 ? [1] : argsInput;
        return args.map((argument) => {
          const output = transform(argument);
          return typeof output === "number" ? `${output}px` : output;
        }).join(" ");
      };
      spacing.mui = true;
      return spacing;
    }
    function compose(...styles2) {
      const handlers = styles2.reduce((acc, style2) => {
        style2.filterProps.forEach((prop) => {
          acc[prop] = style2;
        });
        return acc;
      }, {});
      const fn = (props) => {
        return Object.keys(props).reduce((acc, prop) => {
          if (handlers[prop]) {
            return merge$1(acc, handlers[prop](props));
          }
          return acc;
        }, {});
      };
      fn.propTypes = styles2.reduce((acc, style2) => Object.assign(acc, style2.propTypes), {});
      fn.filterProps = styles2.reduce((acc, style2) => acc.concat(style2.filterProps), []);
      return fn;
    }
    function borderTransform(value2) {
      if (typeof value2 !== "number") {
        return value2;
      }
      return `${value2}px solid`;
    }
    const border = style$1({
      prop: "border",
      themeKey: "borders",
      transform: borderTransform
    });
    const borderTop = style$1({
      prop: "borderTop",
      themeKey: "borders",
      transform: borderTransform
    });
    const borderRight = style$1({
      prop: "borderRight",
      themeKey: "borders",
      transform: borderTransform
    });
    const borderBottom = style$1({
      prop: "borderBottom",
      themeKey: "borders",
      transform: borderTransform
    });
    const borderLeft = style$1({
      prop: "borderLeft",
      themeKey: "borders",
      transform: borderTransform
    });
    const borderColor = style$1({
      prop: "borderColor",
      themeKey: "palette"
    });
    const borderTopColor = style$1({
      prop: "borderTopColor",
      themeKey: "palette"
    });
    const borderRightColor = style$1({
      prop: "borderRightColor",
      themeKey: "palette"
    });
    const borderBottomColor = style$1({
      prop: "borderBottomColor",
      themeKey: "palette"
    });
    const borderLeftColor = style$1({
      prop: "borderLeftColor",
      themeKey: "palette"
    });
    const borderRadius = (props) => {
      if (props.borderRadius !== void 0 && props.borderRadius !== null) {
        const transformer = createUnaryUnit(props.theme, "shape.borderRadius", 4, "borderRadius");
        const styleFromPropValue = (propValue) => ({
          borderRadius: getValue$2(transformer, propValue)
        });
        return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
      }
      return null;
    };
    borderRadius.propTypes = {
      borderRadius: responsivePropType$1
    };
    borderRadius.filterProps = ["borderRadius"];
    compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);
    const gap = (props) => {
      if (props.gap !== void 0 && props.gap !== null) {
        const transformer = createUnaryUnit(props.theme, "spacing", 8, "gap");
        const styleFromPropValue = (propValue) => ({
          gap: getValue$2(transformer, propValue)
        });
        return handleBreakpoints(props, props.gap, styleFromPropValue);
      }
      return null;
    };
    gap.propTypes = {
      gap: responsivePropType$1
    };
    gap.filterProps = ["gap"];
    const columnGap = (props) => {
      if (props.columnGap !== void 0 && props.columnGap !== null) {
        const transformer = createUnaryUnit(props.theme, "spacing", 8, "columnGap");
        const styleFromPropValue = (propValue) => ({
          columnGap: getValue$2(transformer, propValue)
        });
        return handleBreakpoints(props, props.columnGap, styleFromPropValue);
      }
      return null;
    };
    columnGap.propTypes = {
      columnGap: responsivePropType$1
    };
    columnGap.filterProps = ["columnGap"];
    const rowGap = (props) => {
      if (props.rowGap !== void 0 && props.rowGap !== null) {
        const transformer = createUnaryUnit(props.theme, "spacing", 8, "rowGap");
        const styleFromPropValue = (propValue) => ({
          rowGap: getValue$2(transformer, propValue)
        });
        return handleBreakpoints(props, props.rowGap, styleFromPropValue);
      }
      return null;
    };
    rowGap.propTypes = {
      rowGap: responsivePropType$1
    };
    rowGap.filterProps = ["rowGap"];
    const gridColumn = style$1({
      prop: "gridColumn"
    });
    const gridRow = style$1({
      prop: "gridRow"
    });
    const gridAutoFlow = style$1({
      prop: "gridAutoFlow"
    });
    const gridAutoColumns = style$1({
      prop: "gridAutoColumns"
    });
    const gridAutoRows = style$1({
      prop: "gridAutoRows"
    });
    const gridTemplateColumns = style$1({
      prop: "gridTemplateColumns"
    });
    const gridTemplateRows = style$1({
      prop: "gridTemplateRows"
    });
    const gridTemplateAreas = style$1({
      prop: "gridTemplateAreas"
    });
    const gridArea = style$1({
      prop: "gridArea"
    });
    compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
    function paletteTransform(value2, userValue) {
      if (userValue === "grey") {
        return userValue;
      }
      return value2;
    }
    const color = style$1({
      prop: "color",
      themeKey: "palette",
      transform: paletteTransform
    });
    const bgcolor = style$1({
      prop: "bgcolor",
      cssProperty: "backgroundColor",
      themeKey: "palette",
      transform: paletteTransform
    });
    const backgroundColor = style$1({
      prop: "backgroundColor",
      themeKey: "palette",
      transform: paletteTransform
    });
    compose(color, bgcolor, backgroundColor);
    function sizingTransform(value2) {
      return value2 <= 1 && value2 !== 0 ? `${value2 * 100}%` : value2;
    }
    const width = style$1({
      prop: "width",
      transform: sizingTransform
    });
    const maxWidth = (props) => {
      if (props.maxWidth !== void 0 && props.maxWidth !== null) {
        const styleFromPropValue = (propValue) => {
          var _props$theme, _props$theme$breakpoi, _props$theme$breakpoi2;
          const breakpoint = ((_props$theme = props.theme) == null ? void 0 : (_props$theme$breakpoi = _props$theme.breakpoints) == null ? void 0 : (_props$theme$breakpoi2 = _props$theme$breakpoi.values) == null ? void 0 : _props$theme$breakpoi2[propValue]) || values$1[propValue];
          return {
            maxWidth: breakpoint || sizingTransform(propValue)
          };
        };
        return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
      }
      return null;
    };
    maxWidth.filterProps = ["maxWidth"];
    const minWidth = style$1({
      prop: "minWidth",
      transform: sizingTransform
    });
    const height = style$1({
      prop: "height",
      transform: sizingTransform
    });
    const maxHeight = style$1({
      prop: "maxHeight",
      transform: sizingTransform
    });
    const minHeight = style$1({
      prop: "minHeight",
      transform: sizingTransform
    });
    style$1({
      prop: "size",
      cssProperty: "width",
      transform: sizingTransform
    });
    style$1({
      prop: "size",
      cssProperty: "height",
      transform: sizingTransform
    });
    const boxSizing = style$1({
      prop: "boxSizing"
    });
    compose(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
    const defaultSxConfig = {
      border: {
        themeKey: "borders",
        transform: borderTransform
      },
      borderTop: {
        themeKey: "borders",
        transform: borderTransform
      },
      borderRight: {
        themeKey: "borders",
        transform: borderTransform
      },
      borderBottom: {
        themeKey: "borders",
        transform: borderTransform
      },
      borderLeft: {
        themeKey: "borders",
        transform: borderTransform
      },
      borderColor: {
        themeKey: "palette"
      },
      borderTopColor: {
        themeKey: "palette"
      },
      borderRightColor: {
        themeKey: "palette"
      },
      borderBottomColor: {
        themeKey: "palette"
      },
      borderLeftColor: {
        themeKey: "palette"
      },
      borderRadius: {
        themeKey: "shape.borderRadius",
        style: borderRadius
      },
      color: {
        themeKey: "palette",
        transform: paletteTransform
      },
      bgcolor: {
        themeKey: "palette",
        cssProperty: "backgroundColor",
        transform: paletteTransform
      },
      backgroundColor: {
        themeKey: "palette",
        transform: paletteTransform
      },
      p: {
        style: padding
      },
      pt: {
        style: padding
      },
      pr: {
        style: padding
      },
      pb: {
        style: padding
      },
      pl: {
        style: padding
      },
      px: {
        style: padding
      },
      py: {
        style: padding
      },
      padding: {
        style: padding
      },
      paddingTop: {
        style: padding
      },
      paddingRight: {
        style: padding
      },
      paddingBottom: {
        style: padding
      },
      paddingLeft: {
        style: padding
      },
      paddingX: {
        style: padding
      },
      paddingY: {
        style: padding
      },
      paddingInline: {
        style: padding
      },
      paddingInlineStart: {
        style: padding
      },
      paddingInlineEnd: {
        style: padding
      },
      paddingBlock: {
        style: padding
      },
      paddingBlockStart: {
        style: padding
      },
      paddingBlockEnd: {
        style: padding
      },
      m: {
        style: margin
      },
      mt: {
        style: margin
      },
      mr: {
        style: margin
      },
      mb: {
        style: margin
      },
      ml: {
        style: margin
      },
      mx: {
        style: margin
      },
      my: {
        style: margin
      },
      margin: {
        style: margin
      },
      marginTop: {
        style: margin
      },
      marginRight: {
        style: margin
      },
      marginBottom: {
        style: margin
      },
      marginLeft: {
        style: margin
      },
      marginX: {
        style: margin
      },
      marginY: {
        style: margin
      },
      marginInline: {
        style: margin
      },
      marginInlineStart: {
        style: margin
      },
      marginInlineEnd: {
        style: margin
      },
      marginBlock: {
        style: margin
      },
      marginBlockStart: {
        style: margin
      },
      marginBlockEnd: {
        style: margin
      },
      displayPrint: {
        cssProperty: false,
        transform: (value2) => ({
          "@media print": {
            display: value2
          }
        })
      },
      display: {},
      overflow: {},
      textOverflow: {},
      visibility: {},
      whiteSpace: {},
      flexBasis: {},
      flexDirection: {},
      flexWrap: {},
      justifyContent: {},
      alignItems: {},
      alignContent: {},
      order: {},
      flex: {},
      flexGrow: {},
      flexShrink: {},
      alignSelf: {},
      justifyItems: {},
      justifySelf: {},
      gap: {
        style: gap
      },
      rowGap: {
        style: rowGap
      },
      columnGap: {
        style: columnGap
      },
      gridColumn: {},
      gridRow: {},
      gridAutoFlow: {},
      gridAutoColumns: {},
      gridAutoRows: {},
      gridTemplateColumns: {},
      gridTemplateRows: {},
      gridTemplateAreas: {},
      gridArea: {},
      position: {},
      zIndex: {
        themeKey: "zIndex"
      },
      top: {},
      right: {},
      bottom: {},
      left: {},
      boxShadow: {
        themeKey: "shadows"
      },
      width: {
        transform: sizingTransform
      },
      maxWidth: {
        style: maxWidth
      },
      minWidth: {
        transform: sizingTransform
      },
      height: {
        transform: sizingTransform
      },
      maxHeight: {
        transform: sizingTransform
      },
      minHeight: {
        transform: sizingTransform
      },
      boxSizing: {},
      fontFamily: {
        themeKey: "typography"
      },
      fontSize: {
        themeKey: "typography"
      },
      fontStyle: {
        themeKey: "typography"
      },
      fontWeight: {
        themeKey: "typography"
      },
      letterSpacing: {},
      textTransform: {},
      lineHeight: {},
      textAlign: {},
      typography: {
        cssProperty: false,
        themeKey: "typography"
      }
    };
    const defaultSxConfig$1 = defaultSxConfig;
    function objectsHaveSameKeys(...objects) {
      const allKeys = objects.reduce((keys2, object) => keys2.concat(Object.keys(object)), []);
      const union = new Set(allKeys);
      return objects.every((object) => union.size === Object.keys(object).length);
    }
    function callIfFn(maybeFn, arg) {
      return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
    }
    function unstable_createStyleFunctionSx() {
      function getThemeValue(prop, val, theme, config2) {
        const props = {
          [prop]: val,
          theme
        };
        const options = config2[prop];
        if (!options) {
          return {
            [prop]: val
          };
        }
        const {
          cssProperty = prop,
          themeKey,
          transform,
          style: style2
        } = options;
        if (val == null) {
          return null;
        }
        if (themeKey === "typography" && val === "inherit") {
          return {
            [prop]: val
          };
        }
        const themeMapping = getPath(theme, themeKey) || {};
        if (style2) {
          return style2(props);
        }
        const styleFromPropValue = (propValueFinal) => {
          let value2 = getStyleValue$1(themeMapping, transform, propValueFinal);
          if (propValueFinal === value2 && typeof propValueFinal === "string") {
            value2 = getStyleValue$1(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : capitalize(propValueFinal)}`, propValueFinal);
          }
          if (cssProperty === false) {
            return value2;
          }
          return {
            [cssProperty]: value2
          };
        };
        return handleBreakpoints(props, val, styleFromPropValue);
      }
      function styleFunctionSx2(props) {
        var _theme$unstable_sxCon;
        const {
          sx,
          theme = {}
        } = props || {};
        if (!sx) {
          return null;
        }
        const config2 = (_theme$unstable_sxCon = theme.unstable_sxConfig) != null ? _theme$unstable_sxCon : defaultSxConfig$1;
        function traverse(sxInput) {
          let sxObject = sxInput;
          if (typeof sxInput === "function") {
            sxObject = sxInput(theme);
          } else if (typeof sxInput !== "object") {
            return sxInput;
          }
          if (!sxObject) {
            return null;
          }
          const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
          const breakpointsKeys = Object.keys(emptyBreakpoints);
          let css2 = emptyBreakpoints;
          Object.keys(sxObject).forEach((styleKey) => {
            const value2 = callIfFn(sxObject[styleKey], theme);
            if (value2 !== null && value2 !== void 0) {
              if (typeof value2 === "object") {
                if (config2[styleKey]) {
                  css2 = merge$1(css2, getThemeValue(styleKey, value2, theme, config2));
                } else {
                  const breakpointsValues = handleBreakpoints({
                    theme
                  }, value2, (x) => ({
                    [styleKey]: x
                  }));
                  if (objectsHaveSameKeys(breakpointsValues, value2)) {
                    css2[styleKey] = styleFunctionSx2({
                      sx: value2,
                      theme
                    });
                  } else {
                    css2 = merge$1(css2, breakpointsValues);
                  }
                }
              } else {
                css2 = merge$1(css2, getThemeValue(styleKey, value2, theme, config2));
              }
            }
          });
          return removeUnusedBreakpoints(breakpointsKeys, css2);
        }
        return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
      }
      return styleFunctionSx2;
    }
    const styleFunctionSx = unstable_createStyleFunctionSx();
    styleFunctionSx.filterProps = ["sx"];
    const styleFunctionSx$1 = styleFunctionSx;
    const _excluded$1J = ["breakpoints", "palette", "spacing", "shape"];
    function createTheme$1(options = {}, ...args) {
      const {
        breakpoints: breakpointsInput = {},
        palette: paletteInput = {},
        spacing: spacingInput,
        shape: shapeInput = {}
      } = options, other = _objectWithoutPropertiesLoose$1(options, _excluded$1J);
      const breakpoints = createBreakpoints(breakpointsInput);
      const spacing = createSpacing(spacingInput);
      let muiTheme = deepmerge({
        breakpoints,
        direction: "ltr",
        components: {},
        palette: _extends$1({
          mode: "light"
        }, paletteInput),
        spacing,
        shape: _extends$1({}, shape$1, shapeInput)
      }, other);
      muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
      muiTheme.unstable_sxConfig = _extends$1({}, defaultSxConfig$1, other == null ? void 0 : other.unstable_sxConfig);
      muiTheme.unstable_sx = function sx(props) {
        return styleFunctionSx$1({
          sx: props,
          theme: this
        });
      };
      return muiTheme;
    }
    function isObjectEmpty$1(obj) {
      return Object.keys(obj).length === 0;
    }
    function useTheme$3(defaultTheme2 = null) {
      const contextTheme = react.exports.useContext(ThemeContext$2);
      return !contextTheme || isObjectEmpty$1(contextTheme) ? defaultTheme2 : contextTheme;
    }
    const systemDefaultTheme$1 = createTheme$1();
    function useTheme$2(defaultTheme2 = systemDefaultTheme$1) {
      return useTheme$3(defaultTheme2);
    }
    function GlobalStyles$1({
      styles: styles2,
      themeId,
      defaultTheme: defaultTheme2 = {}
    }) {
      const upperTheme = useTheme$2(defaultTheme2);
      const globalStyles = typeof styles2 === "function" ? styles2(themeId ? upperTheme[themeId] || upperTheme : upperTheme) : styles2;
      return /* @__PURE__ */ jsx(GlobalStyles$2, {
        styles: globalStyles
      });
    }
    GlobalStyles$1.propTypes = {
      defaultTheme: propTypes.exports.object,
      styles: propTypes.exports.oneOfType([propTypes.exports.array, propTypes.exports.func, propTypes.exports.number, propTypes.exports.object, propTypes.exports.string, propTypes.exports.bool]),
      themeId: propTypes.exports.string
    };
    const _excluded$1I = ["sx"];
    const splitProps = (props) => {
      var _props$theme$unstable, _props$theme;
      const result = {
        systemProps: {},
        otherProps: {}
      };
      const config2 = (_props$theme$unstable = props == null ? void 0 : (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : defaultSxConfig$1;
      Object.keys(props).forEach((prop) => {
        if (config2[prop]) {
          result.systemProps[prop] = props[prop];
        } else {
          result.otherProps[prop] = props[prop];
        }
      });
      return result;
    };
    function extendSxProp(props) {
      const {
        sx: inSx
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1I);
      const {
        systemProps,
        otherProps
      } = splitProps(other);
      let finalSx;
      if (Array.isArray(inSx)) {
        finalSx = [systemProps, ...inSx];
      } else if (typeof inSx === "function") {
        finalSx = (...args) => {
          const result = inSx(...args);
          if (!isPlainObject$5(result)) {
            return systemProps;
          }
          return _extends$1({}, systemProps, result);
        };
      } else {
        finalSx = _extends$1({}, systemProps, inSx);
      }
      return _extends$1({}, otherProps, {
        sx: finalSx
      });
    }
    function r(e) {
      var t, f, n = "";
      if ("string" == typeof e || "number" == typeof e)
        n += e;
      else if ("object" == typeof e)
        if (Array.isArray(e))
          for (t = 0; t < e.length; t++)
            e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
        else
          for (t in e)
            e[t] && (n && (n += " "), n += t);
      return n;
    }
    function clsx() {
      for (var e, t, f = 0, n = ""; f < arguments.length; )
        (e = arguments[f++]) && (t = r(e)) && (n && (n += " "), n += t);
      return n;
    }
    const _excluded$1H = ["variant"];
    function isEmpty$3(string) {
      return string.length === 0;
    }
    function propsToClassKey(props) {
      const {
        variant
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1H);
      let classKey = variant || "";
      Object.keys(other).sort().forEach((key) => {
        if (key === "color") {
          classKey += isEmpty$3(classKey) ? props[key] : capitalize(props[key]);
        } else {
          classKey += `${isEmpty$3(classKey) ? key : capitalize(key)}${capitalize(props[key].toString())}`;
        }
      });
      return classKey;
    }
    const _excluded$1G = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
    function isEmpty$2(obj) {
      return Object.keys(obj).length === 0;
    }
    function isStringTag(tag) {
      return typeof tag === "string" && tag.charCodeAt(0) > 96;
    }
    const getStyleOverrides = (name, theme) => {
      if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
        return theme.components[name].styleOverrides;
      }
      return null;
    };
    const getVariantStyles = (name, theme) => {
      let variants = [];
      if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
        variants = theme.components[name].variants;
      }
      const variantsStyles = {};
      variants.forEach((definition) => {
        const key = propsToClassKey(definition.props);
        variantsStyles[key] = definition.style;
      });
      return variantsStyles;
    };
    const variantsResolver = (props, styles2, theme, name) => {
      var _theme$components, _theme$components$nam;
      const {
        ownerState = {}
      } = props;
      const variantsStyles = [];
      const themeVariants = theme == null ? void 0 : (_theme$components = theme.components) == null ? void 0 : (_theme$components$nam = _theme$components[name]) == null ? void 0 : _theme$components$nam.variants;
      if (themeVariants) {
        themeVariants.forEach((themeVariant) => {
          let isMatch = true;
          Object.keys(themeVariant.props).forEach((key) => {
            if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
              isMatch = false;
            }
          });
          if (isMatch) {
            variantsStyles.push(styles2[propsToClassKey(themeVariant.props)]);
          }
        });
      }
      return variantsStyles;
    };
    function shouldForwardProp(prop) {
      return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
    }
    const systemDefaultTheme = createTheme$1();
    const lowercaseFirstLetter = (string) => {
      return string.charAt(0).toLowerCase() + string.slice(1);
    };
    function resolveTheme({
      defaultTheme: defaultTheme2,
      theme,
      themeId
    }) {
      return isEmpty$2(theme) ? defaultTheme2 : theme[themeId] || theme;
    }
    function createStyled(input = {}) {
      const {
        themeId,
        defaultTheme: defaultTheme2 = systemDefaultTheme,
        rootShouldForwardProp: rootShouldForwardProp2 = shouldForwardProp,
        slotShouldForwardProp: slotShouldForwardProp2 = shouldForwardProp
      } = input;
      const systemSx = (props) => {
        return styleFunctionSx$1(_extends$1({}, props, {
          theme: resolveTheme(_extends$1({}, props, {
            defaultTheme: defaultTheme2,
            themeId
          }))
        }));
      };
      systemSx.__mui_systemSx = true;
      return (tag, inputOptions = {}) => {
        internal_processStyles(tag, (styles2) => styles2.filter((style2) => !(style2 != null && style2.__mui_systemSx)));
        const {
          name: componentName,
          slot: componentSlot,
          skipVariantsResolver: inputSkipVariantsResolver,
          skipSx: inputSkipSx,
          overridesResolver: overridesResolver2
        } = inputOptions, options = _objectWithoutPropertiesLoose$1(inputOptions, _excluded$1G);
        const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : componentSlot && componentSlot !== "Root" || false;
        const skipSx = inputSkipSx || false;
        let label;
        {
          if (componentName) {
            label = `${componentName}-${lowercaseFirstLetter(componentSlot || "Root")}`;
          }
        }
        let shouldForwardPropOption = shouldForwardProp;
        if (componentSlot === "Root") {
          shouldForwardPropOption = rootShouldForwardProp2;
        } else if (componentSlot) {
          shouldForwardPropOption = slotShouldForwardProp2;
        } else if (isStringTag(tag)) {
          shouldForwardPropOption = void 0;
        }
        const defaultStyledResolver = styled$2(tag, _extends$1({
          shouldForwardProp: shouldForwardPropOption,
          label
        }, options));
        const muiStyledResolver = (styleArg2, ...expressions) => {
          const expressionsWithDefaultTheme = expressions ? expressions.map((stylesArg) => {
            return typeof stylesArg === "function" && stylesArg.__emotion_real !== stylesArg ? (props) => {
              return stylesArg(_extends$1({}, props, {
                theme: resolveTheme(_extends$1({}, props, {
                  defaultTheme: defaultTheme2,
                  themeId
                }))
              }));
            } : stylesArg;
          }) : [];
          let transformedStyleArg = styleArg2;
          if (componentName && overridesResolver2) {
            expressionsWithDefaultTheme.push((props) => {
              const theme = resolveTheme(_extends$1({}, props, {
                defaultTheme: defaultTheme2,
                themeId
              }));
              const styleOverrides = getStyleOverrides(componentName, theme);
              if (styleOverrides) {
                const resolvedStyleOverrides = {};
                Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
                  resolvedStyleOverrides[slotKey] = typeof slotStyle === "function" ? slotStyle(_extends$1({}, props, {
                    theme
                  })) : slotStyle;
                });
                return overridesResolver2(props, resolvedStyleOverrides);
              }
              return null;
            });
          }
          if (componentName && !skipVariantsResolver) {
            expressionsWithDefaultTheme.push((props) => {
              const theme = resolveTheme(_extends$1({}, props, {
                defaultTheme: defaultTheme2,
                themeId
              }));
              return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
            });
          }
          if (!skipSx) {
            expressionsWithDefaultTheme.push(systemSx);
          }
          const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
          if (Array.isArray(styleArg2) && numOfCustomFnsApplied > 0) {
            const placeholders = new Array(numOfCustomFnsApplied).fill("");
            transformedStyleArg = [...styleArg2, ...placeholders];
            transformedStyleArg.raw = [...styleArg2.raw, ...placeholders];
          } else if (typeof styleArg2 === "function" && styleArg2.__emotion_real !== styleArg2) {
            transformedStyleArg = (props) => styleArg2(_extends$1({}, props, {
              theme: resolveTheme(_extends$1({}, props, {
                defaultTheme: defaultTheme2,
                themeId
              }))
            }));
          }
          const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
          {
            let displayName;
            if (componentName) {
              displayName = `${componentName}${componentSlot || ""}`;
            }
            if (displayName === void 0) {
              displayName = `Styled(${getDisplayName(tag)})`;
            }
            Component.displayName = displayName;
          }
          if (tag.muiName) {
            Component.muiName = tag.muiName;
          }
          return Component;
        };
        if (defaultStyledResolver.withConfig) {
          muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
        }
        return muiStyledResolver;
      };
    }
    function getThemeProps(params) {
      const {
        theme,
        name,
        props
      } = params;
      if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
        return props;
      }
      return resolveProps(theme.components[name].defaultProps, props);
    }
    function useThemeProps$1({
      props,
      name,
      defaultTheme: defaultTheme2,
      themeId
    }) {
      let theme = useTheme$2(defaultTheme2);
      if (themeId) {
        theme = theme[themeId] || theme;
      }
      const mergedProps = getThemeProps({
        theme,
        name,
        props
      });
      return mergedProps;
    }
    function clamp$1(value2, min2 = 0, max2 = 1) {
      {
        if (value2 < min2 || value2 > max2) {
          console.error(`MUI: The value provided ${value2} is out of range [${min2}, ${max2}].`);
        }
      }
      return Math.min(Math.max(min2, value2), max2);
    }
    function hexToRgb(color2) {
      color2 = color2.slice(1);
      const re = new RegExp(`.{1,${color2.length >= 6 ? 2 : 1}}`, "g");
      let colors = color2.match(re);
      if (colors && colors[0].length === 1) {
        colors = colors.map((n) => n + n);
      }
      return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n, index) => {
        return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1e3) / 1e3;
      }).join(", ")})` : "";
    }
    function decomposeColor(color2) {
      if (color2.type) {
        return color2;
      }
      if (color2.charAt(0) === "#") {
        return decomposeColor(hexToRgb(color2));
      }
      const marker = color2.indexOf("(");
      const type = color2.substring(0, marker);
      if (["rgb", "rgba", "hsl", "hsla", "color"].indexOf(type) === -1) {
        throw new Error(`MUI: Unsupported \`${color2}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().`);
      }
      let values2 = color2.substring(marker + 1, color2.length - 1);
      let colorSpace;
      if (type === "color") {
        values2 = values2.split(" ");
        colorSpace = values2.shift();
        if (values2.length === 4 && values2[3].charAt(0) === "/") {
          values2[3] = values2[3].slice(1);
        }
        if (["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].indexOf(colorSpace) === -1) {
          throw new Error(`MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.`);
        }
      } else {
        values2 = values2.split(",");
      }
      values2 = values2.map((value2) => parseFloat(value2));
      return {
        type,
        values: values2,
        colorSpace
      };
    }
    function recomposeColor(color2) {
      const {
        type,
        colorSpace
      } = color2;
      let {
        values: values2
      } = color2;
      if (type.indexOf("rgb") !== -1) {
        values2 = values2.map((n, i) => i < 3 ? parseInt(n, 10) : n);
      } else if (type.indexOf("hsl") !== -1) {
        values2[1] = `${values2[1]}%`;
        values2[2] = `${values2[2]}%`;
      }
      if (type.indexOf("color") !== -1) {
        values2 = `${colorSpace} ${values2.join(" ")}`;
      } else {
        values2 = `${values2.join(", ")}`;
      }
      return `${type}(${values2})`;
    }
    function hslToRgb(color2) {
      color2 = decomposeColor(color2);
      const {
        values: values2
      } = color2;
      const h = values2[0];
      const s = values2[1] / 100;
      const l = values2[2] / 100;
      const a = s * Math.min(l, 1 - l);
      const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
      let type = "rgb";
      const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
      if (color2.type === "hsla") {
        type += "a";
        rgb.push(values2[3]);
      }
      return recomposeColor({
        type,
        values: rgb
      });
    }
    function getLuminance(color2) {
      color2 = decomposeColor(color2);
      let rgb = color2.type === "hsl" || color2.type === "hsla" ? decomposeColor(hslToRgb(color2)).values : color2.values;
      rgb = rgb.map((val) => {
        if (color2.type !== "color") {
          val /= 255;
        }
        return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
      });
      return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
    }
    function getContrastRatio(foreground, background) {
      const lumA = getLuminance(foreground);
      const lumB = getLuminance(background);
      return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
    }
    function alpha(color2, value2) {
      color2 = decomposeColor(color2);
      value2 = clamp$1(value2);
      if (color2.type === "rgb" || color2.type === "hsl") {
        color2.type += "a";
      }
      if (color2.type === "color") {
        color2.values[3] = `/${value2}`;
      } else {
        color2.values[3] = value2;
      }
      return recomposeColor(color2);
    }
    function darken(color2, coefficient) {
      color2 = decomposeColor(color2);
      coefficient = clamp$1(coefficient);
      if (color2.type.indexOf("hsl") !== -1) {
        color2.values[2] *= 1 - coefficient;
      } else if (color2.type.indexOf("rgb") !== -1 || color2.type.indexOf("color") !== -1) {
        for (let i = 0; i < 3; i += 1) {
          color2.values[i] *= 1 - coefficient;
        }
      }
      return recomposeColor(color2);
    }
    function lighten(color2, coefficient) {
      color2 = decomposeColor(color2);
      coefficient = clamp$1(coefficient);
      if (color2.type.indexOf("hsl") !== -1) {
        color2.values[2] += (100 - color2.values[2]) * coefficient;
      } else if (color2.type.indexOf("rgb") !== -1) {
        for (let i = 0; i < 3; i += 1) {
          color2.values[i] += (255 - color2.values[i]) * coefficient;
        }
      } else if (color2.type.indexOf("color") !== -1) {
        for (let i = 0; i < 3; i += 1) {
          color2.values[i] += (1 - color2.values[i]) * coefficient;
        }
      }
      return recomposeColor(color2);
    }
    const ThemeContext = /* @__PURE__ */ react.exports.createContext(null);
    {
      ThemeContext.displayName = "ThemeContext";
    }
    const ThemeContext$1 = ThemeContext;
    function useTheme$1() {
      const theme = react.exports.useContext(ThemeContext$1);
      {
        react.exports.useDebugValue(theme);
      }
      return theme;
    }
    const hasSymbol = typeof Symbol === "function" && Symbol.for;
    const nested = hasSymbol ? Symbol.for("mui.nested") : "__THEME_NESTED__";
    function mergeOuterLocalTheme(outerTheme, localTheme) {
      if (typeof localTheme === "function") {
        const mergedTheme = localTheme(outerTheme);
        {
          if (!mergedTheme) {
            console.error(["MUI: You should return an object from your theme function, i.e.", "<ThemeProvider theme={() => ({})} />"].join("\n"));
          }
        }
        return mergedTheme;
      }
      return _extends$1({}, outerTheme, localTheme);
    }
    function ThemeProvider$2(props) {
      const {
        children,
        theme: localTheme
      } = props;
      const outerTheme = useTheme$1();
      {
        if (outerTheme === null && typeof localTheme === "function") {
          console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
        }
      }
      const theme = react.exports.useMemo(() => {
        const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);
        if (output != null) {
          output[nested] = outerTheme !== null;
        }
        return output;
      }, [localTheme, outerTheme]);
      return /* @__PURE__ */ jsx(ThemeContext$1.Provider, {
        value: theme,
        children
      });
    }
    ThemeProvider$2.propTypes = {
      children: propTypes.exports.node,
      theme: propTypes.exports.oneOfType([propTypes.exports.object, propTypes.exports.func]).isRequired
    };
    {
      ThemeProvider$2.propTypes = exactProp(ThemeProvider$2.propTypes);
    }
    const EMPTY_THEME = {};
    function useThemeScoping(themeId, upperTheme, localTheme, isPrivate = false) {
      return react.exports.useMemo(() => {
        const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;
        if (typeof localTheme === "function") {
          const mergedTheme = localTheme(resolvedTheme);
          const result = themeId ? _extends$1({}, upperTheme, {
            [themeId]: mergedTheme
          }) : mergedTheme;
          if (isPrivate) {
            return () => result;
          }
          return result;
        }
        return themeId ? _extends$1({}, upperTheme, {
          [themeId]: localTheme
        }) : _extends$1({}, upperTheme, localTheme);
      }, [themeId, upperTheme, localTheme, isPrivate]);
    }
    function ThemeProvider$1(props) {
      const {
        children,
        theme: localTheme,
        themeId
      } = props;
      const upperTheme = useTheme$3(EMPTY_THEME);
      const upperPrivateTheme = useTheme$1() || EMPTY_THEME;
      {
        if (upperTheme === null && typeof localTheme === "function" || themeId && upperTheme && !upperTheme[themeId] && typeof localTheme === "function") {
          console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
        }
      }
      const engineTheme = useThemeScoping(themeId, upperTheme, localTheme);
      const privateTheme = useThemeScoping(themeId, upperPrivateTheme, localTheme, true);
      return /* @__PURE__ */ jsx(ThemeProvider$2, {
        theme: privateTheme,
        children: /* @__PURE__ */ jsx(ThemeContext$2.Provider, {
          value: engineTheme,
          children
        })
      });
    }
    ThemeProvider$1.propTypes = {
      children: propTypes.exports.node,
      theme: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]).isRequired,
      themeId: propTypes.exports.string
    };
    {
      ThemeProvider$1.propTypes = exactProp(ThemeProvider$1.propTypes);
    }
    function createMixins(breakpoints, mixins) {
      return _extends$1({
        toolbar: {
          minHeight: 56,
          [breakpoints.up("xs")]: {
            "@media (orientation: landscape)": {
              minHeight: 48
            }
          },
          [breakpoints.up("sm")]: {
            minHeight: 64
          }
        }
      }, mixins);
    }
    const common = {
      black: "#000",
      white: "#fff"
    };
    const common$1 = common;
    const grey = {
      50: "#fafafa",
      100: "#f5f5f5",
      200: "#eeeeee",
      300: "#e0e0e0",
      400: "#bdbdbd",
      500: "#9e9e9e",
      600: "#757575",
      700: "#616161",
      800: "#424242",
      900: "#212121",
      A100: "#f5f5f5",
      A200: "#eeeeee",
      A400: "#bdbdbd",
      A700: "#616161"
    };
    const grey$1 = grey;
    const purple = {
      50: "#f3e5f5",
      100: "#e1bee7",
      200: "#ce93d8",
      300: "#ba68c8",
      400: "#ab47bc",
      500: "#9c27b0",
      600: "#8e24aa",
      700: "#7b1fa2",
      800: "#6a1b9a",
      900: "#4a148c",
      A100: "#ea80fc",
      A200: "#e040fb",
      A400: "#d500f9",
      A700: "#aa00ff"
    };
    const purple$1 = purple;
    const red = {
      50: "#ffebee",
      100: "#ffcdd2",
      200: "#ef9a9a",
      300: "#e57373",
      400: "#ef5350",
      500: "#f44336",
      600: "#e53935",
      700: "#d32f2f",
      800: "#c62828",
      900: "#b71c1c",
      A100: "#ff8a80",
      A200: "#ff5252",
      A400: "#ff1744",
      A700: "#d50000"
    };
    const red$1 = red;
    const orange = {
      50: "#fff3e0",
      100: "#ffe0b2",
      200: "#ffcc80",
      300: "#ffb74d",
      400: "#ffa726",
      500: "#ff9800",
      600: "#fb8c00",
      700: "#f57c00",
      800: "#ef6c00",
      900: "#e65100",
      A100: "#ffd180",
      A200: "#ffab40",
      A400: "#ff9100",
      A700: "#ff6d00"
    };
    const orange$1 = orange;
    const blue = {
      50: "#e3f2fd",
      100: "#bbdefb",
      200: "#90caf9",
      300: "#64b5f6",
      400: "#42a5f5",
      500: "#2196f3",
      600: "#1e88e5",
      700: "#1976d2",
      800: "#1565c0",
      900: "#0d47a1",
      A100: "#82b1ff",
      A200: "#448aff",
      A400: "#2979ff",
      A700: "#2962ff"
    };
    const blue$1 = blue;
    const lightBlue = {
      50: "#e1f5fe",
      100: "#b3e5fc",
      200: "#81d4fa",
      300: "#4fc3f7",
      400: "#29b6f6",
      500: "#03a9f4",
      600: "#039be5",
      700: "#0288d1",
      800: "#0277bd",
      900: "#01579b",
      A100: "#80d8ff",
      A200: "#40c4ff",
      A400: "#00b0ff",
      A700: "#0091ea"
    };
    const lightBlue$1 = lightBlue;
    const green = {
      50: "#e8f5e9",
      100: "#c8e6c9",
      200: "#a5d6a7",
      300: "#81c784",
      400: "#66bb6a",
      500: "#4caf50",
      600: "#43a047",
      700: "#388e3c",
      800: "#2e7d32",
      900: "#1b5e20",
      A100: "#b9f6ca",
      A200: "#69f0ae",
      A400: "#00e676",
      A700: "#00c853"
    };
    const green$1 = green;
    const _excluded$1F = ["mode", "contrastThreshold", "tonalOffset"];
    const light = {
      text: {
        primary: "rgba(0, 0, 0, 0.87)",
        secondary: "rgba(0, 0, 0, 0.6)",
        disabled: "rgba(0, 0, 0, 0.38)"
      },
      divider: "rgba(0, 0, 0, 0.12)",
      background: {
        paper: common$1.white,
        default: common$1.white
      },
      action: {
        active: "rgba(0, 0, 0, 0.54)",
        hover: "rgba(0, 0, 0, 0.04)",
        hoverOpacity: 0.04,
        selected: "rgba(0, 0, 0, 0.08)",
        selectedOpacity: 0.08,
        disabled: "rgba(0, 0, 0, 0.26)",
        disabledBackground: "rgba(0, 0, 0, 0.12)",
        disabledOpacity: 0.38,
        focus: "rgba(0, 0, 0, 0.12)",
        focusOpacity: 0.12,
        activatedOpacity: 0.12
      }
    };
    const dark = {
      text: {
        primary: common$1.white,
        secondary: "rgba(255, 255, 255, 0.7)",
        disabled: "rgba(255, 255, 255, 0.5)",
        icon: "rgba(255, 255, 255, 0.5)"
      },
      divider: "rgba(255, 255, 255, 0.12)",
      background: {
        paper: "#121212",
        default: "#121212"
      },
      action: {
        active: common$1.white,
        hover: "rgba(255, 255, 255, 0.08)",
        hoverOpacity: 0.08,
        selected: "rgba(255, 255, 255, 0.16)",
        selectedOpacity: 0.16,
        disabled: "rgba(255, 255, 255, 0.3)",
        disabledBackground: "rgba(255, 255, 255, 0.12)",
        disabledOpacity: 0.38,
        focus: "rgba(255, 255, 255, 0.12)",
        focusOpacity: 0.12,
        activatedOpacity: 0.24
      }
    };
    function addLightOrDark(intent, direction, shade, tonalOffset) {
      const tonalOffsetLight = tonalOffset.light || tonalOffset;
      const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
      if (!intent[direction]) {
        if (intent.hasOwnProperty(shade)) {
          intent[direction] = intent[shade];
        } else if (direction === "light") {
          intent.light = lighten(intent.main, tonalOffsetLight);
        } else if (direction === "dark") {
          intent.dark = darken(intent.main, tonalOffsetDark);
        }
      }
    }
    function getDefaultPrimary(mode = "light") {
      if (mode === "dark") {
        return {
          main: blue$1[200],
          light: blue$1[50],
          dark: blue$1[400]
        };
      }
      return {
        main: blue$1[700],
        light: blue$1[400],
        dark: blue$1[800]
      };
    }
    function getDefaultSecondary(mode = "light") {
      if (mode === "dark") {
        return {
          main: purple$1[200],
          light: purple$1[50],
          dark: purple$1[400]
        };
      }
      return {
        main: purple$1[500],
        light: purple$1[300],
        dark: purple$1[700]
      };
    }
    function getDefaultError(mode = "light") {
      if (mode === "dark") {
        return {
          main: red$1[500],
          light: red$1[300],
          dark: red$1[700]
        };
      }
      return {
        main: red$1[700],
        light: red$1[400],
        dark: red$1[800]
      };
    }
    function getDefaultInfo(mode = "light") {
      if (mode === "dark") {
        return {
          main: lightBlue$1[400],
          light: lightBlue$1[300],
          dark: lightBlue$1[700]
        };
      }
      return {
        main: lightBlue$1[700],
        light: lightBlue$1[500],
        dark: lightBlue$1[900]
      };
    }
    function getDefaultSuccess(mode = "light") {
      if (mode === "dark") {
        return {
          main: green$1[400],
          light: green$1[300],
          dark: green$1[700]
        };
      }
      return {
        main: green$1[800],
        light: green$1[500],
        dark: green$1[900]
      };
    }
    function getDefaultWarning(mode = "light") {
      if (mode === "dark") {
        return {
          main: orange$1[400],
          light: orange$1[300],
          dark: orange$1[700]
        };
      }
      return {
        main: "#ed6c02",
        light: orange$1[500],
        dark: orange$1[900]
      };
    }
    function createPalette(palette) {
      const {
        mode = "light",
        contrastThreshold = 3,
        tonalOffset = 0.2
      } = palette, other = _objectWithoutPropertiesLoose$1(palette, _excluded$1F);
      const primary = palette.primary || getDefaultPrimary(mode);
      const secondary = palette.secondary || getDefaultSecondary(mode);
      const error = palette.error || getDefaultError(mode);
      const info = palette.info || getDefaultInfo(mode);
      const success = palette.success || getDefaultSuccess(mode);
      const warning2 = palette.warning || getDefaultWarning(mode);
      function getContrastText(background) {
        const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
        {
          const contrast = getContrastRatio(background, contrastText);
          if (contrast < 3) {
            console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
          }
        }
        return contrastText;
      }
      const augmentColor = ({
        color: color2,
        name,
        mainShade = 500,
        lightShade = 300,
        darkShade = 700
      }) => {
        color2 = _extends$1({}, color2);
        if (!color2.main && color2[mainShade]) {
          color2.main = color2[mainShade];
        }
        if (!color2.hasOwnProperty("main")) {
          throw new Error(`MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.`);
        }
        if (typeof color2.main !== "string") {
          throw new Error(`MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color2.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });`);
        }
        addLightOrDark(color2, "light", lightShade, tonalOffset);
        addLightOrDark(color2, "dark", darkShade, tonalOffset);
        if (!color2.contrastText) {
          color2.contrastText = getContrastText(color2.main);
        }
        return color2;
      };
      const modes = {
        dark,
        light
      };
      {
        if (!modes[mode]) {
          console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
        }
      }
      const paletteOutput = deepmerge(_extends$1({
        common: _extends$1({}, common$1),
        mode,
        primary: augmentColor({
          color: primary,
          name: "primary"
        }),
        secondary: augmentColor({
          color: secondary,
          name: "secondary",
          mainShade: "A400",
          lightShade: "A200",
          darkShade: "A700"
        }),
        error: augmentColor({
          color: error,
          name: "error"
        }),
        warning: augmentColor({
          color: warning2,
          name: "warning"
        }),
        info: augmentColor({
          color: info,
          name: "info"
        }),
        success: augmentColor({
          color: success,
          name: "success"
        }),
        grey: grey$1,
        contrastThreshold,
        getContrastText,
        augmentColor,
        tonalOffset
      }, modes[mode]), other);
      return paletteOutput;
    }
    const _excluded$1E = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
    function round$2(value2) {
      return Math.round(value2 * 1e5) / 1e5;
    }
    const caseAllCaps = {
      textTransform: "uppercase"
    };
    const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
    function createTypography(palette, typography) {
      const _ref = typeof typography === "function" ? typography(palette) : typography, {
        fontFamily = defaultFontFamily,
        fontSize = 14,
        fontWeightLight = 300,
        fontWeightRegular = 400,
        fontWeightMedium = 500,
        fontWeightBold = 700,
        htmlFontSize = 16,
        allVariants,
        pxToRem: pxToRem2
      } = _ref, other = _objectWithoutPropertiesLoose$1(_ref, _excluded$1E);
      {
        if (typeof fontSize !== "number") {
          console.error("MUI: `fontSize` is required to be a number.");
        }
        if (typeof htmlFontSize !== "number") {
          console.error("MUI: `htmlFontSize` is required to be a number.");
        }
      }
      const coef = fontSize / 14;
      const pxToRem = pxToRem2 || ((size) => `${size / htmlFontSize * coef}rem`);
      const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _extends$1({
        fontFamily,
        fontWeight,
        fontSize: pxToRem(size),
        lineHeight
      }, fontFamily === defaultFontFamily ? {
        letterSpacing: `${round$2(letterSpacing / size)}em`
      } : {}, casing, allVariants);
      const variants = {
        h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
        h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
        h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
        h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
        h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
        h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
        subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
        subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
        body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
        body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
        button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
        caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
        overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
        inherit: {
          fontFamily: "inherit",
          fontWeight: "inherit",
          fontSize: "inherit",
          lineHeight: "inherit",
          letterSpacing: "inherit"
        }
      };
      return deepmerge(_extends$1({
        htmlFontSize,
        pxToRem,
        fontFamily,
        fontSize,
        fontWeightLight,
        fontWeightRegular,
        fontWeightMedium,
        fontWeightBold
      }, variants), other, {
        clone: false
      });
    }
    const shadowKeyUmbraOpacity = 0.2;
    const shadowKeyPenumbraOpacity = 0.14;
    const shadowAmbientShadowOpacity = 0.12;
    function createShadow(...px) {
      return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(",");
    }
    const shadows = ["none", createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
    const shadows$1 = shadows;
    const _excluded$1D = ["duration", "easing", "delay"];
    const easing = {
      easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
      easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
      easeIn: "cubic-bezier(0.4, 0, 1, 1)",
      sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
    };
    const duration = {
      shortest: 150,
      shorter: 200,
      short: 250,
      standard: 300,
      complex: 375,
      enteringScreen: 225,
      leavingScreen: 195
    };
    function formatMs(milliseconds2) {
      return `${Math.round(milliseconds2)}ms`;
    }
    function getAutoHeightDuration(height2) {
      if (!height2) {
        return 0;
      }
      const constant2 = height2 / 36;
      return Math.round((4 + 15 * constant2 ** 0.25 + constant2 / 5) * 10);
    }
    function createTransitions(inputTransitions) {
      const mergedEasing = _extends$1({}, easing, inputTransitions.easing);
      const mergedDuration = _extends$1({}, duration, inputTransitions.duration);
      const create = (props = ["all"], options = {}) => {
        const {
          duration: durationOption = mergedDuration.standard,
          easing: easingOption = mergedEasing.easeInOut,
          delay = 0
        } = options, other = _objectWithoutPropertiesLoose$1(options, _excluded$1D);
        {
          const isString2 = (value2) => typeof value2 === "string";
          const isNumber2 = (value2) => !isNaN(parseFloat(value2));
          if (!isString2(props) && !Array.isArray(props)) {
            console.error('MUI: Argument "props" must be a string or Array.');
          }
          if (!isNumber2(durationOption) && !isString2(durationOption)) {
            console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
          }
          if (!isString2(easingOption)) {
            console.error('MUI: Argument "easing" must be a string.');
          }
          if (!isNumber2(delay) && !isString2(delay)) {
            console.error('MUI: Argument "delay" must be a number or a string.');
          }
          if (Object.keys(other).length !== 0) {
            console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(",")}].`);
          }
        }
        return (Array.isArray(props) ? props : [props]).map((animatedProp) => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === "string" ? delay : formatMs(delay)}`).join(",");
      };
      return _extends$1({
        getAutoHeightDuration,
        create
      }, inputTransitions, {
        easing: mergedEasing,
        duration: mergedDuration
      });
    }
    const zIndex = {
      mobileStepper: 1e3,
      fab: 1050,
      speedDial: 1050,
      appBar: 1100,
      drawer: 1200,
      modal: 1300,
      snackbar: 1400,
      tooltip: 1500
    };
    const zIndex$1 = zIndex;
    const _excluded$1C = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
    function createTheme(options = {}, ...args) {
      const {
        mixins: mixinsInput = {},
        palette: paletteInput = {},
        transitions: transitionsInput = {},
        typography: typographyInput = {}
      } = options, other = _objectWithoutPropertiesLoose$1(options, _excluded$1C);
      if (options.vars) {
        throw new Error(`MUI: \`vars\` is a private field used for CSS variables support.
Please use another name.`);
      }
      const palette = createPalette(paletteInput);
      const systemTheme = createTheme$1(options);
      let muiTheme = deepmerge(systemTheme, {
        mixins: createMixins(systemTheme.breakpoints, mixinsInput),
        palette,
        shadows: shadows$1.slice(),
        typography: createTypography(palette, typographyInput),
        transitions: createTransitions(transitionsInput),
        zIndex: _extends$1({}, zIndex$1)
      });
      muiTheme = deepmerge(muiTheme, other);
      muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
      {
        const stateClasses = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"];
        const traverse = (node2, component) => {
          let key;
          for (key in node2) {
            const child = node2[key];
            if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
              {
                const stateClass = generateUtilityClass("", key);
                console.error([`MUI: The \`${component}\` component increases the CSS specificity of the \`${key}\` internal state.`, "You can not override it like this: ", JSON.stringify(node2, null, 2), "", `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
                  root: {
                    [`&.${stateClass}`]: child
                  }
                }, null, 2), "", "https://mui.com/r/state-classes-guide"].join("\n"));
              }
              node2[key] = {};
            }
          }
        };
        Object.keys(muiTheme.components).forEach((component) => {
          const styleOverrides = muiTheme.components[component].styleOverrides;
          if (styleOverrides && component.indexOf("Mui") === 0) {
            traverse(styleOverrides, component);
          }
        });
      }
      muiTheme.unstable_sxConfig = _extends$1({}, defaultSxConfig$1, other == null ? void 0 : other.unstable_sxConfig);
      muiTheme.unstable_sx = function sx(props) {
        return styleFunctionSx$1({
          sx: props,
          theme: this
        });
      };
      return muiTheme;
    }
    const defaultTheme = createTheme();
    const defaultTheme$1 = defaultTheme;
    function useTheme() {
      const theme = useTheme$2(defaultTheme$1);
      {
        react.exports.useDebugValue(theme);
      }
      return theme[THEME_ID] || theme;
    }
    function useThemeProps({
      props,
      name
    }) {
      return useThemeProps$1({
        props,
        name,
        defaultTheme: defaultTheme$1,
        themeId: THEME_ID
      });
    }
    const rootShouldForwardProp = (prop) => shouldForwardProp(prop) && prop !== "classes";
    const slotShouldForwardProp = shouldForwardProp;
    const styled = createStyled({
      themeId: THEME_ID,
      defaultTheme: defaultTheme$1,
      rootShouldForwardProp
    });
    const styled$1 = styled;
    const _excluded$1B = ["theme"];
    function ThemeProvider(_ref) {
      let {
        theme: themeInput
      } = _ref, props = _objectWithoutPropertiesLoose$1(_ref, _excluded$1B);
      const scopedTheme = themeInput[THEME_ID];
      return /* @__PURE__ */ jsx(ThemeProvider$1, _extends$1({}, props, {
        themeId: scopedTheme ? THEME_ID : void 0,
        theme: scopedTheme || themeInput
      }));
    }
    ThemeProvider.propTypes = {
      children: propTypes.exports.node,
      theme: propTypes.exports.oneOfType([propTypes.exports.object, propTypes.exports.func]).isRequired
    };
    const getOverlayAlpha = (elevation) => {
      let alphaValue;
      if (elevation < 1) {
        alphaValue = 5.11916 * elevation ** 2;
      } else {
        alphaValue = 4.5 * Math.log(elevation + 1) + 2;
      }
      return (alphaValue / 100).toFixed(2);
    };
    const getOverlayAlpha$1 = getOverlayAlpha;
    function isHostComponent(element) {
      return typeof element === "string";
    }
    function appendOwnerState(elementType, otherProps, ownerState) {
      if (elementType === void 0 || isHostComponent(elementType)) {
        return otherProps;
      }
      return _extends$1({}, otherProps, {
        ownerState: _extends$1({}, otherProps.ownerState, ownerState)
      });
    }
    function areArraysEqual(array1, array2, itemComparer = (a, b) => a === b) {
      return array1.length === array2.length && array1.every((value2, index) => itemComparer(value2, array2[index]));
    }
    const defaultContextValue = {
      disableDefaultClasses: false
    };
    const ClassNameConfiguratorContext = /* @__PURE__ */ react.exports.createContext(defaultContextValue);
    function useClassNamesOverride(generateUtilityClass2) {
      const {
        disableDefaultClasses
      } = react.exports.useContext(ClassNameConfiguratorContext);
      return (slot) => {
        if (disableDefaultClasses) {
          return "";
        }
        return generateUtilityClass2(slot);
      };
    }
    function extractEventHandlers(object, excludeKeys = []) {
      if (object === void 0) {
        return {};
      }
      const result = {};
      Object.keys(object).filter((prop) => prop.match(/^on[A-Z]/) && typeof object[prop] === "function" && !excludeKeys.includes(prop)).forEach((prop) => {
        result[prop] = object[prop];
      });
      return result;
    }
    function resolveComponentProps(componentProps, ownerState) {
      if (typeof componentProps === "function") {
        return componentProps(ownerState);
      }
      return componentProps;
    }
    function omitEventHandlers(object) {
      if (object === void 0) {
        return {};
      }
      const result = {};
      Object.keys(object).filter((prop) => !(prop.match(/^on[A-Z]/) && typeof object[prop] === "function")).forEach((prop) => {
        result[prop] = object[prop];
      });
      return result;
    }
    function mergeSlotProps(parameters) {
      const {
        getSlotProps,
        additionalProps,
        externalSlotProps,
        externalForwardedProps,
        className
      } = parameters;
      if (!getSlotProps) {
        const joinedClasses2 = clsx(externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className, className, additionalProps == null ? void 0 : additionalProps.className);
        const mergedStyle2 = _extends$1({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
        const props2 = _extends$1({}, additionalProps, externalForwardedProps, externalSlotProps);
        if (joinedClasses2.length > 0) {
          props2.className = joinedClasses2;
        }
        if (Object.keys(mergedStyle2).length > 0) {
          props2.style = mergedStyle2;
        }
        return {
          props: props2,
          internalRef: void 0
        };
      }
      const eventHandlers = extractEventHandlers(_extends$1({}, externalForwardedProps, externalSlotProps));
      const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);
      const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);
      const internalSlotProps = getSlotProps(eventHandlers);
      const joinedClasses = clsx(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
      const mergedStyle = _extends$1({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
      const props = _extends$1({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);
      if (joinedClasses.length > 0) {
        props.className = joinedClasses;
      }
      if (Object.keys(mergedStyle).length > 0) {
        props.style = mergedStyle;
      }
      return {
        props,
        internalRef: internalSlotProps.ref
      };
    }
    const _excluded$1A = ["elementType", "externalSlotProps", "ownerState"];
    function useSlotProps(parameters) {
      var _parameters$additiona;
      const {
        elementType,
        externalSlotProps,
        ownerState
      } = parameters, rest = _objectWithoutPropertiesLoose$1(parameters, _excluded$1A);
      const resolvedComponentsProps = resolveComponentProps(externalSlotProps, ownerState);
      const {
        props: mergedProps,
        internalRef
      } = mergeSlotProps(_extends$1({}, rest, {
        externalSlotProps: resolvedComponentsProps
      }));
      const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
      const props = appendOwnerState(elementType, _extends$1({}, mergedProps, {
        ref
      }), ownerState);
      return props;
    }
    const candidatesSelector = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
    function getTabIndex(node2) {
      const tabindexAttr = parseInt(node2.getAttribute("tabindex") || "", 10);
      if (!Number.isNaN(tabindexAttr)) {
        return tabindexAttr;
      }
      if (node2.contentEditable === "true" || (node2.nodeName === "AUDIO" || node2.nodeName === "VIDEO" || node2.nodeName === "DETAILS") && node2.getAttribute("tabindex") === null) {
        return 0;
      }
      return node2.tabIndex;
    }
    function isNonTabbableRadio(node2) {
      if (node2.tagName !== "INPUT" || node2.type !== "radio") {
        return false;
      }
      if (!node2.name) {
        return false;
      }
      const getRadio = (selector) => node2.ownerDocument.querySelector(`input[type="radio"]${selector}`);
      let roving = getRadio(`[name="${node2.name}"]:checked`);
      if (!roving) {
        roving = getRadio(`[name="${node2.name}"]`);
      }
      return roving !== node2;
    }
    function isNodeMatchingSelectorFocusable(node2) {
      if (node2.disabled || node2.tagName === "INPUT" && node2.type === "hidden" || isNonTabbableRadio(node2)) {
        return false;
      }
      return true;
    }
    function defaultGetTabbable(root2) {
      const regularTabNodes = [];
      const orderedTabNodes = [];
      Array.from(root2.querySelectorAll(candidatesSelector)).forEach((node2, i) => {
        const nodeTabIndex = getTabIndex(node2);
        if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node2)) {
          return;
        }
        if (nodeTabIndex === 0) {
          regularTabNodes.push(node2);
        } else {
          orderedTabNodes.push({
            documentOrder: i,
            tabIndex: nodeTabIndex,
            node: node2
          });
        }
      });
      return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map((a) => a.node).concat(regularTabNodes);
    }
    function defaultIsEnabled() {
      return true;
    }
    function FocusTrap(props) {
      const {
        children,
        disableAutoFocus = false,
        disableEnforceFocus = false,
        disableRestoreFocus = false,
        getTabbable = defaultGetTabbable,
        isEnabled = defaultIsEnabled,
        open
      } = props;
      const ignoreNextEnforceFocus = react.exports.useRef(false);
      const sentinelStart = react.exports.useRef(null);
      const sentinelEnd = react.exports.useRef(null);
      const nodeToRestore = react.exports.useRef(null);
      const reactFocusEventTarget = react.exports.useRef(null);
      const activated = react.exports.useRef(false);
      const rootRef = react.exports.useRef(null);
      const handleRef = useForkRef(children.ref, rootRef);
      const lastKeydown = react.exports.useRef(null);
      react.exports.useEffect(() => {
        if (!open || !rootRef.current) {
          return;
        }
        activated.current = !disableAutoFocus;
      }, [disableAutoFocus, open]);
      react.exports.useEffect(() => {
        if (!open || !rootRef.current) {
          return;
        }
        const doc = ownerDocument(rootRef.current);
        if (!rootRef.current.contains(doc.activeElement)) {
          if (!rootRef.current.hasAttribute("tabIndex")) {
            {
              console.error(["MUI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join("\n"));
            }
            rootRef.current.setAttribute("tabIndex", "-1");
          }
          if (activated.current) {
            rootRef.current.focus();
          }
        }
        return () => {
          if (!disableRestoreFocus) {
            if (nodeToRestore.current && nodeToRestore.current.focus) {
              ignoreNextEnforceFocus.current = true;
              nodeToRestore.current.focus();
            }
            nodeToRestore.current = null;
          }
        };
      }, [open]);
      react.exports.useEffect(() => {
        if (!open || !rootRef.current) {
          return;
        }
        const doc = ownerDocument(rootRef.current);
        const contain = (nativeEvent) => {
          const {
            current: rootElement2
          } = rootRef;
          if (rootElement2 === null) {
            return;
          }
          if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
            ignoreNextEnforceFocus.current = false;
            return;
          }
          if (!rootElement2.contains(doc.activeElement)) {
            if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) {
              reactFocusEventTarget.current = null;
            } else if (reactFocusEventTarget.current !== null) {
              return;
            }
            if (!activated.current) {
              return;
            }
            let tabbable = [];
            if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
              tabbable = getTabbable(rootRef.current);
            }
            if (tabbable.length > 0) {
              var _lastKeydown$current, _lastKeydown$current2;
              const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === "Tab");
              const focusNext = tabbable[0];
              const focusPrevious = tabbable[tabbable.length - 1];
              if (typeof focusNext !== "string" && typeof focusPrevious !== "string") {
                if (isShiftTab) {
                  focusPrevious.focus();
                } else {
                  focusNext.focus();
                }
              }
            } else {
              rootElement2.focus();
            }
          }
        };
        const loopFocus = (nativeEvent) => {
          lastKeydown.current = nativeEvent;
          if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== "Tab") {
            return;
          }
          if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
            ignoreNextEnforceFocus.current = true;
            if (sentinelEnd.current) {
              sentinelEnd.current.focus();
            }
          }
        };
        doc.addEventListener("focusin", contain);
        doc.addEventListener("keydown", loopFocus, true);
        const interval = setInterval(() => {
          if (doc.activeElement && doc.activeElement.tagName === "BODY") {
            contain(null);
          }
        }, 50);
        return () => {
          clearInterval(interval);
          doc.removeEventListener("focusin", contain);
          doc.removeEventListener("keydown", loopFocus, true);
        };
      }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
      const onFocus = (event) => {
        if (nodeToRestore.current === null) {
          nodeToRestore.current = event.relatedTarget;
        }
        activated.current = true;
        reactFocusEventTarget.current = event.target;
        const childrenPropsHandler = children.props.onFocus;
        if (childrenPropsHandler) {
          childrenPropsHandler(event);
        }
      };
      const handleFocusSentinel = (event) => {
        if (nodeToRestore.current === null) {
          nodeToRestore.current = event.relatedTarget;
        }
        activated.current = true;
      };
      return /* @__PURE__ */ jsxs(react.exports.Fragment, {
        children: [/* @__PURE__ */ jsx("div", {
          tabIndex: open ? 0 : -1,
          onFocus: handleFocusSentinel,
          ref: sentinelStart,
          "data-testid": "sentinelStart"
        }), /* @__PURE__ */ react.exports.cloneElement(children, {
          ref: handleRef,
          onFocus
        }), /* @__PURE__ */ jsx("div", {
          tabIndex: open ? 0 : -1,
          onFocus: handleFocusSentinel,
          ref: sentinelEnd,
          "data-testid": "sentinelEnd"
        })]
      });
    }
    FocusTrap.propTypes = {
      children: elementAcceptingRef$1,
      disableAutoFocus: propTypes.exports.bool,
      disableEnforceFocus: propTypes.exports.bool,
      disableRestoreFocus: propTypes.exports.bool,
      getTabbable: propTypes.exports.func,
      isEnabled: propTypes.exports.func,
      open: propTypes.exports.bool.isRequired
    };
    {
      FocusTrap["propTypes"] = exactProp(FocusTrap.propTypes);
    }
    var top = "top";
    var bottom = "bottom";
    var right = "right";
    var left = "left";
    var auto = "auto";
    var basePlacements = [top, bottom, right, left];
    var start = "start";
    var end = "end";
    var clippingParents = "clippingParents";
    var viewport = "viewport";
    var popper = "popper";
    var reference = "reference";
    var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
      return acc.concat([placement + "-" + start, placement + "-" + end]);
    }, []);
    var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
      return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
    }, []);
    var beforeRead = "beforeRead";
    var read = "read";
    var afterRead = "afterRead";
    var beforeMain = "beforeMain";
    var main = "main";
    var afterMain = "afterMain";
    var beforeWrite = "beforeWrite";
    var write = "write";
    var afterWrite = "afterWrite";
    var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
    function getNodeName(element) {
      return element ? (element.nodeName || "").toLowerCase() : null;
    }
    function getWindow(node2) {
      if (node2 == null) {
        return window;
      }
      if (node2.toString() !== "[object Window]") {
        var ownerDocument2 = node2.ownerDocument;
        return ownerDocument2 ? ownerDocument2.defaultView || window : window;
      }
      return node2;
    }
    function isElement(node2) {
      var OwnElement = getWindow(node2).Element;
      return node2 instanceof OwnElement || node2 instanceof Element;
    }
    function isHTMLElement$1(node2) {
      var OwnElement = getWindow(node2).HTMLElement;
      return node2 instanceof OwnElement || node2 instanceof HTMLElement;
    }
    function isShadowRoot(node2) {
      if (typeof ShadowRoot === "undefined") {
        return false;
      }
      var OwnElement = getWindow(node2).ShadowRoot;
      return node2 instanceof OwnElement || node2 instanceof ShadowRoot;
    }
    function applyStyles(_ref) {
      var state = _ref.state;
      Object.keys(state.elements).forEach(function(name) {
        var style2 = state.styles[name] || {};
        var attributes = state.attributes[name] || {};
        var element = state.elements[name];
        if (!isHTMLElement$1(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style2);
        Object.keys(attributes).forEach(function(name2) {
          var value2 = attributes[name2];
          if (value2 === false) {
            element.removeAttribute(name2);
          } else {
            element.setAttribute(name2, value2 === true ? "" : value2);
          }
        });
      });
    }
    function effect$2(_ref2) {
      var state = _ref2.state;
      var initialStyles = {
        popper: {
          position: state.options.strategy,
          left: "0",
          top: "0",
          margin: "0"
        },
        arrow: {
          position: "absolute"
        },
        reference: {}
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);
      state.styles = initialStyles;
      if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
      }
      return function() {
        Object.keys(state.elements).forEach(function(name) {
          var element = state.elements[name];
          var attributes = state.attributes[name] || {};
          var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
          var style2 = styleProperties.reduce(function(style3, property2) {
            style3[property2] = "";
            return style3;
          }, {});
          if (!isHTMLElement$1(element) || !getNodeName(element)) {
            return;
          }
          Object.assign(element.style, style2);
          Object.keys(attributes).forEach(function(attribute) {
            element.removeAttribute(attribute);
          });
        });
      };
    }
    const applyStyles$1 = {
      name: "applyStyles",
      enabled: true,
      phase: "write",
      fn: applyStyles,
      effect: effect$2,
      requires: ["computeStyles"]
    };
    function getBasePlacement(placement) {
      return placement.split("-")[0];
    }
    var max$1 = Math.max;
    var min$1 = Math.min;
    var round$1 = Math.round;
    function getUAString() {
      var uaData = navigator.userAgentData;
      if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
        return uaData.brands.map(function(item) {
          return item.brand + "/" + item.version;
        }).join(" ");
      }
      return navigator.userAgent;
    }
    function isLayoutViewport() {
      return !/^((?!chrome|android).)*safari/i.test(getUAString());
    }
    function getBoundingClientRect(element, includeScale, isFixedStrategy) {
      if (includeScale === void 0) {
        includeScale = false;
      }
      if (isFixedStrategy === void 0) {
        isFixedStrategy = false;
      }
      var clientRect = element.getBoundingClientRect();
      var scaleX = 1;
      var scaleY = 1;
      if (includeScale && isHTMLElement$1(element)) {
        scaleX = element.offsetWidth > 0 ? round$1(clientRect.width) / element.offsetWidth || 1 : 1;
        scaleY = element.offsetHeight > 0 ? round$1(clientRect.height) / element.offsetHeight || 1 : 1;
      }
      var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
      var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
      var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
      var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
      var width2 = clientRect.width / scaleX;
      var height2 = clientRect.height / scaleY;
      return {
        width: width2,
        height: height2,
        top: y,
        right: x + width2,
        bottom: y + height2,
        left: x,
        x,
        y
      };
    }
    function getLayoutRect(element) {
      var clientRect = getBoundingClientRect(element);
      var width2 = element.offsetWidth;
      var height2 = element.offsetHeight;
      if (Math.abs(clientRect.width - width2) <= 1) {
        width2 = clientRect.width;
      }
      if (Math.abs(clientRect.height - height2) <= 1) {
        height2 = clientRect.height;
      }
      return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: width2,
        height: height2
      };
    }
    function contains(parent2, child) {
      var rootNode = child.getRootNode && child.getRootNode();
      if (parent2.contains(child)) {
        return true;
      } else if (rootNode && isShadowRoot(rootNode)) {
        var next2 = child;
        do {
          if (next2 && parent2.isSameNode(next2)) {
            return true;
          }
          next2 = next2.parentNode || next2.host;
        } while (next2);
      }
      return false;
    }
    function getComputedStyle(element) {
      return getWindow(element).getComputedStyle(element);
    }
    function isTableElement(element) {
      return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
    }
    function getDocumentElement(element) {
      return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;
    }
    function getParentNode(element) {
      if (getNodeName(element) === "html") {
        return element;
      }
      return element.assignedSlot || element.parentNode || (isShadowRoot(element) ? element.host : null) || getDocumentElement(element);
    }
    function getTrueOffsetParent(element) {
      if (!isHTMLElement$1(element) || getComputedStyle(element).position === "fixed") {
        return null;
      }
      return element.offsetParent;
    }
    function getContainingBlock(element) {
      var isFirefox = /firefox/i.test(getUAString());
      var isIE = /Trident/i.test(getUAString());
      if (isIE && isHTMLElement$1(element)) {
        var elementCss = getComputedStyle(element);
        if (elementCss.position === "fixed") {
          return null;
        }
      }
      var currentNode = getParentNode(element);
      if (isShadowRoot(currentNode)) {
        currentNode = currentNode.host;
      }
      while (isHTMLElement$1(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
        var css2 = getComputedStyle(currentNode);
        if (css2.transform !== "none" || css2.perspective !== "none" || css2.contain === "paint" || ["transform", "perspective"].indexOf(css2.willChange) !== -1 || isFirefox && css2.willChange === "filter" || isFirefox && css2.filter && css2.filter !== "none") {
          return currentNode;
        } else {
          currentNode = currentNode.parentNode;
        }
      }
      return null;
    }
    function getOffsetParent(element) {
      var window2 = getWindow(element);
      var offsetParent = getTrueOffsetParent(element);
      while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
        offsetParent = getTrueOffsetParent(offsetParent);
      }
      if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
        return window2;
      }
      return offsetParent || getContainingBlock(element) || window2;
    }
    function getMainAxisFromPlacement(placement) {
      return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
    }
    function within(min2, value2, max2) {
      return max$1(min2, min$1(value2, max2));
    }
    function withinMaxClamp(min2, value2, max2) {
      var v = within(min2, value2, max2);
      return v > max2 ? max2 : v;
    }
    function getFreshSideObject() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }
    function mergePaddingObject(paddingObject) {
      return Object.assign({}, getFreshSideObject(), paddingObject);
    }
    function expandToHashMap(value2, keys2) {
      return keys2.reduce(function(hashMap, key) {
        hashMap[key] = value2;
        return hashMap;
      }, {});
    }
    var toPaddingObject = function toPaddingObject2(padding2, state) {
      padding2 = typeof padding2 === "function" ? padding2(Object.assign({}, state.rects, {
        placement: state.placement
      })) : padding2;
      return mergePaddingObject(typeof padding2 !== "number" ? padding2 : expandToHashMap(padding2, basePlacements));
    };
    function arrow(_ref) {
      var _state$modifiersData$;
      var state = _ref.state, name = _ref.name, options = _ref.options;
      var arrowElement = state.elements.arrow;
      var popperOffsets2 = state.modifiersData.popperOffsets;
      var basePlacement = getBasePlacement(state.placement);
      var axis = getMainAxisFromPlacement(basePlacement);
      var isVertical = [left, right].indexOf(basePlacement) >= 0;
      var len = isVertical ? "height" : "width";
      if (!arrowElement || !popperOffsets2) {
        return;
      }
      var paddingObject = toPaddingObject(options.padding, state);
      var arrowRect = getLayoutRect(arrowElement);
      var minProp = axis === "y" ? top : left;
      var maxProp = axis === "y" ? bottom : right;
      var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
      var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
      var arrowOffsetParent = getOffsetParent(arrowElement);
      var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
      var centerToReference = endDiff / 2 - startDiff / 2;
      var min2 = paddingObject[minProp];
      var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
      var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
      var offset2 = within(min2, center, max2);
      var axisProp = axis;
      state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
    }
    function effect$1(_ref2) {
      var state = _ref2.state, options = _ref2.options;
      var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
      if (arrowElement == null) {
        return;
      }
      if (typeof arrowElement === "string") {
        arrowElement = state.elements.popper.querySelector(arrowElement);
        if (!arrowElement) {
          return;
        }
      }
      {
        if (!isHTMLElement$1(arrowElement)) {
          console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
        }
      }
      if (!contains(state.elements.popper, arrowElement)) {
        {
          console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
        }
        return;
      }
      state.elements.arrow = arrowElement;
    }
    const arrow$1 = {
      name: "arrow",
      enabled: true,
      phase: "main",
      fn: arrow,
      effect: effect$1,
      requires: ["popperOffsets"],
      requiresIfExists: ["preventOverflow"]
    };
    function getVariation(placement) {
      return placement.split("-")[1];
    }
    var unsetSides = {
      top: "auto",
      right: "auto",
      bottom: "auto",
      left: "auto"
    };
    function roundOffsetsByDPR(_ref, win) {
      var x = _ref.x, y = _ref.y;
      var dpr = win.devicePixelRatio || 1;
      return {
        x: round$1(x * dpr) / dpr || 0,
        y: round$1(y * dpr) / dpr || 0
      };
    }
    function mapToStyles(_ref2) {
      var _Object$assign2;
      var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position2 = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
      var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
      var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
        x,
        y
      }) : {
        x,
        y
      };
      x = _ref3.x;
      y = _ref3.y;
      var hasX = offsets.hasOwnProperty("x");
      var hasY = offsets.hasOwnProperty("y");
      var sideX = left;
      var sideY = top;
      var win = window;
      if (adaptive) {
        var offsetParent = getOffsetParent(popper2);
        var heightProp = "clientHeight";
        var widthProp = "clientWidth";
        if (offsetParent === getWindow(popper2)) {
          offsetParent = getDocumentElement(popper2);
          if (getComputedStyle(offsetParent).position !== "static" && position2 === "absolute") {
            heightProp = "scrollHeight";
            widthProp = "scrollWidth";
          }
        }
        offsetParent = offsetParent;
        if (placement === top || (placement === left || placement === right) && variation === end) {
          sideY = bottom;
          var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
          y -= offsetY - popperRect.height;
          y *= gpuAcceleration ? 1 : -1;
        }
        if (placement === left || (placement === top || placement === bottom) && variation === end) {
          sideX = right;
          var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
          x -= offsetX - popperRect.width;
          x *= gpuAcceleration ? 1 : -1;
        }
      }
      var commonStyles = Object.assign({
        position: position2
      }, adaptive && unsetSides);
      var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
        x,
        y
      }, getWindow(popper2)) : {
        x,
        y
      };
      x = _ref4.x;
      y = _ref4.y;
      if (gpuAcceleration) {
        var _Object$assign;
        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
      }
      return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
    }
    function computeStyles(_ref5) {
      var state = _ref5.state, options = _ref5.options;
      var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
      {
        var transitionProperty = getComputedStyle(state.elements.popper).transitionProperty || "";
        if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property2) {
          return transitionProperty.indexOf(property2) >= 0;
        })) {
          console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
        }
      }
      var commonStyles = {
        placement: getBasePlacement(state.placement),
        variation: getVariation(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration,
        isFixed: state.options.strategy === "fixed"
      };
      if (state.modifiersData.popperOffsets != null) {
        state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.popperOffsets,
          position: state.options.strategy,
          adaptive,
          roundOffsets
        })));
      }
      if (state.modifiersData.arrow != null) {
        state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.arrow,
          position: "absolute",
          adaptive: false,
          roundOffsets
        })));
      }
      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        "data-popper-placement": state.placement
      });
    }
    const computeStyles$1 = {
      name: "computeStyles",
      enabled: true,
      phase: "beforeWrite",
      fn: computeStyles,
      data: {}
    };
    var passive = {
      passive: true
    };
    function effect(_ref) {
      var state = _ref.state, instance = _ref.instance, options = _ref.options;
      var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
      var window2 = getWindow(state.elements.popper);
      var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
      if (scroll) {
        scrollParents.forEach(function(scrollParent) {
          scrollParent.addEventListener("scroll", instance.update, passive);
        });
      }
      if (resize) {
        window2.addEventListener("resize", instance.update, passive);
      }
      return function() {
        if (scroll) {
          scrollParents.forEach(function(scrollParent) {
            scrollParent.removeEventListener("scroll", instance.update, passive);
          });
        }
        if (resize) {
          window2.removeEventListener("resize", instance.update, passive);
        }
      };
    }
    const eventListeners = {
      name: "eventListeners",
      enabled: true,
      phase: "write",
      fn: function fn() {
      },
      effect,
      data: {}
    };
    var hash$1 = {
      left: "right",
      right: "left",
      bottom: "top",
      top: "bottom"
    };
    function getOppositePlacement(placement) {
      return placement.replace(/left|right|bottom|top/g, function(matched) {
        return hash$1[matched];
      });
    }
    var hash = {
      start: "end",
      end: "start"
    };
    function getOppositeVariationPlacement(placement) {
      return placement.replace(/start|end/g, function(matched) {
        return hash[matched];
      });
    }
    function getWindowScroll(node2) {
      var win = getWindow(node2);
      var scrollLeft = win.pageXOffset;
      var scrollTop = win.pageYOffset;
      return {
        scrollLeft,
        scrollTop
      };
    }
    function getWindowScrollBarX(element) {
      return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
    }
    function getViewportRect(element, strategy) {
      var win = getWindow(element);
      var html = getDocumentElement(element);
      var visualViewport = win.visualViewport;
      var width2 = html.clientWidth;
      var height2 = html.clientHeight;
      var x = 0;
      var y = 0;
      if (visualViewport) {
        width2 = visualViewport.width;
        height2 = visualViewport.height;
        var layoutViewport = isLayoutViewport();
        if (layoutViewport || !layoutViewport && strategy === "fixed") {
          x = visualViewport.offsetLeft;
          y = visualViewport.offsetTop;
        }
      }
      return {
        width: width2,
        height: height2,
        x: x + getWindowScrollBarX(element),
        y
      };
    }
    function getDocumentRect(element) {
      var _element$ownerDocumen;
      var html = getDocumentElement(element);
      var winScroll = getWindowScroll(element);
      var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
      var width2 = max$1(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
      var height2 = max$1(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
      var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
      var y = -winScroll.scrollTop;
      if (getComputedStyle(body || html).direction === "rtl") {
        x += max$1(html.clientWidth, body ? body.clientWidth : 0) - width2;
      }
      return {
        width: width2,
        height: height2,
        x,
        y
      };
    }
    function isScrollParent(element) {
      var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
      return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
    }
    function getScrollParent(node2) {
      if (["html", "body", "#document"].indexOf(getNodeName(node2)) >= 0) {
        return node2.ownerDocument.body;
      }
      if (isHTMLElement$1(node2) && isScrollParent(node2)) {
        return node2;
      }
      return getScrollParent(getParentNode(node2));
    }
    function listScrollParents(element, list) {
      var _element$ownerDocumen;
      if (list === void 0) {
        list = [];
      }
      var scrollParent = getScrollParent(element);
      var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
      var win = getWindow(scrollParent);
      var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
      var updatedList = list.concat(target);
      return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
    }
    function rectToClientRect(rect) {
      return Object.assign({}, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
      });
    }
    function getInnerBoundingClientRect(element, strategy) {
      var rect = getBoundingClientRect(element, false, strategy === "fixed");
      rect.top = rect.top + element.clientTop;
      rect.left = rect.left + element.clientLeft;
      rect.bottom = rect.top + element.clientHeight;
      rect.right = rect.left + element.clientWidth;
      rect.width = element.clientWidth;
      rect.height = element.clientHeight;
      rect.x = rect.left;
      rect.y = rect.top;
      return rect;
    }
    function getClientRectFromMixedType(element, clippingParent, strategy) {
      return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
    }
    function getClippingParents(element) {
      var clippingParents2 = listScrollParents(getParentNode(element));
      var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
      var clipperElement = canEscapeClipping && isHTMLElement$1(element) ? getOffsetParent(element) : element;
      if (!isElement(clipperElement)) {
        return [];
      }
      return clippingParents2.filter(function(clippingParent) {
        return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
      });
    }
    function getClippingRect(element, boundary, rootBoundary, strategy) {
      var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
      var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
      var firstClippingParent = clippingParents2[0];
      var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent, strategy);
        accRect.top = max$1(rect.top, accRect.top);
        accRect.right = min$1(rect.right, accRect.right);
        accRect.bottom = min$1(rect.bottom, accRect.bottom);
        accRect.left = max$1(rect.left, accRect.left);
        return accRect;
      }, getClientRectFromMixedType(element, firstClippingParent, strategy));
      clippingRect.width = clippingRect.right - clippingRect.left;
      clippingRect.height = clippingRect.bottom - clippingRect.top;
      clippingRect.x = clippingRect.left;
      clippingRect.y = clippingRect.top;
      return clippingRect;
    }
    function computeOffsets(_ref) {
      var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
      var basePlacement = placement ? getBasePlacement(placement) : null;
      var variation = placement ? getVariation(placement) : null;
      var commonX = reference2.x + reference2.width / 2 - element.width / 2;
      var commonY = reference2.y + reference2.height / 2 - element.height / 2;
      var offsets;
      switch (basePlacement) {
        case top:
          offsets = {
            x: commonX,
            y: reference2.y - element.height
          };
          break;
        case bottom:
          offsets = {
            x: commonX,
            y: reference2.y + reference2.height
          };
          break;
        case right:
          offsets = {
            x: reference2.x + reference2.width,
            y: commonY
          };
          break;
        case left:
          offsets = {
            x: reference2.x - element.width,
            y: commonY
          };
          break;
        default:
          offsets = {
            x: reference2.x,
            y: reference2.y
          };
      }
      var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
      if (mainAxis != null) {
        var len = mainAxis === "y" ? "height" : "width";
        switch (variation) {
          case start:
            offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
            break;
          case end:
            offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
            break;
        }
      }
      return offsets;
    }
    function detectOverflow(state, options) {
      if (options === void 0) {
        options = {};
      }
      var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding2 = _options$padding === void 0 ? 0 : _options$padding;
      var paddingObject = mergePaddingObject(typeof padding2 !== "number" ? padding2 : expandToHashMap(padding2, basePlacements));
      var altContext = elementContext === popper ? reference : popper;
      var popperRect = state.rects.popper;
      var element = state.elements[altBoundary ? altContext : elementContext];
      var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
      var referenceClientRect = getBoundingClientRect(state.elements.reference);
      var popperOffsets2 = computeOffsets({
        reference: referenceClientRect,
        element: popperRect,
        strategy: "absolute",
        placement
      });
      var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
      var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
      var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
      };
      var offsetData = state.modifiersData.offset;
      if (elementContext === popper && offsetData) {
        var offset2 = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function(key) {
          var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
          var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
          overflowOffsets[key] += offset2[axis] * multiply;
        });
      }
      return overflowOffsets;
    }
    function computeAutoPlacement(state, options) {
      if (options === void 0) {
        options = {};
      }
      var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding2 = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
      var variation = getVariation(placement);
      var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
        return getVariation(placement2) === variation;
      }) : basePlacements;
      var allowedPlacements = placements$1.filter(function(placement2) {
        return allowedAutoPlacements.indexOf(placement2) >= 0;
      });
      if (allowedPlacements.length === 0) {
        allowedPlacements = placements$1;
        {
          console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
        }
      }
      var overflows = allowedPlacements.reduce(function(acc, placement2) {
        acc[placement2] = detectOverflow(state, {
          placement: placement2,
          boundary,
          rootBoundary,
          padding: padding2
        })[getBasePlacement(placement2)];
        return acc;
      }, {});
      return Object.keys(overflows).sort(function(a, b) {
        return overflows[a] - overflows[b];
      });
    }
    function getExpandedFallbackPlacements(placement) {
      if (getBasePlacement(placement) === auto) {
        return [];
      }
      var oppositePlacement = getOppositePlacement(placement);
      return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
    }
    function flip(_ref) {
      var state = _ref.state, options = _ref.options, name = _ref.name;
      if (state.modifiersData[name]._skip) {
        return;
      }
      var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding2 = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
      var preferredPlacement = state.options.placement;
      var basePlacement = getBasePlacement(preferredPlacement);
      var isBasePlacement = basePlacement === preferredPlacement;
      var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
      var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
        return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
          placement: placement2,
          boundary,
          rootBoundary,
          padding: padding2,
          flipVariations,
          allowedAutoPlacements
        }) : placement2);
      }, []);
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var checksMap = /* @__PURE__ */ new Map();
      var makeFallbackChecks = true;
      var firstFittingPlacement = placements2[0];
      for (var i = 0; i < placements2.length; i++) {
        var placement = placements2[i];
        var _basePlacement = getBasePlacement(placement);
        var isStartVariation = getVariation(placement) === start;
        var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
        var len = isVertical ? "width" : "height";
        var overflow = detectOverflow(state, {
          placement,
          boundary,
          rootBoundary,
          altBoundary,
          padding: padding2
        });
        var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
        if (referenceRect[len] > popperRect[len]) {
          mainVariationSide = getOppositePlacement(mainVariationSide);
        }
        var altVariationSide = getOppositePlacement(mainVariationSide);
        var checks = [];
        if (checkMainAxis) {
          checks.push(overflow[_basePlacement] <= 0);
        }
        if (checkAltAxis) {
          checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        }
        if (checks.every(function(check) {
          return check;
        })) {
          firstFittingPlacement = placement;
          makeFallbackChecks = false;
          break;
        }
        checksMap.set(placement, checks);
      }
      if (makeFallbackChecks) {
        var numberOfChecks = flipVariations ? 3 : 1;
        var _loop = function _loop2(_i2) {
          var fittingPlacement = placements2.find(function(placement2) {
            var checks2 = checksMap.get(placement2);
            if (checks2) {
              return checks2.slice(0, _i2).every(function(check) {
                return check;
              });
            }
          });
          if (fittingPlacement) {
            firstFittingPlacement = fittingPlacement;
            return "break";
          }
        };
        for (var _i = numberOfChecks; _i > 0; _i--) {
          var _ret = _loop(_i);
          if (_ret === "break")
            break;
        }
      }
      if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
      }
    }
    const flip$1 = {
      name: "flip",
      enabled: true,
      phase: "main",
      fn: flip,
      requiresIfExists: ["offset"],
      data: {
        _skip: false
      }
    };
    function getSideOffsets(overflow, rect, preventedOffsets) {
      if (preventedOffsets === void 0) {
        preventedOffsets = {
          x: 0,
          y: 0
        };
      }
      return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
      };
    }
    function isAnySideFullyClipped(overflow) {
      return [top, right, bottom, left].some(function(side) {
        return overflow[side] >= 0;
      });
    }
    function hide(_ref) {
      var state = _ref.state, name = _ref.name;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var preventedOffsets = state.modifiersData.preventOverflow;
      var referenceOverflow = detectOverflow(state, {
        elementContext: "reference"
      });
      var popperAltOverflow = detectOverflow(state, {
        altBoundary: true
      });
      var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
      var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
      var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
      var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
      state.modifiersData[name] = {
        referenceClippingOffsets,
        popperEscapeOffsets,
        isReferenceHidden,
        hasPopperEscaped
      };
      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        "data-popper-reference-hidden": isReferenceHidden,
        "data-popper-escaped": hasPopperEscaped
      });
    }
    const hide$1 = {
      name: "hide",
      enabled: true,
      phase: "main",
      requiresIfExists: ["preventOverflow"],
      fn: hide
    };
    function distanceAndSkiddingToXY(placement, rects, offset2) {
      var basePlacement = getBasePlacement(placement);
      var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
      var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
        placement
      })) : offset2, skidding = _ref[0], distance = _ref[1];
      skidding = skidding || 0;
      distance = (distance || 0) * invertDistance;
      return [left, right].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
      } : {
        x: skidding,
        y: distance
      };
    }
    function offset$1(_ref2) {
      var state = _ref2.state, options = _ref2.options, name = _ref2.name;
      var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
      var data = placements.reduce(function(acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
        return acc;
      }, {});
      var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
      if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
      }
      state.modifiersData[name] = data;
    }
    const offset$2 = {
      name: "offset",
      enabled: true,
      phase: "main",
      requires: ["popperOffsets"],
      fn: offset$1
    };
    function popperOffsets(_ref) {
      var state = _ref.state, name = _ref.name;
      state.modifiersData[name] = computeOffsets({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: "absolute",
        placement: state.placement
      });
    }
    const popperOffsets$1 = {
      name: "popperOffsets",
      enabled: true,
      phase: "read",
      fn: popperOffsets,
      data: {}
    };
    function getAltAxis(axis) {
      return axis === "x" ? "y" : "x";
    }
    function preventOverflow(_ref) {
      var state = _ref.state, options = _ref.options, name = _ref.name;
      var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding2 = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
      var overflow = detectOverflow(state, {
        boundary,
        rootBoundary,
        padding: padding2,
        altBoundary
      });
      var basePlacement = getBasePlacement(state.placement);
      var variation = getVariation(state.placement);
      var isBasePlacement = !variation;
      var mainAxis = getMainAxisFromPlacement(basePlacement);
      var altAxis = getAltAxis(mainAxis);
      var popperOffsets2 = state.modifiersData.popperOffsets;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
        placement: state.placement
      })) : tetherOffset;
      var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
        mainAxis: tetherOffsetValue,
        altAxis: tetherOffsetValue
      } : Object.assign({
        mainAxis: 0,
        altAxis: 0
      }, tetherOffsetValue);
      var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
      var data = {
        x: 0,
        y: 0
      };
      if (!popperOffsets2) {
        return;
      }
      if (checkMainAxis) {
        var _offsetModifierState$;
        var mainSide = mainAxis === "y" ? top : left;
        var altSide = mainAxis === "y" ? bottom : right;
        var len = mainAxis === "y" ? "height" : "width";
        var offset2 = popperOffsets2[mainAxis];
        var min2 = offset2 + overflow[mainSide];
        var max2 = offset2 - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === start ? referenceRect[len] : popperRect[len];
        var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
          width: 0,
          height: 0
        };
        var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide];
        var arrowLen = within(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
        var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
        var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = offset2 + maxOffset - offsetModifierValue;
        var preventedOffset = within(tether ? min$1(min2, tetherMin) : min2, offset2, tether ? max$1(max2, tetherMax) : max2);
        popperOffsets2[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset2;
      }
      if (checkAltAxis) {
        var _offsetModifierState$2;
        var _mainSide = mainAxis === "x" ? top : left;
        var _altSide = mainAxis === "x" ? bottom : right;
        var _offset = popperOffsets2[altAxis];
        var _len = altAxis === "y" ? "height" : "width";
        var _min = _offset + overflow[_mainSide];
        var _max = _offset - overflow[_altSide];
        var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
        var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
        popperOffsets2[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
      }
      state.modifiersData[name] = data;
    }
    const preventOverflow$1 = {
      name: "preventOverflow",
      enabled: true,
      phase: "main",
      fn: preventOverflow,
      requiresIfExists: ["offset"]
    };
    function getHTMLElementScroll(element) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }
    function getNodeScroll(node2) {
      if (node2 === getWindow(node2) || !isHTMLElement$1(node2)) {
        return getWindowScroll(node2);
      } else {
        return getHTMLElementScroll(node2);
      }
    }
    function isElementScaled(element) {
      var rect = element.getBoundingClientRect();
      var scaleX = round$1(rect.width) / element.offsetWidth || 1;
      var scaleY = round$1(rect.height) / element.offsetHeight || 1;
      return scaleX !== 1 || scaleY !== 1;
    }
    function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
      if (isFixed === void 0) {
        isFixed = false;
      }
      var isOffsetParentAnElement = isHTMLElement$1(offsetParent);
      var offsetParentIsScaled = isHTMLElement$1(offsetParent) && isElementScaled(offsetParent);
      var documentElement = getDocumentElement(offsetParent);
      var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
      var scroll = {
        scrollLeft: 0,
        scrollTop: 0
      };
      var offsets = {
        x: 0,
        y: 0
      };
      if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
          scroll = getNodeScroll(offsetParent);
        }
        if (isHTMLElement$1(offsetParent)) {
          offsets = getBoundingClientRect(offsetParent, true);
          offsets.x += offsetParent.clientLeft;
          offsets.y += offsetParent.clientTop;
        } else if (documentElement) {
          offsets.x = getWindowScrollBarX(documentElement);
        }
      }
      return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
      };
    }
    function order(modifiers) {
      var map2 = /* @__PURE__ */ new Map();
      var visited = /* @__PURE__ */ new Set();
      var result = [];
      modifiers.forEach(function(modifier) {
        map2.set(modifier.name, modifier);
      });
      function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function(dep) {
          if (!visited.has(dep)) {
            var depModifier = map2.get(dep);
            if (depModifier) {
              sort(depModifier);
            }
          }
        });
        result.push(modifier);
      }
      modifiers.forEach(function(modifier) {
        if (!visited.has(modifier.name)) {
          sort(modifier);
        }
      });
      return result;
    }
    function orderModifiers(modifiers) {
      var orderedModifiers = order(modifiers);
      return modifierPhases.reduce(function(acc, phase) {
        return acc.concat(orderedModifiers.filter(function(modifier) {
          return modifier.phase === phase;
        }));
      }, []);
    }
    function debounce$2(fn) {
      var pending;
      return function() {
        if (!pending) {
          pending = new Promise(function(resolve) {
            Promise.resolve().then(function() {
              pending = void 0;
              resolve(fn());
            });
          });
        }
        return pending;
      };
    }
    function format$1(str) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return [].concat(args).reduce(function(p, c) {
        return p.replace(/%s/, c);
      }, str);
    }
    var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
    var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
    var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
    function validateModifiers(modifiers) {
      modifiers.forEach(function(modifier) {
        [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value2, index, self2) {
          return self2.indexOf(value2) === index;
        }).forEach(function(key) {
          switch (key) {
            case "name":
              if (typeof modifier.name !== "string") {
                console.error(format$1(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
              }
              break;
            case "enabled":
              if (typeof modifier.enabled !== "boolean") {
                console.error(format$1(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
              }
              break;
            case "phase":
              if (modifierPhases.indexOf(modifier.phase) < 0) {
                console.error(format$1(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
              }
              break;
            case "fn":
              if (typeof modifier.fn !== "function") {
                console.error(format$1(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
              }
              break;
            case "effect":
              if (modifier.effect != null && typeof modifier.effect !== "function") {
                console.error(format$1(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
              }
              break;
            case "requires":
              if (modifier.requires != null && !Array.isArray(modifier.requires)) {
                console.error(format$1(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
              }
              break;
            case "requiresIfExists":
              if (!Array.isArray(modifier.requiresIfExists)) {
                console.error(format$1(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
              }
              break;
            case "options":
            case "data":
              break;
            default:
              console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {
                return '"' + s + '"';
              }).join(", ") + '; but "' + key + '" was provided.');
          }
          modifier.requires && modifier.requires.forEach(function(requirement) {
            if (modifiers.find(function(mod2) {
              return mod2.name === requirement;
            }) == null) {
              console.error(format$1(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
            }
          });
        });
      });
    }
    function uniqueBy(arr, fn) {
      var identifiers = /* @__PURE__ */ new Set();
      return arr.filter(function(item) {
        var identifier2 = fn(item);
        if (!identifiers.has(identifier2)) {
          identifiers.add(identifier2);
          return true;
        }
      });
    }
    function mergeByName(modifiers) {
      var merged = modifiers.reduce(function(merged2, current) {
        var existing = merged2[current.name];
        merged2[current.name] = existing ? Object.assign({}, existing, current, {
          options: Object.assign({}, existing.options, current.options),
          data: Object.assign({}, existing.data, current.data)
        }) : current;
        return merged2;
      }, {});
      return Object.keys(merged).map(function(key) {
        return merged[key];
      });
    }
    var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
    var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
    var DEFAULT_OPTIONS$1 = {
      placement: "bottom",
      modifiers: [],
      strategy: "absolute"
    };
    function areValidElements() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return !args.some(function(element) {
        return !(element && typeof element.getBoundingClientRect === "function");
      });
    }
    function popperGenerator(generatorOptions) {
      if (generatorOptions === void 0) {
        generatorOptions = {};
      }
      var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS$1 : _generatorOptions$def2;
      return function createPopper2(reference2, popper2, options) {
        if (options === void 0) {
          options = defaultOptions;
        }
        var state = {
          placement: "bottom",
          orderedModifiers: [],
          options: Object.assign({}, DEFAULT_OPTIONS$1, defaultOptions),
          modifiersData: {},
          elements: {
            reference: reference2,
            popper: popper2
          },
          attributes: {},
          styles: {}
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
          state,
          setOptions: function setOptions(setOptionsAction) {
            var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
            cleanupModifierEffects();
            state.options = Object.assign({}, defaultOptions, state.options, options2);
            state.scrollParents = {
              reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
              popper: listScrollParents(popper2)
            };
            var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
            state.orderedModifiers = orderedModifiers.filter(function(m) {
              return m.enabled;
            });
            {
              var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
                var name = _ref.name;
                return name;
              });
              validateModifiers(modifiers);
              if (getBasePlacement(state.options.placement) === auto) {
                var flipModifier = state.orderedModifiers.find(function(_ref2) {
                  var name = _ref2.name;
                  return name === "flip";
                });
                if (!flipModifier) {
                  console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
                }
              }
              var _getComputedStyle = getComputedStyle(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
              if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin2) {
                return parseFloat(margin2);
              })) {
                console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
              }
            }
            runModifierEffects();
            return instance.update();
          },
          forceUpdate: function forceUpdate() {
            if (isDestroyed) {
              return;
            }
            var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
            if (!areValidElements(reference3, popper3)) {
              {
                console.error(INVALID_ELEMENT_ERROR);
              }
              return;
            }
            state.rects = {
              reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
              popper: getLayoutRect(popper3)
            };
            state.reset = false;
            state.placement = state.options.placement;
            state.orderedModifiers.forEach(function(modifier) {
              return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
            });
            var __debug_loops__ = 0;
            for (var index = 0; index < state.orderedModifiers.length; index++) {
              {
                __debug_loops__ += 1;
                if (__debug_loops__ > 100) {
                  console.error(INFINITE_LOOP_ERROR);
                  break;
                }
              }
              if (state.reset === true) {
                state.reset = false;
                index = -1;
                continue;
              }
              var _state$orderedModifie = state.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
              if (typeof fn === "function") {
                state = fn({
                  state,
                  options: _options,
                  name,
                  instance
                }) || state;
              }
            }
          },
          update: debounce$2(function() {
            return new Promise(function(resolve) {
              instance.forceUpdate();
              resolve(state);
            });
          }),
          destroy: function destroy() {
            cleanupModifierEffects();
            isDestroyed = true;
          }
        };
        if (!areValidElements(reference2, popper2)) {
          {
            console.error(INVALID_ELEMENT_ERROR);
          }
          return instance;
        }
        instance.setOptions(options).then(function(state2) {
          if (!isDestroyed && options.onFirstUpdate) {
            options.onFirstUpdate(state2);
          }
        });
        function runModifierEffects() {
          state.orderedModifiers.forEach(function(_ref3) {
            var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect2 = _ref3.effect;
            if (typeof effect2 === "function") {
              var cleanupFn = effect2({
                state,
                name,
                instance,
                options: options2
              });
              var noopFn = function noopFn2() {
              };
              effectCleanupFns.push(cleanupFn || noopFn);
            }
          });
        }
        function cleanupModifierEffects() {
          effectCleanupFns.forEach(function(fn) {
            return fn();
          });
          effectCleanupFns = [];
        }
        return instance;
      };
    }
    var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$2, flip$1, preventOverflow$1, arrow$1, hide$1];
    var createPopper = /* @__PURE__ */ popperGenerator({
      defaultModifiers
    });
    function getContainer$1(container) {
      return typeof container === "function" ? container() : container;
    }
    const Portal = /* @__PURE__ */ react.exports.forwardRef(function Portal2(props, forwardedRef) {
      const {
        children,
        container,
        disablePortal = false
      } = props;
      const [mountNode, setMountNode] = react.exports.useState(null);
      const handleRef = useForkRef(/* @__PURE__ */ react.exports.isValidElement(children) ? children.ref : null, forwardedRef);
      useEnhancedEffect$1(() => {
        if (!disablePortal) {
          setMountNode(getContainer$1(container) || document.body);
        }
      }, [container, disablePortal]);
      useEnhancedEffect$1(() => {
        if (mountNode && !disablePortal) {
          setRef(forwardedRef, mountNode);
          return () => {
            setRef(forwardedRef, null);
          };
        }
        return void 0;
      }, [forwardedRef, mountNode, disablePortal]);
      if (disablePortal) {
        if (/* @__PURE__ */ react.exports.isValidElement(children)) {
          const newProps = {
            ref: handleRef
          };
          return /* @__PURE__ */ react.exports.cloneElement(children, newProps);
        }
        return /* @__PURE__ */ jsx(react.exports.Fragment, {
          children
        });
      }
      return /* @__PURE__ */ jsx(react.exports.Fragment, {
        children: mountNode ? /* @__PURE__ */ reactDom.exports.createPortal(children, mountNode) : mountNode
      });
    });
    Portal.propTypes = {
      children: propTypes.exports.node,
      container: propTypes.exports.oneOfType([HTMLElementType, propTypes.exports.func]),
      disablePortal: propTypes.exports.bool
    };
    {
      Portal["propTypes"] = exactProp(Portal.propTypes);
    }
    const Portal$1 = Portal;
    function getPopperUtilityClass(slot) {
      return generateUtilityClass("MuiPopper", slot);
    }
    generateUtilityClasses("MuiPopper", ["root"]);
    const _excluded$1z = ["anchorEl", "children", "direction", "disablePortal", "modifiers", "open", "placement", "popperOptions", "popperRef", "slotProps", "slots", "TransitionProps", "ownerState"], _excluded2$3 = ["anchorEl", "children", "container", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition", "slotProps", "slots"];
    function flipPlacement(placement, direction) {
      if (direction === "ltr") {
        return placement;
      }
      switch (placement) {
        case "bottom-end":
          return "bottom-start";
        case "bottom-start":
          return "bottom-end";
        case "top-end":
          return "top-start";
        case "top-start":
          return "top-end";
        default:
          return placement;
      }
    }
    function resolveAnchorEl$1(anchorEl) {
      return typeof anchorEl === "function" ? anchorEl() : anchorEl;
    }
    function isHTMLElement(element) {
      return element.nodeType !== void 0;
    }
    function isVirtualElement(element) {
      return !isHTMLElement(element);
    }
    const useUtilityClasses$18 = () => {
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, useClassNamesOverride(getPopperUtilityClass));
    };
    const defaultPopperOptions = {};
    const PopperTooltip = /* @__PURE__ */ react.exports.forwardRef(function PopperTooltip2(props, forwardedRef) {
      var _slots$root;
      const {
        anchorEl,
        children,
        direction,
        disablePortal,
        modifiers,
        open,
        placement: initialPlacement,
        popperOptions,
        popperRef: popperRefProp,
        slotProps = {},
        slots = {},
        TransitionProps
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1z);
      const tooltipRef = react.exports.useRef(null);
      const ownRef = useForkRef(tooltipRef, forwardedRef);
      const popperRef = react.exports.useRef(null);
      const handlePopperRef = useForkRef(popperRef, popperRefProp);
      const handlePopperRefRef = react.exports.useRef(handlePopperRef);
      useEnhancedEffect$1(() => {
        handlePopperRefRef.current = handlePopperRef;
      }, [handlePopperRef]);
      react.exports.useImperativeHandle(popperRefProp, () => popperRef.current, []);
      const rtlPlacement = flipPlacement(initialPlacement, direction);
      const [placement, setPlacement] = react.exports.useState(rtlPlacement);
      const [resolvedAnchorElement, setResolvedAnchorElement] = react.exports.useState(resolveAnchorEl$1(anchorEl));
      react.exports.useEffect(() => {
        if (popperRef.current) {
          popperRef.current.forceUpdate();
        }
      });
      react.exports.useEffect(() => {
        if (anchorEl) {
          setResolvedAnchorElement(resolveAnchorEl$1(anchorEl));
        }
      }, [anchorEl]);
      useEnhancedEffect$1(() => {
        if (!resolvedAnchorElement || !open) {
          return void 0;
        }
        const handlePopperUpdate = (data) => {
          setPlacement(data.placement);
        };
        {
          if (resolvedAnchorElement && isHTMLElement(resolvedAnchorElement) && resolvedAnchorElement.nodeType === 1) {
            const box = resolvedAnchorElement.getBoundingClientRect();
            if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
              console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
            }
          }
        }
        let popperModifiers = [{
          name: "preventOverflow",
          options: {
            altBoundary: disablePortal
          }
        }, {
          name: "flip",
          options: {
            altBoundary: disablePortal
          }
        }, {
          name: "onUpdate",
          enabled: true,
          phase: "afterWrite",
          fn: ({
            state
          }) => {
            handlePopperUpdate(state);
          }
        }];
        if (modifiers != null) {
          popperModifiers = popperModifiers.concat(modifiers);
        }
        if (popperOptions && popperOptions.modifiers != null) {
          popperModifiers = popperModifiers.concat(popperOptions.modifiers);
        }
        const popper2 = createPopper(resolvedAnchorElement, tooltipRef.current, _extends$1({
          placement: rtlPlacement
        }, popperOptions, {
          modifiers: popperModifiers
        }));
        handlePopperRefRef.current(popper2);
        return () => {
          popper2.destroy();
          handlePopperRefRef.current(null);
        };
      }, [resolvedAnchorElement, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
      const childProps = {
        placement
      };
      if (TransitionProps !== null) {
        childProps.TransitionProps = TransitionProps;
      }
      const classes = useUtilityClasses$18();
      const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
      const rootProps = useSlotProps({
        elementType: Root,
        externalSlotProps: slotProps.root,
        externalForwardedProps: other,
        additionalProps: {
          role: "tooltip",
          ref: ownRef
        },
        ownerState: props,
        className: classes.root
      });
      return /* @__PURE__ */ jsx(Root, _extends$1({}, rootProps, {
        children: typeof children === "function" ? children(childProps) : children
      }));
    });
    const Popper$2 = /* @__PURE__ */ react.exports.forwardRef(function Popper2(props, forwardedRef) {
      const {
        anchorEl,
        children,
        container: containerProp,
        direction = "ltr",
        disablePortal = false,
        keepMounted = false,
        modifiers,
        open,
        placement = "bottom",
        popperOptions = defaultPopperOptions,
        popperRef,
        style: style2,
        transition = false,
        slotProps = {},
        slots = {}
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded2$3);
      const [exited, setExited] = react.exports.useState(true);
      const handleEnter = () => {
        setExited(false);
      };
      const handleExited = () => {
        setExited(true);
      };
      if (!keepMounted && !open && (!transition || exited)) {
        return null;
      }
      let container;
      if (containerProp) {
        container = containerProp;
      } else if (anchorEl) {
        const resolvedAnchorEl = resolveAnchorEl$1(anchorEl);
        container = resolvedAnchorEl && isHTMLElement(resolvedAnchorEl) ? ownerDocument(resolvedAnchorEl).body : ownerDocument(null).body;
      }
      const display = !open && keepMounted && (!transition || exited) ? "none" : void 0;
      const transitionProps = transition ? {
        in: open,
        onEnter: handleEnter,
        onExited: handleExited
      } : void 0;
      return /* @__PURE__ */ jsx(Portal$1, {
        disablePortal,
        container,
        children: /* @__PURE__ */ jsx(PopperTooltip, _extends$1({
          anchorEl,
          direction,
          disablePortal,
          modifiers,
          ref: forwardedRef,
          open: transition ? !exited : open,
          placement,
          popperOptions,
          popperRef,
          slotProps,
          slots
        }, other, {
          style: _extends$1({
            position: "fixed",
            top: 0,
            left: 0,
            display
          }, style2),
          TransitionProps: transitionProps,
          children
        }))
      });
    });
    Popper$2.propTypes = {
      anchorEl: chainPropTypes(propTypes.exports.oneOfType([HTMLElementType, propTypes.exports.object, propTypes.exports.func]), (props) => {
        if (props.open) {
          const resolvedAnchorEl = resolveAnchorEl$1(props.anchorEl);
          if (resolvedAnchorEl && isHTMLElement(resolvedAnchorEl) && resolvedAnchorEl.nodeType === 1) {
            const box = resolvedAnchorEl.getBoundingClientRect();
            if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
              return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
            }
          } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== "function" || isVirtualElement(resolvedAnchorEl) && resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "It should be an HTML element instance or a virtualElement ", "(https://popper.js.org/docs/v2/virtual-elements/)."].join("\n"));
          }
        }
        return null;
      }),
      children: propTypes.exports.oneOfType([propTypes.exports.node, propTypes.exports.func]),
      container: propTypes.exports.oneOfType([HTMLElementType, propTypes.exports.func]),
      direction: propTypes.exports.oneOf(["ltr", "rtl"]),
      disablePortal: propTypes.exports.bool,
      keepMounted: propTypes.exports.bool,
      modifiers: propTypes.exports.arrayOf(propTypes.exports.shape({
        data: propTypes.exports.object,
        effect: propTypes.exports.func,
        enabled: propTypes.exports.bool,
        fn: propTypes.exports.func,
        name: propTypes.exports.any,
        options: propTypes.exports.object,
        phase: propTypes.exports.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
        requires: propTypes.exports.arrayOf(propTypes.exports.string),
        requiresIfExists: propTypes.exports.arrayOf(propTypes.exports.string)
      })),
      open: propTypes.exports.bool.isRequired,
      placement: propTypes.exports.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
      popperOptions: propTypes.exports.shape({
        modifiers: propTypes.exports.array,
        onFirstUpdate: propTypes.exports.func,
        placement: propTypes.exports.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
        strategy: propTypes.exports.oneOf(["absolute", "fixed"])
      }),
      popperRef: refType$1,
      slotProps: propTypes.exports.shape({
        root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
      }),
      slots: propTypes.exports.shape({
        root: propTypes.exports.elementType
      }),
      transition: propTypes.exports.bool
    };
    const BasePopper = Popper$2;
    function isOverflowing(container) {
      const doc = ownerDocument(container);
      if (doc.body === container) {
        return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
      }
      return container.scrollHeight > container.clientHeight;
    }
    function ariaHidden(element, show) {
      if (show) {
        element.setAttribute("aria-hidden", "true");
      } else {
        element.removeAttribute("aria-hidden");
      }
    }
    function getPaddingRight(element) {
      return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
    }
    function isAriaHiddenForbiddenOnElement(element) {
      const forbiddenTagNames = ["TEMPLATE", "SCRIPT", "STYLE", "LINK", "MAP", "META", "NOSCRIPT", "PICTURE", "COL", "COLGROUP", "PARAM", "SLOT", "SOURCE", "TRACK"];
      const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;
      const isInputHidden = element.tagName === "INPUT" && element.getAttribute("type") === "hidden";
      return isForbiddenTagName || isInputHidden;
    }
    function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, show) {
      const blacklist = [mountElement, currentElement, ...elementsToExclude];
      [].forEach.call(container.children, (element) => {
        const isNotExcludedElement = blacklist.indexOf(element) === -1;
        const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
        if (isNotExcludedElement && isNotForbiddenElement) {
          ariaHidden(element, show);
        }
      });
    }
    function findIndexOf(items, callback) {
      let idx = -1;
      items.some((item, index) => {
        if (callback(item)) {
          idx = index;
          return true;
        }
        return false;
      });
      return idx;
    }
    function handleContainer(containerInfo, props) {
      const restoreStyle = [];
      const container = containerInfo.container;
      if (!props.disableScrollLock) {
        if (isOverflowing(container)) {
          const scrollbarSize = getScrollbarSize(ownerDocument(container));
          restoreStyle.push({
            value: container.style.paddingRight,
            property: "padding-right",
            el: container
          });
          container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;
          const fixedElements2 = ownerDocument(container).querySelectorAll(".mui-fixed");
          [].forEach.call(fixedElements2, (element) => {
            restoreStyle.push({
              value: element.style.paddingRight,
              property: "padding-right",
              el: element
            });
            element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
          });
        }
        let scrollContainer;
        if (container.parentNode instanceof DocumentFragment) {
          scrollContainer = ownerDocument(container).body;
        } else {
          const parent2 = container.parentElement;
          const containerWindow = ownerWindow(container);
          scrollContainer = (parent2 == null ? void 0 : parent2.nodeName) === "HTML" && containerWindow.getComputedStyle(parent2).overflowY === "scroll" ? parent2 : container;
        }
        restoreStyle.push({
          value: scrollContainer.style.overflow,
          property: "overflow",
          el: scrollContainer
        }, {
          value: scrollContainer.style.overflowX,
          property: "overflow-x",
          el: scrollContainer
        }, {
          value: scrollContainer.style.overflowY,
          property: "overflow-y",
          el: scrollContainer
        });
        scrollContainer.style.overflow = "hidden";
      }
      const restore = () => {
        restoreStyle.forEach(({
          value: value2,
          el,
          property: property2
        }) => {
          if (value2) {
            el.style.setProperty(property2, value2);
          } else {
            el.style.removeProperty(property2);
          }
        });
      };
      return restore;
    }
    function getHiddenSiblings(container) {
      const hiddenSiblings = [];
      [].forEach.call(container.children, (element) => {
        if (element.getAttribute("aria-hidden") === "true") {
          hiddenSiblings.push(element);
        }
      });
      return hiddenSiblings;
    }
    class ModalManager {
      constructor() {
        this.containers = void 0;
        this.modals = void 0;
        this.modals = [];
        this.containers = [];
      }
      add(modal, container) {
        let modalIndex = this.modals.indexOf(modal);
        if (modalIndex !== -1) {
          return modalIndex;
        }
        modalIndex = this.modals.length;
        this.modals.push(modal);
        if (modal.modalRef) {
          ariaHidden(modal.modalRef, false);
        }
        const hiddenSiblings = getHiddenSiblings(container);
        ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
        const containerIndex = findIndexOf(this.containers, (item) => item.container === container);
        if (containerIndex !== -1) {
          this.containers[containerIndex].modals.push(modal);
          return modalIndex;
        }
        this.containers.push({
          modals: [modal],
          container,
          restore: null,
          hiddenSiblings
        });
        return modalIndex;
      }
      mount(modal, props) {
        const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
        const containerInfo = this.containers[containerIndex];
        if (!containerInfo.restore) {
          containerInfo.restore = handleContainer(containerInfo, props);
        }
      }
      remove(modal, ariaHiddenState = true) {
        const modalIndex = this.modals.indexOf(modal);
        if (modalIndex === -1) {
          return modalIndex;
        }
        const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
        const containerInfo = this.containers[containerIndex];
        containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
        this.modals.splice(modalIndex, 1);
        if (containerInfo.modals.length === 0) {
          if (containerInfo.restore) {
            containerInfo.restore();
          }
          if (modal.modalRef) {
            ariaHidden(modal.modalRef, ariaHiddenState);
          }
          ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
          this.containers.splice(containerIndex, 1);
        } else {
          const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
          if (nextTop.modalRef) {
            ariaHidden(nextTop.modalRef, false);
          }
        }
        return modalIndex;
      }
      isTopModal(modal) {
        return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
      }
    }
    function getModalUtilityClass(slot) {
      return generateUtilityClass("MuiModal", slot);
    }
    generateUtilityClasses("MuiModal", ["root", "hidden", "backdrop"]);
    const _excluded$1y = ["children", "closeAfterTransition", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onKeyDown", "open", "onTransitionEnter", "onTransitionExited", "slotProps", "slots"];
    const useUtilityClasses$17 = (ownerState) => {
      const {
        open,
        exited
      } = ownerState;
      const slots = {
        root: ["root", !open && exited && "hidden"],
        backdrop: ["backdrop"]
      };
      return composeClasses(slots, useClassNamesOverride(getModalUtilityClass));
    };
    function getContainer(container) {
      return typeof container === "function" ? container() : container;
    }
    function getHasTransition(children) {
      return children ? children.props.hasOwnProperty("in") : false;
    }
    const defaultManager = new ModalManager();
    const Modal$2 = /* @__PURE__ */ react.exports.forwardRef(function Modal2(props, forwardedRef) {
      var _props$ariaHidden, _slots$root;
      const {
        children,
        closeAfterTransition = false,
        container,
        disableAutoFocus = false,
        disableEnforceFocus = false,
        disableEscapeKeyDown = false,
        disablePortal = false,
        disableRestoreFocus = false,
        disableScrollLock = false,
        hideBackdrop = false,
        keepMounted = false,
        manager: managerProp = defaultManager,
        onBackdropClick,
        onClose,
        onKeyDown,
        open,
        onTransitionEnter,
        onTransitionExited,
        slotProps = {},
        slots = {}
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1y);
      const manager = managerProp;
      const [exited, setExited] = react.exports.useState(!open);
      const modal = react.exports.useRef({});
      const mountNodeRef = react.exports.useRef(null);
      const modalRef = react.exports.useRef(null);
      const handleRef = useForkRef(modalRef, forwardedRef);
      const hasTransition = getHasTransition(children);
      const ariaHiddenProp = (_props$ariaHidden = props["aria-hidden"]) != null ? _props$ariaHidden : true;
      const getDoc = () => ownerDocument(mountNodeRef.current);
      const getModal = () => {
        modal.current.modalRef = modalRef.current;
        modal.current.mountNode = mountNodeRef.current;
        return modal.current;
      };
      const handleMounted = () => {
        manager.mount(getModal(), {
          disableScrollLock
        });
        if (modalRef.current) {
          modalRef.current.scrollTop = 0;
        }
      };
      const handleOpen = useEventCallback(() => {
        const resolvedContainer = getContainer(container) || getDoc().body;
        manager.add(getModal(), resolvedContainer);
        if (modalRef.current) {
          handleMounted();
        }
      });
      const isTopModal = react.exports.useCallback(() => manager.isTopModal(getModal()), [manager]);
      const handlePortalRef = useEventCallback((node2) => {
        mountNodeRef.current = node2;
        if (!node2 || !modalRef.current) {
          return;
        }
        if (open && isTopModal()) {
          handleMounted();
        } else {
          ariaHidden(modalRef.current, ariaHiddenProp);
        }
      });
      const handleClose = react.exports.useCallback(() => {
        manager.remove(getModal(), ariaHiddenProp);
      }, [manager, ariaHiddenProp]);
      react.exports.useEffect(() => {
        return () => {
          handleClose();
        };
      }, [handleClose]);
      react.exports.useEffect(() => {
        if (open) {
          handleOpen();
        } else if (!hasTransition || !closeAfterTransition) {
          handleClose();
        }
      }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
      const ownerState = _extends$1({}, props, {
        closeAfterTransition,
        disableAutoFocus,
        disableEnforceFocus,
        disableEscapeKeyDown,
        disablePortal,
        disableRestoreFocus,
        disableScrollLock,
        exited,
        hideBackdrop,
        keepMounted
      });
      const classes = useUtilityClasses$17(ownerState);
      const handleEnter = () => {
        setExited(false);
        if (onTransitionEnter) {
          onTransitionEnter();
        }
      };
      const handleExited = () => {
        setExited(true);
        if (onTransitionExited) {
          onTransitionExited();
        }
        if (closeAfterTransition) {
          handleClose();
        }
      };
      const handleBackdropClick = (event) => {
        if (event.target !== event.currentTarget) {
          return;
        }
        if (onBackdropClick) {
          onBackdropClick(event);
        }
        if (onClose) {
          onClose(event, "backdropClick");
        }
      };
      const handleKeyDown2 = (event) => {
        if (onKeyDown) {
          onKeyDown(event);
        }
        if (event.key !== "Escape" || !isTopModal()) {
          return;
        }
        if (!disableEscapeKeyDown) {
          event.stopPropagation();
          if (onClose) {
            onClose(event, "escapeKeyDown");
          }
        }
      };
      const childProps = {};
      if (children.props.tabIndex === void 0) {
        childProps.tabIndex = "-1";
      }
      if (hasTransition) {
        childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);
        childProps.onExited = createChainedFunction(handleExited, children.props.onExited);
      }
      const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
      const rootProps = useSlotProps({
        elementType: Root,
        externalSlotProps: slotProps.root,
        externalForwardedProps: other,
        additionalProps: {
          ref: handleRef,
          role: "presentation",
          onKeyDown: handleKeyDown2
        },
        className: classes.root,
        ownerState
      });
      const BackdropComponent = slots.backdrop;
      const backdropProps = useSlotProps({
        elementType: BackdropComponent,
        externalSlotProps: slotProps.backdrop,
        additionalProps: {
          "aria-hidden": true,
          onClick: handleBackdropClick,
          open
        },
        className: classes.backdrop,
        ownerState
      });
      if (!keepMounted && !open && (!hasTransition || exited)) {
        return null;
      }
      return /* @__PURE__ */ jsx(
        Portal$1,
        {
          ref: handlePortalRef,
          container,
          disablePortal,
          children: /* @__PURE__ */ jsxs(Root, _extends$1({}, rootProps, {
            children: [!hideBackdrop && BackdropComponent ? /* @__PURE__ */ jsx(BackdropComponent, _extends$1({}, backdropProps)) : null, /* @__PURE__ */ jsx(FocusTrap, {
              disableEnforceFocus,
              disableAutoFocus,
              disableRestoreFocus,
              isEnabled: isTopModal,
              open,
              children: /* @__PURE__ */ react.exports.cloneElement(children, childProps)
            })]
          }))
        }
      );
    });
    Modal$2.propTypes = {
      children: elementAcceptingRef$1.isRequired,
      closeAfterTransition: propTypes.exports.bool,
      container: propTypes.exports.oneOfType([HTMLElementType, propTypes.exports.func]),
      disableAutoFocus: propTypes.exports.bool,
      disableEnforceFocus: propTypes.exports.bool,
      disableEscapeKeyDown: propTypes.exports.bool,
      disablePortal: propTypes.exports.bool,
      disableRestoreFocus: propTypes.exports.bool,
      disableScrollLock: propTypes.exports.bool,
      hideBackdrop: propTypes.exports.bool,
      keepMounted: propTypes.exports.bool,
      onBackdropClick: propTypes.exports.func,
      onClose: propTypes.exports.func,
      open: propTypes.exports.bool.isRequired,
      slotProps: propTypes.exports.shape({
        backdrop: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
        root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
      }),
      slots: propTypes.exports.shape({
        backdrop: propTypes.exports.elementType,
        root: propTypes.exports.elementType
      })
    };
    const ModalUnstyled = Modal$2;
    const INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;
    function asc(a, b) {
      return a - b;
    }
    function clamp(value2, min2, max2) {
      if (value2 == null) {
        return min2;
      }
      return Math.min(Math.max(min2, value2), max2);
    }
    function findClosest(values2, currentValue) {
      var _values$reduce;
      const {
        index: closestIndex
      } = (_values$reduce = values2.reduce((acc, value2, index) => {
        const distance = Math.abs(currentValue - value2);
        if (acc === null || distance < acc.distance || distance === acc.distance) {
          return {
            distance,
            index
          };
        }
        return acc;
      }, null)) != null ? _values$reduce : {};
      return closestIndex;
    }
    function trackFinger(event, touchId) {
      if (touchId.current !== void 0 && event.changedTouches) {
        const touchEvent = event;
        for (let i = 0; i < touchEvent.changedTouches.length; i += 1) {
          const touch = touchEvent.changedTouches[i];
          if (touch.identifier === touchId.current) {
            return {
              x: touch.clientX,
              y: touch.clientY
            };
          }
        }
        return false;
      }
      return {
        x: event.clientX,
        y: event.clientY
      };
    }
    function valueToPercent(value2, min2, max2) {
      return (value2 - min2) * 100 / (max2 - min2);
    }
    function percentToValue(percent, min2, max2) {
      return (max2 - min2) * percent + min2;
    }
    function getDecimalPrecision(num) {
      if (Math.abs(num) < 1) {
        const parts = num.toExponential().split("e-");
        const matissaDecimalPart = parts[0].split(".")[1];
        return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
      }
      const decimalPart = num.toString().split(".")[1];
      return decimalPart ? decimalPart.length : 0;
    }
    function roundValueToStep(value2, step, min2) {
      const nearest = Math.round((value2 - min2) / step) * step + min2;
      return Number(nearest.toFixed(getDecimalPrecision(step)));
    }
    function setValueIndex({
      values: values2,
      newValue,
      index
    }) {
      const output = values2.slice();
      output[index] = newValue;
      return output.sort(asc);
    }
    function focusThumb({
      sliderRef,
      activeIndex,
      setActive
    }) {
      var _sliderRef$current, _doc$activeElement;
      const doc = ownerDocument(sliderRef.current);
      if (!((_sliderRef$current = sliderRef.current) != null && _sliderRef$current.contains(doc.activeElement)) || Number(doc == null ? void 0 : (_doc$activeElement = doc.activeElement) == null ? void 0 : _doc$activeElement.getAttribute("data-index")) !== activeIndex) {
        var _sliderRef$current2;
        (_sliderRef$current2 = sliderRef.current) == null ? void 0 : _sliderRef$current2.querySelector(`[type="range"][data-index="${activeIndex}"]`).focus();
      }
      if (setActive) {
        setActive(activeIndex);
      }
    }
    function areValuesEqual(newValue, oldValue) {
      if (typeof newValue === "number" && typeof oldValue === "number") {
        return newValue === oldValue;
      }
      if (typeof newValue === "object" && typeof oldValue === "object") {
        return areArraysEqual(newValue, oldValue);
      }
      return false;
    }
    const axisProps = {
      horizontal: {
        offset: (percent) => ({
          left: `${percent}%`
        }),
        leap: (percent) => ({
          width: `${percent}%`
        })
      },
      "horizontal-reverse": {
        offset: (percent) => ({
          right: `${percent}%`
        }),
        leap: (percent) => ({
          width: `${percent}%`
        })
      },
      vertical: {
        offset: (percent) => ({
          bottom: `${percent}%`
        }),
        leap: (percent) => ({
          height: `${percent}%`
        })
      }
    };
    const Identity$1 = (x) => x;
    let cachedSupportsTouchActionNone;
    function doesSupportTouchActionNone() {
      if (cachedSupportsTouchActionNone === void 0) {
        if (typeof CSS !== "undefined" && typeof CSS.supports === "function") {
          cachedSupportsTouchActionNone = CSS.supports("touch-action", "none");
        } else {
          cachedSupportsTouchActionNone = true;
        }
      }
      return cachedSupportsTouchActionNone;
    }
    function useSlider(parameters) {
      const {
        "aria-labelledby": ariaLabelledby,
        defaultValue: defaultValue2,
        disabled = false,
        disableSwap = false,
        isRtl = false,
        marks: marksProp = false,
        max: max2 = 100,
        min: min2 = 0,
        name,
        onChange,
        onChangeCommitted,
        orientation = "horizontal",
        rootRef: ref,
        scale = Identity$1,
        step = 1,
        tabIndex,
        value: valueProp
      } = parameters;
      const touchId = react.exports.useRef();
      const [active, setActive] = react.exports.useState(-1);
      const [open, setOpen] = react.exports.useState(-1);
      const [dragging, setDragging] = react.exports.useState(false);
      const moveCount = react.exports.useRef(0);
      const [valueDerived, setValueState] = useControlled({
        controlled: valueProp,
        default: defaultValue2 != null ? defaultValue2 : min2,
        name: "Slider"
      });
      const handleChange = onChange && ((event, value2, thumbIndex) => {
        const nativeEvent = event.nativeEvent || event;
        const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
        Object.defineProperty(clonedEvent, "target", {
          writable: true,
          value: {
            value: value2,
            name
          }
        });
        onChange(clonedEvent, value2, thumbIndex);
      });
      const range2 = Array.isArray(valueDerived);
      let values2 = range2 ? valueDerived.slice().sort(asc) : [valueDerived];
      values2 = values2.map((value2) => clamp(value2, min2, max2));
      const marks = marksProp === true && step !== null ? [...Array(Math.floor((max2 - min2) / step) + 1)].map((_2, index) => ({
        value: min2 + step * index
      })) : marksProp || [];
      const marksValues = marks.map((mark) => mark.value);
      const {
        isFocusVisibleRef,
        onBlur: handleBlurVisible,
        onFocus: handleFocusVisible,
        ref: focusVisibleRef
      } = useIsFocusVisible();
      const [focusedThumbIndex, setFocusedThumbIndex] = react.exports.useState(-1);
      const sliderRef = react.exports.useRef();
      const handleFocusRef = useForkRef(focusVisibleRef, sliderRef);
      const handleRef = useForkRef(ref, handleFocusRef);
      const createHandleHiddenInputFocus = (otherHandlers) => (event) => {
        var _otherHandlers$onFocu;
        const index = Number(event.currentTarget.getAttribute("data-index"));
        handleFocusVisible(event);
        if (isFocusVisibleRef.current === true) {
          setFocusedThumbIndex(index);
        }
        setOpen(index);
        otherHandlers == null ? void 0 : (_otherHandlers$onFocu = otherHandlers.onFocus) == null ? void 0 : _otherHandlers$onFocu.call(otherHandlers, event);
      };
      const createHandleHiddenInputBlur = (otherHandlers) => (event) => {
        var _otherHandlers$onBlur;
        handleBlurVisible(event);
        if (isFocusVisibleRef.current === false) {
          setFocusedThumbIndex(-1);
        }
        setOpen(-1);
        otherHandlers == null ? void 0 : (_otherHandlers$onBlur = otherHandlers.onBlur) == null ? void 0 : _otherHandlers$onBlur.call(otherHandlers, event);
      };
      useEnhancedEffect$1(() => {
        if (disabled && sliderRef.current.contains(document.activeElement)) {
          var _document$activeEleme;
          (_document$activeEleme = document.activeElement) == null ? void 0 : _document$activeEleme.blur();
        }
      }, [disabled]);
      if (disabled && active !== -1) {
        setActive(-1);
      }
      if (disabled && focusedThumbIndex !== -1) {
        setFocusedThumbIndex(-1);
      }
      const createHandleHiddenInputChange = (otherHandlers) => (event) => {
        var _otherHandlers$onChan;
        (_otherHandlers$onChan = otherHandlers.onChange) == null ? void 0 : _otherHandlers$onChan.call(otherHandlers, event);
        const index = Number(event.currentTarget.getAttribute("data-index"));
        const value2 = values2[index];
        const marksIndex = marksValues.indexOf(value2);
        let newValue = event.target.valueAsNumber;
        if (marks && step == null) {
          newValue = newValue < value2 ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];
        }
        newValue = clamp(newValue, min2, max2);
        if (marks && step == null) {
          const currentMarkIndex = marksValues.indexOf(values2[index]);
          newValue = newValue < values2[index] ? marksValues[currentMarkIndex - 1] : marksValues[currentMarkIndex + 1];
        }
        if (range2) {
          if (disableSwap) {
            newValue = clamp(newValue, values2[index - 1] || -Infinity, values2[index + 1] || Infinity);
          }
          const previousValue = newValue;
          newValue = setValueIndex({
            values: values2,
            newValue,
            index
          });
          let activeIndex = index;
          if (!disableSwap) {
            activeIndex = newValue.indexOf(previousValue);
          }
          focusThumb({
            sliderRef,
            activeIndex
          });
        }
        setValueState(newValue);
        setFocusedThumbIndex(index);
        if (handleChange && !areValuesEqual(newValue, valueDerived)) {
          handleChange(event, newValue, index);
        }
        if (onChangeCommitted) {
          onChangeCommitted(event, newValue);
        }
      };
      const previousIndex = react.exports.useRef();
      let axis = orientation;
      if (isRtl && orientation === "horizontal") {
        axis += "-reverse";
      }
      const getFingerNewValue = ({
        finger,
        move = false
      }) => {
        const {
          current: slider
        } = sliderRef;
        const {
          width: width2,
          height: height2,
          bottom: bottom2,
          left: left2
        } = slider.getBoundingClientRect();
        let percent;
        if (axis.indexOf("vertical") === 0) {
          percent = (bottom2 - finger.y) / height2;
        } else {
          percent = (finger.x - left2) / width2;
        }
        if (axis.indexOf("-reverse") !== -1) {
          percent = 1 - percent;
        }
        let newValue;
        newValue = percentToValue(percent, min2, max2);
        if (step) {
          newValue = roundValueToStep(newValue, step, min2);
        } else {
          const closestIndex = findClosest(marksValues, newValue);
          newValue = marksValues[closestIndex];
        }
        newValue = clamp(newValue, min2, max2);
        let activeIndex = 0;
        if (range2) {
          if (!move) {
            activeIndex = findClosest(values2, newValue);
          } else {
            activeIndex = previousIndex.current;
          }
          if (disableSwap) {
            newValue = clamp(newValue, values2[activeIndex - 1] || -Infinity, values2[activeIndex + 1] || Infinity);
          }
          const previousValue = newValue;
          newValue = setValueIndex({
            values: values2,
            newValue,
            index: activeIndex
          });
          if (!(disableSwap && move)) {
            activeIndex = newValue.indexOf(previousValue);
            previousIndex.current = activeIndex;
          }
        }
        return {
          newValue,
          activeIndex
        };
      };
      const handleTouchMove = useEventCallback((nativeEvent) => {
        const finger = trackFinger(nativeEvent, touchId);
        if (!finger) {
          return;
        }
        moveCount.current += 1;
        if (nativeEvent.type === "mousemove" && nativeEvent.buttons === 0) {
          handleTouchEnd(nativeEvent);
          return;
        }
        const {
          newValue,
          activeIndex
        } = getFingerNewValue({
          finger,
          move: true
        });
        focusThumb({
          sliderRef,
          activeIndex,
          setActive
        });
        setValueState(newValue);
        if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {
          setDragging(true);
        }
        if (handleChange && !areValuesEqual(newValue, valueDerived)) {
          handleChange(nativeEvent, newValue, activeIndex);
        }
      });
      const handleTouchEnd = useEventCallback((nativeEvent) => {
        const finger = trackFinger(nativeEvent, touchId);
        setDragging(false);
        if (!finger) {
          return;
        }
        const {
          newValue
        } = getFingerNewValue({
          finger,
          move: true
        });
        setActive(-1);
        if (nativeEvent.type === "touchend") {
          setOpen(-1);
        }
        if (onChangeCommitted) {
          onChangeCommitted(nativeEvent, newValue);
        }
        touchId.current = void 0;
        stopListening();
      });
      const handleTouchStart = useEventCallback((nativeEvent) => {
        if (disabled) {
          return;
        }
        if (!doesSupportTouchActionNone()) {
          nativeEvent.preventDefault();
        }
        const touch = nativeEvent.changedTouches[0];
        if (touch != null) {
          touchId.current = touch.identifier;
        }
        const finger = trackFinger(nativeEvent, touchId);
        if (finger !== false) {
          const {
            newValue,
            activeIndex
          } = getFingerNewValue({
            finger
          });
          focusThumb({
            sliderRef,
            activeIndex,
            setActive
          });
          setValueState(newValue);
          if (handleChange && !areValuesEqual(newValue, valueDerived)) {
            handleChange(nativeEvent, newValue, activeIndex);
          }
        }
        moveCount.current = 0;
        const doc = ownerDocument(sliderRef.current);
        doc.addEventListener("touchmove", handleTouchMove);
        doc.addEventListener("touchend", handleTouchEnd);
      });
      const stopListening = react.exports.useCallback(() => {
        const doc = ownerDocument(sliderRef.current);
        doc.removeEventListener("mousemove", handleTouchMove);
        doc.removeEventListener("mouseup", handleTouchEnd);
        doc.removeEventListener("touchmove", handleTouchMove);
        doc.removeEventListener("touchend", handleTouchEnd);
      }, [handleTouchEnd, handleTouchMove]);
      react.exports.useEffect(() => {
        const {
          current: slider
        } = sliderRef;
        slider.addEventListener("touchstart", handleTouchStart, {
          passive: doesSupportTouchActionNone()
        });
        return () => {
          slider.removeEventListener("touchstart", handleTouchStart, {
            passive: doesSupportTouchActionNone()
          });
          stopListening();
        };
      }, [stopListening, handleTouchStart]);
      react.exports.useEffect(() => {
        if (disabled) {
          stopListening();
        }
      }, [disabled, stopListening]);
      const createHandleMouseDown = (otherHandlers) => (event) => {
        var _otherHandlers$onMous;
        (_otherHandlers$onMous = otherHandlers.onMouseDown) == null ? void 0 : _otherHandlers$onMous.call(otherHandlers, event);
        if (disabled) {
          return;
        }
        if (event.defaultPrevented) {
          return;
        }
        if (event.button !== 0) {
          return;
        }
        event.preventDefault();
        const finger = trackFinger(event, touchId);
        if (finger !== false) {
          const {
            newValue,
            activeIndex
          } = getFingerNewValue({
            finger
          });
          focusThumb({
            sliderRef,
            activeIndex,
            setActive
          });
          setValueState(newValue);
          if (handleChange && !areValuesEqual(newValue, valueDerived)) {
            handleChange(event, newValue, activeIndex);
          }
        }
        moveCount.current = 0;
        const doc = ownerDocument(sliderRef.current);
        doc.addEventListener("mousemove", handleTouchMove);
        doc.addEventListener("mouseup", handleTouchEnd);
      };
      const trackOffset = valueToPercent(range2 ? values2[0] : min2, min2, max2);
      const trackLeap = valueToPercent(values2[values2.length - 1], min2, max2) - trackOffset;
      const getRootProps = (otherHandlers = {}) => {
        const ownEventHandlers = {
          onMouseDown: createHandleMouseDown(otherHandlers || {})
        };
        const mergedEventHandlers = _extends$1({}, otherHandlers, ownEventHandlers);
        return _extends$1({
          ref: handleRef
        }, mergedEventHandlers);
      };
      const createHandleMouseOver = (otherHandlers) => (event) => {
        var _otherHandlers$onMous2;
        (_otherHandlers$onMous2 = otherHandlers.onMouseOver) == null ? void 0 : _otherHandlers$onMous2.call(otherHandlers, event);
        const index = Number(event.currentTarget.getAttribute("data-index"));
        setOpen(index);
      };
      const createHandleMouseLeave = (otherHandlers) => (event) => {
        var _otherHandlers$onMous3;
        (_otherHandlers$onMous3 = otherHandlers.onMouseLeave) == null ? void 0 : _otherHandlers$onMous3.call(otherHandlers, event);
        setOpen(-1);
      };
      const getThumbProps = (otherHandlers = {}) => {
        const ownEventHandlers = {
          onMouseOver: createHandleMouseOver(otherHandlers || {}),
          onMouseLeave: createHandleMouseLeave(otherHandlers || {})
        };
        return _extends$1({}, otherHandlers, ownEventHandlers);
      };
      const getHiddenInputProps = (otherHandlers = {}) => {
        var _parameters$step;
        const ownEventHandlers = {
          onChange: createHandleHiddenInputChange(otherHandlers || {}),
          onFocus: createHandleHiddenInputFocus(otherHandlers || {}),
          onBlur: createHandleHiddenInputBlur(otherHandlers || {})
        };
        const mergedEventHandlers = _extends$1({}, otherHandlers, ownEventHandlers);
        return _extends$1({
          tabIndex,
          "aria-labelledby": ariaLabelledby,
          "aria-orientation": orientation,
          "aria-valuemax": scale(max2),
          "aria-valuemin": scale(min2),
          name,
          type: "range",
          min: parameters.min,
          max: parameters.max,
          step: (_parameters$step = parameters.step) != null ? _parameters$step : void 0,
          disabled
        }, mergedEventHandlers, {
          style: _extends$1({}, visuallyHidden$1, {
            direction: isRtl ? "rtl" : "ltr",
            width: "100%",
            height: "100%"
          })
        });
      };
      return {
        active,
        axis,
        axisProps,
        dragging,
        focusedThumbIndex,
        getHiddenInputProps,
        getRootProps,
        getThumbProps,
        marks,
        open,
        range: range2,
        rootRef: handleRef,
        trackLeap,
        trackOffset,
        values: values2
      };
    }
    const _excluded$1x = ["onChange", "maxRows", "minRows", "style", "value"];
    function getStyleValue(value2) {
      return parseInt(value2, 10) || 0;
    }
    const styles$4 = {
      shadow: {
        visibility: "hidden",
        position: "absolute",
        overflow: "hidden",
        height: 0,
        top: 0,
        left: 0,
        transform: "translateZ(0)"
      }
    };
    function isEmpty$1(obj) {
      return obj === void 0 || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflow;
    }
    const TextareaAutosize = /* @__PURE__ */ react.exports.forwardRef(function TextareaAutosize2(props, forwardedRef) {
      const {
        onChange,
        maxRows,
        minRows = 1,
        style: style2,
        value: value2
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1x);
      const {
        current: isControlled
      } = react.exports.useRef(value2 != null);
      const inputRef = react.exports.useRef(null);
      const handleRef = useForkRef(forwardedRef, inputRef);
      const shadowRef = react.exports.useRef(null);
      const renders = react.exports.useRef(0);
      const [state, setState] = react.exports.useState({
        outerHeightStyle: 0
      });
      const getUpdatedState = react.exports.useCallback(() => {
        const input = inputRef.current;
        const containerWindow = ownerWindow(input);
        const computedStyle = containerWindow.getComputedStyle(input);
        if (computedStyle.width === "0px") {
          return {
            outerHeightStyle: 0
          };
        }
        const inputShallow = shadowRef.current;
        inputShallow.style.width = computedStyle.width;
        inputShallow.value = input.value || props.placeholder || "x";
        if (inputShallow.value.slice(-1) === "\n") {
          inputShallow.value += " ";
        }
        const boxSizing2 = computedStyle.boxSizing;
        const padding2 = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);
        const border2 = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth);
        const innerHeight = inputShallow.scrollHeight;
        inputShallow.value = "x";
        const singleRowHeight = inputShallow.scrollHeight;
        let outerHeight = innerHeight;
        if (minRows) {
          outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
        }
        if (maxRows) {
          outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
        }
        outerHeight = Math.max(outerHeight, singleRowHeight);
        const outerHeightStyle = outerHeight + (boxSizing2 === "border-box" ? padding2 + border2 : 0);
        const overflow = Math.abs(outerHeight - innerHeight) <= 1;
        return {
          outerHeightStyle,
          overflow
        };
      }, [maxRows, minRows, props.placeholder]);
      const updateState = (prevState, newState) => {
        const {
          outerHeightStyle,
          overflow
        } = newState;
        if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {
          renders.current += 1;
          return {
            overflow,
            outerHeightStyle
          };
        }
        {
          if (renders.current === 20) {
            console.error(["MUI: Too many re-renders. The layout is unstable.", "TextareaAutosize limits the number of renders to prevent an infinite loop."].join("\n"));
          }
        }
        return prevState;
      };
      const syncHeight = react.exports.useCallback(() => {
        const newState = getUpdatedState();
        if (isEmpty$1(newState)) {
          return;
        }
        setState((prevState) => {
          return updateState(prevState, newState);
        });
      }, [getUpdatedState]);
      const syncHeightWithFlushSync = () => {
        const newState = getUpdatedState();
        if (isEmpty$1(newState)) {
          return;
        }
        reactDom.exports.flushSync(() => {
          setState((prevState) => {
            return updateState(prevState, newState);
          });
        });
      };
      react.exports.useEffect(() => {
        const handleResize = debounce$3(() => {
          renders.current = 0;
          if (inputRef.current) {
            syncHeightWithFlushSync();
          }
        });
        let resizeObserver;
        const input = inputRef.current;
        const containerWindow = ownerWindow(input);
        containerWindow.addEventListener("resize", handleResize);
        if (typeof ResizeObserver !== "undefined") {
          resizeObserver = new ResizeObserver(handleResize);
          resizeObserver.observe(input);
        }
        return () => {
          handleResize.clear();
          containerWindow.removeEventListener("resize", handleResize);
          if (resizeObserver) {
            resizeObserver.disconnect();
          }
        };
      });
      useEnhancedEffect$1(() => {
        syncHeight();
      });
      react.exports.useEffect(() => {
        renders.current = 0;
      }, [value2]);
      const handleChange = (event) => {
        renders.current = 0;
        if (!isControlled) {
          syncHeight();
        }
        if (onChange) {
          onChange(event);
        }
      };
      return /* @__PURE__ */ jsxs(react.exports.Fragment, {
        children: [/* @__PURE__ */ jsx("textarea", _extends$1({
          value: value2,
          onChange: handleChange,
          ref: handleRef,
          rows: minRows,
          style: _extends$1({
            height: state.outerHeightStyle,
            overflow: state.overflow ? "hidden" : void 0
          }, style2)
        }, other)), /* @__PURE__ */ jsx("textarea", {
          "aria-hidden": true,
          className: props.className,
          readOnly: true,
          ref: shadowRef,
          tabIndex: -1,
          style: _extends$1({}, styles$4.shadow, style2, {
            padding: 0
          })
        })]
      });
    });
    TextareaAutosize.propTypes = {
      className: propTypes.exports.string,
      maxRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),
      minRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),
      onChange: propTypes.exports.func,
      placeholder: propTypes.exports.string,
      style: propTypes.exports.object,
      value: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.string), propTypes.exports.number, propTypes.exports.string])
    };
    const TextareaAutosize$1 = TextareaAutosize;
    function stripDiacritics(string) {
      return typeof string.normalize !== "undefined" ? string.normalize("NFD").replace(/[\u0300-\u036f]/g, "") : string;
    }
    function createFilterOptions(config2 = {}) {
      const {
        ignoreAccents = true,
        ignoreCase = true,
        limit,
        matchFrom = "any",
        stringify: stringify2,
        trim: trim2 = false
      } = config2;
      return (options, {
        inputValue,
        getOptionLabel
      }) => {
        let input = trim2 ? inputValue.trim() : inputValue;
        if (ignoreCase) {
          input = input.toLowerCase();
        }
        if (ignoreAccents) {
          input = stripDiacritics(input);
        }
        const filteredOptions = !input ? options : options.filter((option) => {
          let candidate = (stringify2 || getOptionLabel)(option);
          if (ignoreCase) {
            candidate = candidate.toLowerCase();
          }
          if (ignoreAccents) {
            candidate = stripDiacritics(candidate);
          }
          return matchFrom === "start" ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
        });
        return typeof limit === "number" ? filteredOptions.slice(0, limit) : filteredOptions;
      };
    }
    function findIndex(array, comp) {
      for (let i = 0; i < array.length; i += 1) {
        if (comp(array[i])) {
          return i;
        }
      }
      return -1;
    }
    const defaultFilterOptions$1 = createFilterOptions();
    const pageSize = 5;
    const defaultIsActiveElementInListbox = (listboxRef) => {
      var _listboxRef$current$p;
      return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));
    };
    function useAutocomplete(props) {
      const {
        unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,
        unstable_classNamePrefix = "Mui",
        autoComplete = false,
        autoHighlight = false,
        autoSelect = false,
        blurOnSelect = false,
        clearOnBlur = !props.freeSolo,
        clearOnEscape = false,
        componentName = "useAutocomplete",
        defaultValue: defaultValue2 = props.multiple ? [] : null,
        disableClearable = false,
        disableCloseOnSelect = false,
        disabled: disabledProp,
        disabledItemsFocusable = false,
        disableListWrap = false,
        filterOptions = defaultFilterOptions$1,
        filterSelectedOptions = false,
        freeSolo = false,
        getOptionDisabled,
        getOptionLabel: getOptionLabelProp = (option) => {
          var _option$label;
          return (_option$label = option.label) != null ? _option$label : option;
        },
        groupBy,
        handleHomeEndKeys = !props.freeSolo,
        id: idProp,
        includeInputInList = false,
        inputValue: inputValueProp,
        isOptionEqualToValue = (option, value3) => option === value3,
        multiple = false,
        onChange,
        onClose,
        onHighlightChange,
        onInputChange,
        onOpen,
        open: openProp,
        openOnFocus = false,
        options,
        readOnly = false,
        selectOnFocus = !props.freeSolo,
        value: valueProp
      } = props;
      const id = useId(idProp);
      let getOptionLabel = getOptionLabelProp;
      getOptionLabel = (option) => {
        const optionLabel = getOptionLabelProp(option);
        if (typeof optionLabel !== "string") {
          {
            const erroneousReturn = optionLabel === void 0 ? "undefined" : `${typeof optionLabel} (${optionLabel})`;
            console.error(`MUI: The \`getOptionLabel\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);
          }
          return String(optionLabel);
        }
        return optionLabel;
      };
      const ignoreFocus = react.exports.useRef(false);
      const firstFocus = react.exports.useRef(true);
      const inputRef = react.exports.useRef(null);
      const listboxRef = react.exports.useRef(null);
      const [anchorEl, setAnchorEl] = react.exports.useState(null);
      const [focusedTag, setFocusedTag] = react.exports.useState(-1);
      const defaultHighlighted = autoHighlight ? 0 : -1;
      const highlightedIndexRef = react.exports.useRef(defaultHighlighted);
      const [value2, setValueState] = useControlled({
        controlled: valueProp,
        default: defaultValue2,
        name: componentName
      });
      const [inputValue, setInputValueState] = useControlled({
        controlled: inputValueProp,
        default: "",
        name: componentName,
        state: "inputValue"
      });
      const [focused, setFocused] = react.exports.useState(false);
      const resetInputValue = react.exports.useCallback((event, newValue) => {
        const isOptionSelected = multiple ? value2.length < newValue.length : newValue !== null;
        if (!isOptionSelected && !clearOnBlur) {
          return;
        }
        let newInputValue;
        if (multiple) {
          newInputValue = "";
        } else if (newValue == null) {
          newInputValue = "";
        } else {
          const optionLabel = getOptionLabel(newValue);
          newInputValue = typeof optionLabel === "string" ? optionLabel : "";
        }
        if (inputValue === newInputValue) {
          return;
        }
        setInputValueState(newInputValue);
        if (onInputChange) {
          onInputChange(event, newInputValue, "reset");
        }
      }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value2]);
      const [open, setOpenState] = useControlled({
        controlled: openProp,
        default: false,
        name: componentName,
        state: "open"
      });
      const [inputPristine, setInputPristine] = react.exports.useState(true);
      const inputValueIsSelectedValue = !multiple && value2 != null && inputValue === getOptionLabel(value2);
      const popupOpen = open && !readOnly;
      const filteredOptions = popupOpen ? filterOptions(
        options.filter((option) => {
          if (filterSelectedOptions && (multiple ? value2 : [value2]).some((value22) => value22 !== null && isOptionEqualToValue(option, value22))) {
            return false;
          }
          return true;
        }),
        {
          inputValue: inputValueIsSelectedValue && inputPristine ? "" : inputValue,
          getOptionLabel
        }
      ) : [];
      const previousProps = usePreviousProps$1({
        filteredOptions,
        value: value2
      });
      react.exports.useEffect(() => {
        const valueChange = value2 !== previousProps.value;
        if (focused && !valueChange) {
          return;
        }
        if (freeSolo && !valueChange) {
          return;
        }
        resetInputValue(null, value2);
      }, [value2, resetInputValue, focused, previousProps.value, freeSolo]);
      const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;
      {
        if (value2 !== null && !freeSolo && options.length > 0) {
          const missingValue = (multiple ? value2 : [value2]).filter((value22) => !options.some((option) => isOptionEqualToValue(option, value22)));
          if (missingValue.length > 0) {
            console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\`.`, "You can use the `isOptionEqualToValue` prop to customize the equality test."].join("\n"));
          }
        }
      }
      const focusTag = useEventCallback((tagToFocus) => {
        if (tagToFocus === -1) {
          inputRef.current.focus();
        } else {
          anchorEl.querySelector(`[data-tag-index="${tagToFocus}"]`).focus();
        }
      });
      react.exports.useEffect(() => {
        if (multiple && focusedTag > value2.length - 1) {
          setFocusedTag(-1);
          focusTag(-1);
        }
      }, [value2, multiple, focusedTag, focusTag]);
      function validOptionIndex(index, direction) {
        if (!listboxRef.current || index === -1) {
          return -1;
        }
        let nextFocus = index;
        while (true) {
          if (direction === "next" && nextFocus === filteredOptions.length || direction === "previous" && nextFocus === -1) {
            return -1;
          }
          const option = listboxRef.current.querySelector(`[data-option-index="${nextFocus}"]`);
          const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute("aria-disabled") === "true";
          if (option && !option.hasAttribute("tabindex") || nextFocusDisabled) {
            nextFocus += direction === "next" ? 1 : -1;
          } else {
            return nextFocus;
          }
        }
      }
      const setHighlightedIndex = useEventCallback(({
        event,
        index,
        reason = "auto"
      }) => {
        highlightedIndexRef.current = index;
        if (index === -1) {
          inputRef.current.removeAttribute("aria-activedescendant");
        } else {
          inputRef.current.setAttribute("aria-activedescendant", `${id}-option-${index}`);
        }
        if (onHighlightChange) {
          onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);
        }
        if (!listboxRef.current) {
          return;
        }
        const prev2 = listboxRef.current.querySelector(`[role="option"].${unstable_classNamePrefix}-focused`);
        if (prev2) {
          prev2.classList.remove(`${unstable_classNamePrefix}-focused`);
          prev2.classList.remove(`${unstable_classNamePrefix}-focusVisible`);
        }
        const listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]');
        if (!listboxNode) {
          return;
        }
        if (index === -1) {
          listboxNode.scrollTop = 0;
          return;
        }
        const option = listboxRef.current.querySelector(`[data-option-index="${index}"]`);
        if (!option) {
          return;
        }
        option.classList.add(`${unstable_classNamePrefix}-focused`);
        if (reason === "keyboard") {
          option.classList.add(`${unstable_classNamePrefix}-focusVisible`);
        }
        if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== "mouse") {
          const element = option;
          const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
          const elementBottom = element.offsetTop + element.offsetHeight;
          if (elementBottom > scrollBottom) {
            listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
          } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {
            listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
          }
        }
      });
      const changeHighlightedIndex = useEventCallback(({
        event,
        diff: diff2,
        direction = "next",
        reason = "auto"
      }) => {
        if (!popupOpen) {
          return;
        }
        const getNextIndex = () => {
          const maxIndex = filteredOptions.length - 1;
          if (diff2 === "reset") {
            return defaultHighlighted;
          }
          if (diff2 === "start") {
            return 0;
          }
          if (diff2 === "end") {
            return maxIndex;
          }
          const newIndex = highlightedIndexRef.current + diff2;
          if (newIndex < 0) {
            if (newIndex === -1 && includeInputInList) {
              return -1;
            }
            if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff2) > 1) {
              return 0;
            }
            return maxIndex;
          }
          if (newIndex > maxIndex) {
            if (newIndex === maxIndex + 1 && includeInputInList) {
              return -1;
            }
            if (disableListWrap || Math.abs(diff2) > 1) {
              return maxIndex;
            }
            return 0;
          }
          return newIndex;
        };
        const nextIndex = validOptionIndex(getNextIndex(), direction);
        setHighlightedIndex({
          index: nextIndex,
          reason,
          event
        });
        if (autoComplete && diff2 !== "reset") {
          if (nextIndex === -1) {
            inputRef.current.value = inputValue;
          } else {
            const option = getOptionLabel(filteredOptions[nextIndex]);
            inputRef.current.value = option;
            const index = option.toLowerCase().indexOf(inputValue.toLowerCase());
            if (index === 0 && inputValue.length > 0) {
              inputRef.current.setSelectionRange(inputValue.length, option.length);
            }
          }
        }
      });
      const checkHighlightedOptionExists = () => {
        const isSameValue = (value1, value22) => {
          const label1 = value1 ? getOptionLabel(value1) : "";
          const label2 = value22 ? getOptionLabel(value22) : "";
          return label1 === label2;
        };
        if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && (multiple ? value2.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value2[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value2))) {
          const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];
          if (previousHighlightedOption) {
            const previousHighlightedOptionExists = filteredOptions.some((option) => {
              return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);
            });
            if (previousHighlightedOptionExists) {
              return true;
            }
          }
        }
        return false;
      };
      const syncHighlightedIndex = react.exports.useCallback(() => {
        if (!popupOpen) {
          return;
        }
        if (checkHighlightedOptionExists()) {
          return;
        }
        const valueItem = multiple ? value2[0] : value2;
        if (filteredOptions.length === 0 || valueItem == null) {
          changeHighlightedIndex({
            diff: "reset"
          });
          return;
        }
        if (!listboxRef.current) {
          return;
        }
        if (valueItem != null) {
          const currentOption = filteredOptions[highlightedIndexRef.current];
          if (multiple && currentOption && findIndex(value2, (val) => isOptionEqualToValue(currentOption, val)) !== -1) {
            return;
          }
          const itemIndex = findIndex(filteredOptions, (optionItem) => isOptionEqualToValue(optionItem, valueItem));
          if (itemIndex === -1) {
            changeHighlightedIndex({
              diff: "reset"
            });
          } else {
            setHighlightedIndex({
              index: itemIndex
            });
          }
          return;
        }
        if (highlightedIndexRef.current >= filteredOptions.length - 1) {
          setHighlightedIndex({
            index: filteredOptions.length - 1
          });
          return;
        }
        setHighlightedIndex({
          index: highlightedIndexRef.current
        });
      }, [
        filteredOptions.length,
        multiple ? false : value2,
        filterSelectedOptions,
        changeHighlightedIndex,
        setHighlightedIndex,
        popupOpen,
        inputValue,
        multiple
      ]);
      const handleListboxRef = useEventCallback((node2) => {
        setRef(listboxRef, node2);
        if (!node2) {
          return;
        }
        syncHighlightedIndex();
      });
      {
        react.exports.useEffect(() => {
          if (!inputRef.current || inputRef.current.nodeName !== "INPUT") {
            if (inputRef.current && inputRef.current.nodeName === "TEXTAREA") {
              console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (e.g. enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join("\n"));
            } else {
              console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, "", componentName === "useAutocomplete" ? "Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed." : "Make sure you have customized the input component correctly."].join("\n"));
            }
          }
        }, [componentName]);
      }
      react.exports.useEffect(() => {
        syncHighlightedIndex();
      }, [syncHighlightedIndex]);
      const handleOpen = (event) => {
        if (open) {
          return;
        }
        setOpenState(true);
        setInputPristine(true);
        if (onOpen) {
          onOpen(event);
        }
      };
      const handleClose = (event, reason) => {
        if (!open) {
          return;
        }
        setOpenState(false);
        if (onClose) {
          onClose(event, reason);
        }
      };
      const handleValue = (event, newValue, reason, details) => {
        if (multiple) {
          if (value2.length === newValue.length && value2.every((val, i) => val === newValue[i])) {
            return;
          }
        } else if (value2 === newValue) {
          return;
        }
        if (onChange) {
          onChange(event, newValue, reason, details);
        }
        setValueState(newValue);
      };
      const isTouch = react.exports.useRef(false);
      const selectNewValue = (event, option, reasonProp = "selectOption", origin = "options") => {
        let reason = reasonProp;
        let newValue = option;
        if (multiple) {
          newValue = Array.isArray(value2) ? value2.slice() : [];
          {
            const matches = newValue.filter((val) => isOptionEqualToValue(option, val));
            if (matches.length > 1) {
              console.error([`MUI: The \`isOptionEqualToValue\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join("\n"));
            }
          }
          const itemIndex = findIndex(newValue, (valueItem) => isOptionEqualToValue(option, valueItem));
          if (itemIndex === -1) {
            newValue.push(option);
          } else if (origin !== "freeSolo") {
            newValue.splice(itemIndex, 1);
            reason = "removeOption";
          }
        }
        resetInputValue(event, newValue);
        handleValue(event, newValue, reason, {
          option
        });
        if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {
          handleClose(event, reason);
        }
        if (blurOnSelect === true || blurOnSelect === "touch" && isTouch.current || blurOnSelect === "mouse" && !isTouch.current) {
          inputRef.current.blur();
        }
      };
      function validTagIndex(index, direction) {
        if (index === -1) {
          return -1;
        }
        let nextFocus = index;
        while (true) {
          if (direction === "next" && nextFocus === value2.length || direction === "previous" && nextFocus === -1) {
            return -1;
          }
          const option = anchorEl.querySelector(`[data-tag-index="${nextFocus}"]`);
          if (!option || !option.hasAttribute("tabindex") || option.disabled || option.getAttribute("aria-disabled") === "true") {
            nextFocus += direction === "next" ? 1 : -1;
          } else {
            return nextFocus;
          }
        }
      }
      const handleFocusTag = (event, direction) => {
        if (!multiple) {
          return;
        }
        if (inputValue === "") {
          handleClose(event, "toggleInput");
        }
        let nextTag = focusedTag;
        if (focusedTag === -1) {
          if (inputValue === "" && direction === "previous") {
            nextTag = value2.length - 1;
          }
        } else {
          nextTag += direction === "next" ? 1 : -1;
          if (nextTag < 0) {
            nextTag = 0;
          }
          if (nextTag === value2.length) {
            nextTag = -1;
          }
        }
        nextTag = validTagIndex(nextTag, direction);
        setFocusedTag(nextTag);
        focusTag(nextTag);
      };
      const handleClear = (event) => {
        ignoreFocus.current = true;
        setInputValueState("");
        if (onInputChange) {
          onInputChange(event, "", "clear");
        }
        handleValue(event, multiple ? [] : null, "clear");
      };
      const handleKeyDown2 = (other) => (event) => {
        if (other.onKeyDown) {
          other.onKeyDown(event);
        }
        if (event.defaultMuiPrevented) {
          return;
        }
        if (focusedTag !== -1 && ["ArrowLeft", "ArrowRight"].indexOf(event.key) === -1) {
          setFocusedTag(-1);
          focusTag(-1);
        }
        if (event.which !== 229) {
          switch (event.key) {
            case "Home":
              if (popupOpen && handleHomeEndKeys) {
                event.preventDefault();
                changeHighlightedIndex({
                  diff: "start",
                  direction: "next",
                  reason: "keyboard",
                  event
                });
              }
              break;
            case "End":
              if (popupOpen && handleHomeEndKeys) {
                event.preventDefault();
                changeHighlightedIndex({
                  diff: "end",
                  direction: "previous",
                  reason: "keyboard",
                  event
                });
              }
              break;
            case "PageUp":
              event.preventDefault();
              changeHighlightedIndex({
                diff: -pageSize,
                direction: "previous",
                reason: "keyboard",
                event
              });
              handleOpen(event);
              break;
            case "PageDown":
              event.preventDefault();
              changeHighlightedIndex({
                diff: pageSize,
                direction: "next",
                reason: "keyboard",
                event
              });
              handleOpen(event);
              break;
            case "ArrowDown":
              event.preventDefault();
              changeHighlightedIndex({
                diff: 1,
                direction: "next",
                reason: "keyboard",
                event
              });
              handleOpen(event);
              break;
            case "ArrowUp":
              event.preventDefault();
              changeHighlightedIndex({
                diff: -1,
                direction: "previous",
                reason: "keyboard",
                event
              });
              handleOpen(event);
              break;
            case "ArrowLeft":
              handleFocusTag(event, "previous");
              break;
            case "ArrowRight":
              handleFocusTag(event, "next");
              break;
            case "Enter":
              if (highlightedIndexRef.current !== -1 && popupOpen) {
                const option = filteredOptions[highlightedIndexRef.current];
                const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
                event.preventDefault();
                if (disabled) {
                  return;
                }
                selectNewValue(event, option, "selectOption");
                if (autoComplete) {
                  inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
                }
              } else if (freeSolo && inputValue !== "" && inputValueIsSelectedValue === false) {
                if (multiple) {
                  event.preventDefault();
                }
                selectNewValue(event, inputValue, "createOption", "freeSolo");
              }
              break;
            case "Escape":
              if (popupOpen) {
                event.preventDefault();
                event.stopPropagation();
                handleClose(event, "escape");
              } else if (clearOnEscape && (inputValue !== "" || multiple && value2.length > 0)) {
                event.preventDefault();
                event.stopPropagation();
                handleClear(event);
              }
              break;
            case "Backspace":
              if (multiple && !readOnly && inputValue === "" && value2.length > 0) {
                const index = focusedTag === -1 ? value2.length - 1 : focusedTag;
                const newValue = value2.slice();
                newValue.splice(index, 1);
                handleValue(event, newValue, "removeOption", {
                  option: value2[index]
                });
              }
              break;
            case "Delete":
              if (multiple && !readOnly && inputValue === "" && value2.length > 0 && focusedTag !== -1) {
                const index = focusedTag;
                const newValue = value2.slice();
                newValue.splice(index, 1);
                handleValue(event, newValue, "removeOption", {
                  option: value2[index]
                });
              }
              break;
          }
        }
      };
      const handleFocus = (event) => {
        setFocused(true);
        if (openOnFocus && !ignoreFocus.current) {
          handleOpen(event);
        }
      };
      const handleBlur = (event) => {
        if (unstable_isActiveElementInListbox(listboxRef)) {
          inputRef.current.focus();
          return;
        }
        setFocused(false);
        firstFocus.current = true;
        ignoreFocus.current = false;
        if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {
          selectNewValue(event, filteredOptions[highlightedIndexRef.current], "blur");
        } else if (autoSelect && freeSolo && inputValue !== "") {
          selectNewValue(event, inputValue, "blur", "freeSolo");
        } else if (clearOnBlur) {
          resetInputValue(event, value2);
        }
        handleClose(event, "blur");
      };
      const handleInputChange = (event) => {
        const newValue = event.target.value;
        if (inputValue !== newValue) {
          setInputValueState(newValue);
          setInputPristine(false);
          if (onInputChange) {
            onInputChange(event, newValue, "input");
          }
        }
        if (newValue === "") {
          if (!disableClearable && !multiple) {
            handleValue(event, null, "clear");
          }
        } else {
          handleOpen(event);
        }
      };
      const handleOptionMouseMove = (event) => {
        const index = Number(event.currentTarget.getAttribute("data-option-index"));
        if (highlightedIndexRef.current !== index) {
          setHighlightedIndex({
            event,
            index,
            reason: "mouse"
          });
        }
      };
      const handleOptionTouchStart = (event) => {
        setHighlightedIndex({
          event,
          index: Number(event.currentTarget.getAttribute("data-option-index")),
          reason: "touch"
        });
        isTouch.current = true;
      };
      const handleOptionClick = (event) => {
        const index = Number(event.currentTarget.getAttribute("data-option-index"));
        selectNewValue(event, filteredOptions[index], "selectOption");
        isTouch.current = false;
      };
      const handleTagDelete = (index) => (event) => {
        const newValue = value2.slice();
        newValue.splice(index, 1);
        handleValue(event, newValue, "removeOption", {
          option: value2[index]
        });
      };
      const handlePopupIndicator = (event) => {
        if (open) {
          handleClose(event, "toggleInput");
        } else {
          handleOpen(event);
        }
      };
      const handleMouseDown = (event) => {
        if (event.target.getAttribute("id") !== id) {
          event.preventDefault();
        }
      };
      const handleClick = () => {
        inputRef.current.focus();
        if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {
          inputRef.current.select();
        }
        firstFocus.current = false;
      };
      const handleInputMouseDown = (event) => {
        if (inputValue === "" || !open) {
          handlePopupIndicator(event);
        }
      };
      let dirty = freeSolo && inputValue.length > 0;
      dirty = dirty || (multiple ? value2.length > 0 : value2 !== null);
      let groupedOptions = filteredOptions;
      if (groupBy) {
        const indexBy = /* @__PURE__ */ new Map();
        let warn2 = false;
        groupedOptions = filteredOptions.reduce((acc, option, index) => {
          const group2 = groupBy(option);
          if (acc.length > 0 && acc[acc.length - 1].group === group2) {
            acc[acc.length - 1].options.push(option);
          } else {
            {
              if (indexBy.get(group2) && !warn2) {
                console.warn(`MUI: The options provided combined with the \`groupBy\` method of ${componentName} returns duplicated headers.`, "You can solve the issue by sorting the options with the output of `groupBy`.");
                warn2 = true;
              }
              indexBy.set(group2, true);
            }
            acc.push({
              key: index,
              index,
              group: group2,
              options: [option]
            });
          }
          return acc;
        }, []);
      }
      if (disabledProp && focused) {
        handleBlur();
      }
      return {
        getRootProps: (other = {}) => _extends$1({
          "aria-owns": listboxAvailable ? `${id}-listbox` : null
        }, other, {
          onKeyDown: handleKeyDown2(other),
          onMouseDown: handleMouseDown,
          onClick: handleClick
        }),
        getInputLabelProps: () => ({
          id: `${id}-label`,
          htmlFor: id
        }),
        getInputProps: () => ({
          id,
          value: inputValue,
          onBlur: handleBlur,
          onFocus: handleFocus,
          onChange: handleInputChange,
          onMouseDown: handleInputMouseDown,
          "aria-activedescendant": popupOpen ? "" : null,
          "aria-autocomplete": autoComplete ? "both" : "list",
          "aria-controls": listboxAvailable ? `${id}-listbox` : void 0,
          "aria-expanded": listboxAvailable,
          autoComplete: "off",
          ref: inputRef,
          autoCapitalize: "none",
          spellCheck: "false",
          role: "combobox",
          disabled: disabledProp
        }),
        getClearProps: () => ({
          tabIndex: -1,
          onClick: handleClear
        }),
        getPopupIndicatorProps: () => ({
          tabIndex: -1,
          onClick: handlePopupIndicator
        }),
        getTagProps: ({
          index
        }) => _extends$1({
          key: index,
          "data-tag-index": index,
          tabIndex: -1
        }, !readOnly && {
          onDelete: handleTagDelete(index)
        }),
        getListboxProps: () => ({
          role: "listbox",
          id: `${id}-listbox`,
          "aria-labelledby": `${id}-label`,
          ref: handleListboxRef,
          onMouseDown: (event) => {
            event.preventDefault();
          }
        }),
        getOptionProps: ({
          index,
          option
        }) => {
          const selected = (multiple ? value2 : [value2]).some((value22) => value22 != null && isOptionEqualToValue(option, value22));
          const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
          return {
            key: getOptionLabel(option),
            tabIndex: -1,
            role: "option",
            id: `${id}-option-${index}`,
            onMouseMove: handleOptionMouseMove,
            onClick: handleOptionClick,
            onTouchStart: handleOptionTouchStart,
            "data-option-index": index,
            "aria-disabled": disabled,
            "aria-selected": selected
          };
        },
        id,
        inputValue,
        value: value2,
        dirty,
        expanded: popupOpen && anchorEl,
        popupOpen,
        focused: focused || focusedTag !== -1,
        anchorEl,
        setAnchorEl,
        focusedTag,
        groupedOptions
      };
    }
    function _setPrototypeOf$1(o, p) {
      _setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf$1(o, p);
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      _setPrototypeOf$1(subClass, superClass);
    }
    function hasClass(element, className) {
      if (element.classList)
        return !!className && element.classList.contains(className);
      return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
    }
    function addClass(element, className) {
      if (element.classList)
        element.classList.add(className);
      else if (!hasClass(element, className))
        if (typeof element.className === "string")
          element.className = element.className + " " + className;
        else
          element.setAttribute("class", (element.className && element.className.baseVal || "") + " " + className);
    }
    function replaceClassName(origClass, classToRemove) {
      return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
    }
    function removeClass$1(element, className) {
      if (element.classList) {
        element.classList.remove(className);
      } else if (typeof element.className === "string") {
        element.className = replaceClassName(element.className, className);
      } else {
        element.setAttribute("class", replaceClassName(element.className && element.className.baseVal || "", className));
      }
    }
    const config$4 = {
      disabled: false
    };
    var timeoutsShape = propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.shape({
      enter: propTypes.exports.number,
      exit: propTypes.exports.number,
      appear: propTypes.exports.number
    }).isRequired]);
    var classNamesShape = propTypes.exports.oneOfType([propTypes.exports.string, propTypes.exports.shape({
      enter: propTypes.exports.string,
      exit: propTypes.exports.string,
      active: propTypes.exports.string
    }), propTypes.exports.shape({
      enter: propTypes.exports.string,
      enterDone: propTypes.exports.string,
      enterActive: propTypes.exports.string,
      exit: propTypes.exports.string,
      exitDone: propTypes.exports.string,
      exitActive: propTypes.exports.string
    })]);
    const TransitionGroupContext = React.createContext(null);
    var forceReflow = function forceReflow2(node2) {
      return node2.scrollTop;
    };
    var jsxDevRuntime = { exports: {} };
    var reactJsxDevRuntime_development = {};
    /** @license React v17.0.2
     * react-jsx-dev-runtime.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    (function(exports2) {
      {
        (function() {
          var React2 = react.exports;
          var _assign = objectAssign;
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports2.Fragment = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports2.Fragment = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            symbolFor("react.scope");
            symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format2) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning2("error", format2, args);
            }
          }
          function printWarning2(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === exports2.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName2(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case exports2.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context2 = type;
                  return getContextName(context2) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName2(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match5 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match5 && match5[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures2 = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes2(typeSpecs, values2, location, componentName, element) {
            {
              var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures2)) {
                    loggedTypeFailures2[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config2) {
            {
              if (hasOwnProperty2.call(config2, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.ref !== void 0;
          }
          function hasValidKey(config2) {
            {
              if (hasOwnProperty2.call(config2, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config2, self2) {
            {
              if (typeof config2.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config2.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV2(type, config2, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                key = "" + maybeKey;
              }
              if (hasValidKey(config2)) {
                key = "" + config2.key;
              }
              if (hasValidRef(config2)) {
                ref = config2.ref;
                warnIfStringRefCannotBeAutoConverted(config2, self2);
              }
              for (propName in config2) {
                if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config2[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps2 = type.defaultProps;
                for (propName in defaultProps2) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps2[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentName(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            {
              if (typeof node2 !== "object") {
                return;
              }
              if (Array.isArray(node2)) {
                for (var i = 0; i < node2.length; i++) {
                  var child = node2[i];
                  if (isValidElement(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement(node2)) {
                if (node2._store) {
                  node2._store.validated = true;
                }
              } else if (node2) {
                var iteratorFn = getIteratorFn(node2);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node2.entries) {
                    var iterator = iteratorFn.call(node2);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes2;
              if (typeof type === "function") {
                propTypes2 = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes2 = type.propTypes;
              } else {
                return;
              }
              if (propTypes2) {
                var name = getComponentName(type);
                checkPropTypes2(propTypes2, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i = 0; i < keys2.length; i++) {
                var key = keys2[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (Array.isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV2(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (Array.isArray(children)) {
                      for (var i = 0; i < children.length; i++) {
                        validateChildKeys(children[i], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === exports2.Fragment) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          var jsxDEV$1 = jsxWithValidation;
          exports2.jsxDEV = jsxDEV$1;
        })();
      }
    })(reactJsxDevRuntime_development);
    (function(module2) {
      {
        module2.exports = reactJsxDevRuntime_development;
      }
    })(jsxDevRuntime);
    const Fragment = jsxDevRuntime.exports.Fragment;
    const jsxDEV = jsxDevRuntime.exports.jsxDEV;
    var _jsxFileName$13 = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/node_modules/.pnpm/react-transition-group@4.4.5_sfoxds7t5ydpegc3knd667wn6m/node_modules/react-transition-group/esm/Transition.js";
    var UNMOUNTED = "unmounted";
    var EXITED = "exited";
    var ENTERING = "entering";
    var ENTERED = "entered";
    var EXITING = "exiting";
    var Transition = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose(Transition2, _React$Component);
      function Transition2(props, context2) {
        var _this;
        _this = _React$Component.call(this, props, context2) || this;
        var parentGroup = context2;
        var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
        var initialStatus;
        _this.appearStatus = null;
        if (props.in) {
          if (appear) {
            initialStatus = EXITED;
            _this.appearStatus = ENTERING;
          } else {
            initialStatus = ENTERED;
          }
        } else {
          if (props.unmountOnExit || props.mountOnEnter) {
            initialStatus = UNMOUNTED;
          } else {
            initialStatus = EXITED;
          }
        }
        _this.state = {
          status: initialStatus
        };
        _this.nextCallback = null;
        return _this;
      }
      Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
        var nextIn = _ref.in;
        if (nextIn && prevState.status === UNMOUNTED) {
          return {
            status: EXITED
          };
        }
        return null;
      };
      var _proto = Transition2.prototype;
      _proto.componentDidMount = function componentDidMount() {
        this.updateStatus(true, this.appearStatus);
      };
      _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        var nextStatus = null;
        if (prevProps !== this.props) {
          var status = this.state.status;
          if (this.props.in) {
            if (status !== ENTERING && status !== ENTERED) {
              nextStatus = ENTERING;
            }
          } else {
            if (status === ENTERING || status === ENTERED) {
              nextStatus = EXITING;
            }
          }
        }
        this.updateStatus(false, nextStatus);
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        this.cancelNextCallback();
      };
      _proto.getTimeouts = function getTimeouts() {
        var timeout = this.props.timeout;
        var exit, enter, appear;
        exit = enter = appear = timeout;
        if (timeout != null && typeof timeout !== "number") {
          exit = timeout.exit;
          enter = timeout.enter;
          appear = timeout.appear !== void 0 ? timeout.appear : enter;
        }
        return {
          exit,
          enter,
          appear
        };
      };
      _proto.updateStatus = function updateStatus(mounting, nextStatus) {
        if (mounting === void 0) {
          mounting = false;
        }
        if (nextStatus !== null) {
          this.cancelNextCallback();
          if (nextStatus === ENTERING) {
            if (this.props.unmountOnExit || this.props.mountOnEnter) {
              var node2 = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
              if (node2)
                forceReflow(node2);
            }
            this.performEnter(mounting);
          } else {
            this.performExit();
          }
        } else if (this.props.unmountOnExit && this.state.status === EXITED) {
          this.setState({
            status: UNMOUNTED
          });
        }
      };
      _proto.performEnter = function performEnter(mounting) {
        var _this2 = this;
        var enter = this.props.enter;
        var appearing = this.context ? this.context.isMounting : mounting;
        var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
        var timeouts = this.getTimeouts();
        var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
        if (!mounting && !enter || config$4.disabled) {
          this.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode);
          });
          return;
        }
        this.props.onEnter(maybeNode, maybeAppearing);
        this.safeSetState({
          status: ENTERING
        }, function() {
          _this2.props.onEntering(maybeNode, maybeAppearing);
          _this2.onTransitionEnd(enterTimeout, function() {
            _this2.safeSetState({
              status: ENTERED
            }, function() {
              _this2.props.onEntered(maybeNode, maybeAppearing);
            });
          });
        });
      };
      _proto.performExit = function performExit() {
        var _this3 = this;
        var exit = this.props.exit;
        var timeouts = this.getTimeouts();
        var maybeNode = this.props.nodeRef ? void 0 : ReactDOM.findDOMNode(this);
        if (!exit || config$4.disabled) {
          this.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
          return;
        }
        this.props.onExit(maybeNode);
        this.safeSetState({
          status: EXITING
        }, function() {
          _this3.props.onExiting(maybeNode);
          _this3.onTransitionEnd(timeouts.exit, function() {
            _this3.safeSetState({
              status: EXITED
            }, function() {
              _this3.props.onExited(maybeNode);
            });
          });
        });
      };
      _proto.cancelNextCallback = function cancelNextCallback() {
        if (this.nextCallback !== null) {
          this.nextCallback.cancel();
          this.nextCallback = null;
        }
      };
      _proto.safeSetState = function safeSetState(nextState, callback) {
        callback = this.setNextCallback(callback);
        this.setState(nextState, callback);
      };
      _proto.setNextCallback = function setNextCallback(callback) {
        var _this4 = this;
        var active = true;
        this.nextCallback = function(event) {
          if (active) {
            active = false;
            _this4.nextCallback = null;
            callback(event);
          }
        };
        this.nextCallback.cancel = function() {
          active = false;
        };
        return this.nextCallback;
      };
      _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
        this.setNextCallback(handler);
        var node2 = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
        var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
        if (!node2 || doesNotHaveTimeoutOrListener) {
          setTimeout(this.nextCallback, 0);
          return;
        }
        if (this.props.addEndListener) {
          var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node2, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
          this.props.addEndListener(maybeNode, maybeNextCallback);
        }
        if (timeout != null) {
          setTimeout(this.nextCallback, timeout);
        }
      };
      _proto.render = function render() {
        var status = this.state.status;
        if (status === UNMOUNTED) {
          return null;
        }
        var _this$props = this.props, children = _this$props.children;
        _this$props.in;
        _this$props.mountOnEnter;
        _this$props.unmountOnExit;
        _this$props.appear;
        _this$props.enter;
        _this$props.exit;
        _this$props.timeout;
        _this$props.addEndListener;
        _this$props.onEnter;
        _this$props.onEntering;
        _this$props.onEntered;
        _this$props.onExit;
        _this$props.onExiting;
        _this$props.onExited;
        _this$props.nodeRef;
        var childProps = _objectWithoutPropertiesLoose$1(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
        return /* @__PURE__ */ jsxDEV(TransitionGroupContext.Provider, {
          value: null,
          children: typeof children === "function" ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps)
        }, void 0, false, {
          fileName: _jsxFileName$13,
          lineNumber: 406,
          columnNumber: 7
        }, this);
      };
      return Transition2;
    }(React.Component);
    Transition.contextType = TransitionGroupContext;
    Transition.propTypes = {
      nodeRef: propTypes.exports.shape({
        current: typeof Element === "undefined" ? propTypes.exports.any : function(propValue, key, componentName, location, propFullName, secret) {
          var value2 = propValue[key];
          return propTypes.exports.instanceOf(value2 && "ownerDocument" in value2 ? value2.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
        }
      }),
      children: propTypes.exports.oneOfType([propTypes.exports.func.isRequired, propTypes.exports.element.isRequired]).isRequired,
      in: propTypes.exports.bool,
      mountOnEnter: propTypes.exports.bool,
      unmountOnExit: propTypes.exports.bool,
      appear: propTypes.exports.bool,
      enter: propTypes.exports.bool,
      exit: propTypes.exports.bool,
      timeout: function timeout(props) {
        var pt = timeoutsShape;
        if (!props.addEndListener)
          pt = pt.isRequired;
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        return pt.apply(void 0, [props].concat(args));
      },
      addEndListener: propTypes.exports.func,
      onEnter: propTypes.exports.func,
      onEntering: propTypes.exports.func,
      onEntered: propTypes.exports.func,
      onExit: propTypes.exports.func,
      onExiting: propTypes.exports.func,
      onExited: propTypes.exports.func
    };
    function noop$3() {
    }
    Transition.defaultProps = {
      in: false,
      mountOnEnter: false,
      unmountOnExit: false,
      appear: false,
      enter: true,
      exit: true,
      onEnter: noop$3,
      onEntering: noop$3,
      onEntered: noop$3,
      onExit: noop$3,
      onExiting: noop$3,
      onExited: noop$3
    };
    Transition.UNMOUNTED = UNMOUNTED;
    Transition.EXITED = EXITED;
    Transition.ENTERING = ENTERING;
    Transition.ENTERED = ENTERED;
    Transition.EXITING = EXITING;
    const Transition$1 = Transition;
    var _jsxFileName$12 = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/node_modules/.pnpm/react-transition-group@4.4.5_sfoxds7t5ydpegc3knd667wn6m/node_modules/react-transition-group/esm/CSSTransition.js";
    var _addClass = function addClass$1(node2, classes) {
      return node2 && classes && classes.split(" ").forEach(function(c) {
        return addClass(node2, c);
      });
    };
    var removeClass = function removeClass2(node2, classes) {
      return node2 && classes && classes.split(" ").forEach(function(c) {
        return removeClass$1(node2, c);
      });
    };
    var CSSTransition = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose(CSSTransition2, _React$Component);
      function CSSTransition2() {
        var _this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.appliedClasses = {
          appear: {},
          enter: {},
          exit: {}
        };
        _this.onEnter = function(maybeNode, maybeAppearing) {
          var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing), node2 = _this$resolveArgument[0], appearing = _this$resolveArgument[1];
          _this.removeClasses(node2, "exit");
          _this.addClass(node2, appearing ? "appear" : "enter", "base");
          if (_this.props.onEnter) {
            _this.props.onEnter(maybeNode, maybeAppearing);
          }
        };
        _this.onEntering = function(maybeNode, maybeAppearing) {
          var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing), node2 = _this$resolveArgument2[0], appearing = _this$resolveArgument2[1];
          var type = appearing ? "appear" : "enter";
          _this.addClass(node2, type, "active");
          if (_this.props.onEntering) {
            _this.props.onEntering(maybeNode, maybeAppearing);
          }
        };
        _this.onEntered = function(maybeNode, maybeAppearing) {
          var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing), node2 = _this$resolveArgument3[0], appearing = _this$resolveArgument3[1];
          var type = appearing ? "appear" : "enter";
          _this.removeClasses(node2, type);
          _this.addClass(node2, type, "done");
          if (_this.props.onEntered) {
            _this.props.onEntered(maybeNode, maybeAppearing);
          }
        };
        _this.onExit = function(maybeNode) {
          var _this$resolveArgument4 = _this.resolveArguments(maybeNode), node2 = _this$resolveArgument4[0];
          _this.removeClasses(node2, "appear");
          _this.removeClasses(node2, "enter");
          _this.addClass(node2, "exit", "base");
          if (_this.props.onExit) {
            _this.props.onExit(maybeNode);
          }
        };
        _this.onExiting = function(maybeNode) {
          var _this$resolveArgument5 = _this.resolveArguments(maybeNode), node2 = _this$resolveArgument5[0];
          _this.addClass(node2, "exit", "active");
          if (_this.props.onExiting) {
            _this.props.onExiting(maybeNode);
          }
        };
        _this.onExited = function(maybeNode) {
          var _this$resolveArgument6 = _this.resolveArguments(maybeNode), node2 = _this$resolveArgument6[0];
          _this.removeClasses(node2, "exit");
          _this.addClass(node2, "exit", "done");
          if (_this.props.onExited) {
            _this.props.onExited(maybeNode);
          }
        };
        _this.resolveArguments = function(maybeNode, maybeAppearing) {
          return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] : [maybeNode, maybeAppearing];
        };
        _this.getClassNames = function(type) {
          var classNames2 = _this.props.classNames;
          var isStringClassNames = typeof classNames2 === "string";
          var prefix2 = isStringClassNames && classNames2 ? classNames2 + "-" : "";
          var baseClassName = isStringClassNames ? "" + prefix2 + type : classNames2[type];
          var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames2[type + "Active"];
          var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames2[type + "Done"];
          return {
            baseClassName,
            activeClassName,
            doneClassName
          };
        };
        return _this;
      }
      var _proto = CSSTransition2.prototype;
      _proto.addClass = function addClass2(node2, type, phase) {
        var className = this.getClassNames(type)[phase + "ClassName"];
        var _this$getClassNames = this.getClassNames("enter"), doneClassName = _this$getClassNames.doneClassName;
        if (type === "appear" && phase === "done" && doneClassName) {
          className += " " + doneClassName;
        }
        if (phase === "active") {
          if (node2)
            forceReflow(node2);
        }
        if (className) {
          this.appliedClasses[type][phase] = className;
          _addClass(node2, className);
        }
      };
      _proto.removeClasses = function removeClasses(node2, type) {
        var _this$appliedClasses$ = this.appliedClasses[type], baseClassName = _this$appliedClasses$.base, activeClassName = _this$appliedClasses$.active, doneClassName = _this$appliedClasses$.done;
        this.appliedClasses[type] = {};
        if (baseClassName) {
          removeClass(node2, baseClassName);
        }
        if (activeClassName) {
          removeClass(node2, activeClassName);
        }
        if (doneClassName) {
          removeClass(node2, doneClassName);
        }
      };
      _proto.render = function render() {
        var _this$props = this.props;
        _this$props.classNames;
        var props = _objectWithoutPropertiesLoose$1(_this$props, ["classNames"]);
        return /* @__PURE__ */ jsxDEV(Transition$1, {
          ...props,
          onEnter: this.onEnter,
          onEntered: this.onEntered,
          onEntering: this.onEntering,
          onExit: this.onExit,
          onExiting: this.onExiting,
          onExited: this.onExited
        }, void 0, false, {
          fileName: _jsxFileName$12,
          lineNumber: 266,
          columnNumber: 25
        }, this);
      };
      return CSSTransition2;
    }(React.Component);
    CSSTransition.defaultProps = {
      classNames: ""
    };
    CSSTransition.propTypes = _extends$1({}, Transition$1.propTypes, {
      classNames: classNamesShape,
      onEnter: propTypes.exports.func,
      onEntering: propTypes.exports.func,
      onEntered: propTypes.exports.func,
      onExit: propTypes.exports.func,
      onExiting: propTypes.exports.func,
      onExited: propTypes.exports.func
    });
    const CSSTransition$1 = CSSTransition;
    function _assertThisInitialized$1(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function getChildMapping(children, mapFn) {
      var mapper = function mapper2(child) {
        return mapFn && react.exports.isValidElement(child) ? mapFn(child) : child;
      };
      var result = /* @__PURE__ */ Object.create(null);
      if (children)
        react.exports.Children.map(children, function(c) {
          return c;
        }).forEach(function(child) {
          result[child.key] = mapper(child);
        });
      return result;
    }
    function mergeChildMappings(prev2, next2) {
      prev2 = prev2 || {};
      next2 = next2 || {};
      function getValueForKey(key) {
        return key in next2 ? next2[key] : prev2[key];
      }
      var nextKeysPending = /* @__PURE__ */ Object.create(null);
      var pendingKeys = [];
      for (var prevKey in prev2) {
        if (prevKey in next2) {
          if (pendingKeys.length) {
            nextKeysPending[prevKey] = pendingKeys;
            pendingKeys = [];
          }
        } else {
          pendingKeys.push(prevKey);
        }
      }
      var i;
      var childMapping = {};
      for (var nextKey in next2) {
        if (nextKeysPending[nextKey]) {
          for (i = 0; i < nextKeysPending[nextKey].length; i++) {
            var pendingNextKey = nextKeysPending[nextKey][i];
            childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
          }
        }
        childMapping[nextKey] = getValueForKey(nextKey);
      }
      for (i = 0; i < pendingKeys.length; i++) {
        childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
      }
      return childMapping;
    }
    function getProp(child, prop, props) {
      return props[prop] != null ? props[prop] : child.props[prop];
    }
    function getInitialChildMapping(props, onExited) {
      return getChildMapping(props.children, function(child) {
        return react.exports.cloneElement(child, {
          onExited: onExited.bind(null, child),
          in: true,
          appear: getProp(child, "appear", props),
          enter: getProp(child, "enter", props),
          exit: getProp(child, "exit", props)
        });
      });
    }
    function getNextChildMapping(nextProps, prevChildMapping, onExited) {
      var nextChildMapping = getChildMapping(nextProps.children);
      var children = mergeChildMappings(prevChildMapping, nextChildMapping);
      Object.keys(children).forEach(function(key) {
        var child = children[key];
        if (!react.exports.isValidElement(child))
          return;
        var hasPrev = key in prevChildMapping;
        var hasNext = key in nextChildMapping;
        var prevChild = prevChildMapping[key];
        var isLeaving = react.exports.isValidElement(prevChild) && !prevChild.props.in;
        if (hasNext && (!hasPrev || isLeaving)) {
          children[key] = react.exports.cloneElement(child, {
            onExited: onExited.bind(null, child),
            in: true,
            exit: getProp(child, "exit", nextProps),
            enter: getProp(child, "enter", nextProps)
          });
        } else if (!hasNext && hasPrev && !isLeaving) {
          children[key] = react.exports.cloneElement(child, {
            in: false
          });
        } else if (hasNext && hasPrev && react.exports.isValidElement(prevChild)) {
          children[key] = react.exports.cloneElement(child, {
            onExited: onExited.bind(null, child),
            in: prevChild.props.in,
            exit: getProp(child, "exit", nextProps),
            enter: getProp(child, "enter", nextProps)
          });
        }
      });
      return children;
    }
    var _jsxFileName$11 = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/node_modules/.pnpm/react-transition-group@4.4.5_sfoxds7t5ydpegc3knd667wn6m/node_modules/react-transition-group/esm/TransitionGroup.js";
    var values = Object.values || function(obj) {
      return Object.keys(obj).map(function(k) {
        return obj[k];
      });
    };
    var defaultProps = {
      component: "div",
      childFactory: function childFactory(child) {
        return child;
      }
    };
    var TransitionGroup = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose(TransitionGroup2, _React$Component);
      function TransitionGroup2(props, context2) {
        var _this;
        _this = _React$Component.call(this, props, context2) || this;
        var handleExited = _this.handleExited.bind(_assertThisInitialized$1(_this));
        _this.state = {
          contextValue: {
            isMounting: true
          },
          handleExited,
          firstRender: true
        };
        return _this;
      }
      var _proto = TransitionGroup2.prototype;
      _proto.componentDidMount = function componentDidMount() {
        this.mounted = true;
        this.setState({
          contextValue: {
            isMounting: false
          }
        });
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        this.mounted = false;
      };
      TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
        var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
        return {
          children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
          firstRender: false
        };
      };
      _proto.handleExited = function handleExited(child, node2) {
        var currentChildMapping = getChildMapping(this.props.children);
        if (child.key in currentChildMapping)
          return;
        if (child.props.onExited) {
          child.props.onExited(node2);
        }
        if (this.mounted) {
          this.setState(function(state) {
            var children = _extends$1({}, state.children);
            delete children[child.key];
            return {
              children
            };
          });
        }
      };
      _proto.render = function render() {
        var _this$props = this.props, Component = _this$props.component, childFactory = _this$props.childFactory, props = _objectWithoutPropertiesLoose$1(_this$props, ["component", "childFactory"]);
        var contextValue = this.state.contextValue;
        var children = values(this.state.children).map(childFactory);
        delete props.appear;
        delete props.enter;
        delete props.exit;
        if (Component === null) {
          return /* @__PURE__ */ jsxDEV(TransitionGroupContext.Provider, {
            value: contextValue,
            children
          }, void 0, false, {
            fileName: _jsxFileName$11,
            lineNumber: 117,
            columnNumber: 27
          }, this);
        }
        return /* @__PURE__ */ jsxDEV(TransitionGroupContext.Provider, {
          value: contextValue,
          children: /* @__PURE__ */ jsxDEV(Component, {
            ...props,
            children
          }, void 0, false, {
            fileName: _jsxFileName$11,
            lineNumber: 124,
            columnNumber: 21
          }, this)
        }, void 0, false, {
          fileName: _jsxFileName$11,
          lineNumber: 122,
          columnNumber: 25
        }, this);
      };
      return TransitionGroup2;
    }(React.Component);
    TransitionGroup.propTypes = {
      component: propTypes.exports.any,
      children: propTypes.exports.node,
      appear: propTypes.exports.bool,
      enter: propTypes.exports.bool,
      exit: propTypes.exports.bool,
      childFactory: propTypes.exports.func
    };
    TransitionGroup.defaultProps = defaultProps;
    const TransitionGroup$1 = TransitionGroup;
    function Ripple(props) {
      const {
        className,
        classes,
        pulsate = false,
        rippleX,
        rippleY,
        rippleSize,
        in: inProp,
        onExited,
        timeout
      } = props;
      const [leaving, setLeaving] = react.exports.useState(false);
      const rippleClassName = clsx(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
      const rippleStyles = {
        width: rippleSize,
        height: rippleSize,
        top: -(rippleSize / 2) + rippleY,
        left: -(rippleSize / 2) + rippleX
      };
      const childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
      if (!inProp && !leaving) {
        setLeaving(true);
      }
      react.exports.useEffect(() => {
        if (!inProp && onExited != null) {
          const timeoutId = setTimeout(onExited, timeout);
          return () => {
            clearTimeout(timeoutId);
          };
        }
        return void 0;
      }, [onExited, inProp, timeout]);
      return /* @__PURE__ */ jsx("span", {
        className: rippleClassName,
        style: rippleStyles,
        children: /* @__PURE__ */ jsx("span", {
          className: childClassName
        })
      });
    }
    Ripple.propTypes = {
      classes: propTypes.exports.object.isRequired,
      className: propTypes.exports.string,
      in: propTypes.exports.bool,
      onExited: propTypes.exports.func,
      pulsate: propTypes.exports.bool,
      rippleSize: propTypes.exports.number,
      rippleX: propTypes.exports.number,
      rippleY: propTypes.exports.number,
      timeout: propTypes.exports.number.isRequired
    };
    const touchRippleClasses = generateUtilityClasses("MuiTouchRipple", ["root", "ripple", "rippleVisible", "ripplePulsate", "child", "childLeaving", "childPulsate"]);
    const touchRippleClasses$1 = touchRippleClasses;
    const _excluded$1w = ["center", "classes", "className"];
    let _$1 = (t) => t, _t$1, _t2$1, _t3$1, _t4$1;
    const DURATION = 550;
    const DELAY_RIPPLE = 80;
    const enterKeyframe = keyframes(_t$1 || (_t$1 = _$1`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
    const exitKeyframe = keyframes(_t2$1 || (_t2$1 = _$1`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
    const pulsateKeyframe = keyframes(_t3$1 || (_t3$1 = _$1`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
    const TouchRippleRoot = styled$1("span", {
      name: "MuiTouchRipple",
      slot: "Root"
    })({
      overflow: "hidden",
      pointerEvents: "none",
      position: "absolute",
      zIndex: 0,
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      borderRadius: "inherit"
    });
    const TouchRippleRipple = styled$1(Ripple, {
      name: "MuiTouchRipple",
      slot: "Ripple"
    })(_t4$1 || (_t4$1 = _$1`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), touchRippleClasses$1.rippleVisible, enterKeyframe, DURATION, ({
      theme
    }) => theme.transitions.easing.easeInOut, touchRippleClasses$1.ripplePulsate, ({
      theme
    }) => theme.transitions.duration.shorter, touchRippleClasses$1.child, touchRippleClasses$1.childLeaving, exitKeyframe, DURATION, ({
      theme
    }) => theme.transitions.easing.easeInOut, touchRippleClasses$1.childPulsate, pulsateKeyframe, ({
      theme
    }) => theme.transitions.easing.easeInOut);
    const TouchRipple = /* @__PURE__ */ react.exports.forwardRef(function TouchRipple2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiTouchRipple"
      });
      const {
        center: centerProp = false,
        classes = {},
        className
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1w);
      const [ripples, setRipples] = react.exports.useState([]);
      const nextKey = react.exports.useRef(0);
      const rippleCallback = react.exports.useRef(null);
      react.exports.useEffect(() => {
        if (rippleCallback.current) {
          rippleCallback.current();
          rippleCallback.current = null;
        }
      }, [ripples]);
      const ignoringMouseDown = react.exports.useRef(false);
      const startTimer = react.exports.useRef(null);
      const startTimerCommit = react.exports.useRef(null);
      const container = react.exports.useRef(null);
      react.exports.useEffect(() => {
        return () => {
          clearTimeout(startTimer.current);
        };
      }, []);
      const startCommit = react.exports.useCallback((params) => {
        const {
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize,
          cb
        } = params;
        setRipples((oldRipples) => [...oldRipples, /* @__PURE__ */ jsx(TouchRippleRipple, {
          classes: {
            ripple: clsx(classes.ripple, touchRippleClasses$1.ripple),
            rippleVisible: clsx(classes.rippleVisible, touchRippleClasses$1.rippleVisible),
            ripplePulsate: clsx(classes.ripplePulsate, touchRippleClasses$1.ripplePulsate),
            child: clsx(classes.child, touchRippleClasses$1.child),
            childLeaving: clsx(classes.childLeaving, touchRippleClasses$1.childLeaving),
            childPulsate: clsx(classes.childPulsate, touchRippleClasses$1.childPulsate)
          },
          timeout: DURATION,
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize
        }, nextKey.current)]);
        nextKey.current += 1;
        rippleCallback.current = cb;
      }, [classes]);
      const start2 = react.exports.useCallback((event = {}, options = {}, cb = () => {
      }) => {
        const {
          pulsate: pulsate2 = false,
          center = centerProp || options.pulsate,
          fakeElement = false
        } = options;
        if ((event == null ? void 0 : event.type) === "mousedown" && ignoringMouseDown.current) {
          ignoringMouseDown.current = false;
          return;
        }
        if ((event == null ? void 0 : event.type) === "touchstart") {
          ignoringMouseDown.current = true;
        }
        const element = fakeElement ? null : container.current;
        const rect = element ? element.getBoundingClientRect() : {
          width: 0,
          height: 0,
          left: 0,
          top: 0
        };
        let rippleX;
        let rippleY;
        let rippleSize;
        if (center || event === void 0 || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
          rippleX = Math.round(rect.width / 2);
          rippleY = Math.round(rect.height / 2);
        } else {
          const {
            clientX,
            clientY
          } = event.touches && event.touches.length > 0 ? event.touches[0] : event;
          rippleX = Math.round(clientX - rect.left);
          rippleY = Math.round(clientY - rect.top);
        }
        if (center) {
          rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);
          if (rippleSize % 2 === 0) {
            rippleSize += 1;
          }
        } else {
          const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
          const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
          rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
        }
        if (event != null && event.touches) {
          if (startTimerCommit.current === null) {
            startTimerCommit.current = () => {
              startCommit({
                pulsate: pulsate2,
                rippleX,
                rippleY,
                rippleSize,
                cb
              });
            };
            startTimer.current = setTimeout(() => {
              if (startTimerCommit.current) {
                startTimerCommit.current();
                startTimerCommit.current = null;
              }
            }, DELAY_RIPPLE);
          }
        } else {
          startCommit({
            pulsate: pulsate2,
            rippleX,
            rippleY,
            rippleSize,
            cb
          });
        }
      }, [centerProp, startCommit]);
      const pulsate = react.exports.useCallback(() => {
        start2({}, {
          pulsate: true
        });
      }, [start2]);
      const stop = react.exports.useCallback((event, cb) => {
        clearTimeout(startTimer.current);
        if ((event == null ? void 0 : event.type) === "touchend" && startTimerCommit.current) {
          startTimerCommit.current();
          startTimerCommit.current = null;
          startTimer.current = setTimeout(() => {
            stop(event, cb);
          });
          return;
        }
        startTimerCommit.current = null;
        setRipples((oldRipples) => {
          if (oldRipples.length > 0) {
            return oldRipples.slice(1);
          }
          return oldRipples;
        });
        rippleCallback.current = cb;
      }, []);
      react.exports.useImperativeHandle(ref, () => ({
        pulsate,
        start: start2,
        stop
      }), [pulsate, start2, stop]);
      return /* @__PURE__ */ jsx(TouchRippleRoot, _extends$1({
        className: clsx(touchRippleClasses$1.root, classes.root, className),
        ref: container
      }, other, {
        children: /* @__PURE__ */ jsx(TransitionGroup$1, {
          component: null,
          exit: true,
          children: ripples
        })
      }));
    });
    TouchRipple.propTypes = {
      center: propTypes.exports.bool,
      classes: propTypes.exports.object,
      className: propTypes.exports.string
    };
    const TouchRipple$1 = TouchRipple;
    function getButtonBaseUtilityClass(slot) {
      return generateUtilityClass("MuiButtonBase", slot);
    }
    const buttonBaseClasses = generateUtilityClasses("MuiButtonBase", ["root", "disabled", "focusVisible"]);
    const buttonBaseClasses$1 = buttonBaseClasses;
    const _excluded$1v = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "touchRippleRef", "type"];
    const useUtilityClasses$16 = (ownerState) => {
      const {
        disabled,
        focusVisible,
        focusVisibleClassName,
        classes
      } = ownerState;
      const slots = {
        root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
      };
      const composedClasses = composeClasses(slots, getButtonBaseUtilityClass, classes);
      if (focusVisible && focusVisibleClassName) {
        composedClasses.root += ` ${focusVisibleClassName}`;
      }
      return composedClasses;
    };
    const ButtonBaseRoot = styled$1("button", {
      name: "MuiButtonBase",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      position: "relative",
      boxSizing: "border-box",
      WebkitTapHighlightColor: "transparent",
      backgroundColor: "transparent",
      outline: 0,
      border: 0,
      margin: 0,
      borderRadius: 0,
      padding: 0,
      cursor: "pointer",
      userSelect: "none",
      verticalAlign: "middle",
      MozAppearance: "none",
      WebkitAppearance: "none",
      textDecoration: "none",
      color: "inherit",
      "&::-moz-focus-inner": {
        borderStyle: "none"
      },
      [`&.${buttonBaseClasses$1.disabled}`]: {
        pointerEvents: "none",
        cursor: "default"
      },
      "@media print": {
        colorAdjust: "exact"
      }
    });
    const ButtonBase = /* @__PURE__ */ react.exports.forwardRef(function ButtonBase2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiButtonBase"
      });
      const {
        action,
        centerRipple = false,
        children,
        className,
        component = "button",
        disabled = false,
        disableRipple = false,
        disableTouchRipple = false,
        focusRipple = false,
        LinkComponent = "a",
        onBlur,
        onClick,
        onContextMenu,
        onDragLeave,
        onFocus,
        onFocusVisible,
        onKeyDown,
        onKeyUp,
        onMouseDown,
        onMouseLeave,
        onMouseUp,
        onTouchEnd,
        onTouchMove,
        onTouchStart,
        tabIndex = 0,
        TouchRippleProps,
        touchRippleRef,
        type
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1v);
      const buttonRef = react.exports.useRef(null);
      const rippleRef = react.exports.useRef(null);
      const handleRippleRef = useForkRef(rippleRef, touchRippleRef);
      const {
        isFocusVisibleRef,
        onFocus: handleFocusVisible,
        onBlur: handleBlurVisible,
        ref: focusVisibleRef
      } = useIsFocusVisible();
      const [focusVisible, setFocusVisible] = react.exports.useState(false);
      if (disabled && focusVisible) {
        setFocusVisible(false);
      }
      react.exports.useImperativeHandle(action, () => ({
        focusVisible: () => {
          setFocusVisible(true);
          buttonRef.current.focus();
        }
      }), []);
      const [mountedState, setMountedState] = react.exports.useState(false);
      react.exports.useEffect(() => {
        setMountedState(true);
      }, []);
      const enableTouchRipple = mountedState && !disableRipple && !disabled;
      react.exports.useEffect(() => {
        if (focusVisible && focusRipple && !disableRipple && mountedState) {
          rippleRef.current.pulsate();
        }
      }, [disableRipple, focusRipple, focusVisible, mountedState]);
      function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
        return useEventCallback((event) => {
          if (eventCallback) {
            eventCallback(event);
          }
          const ignore = skipRippleAction;
          if (!ignore && rippleRef.current) {
            rippleRef.current[rippleAction](event);
          }
          return true;
        });
      }
      const handleMouseDown = useRippleHandler("start", onMouseDown);
      const handleContextMenu = useRippleHandler("stop", onContextMenu);
      const handleDragLeave = useRippleHandler("stop", onDragLeave);
      const handleMouseUp = useRippleHandler("stop", onMouseUp);
      const handleMouseLeave = useRippleHandler("stop", (event) => {
        if (focusVisible) {
          event.preventDefault();
        }
        if (onMouseLeave) {
          onMouseLeave(event);
        }
      });
      const handleTouchStart = useRippleHandler("start", onTouchStart);
      const handleTouchEnd = useRippleHandler("stop", onTouchEnd);
      const handleTouchMove = useRippleHandler("stop", onTouchMove);
      const handleBlur = useRippleHandler("stop", (event) => {
        handleBlurVisible(event);
        if (isFocusVisibleRef.current === false) {
          setFocusVisible(false);
        }
        if (onBlur) {
          onBlur(event);
        }
      }, false);
      const handleFocus = useEventCallback((event) => {
        if (!buttonRef.current) {
          buttonRef.current = event.currentTarget;
        }
        handleFocusVisible(event);
        if (isFocusVisibleRef.current === true) {
          setFocusVisible(true);
          if (onFocusVisible) {
            onFocusVisible(event);
          }
        }
        if (onFocus) {
          onFocus(event);
        }
      });
      const isNonNativeButton = () => {
        const button = buttonRef.current;
        return component && component !== "button" && !(button.tagName === "A" && button.href);
      };
      const keydownRef = react.exports.useRef(false);
      const handleKeyDown2 = useEventCallback((event) => {
        if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === " ") {
          keydownRef.current = true;
          rippleRef.current.stop(event, () => {
            rippleRef.current.start(event);
          });
        }
        if (event.target === event.currentTarget && isNonNativeButton() && event.key === " ") {
          event.preventDefault();
        }
        if (onKeyDown) {
          onKeyDown(event);
        }
        if (event.target === event.currentTarget && isNonNativeButton() && event.key === "Enter" && !disabled) {
          event.preventDefault();
          if (onClick) {
            onClick(event);
          }
        }
      });
      const handleKeyUp = useEventCallback((event) => {
        if (focusRipple && event.key === " " && rippleRef.current && focusVisible && !event.defaultPrevented) {
          keydownRef.current = false;
          rippleRef.current.stop(event, () => {
            rippleRef.current.pulsate(event);
          });
        }
        if (onKeyUp) {
          onKeyUp(event);
        }
        if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === " " && !event.defaultPrevented) {
          onClick(event);
        }
      });
      let ComponentProp = component;
      if (ComponentProp === "button" && (other.href || other.to)) {
        ComponentProp = LinkComponent;
      }
      const buttonProps = {};
      if (ComponentProp === "button") {
        buttonProps.type = type === void 0 ? "button" : type;
        buttonProps.disabled = disabled;
      } else {
        if (!other.href && !other.to) {
          buttonProps.role = "button";
        }
        if (disabled) {
          buttonProps["aria-disabled"] = disabled;
        }
      }
      const handleRef = useForkRef(ref, focusVisibleRef, buttonRef);
      {
        react.exports.useEffect(() => {
          if (enableTouchRipple && !rippleRef.current) {
            console.error(["MUI: The `component` prop provided to ButtonBase is invalid.", "Please make sure the children prop is rendered in this custom component."].join("\n"));
          }
        }, [enableTouchRipple]);
      }
      const ownerState = _extends$1({}, props, {
        centerRipple,
        component,
        disabled,
        disableRipple,
        disableTouchRipple,
        focusRipple,
        tabIndex,
        focusVisible
      });
      const classes = useUtilityClasses$16(ownerState);
      return /* @__PURE__ */ jsxs(ButtonBaseRoot, _extends$1({
        as: ComponentProp,
        className: clsx(classes.root, className),
        ownerState,
        onBlur: handleBlur,
        onClick,
        onContextMenu: handleContextMenu,
        onFocus: handleFocus,
        onKeyDown: handleKeyDown2,
        onKeyUp: handleKeyUp,
        onMouseDown: handleMouseDown,
        onMouseLeave: handleMouseLeave,
        onMouseUp: handleMouseUp,
        onDragLeave: handleDragLeave,
        onTouchEnd: handleTouchEnd,
        onTouchMove: handleTouchMove,
        onTouchStart: handleTouchStart,
        ref: handleRef,
        tabIndex: disabled ? -1 : tabIndex,
        type
      }, buttonProps, other, {
        children: [children, enableTouchRipple ? /* @__PURE__ */ jsx(TouchRipple$1, _extends$1({
          ref: handleRippleRef,
          center: centerRipple
        }, TouchRippleProps)) : null]
      }));
    });
    ButtonBase.propTypes = {
      action: refType$1,
      centerRipple: propTypes.exports.bool,
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      component: elementTypeAcceptingRef$1,
      disabled: propTypes.exports.bool,
      disableRipple: propTypes.exports.bool,
      disableTouchRipple: propTypes.exports.bool,
      focusRipple: propTypes.exports.bool,
      focusVisibleClassName: propTypes.exports.string,
      href: propTypes.exports.any,
      LinkComponent: propTypes.exports.elementType,
      onBlur: propTypes.exports.func,
      onClick: propTypes.exports.func,
      onContextMenu: propTypes.exports.func,
      onDragLeave: propTypes.exports.func,
      onFocus: propTypes.exports.func,
      onFocusVisible: propTypes.exports.func,
      onKeyDown: propTypes.exports.func,
      onKeyUp: propTypes.exports.func,
      onMouseDown: propTypes.exports.func,
      onMouseLeave: propTypes.exports.func,
      onMouseUp: propTypes.exports.func,
      onTouchEnd: propTypes.exports.func,
      onTouchMove: propTypes.exports.func,
      onTouchStart: propTypes.exports.func,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      tabIndex: propTypes.exports.number,
      TouchRippleProps: propTypes.exports.object,
      touchRippleRef: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.shape({
        current: propTypes.exports.shape({
          pulsate: propTypes.exports.func.isRequired,
          start: propTypes.exports.func.isRequired,
          stop: propTypes.exports.func.isRequired
        })
      })]),
      type: propTypes.exports.oneOfType([propTypes.exports.oneOf(["button", "reset", "submit"]), propTypes.exports.string])
    };
    const ButtonBase$1 = ButtonBase;
    function getButtonUtilityClass(slot) {
      return generateUtilityClass("MuiButton", slot);
    }
    const buttonClasses = generateUtilityClasses("MuiButton", ["root", "text", "textInherit", "textPrimary", "textSecondary", "textSuccess", "textError", "textInfo", "textWarning", "outlined", "outlinedInherit", "outlinedPrimary", "outlinedSecondary", "outlinedSuccess", "outlinedError", "outlinedInfo", "outlinedWarning", "contained", "containedInherit", "containedPrimary", "containedSecondary", "containedSuccess", "containedError", "containedInfo", "containedWarning", "disableElevation", "focusVisible", "disabled", "colorInherit", "textSizeSmall", "textSizeMedium", "textSizeLarge", "outlinedSizeSmall", "outlinedSizeMedium", "outlinedSizeLarge", "containedSizeSmall", "containedSizeMedium", "containedSizeLarge", "sizeMedium", "sizeSmall", "sizeLarge", "fullWidth", "startIcon", "endIcon", "iconSizeSmall", "iconSizeMedium", "iconSizeLarge"]);
    const buttonClasses$1 = buttonClasses;
    const ButtonGroupContext = /* @__PURE__ */ react.exports.createContext({});
    {
      ButtonGroupContext.displayName = "ButtonGroupContext";
    }
    const ButtonGroupContext$1 = ButtonGroupContext;
    const _excluded$1u = ["children", "color", "component", "className", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];
    const useUtilityClasses$15 = (ownerState) => {
      const {
        color: color2,
        disableElevation,
        fullWidth,
        size,
        variant,
        classes
      } = ownerState;
      const slots = {
        root: ["root", variant, `${variant}${capitalize(color2)}`, `size${capitalize(size)}`, `${variant}Size${capitalize(size)}`, color2 === "inherit" && "colorInherit", disableElevation && "disableElevation", fullWidth && "fullWidth"],
        label: ["label"],
        startIcon: ["startIcon", `iconSize${capitalize(size)}`],
        endIcon: ["endIcon", `iconSize${capitalize(size)}`]
      };
      const composedClasses = composeClasses(slots, getButtonUtilityClass, classes);
      return _extends$1({}, classes, composedClasses);
    };
    const commonIconStyles = (ownerState) => _extends$1({}, ownerState.size === "small" && {
      "& > *:nth-of-type(1)": {
        fontSize: 18
      }
    }, ownerState.size === "medium" && {
      "& > *:nth-of-type(1)": {
        fontSize: 20
      }
    }, ownerState.size === "large" && {
      "& > *:nth-of-type(1)": {
        fontSize: 22
      }
    });
    const ButtonRoot = styled$1(ButtonBase$1, {
      shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
      name: "MuiButton",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, styles2[ownerState.variant], styles2[`${ownerState.variant}${capitalize(ownerState.color)}`], styles2[`size${capitalize(ownerState.size)}`], styles2[`${ownerState.variant}Size${capitalize(ownerState.size)}`], ownerState.color === "inherit" && styles2.colorInherit, ownerState.disableElevation && styles2.disableElevation, ownerState.fullWidth && styles2.fullWidth];
      }
    })(({
      theme,
      ownerState
    }) => {
      var _theme$palette$getCon, _theme$palette;
      const inheritContainedBackgroundColor = theme.palette.mode === "light" ? theme.palette.grey[300] : theme.palette.grey[800];
      const inheritContainedHoverBackgroundColor = theme.palette.mode === "light" ? theme.palette.grey.A100 : theme.palette.grey[700];
      return _extends$1({}, theme.typography.button, {
        minWidth: 64,
        padding: "6px 16px",
        borderRadius: (theme.vars || theme).shape.borderRadius,
        transition: theme.transitions.create(["background-color", "box-shadow", "border-color", "color"], {
          duration: theme.transitions.duration.short
        }),
        "&:hover": _extends$1({
          textDecoration: "none",
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
          border: `1px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        }, ownerState.variant === "contained" && {
          backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedHoverBg : inheritContainedHoverBackgroundColor,
          boxShadow: (theme.vars || theme).shadows[4],
          "@media (hover: none)": {
            boxShadow: (theme.vars || theme).shadows[2],
            backgroundColor: (theme.vars || theme).palette.grey[300]
          }
        }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
          backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
          "@media (hover: none)": {
            backgroundColor: (theme.vars || theme).palette[ownerState.color].main
          }
        }),
        "&:active": _extends$1({}, ownerState.variant === "contained" && {
          boxShadow: (theme.vars || theme).shadows[8]
        }),
        [`&.${buttonClasses$1.focusVisible}`]: _extends$1({}, ownerState.variant === "contained" && {
          boxShadow: (theme.vars || theme).shadows[6]
        }),
        [`&.${buttonClasses$1.disabled}`]: _extends$1({
          color: (theme.vars || theme).palette.action.disabled
        }, ownerState.variant === "outlined" && {
          border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`
        }, ownerState.variant === "contained" && {
          color: (theme.vars || theme).palette.action.disabled,
          boxShadow: (theme.vars || theme).shadows[0],
          backgroundColor: (theme.vars || theme).palette.action.disabledBackground
        })
      }, ownerState.variant === "text" && {
        padding: "6px 8px"
      }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
        color: (theme.vars || theme).palette[ownerState.color].main
      }, ownerState.variant === "outlined" && {
        padding: "5px 15px",
        border: "1px solid currentColor"
      }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
        color: (theme.vars || theme).palette[ownerState.color].main,
        border: theme.vars ? `1px solid rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : `1px solid ${alpha(theme.palette[ownerState.color].main, 0.5)}`
      }, ownerState.variant === "contained" && {
        color: theme.vars ? theme.vars.palette.text.primary : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
        backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedBg : inheritContainedBackgroundColor,
        boxShadow: (theme.vars || theme).shadows[2]
      }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
        color: (theme.vars || theme).palette[ownerState.color].contrastText,
        backgroundColor: (theme.vars || theme).palette[ownerState.color].main
      }, ownerState.color === "inherit" && {
        color: "inherit",
        borderColor: "currentColor"
      }, ownerState.size === "small" && ownerState.variant === "text" && {
        padding: "4px 5px",
        fontSize: theme.typography.pxToRem(13)
      }, ownerState.size === "large" && ownerState.variant === "text" && {
        padding: "8px 11px",
        fontSize: theme.typography.pxToRem(15)
      }, ownerState.size === "small" && ownerState.variant === "outlined" && {
        padding: "3px 9px",
        fontSize: theme.typography.pxToRem(13)
      }, ownerState.size === "large" && ownerState.variant === "outlined" && {
        padding: "7px 21px",
        fontSize: theme.typography.pxToRem(15)
      }, ownerState.size === "small" && ownerState.variant === "contained" && {
        padding: "4px 10px",
        fontSize: theme.typography.pxToRem(13)
      }, ownerState.size === "large" && ownerState.variant === "contained" && {
        padding: "8px 22px",
        fontSize: theme.typography.pxToRem(15)
      }, ownerState.fullWidth && {
        width: "100%"
      });
    }, ({
      ownerState
    }) => ownerState.disableElevation && {
      boxShadow: "none",
      "&:hover": {
        boxShadow: "none"
      },
      [`&.${buttonClasses$1.focusVisible}`]: {
        boxShadow: "none"
      },
      "&:active": {
        boxShadow: "none"
      },
      [`&.${buttonClasses$1.disabled}`]: {
        boxShadow: "none"
      }
    });
    const ButtonStartIcon = styled$1("span", {
      name: "MuiButton",
      slot: "StartIcon",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.startIcon, styles2[`iconSize${capitalize(ownerState.size)}`]];
      }
    })(({
      ownerState
    }) => _extends$1({
      display: "inherit",
      marginRight: 8,
      marginLeft: -4
    }, ownerState.size === "small" && {
      marginLeft: -2
    }, commonIconStyles(ownerState)));
    const ButtonEndIcon = styled$1("span", {
      name: "MuiButton",
      slot: "EndIcon",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.endIcon, styles2[`iconSize${capitalize(ownerState.size)}`]];
      }
    })(({
      ownerState
    }) => _extends$1({
      display: "inherit",
      marginRight: -4,
      marginLeft: 8
    }, ownerState.size === "small" && {
      marginRight: -2
    }, commonIconStyles(ownerState)));
    const Button = /* @__PURE__ */ react.exports.forwardRef(function Button2(inProps, ref) {
      const contextProps = react.exports.useContext(ButtonGroupContext$1);
      const resolvedProps = resolveProps(contextProps, inProps);
      const props = useThemeProps({
        props: resolvedProps,
        name: "MuiButton"
      });
      const {
        children,
        color: color2 = "primary",
        component = "button",
        className,
        disabled = false,
        disableElevation = false,
        disableFocusRipple = false,
        endIcon: endIconProp,
        focusVisibleClassName,
        fullWidth = false,
        size = "medium",
        startIcon: startIconProp,
        type,
        variant = "text"
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1u);
      const ownerState = _extends$1({}, props, {
        color: color2,
        component,
        disabled,
        disableElevation,
        disableFocusRipple,
        fullWidth,
        size,
        type,
        variant
      });
      const classes = useUtilityClasses$15(ownerState);
      const startIcon = startIconProp && /* @__PURE__ */ jsx(ButtonStartIcon, {
        className: classes.startIcon,
        ownerState,
        children: startIconProp
      });
      const endIcon = endIconProp && /* @__PURE__ */ jsx(ButtonEndIcon, {
        className: classes.endIcon,
        ownerState,
        children: endIconProp
      });
      return /* @__PURE__ */ jsxs(ButtonRoot, _extends$1({
        ownerState,
        className: clsx(contextProps.className, classes.root, className),
        component,
        disabled,
        focusRipple: !disableFocusRipple,
        focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
        ref,
        type
      }, other, {
        classes,
        children: [startIcon, children, endIcon]
      }));
    });
    Button.propTypes = {
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      color: propTypes.exports.oneOfType([propTypes.exports.oneOf(["inherit", "primary", "secondary", "success", "error", "info", "warning"]), propTypes.exports.string]),
      component: propTypes.exports.elementType,
      disabled: propTypes.exports.bool,
      disableElevation: propTypes.exports.bool,
      disableFocusRipple: propTypes.exports.bool,
      disableRipple: propTypes.exports.bool,
      endIcon: propTypes.exports.node,
      focusVisibleClassName: propTypes.exports.string,
      fullWidth: propTypes.exports.bool,
      href: propTypes.exports.string,
      size: propTypes.exports.oneOfType([propTypes.exports.oneOf(["small", "medium", "large"]), propTypes.exports.string]),
      startIcon: propTypes.exports.node,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      type: propTypes.exports.oneOfType([propTypes.exports.oneOf(["button", "reset", "submit"]), propTypes.exports.string]),
      variant: propTypes.exports.oneOfType([propTypes.exports.oneOf(["contained", "outlined", "text"]), propTypes.exports.string])
    };
    const Button$1 = Button;
    const reflow = (node2) => node2.scrollTop;
    function getTransitionProps(props, options) {
      var _style$transitionDura, _style$transitionTimi;
      const {
        timeout,
        easing: easing2,
        style: style2 = {}
      } = props;
      return {
        duration: (_style$transitionDura = style2.transitionDuration) != null ? _style$transitionDura : typeof timeout === "number" ? timeout : timeout[options.mode] || 0,
        easing: (_style$transitionTimi = style2.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing2 === "object" ? easing2[options.mode] : easing2,
        delay: style2.transitionDelay
      };
    }
    const _excluded$1t = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
    const styles$3 = {
      entering: {
        opacity: 1
      },
      entered: {
        opacity: 1
      }
    };
    const Fade = /* @__PURE__ */ react.exports.forwardRef(function Fade2(props, ref) {
      const theme = useTheme();
      const defaultTimeout = {
        enter: theme.transitions.duration.enteringScreen,
        exit: theme.transitions.duration.leavingScreen
      };
      const {
        addEndListener,
        appear = true,
        children,
        easing: easing2,
        in: inProp,
        onEnter,
        onEntered,
        onEntering,
        onExit,
        onExited,
        onExiting,
        style: style2,
        timeout = defaultTimeout,
        TransitionComponent = Transition$1
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1t);
      const nodeRef = react.exports.useRef(null);
      const handleRef = useForkRef(nodeRef, children.ref, ref);
      const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
        if (callback) {
          const node2 = nodeRef.current;
          if (maybeIsAppearing === void 0) {
            callback(node2);
          } else {
            callback(node2, maybeIsAppearing);
          }
        }
      };
      const handleEntering = normalizedTransitionCallback(onEntering);
      const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
        reflow(node2);
        const transitionProps = getTransitionProps({
          style: style2,
          timeout,
          easing: easing2
        }, {
          mode: "enter"
        });
        node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
        node2.style.transition = theme.transitions.create("opacity", transitionProps);
        if (onEnter) {
          onEnter(node2, isAppearing);
        }
      });
      const handleEntered = normalizedTransitionCallback(onEntered);
      const handleExiting = normalizedTransitionCallback(onExiting);
      const handleExit = normalizedTransitionCallback((node2) => {
        const transitionProps = getTransitionProps({
          style: style2,
          timeout,
          easing: easing2
        }, {
          mode: "exit"
        });
        node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
        node2.style.transition = theme.transitions.create("opacity", transitionProps);
        if (onExit) {
          onExit(node2);
        }
      });
      const handleExited = normalizedTransitionCallback(onExited);
      const handleAddEndListener = (next2) => {
        if (addEndListener) {
          addEndListener(nodeRef.current, next2);
        }
      };
      return /* @__PURE__ */ jsx(TransitionComponent, _extends$1({
        appear,
        in: inProp,
        nodeRef,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        addEndListener: handleAddEndListener,
        timeout
      }, other, {
        children: (state, childProps) => {
          return /* @__PURE__ */ react.exports.cloneElement(children, _extends$1({
            style: _extends$1({
              opacity: 0,
              visibility: state === "exited" && !inProp ? "hidden" : void 0
            }, styles$3[state], style2, children.props.style),
            ref: handleRef
          }, childProps));
        }
      }));
    });
    Fade.propTypes = {
      addEndListener: propTypes.exports.func,
      appear: propTypes.exports.bool,
      children: elementAcceptingRef$1.isRequired,
      easing: propTypes.exports.oneOfType([propTypes.exports.shape({
        enter: propTypes.exports.string,
        exit: propTypes.exports.string
      }), propTypes.exports.string]),
      in: propTypes.exports.bool,
      onEnter: propTypes.exports.func,
      onEntered: propTypes.exports.func,
      onEntering: propTypes.exports.func,
      onExit: propTypes.exports.func,
      onExited: propTypes.exports.func,
      onExiting: propTypes.exports.func,
      style: propTypes.exports.object,
      timeout: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.shape({
        appear: propTypes.exports.number,
        enter: propTypes.exports.number,
        exit: propTypes.exports.number
      })])
    };
    const Fade$1 = Fade;
    function getBackdropUtilityClass(slot) {
      return generateUtilityClass("MuiBackdrop", slot);
    }
    generateUtilityClasses("MuiBackdrop", ["root", "invisible"]);
    const _excluded$1s = ["children", "className", "component", "components", "componentsProps", "invisible", "open", "slotProps", "slots", "TransitionComponent", "transitionDuration"];
    const useUtilityClasses$14 = (ownerState) => {
      const {
        classes,
        invisible
      } = ownerState;
      const slots = {
        root: ["root", invisible && "invisible"]
      };
      return composeClasses(slots, getBackdropUtilityClass, classes);
    };
    const BackdropRoot = styled$1("div", {
      name: "MuiBackdrop",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.invisible && styles2.invisible];
      }
    })(({
      ownerState
    }) => _extends$1({
      position: "fixed",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      right: 0,
      bottom: 0,
      top: 0,
      left: 0,
      backgroundColor: "rgba(0, 0, 0, 0.5)",
      WebkitTapHighlightColor: "transparent"
    }, ownerState.invisible && {
      backgroundColor: "transparent"
    }));
    const Backdrop = /* @__PURE__ */ react.exports.forwardRef(function Backdrop2(inProps, ref) {
      var _slotProps$root, _ref, _slots$root;
      const props = useThemeProps({
        props: inProps,
        name: "MuiBackdrop"
      });
      const {
        children,
        className,
        component = "div",
        components = {},
        componentsProps = {},
        invisible = false,
        open,
        slotProps = {},
        slots = {},
        TransitionComponent = Fade$1,
        transitionDuration
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1s);
      const ownerState = _extends$1({}, props, {
        component,
        invisible
      });
      const classes = useUtilityClasses$14(ownerState);
      const rootSlotProps = (_slotProps$root = slotProps.root) != null ? _slotProps$root : componentsProps.root;
      return /* @__PURE__ */ jsx(TransitionComponent, _extends$1({
        in: open,
        timeout: transitionDuration
      }, other, {
        children: /* @__PURE__ */ jsx(BackdropRoot, _extends$1({
          "aria-hidden": true
        }, rootSlotProps, {
          as: (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : component,
          className: clsx(classes.root, className, rootSlotProps == null ? void 0 : rootSlotProps.className),
          ownerState: _extends$1({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
          classes,
          ref,
          children
        }))
      }));
    });
    Backdrop.propTypes = {
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      component: propTypes.exports.elementType,
      components: propTypes.exports.shape({
        Root: propTypes.exports.elementType
      }),
      componentsProps: propTypes.exports.shape({
        root: propTypes.exports.object
      }),
      invisible: propTypes.exports.bool,
      open: propTypes.exports.bool.isRequired,
      slotProps: propTypes.exports.shape({
        root: propTypes.exports.object
      }),
      slots: propTypes.exports.shape({
        root: propTypes.exports.elementType
      }),
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      TransitionComponent: propTypes.exports.elementType,
      transitionDuration: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.shape({
        appear: propTypes.exports.number,
        enter: propTypes.exports.number,
        exit: propTypes.exports.number
      })])
    };
    const Backdrop$1 = Backdrop;
    const _excluded$1r = ["BackdropComponent", "BackdropProps", "classes", "className", "closeAfterTransition", "children", "container", "component", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "open", "slotProps", "slots", "theme"];
    const ModalRoot = styled$1("div", {
      name: "MuiModal",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, !ownerState.open && ownerState.exited && styles2.hidden];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      position: "fixed",
      zIndex: (theme.vars || theme).zIndex.modal,
      right: 0,
      bottom: 0,
      top: 0,
      left: 0
    }, !ownerState.open && ownerState.exited && {
      visibility: "hidden"
    }));
    const ModalBackdrop = styled$1(Backdrop$1, {
      name: "MuiModal",
      slot: "Backdrop",
      overridesResolver: (props, styles2) => {
        return styles2.backdrop;
      }
    })({
      zIndex: -1
    });
    const Modal = /* @__PURE__ */ react.exports.forwardRef(function Modal2(inProps, ref) {
      var _ref, _slots$root, _ref2, _slots$backdrop, _slotProps$root, _slotProps$backdrop;
      const props = useThemeProps({
        name: "MuiModal",
        props: inProps
      });
      const {
        BackdropComponent = ModalBackdrop,
        BackdropProps,
        classes,
        className,
        closeAfterTransition = false,
        children,
        container,
        component,
        components = {},
        componentsProps = {},
        disableAutoFocus = false,
        disableEnforceFocus = false,
        disableEscapeKeyDown = false,
        disablePortal = false,
        disableRestoreFocus = false,
        disableScrollLock = false,
        hideBackdrop = false,
        keepMounted = false,
        onBackdropClick,
        onClose,
        open,
        slotProps,
        slots,
        theme
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1r);
      const [exited, setExited] = react.exports.useState(true);
      const commonProps = {
        container,
        closeAfterTransition,
        disableAutoFocus,
        disableEnforceFocus,
        disableEscapeKeyDown,
        disablePortal,
        disableRestoreFocus,
        disableScrollLock,
        hideBackdrop,
        keepMounted,
        onBackdropClick,
        onClose,
        open
      };
      const ownerState = _extends$1({}, props, commonProps, {
        exited
      });
      const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : ModalRoot;
      const BackdropSlot = (_ref2 = (_slots$backdrop = slots == null ? void 0 : slots.backdrop) != null ? _slots$backdrop : components.Backdrop) != null ? _ref2 : BackdropComponent;
      const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
      const backdropSlotProps = (_slotProps$backdrop = slotProps == null ? void 0 : slotProps.backdrop) != null ? _slotProps$backdrop : componentsProps.backdrop;
      return /* @__PURE__ */ jsx(ModalUnstyled, _extends$1({
        slots: {
          root: RootSlot,
          backdrop: BackdropSlot
        },
        slotProps: {
          root: () => _extends$1({}, resolveComponentProps(rootSlotProps, ownerState), !isHostComponent(RootSlot) && {
            as: component,
            theme
          }, {
            className: clsx(className, rootSlotProps == null ? void 0 : rootSlotProps.className, classes == null ? void 0 : classes.root, !ownerState.open && ownerState.exited && (classes == null ? void 0 : classes.hidden))
          }),
          backdrop: () => _extends$1({}, BackdropProps, resolveComponentProps(backdropSlotProps, ownerState), {
            className: clsx(backdropSlotProps == null ? void 0 : backdropSlotProps.className, classes == null ? void 0 : classes.backdrop)
          })
        },
        onTransitionEnter: () => setExited(false),
        onTransitionExited: () => setExited(true),
        ref
      }, other, commonProps, {
        children
      }));
    });
    Modal.propTypes = {
      BackdropComponent: propTypes.exports.elementType,
      BackdropProps: propTypes.exports.object,
      children: elementAcceptingRef$1.isRequired,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      closeAfterTransition: propTypes.exports.bool,
      component: propTypes.exports.elementType,
      components: propTypes.exports.shape({
        Backdrop: propTypes.exports.elementType,
        Root: propTypes.exports.elementType
      }),
      componentsProps: propTypes.exports.shape({
        backdrop: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
        root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
      }),
      container: propTypes.exports.oneOfType([HTMLElementType, propTypes.exports.func]),
      disableAutoFocus: propTypes.exports.bool,
      disableEnforceFocus: propTypes.exports.bool,
      disableEscapeKeyDown: propTypes.exports.bool,
      disablePortal: propTypes.exports.bool,
      disableRestoreFocus: propTypes.exports.bool,
      disableScrollLock: propTypes.exports.bool,
      hideBackdrop: propTypes.exports.bool,
      keepMounted: propTypes.exports.bool,
      onBackdropClick: propTypes.exports.func,
      onClose: propTypes.exports.func,
      open: propTypes.exports.bool.isRequired,
      slotProps: propTypes.exports.shape({
        backdrop: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
        root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
      }),
      slots: propTypes.exports.shape({
        backdrop: propTypes.exports.elementType,
        root: propTypes.exports.elementType
      }),
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
    };
    const Modal$1 = Modal;
    function getPaperUtilityClass(slot) {
      return generateUtilityClass("MuiPaper", slot);
    }
    generateUtilityClasses("MuiPaper", ["root", "rounded", "outlined", "elevation", "elevation0", "elevation1", "elevation2", "elevation3", "elevation4", "elevation5", "elevation6", "elevation7", "elevation8", "elevation9", "elevation10", "elevation11", "elevation12", "elevation13", "elevation14", "elevation15", "elevation16", "elevation17", "elevation18", "elevation19", "elevation20", "elevation21", "elevation22", "elevation23", "elevation24"]);
    const _excluded$1q = ["className", "component", "elevation", "square", "variant"];
    const useUtilityClasses$13 = (ownerState) => {
      const {
        square,
        elevation,
        variant,
        classes
      } = ownerState;
      const slots = {
        root: ["root", variant, !square && "rounded", variant === "elevation" && `elevation${elevation}`]
      };
      return composeClasses(slots, getPaperUtilityClass, classes);
    };
    const PaperRoot = styled$1("div", {
      name: "MuiPaper",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, styles2[ownerState.variant], !ownerState.square && styles2.rounded, ownerState.variant === "elevation" && styles2[`elevation${ownerState.elevation}`]];
      }
    })(({
      theme,
      ownerState
    }) => {
      var _theme$vars$overlays;
      return _extends$1({
        backgroundColor: (theme.vars || theme).palette.background.paper,
        color: (theme.vars || theme).palette.text.primary,
        transition: theme.transitions.create("box-shadow")
      }, !ownerState.square && {
        borderRadius: theme.shape.borderRadius
      }, ownerState.variant === "outlined" && {
        border: `1px solid ${(theme.vars || theme).palette.divider}`
      }, ownerState.variant === "elevation" && _extends$1({
        boxShadow: (theme.vars || theme).shadows[ownerState.elevation]
      }, !theme.vars && theme.palette.mode === "dark" && {
        backgroundImage: `linear-gradient(${alpha("#fff", getOverlayAlpha$1(ownerState.elevation))}, ${alpha("#fff", getOverlayAlpha$1(ownerState.elevation))})`
      }, theme.vars && {
        backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
      }));
    });
    const Paper = /* @__PURE__ */ react.exports.forwardRef(function Paper2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiPaper"
      });
      const {
        className,
        component = "div",
        elevation = 1,
        square = false,
        variant = "elevation"
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1q);
      const ownerState = _extends$1({}, props, {
        component,
        elevation,
        square,
        variant
      });
      const classes = useUtilityClasses$13(ownerState);
      {
        const theme = useTheme();
        if (theme.shadows[elevation] === void 0) {
          console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join("\n"));
        }
      }
      return /* @__PURE__ */ jsx(PaperRoot, _extends$1({
        as: component,
        ownerState,
        className: clsx(classes.root, className),
        ref
      }, other));
    });
    Paper.propTypes = {
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      component: propTypes.exports.elementType,
      elevation: chainPropTypes(integerPropType, (props) => {
        const {
          elevation,
          variant
        } = props;
        if (elevation > 0 && variant === "outlined") {
          return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
        }
        return null;
      }),
      square: propTypes.exports.bool,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      variant: propTypes.exports.oneOfType([propTypes.exports.oneOf(["elevation", "outlined"]), propTypes.exports.string])
    };
    const Paper$1 = Paper;
    function getDialogUtilityClass(slot) {
      return generateUtilityClass("MuiDialog", slot);
    }
    const dialogClasses = generateUtilityClasses("MuiDialog", ["root", "scrollPaper", "scrollBody", "container", "paper", "paperScrollPaper", "paperScrollBody", "paperWidthFalse", "paperWidthXs", "paperWidthSm", "paperWidthMd", "paperWidthLg", "paperWidthXl", "paperFullWidth", "paperFullScreen"]);
    const dialogClasses$1 = dialogClasses;
    const DialogContext = /* @__PURE__ */ react.exports.createContext({});
    {
      DialogContext.displayName = "DialogContext";
    }
    const DialogContext$1 = DialogContext;
    const _excluded$1p = ["aria-describedby", "aria-labelledby", "BackdropComponent", "BackdropProps", "children", "className", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClose", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps"];
    const DialogBackdrop = styled$1(Backdrop$1, {
      name: "MuiDialog",
      slot: "Backdrop",
      overrides: (props, styles2) => styles2.backdrop
    })({
      zIndex: -1
    });
    const useUtilityClasses$12 = (ownerState) => {
      const {
        classes,
        scroll,
        maxWidth: maxWidth2,
        fullWidth,
        fullScreen
      } = ownerState;
      const slots = {
        root: ["root"],
        container: ["container", `scroll${capitalize(scroll)}`],
        paper: ["paper", `paperScroll${capitalize(scroll)}`, `paperWidth${capitalize(String(maxWidth2))}`, fullWidth && "paperFullWidth", fullScreen && "paperFullScreen"]
      };
      return composeClasses(slots, getDialogUtilityClass, classes);
    };
    const DialogRoot = styled$1(Modal$1, {
      name: "MuiDialog",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({
      "@media print": {
        position: "absolute !important"
      }
    });
    const DialogContainer = styled$1("div", {
      name: "MuiDialog",
      slot: "Container",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.container, styles2[`scroll${capitalize(ownerState.scroll)}`]];
      }
    })(({
      ownerState
    }) => _extends$1({
      height: "100%",
      "@media print": {
        height: "auto"
      },
      outline: 0
    }, ownerState.scroll === "paper" && {
      display: "flex",
      justifyContent: "center",
      alignItems: "center"
    }, ownerState.scroll === "body" && {
      overflowY: "auto",
      overflowX: "hidden",
      textAlign: "center",
      "&:after": {
        content: '""',
        display: "inline-block",
        verticalAlign: "middle",
        height: "100%",
        width: "0"
      }
    }));
    const DialogPaper = styled$1(Paper$1, {
      name: "MuiDialog",
      slot: "Paper",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.paper, styles2[`scrollPaper${capitalize(ownerState.scroll)}`], styles2[`paperWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fullWidth && styles2.paperFullWidth, ownerState.fullScreen && styles2.paperFullScreen];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      margin: 32,
      position: "relative",
      overflowY: "auto",
      "@media print": {
        overflowY: "visible",
        boxShadow: "none"
      }
    }, ownerState.scroll === "paper" && {
      display: "flex",
      flexDirection: "column",
      maxHeight: "calc(100% - 64px)"
    }, ownerState.scroll === "body" && {
      display: "inline-block",
      verticalAlign: "middle",
      textAlign: "left"
    }, !ownerState.maxWidth && {
      maxWidth: "calc(100% - 64px)"
    }, ownerState.maxWidth === "xs" && {
      maxWidth: theme.breakpoints.unit === "px" ? Math.max(theme.breakpoints.values.xs, 444) : `${theme.breakpoints.values.xs}${theme.breakpoints.unit}`,
      [`&.${dialogClasses$1.paperScrollBody}`]: {
        [theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 444) + 32 * 2)]: {
          maxWidth: "calc(100% - 64px)"
        }
      }
    }, ownerState.maxWidth && ownerState.maxWidth !== "xs" && {
      maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`,
      [`&.${dialogClasses$1.paperScrollBody}`]: {
        [theme.breakpoints.down(theme.breakpoints.values[ownerState.maxWidth] + 32 * 2)]: {
          maxWidth: "calc(100% - 64px)"
        }
      }
    }, ownerState.fullWidth && {
      width: "calc(100% - 64px)"
    }, ownerState.fullScreen && {
      margin: 0,
      width: "100%",
      maxWidth: "100%",
      height: "100%",
      maxHeight: "none",
      borderRadius: 0,
      [`&.${dialogClasses$1.paperScrollBody}`]: {
        margin: 0,
        maxWidth: "100%"
      }
    }));
    const Dialog = /* @__PURE__ */ react.exports.forwardRef(function Dialog2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiDialog"
      });
      const theme = useTheme();
      const defaultTransitionDuration = {
        enter: theme.transitions.duration.enteringScreen,
        exit: theme.transitions.duration.leavingScreen
      };
      const {
        "aria-describedby": ariaDescribedby,
        "aria-labelledby": ariaLabelledbyProp,
        BackdropComponent,
        BackdropProps,
        children,
        className,
        disableEscapeKeyDown = false,
        fullScreen = false,
        fullWidth = false,
        maxWidth: maxWidth2 = "sm",
        onBackdropClick,
        onClose,
        open,
        PaperComponent = Paper$1,
        PaperProps = {},
        scroll = "paper",
        TransitionComponent = Fade$1,
        transitionDuration = defaultTransitionDuration,
        TransitionProps
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1p);
      const ownerState = _extends$1({}, props, {
        disableEscapeKeyDown,
        fullScreen,
        fullWidth,
        maxWidth: maxWidth2,
        scroll
      });
      const classes = useUtilityClasses$12(ownerState);
      const backdropClick = react.exports.useRef();
      const handleMouseDown = (event) => {
        backdropClick.current = event.target === event.currentTarget;
      };
      const handleBackdropClick = (event) => {
        if (!backdropClick.current) {
          return;
        }
        backdropClick.current = null;
        if (onBackdropClick) {
          onBackdropClick(event);
        }
        if (onClose) {
          onClose(event, "backdropClick");
        }
      };
      const ariaLabelledby = useId(ariaLabelledbyProp);
      const dialogContextValue = react.exports.useMemo(() => {
        return {
          titleId: ariaLabelledby
        };
      }, [ariaLabelledby]);
      return /* @__PURE__ */ jsx(DialogRoot, _extends$1({
        className: clsx(classes.root, className),
        closeAfterTransition: true,
        components: {
          Backdrop: DialogBackdrop
        },
        componentsProps: {
          backdrop: _extends$1({
            transitionDuration,
            as: BackdropComponent
          }, BackdropProps)
        },
        disableEscapeKeyDown,
        onClose,
        open,
        ref,
        onClick: handleBackdropClick,
        ownerState
      }, other, {
        children: /* @__PURE__ */ jsx(TransitionComponent, _extends$1({
          appear: true,
          in: open,
          timeout: transitionDuration,
          role: "presentation"
        }, TransitionProps, {
          children: /* @__PURE__ */ jsx(DialogContainer, {
            className: clsx(classes.container),
            onMouseDown: handleMouseDown,
            ownerState,
            children: /* @__PURE__ */ jsx(DialogPaper, _extends$1({
              as: PaperComponent,
              elevation: 24,
              role: "dialog",
              "aria-describedby": ariaDescribedby,
              "aria-labelledby": ariaLabelledby
            }, PaperProps, {
              className: clsx(classes.paper, PaperProps.className),
              ownerState,
              children: /* @__PURE__ */ jsx(DialogContext$1.Provider, {
                value: dialogContextValue,
                children
              })
            }))
          })
        }))
      }));
    });
    Dialog.propTypes = {
      "aria-describedby": propTypes.exports.string,
      "aria-labelledby": propTypes.exports.string,
      BackdropComponent: propTypes.exports.elementType,
      BackdropProps: propTypes.exports.object,
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      disableEscapeKeyDown: propTypes.exports.bool,
      fullScreen: propTypes.exports.bool,
      fullWidth: propTypes.exports.bool,
      maxWidth: propTypes.exports.oneOfType([propTypes.exports.oneOf(["xs", "sm", "md", "lg", "xl", false]), propTypes.exports.string]),
      onBackdropClick: propTypes.exports.func,
      onClose: propTypes.exports.func,
      open: propTypes.exports.bool.isRequired,
      PaperComponent: propTypes.exports.elementType,
      PaperProps: propTypes.exports.object,
      scroll: propTypes.exports.oneOf(["body", "paper"]),
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      TransitionComponent: propTypes.exports.elementType,
      transitionDuration: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.shape({
        appear: propTypes.exports.number,
        enter: propTypes.exports.number,
        exit: propTypes.exports.number
      })]),
      TransitionProps: propTypes.exports.object
    };
    const Dialog$1 = Dialog;
    function getDialogActionsUtilityClass(slot) {
      return generateUtilityClass("MuiDialogActions", slot);
    }
    generateUtilityClasses("MuiDialogActions", ["root", "spacing"]);
    const _excluded$1o = ["className", "disableSpacing"];
    const useUtilityClasses$11 = (ownerState) => {
      const {
        classes,
        disableSpacing
      } = ownerState;
      const slots = {
        root: ["root", !disableSpacing && "spacing"]
      };
      return composeClasses(slots, getDialogActionsUtilityClass, classes);
    };
    const DialogActionsRoot = styled$1("div", {
      name: "MuiDialogActions",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, !ownerState.disableSpacing && styles2.spacing];
      }
    })(({
      ownerState
    }) => _extends$1({
      display: "flex",
      alignItems: "center",
      padding: 8,
      justifyContent: "flex-end",
      flex: "0 0 auto"
    }, !ownerState.disableSpacing && {
      "& > :not(:first-of-type)": {
        marginLeft: 8
      }
    }));
    const DialogActions = /* @__PURE__ */ react.exports.forwardRef(function DialogActions2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiDialogActions"
      });
      const {
        className,
        disableSpacing = false
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1o);
      const ownerState = _extends$1({}, props, {
        disableSpacing
      });
      const classes = useUtilityClasses$11(ownerState);
      return /* @__PURE__ */ jsx(DialogActionsRoot, _extends$1({
        className: clsx(classes.root, className),
        ownerState,
        ref
      }, other));
    });
    DialogActions.propTypes = {
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      disableSpacing: propTypes.exports.bool,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
    };
    const DialogActions$1 = DialogActions;
    function getDialogContentUtilityClass(slot) {
      return generateUtilityClass("MuiDialogContent", slot);
    }
    generateUtilityClasses("MuiDialogContent", ["root", "dividers"]);
    function getDialogTitleUtilityClass(slot) {
      return generateUtilityClass("MuiDialogTitle", slot);
    }
    const dialogTitleClasses = generateUtilityClasses("MuiDialogTitle", ["root"]);
    const dialogTitleClasses$1 = dialogTitleClasses;
    const _excluded$1n = ["className", "dividers"];
    const useUtilityClasses$10 = (ownerState) => {
      const {
        classes,
        dividers
      } = ownerState;
      const slots = {
        root: ["root", dividers && "dividers"]
      };
      return composeClasses(slots, getDialogContentUtilityClass, classes);
    };
    const DialogContentRoot = styled$1("div", {
      name: "MuiDialogContent",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.dividers && styles2.dividers];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      flex: "1 1 auto",
      WebkitOverflowScrolling: "touch",
      overflowY: "auto",
      padding: "20px 24px"
    }, ownerState.dividers ? {
      padding: "16px 24px",
      borderTop: `1px solid ${(theme.vars || theme).palette.divider}`,
      borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
    } : {
      [`.${dialogTitleClasses$1.root} + &`]: {
        paddingTop: 0
      }
    }));
    const DialogContent = /* @__PURE__ */ react.exports.forwardRef(function DialogContent2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiDialogContent"
      });
      const {
        className,
        dividers = false
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1n);
      const ownerState = _extends$1({}, props, {
        dividers
      });
      const classes = useUtilityClasses$10(ownerState);
      return /* @__PURE__ */ jsx(DialogContentRoot, _extends$1({
        className: clsx(classes.root, className),
        ownerState,
        ref
      }, other));
    });
    DialogContent.propTypes = {
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      dividers: propTypes.exports.bool,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
    };
    const DialogContent$1 = DialogContent;
    function getTypographyUtilityClass(slot) {
      return generateUtilityClass("MuiTypography", slot);
    }
    generateUtilityClasses("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]);
    const _excluded$1m = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];
    const useUtilityClasses$$ = (ownerState) => {
      const {
        align,
        gutterBottom,
        noWrap,
        paragraph,
        variant,
        classes
      } = ownerState;
      const slots = {
        root: ["root", variant, ownerState.align !== "inherit" && `align${capitalize(align)}`, gutterBottom && "gutterBottom", noWrap && "noWrap", paragraph && "paragraph"]
      };
      return composeClasses(slots, getTypographyUtilityClass, classes);
    };
    const TypographyRoot = styled$1("span", {
      name: "MuiTypography",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.variant && styles2[ownerState.variant], ownerState.align !== "inherit" && styles2[`align${capitalize(ownerState.align)}`], ownerState.noWrap && styles2.noWrap, ownerState.gutterBottom && styles2.gutterBottom, ownerState.paragraph && styles2.paragraph];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      margin: 0
    }, ownerState.variant && theme.typography[ownerState.variant], ownerState.align !== "inherit" && {
      textAlign: ownerState.align
    }, ownerState.noWrap && {
      overflow: "hidden",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap"
    }, ownerState.gutterBottom && {
      marginBottom: "0.35em"
    }, ownerState.paragraph && {
      marginBottom: 16
    }));
    const defaultVariantMapping = {
      h1: "h1",
      h2: "h2",
      h3: "h3",
      h4: "h4",
      h5: "h5",
      h6: "h6",
      subtitle1: "h6",
      subtitle2: "h6",
      body1: "p",
      body2: "p",
      inherit: "p"
    };
    const colorTransformations = {
      primary: "primary.main",
      textPrimary: "text.primary",
      secondary: "secondary.main",
      textSecondary: "text.secondary",
      error: "error.main"
    };
    const transformDeprecatedColors = (color2) => {
      return colorTransformations[color2] || color2;
    };
    const Typography = /* @__PURE__ */ react.exports.forwardRef(function Typography2(inProps, ref) {
      const themeProps = useThemeProps({
        props: inProps,
        name: "MuiTypography"
      });
      const color2 = transformDeprecatedColors(themeProps.color);
      const props = extendSxProp(_extends$1({}, themeProps, {
        color: color2
      }));
      const {
        align = "inherit",
        className,
        component,
        gutterBottom = false,
        noWrap = false,
        paragraph = false,
        variant = "body1",
        variantMapping = defaultVariantMapping
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1m);
      const ownerState = _extends$1({}, props, {
        align,
        color: color2,
        className,
        component,
        gutterBottom,
        noWrap,
        paragraph,
        variant,
        variantMapping
      });
      const Component = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
      const classes = useUtilityClasses$$(ownerState);
      return /* @__PURE__ */ jsx(TypographyRoot, _extends$1({
        as: Component,
        ref,
        ownerState,
        className: clsx(classes.root, className)
      }, other));
    });
    Typography.propTypes = {
      align: propTypes.exports.oneOf(["center", "inherit", "justify", "left", "right"]),
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      component: propTypes.exports.elementType,
      gutterBottom: propTypes.exports.bool,
      noWrap: propTypes.exports.bool,
      paragraph: propTypes.exports.bool,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      variant: propTypes.exports.oneOfType([propTypes.exports.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), propTypes.exports.string]),
      variantMapping: propTypes.exports.object
    };
    const Typography$1 = Typography;
    function getDialogContentTextUtilityClass(slot) {
      return generateUtilityClass("MuiDialogContentText", slot);
    }
    generateUtilityClasses("MuiDialogContentText", ["root"]);
    const _excluded$1l = ["children", "className"];
    const useUtilityClasses$_ = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      const composedClasses = composeClasses(slots, getDialogContentTextUtilityClass, classes);
      return _extends$1({}, classes, composedClasses);
    };
    const DialogContentTextRoot = styled$1(Typography$1, {
      shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
      name: "MuiDialogContentText",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({});
    const DialogContentText = /* @__PURE__ */ react.exports.forwardRef(function DialogContentText2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiDialogContentText"
      });
      const {
        className
      } = props, ownerState = _objectWithoutPropertiesLoose$1(props, _excluded$1l);
      const classes = useUtilityClasses$_(ownerState);
      return /* @__PURE__ */ jsx(DialogContentTextRoot, _extends$1({
        component: "p",
        variant: "body1",
        color: "text.secondary",
        ref,
        ownerState,
        className: clsx(classes.root, className)
      }, props, {
        classes
      }));
    });
    DialogContentText.propTypes = {
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
    };
    const DialogContentText$1 = DialogContentText;
    const _excluded$1k = ["className", "id"];
    const useUtilityClasses$Z = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, getDialogTitleUtilityClass, classes);
    };
    const DialogTitleRoot = styled$1(Typography$1, {
      name: "MuiDialogTitle",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({
      padding: "16px 24px",
      flex: "0 0 auto"
    });
    const DialogTitle = /* @__PURE__ */ react.exports.forwardRef(function DialogTitle2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiDialogTitle"
      });
      const {
        className,
        id: idProp
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1k);
      const ownerState = props;
      const classes = useUtilityClasses$Z(ownerState);
      const {
        titleId = idProp
      } = react.exports.useContext(DialogContext$1);
      return /* @__PURE__ */ jsx(DialogTitleRoot, _extends$1({
        component: "h2",
        className: clsx(classes.root, className),
        ownerState,
        ref,
        variant: "h6",
        id: idProp != null ? idProp : titleId
      }, other));
    });
    DialogTitle.propTypes = {
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      id: propTypes.exports.string,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
    };
    const DialogTitle$1 = DialogTitle;
    function formControlState({
      props,
      states,
      muiFormControl
    }) {
      return states.reduce((acc, state) => {
        acc[state] = props[state];
        if (muiFormControl) {
          if (typeof props[state] === "undefined") {
            acc[state] = muiFormControl[state];
          }
        }
        return acc;
      }, {});
    }
    const FormControlContext = /* @__PURE__ */ react.exports.createContext(void 0);
    {
      FormControlContext.displayName = "FormControlContext";
    }
    const FormControlContext$1 = FormControlContext;
    function useFormControl() {
      return react.exports.useContext(FormControlContext$1);
    }
    function GlobalStyles(props) {
      return /* @__PURE__ */ jsx(GlobalStyles$1, _extends$1({}, props, {
        defaultTheme: defaultTheme$1,
        themeId: THEME_ID
      }));
    }
    GlobalStyles.propTypes = {
      styles: propTypes.exports.oneOfType([propTypes.exports.array, propTypes.exports.func, propTypes.exports.number, propTypes.exports.object, propTypes.exports.string, propTypes.exports.bool])
    };
    function hasValue(value2) {
      return value2 != null && !(Array.isArray(value2) && value2.length === 0);
    }
    function isFilled(obj, SSR = false) {
      return obj && (hasValue(obj.value) && obj.value !== "" || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== "");
    }
    function isAdornedStart(obj) {
      return obj.startAdornment;
    }
    function getInputBaseUtilityClass(slot) {
      return generateUtilityClass("MuiInputBase", slot);
    }
    const inputBaseClasses = generateUtilityClasses("MuiInputBase", ["root", "formControl", "focused", "disabled", "adornedStart", "adornedEnd", "error", "sizeSmall", "multiline", "colorSecondary", "fullWidth", "hiddenLabel", "readOnly", "input", "inputSizeSmall", "inputMultiline", "inputTypeSearch", "inputAdornedStart", "inputAdornedEnd", "inputHiddenLabel"]);
    const inputBaseClasses$1 = inputBaseClasses;
    const _excluded$1j = ["aria-describedby", "autoComplete", "autoFocus", "className", "color", "components", "componentsProps", "defaultValue", "disabled", "disableInjectingGlobalStyles", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "size", "slotProps", "slots", "startAdornment", "type", "value"];
    const rootOverridesResolver = (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.formControl && styles2.formControl, ownerState.startAdornment && styles2.adornedStart, ownerState.endAdornment && styles2.adornedEnd, ownerState.error && styles2.error, ownerState.size === "small" && styles2.sizeSmall, ownerState.multiline && styles2.multiline, ownerState.color && styles2[`color${capitalize(ownerState.color)}`], ownerState.fullWidth && styles2.fullWidth, ownerState.hiddenLabel && styles2.hiddenLabel];
    };
    const inputOverridesResolver = (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.input, ownerState.size === "small" && styles2.inputSizeSmall, ownerState.multiline && styles2.inputMultiline, ownerState.type === "search" && styles2.inputTypeSearch, ownerState.startAdornment && styles2.inputAdornedStart, ownerState.endAdornment && styles2.inputAdornedEnd, ownerState.hiddenLabel && styles2.inputHiddenLabel];
    };
    const useUtilityClasses$Y = (ownerState) => {
      const {
        classes,
        color: color2,
        disabled,
        error,
        endAdornment,
        focused,
        formControl,
        fullWidth,
        hiddenLabel,
        multiline,
        readOnly,
        size,
        startAdornment,
        type
      } = ownerState;
      const slots = {
        root: ["root", `color${capitalize(color2)}`, disabled && "disabled", error && "error", fullWidth && "fullWidth", focused && "focused", formControl && "formControl", size === "small" && "sizeSmall", multiline && "multiline", startAdornment && "adornedStart", endAdornment && "adornedEnd", hiddenLabel && "hiddenLabel", readOnly && "readOnly"],
        input: ["input", disabled && "disabled", type === "search" && "inputTypeSearch", multiline && "inputMultiline", size === "small" && "inputSizeSmall", hiddenLabel && "inputHiddenLabel", startAdornment && "inputAdornedStart", endAdornment && "inputAdornedEnd", readOnly && "readOnly"]
      };
      return composeClasses(slots, getInputBaseUtilityClass, classes);
    };
    const InputBaseRoot = styled$1("div", {
      name: "MuiInputBase",
      slot: "Root",
      overridesResolver: rootOverridesResolver
    })(({
      theme,
      ownerState
    }) => _extends$1({}, theme.typography.body1, {
      color: (theme.vars || theme).palette.text.primary,
      lineHeight: "1.4375em",
      boxSizing: "border-box",
      position: "relative",
      cursor: "text",
      display: "inline-flex",
      alignItems: "center",
      [`&.${inputBaseClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled,
        cursor: "default"
      }
    }, ownerState.multiline && _extends$1({
      padding: "4px 0 5px"
    }, ownerState.size === "small" && {
      paddingTop: 1
    }), ownerState.fullWidth && {
      width: "100%"
    }));
    const InputBaseComponent = styled$1("input", {
      name: "MuiInputBase",
      slot: "Input",
      overridesResolver: inputOverridesResolver
    })(({
      theme,
      ownerState
    }) => {
      const light2 = theme.palette.mode === "light";
      const placeholder = _extends$1({
        color: "currentColor"
      }, theme.vars ? {
        opacity: theme.vars.opacity.inputPlaceholder
      } : {
        opacity: light2 ? 0.42 : 0.5
      }, {
        transition: theme.transitions.create("opacity", {
          duration: theme.transitions.duration.shorter
        })
      });
      const placeholderHidden = {
        opacity: "0 !important"
      };
      const placeholderVisible = theme.vars ? {
        opacity: theme.vars.opacity.inputPlaceholder
      } : {
        opacity: light2 ? 0.42 : 0.5
      };
      return _extends$1({
        font: "inherit",
        letterSpacing: "inherit",
        color: "currentColor",
        padding: "4px 0 5px",
        border: 0,
        boxSizing: "content-box",
        background: "none",
        height: "1.4375em",
        margin: 0,
        WebkitTapHighlightColor: "transparent",
        display: "block",
        minWidth: 0,
        width: "100%",
        animationName: "mui-auto-fill-cancel",
        animationDuration: "10ms",
        "&::-webkit-input-placeholder": placeholder,
        "&::-moz-placeholder": placeholder,
        "&:-ms-input-placeholder": placeholder,
        "&::-ms-input-placeholder": placeholder,
        "&:focus": {
          outline: 0
        },
        "&:invalid": {
          boxShadow: "none"
        },
        "&::-webkit-search-decoration": {
          WebkitAppearance: "none"
        },
        [`label[data-shrink=false] + .${inputBaseClasses$1.formControl} &`]: {
          "&::-webkit-input-placeholder": placeholderHidden,
          "&::-moz-placeholder": placeholderHidden,
          "&:-ms-input-placeholder": placeholderHidden,
          "&::-ms-input-placeholder": placeholderHidden,
          "&:focus::-webkit-input-placeholder": placeholderVisible,
          "&:focus::-moz-placeholder": placeholderVisible,
          "&:focus:-ms-input-placeholder": placeholderVisible,
          "&:focus::-ms-input-placeholder": placeholderVisible
        },
        [`&.${inputBaseClasses$1.disabled}`]: {
          opacity: 1,
          WebkitTextFillColor: (theme.vars || theme).palette.text.disabled
        },
        "&:-webkit-autofill": {
          animationDuration: "5000s",
          animationName: "mui-auto-fill"
        }
      }, ownerState.size === "small" && {
        paddingTop: 1
      }, ownerState.multiline && {
        height: "auto",
        resize: "none",
        padding: 0,
        paddingTop: 0
      }, ownerState.type === "search" && {
        MozAppearance: "textfield"
      });
    });
    const inputGlobalStyles = /* @__PURE__ */ jsx(GlobalStyles, {
      styles: {
        "@keyframes mui-auto-fill": {
          from: {
            display: "block"
          }
        },
        "@keyframes mui-auto-fill-cancel": {
          from: {
            display: "block"
          }
        }
      }
    });
    const InputBase = /* @__PURE__ */ react.exports.forwardRef(function InputBase2(inProps, ref) {
      var _slotProps$input;
      const props = useThemeProps({
        props: inProps,
        name: "MuiInputBase"
      });
      const {
        "aria-describedby": ariaDescribedby,
        autoComplete,
        autoFocus,
        className,
        components = {},
        componentsProps = {},
        defaultValue: defaultValue2,
        disabled,
        disableInjectingGlobalStyles,
        endAdornment,
        fullWidth = false,
        id,
        inputComponent = "input",
        inputProps: inputPropsProp = {},
        inputRef: inputRefProp,
        maxRows,
        minRows,
        multiline = false,
        name,
        onBlur,
        onChange,
        onClick,
        onFocus,
        onKeyDown,
        onKeyUp,
        placeholder,
        readOnly,
        renderSuffix,
        rows,
        slotProps = {},
        slots = {},
        startAdornment,
        type = "text",
        value: valueProp
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1j);
      const value2 = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
      const {
        current: isControlled
      } = react.exports.useRef(value2 != null);
      const inputRef = react.exports.useRef();
      const handleInputRefWarning = react.exports.useCallback((instance) => {
        {
          if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
            console.error(["MUI: You have provided a `inputComponent` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
          }
        }
      }, []);
      const handleInputRef = useForkRef(inputRef, inputRefProp, inputPropsProp.ref, handleInputRefWarning);
      const [focused, setFocused] = react.exports.useState(false);
      const muiFormControl = useFormControl();
      {
        react.exports.useEffect(() => {
          if (muiFormControl) {
            return muiFormControl.registerEffect();
          }
          return void 0;
        }, [muiFormControl]);
      }
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ["color", "disabled", "error", "hiddenLabel", "size", "required", "filled"]
      });
      fcs.focused = muiFormControl ? muiFormControl.focused : focused;
      react.exports.useEffect(() => {
        if (!muiFormControl && disabled && focused) {
          setFocused(false);
          if (onBlur) {
            onBlur();
          }
        }
      }, [muiFormControl, disabled, focused, onBlur]);
      const onFilled = muiFormControl && muiFormControl.onFilled;
      const onEmpty = muiFormControl && muiFormControl.onEmpty;
      const checkDirty = react.exports.useCallback((obj) => {
        if (isFilled(obj)) {
          if (onFilled) {
            onFilled();
          }
        } else if (onEmpty) {
          onEmpty();
        }
      }, [onFilled, onEmpty]);
      useEnhancedEffect$1(() => {
        if (isControlled) {
          checkDirty({
            value: value2
          });
        }
      }, [value2, checkDirty, isControlled]);
      const handleFocus = (event) => {
        if (fcs.disabled) {
          event.stopPropagation();
          return;
        }
        if (onFocus) {
          onFocus(event);
        }
        if (inputPropsProp.onFocus) {
          inputPropsProp.onFocus(event);
        }
        if (muiFormControl && muiFormControl.onFocus) {
          muiFormControl.onFocus(event);
        } else {
          setFocused(true);
        }
      };
      const handleBlur = (event) => {
        if (onBlur) {
          onBlur(event);
        }
        if (inputPropsProp.onBlur) {
          inputPropsProp.onBlur(event);
        }
        if (muiFormControl && muiFormControl.onBlur) {
          muiFormControl.onBlur(event);
        } else {
          setFocused(false);
        }
      };
      const handleChange = (event, ...args) => {
        if (!isControlled) {
          const element = event.target || inputRef.current;
          if (element == null) {
            throw new Error(`MUI: Expected valid input target. Did you use a custom \`inputComponent\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.`);
          }
          checkDirty({
            value: element.value
          });
        }
        if (inputPropsProp.onChange) {
          inputPropsProp.onChange(event, ...args);
        }
        if (onChange) {
          onChange(event, ...args);
        }
      };
      react.exports.useEffect(() => {
        checkDirty(inputRef.current);
      }, []);
      const handleClick = (event) => {
        if (inputRef.current && event.currentTarget === event.target) {
          inputRef.current.focus();
        }
        if (onClick && !fcs.disabled) {
          onClick(event);
        }
      };
      let InputComponent = inputComponent;
      let inputProps = inputPropsProp;
      if (multiline && InputComponent === "input") {
        if (rows) {
          {
            if (minRows || maxRows) {
              console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.");
            }
          }
          inputProps = _extends$1({
            type: void 0,
            minRows: rows,
            maxRows: rows
          }, inputProps);
        } else {
          inputProps = _extends$1({
            type: void 0,
            maxRows,
            minRows
          }, inputProps);
        }
        InputComponent = TextareaAutosize$1;
      }
      const handleAutoFill = (event) => {
        checkDirty(event.animationName === "mui-auto-fill-cancel" ? inputRef.current : {
          value: "x"
        });
      };
      react.exports.useEffect(() => {
        if (muiFormControl) {
          muiFormControl.setAdornedStart(Boolean(startAdornment));
        }
      }, [muiFormControl, startAdornment]);
      const ownerState = _extends$1({}, props, {
        color: fcs.color || "primary",
        disabled: fcs.disabled,
        endAdornment,
        error: fcs.error,
        focused: fcs.focused,
        formControl: muiFormControl,
        fullWidth,
        hiddenLabel: fcs.hiddenLabel,
        multiline,
        size: fcs.size,
        startAdornment,
        type
      });
      const classes = useUtilityClasses$Y(ownerState);
      const Root = slots.root || components.Root || InputBaseRoot;
      const rootProps = slotProps.root || componentsProps.root || {};
      const Input2 = slots.input || components.Input || InputBaseComponent;
      inputProps = _extends$1({}, inputProps, (_slotProps$input = slotProps.input) != null ? _slotProps$input : componentsProps.input);
      return /* @__PURE__ */ jsxs(react.exports.Fragment, {
        children: [!disableInjectingGlobalStyles && inputGlobalStyles, /* @__PURE__ */ jsxs(Root, _extends$1({}, rootProps, !isHostComponent(Root) && {
          ownerState: _extends$1({}, ownerState, rootProps.ownerState)
        }, {
          ref,
          onClick: handleClick
        }, other, {
          className: clsx(classes.root, rootProps.className, className, readOnly && "MuiInputBase-readOnly"),
          children: [startAdornment, /* @__PURE__ */ jsx(FormControlContext$1.Provider, {
            value: null,
            children: /* @__PURE__ */ jsx(Input2, _extends$1({
              ownerState,
              "aria-invalid": fcs.error,
              "aria-describedby": ariaDescribedby,
              autoComplete,
              autoFocus,
              defaultValue: defaultValue2,
              disabled: fcs.disabled,
              id,
              onAnimationStart: handleAutoFill,
              name,
              placeholder,
              readOnly,
              required: fcs.required,
              rows,
              value: value2,
              onKeyDown,
              onKeyUp,
              type
            }, inputProps, !isHostComponent(Input2) && {
              as: InputComponent,
              ownerState: _extends$1({}, ownerState, inputProps.ownerState)
            }, {
              ref: handleInputRef,
              className: clsx(classes.input, inputProps.className, readOnly && "MuiInputBase-readOnly"),
              onBlur: handleBlur,
              onChange: handleChange,
              onFocus: handleFocus
            }))
          }), endAdornment, renderSuffix ? renderSuffix(_extends$1({}, fcs, {
            startAdornment
          })) : null]
        }))]
      });
    });
    InputBase.propTypes = {
      "aria-describedby": propTypes.exports.string,
      autoComplete: propTypes.exports.string,
      autoFocus: propTypes.exports.bool,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      color: propTypes.exports.oneOfType([propTypes.exports.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), propTypes.exports.string]),
      components: propTypes.exports.shape({
        Input: propTypes.exports.elementType,
        Root: propTypes.exports.elementType
      }),
      componentsProps: propTypes.exports.shape({
        input: propTypes.exports.object,
        root: propTypes.exports.object
      }),
      defaultValue: propTypes.exports.any,
      disabled: propTypes.exports.bool,
      disableInjectingGlobalStyles: propTypes.exports.bool,
      endAdornment: propTypes.exports.node,
      error: propTypes.exports.bool,
      fullWidth: propTypes.exports.bool,
      id: propTypes.exports.string,
      inputComponent: elementTypeAcceptingRef$1,
      inputProps: propTypes.exports.object,
      inputRef: refType$1,
      margin: propTypes.exports.oneOf(["dense", "none"]),
      maxRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),
      minRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),
      multiline: propTypes.exports.bool,
      name: propTypes.exports.string,
      onBlur: propTypes.exports.func,
      onChange: propTypes.exports.func,
      onClick: propTypes.exports.func,
      onFocus: propTypes.exports.func,
      onInvalid: propTypes.exports.func,
      onKeyDown: propTypes.exports.func,
      onKeyUp: propTypes.exports.func,
      placeholder: propTypes.exports.string,
      readOnly: propTypes.exports.bool,
      renderSuffix: propTypes.exports.func,
      required: propTypes.exports.bool,
      rows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),
      size: propTypes.exports.oneOfType([propTypes.exports.oneOf(["medium", "small"]), propTypes.exports.string]),
      slotProps: propTypes.exports.shape({
        input: propTypes.exports.object,
        root: propTypes.exports.object
      }),
      slots: propTypes.exports.shape({
        input: propTypes.exports.elementType,
        root: propTypes.exports.elementType
      }),
      startAdornment: propTypes.exports.node,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      type: propTypes.exports.string,
      value: propTypes.exports.any
    };
    const InputBase$1 = InputBase;
    function getInputUtilityClass(slot) {
      return generateUtilityClass("MuiInput", slot);
    }
    const inputClasses = _extends$1({}, inputBaseClasses$1, generateUtilityClasses("MuiInput", ["root", "underline", "input"]));
    const inputClasses$1 = inputClasses;
    const _excluded$1i = ["disableUnderline", "components", "componentsProps", "fullWidth", "inputComponent", "multiline", "slotProps", "slots", "type"];
    const useUtilityClasses$X = (ownerState) => {
      const {
        classes,
        disableUnderline
      } = ownerState;
      const slots = {
        root: ["root", !disableUnderline && "underline"],
        input: ["input"]
      };
      const composedClasses = composeClasses(slots, getInputUtilityClass, classes);
      return _extends$1({}, classes, composedClasses);
    };
    const InputRoot = styled$1(InputBaseRoot, {
      shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
      name: "MuiInput",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [...rootOverridesResolver(props, styles2), !ownerState.disableUnderline && styles2.underline];
      }
    })(({
      theme,
      ownerState
    }) => {
      const light2 = theme.palette.mode === "light";
      let bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
      if (theme.vars) {
        bottomLineColor = `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})`;
      }
      return _extends$1({
        position: "relative"
      }, ownerState.formControl && {
        "label + &": {
          marginTop: 16
        }
      }, !ownerState.disableUnderline && {
        "&:after": {
          borderBottom: `2px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
          left: 0,
          bottom: 0,
          content: '""',
          position: "absolute",
          right: 0,
          transform: "scaleX(0)",
          transition: theme.transitions.create("transform", {
            duration: theme.transitions.duration.shorter,
            easing: theme.transitions.easing.easeOut
          }),
          pointerEvents: "none"
        },
        [`&.${inputClasses$1.focused}:after`]: {
          transform: "scaleX(1) translateX(0)"
        },
        [`&.${inputClasses$1.error}`]: {
          "&:before, &:after": {
            borderBottomColor: (theme.vars || theme).palette.error.main
          }
        },
        "&:before": {
          borderBottom: `1px solid ${bottomLineColor}`,
          left: 0,
          bottom: 0,
          content: '"\\00a0"',
          position: "absolute",
          right: 0,
          transition: theme.transitions.create("border-bottom-color", {
            duration: theme.transitions.duration.shorter
          }),
          pointerEvents: "none"
        },
        [`&:hover:not(.${inputClasses$1.disabled}, .${inputClasses$1.error}):before`]: {
          borderBottom: `2px solid ${(theme.vars || theme).palette.text.primary}`,
          "@media (hover: none)": {
            borderBottom: `1px solid ${bottomLineColor}`
          }
        },
        [`&.${inputClasses$1.disabled}:before`]: {
          borderBottomStyle: "dotted"
        }
      });
    });
    const InputInput = styled$1(InputBaseComponent, {
      name: "MuiInput",
      slot: "Input",
      overridesResolver: inputOverridesResolver
    })({});
    const Input = /* @__PURE__ */ react.exports.forwardRef(function Input2(inProps, ref) {
      var _ref, _slots$root, _ref2, _slots$input;
      const props = useThemeProps({
        props: inProps,
        name: "MuiInput"
      });
      const {
        disableUnderline,
        components = {},
        componentsProps: componentsPropsProp,
        fullWidth = false,
        inputComponent = "input",
        multiline = false,
        slotProps,
        slots = {},
        type = "text"
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1i);
      const classes = useUtilityClasses$X(props);
      const ownerState = {
        disableUnderline
      };
      const inputComponentsProps = {
        root: {
          ownerState
        }
      };
      const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? deepmerge(slotProps != null ? slotProps : componentsPropsProp, inputComponentsProps) : inputComponentsProps;
      const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : InputRoot;
      const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : InputInput;
      return /* @__PURE__ */ jsx(InputBase$1, _extends$1({
        slots: {
          root: RootSlot,
          input: InputSlot
        },
        slotProps: componentsProps,
        fullWidth,
        inputComponent,
        multiline,
        ref,
        type
      }, other, {
        classes
      }));
    });
    Input.propTypes = {
      autoComplete: propTypes.exports.string,
      autoFocus: propTypes.exports.bool,
      classes: propTypes.exports.object,
      color: propTypes.exports.oneOfType([propTypes.exports.oneOf(["primary", "secondary"]), propTypes.exports.string]),
      components: propTypes.exports.shape({
        Input: propTypes.exports.elementType,
        Root: propTypes.exports.elementType
      }),
      componentsProps: propTypes.exports.shape({
        input: propTypes.exports.object,
        root: propTypes.exports.object
      }),
      defaultValue: propTypes.exports.any,
      disabled: propTypes.exports.bool,
      disableUnderline: propTypes.exports.bool,
      endAdornment: propTypes.exports.node,
      error: propTypes.exports.bool,
      fullWidth: propTypes.exports.bool,
      id: propTypes.exports.string,
      inputComponent: propTypes.exports.elementType,
      inputProps: propTypes.exports.object,
      inputRef: refType$1,
      margin: propTypes.exports.oneOf(["dense", "none"]),
      maxRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),
      minRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),
      multiline: propTypes.exports.bool,
      name: propTypes.exports.string,
      onChange: propTypes.exports.func,
      placeholder: propTypes.exports.string,
      readOnly: propTypes.exports.bool,
      required: propTypes.exports.bool,
      rows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),
      slotProps: propTypes.exports.shape({
        input: propTypes.exports.object,
        root: propTypes.exports.object
      }),
      slots: propTypes.exports.shape({
        input: propTypes.exports.elementType,
        root: propTypes.exports.elementType
      }),
      startAdornment: propTypes.exports.node,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      type: propTypes.exports.string,
      value: propTypes.exports.any
    };
    Input.muiName = "Input";
    const Input$1 = Input;
    function getFilledInputUtilityClass(slot) {
      return generateUtilityClass("MuiFilledInput", slot);
    }
    const filledInputClasses = _extends$1({}, inputBaseClasses$1, generateUtilityClasses("MuiFilledInput", ["root", "underline", "input"]));
    const filledInputClasses$1 = filledInputClasses;
    const _excluded$1h = ["disableUnderline", "components", "componentsProps", "fullWidth", "hiddenLabel", "inputComponent", "multiline", "slotProps", "slots", "type"];
    const useUtilityClasses$W = (ownerState) => {
      const {
        classes,
        disableUnderline
      } = ownerState;
      const slots = {
        root: ["root", !disableUnderline && "underline"],
        input: ["input"]
      };
      const composedClasses = composeClasses(slots, getFilledInputUtilityClass, classes);
      return _extends$1({}, classes, composedClasses);
    };
    const FilledInputRoot = styled$1(InputBaseRoot, {
      shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
      name: "MuiFilledInput",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [...rootOverridesResolver(props, styles2), !ownerState.disableUnderline && styles2.underline];
      }
    })(({
      theme,
      ownerState
    }) => {
      var _palette;
      const light2 = theme.palette.mode === "light";
      const bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
      const backgroundColor2 = light2 ? "rgba(0, 0, 0, 0.06)" : "rgba(255, 255, 255, 0.09)";
      const hoverBackground = light2 ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.13)";
      const disabledBackground = light2 ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)";
      return _extends$1({
        position: "relative",
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2,
        borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
        borderTopRightRadius: (theme.vars || theme).shape.borderRadius,
        transition: theme.transitions.create("background-color", {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        "&:hover": {
          backgroundColor: theme.vars ? theme.vars.palette.FilledInput.hoverBg : hoverBackground,
          "@media (hover: none)": {
            backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2
          }
        },
        [`&.${filledInputClasses$1.focused}`]: {
          backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2
        },
        [`&.${filledInputClasses$1.disabled}`]: {
          backgroundColor: theme.vars ? theme.vars.palette.FilledInput.disabledBg : disabledBackground
        }
      }, !ownerState.disableUnderline && {
        "&:after": {
          borderBottom: `2px solid ${(_palette = (theme.vars || theme).palette[ownerState.color || "primary"]) == null ? void 0 : _palette.main}`,
          left: 0,
          bottom: 0,
          content: '""',
          position: "absolute",
          right: 0,
          transform: "scaleX(0)",
          transition: theme.transitions.create("transform", {
            duration: theme.transitions.duration.shorter,
            easing: theme.transitions.easing.easeOut
          }),
          pointerEvents: "none"
        },
        [`&.${filledInputClasses$1.focused}:after`]: {
          transform: "scaleX(1) translateX(0)"
        },
        [`&.${filledInputClasses$1.error}`]: {
          "&:before, &:after": {
            borderBottomColor: (theme.vars || theme).palette.error.main
          }
        },
        "&:before": {
          borderBottom: `1px solid ${theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})` : bottomLineColor}`,
          left: 0,
          bottom: 0,
          content: '"\\00a0"',
          position: "absolute",
          right: 0,
          transition: theme.transitions.create("border-bottom-color", {
            duration: theme.transitions.duration.shorter
          }),
          pointerEvents: "none"
        },
        [`&:hover:not(.${filledInputClasses$1.disabled}, .${filledInputClasses$1.error}):before`]: {
          borderBottom: `1px solid ${(theme.vars || theme).palette.text.primary}`
        },
        [`&.${filledInputClasses$1.disabled}:before`]: {
          borderBottomStyle: "dotted"
        }
      }, ownerState.startAdornment && {
        paddingLeft: 12
      }, ownerState.endAdornment && {
        paddingRight: 12
      }, ownerState.multiline && _extends$1({
        padding: "25px 12px 8px"
      }, ownerState.size === "small" && {
        paddingTop: 21,
        paddingBottom: 4
      }, ownerState.hiddenLabel && {
        paddingTop: 16,
        paddingBottom: 17
      }));
    });
    const FilledInputInput = styled$1(InputBaseComponent, {
      name: "MuiFilledInput",
      slot: "Input",
      overridesResolver: inputOverridesResolver
    })(({
      theme,
      ownerState
    }) => _extends$1({
      paddingTop: 25,
      paddingRight: 12,
      paddingBottom: 8,
      paddingLeft: 12
    }, !theme.vars && {
      "&:-webkit-autofill": {
        WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
        WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
        caretColor: theme.palette.mode === "light" ? null : "#fff",
        borderTopLeftRadius: "inherit",
        borderTopRightRadius: "inherit"
      }
    }, theme.vars && {
      "&:-webkit-autofill": {
        borderTopLeftRadius: "inherit",
        borderTopRightRadius: "inherit"
      },
      [theme.getColorSchemeSelector("dark")]: {
        "&:-webkit-autofill": {
          WebkitBoxShadow: "0 0 0 100px #266798 inset",
          WebkitTextFillColor: "#fff",
          caretColor: "#fff"
        }
      }
    }, ownerState.size === "small" && {
      paddingTop: 21,
      paddingBottom: 4
    }, ownerState.hiddenLabel && {
      paddingTop: 16,
      paddingBottom: 17
    }, ownerState.multiline && {
      paddingTop: 0,
      paddingBottom: 0,
      paddingLeft: 0,
      paddingRight: 0
    }, ownerState.startAdornment && {
      paddingLeft: 0
    }, ownerState.endAdornment && {
      paddingRight: 0
    }, ownerState.hiddenLabel && ownerState.size === "small" && {
      paddingTop: 8,
      paddingBottom: 9
    }));
    const FilledInput = /* @__PURE__ */ react.exports.forwardRef(function FilledInput2(inProps, ref) {
      var _ref, _slots$root, _ref2, _slots$input;
      const props = useThemeProps({
        props: inProps,
        name: "MuiFilledInput"
      });
      const {
        components = {},
        componentsProps: componentsPropsProp,
        fullWidth = false,
        inputComponent = "input",
        multiline = false,
        slotProps,
        slots = {},
        type = "text"
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1h);
      const ownerState = _extends$1({}, props, {
        fullWidth,
        inputComponent,
        multiline,
        type
      });
      const classes = useUtilityClasses$W(props);
      const filledInputComponentsProps = {
        root: {
          ownerState
        },
        input: {
          ownerState
        }
      };
      const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? deepmerge(slotProps != null ? slotProps : componentsPropsProp, filledInputComponentsProps) : filledInputComponentsProps;
      const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : FilledInputRoot;
      const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : FilledInputInput;
      return /* @__PURE__ */ jsx(InputBase$1, _extends$1({
        slots: {
          root: RootSlot,
          input: InputSlot
        },
        componentsProps,
        fullWidth,
        inputComponent,
        multiline,
        ref,
        type
      }, other, {
        classes
      }));
    });
    FilledInput.propTypes = {
      autoComplete: propTypes.exports.string,
      autoFocus: propTypes.exports.bool,
      classes: propTypes.exports.object,
      color: propTypes.exports.oneOfType([propTypes.exports.oneOf(["primary", "secondary"]), propTypes.exports.string]),
      components: propTypes.exports.shape({
        Input: propTypes.exports.elementType,
        Root: propTypes.exports.elementType
      }),
      componentsProps: propTypes.exports.shape({
        input: propTypes.exports.object,
        root: propTypes.exports.object
      }),
      defaultValue: propTypes.exports.any,
      disabled: propTypes.exports.bool,
      disableUnderline: propTypes.exports.bool,
      endAdornment: propTypes.exports.node,
      error: propTypes.exports.bool,
      fullWidth: propTypes.exports.bool,
      hiddenLabel: propTypes.exports.bool,
      id: propTypes.exports.string,
      inputComponent: propTypes.exports.elementType,
      inputProps: propTypes.exports.object,
      inputRef: refType$1,
      margin: propTypes.exports.oneOf(["dense", "none"]),
      maxRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),
      minRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),
      multiline: propTypes.exports.bool,
      name: propTypes.exports.string,
      onChange: propTypes.exports.func,
      placeholder: propTypes.exports.string,
      readOnly: propTypes.exports.bool,
      required: propTypes.exports.bool,
      rows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),
      slotProps: propTypes.exports.shape({
        input: propTypes.exports.object,
        root: propTypes.exports.object
      }),
      slots: propTypes.exports.shape({
        input: propTypes.exports.elementType,
        root: propTypes.exports.elementType
      }),
      startAdornment: propTypes.exports.node,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      type: propTypes.exports.string,
      value: propTypes.exports.any
    };
    FilledInput.muiName = "Input";
    const FilledInput$1 = FilledInput;
    var _span$3;
    const _excluded$1g = ["children", "classes", "className", "label", "notched"];
    const NotchedOutlineRoot$1 = styled$1("fieldset")({
      textAlign: "left",
      position: "absolute",
      bottom: 0,
      right: 0,
      top: -5,
      left: 0,
      margin: 0,
      padding: "0 8px",
      pointerEvents: "none",
      borderRadius: "inherit",
      borderStyle: "solid",
      borderWidth: 1,
      overflow: "hidden",
      minWidth: "0%"
    });
    const NotchedOutlineLegend = styled$1("legend")(({
      ownerState,
      theme
    }) => _extends$1({
      float: "unset",
      width: "auto",
      overflow: "hidden"
    }, !ownerState.withLabel && {
      padding: 0,
      lineHeight: "11px",
      transition: theme.transitions.create("width", {
        duration: 150,
        easing: theme.transitions.easing.easeOut
      })
    }, ownerState.withLabel && _extends$1({
      display: "block",
      padding: 0,
      height: 11,
      fontSize: "0.75em",
      visibility: "hidden",
      maxWidth: 0.01,
      transition: theme.transitions.create("max-width", {
        duration: 50,
        easing: theme.transitions.easing.easeOut
      }),
      whiteSpace: "nowrap",
      "& > span": {
        paddingLeft: 5,
        paddingRight: 5,
        display: "inline-block",
        opacity: 0,
        visibility: "visible"
      }
    }, ownerState.notched && {
      maxWidth: "100%",
      transition: theme.transitions.create("max-width", {
        duration: 100,
        easing: theme.transitions.easing.easeOut,
        delay: 50
      })
    })));
    function NotchedOutline(props) {
      const {
        className,
        label,
        notched
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1g);
      const withLabel = label != null && label !== "";
      const ownerState = _extends$1({}, props, {
        notched,
        withLabel
      });
      return /* @__PURE__ */ jsx(NotchedOutlineRoot$1, _extends$1({
        "aria-hidden": true,
        className,
        ownerState
      }, other, {
        children: /* @__PURE__ */ jsx(NotchedOutlineLegend, {
          ownerState,
          children: withLabel ? /* @__PURE__ */ jsx("span", {
            children: label
          }) : _span$3 || (_span$3 = /* @__PURE__ */ jsx("span", {
            className: "notranslate",
            children: "\u200B"
          }))
        })
      }));
    }
    NotchedOutline.propTypes = {
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      label: propTypes.exports.node,
      notched: propTypes.exports.bool.isRequired,
      style: propTypes.exports.object
    };
    function getOutlinedInputUtilityClass(slot) {
      return generateUtilityClass("MuiOutlinedInput", slot);
    }
    const outlinedInputClasses = _extends$1({}, inputBaseClasses$1, generateUtilityClasses("MuiOutlinedInput", ["root", "notchedOutline", "input"]));
    const outlinedInputClasses$1 = outlinedInputClasses;
    const _excluded$1f = ["components", "fullWidth", "inputComponent", "label", "multiline", "notched", "slots", "type"];
    const useUtilityClasses$V = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        notchedOutline: ["notchedOutline"],
        input: ["input"]
      };
      const composedClasses = composeClasses(slots, getOutlinedInputUtilityClass, classes);
      return _extends$1({}, classes, composedClasses);
    };
    const OutlinedInputRoot = styled$1(InputBaseRoot, {
      shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
      name: "MuiOutlinedInput",
      slot: "Root",
      overridesResolver: rootOverridesResolver
    })(({
      theme,
      ownerState
    }) => {
      const borderColor2 = theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
      return _extends$1({
        position: "relative",
        borderRadius: (theme.vars || theme).shape.borderRadius,
        [`&:hover .${outlinedInputClasses$1.notchedOutline}`]: {
          borderColor: (theme.vars || theme).palette.text.primary
        },
        "@media (hover: none)": {
          [`&:hover .${outlinedInputClasses$1.notchedOutline}`]: {
            borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor2
          }
        },
        [`&.${outlinedInputClasses$1.focused} .${outlinedInputClasses$1.notchedOutline}`]: {
          borderColor: (theme.vars || theme).palette[ownerState.color].main,
          borderWidth: 2
        },
        [`&.${outlinedInputClasses$1.error} .${outlinedInputClasses$1.notchedOutline}`]: {
          borderColor: (theme.vars || theme).palette.error.main
        },
        [`&.${outlinedInputClasses$1.disabled} .${outlinedInputClasses$1.notchedOutline}`]: {
          borderColor: (theme.vars || theme).palette.action.disabled
        }
      }, ownerState.startAdornment && {
        paddingLeft: 14
      }, ownerState.endAdornment && {
        paddingRight: 14
      }, ownerState.multiline && _extends$1({
        padding: "16.5px 14px"
      }, ownerState.size === "small" && {
        padding: "8.5px 14px"
      }));
    });
    const NotchedOutlineRoot = styled$1(NotchedOutline, {
      name: "MuiOutlinedInput",
      slot: "NotchedOutline",
      overridesResolver: (props, styles2) => styles2.notchedOutline
    })(({
      theme
    }) => {
      const borderColor2 = theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
      return {
        borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor2
      };
    });
    const OutlinedInputInput = styled$1(InputBaseComponent, {
      name: "MuiOutlinedInput",
      slot: "Input",
      overridesResolver: inputOverridesResolver
    })(({
      theme,
      ownerState
    }) => _extends$1({
      padding: "16.5px 14px"
    }, !theme.vars && {
      "&:-webkit-autofill": {
        WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
        WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
        caretColor: theme.palette.mode === "light" ? null : "#fff",
        borderRadius: "inherit"
      }
    }, theme.vars && {
      "&:-webkit-autofill": {
        borderRadius: "inherit"
      },
      [theme.getColorSchemeSelector("dark")]: {
        "&:-webkit-autofill": {
          WebkitBoxShadow: "0 0 0 100px #266798 inset",
          WebkitTextFillColor: "#fff",
          caretColor: "#fff"
        }
      }
    }, ownerState.size === "small" && {
      padding: "8.5px 14px"
    }, ownerState.multiline && {
      padding: 0
    }, ownerState.startAdornment && {
      paddingLeft: 0
    }, ownerState.endAdornment && {
      paddingRight: 0
    }));
    const OutlinedInput = /* @__PURE__ */ react.exports.forwardRef(function OutlinedInput2(inProps, ref) {
      var _ref, _slots$root, _ref2, _slots$input, _React$Fragment;
      const props = useThemeProps({
        props: inProps,
        name: "MuiOutlinedInput"
      });
      const {
        components = {},
        fullWidth = false,
        inputComponent = "input",
        label,
        multiline = false,
        notched,
        slots = {},
        type = "text"
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1f);
      const classes = useUtilityClasses$V(props);
      const muiFormControl = useFormControl();
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ["required"]
      });
      const ownerState = _extends$1({}, props, {
        color: fcs.color || "primary",
        disabled: fcs.disabled,
        error: fcs.error,
        focused: fcs.focused,
        formControl: muiFormControl,
        fullWidth,
        hiddenLabel: fcs.hiddenLabel,
        multiline,
        size: fcs.size,
        type
      });
      const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : OutlinedInputRoot;
      const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : OutlinedInputInput;
      return /* @__PURE__ */ jsx(InputBase$1, _extends$1({
        slots: {
          root: RootSlot,
          input: InputSlot
        },
        renderSuffix: (state) => /* @__PURE__ */ jsx(NotchedOutlineRoot, {
          ownerState,
          className: classes.notchedOutline,
          label: label != null && label !== "" && fcs.required ? _React$Fragment || (_React$Fragment = /* @__PURE__ */ jsxs(react.exports.Fragment, {
            children: [label, "\u2009", "*"]
          })) : label,
          notched: typeof notched !== "undefined" ? notched : Boolean(state.startAdornment || state.filled || state.focused)
        }),
        fullWidth,
        inputComponent,
        multiline,
        ref,
        type
      }, other, {
        classes: _extends$1({}, classes, {
          notchedOutline: null
        })
      }));
    });
    OutlinedInput.propTypes = {
      autoComplete: propTypes.exports.string,
      autoFocus: propTypes.exports.bool,
      classes: propTypes.exports.object,
      color: propTypes.exports.oneOfType([propTypes.exports.oneOf(["primary", "secondary"]), propTypes.exports.string]),
      components: propTypes.exports.shape({
        Input: propTypes.exports.elementType,
        Root: propTypes.exports.elementType
      }),
      defaultValue: propTypes.exports.any,
      disabled: propTypes.exports.bool,
      endAdornment: propTypes.exports.node,
      error: propTypes.exports.bool,
      fullWidth: propTypes.exports.bool,
      id: propTypes.exports.string,
      inputComponent: propTypes.exports.elementType,
      inputProps: propTypes.exports.object,
      inputRef: refType$1,
      label: propTypes.exports.node,
      margin: propTypes.exports.oneOf(["dense", "none"]),
      maxRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),
      minRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),
      multiline: propTypes.exports.bool,
      name: propTypes.exports.string,
      notched: propTypes.exports.bool,
      onChange: propTypes.exports.func,
      placeholder: propTypes.exports.string,
      readOnly: propTypes.exports.bool,
      required: propTypes.exports.bool,
      rows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),
      slots: propTypes.exports.shape({
        input: propTypes.exports.elementType,
        root: propTypes.exports.elementType
      }),
      startAdornment: propTypes.exports.node,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      type: propTypes.exports.string,
      value: propTypes.exports.any
    };
    OutlinedInput.muiName = "Input";
    const OutlinedInput$1 = OutlinedInput;
    function getFormLabelUtilityClasses(slot) {
      return generateUtilityClass("MuiFormLabel", slot);
    }
    const formLabelClasses = generateUtilityClasses("MuiFormLabel", ["root", "colorSecondary", "focused", "disabled", "error", "filled", "required", "asterisk"]);
    const formLabelClasses$1 = formLabelClasses;
    const _excluded$1e = ["children", "className", "color", "component", "disabled", "error", "filled", "focused", "required"];
    const useUtilityClasses$U = (ownerState) => {
      const {
        classes,
        color: color2,
        focused,
        disabled,
        error,
        filled,
        required
      } = ownerState;
      const slots = {
        root: ["root", `color${capitalize(color2)}`, disabled && "disabled", error && "error", filled && "filled", focused && "focused", required && "required"],
        asterisk: ["asterisk", error && "error"]
      };
      return composeClasses(slots, getFormLabelUtilityClasses, classes);
    };
    const FormLabelRoot = styled$1("label", {
      name: "MuiFormLabel",
      slot: "Root",
      overridesResolver: ({
        ownerState
      }, styles2) => {
        return _extends$1({}, styles2.root, ownerState.color === "secondary" && styles2.colorSecondary, ownerState.filled && styles2.filled);
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      color: (theme.vars || theme).palette.text.secondary
    }, theme.typography.body1, {
      lineHeight: "1.4375em",
      padding: 0,
      position: "relative",
      [`&.${formLabelClasses$1.focused}`]: {
        color: (theme.vars || theme).palette[ownerState.color].main
      },
      [`&.${formLabelClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled
      },
      [`&.${formLabelClasses$1.error}`]: {
        color: (theme.vars || theme).palette.error.main
      }
    }));
    const AsteriskComponent$1 = styled$1("span", {
      name: "MuiFormLabel",
      slot: "Asterisk",
      overridesResolver: (props, styles2) => styles2.asterisk
    })(({
      theme
    }) => ({
      [`&.${formLabelClasses$1.error}`]: {
        color: (theme.vars || theme).palette.error.main
      }
    }));
    const FormLabel = /* @__PURE__ */ react.exports.forwardRef(function FormLabel2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiFormLabel"
      });
      const {
        children,
        className,
        component = "label"
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1e);
      const muiFormControl = useFormControl();
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ["color", "required", "focused", "disabled", "error", "filled"]
      });
      const ownerState = _extends$1({}, props, {
        color: fcs.color || "primary",
        component,
        disabled: fcs.disabled,
        error: fcs.error,
        filled: fcs.filled,
        focused: fcs.focused,
        required: fcs.required
      });
      const classes = useUtilityClasses$U(ownerState);
      return /* @__PURE__ */ jsxs(FormLabelRoot, _extends$1({
        as: component,
        ownerState,
        className: clsx(classes.root, className),
        ref
      }, other, {
        children: [children, fcs.required && /* @__PURE__ */ jsxs(AsteriskComponent$1, {
          ownerState,
          "aria-hidden": true,
          className: classes.asterisk,
          children: ["\u2009", "*"]
        })]
      }));
    });
    FormLabel.propTypes = {
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      color: propTypes.exports.oneOfType([propTypes.exports.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), propTypes.exports.string]),
      component: propTypes.exports.elementType,
      disabled: propTypes.exports.bool,
      error: propTypes.exports.bool,
      filled: propTypes.exports.bool,
      focused: propTypes.exports.bool,
      required: propTypes.exports.bool,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
    };
    const FormLabel$1 = FormLabel;
    function getInputLabelUtilityClasses(slot) {
      return generateUtilityClass("MuiInputLabel", slot);
    }
    generateUtilityClasses("MuiInputLabel", ["root", "focused", "disabled", "error", "required", "asterisk", "formControl", "sizeSmall", "shrink", "animated", "standard", "filled", "outlined"]);
    const _excluded$1d = ["disableAnimation", "margin", "shrink", "variant", "className"];
    const useUtilityClasses$T = (ownerState) => {
      const {
        classes,
        formControl,
        size,
        shrink,
        disableAnimation,
        variant,
        required
      } = ownerState;
      const slots = {
        root: ["root", formControl && "formControl", !disableAnimation && "animated", shrink && "shrink", size === "small" && "sizeSmall", variant],
        asterisk: [required && "asterisk"]
      };
      const composedClasses = composeClasses(slots, getInputLabelUtilityClasses, classes);
      return _extends$1({}, classes, composedClasses);
    };
    const InputLabelRoot = styled$1(FormLabel$1, {
      shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
      name: "MuiInputLabel",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [{
          [`& .${formLabelClasses$1.asterisk}`]: styles2.asterisk
        }, styles2.root, ownerState.formControl && styles2.formControl, ownerState.size === "small" && styles2.sizeSmall, ownerState.shrink && styles2.shrink, !ownerState.disableAnimation && styles2.animated, styles2[ownerState.variant]];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      display: "block",
      transformOrigin: "top left",
      whiteSpace: "nowrap",
      overflow: "hidden",
      textOverflow: "ellipsis",
      maxWidth: "100%"
    }, ownerState.formControl && {
      position: "absolute",
      left: 0,
      top: 0,
      transform: "translate(0, 20px) scale(1)"
    }, ownerState.size === "small" && {
      transform: "translate(0, 17px) scale(1)"
    }, ownerState.shrink && {
      transform: "translate(0, -1.5px) scale(0.75)",
      transformOrigin: "top left",
      maxWidth: "133%"
    }, !ownerState.disableAnimation && {
      transition: theme.transitions.create(["color", "transform", "max-width"], {
        duration: theme.transitions.duration.shorter,
        easing: theme.transitions.easing.easeOut
      })
    }, ownerState.variant === "filled" && _extends$1({
      zIndex: 1,
      pointerEvents: "none",
      transform: "translate(12px, 16px) scale(1)",
      maxWidth: "calc(100% - 24px)"
    }, ownerState.size === "small" && {
      transform: "translate(12px, 13px) scale(1)"
    }, ownerState.shrink && _extends$1({
      userSelect: "none",
      pointerEvents: "auto",
      transform: "translate(12px, 7px) scale(0.75)",
      maxWidth: "calc(133% - 24px)"
    }, ownerState.size === "small" && {
      transform: "translate(12px, 4px) scale(0.75)"
    })), ownerState.variant === "outlined" && _extends$1({
      zIndex: 1,
      pointerEvents: "none",
      transform: "translate(14px, 16px) scale(1)",
      maxWidth: "calc(100% - 24px)"
    }, ownerState.size === "small" && {
      transform: "translate(14px, 9px) scale(1)"
    }, ownerState.shrink && {
      userSelect: "none",
      pointerEvents: "auto",
      maxWidth: "calc(133% - 32px)",
      transform: "translate(14px, -9px) scale(0.75)"
    })));
    const InputLabel = /* @__PURE__ */ react.exports.forwardRef(function InputLabel2(inProps, ref) {
      const props = useThemeProps({
        name: "MuiInputLabel",
        props: inProps
      });
      const {
        disableAnimation = false,
        shrink: shrinkProp,
        className
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1d);
      const muiFormControl = useFormControl();
      let shrink = shrinkProp;
      if (typeof shrink === "undefined" && muiFormControl) {
        shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
      }
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ["size", "variant", "required"]
      });
      const ownerState = _extends$1({}, props, {
        disableAnimation,
        formControl: muiFormControl,
        shrink,
        size: fcs.size,
        variant: fcs.variant,
        required: fcs.required
      });
      const classes = useUtilityClasses$T(ownerState);
      return /* @__PURE__ */ jsx(InputLabelRoot, _extends$1({
        "data-shrink": shrink,
        ownerState,
        ref,
        className: clsx(classes.root, className)
      }, other, {
        classes
      }));
    });
    InputLabel.propTypes = {
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      color: propTypes.exports.oneOfType([propTypes.exports.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), propTypes.exports.string]),
      disableAnimation: propTypes.exports.bool,
      disabled: propTypes.exports.bool,
      error: propTypes.exports.bool,
      focused: propTypes.exports.bool,
      margin: propTypes.exports.oneOf(["dense"]),
      required: propTypes.exports.bool,
      shrink: propTypes.exports.bool,
      size: propTypes.exports.oneOfType([propTypes.exports.oneOf(["normal", "small"]), propTypes.exports.string]),
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      variant: propTypes.exports.oneOf(["filled", "outlined", "standard"])
    };
    const InputLabel$1 = InputLabel;
    function getFormControlUtilityClasses(slot) {
      return generateUtilityClass("MuiFormControl", slot);
    }
    generateUtilityClasses("MuiFormControl", ["root", "marginNone", "marginNormal", "marginDense", "fullWidth", "disabled"]);
    const _excluded$1c = ["children", "className", "color", "component", "disabled", "error", "focused", "fullWidth", "hiddenLabel", "margin", "required", "size", "variant"];
    const useUtilityClasses$S = (ownerState) => {
      const {
        classes,
        margin: margin2,
        fullWidth
      } = ownerState;
      const slots = {
        root: ["root", margin2 !== "none" && `margin${capitalize(margin2)}`, fullWidth && "fullWidth"]
      };
      return composeClasses(slots, getFormControlUtilityClasses, classes);
    };
    const FormControlRoot = styled$1("div", {
      name: "MuiFormControl",
      slot: "Root",
      overridesResolver: ({
        ownerState
      }, styles2) => {
        return _extends$1({}, styles2.root, styles2[`margin${capitalize(ownerState.margin)}`], ownerState.fullWidth && styles2.fullWidth);
      }
    })(({
      ownerState
    }) => _extends$1({
      display: "inline-flex",
      flexDirection: "column",
      position: "relative",
      minWidth: 0,
      padding: 0,
      margin: 0,
      border: 0,
      verticalAlign: "top"
    }, ownerState.margin === "normal" && {
      marginTop: 16,
      marginBottom: 8
    }, ownerState.margin === "dense" && {
      marginTop: 8,
      marginBottom: 4
    }, ownerState.fullWidth && {
      width: "100%"
    }));
    const FormControl = /* @__PURE__ */ react.exports.forwardRef(function FormControl2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiFormControl"
      });
      const {
        children,
        className,
        color: color2 = "primary",
        component = "div",
        disabled = false,
        error = false,
        focused: visuallyFocused,
        fullWidth = false,
        hiddenLabel = false,
        margin: margin2 = "none",
        required = false,
        size = "medium",
        variant = "outlined"
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1c);
      const ownerState = _extends$1({}, props, {
        color: color2,
        component,
        disabled,
        error,
        fullWidth,
        hiddenLabel,
        margin: margin2,
        required,
        size,
        variant
      });
      const classes = useUtilityClasses$S(ownerState);
      const [adornedStart, setAdornedStart] = react.exports.useState(() => {
        let initialAdornedStart = false;
        if (children) {
          react.exports.Children.forEach(children, (child) => {
            if (!isMuiElement(child, ["Input", "Select"])) {
              return;
            }
            const input = isMuiElement(child, ["Select"]) ? child.props.input : child;
            if (input && isAdornedStart(input.props)) {
              initialAdornedStart = true;
            }
          });
        }
        return initialAdornedStart;
      });
      const [filled, setFilled] = react.exports.useState(() => {
        let initialFilled = false;
        if (children) {
          react.exports.Children.forEach(children, (child) => {
            if (!isMuiElement(child, ["Input", "Select"])) {
              return;
            }
            if (isFilled(child.props, true) || isFilled(child.props.inputProps, true)) {
              initialFilled = true;
            }
          });
        }
        return initialFilled;
      });
      const [focusedState, setFocused] = react.exports.useState(false);
      if (disabled && focusedState) {
        setFocused(false);
      }
      const focused = visuallyFocused !== void 0 && !disabled ? visuallyFocused : focusedState;
      let registerEffect;
      {
        const registeredInput = react.exports.useRef(false);
        registerEffect = () => {
          if (registeredInput.current) {
            console.error(["MUI: There are multiple `InputBase` components inside a FormControl.", "This creates visual inconsistencies, only use one `InputBase`."].join("\n"));
          }
          registeredInput.current = true;
          return () => {
            registeredInput.current = false;
          };
        };
      }
      const childContext = react.exports.useMemo(() => {
        return {
          adornedStart,
          setAdornedStart,
          color: color2,
          disabled,
          error,
          filled,
          focused,
          fullWidth,
          hiddenLabel,
          size,
          onBlur: () => {
            setFocused(false);
          },
          onEmpty: () => {
            setFilled(false);
          },
          onFilled: () => {
            setFilled(true);
          },
          onFocus: () => {
            setFocused(true);
          },
          registerEffect,
          required,
          variant
        };
      }, [adornedStart, color2, disabled, error, filled, focused, fullWidth, hiddenLabel, registerEffect, required, size, variant]);
      return /* @__PURE__ */ jsx(FormControlContext$1.Provider, {
        value: childContext,
        children: /* @__PURE__ */ jsx(FormControlRoot, _extends$1({
          as: component,
          ownerState,
          className: clsx(classes.root, className),
          ref
        }, other, {
          children
        }))
      });
    });
    FormControl.propTypes = {
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      color: propTypes.exports.oneOfType([propTypes.exports.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), propTypes.exports.string]),
      component: propTypes.exports.elementType,
      disabled: propTypes.exports.bool,
      error: propTypes.exports.bool,
      focused: propTypes.exports.bool,
      fullWidth: propTypes.exports.bool,
      hiddenLabel: propTypes.exports.bool,
      margin: propTypes.exports.oneOf(["dense", "none", "normal"]),
      required: propTypes.exports.bool,
      size: propTypes.exports.oneOfType([propTypes.exports.oneOf(["medium", "small"]), propTypes.exports.string]),
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      variant: propTypes.exports.oneOf(["filled", "outlined", "standard"])
    };
    const FormControl$1 = FormControl;
    function getFormHelperTextUtilityClasses(slot) {
      return generateUtilityClass("MuiFormHelperText", slot);
    }
    const formHelperTextClasses = generateUtilityClasses("MuiFormHelperText", ["root", "error", "disabled", "sizeSmall", "sizeMedium", "contained", "focused", "filled", "required"]);
    const formHelperTextClasses$1 = formHelperTextClasses;
    var _span$2;
    const _excluded$1b = ["children", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"];
    const useUtilityClasses$R = (ownerState) => {
      const {
        classes,
        contained,
        size,
        disabled,
        error,
        filled,
        focused,
        required
      } = ownerState;
      const slots = {
        root: ["root", disabled && "disabled", error && "error", size && `size${capitalize(size)}`, contained && "contained", focused && "focused", filled && "filled", required && "required"]
      };
      return composeClasses(slots, getFormHelperTextUtilityClasses, classes);
    };
    const FormHelperTextRoot = styled$1("p", {
      name: "MuiFormHelperText",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.size && styles2[`size${capitalize(ownerState.size)}`], ownerState.contained && styles2.contained, ownerState.filled && styles2.filled];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      color: (theme.vars || theme).palette.text.secondary
    }, theme.typography.caption, {
      textAlign: "left",
      marginTop: 3,
      marginRight: 0,
      marginBottom: 0,
      marginLeft: 0,
      [`&.${formHelperTextClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled
      },
      [`&.${formHelperTextClasses$1.error}`]: {
        color: (theme.vars || theme).palette.error.main
      }
    }, ownerState.size === "small" && {
      marginTop: 4
    }, ownerState.contained && {
      marginLeft: 14,
      marginRight: 14
    }));
    const FormHelperText = /* @__PURE__ */ react.exports.forwardRef(function FormHelperText2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiFormHelperText"
      });
      const {
        children,
        className,
        component = "p"
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1b);
      const muiFormControl = useFormControl();
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ["variant", "size", "disabled", "error", "filled", "focused", "required"]
      });
      const ownerState = _extends$1({}, props, {
        component,
        contained: fcs.variant === "filled" || fcs.variant === "outlined",
        variant: fcs.variant,
        size: fcs.size,
        disabled: fcs.disabled,
        error: fcs.error,
        filled: fcs.filled,
        focused: fcs.focused,
        required: fcs.required
      });
      const classes = useUtilityClasses$R(ownerState);
      return /* @__PURE__ */ jsx(FormHelperTextRoot, _extends$1({
        as: component,
        ownerState,
        className: clsx(classes.root, className),
        ref
      }, other, {
        children: children === " " ? _span$2 || (_span$2 = /* @__PURE__ */ jsx("span", {
          className: "notranslate",
          children: "\u200B"
        })) : children
      }));
    });
    FormHelperText.propTypes = {
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      component: propTypes.exports.elementType,
      disabled: propTypes.exports.bool,
      error: propTypes.exports.bool,
      filled: propTypes.exports.bool,
      focused: propTypes.exports.bool,
      margin: propTypes.exports.oneOf(["dense"]),
      required: propTypes.exports.bool,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      variant: propTypes.exports.oneOfType([propTypes.exports.oneOf(["filled", "outlined", "standard"]), propTypes.exports.string])
    };
    const FormHelperText$1 = FormHelperText;
    const ListContext = /* @__PURE__ */ react.exports.createContext({});
    {
      ListContext.displayName = "ListContext";
    }
    const ListContext$1 = ListContext;
    function getListUtilityClass(slot) {
      return generateUtilityClass("MuiList", slot);
    }
    generateUtilityClasses("MuiList", ["root", "padding", "dense", "subheader"]);
    const _excluded$1a = ["children", "className", "component", "dense", "disablePadding", "subheader"];
    const useUtilityClasses$Q = (ownerState) => {
      const {
        classes,
        disablePadding,
        dense,
        subheader
      } = ownerState;
      const slots = {
        root: ["root", !disablePadding && "padding", dense && "dense", subheader && "subheader"]
      };
      return composeClasses(slots, getListUtilityClass, classes);
    };
    const ListRoot = styled$1("ul", {
      name: "MuiList",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, !ownerState.disablePadding && styles2.padding, ownerState.dense && styles2.dense, ownerState.subheader && styles2.subheader];
      }
    })(({
      ownerState
    }) => _extends$1({
      listStyle: "none",
      margin: 0,
      padding: 0,
      position: "relative"
    }, !ownerState.disablePadding && {
      paddingTop: 8,
      paddingBottom: 8
    }, ownerState.subheader && {
      paddingTop: 0
    }));
    const List = /* @__PURE__ */ react.exports.forwardRef(function List2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiList"
      });
      const {
        children,
        className,
        component = "ul",
        dense = false,
        disablePadding = false,
        subheader
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$1a);
      const context2 = react.exports.useMemo(() => ({
        dense
      }), [dense]);
      const ownerState = _extends$1({}, props, {
        component,
        dense,
        disablePadding
      });
      const classes = useUtilityClasses$Q(ownerState);
      return /* @__PURE__ */ jsx(ListContext$1.Provider, {
        value: context2,
        children: /* @__PURE__ */ jsxs(ListRoot, _extends$1({
          as: component,
          className: clsx(classes.root, className),
          ref,
          ownerState
        }, other, {
          children: [subheader, children]
        }))
      });
    });
    List.propTypes = {
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      component: propTypes.exports.elementType,
      dense: propTypes.exports.bool,
      disablePadding: propTypes.exports.bool,
      subheader: propTypes.exports.node,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
    };
    const List$1 = List;
    const _excluded$19 = ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"];
    function nextItem$1(list, item, disableListWrap) {
      if (list === item) {
        return list.firstChild;
      }
      if (item && item.nextElementSibling) {
        return item.nextElementSibling;
      }
      return disableListWrap ? null : list.firstChild;
    }
    function previousItem$1(list, item, disableListWrap) {
      if (list === item) {
        return disableListWrap ? list.firstChild : list.lastChild;
      }
      if (item && item.previousElementSibling) {
        return item.previousElementSibling;
      }
      return disableListWrap ? null : list.lastChild;
    }
    function textCriteriaMatches(nextFocus, textCriteria) {
      if (textCriteria === void 0) {
        return true;
      }
      let text = nextFocus.innerText;
      if (text === void 0) {
        text = nextFocus.textContent;
      }
      text = text.trim().toLowerCase();
      if (text.length === 0) {
        return false;
      }
      if (textCriteria.repeating) {
        return text[0] === textCriteria.keys[0];
      }
      return text.indexOf(textCriteria.keys.join("")) === 0;
    }
    function moveFocus$1(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
      let wrappedOnce = false;
      let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
      while (nextFocus) {
        if (nextFocus === list.firstChild) {
          if (wrappedOnce) {
            return false;
          }
          wrappedOnce = true;
        }
        const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
        if (!nextFocus.hasAttribute("tabindex") || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
          nextFocus = traversalFunction(list, nextFocus, disableListWrap);
        } else {
          nextFocus.focus();
          return true;
        }
      }
      return false;
    }
    const MenuList = /* @__PURE__ */ react.exports.forwardRef(function MenuList2(props, ref) {
      const {
        actions,
        autoFocus = false,
        autoFocusItem = false,
        children,
        className,
        disabledItemsFocusable = false,
        disableListWrap = false,
        onKeyDown,
        variant = "selectedMenu"
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$19);
      const listRef = react.exports.useRef(null);
      const textCriteriaRef = react.exports.useRef({
        keys: [],
        repeating: true,
        previousKeyMatched: true,
        lastTime: null
      });
      useEnhancedEffect$1(() => {
        if (autoFocus) {
          listRef.current.focus();
        }
      }, [autoFocus]);
      react.exports.useImperativeHandle(actions, () => ({
        adjustStyleForScrollbar: (containerElement, theme) => {
          const noExplicitWidth = !listRef.current.style.width;
          if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
            const scrollbarSize = `${getScrollbarSize(ownerDocument(containerElement))}px`;
            listRef.current.style[theme.direction === "rtl" ? "paddingLeft" : "paddingRight"] = scrollbarSize;
            listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
          }
          return listRef.current;
        }
      }), []);
      const handleKeyDown2 = (event) => {
        const list = listRef.current;
        const key = event.key;
        const currentFocus = ownerDocument(list).activeElement;
        if (key === "ArrowDown") {
          event.preventDefault();
          moveFocus$1(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem$1);
        } else if (key === "ArrowUp") {
          event.preventDefault();
          moveFocus$1(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem$1);
        } else if (key === "Home") {
          event.preventDefault();
          moveFocus$1(list, null, disableListWrap, disabledItemsFocusable, nextItem$1);
        } else if (key === "End") {
          event.preventDefault();
          moveFocus$1(list, null, disableListWrap, disabledItemsFocusable, previousItem$1);
        } else if (key.length === 1) {
          const criteria = textCriteriaRef.current;
          const lowerKey = key.toLowerCase();
          const currTime = performance.now();
          if (criteria.keys.length > 0) {
            if (currTime - criteria.lastTime > 500) {
              criteria.keys = [];
              criteria.repeating = true;
              criteria.previousKeyMatched = true;
            } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
              criteria.repeating = false;
            }
          }
          criteria.lastTime = currTime;
          criteria.keys.push(lowerKey);
          const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);
          if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus$1(list, currentFocus, false, disabledItemsFocusable, nextItem$1, criteria))) {
            event.preventDefault();
          } else {
            criteria.previousKeyMatched = false;
          }
        }
        if (onKeyDown) {
          onKeyDown(event);
        }
      };
      const handleRef = useForkRef(listRef, ref);
      let activeItemIndex = -1;
      react.exports.Children.forEach(children, (child, index) => {
        if (!/* @__PURE__ */ react.exports.isValidElement(child)) {
          return;
        }
        {
          if (reactIs$2.exports.isFragment(child)) {
            console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
          }
        }
        if (!child.props.disabled) {
          if (variant === "selectedMenu" && child.props.selected) {
            activeItemIndex = index;
          } else if (activeItemIndex === -1) {
            activeItemIndex = index;
          }
        }
        if (activeItemIndex === index && (child.props.disabled || child.props.muiSkipListHighlight || child.type.muiSkipListHighlight)) {
          activeItemIndex += 1;
          if (activeItemIndex >= children.length) {
            activeItemIndex = -1;
          }
        }
      });
      const items = react.exports.Children.map(children, (child, index) => {
        if (index === activeItemIndex) {
          const newChildProps = {};
          if (autoFocusItem) {
            newChildProps.autoFocus = true;
          }
          if (child.props.tabIndex === void 0 && variant === "selectedMenu") {
            newChildProps.tabIndex = 0;
          }
          return /* @__PURE__ */ react.exports.cloneElement(child, newChildProps);
        }
        return child;
      });
      return /* @__PURE__ */ jsx(List$1, _extends$1({
        role: "menu",
        ref: handleRef,
        className,
        onKeyDown: handleKeyDown2,
        tabIndex: autoFocus ? 0 : -1
      }, other, {
        children: items
      }));
    });
    MenuList.propTypes = {
      autoFocus: propTypes.exports.bool,
      autoFocusItem: propTypes.exports.bool,
      children: propTypes.exports.node,
      className: propTypes.exports.string,
      disabledItemsFocusable: propTypes.exports.bool,
      disableListWrap: propTypes.exports.bool,
      onKeyDown: propTypes.exports.func,
      variant: propTypes.exports.oneOf(["menu", "selectedMenu"])
    };
    const MenuList$1 = MenuList;
    const _excluded$18 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
    function getScale(value2) {
      return `scale(${value2}, ${value2 ** 2})`;
    }
    const styles$2 = {
      entering: {
        opacity: 1,
        transform: getScale(1)
      },
      entered: {
        opacity: 1,
        transform: "none"
      }
    };
    const isWebKit154 = typeof navigator !== "undefined" && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent);
    const Grow = /* @__PURE__ */ react.exports.forwardRef(function Grow2(props, ref) {
      const {
        addEndListener,
        appear = true,
        children,
        easing: easing2,
        in: inProp,
        onEnter,
        onEntered,
        onEntering,
        onExit,
        onExited,
        onExiting,
        style: style2,
        timeout = "auto",
        TransitionComponent = Transition$1
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$18);
      const timer = react.exports.useRef();
      const autoTimeout = react.exports.useRef();
      const theme = useTheme();
      const nodeRef = react.exports.useRef(null);
      const handleRef = useForkRef(nodeRef, children.ref, ref);
      const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
        if (callback) {
          const node2 = nodeRef.current;
          if (maybeIsAppearing === void 0) {
            callback(node2);
          } else {
            callback(node2, maybeIsAppearing);
          }
        }
      };
      const handleEntering = normalizedTransitionCallback(onEntering);
      const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
        reflow(node2);
        const {
          duration: transitionDuration,
          delay,
          easing: transitionTimingFunction
        } = getTransitionProps({
          style: style2,
          timeout,
          easing: easing2
        }, {
          mode: "enter"
        });
        let duration2;
        if (timeout === "auto") {
          duration2 = theme.transitions.getAutoHeightDuration(node2.clientHeight);
          autoTimeout.current = duration2;
        } else {
          duration2 = transitionDuration;
        }
        node2.style.transition = [theme.transitions.create("opacity", {
          duration: duration2,
          delay
        }), theme.transitions.create("transform", {
          duration: isWebKit154 ? duration2 : duration2 * 0.666,
          delay,
          easing: transitionTimingFunction
        })].join(",");
        if (onEnter) {
          onEnter(node2, isAppearing);
        }
      });
      const handleEntered = normalizedTransitionCallback(onEntered);
      const handleExiting = normalizedTransitionCallback(onExiting);
      const handleExit = normalizedTransitionCallback((node2) => {
        const {
          duration: transitionDuration,
          delay,
          easing: transitionTimingFunction
        } = getTransitionProps({
          style: style2,
          timeout,
          easing: easing2
        }, {
          mode: "exit"
        });
        let duration2;
        if (timeout === "auto") {
          duration2 = theme.transitions.getAutoHeightDuration(node2.clientHeight);
          autoTimeout.current = duration2;
        } else {
          duration2 = transitionDuration;
        }
        node2.style.transition = [theme.transitions.create("opacity", {
          duration: duration2,
          delay
        }), theme.transitions.create("transform", {
          duration: isWebKit154 ? duration2 : duration2 * 0.666,
          delay: isWebKit154 ? delay : delay || duration2 * 0.333,
          easing: transitionTimingFunction
        })].join(",");
        node2.style.opacity = 0;
        node2.style.transform = getScale(0.75);
        if (onExit) {
          onExit(node2);
        }
      });
      const handleExited = normalizedTransitionCallback(onExited);
      const handleAddEndListener = (next2) => {
        if (timeout === "auto") {
          timer.current = setTimeout(next2, autoTimeout.current || 0);
        }
        if (addEndListener) {
          addEndListener(nodeRef.current, next2);
        }
      };
      react.exports.useEffect(() => {
        return () => {
          clearTimeout(timer.current);
        };
      }, []);
      return /* @__PURE__ */ jsx(TransitionComponent, _extends$1({
        appear,
        in: inProp,
        nodeRef,
        onEnter: handleEnter,
        onEntered: handleEntered,
        onEntering: handleEntering,
        onExit: handleExit,
        onExited: handleExited,
        onExiting: handleExiting,
        addEndListener: handleAddEndListener,
        timeout: timeout === "auto" ? null : timeout
      }, other, {
        children: (state, childProps) => {
          return /* @__PURE__ */ react.exports.cloneElement(children, _extends$1({
            style: _extends$1({
              opacity: 0,
              transform: getScale(0.75),
              visibility: state === "exited" && !inProp ? "hidden" : void 0
            }, styles$2[state], style2, children.props.style),
            ref: handleRef
          }, childProps));
        }
      }));
    });
    Grow.propTypes = {
      addEndListener: propTypes.exports.func,
      appear: propTypes.exports.bool,
      children: elementAcceptingRef$1.isRequired,
      easing: propTypes.exports.oneOfType([propTypes.exports.shape({
        enter: propTypes.exports.string,
        exit: propTypes.exports.string
      }), propTypes.exports.string]),
      in: propTypes.exports.bool,
      onEnter: propTypes.exports.func,
      onEntered: propTypes.exports.func,
      onEntering: propTypes.exports.func,
      onExit: propTypes.exports.func,
      onExited: propTypes.exports.func,
      onExiting: propTypes.exports.func,
      style: propTypes.exports.object,
      timeout: propTypes.exports.oneOfType([propTypes.exports.oneOf(["auto"]), propTypes.exports.number, propTypes.exports.shape({
        appear: propTypes.exports.number,
        enter: propTypes.exports.number,
        exit: propTypes.exports.number
      })])
    };
    Grow.muiSupportAuto = true;
    const Grow$1 = Grow;
    function getPopoverUtilityClass(slot) {
      return generateUtilityClass("MuiPopover", slot);
    }
    generateUtilityClasses("MuiPopover", ["root", "paper"]);
    const _excluded$17 = ["onEntering"], _excluded2$2 = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps"];
    function getOffsetTop(rect, vertical) {
      let offset2 = 0;
      if (typeof vertical === "number") {
        offset2 = vertical;
      } else if (vertical === "center") {
        offset2 = rect.height / 2;
      } else if (vertical === "bottom") {
        offset2 = rect.height;
      }
      return offset2;
    }
    function getOffsetLeft(rect, horizontal) {
      let offset2 = 0;
      if (typeof horizontal === "number") {
        offset2 = horizontal;
      } else if (horizontal === "center") {
        offset2 = rect.width / 2;
      } else if (horizontal === "right") {
        offset2 = rect.width;
      }
      return offset2;
    }
    function getTransformOriginValue(transformOrigin) {
      return [transformOrigin.horizontal, transformOrigin.vertical].map((n) => typeof n === "number" ? `${n}px` : n).join(" ");
    }
    function resolveAnchorEl(anchorEl) {
      return typeof anchorEl === "function" ? anchorEl() : anchorEl;
    }
    const useUtilityClasses$P = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        paper: ["paper"]
      };
      return composeClasses(slots, getPopoverUtilityClass, classes);
    };
    const PopoverRoot = styled$1(Modal$1, {
      name: "MuiPopover",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({});
    const PopoverPaper = styled$1(Paper$1, {
      name: "MuiPopover",
      slot: "Paper",
      overridesResolver: (props, styles2) => styles2.paper
    })({
      position: "absolute",
      overflowY: "auto",
      overflowX: "hidden",
      minWidth: 16,
      minHeight: 16,
      maxWidth: "calc(100% - 32px)",
      maxHeight: "calc(100% - 32px)",
      outline: 0
    });
    const Popover = /* @__PURE__ */ react.exports.forwardRef(function Popover2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiPopover"
      });
      const {
        action,
        anchorEl,
        anchorOrigin = {
          vertical: "top",
          horizontal: "left"
        },
        anchorPosition,
        anchorReference = "anchorEl",
        children,
        className,
        container: containerProp,
        elevation = 8,
        marginThreshold = 16,
        open,
        PaperProps = {},
        transformOrigin = {
          vertical: "top",
          horizontal: "left"
        },
        TransitionComponent = Grow$1,
        transitionDuration: transitionDurationProp = "auto",
        TransitionProps: {
          onEntering
        } = {}
      } = props, TransitionProps = _objectWithoutPropertiesLoose$1(props.TransitionProps, _excluded$17), other = _objectWithoutPropertiesLoose$1(props, _excluded2$2);
      const paperRef = react.exports.useRef();
      const handlePaperRef = useForkRef(paperRef, PaperProps.ref);
      const ownerState = _extends$1({}, props, {
        anchorOrigin,
        anchorReference,
        elevation,
        marginThreshold,
        PaperProps,
        transformOrigin,
        TransitionComponent,
        transitionDuration: transitionDurationProp,
        TransitionProps
      });
      const classes = useUtilityClasses$P(ownerState);
      const getAnchorOffset = react.exports.useCallback(() => {
        if (anchorReference === "anchorPosition") {
          {
            if (!anchorPosition) {
              console.error('MUI: You need to provide a `anchorPosition` prop when using <Popover anchorReference="anchorPosition" />.');
            }
          }
          return anchorPosition;
        }
        const resolvedAnchorEl = resolveAnchorEl(anchorEl);
        const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument(paperRef.current).body;
        const anchorRect = anchorElement.getBoundingClientRect();
        {
          const box = anchorElement.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        }
        return {
          top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
          left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
        };
      }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);
      const getTransformOrigin = react.exports.useCallback((elemRect) => {
        return {
          vertical: getOffsetTop(elemRect, transformOrigin.vertical),
          horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
        };
      }, [transformOrigin.horizontal, transformOrigin.vertical]);
      const getPositioningStyle = react.exports.useCallback((element) => {
        const elemRect = {
          width: element.offsetWidth,
          height: element.offsetHeight
        };
        const elemTransformOrigin = getTransformOrigin(elemRect);
        if (anchorReference === "none") {
          return {
            top: null,
            left: null,
            transformOrigin: getTransformOriginValue(elemTransformOrigin)
          };
        }
        const anchorOffset = getAnchorOffset();
        let top2 = anchorOffset.top - elemTransformOrigin.vertical;
        let left2 = anchorOffset.left - elemTransformOrigin.horizontal;
        const bottom2 = top2 + elemRect.height;
        const right2 = left2 + elemRect.width;
        const containerWindow = ownerWindow(resolveAnchorEl(anchorEl));
        const heightThreshold = containerWindow.innerHeight - marginThreshold;
        const widthThreshold = containerWindow.innerWidth - marginThreshold;
        if (top2 < marginThreshold) {
          const diff2 = top2 - marginThreshold;
          top2 -= diff2;
          elemTransformOrigin.vertical += diff2;
        } else if (bottom2 > heightThreshold) {
          const diff2 = bottom2 - heightThreshold;
          top2 -= diff2;
          elemTransformOrigin.vertical += diff2;
        }
        {
          if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
            console.error(["MUI: The popover component is too tall.", `Some part of it can not be seen on the screen (${elemRect.height - heightThreshold}px).`, "Please consider adding a `max-height` to improve the user-experience."].join("\n"));
          }
        }
        if (left2 < marginThreshold) {
          const diff2 = left2 - marginThreshold;
          left2 -= diff2;
          elemTransformOrigin.horizontal += diff2;
        } else if (right2 > widthThreshold) {
          const diff2 = right2 - widthThreshold;
          left2 -= diff2;
          elemTransformOrigin.horizontal += diff2;
        }
        return {
          top: `${Math.round(top2)}px`,
          left: `${Math.round(left2)}px`,
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
      const [isPositioned, setIsPositioned] = react.exports.useState(open);
      const setPositioningStyles = react.exports.useCallback(() => {
        const element = paperRef.current;
        if (!element) {
          return;
        }
        const positioning = getPositioningStyle(element);
        if (positioning.top !== null) {
          element.style.top = positioning.top;
        }
        if (positioning.left !== null) {
          element.style.left = positioning.left;
        }
        element.style.transformOrigin = positioning.transformOrigin;
        setIsPositioned(true);
      }, [getPositioningStyle]);
      const handleEntering = (element, isAppearing) => {
        if (onEntering) {
          onEntering(element, isAppearing);
        }
        setPositioningStyles();
      };
      const handleExited = () => {
        setIsPositioned(false);
      };
      react.exports.useEffect(() => {
        if (open) {
          setPositioningStyles();
        }
      });
      react.exports.useImperativeHandle(action, () => open ? {
        updatePosition: () => {
          setPositioningStyles();
        }
      } : null, [open, setPositioningStyles]);
      react.exports.useEffect(() => {
        if (!open) {
          return void 0;
        }
        const handleResize = debounce$3(() => {
          setPositioningStyles();
        });
        const containerWindow = ownerWindow(anchorEl);
        containerWindow.addEventListener("resize", handleResize);
        return () => {
          handleResize.clear();
          containerWindow.removeEventListener("resize", handleResize);
        };
      }, [anchorEl, open, setPositioningStyles]);
      let transitionDuration = transitionDurationProp;
      if (transitionDurationProp === "auto" && !TransitionComponent.muiSupportAuto) {
        transitionDuration = void 0;
      }
      const container = containerProp || (anchorEl ? ownerDocument(resolveAnchorEl(anchorEl)).body : void 0);
      return /* @__PURE__ */ jsx(PopoverRoot, _extends$1({
        BackdropProps: {
          invisible: true
        },
        className: clsx(classes.root, className),
        container,
        open,
        ref,
        ownerState
      }, other, {
        children: /* @__PURE__ */ jsx(TransitionComponent, _extends$1({
          appear: true,
          in: open,
          onEntering: handleEntering,
          onExited: handleExited,
          timeout: transitionDuration
        }, TransitionProps, {
          children: /* @__PURE__ */ jsx(PopoverPaper, _extends$1({
            elevation
          }, PaperProps, {
            ref: handlePaperRef,
            className: clsx(classes.paper, PaperProps.className)
          }, isPositioned ? void 0 : {
            style: _extends$1({}, PaperProps.style, {
              opacity: 0
            })
          }, {
            ownerState,
            children
          }))
        }))
      }));
    });
    Popover.propTypes = {
      action: refType$1,
      anchorEl: chainPropTypes(propTypes.exports.oneOfType([HTMLElementType, propTypes.exports.func]), (props) => {
        if (props.open && (!props.anchorReference || props.anchorReference === "anchorEl")) {
          const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
          if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
            const box = resolvedAnchorEl.getBoundingClientRect();
            if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
              return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
            }
          } else {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", `It should be an Element instance but it's \`${resolvedAnchorEl}\` instead.`].join("\n"));
          }
        }
        return null;
      }),
      anchorOrigin: propTypes.exports.shape({
        horizontal: propTypes.exports.oneOfType([propTypes.exports.oneOf(["center", "left", "right"]), propTypes.exports.number]).isRequired,
        vertical: propTypes.exports.oneOfType([propTypes.exports.oneOf(["bottom", "center", "top"]), propTypes.exports.number]).isRequired
      }),
      anchorPosition: propTypes.exports.shape({
        left: propTypes.exports.number.isRequired,
        top: propTypes.exports.number.isRequired
      }),
      anchorReference: propTypes.exports.oneOf(["anchorEl", "anchorPosition", "none"]),
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      container: propTypes.exports.oneOfType([HTMLElementType, propTypes.exports.func]),
      elevation: integerPropType,
      marginThreshold: propTypes.exports.number,
      onClose: propTypes.exports.func,
      open: propTypes.exports.bool.isRequired,
      PaperProps: propTypes.exports.shape({
        component: elementTypeAcceptingRef$1
      }),
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      transformOrigin: propTypes.exports.shape({
        horizontal: propTypes.exports.oneOfType([propTypes.exports.oneOf(["center", "left", "right"]), propTypes.exports.number]).isRequired,
        vertical: propTypes.exports.oneOfType([propTypes.exports.oneOf(["bottom", "center", "top"]), propTypes.exports.number]).isRequired
      }),
      TransitionComponent: propTypes.exports.elementType,
      transitionDuration: propTypes.exports.oneOfType([propTypes.exports.oneOf(["auto"]), propTypes.exports.number, propTypes.exports.shape({
        appear: propTypes.exports.number,
        enter: propTypes.exports.number,
        exit: propTypes.exports.number
      })]),
      TransitionProps: propTypes.exports.object
    };
    const Popover$1 = Popover;
    function getMenuUtilityClass(slot) {
      return generateUtilityClass("MuiMenu", slot);
    }
    generateUtilityClasses("MuiMenu", ["root", "paper", "list"]);
    const _excluded$16 = ["onEntering"], _excluded2$1 = ["autoFocus", "children", "disableAutoFocusItem", "MenuListProps", "onClose", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant"];
    const RTL_ORIGIN = {
      vertical: "top",
      horizontal: "right"
    };
    const LTR_ORIGIN = {
      vertical: "top",
      horizontal: "left"
    };
    const useUtilityClasses$O = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        paper: ["paper"],
        list: ["list"]
      };
      return composeClasses(slots, getMenuUtilityClass, classes);
    };
    const MenuRoot = styled$1(Popover$1, {
      shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
      name: "MuiMenu",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({});
    const MenuPaper = styled$1(Paper$1, {
      name: "MuiMenu",
      slot: "Paper",
      overridesResolver: (props, styles2) => styles2.paper
    })({
      maxHeight: "calc(100% - 96px)",
      WebkitOverflowScrolling: "touch"
    });
    const MenuMenuList = styled$1(MenuList$1, {
      name: "MuiMenu",
      slot: "List",
      overridesResolver: (props, styles2) => styles2.list
    })({
      outline: 0
    });
    const Menu = /* @__PURE__ */ react.exports.forwardRef(function Menu2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiMenu"
      });
      const {
        autoFocus = true,
        children,
        disableAutoFocusItem = false,
        MenuListProps = {},
        onClose,
        open,
        PaperProps = {},
        PopoverClasses,
        transitionDuration = "auto",
        TransitionProps: {
          onEntering
        } = {},
        variant = "selectedMenu"
      } = props, TransitionProps = _objectWithoutPropertiesLoose$1(props.TransitionProps, _excluded$16), other = _objectWithoutPropertiesLoose$1(props, _excluded2$1);
      const theme = useTheme();
      const isRtl = theme.direction === "rtl";
      const ownerState = _extends$1({}, props, {
        autoFocus,
        disableAutoFocusItem,
        MenuListProps,
        onEntering,
        PaperProps,
        transitionDuration,
        TransitionProps,
        variant
      });
      const classes = useUtilityClasses$O(ownerState);
      const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
      const menuListActionsRef = react.exports.useRef(null);
      const handleEntering = (element, isAppearing) => {
        if (menuListActionsRef.current) {
          menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
        }
        if (onEntering) {
          onEntering(element, isAppearing);
        }
      };
      const handleListKeyDown = (event) => {
        if (event.key === "Tab") {
          event.preventDefault();
          if (onClose) {
            onClose(event, "tabKeyDown");
          }
        }
      };
      let activeItemIndex = -1;
      react.exports.Children.map(children, (child, index) => {
        if (!/* @__PURE__ */ react.exports.isValidElement(child)) {
          return;
        }
        {
          if (reactIs$2.exports.isFragment(child)) {
            console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
          }
        }
        if (!child.props.disabled) {
          if (variant === "selectedMenu" && child.props.selected) {
            activeItemIndex = index;
          } else if (activeItemIndex === -1) {
            activeItemIndex = index;
          }
        }
      });
      return /* @__PURE__ */ jsx(MenuRoot, _extends$1({
        onClose,
        anchorOrigin: {
          vertical: "bottom",
          horizontal: isRtl ? "right" : "left"
        },
        transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
        PaperProps: _extends$1({
          as: MenuPaper
        }, PaperProps, {
          classes: _extends$1({}, PaperProps.classes, {
            root: classes.paper
          })
        }),
        className: classes.root,
        open,
        ref,
        transitionDuration,
        TransitionProps: _extends$1({
          onEntering: handleEntering
        }, TransitionProps),
        ownerState
      }, other, {
        classes: PopoverClasses,
        children: /* @__PURE__ */ jsx(MenuMenuList, _extends$1({
          onKeyDown: handleListKeyDown,
          actions: menuListActionsRef,
          autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
          autoFocusItem,
          variant
        }, MenuListProps, {
          className: clsx(classes.list, MenuListProps.className),
          children
        }))
      }));
    });
    Menu.propTypes = {
      anchorEl: propTypes.exports.oneOfType([HTMLElementType, propTypes.exports.func]),
      autoFocus: propTypes.exports.bool,
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      disableAutoFocusItem: propTypes.exports.bool,
      MenuListProps: propTypes.exports.object,
      onClose: propTypes.exports.func,
      open: propTypes.exports.bool.isRequired,
      PaperProps: propTypes.exports.object,
      PopoverClasses: propTypes.exports.object,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      transitionDuration: propTypes.exports.oneOfType([propTypes.exports.oneOf(["auto"]), propTypes.exports.number, propTypes.exports.shape({
        appear: propTypes.exports.number,
        enter: propTypes.exports.number,
        exit: propTypes.exports.number
      })]),
      TransitionProps: propTypes.exports.object,
      variant: propTypes.exports.oneOf(["menu", "selectedMenu"])
    };
    const Menu$1 = Menu;
    function getNativeSelectUtilityClasses(slot) {
      return generateUtilityClass("MuiNativeSelect", slot);
    }
    const nativeSelectClasses = generateUtilityClasses("MuiNativeSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
    const nativeSelectClasses$1 = nativeSelectClasses;
    const _excluded$15 = ["className", "disabled", "error", "IconComponent", "inputRef", "variant"];
    const useUtilityClasses$N = (ownerState) => {
      const {
        classes,
        variant,
        disabled,
        multiple,
        open,
        error
      } = ownerState;
      const slots = {
        select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
        icon: ["icon", `icon${capitalize(variant)}`, open && "iconOpen", disabled && "disabled"]
      };
      return composeClasses(slots, getNativeSelectUtilityClasses, classes);
    };
    const nativeSelectSelectStyles = ({
      ownerState,
      theme
    }) => _extends$1({
      MozAppearance: "none",
      WebkitAppearance: "none",
      userSelect: "none",
      borderRadius: 0,
      cursor: "pointer",
      "&:focus": _extends$1({}, theme.vars ? {
        backgroundColor: `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.05)`
      } : {
        backgroundColor: theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.05)" : "rgba(255, 255, 255, 0.05)"
      }, {
        borderRadius: 0
      }),
      "&::-ms-expand": {
        display: "none"
      },
      [`&.${nativeSelectClasses$1.disabled}`]: {
        cursor: "default"
      },
      "&[multiple]": {
        height: "auto"
      },
      "&:not([multiple]) option, &:not([multiple]) optgroup": {
        backgroundColor: (theme.vars || theme).palette.background.paper
      },
      "&&&": {
        paddingRight: 24,
        minWidth: 16
      }
    }, ownerState.variant === "filled" && {
      "&&&": {
        paddingRight: 32
      }
    }, ownerState.variant === "outlined" && {
      borderRadius: (theme.vars || theme).shape.borderRadius,
      "&:focus": {
        borderRadius: (theme.vars || theme).shape.borderRadius
      },
      "&&&": {
        paddingRight: 32
      }
    });
    const NativeSelectSelect = styled$1("select", {
      name: "MuiNativeSelect",
      slot: "Select",
      shouldForwardProp: rootShouldForwardProp,
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.select, styles2[ownerState.variant], ownerState.error && styles2.error, {
          [`&.${nativeSelectClasses$1.multiple}`]: styles2.multiple
        }];
      }
    })(nativeSelectSelectStyles);
    const nativeSelectIconStyles = ({
      ownerState,
      theme
    }) => _extends$1({
      position: "absolute",
      right: 0,
      top: "calc(50% - .5em)",
      pointerEvents: "none",
      color: (theme.vars || theme).palette.action.active,
      [`&.${nativeSelectClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.action.disabled
      }
    }, ownerState.open && {
      transform: "rotate(180deg)"
    }, ownerState.variant === "filled" && {
      right: 7
    }, ownerState.variant === "outlined" && {
      right: 7
    });
    const NativeSelectIcon = styled$1("svg", {
      name: "MuiNativeSelect",
      slot: "Icon",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.icon, ownerState.variant && styles2[`icon${capitalize(ownerState.variant)}`], ownerState.open && styles2.iconOpen];
      }
    })(nativeSelectIconStyles);
    const NativeSelectInput = /* @__PURE__ */ react.exports.forwardRef(function NativeSelectInput2(props, ref) {
      const {
        className,
        disabled,
        error,
        IconComponent,
        inputRef,
        variant = "standard"
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$15);
      const ownerState = _extends$1({}, props, {
        disabled,
        variant,
        error
      });
      const classes = useUtilityClasses$N(ownerState);
      return /* @__PURE__ */ jsxs(react.exports.Fragment, {
        children: [/* @__PURE__ */ jsx(NativeSelectSelect, _extends$1({
          ownerState,
          className: clsx(classes.select, className),
          disabled,
          ref: inputRef || ref
        }, other)), props.multiple ? null : /* @__PURE__ */ jsx(NativeSelectIcon, {
          as: IconComponent,
          ownerState,
          className: classes.icon
        })]
      });
    });
    NativeSelectInput.propTypes = {
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      disabled: propTypes.exports.bool,
      error: propTypes.exports.bool,
      IconComponent: propTypes.exports.elementType.isRequired,
      inputRef: refType$1,
      multiple: propTypes.exports.bool,
      name: propTypes.exports.string,
      onChange: propTypes.exports.func,
      value: propTypes.exports.any,
      variant: propTypes.exports.oneOf(["standard", "outlined", "filled"])
    };
    const NativeSelectInput$1 = NativeSelectInput;
    function getSelectUtilityClasses(slot) {
      return generateUtilityClass("MuiSelect", slot);
    }
    const selectClasses = generateUtilityClasses("MuiSelect", ["select", "multiple", "filled", "outlined", "standard", "disabled", "focused", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
    const selectClasses$1 = selectClasses;
    var _span$1;
    const _excluded$14 = ["aria-describedby", "aria-label", "autoFocus", "autoWidth", "children", "className", "defaultOpen", "defaultValue", "disabled", "displayEmpty", "error", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"];
    const SelectSelect = styled$1("div", {
      name: "MuiSelect",
      slot: "Select",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [
          {
            [`&.${selectClasses$1.select}`]: styles2.select
          },
          {
            [`&.${selectClasses$1.select}`]: styles2[ownerState.variant]
          },
          {
            [`&.${selectClasses$1.error}`]: styles2.error
          },
          {
            [`&.${selectClasses$1.multiple}`]: styles2.multiple
          }
        ];
      }
    })(nativeSelectSelectStyles, {
      [`&.${selectClasses$1.select}`]: {
        height: "auto",
        minHeight: "1.4375em",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap",
        overflow: "hidden"
      }
    });
    const SelectIcon = styled$1("svg", {
      name: "MuiSelect",
      slot: "Icon",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.icon, ownerState.variant && styles2[`icon${capitalize(ownerState.variant)}`], ownerState.open && styles2.iconOpen];
      }
    })(nativeSelectIconStyles);
    const SelectNativeInput = styled$1("input", {
      shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "classes",
      name: "MuiSelect",
      slot: "NativeInput",
      overridesResolver: (props, styles2) => styles2.nativeInput
    })({
      bottom: 0,
      left: 0,
      position: "absolute",
      opacity: 0,
      pointerEvents: "none",
      width: "100%",
      boxSizing: "border-box"
    });
    function areEqualValues$1(a, b) {
      if (typeof b === "object" && b !== null) {
        return a === b;
      }
      return String(a) === String(b);
    }
    function isEmpty(display) {
      return display == null || typeof display === "string" && !display.trim();
    }
    const useUtilityClasses$M = (ownerState) => {
      const {
        classes,
        variant,
        disabled,
        multiple,
        open,
        error
      } = ownerState;
      const slots = {
        select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
        icon: ["icon", `icon${capitalize(variant)}`, open && "iconOpen", disabled && "disabled"],
        nativeInput: ["nativeInput"]
      };
      return composeClasses(slots, getSelectUtilityClasses, classes);
    };
    const SelectInput = /* @__PURE__ */ react.exports.forwardRef(function SelectInput2(props, ref) {
      const {
        "aria-describedby": ariaDescribedby,
        "aria-label": ariaLabel,
        autoFocus,
        autoWidth,
        children,
        className,
        defaultOpen,
        defaultValue: defaultValue2,
        disabled,
        displayEmpty,
        error = false,
        IconComponent,
        inputRef: inputRefProp,
        labelId,
        MenuProps = {},
        multiple,
        name,
        onBlur,
        onChange,
        onClose,
        onFocus,
        onOpen,
        open: openProp,
        readOnly,
        renderValue,
        SelectDisplayProps = {},
        tabIndex: tabIndexProp,
        value: valueProp,
        variant = "standard"
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$14);
      const [value2, setValueState] = useControlled({
        controlled: valueProp,
        default: defaultValue2,
        name: "Select"
      });
      const [openState, setOpenState] = useControlled({
        controlled: openProp,
        default: defaultOpen,
        name: "Select"
      });
      const inputRef = react.exports.useRef(null);
      const displayRef = react.exports.useRef(null);
      const [displayNode, setDisplayNode] = react.exports.useState(null);
      const {
        current: isOpenControlled
      } = react.exports.useRef(openProp != null);
      const [menuMinWidthState, setMenuMinWidthState] = react.exports.useState();
      const handleRef = useForkRef(ref, inputRefProp);
      const handleDisplayRef = react.exports.useCallback((node2) => {
        displayRef.current = node2;
        if (node2) {
          setDisplayNode(node2);
        }
      }, []);
      const anchorElement = displayNode == null ? void 0 : displayNode.parentNode;
      react.exports.useImperativeHandle(handleRef, () => ({
        focus: () => {
          displayRef.current.focus();
        },
        node: inputRef.current,
        value: value2
      }), [value2]);
      react.exports.useEffect(() => {
        if (defaultOpen && openState && displayNode && !isOpenControlled) {
          setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
          displayRef.current.focus();
        }
      }, [displayNode, autoWidth]);
      react.exports.useEffect(() => {
        if (autoFocus) {
          displayRef.current.focus();
        }
      }, [autoFocus]);
      react.exports.useEffect(() => {
        if (!labelId) {
          return void 0;
        }
        const label = ownerDocument(displayRef.current).getElementById(labelId);
        if (label) {
          const handler = () => {
            if (getSelection().isCollapsed) {
              displayRef.current.focus();
            }
          };
          label.addEventListener("click", handler);
          return () => {
            label.removeEventListener("click", handler);
          };
        }
        return void 0;
      }, [labelId]);
      const update = (open2, event) => {
        if (open2) {
          if (onOpen) {
            onOpen(event);
          }
        } else if (onClose) {
          onClose(event);
        }
        if (!isOpenControlled) {
          setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
          setOpenState(open2);
        }
      };
      const handleMouseDown = (event) => {
        if (event.button !== 0) {
          return;
        }
        event.preventDefault();
        displayRef.current.focus();
        update(true, event);
      };
      const handleClose = (event) => {
        update(false, event);
      };
      const childrenArray = react.exports.Children.toArray(children);
      const handleChange = (event) => {
        const index = childrenArray.map((child2) => child2.props.value).indexOf(event.target.value);
        if (index === -1) {
          return;
        }
        const child = childrenArray[index];
        setValueState(child.props.value);
        if (onChange) {
          onChange(event, child);
        }
      };
      const handleItemClick = (child) => (event) => {
        let newValue;
        if (!event.currentTarget.hasAttribute("tabindex")) {
          return;
        }
        if (multiple) {
          newValue = Array.isArray(value2) ? value2.slice() : [];
          const itemIndex = value2.indexOf(child.props.value);
          if (itemIndex === -1) {
            newValue.push(child.props.value);
          } else {
            newValue.splice(itemIndex, 1);
          }
        } else {
          newValue = child.props.value;
        }
        if (child.props.onClick) {
          child.props.onClick(event);
        }
        if (value2 !== newValue) {
          setValueState(newValue);
          if (onChange) {
            const nativeEvent = event.nativeEvent || event;
            const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
            Object.defineProperty(clonedEvent, "target", {
              writable: true,
              value: {
                value: newValue,
                name
              }
            });
            onChange(clonedEvent, child);
          }
        }
        if (!multiple) {
          update(false, event);
        }
      };
      const handleKeyDown2 = (event) => {
        if (!readOnly) {
          const validKeys = [
            " ",
            "ArrowUp",
            "ArrowDown",
            "Enter"
          ];
          if (validKeys.indexOf(event.key) !== -1) {
            event.preventDefault();
            update(true, event);
          }
        }
      };
      const open = displayNode !== null && openState;
      const handleBlur = (event) => {
        if (!open && onBlur) {
          Object.defineProperty(event, "target", {
            writable: true,
            value: {
              value: value2,
              name
            }
          });
          onBlur(event);
        }
      };
      delete other["aria-invalid"];
      let display;
      let displaySingle;
      const displayMultiple = [];
      let computeDisplay = false;
      let foundMatch = false;
      if (isFilled({
        value: value2
      }) || displayEmpty) {
        if (renderValue) {
          display = renderValue(value2);
        } else {
          computeDisplay = true;
        }
      }
      const items = childrenArray.map((child) => {
        if (!/* @__PURE__ */ react.exports.isValidElement(child)) {
          return null;
        }
        {
          if (reactIs$2.exports.isFragment(child)) {
            console.error(["MUI: The Select component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
          }
        }
        let selected;
        if (multiple) {
          if (!Array.isArray(value2)) {
            throw new Error(`MUI: The \`value\` prop must be an array when using the \`Select\` component with \`multiple\`.`);
          }
          selected = value2.some((v) => areEqualValues$1(v, child.props.value));
          if (selected && computeDisplay) {
            displayMultiple.push(child.props.children);
          }
        } else {
          selected = areEqualValues$1(value2, child.props.value);
          if (selected && computeDisplay) {
            displaySingle = child.props.children;
          }
        }
        if (selected) {
          foundMatch = true;
        }
        return /* @__PURE__ */ react.exports.cloneElement(child, {
          "aria-selected": selected ? "true" : "false",
          onClick: handleItemClick(child),
          onKeyUp: (event) => {
            if (event.key === " ") {
              event.preventDefault();
            }
            if (child.props.onKeyUp) {
              child.props.onKeyUp(event);
            }
          },
          role: "option",
          selected,
          value: void 0,
          "data-value": child.props.value
        });
      });
      {
        react.exports.useEffect(() => {
          if (!foundMatch && !multiple && value2 !== "") {
            const values2 = childrenArray.map((child) => child.props.value);
            console.warn([`MUI: You have provided an out-of-range value \`${value2}\` for the select ${name ? `(name="${name}") ` : ""}component.`, "Consider providing a value that matches one of the available options or ''.", `The available values are ${values2.filter((x) => x != null).map((x) => `\`${x}\``).join(", ") || '""'}.`].join("\n"));
          }
        }, [foundMatch, childrenArray, multiple, name, value2]);
      }
      if (computeDisplay) {
        if (multiple) {
          if (displayMultiple.length === 0) {
            display = null;
          } else {
            display = displayMultiple.reduce((output, child, index) => {
              output.push(child);
              if (index < displayMultiple.length - 1) {
                output.push(", ");
              }
              return output;
            }, []);
          }
        } else {
          display = displaySingle;
        }
      }
      let menuMinWidth = menuMinWidthState;
      if (!autoWidth && isOpenControlled && displayNode) {
        menuMinWidth = anchorElement.clientWidth;
      }
      let tabIndex;
      if (typeof tabIndexProp !== "undefined") {
        tabIndex = tabIndexProp;
      } else {
        tabIndex = disabled ? null : 0;
      }
      const buttonId = SelectDisplayProps.id || (name ? `mui-component-select-${name}` : void 0);
      const ownerState = _extends$1({}, props, {
        variant,
        value: value2,
        open,
        error
      });
      const classes = useUtilityClasses$M(ownerState);
      return /* @__PURE__ */ jsxs(react.exports.Fragment, {
        children: [/* @__PURE__ */ jsx(SelectSelect, _extends$1({
          ref: handleDisplayRef,
          tabIndex,
          role: "button",
          "aria-disabled": disabled ? "true" : void 0,
          "aria-expanded": open ? "true" : "false",
          "aria-haspopup": "listbox",
          "aria-label": ariaLabel,
          "aria-labelledby": [labelId, buttonId].filter(Boolean).join(" ") || void 0,
          "aria-describedby": ariaDescribedby,
          onKeyDown: handleKeyDown2,
          onMouseDown: disabled || readOnly ? null : handleMouseDown,
          onBlur: handleBlur,
          onFocus
        }, SelectDisplayProps, {
          ownerState,
          className: clsx(SelectDisplayProps.className, classes.select, className),
          id: buttonId,
          children: isEmpty(display) ? _span$1 || (_span$1 = /* @__PURE__ */ jsx("span", {
            className: "notranslate",
            children: "\u200B"
          })) : display
        })), /* @__PURE__ */ jsx(SelectNativeInput, _extends$1({
          "aria-invalid": error,
          value: Array.isArray(value2) ? value2.join(",") : value2,
          name,
          ref: inputRef,
          "aria-hidden": true,
          onChange: handleChange,
          tabIndex: -1,
          disabled,
          className: classes.nativeInput,
          autoFocus,
          ownerState
        }, other)), /* @__PURE__ */ jsx(SelectIcon, {
          as: IconComponent,
          className: classes.icon,
          ownerState
        }), /* @__PURE__ */ jsx(Menu$1, _extends$1({
          id: `menu-${name || ""}`,
          anchorEl: anchorElement,
          open,
          onClose: handleClose,
          anchorOrigin: {
            vertical: "bottom",
            horizontal: "center"
          },
          transformOrigin: {
            vertical: "top",
            horizontal: "center"
          }
        }, MenuProps, {
          MenuListProps: _extends$1({
            "aria-labelledby": labelId,
            role: "listbox",
            disableListWrap: true
          }, MenuProps.MenuListProps),
          PaperProps: _extends$1({}, MenuProps.PaperProps, {
            style: _extends$1({
              minWidth: menuMinWidth
            }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)
          }),
          children: items
        }))]
      });
    });
    SelectInput.propTypes = {
      "aria-describedby": propTypes.exports.string,
      "aria-label": propTypes.exports.string,
      autoFocus: propTypes.exports.bool,
      autoWidth: propTypes.exports.bool,
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      defaultOpen: propTypes.exports.bool,
      defaultValue: propTypes.exports.any,
      disabled: propTypes.exports.bool,
      displayEmpty: propTypes.exports.bool,
      error: propTypes.exports.bool,
      IconComponent: propTypes.exports.elementType.isRequired,
      inputRef: refType$1,
      labelId: propTypes.exports.string,
      MenuProps: propTypes.exports.object,
      multiple: propTypes.exports.bool,
      name: propTypes.exports.string,
      onBlur: propTypes.exports.func,
      onChange: propTypes.exports.func,
      onClose: propTypes.exports.func,
      onFocus: propTypes.exports.func,
      onOpen: propTypes.exports.func,
      open: propTypes.exports.bool,
      readOnly: propTypes.exports.bool,
      renderValue: propTypes.exports.func,
      SelectDisplayProps: propTypes.exports.object,
      tabIndex: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),
      type: propTypes.exports.any,
      value: propTypes.exports.any,
      variant: propTypes.exports.oneOf(["standard", "outlined", "filled"])
    };
    const SelectInput$1 = SelectInput;
    function getSvgIconUtilityClass(slot) {
      return generateUtilityClass("MuiSvgIcon", slot);
    }
    generateUtilityClasses("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);
    const _excluded$13 = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
    const useUtilityClasses$L = (ownerState) => {
      const {
        color: color2,
        fontSize,
        classes
      } = ownerState;
      const slots = {
        root: ["root", color2 !== "inherit" && `color${capitalize(color2)}`, `fontSize${capitalize(fontSize)}`]
      };
      return composeClasses(slots, getSvgIconUtilityClass, classes);
    };
    const SvgIconRoot = styled$1("svg", {
      name: "MuiSvgIcon",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.color !== "inherit" && styles2[`color${capitalize(ownerState.color)}`], styles2[`fontSize${capitalize(ownerState.fontSize)}`]];
      }
    })(({
      theme,
      ownerState
    }) => {
      var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$transitions2$d, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _palette$ownerState$c, _palette, _palette$ownerState$c2, _palette2, _palette2$action, _palette3, _palette3$action;
      return {
        userSelect: "none",
        width: "1em",
        height: "1em",
        display: "inline-block",
        fill: "currentColor",
        flexShrink: 0,
        transition: (_theme$transitions = theme.transitions) == null ? void 0 : (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, "fill", {
          duration: (_theme$transitions2 = theme.transitions) == null ? void 0 : (_theme$transitions2$d = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2$d.shorter
        }),
        fontSize: {
          inherit: "inherit",
          small: ((_theme$typography = theme.typography) == null ? void 0 : (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || "1.25rem",
          medium: ((_theme$typography2 = theme.typography) == null ? void 0 : (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || "1.5rem",
          large: ((_theme$typography3 = theme.typography) == null ? void 0 : (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || "2.1875rem"
        }[ownerState.fontSize],
        color: (_palette$ownerState$c = (_palette = (theme.vars || theme).palette) == null ? void 0 : (_palette$ownerState$c2 = _palette[ownerState.color]) == null ? void 0 : _palette$ownerState$c2.main) != null ? _palette$ownerState$c : {
          action: (_palette2 = (theme.vars || theme).palette) == null ? void 0 : (_palette2$action = _palette2.action) == null ? void 0 : _palette2$action.active,
          disabled: (_palette3 = (theme.vars || theme).palette) == null ? void 0 : (_palette3$action = _palette3.action) == null ? void 0 : _palette3$action.disabled,
          inherit: void 0
        }[ownerState.color]
      };
    });
    const SvgIcon = /* @__PURE__ */ react.exports.forwardRef(function SvgIcon2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiSvgIcon"
      });
      const {
        children,
        className,
        color: color2 = "inherit",
        component = "svg",
        fontSize = "medium",
        htmlColor,
        inheritViewBox = false,
        titleAccess,
        viewBox = "0 0 24 24"
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$13);
      const ownerState = _extends$1({}, props, {
        color: color2,
        component,
        fontSize,
        instanceFontSize: inProps.fontSize,
        inheritViewBox,
        viewBox
      });
      const more = {};
      if (!inheritViewBox) {
        more.viewBox = viewBox;
      }
      const classes = useUtilityClasses$L(ownerState);
      return /* @__PURE__ */ jsxs(SvgIconRoot, _extends$1({
        as: component,
        className: clsx(classes.root, className),
        focusable: "false",
        color: htmlColor,
        "aria-hidden": titleAccess ? void 0 : true,
        role: titleAccess ? "img" : void 0,
        ref
      }, more, other, {
        ownerState,
        children: [children, titleAccess ? /* @__PURE__ */ jsx("title", {
          children: titleAccess
        }) : null]
      }));
    });
    SvgIcon.propTypes = {
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      color: propTypes.exports.oneOfType([propTypes.exports.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), propTypes.exports.string]),
      component: propTypes.exports.elementType,
      fontSize: propTypes.exports.oneOfType([propTypes.exports.oneOf(["inherit", "large", "medium", "small"]), propTypes.exports.string]),
      htmlColor: propTypes.exports.string,
      inheritViewBox: propTypes.exports.bool,
      shapeRendering: propTypes.exports.string,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      titleAccess: propTypes.exports.string,
      viewBox: propTypes.exports.string
    };
    SvgIcon.muiName = "SvgIcon";
    const SvgIcon$1 = SvgIcon;
    function createSvgIcon$1(path, displayName) {
      function Component(props, ref) {
        return /* @__PURE__ */ jsx(SvgIcon$1, _extends$1({
          "data-testid": `${displayName}Icon`,
          ref
        }, props, {
          children: path
        }));
      }
      {
        Component.displayName = `${displayName}Icon`;
      }
      Component.muiName = SvgIcon$1.muiName;
      return /* @__PURE__ */ react.exports.memo(/* @__PURE__ */ react.exports.forwardRef(Component));
    }
    const ArrowDropDownIcon = createSvgIcon$1(/* @__PURE__ */ jsx("path", {
      d: "M7 10l5 5 5-5z"
    }), "ArrowDropDown");
    const _excluded$12 = ["autoWidth", "children", "classes", "className", "defaultOpen", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"];
    const useUtilityClasses$K = (ownerState) => {
      const {
        classes
      } = ownerState;
      return classes;
    };
    const styledRootConfig = {
      name: "MuiSelect",
      overridesResolver: (props, styles2) => styles2.root,
      shouldForwardProp: (prop) => rootShouldForwardProp(prop) && prop !== "variant",
      slot: "Root"
    };
    const StyledInput = styled$1(Input$1, styledRootConfig)("");
    const StyledOutlinedInput = styled$1(OutlinedInput$1, styledRootConfig)("");
    const StyledFilledInput = styled$1(FilledInput$1, styledRootConfig)("");
    const Select = /* @__PURE__ */ react.exports.forwardRef(function Select2(inProps, ref) {
      const props = useThemeProps({
        name: "MuiSelect",
        props: inProps
      });
      const {
        autoWidth = false,
        children,
        classes: classesProp = {},
        className,
        defaultOpen = false,
        displayEmpty = false,
        IconComponent = ArrowDropDownIcon,
        id,
        input,
        inputProps,
        label,
        labelId,
        MenuProps,
        multiple = false,
        native = false,
        onClose,
        onOpen,
        open,
        renderValue,
        SelectDisplayProps,
        variant: variantProp = "outlined"
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$12);
      const inputComponent = native ? NativeSelectInput$1 : SelectInput$1;
      const muiFormControl = useFormControl();
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ["variant", "error"]
      });
      const variant = fcs.variant || variantProp;
      const ownerState = _extends$1({}, props, {
        variant,
        classes: classesProp
      });
      const classes = useUtilityClasses$K(ownerState);
      const InputComponent = input || {
        standard: /* @__PURE__ */ jsx(StyledInput, {
          ownerState
        }),
        outlined: /* @__PURE__ */ jsx(StyledOutlinedInput, {
          label,
          ownerState
        }),
        filled: /* @__PURE__ */ jsx(StyledFilledInput, {
          ownerState
        })
      }[variant];
      const inputComponentRef = useForkRef(ref, InputComponent.ref);
      return /* @__PURE__ */ jsx(react.exports.Fragment, {
        children: /* @__PURE__ */ react.exports.cloneElement(InputComponent, _extends$1({
          inputComponent,
          inputProps: _extends$1({
            children,
            error: fcs.error,
            IconComponent,
            variant,
            type: void 0,
            multiple
          }, native ? {
            id
          } : {
            autoWidth,
            defaultOpen,
            displayEmpty,
            labelId,
            MenuProps,
            onClose,
            onOpen,
            open,
            renderValue,
            SelectDisplayProps: _extends$1({
              id
            }, SelectDisplayProps)
          }, inputProps, {
            classes: inputProps ? deepmerge(classes, inputProps.classes) : classes
          }, input ? input.props.inputProps : {})
        }, multiple && native && variant === "outlined" ? {
          notched: true
        } : {}, {
          ref: inputComponentRef,
          className: clsx(InputComponent.props.className, className)
        }, !input && {
          variant
        }, other))
      });
    });
    Select.propTypes = {
      autoWidth: propTypes.exports.bool,
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      defaultOpen: propTypes.exports.bool,
      defaultValue: propTypes.exports.any,
      displayEmpty: propTypes.exports.bool,
      IconComponent: propTypes.exports.elementType,
      id: propTypes.exports.string,
      input: propTypes.exports.element,
      inputProps: propTypes.exports.object,
      label: propTypes.exports.node,
      labelId: propTypes.exports.string,
      MenuProps: propTypes.exports.object,
      multiple: propTypes.exports.bool,
      native: propTypes.exports.bool,
      onChange: propTypes.exports.func,
      onClose: propTypes.exports.func,
      onOpen: propTypes.exports.func,
      open: propTypes.exports.bool,
      renderValue: propTypes.exports.func,
      SelectDisplayProps: propTypes.exports.object,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      value: propTypes.exports.oneOfType([propTypes.exports.oneOf([""]), propTypes.exports.any]),
      variant: propTypes.exports.oneOf(["filled", "outlined", "standard"])
    };
    Select.muiName = "Select";
    const Select$1 = Select;
    function getTextFieldUtilityClass(slot) {
      return generateUtilityClass("MuiTextField", slot);
    }
    generateUtilityClasses("MuiTextField", ["root"]);
    const _excluded$11 = ["autoComplete", "autoFocus", "children", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "placeholder", "required", "rows", "select", "SelectProps", "type", "value", "variant"];
    const variantComponent = {
      standard: Input$1,
      filled: FilledInput$1,
      outlined: OutlinedInput$1
    };
    const useUtilityClasses$J = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, getTextFieldUtilityClass, classes);
    };
    const TextFieldRoot = styled$1(FormControl$1, {
      name: "MuiTextField",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({});
    const TextField = /* @__PURE__ */ react.exports.forwardRef(function TextField2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiTextField"
      });
      const {
        autoComplete,
        autoFocus = false,
        children,
        className,
        color: color2 = "primary",
        defaultValue: defaultValue2,
        disabled = false,
        error = false,
        FormHelperTextProps,
        fullWidth = false,
        helperText,
        id: idOverride,
        InputLabelProps,
        inputProps,
        InputProps,
        inputRef,
        label,
        maxRows,
        minRows,
        multiline = false,
        name,
        onBlur,
        onChange,
        onClick,
        onFocus,
        placeholder,
        required = false,
        rows,
        select = false,
        SelectProps,
        type,
        value: value2,
        variant = "outlined"
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$11);
      const ownerState = _extends$1({}, props, {
        autoFocus,
        color: color2,
        disabled,
        error,
        fullWidth,
        multiline,
        required,
        select,
        variant
      });
      const classes = useUtilityClasses$J(ownerState);
      {
        if (select && !children) {
          console.error("MUI: `children` must be passed when using the `TextField` component with `select`.");
        }
      }
      const InputMore = {};
      if (variant === "outlined") {
        if (InputLabelProps && typeof InputLabelProps.shrink !== "undefined") {
          InputMore.notched = InputLabelProps.shrink;
        }
        InputMore.label = label;
      }
      if (select) {
        if (!SelectProps || !SelectProps.native) {
          InputMore.id = void 0;
        }
        InputMore["aria-describedby"] = void 0;
      }
      const id = useId(idOverride);
      const helperTextId = helperText && id ? `${id}-helper-text` : void 0;
      const inputLabelId = label && id ? `${id}-label` : void 0;
      const InputComponent = variantComponent[variant];
      const InputElement = /* @__PURE__ */ jsx(InputComponent, _extends$1({
        "aria-describedby": helperTextId,
        autoComplete,
        autoFocus,
        defaultValue: defaultValue2,
        fullWidth,
        multiline,
        name,
        rows,
        maxRows,
        minRows,
        type,
        value: value2,
        id,
        inputRef,
        onBlur,
        onChange,
        onFocus,
        onClick,
        placeholder,
        inputProps
      }, InputMore, InputProps));
      return /* @__PURE__ */ jsxs(TextFieldRoot, _extends$1({
        className: clsx(classes.root, className),
        disabled,
        error,
        fullWidth,
        ref,
        required,
        color: color2,
        variant,
        ownerState
      }, other, {
        children: [label != null && label !== "" && /* @__PURE__ */ jsx(InputLabel$1, _extends$1({
          htmlFor: id,
          id: inputLabelId
        }, InputLabelProps, {
          children: label
        })), select ? /* @__PURE__ */ jsx(Select$1, _extends$1({
          "aria-describedby": helperTextId,
          id,
          labelId: inputLabelId,
          value: value2,
          input: InputElement
        }, SelectProps, {
          children
        })) : InputElement, helperText && /* @__PURE__ */ jsx(FormHelperText$1, _extends$1({
          id: helperTextId
        }, FormHelperTextProps, {
          children: helperText
        }))]
      }));
    });
    TextField.propTypes = {
      autoComplete: propTypes.exports.string,
      autoFocus: propTypes.exports.bool,
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      color: propTypes.exports.oneOfType([propTypes.exports.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), propTypes.exports.string]),
      defaultValue: propTypes.exports.any,
      disabled: propTypes.exports.bool,
      error: propTypes.exports.bool,
      FormHelperTextProps: propTypes.exports.object,
      fullWidth: propTypes.exports.bool,
      helperText: propTypes.exports.node,
      id: propTypes.exports.string,
      InputLabelProps: propTypes.exports.object,
      inputProps: propTypes.exports.object,
      InputProps: propTypes.exports.object,
      inputRef: refType$1,
      label: propTypes.exports.node,
      margin: propTypes.exports.oneOf(["dense", "none", "normal"]),
      maxRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),
      minRows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),
      multiline: propTypes.exports.bool,
      name: propTypes.exports.string,
      onBlur: propTypes.exports.func,
      onChange: propTypes.exports.func,
      onClick: propTypes.exports.func,
      onFocus: propTypes.exports.func,
      placeholder: propTypes.exports.string,
      required: propTypes.exports.bool,
      rows: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),
      select: propTypes.exports.bool,
      SelectProps: propTypes.exports.object,
      size: propTypes.exports.oneOfType([propTypes.exports.oneOf(["medium", "small"]), propTypes.exports.string]),
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      type: propTypes.exports.string,
      value: propTypes.exports.any,
      variant: propTypes.exports.oneOf(["filled", "outlined", "standard"])
    };
    const TextField$1 = TextField;
    var _jsxFileName$10 = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/node_modules/.pnpm/material-ui-confirm@3.0.7_dbrsiiacey3eqyn76hrozq4tpi/node_modules/material-ui-confirm/dist/material-ui-confirm.esm.js";
    function ownKeys$A(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$A(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$A(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty$1(obj, key, value2) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value2,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _slicedToArray$1(arr, i) {
      return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _unsupportedIterableToArray$9(arr, i) || _nonIterableRest$1();
    }
    function _arrayWithHoles$1(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _iterableToArrayLimit$1(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
      if (_i == null)
        return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _s, _e;
      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i && _arr.length === i)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null)
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    function _unsupportedIterableToArray$9(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$9(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$9(o, minLen);
    }
    function _arrayLikeToArray$9(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function _nonIterableRest$1() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var ConfirmContext = /* @__PURE__ */ react.exports.createContext();
    var ConfirmationDialog = function ConfirmationDialog2(_ref) {
      var open = _ref.open, options = _ref.options, onCancel = _ref.onCancel, onConfirm = _ref.onConfirm, onClose = _ref.onClose;
      var title = options.title, description = options.description, content = options.content, confirmationText = options.confirmationText, cancellationText = options.cancellationText, dialogProps = options.dialogProps, dialogActionsProps = options.dialogActionsProps, confirmationButtonProps = options.confirmationButtonProps, cancellationButtonProps = options.cancellationButtonProps, titleProps = options.titleProps, contentProps = options.contentProps, allowClose = options.allowClose, confirmationKeyword = options.confirmationKeyword, confirmationKeywordTextFieldProps = options.confirmationKeywordTextFieldProps;
      var _React$useState = React.useState(""), _React$useState2 = _slicedToArray$1(_React$useState, 2), confirmationKeywordValue = _React$useState2[0], setConfirmationKeywordValue = _React$useState2[1];
      var confirmationButtonDisabled = confirmationKeyword && confirmationKeywordValue !== confirmationKeyword;
      var confirmationContent = /* @__PURE__ */ jsxDEV(Fragment, {
        children: confirmationKeyword && /* @__PURE__ */ jsxDEV(TextField$1, {
          onChange: function onChange(e) {
            return setConfirmationKeywordValue(e.target.value);
          },
          value: confirmationKeywordValue,
          fullWidth: true,
          ...confirmationKeywordTextFieldProps
        }, void 0, false, {
          fileName: _jsxFileName$10,
          lineNumber: 157,
          columnNumber: 120
        }, this)
      }, void 0, false);
      return /* @__PURE__ */ jsxDEV(Dialog$1, {
        fullWidth: true,
        ...dialogProps,
        open,
        onClose: allowClose ? onClose : null,
        children: [title && /* @__PURE__ */ jsxDEV(DialogTitle$1, {
          ...titleProps,
          children: title
        }, void 0, false, {
          fileName: _jsxFileName$10,
          lineNumber: 169,
          columnNumber: 29
        }, this), content ? /* @__PURE__ */ jsxDEV(DialogContent$1, {
          ...contentProps,
          children: [content, confirmationContent]
        }, void 0, true, {
          fileName: _jsxFileName$10,
          lineNumber: 169,
          columnNumber: 105
        }, this) : description ? /* @__PURE__ */ jsxDEV(DialogContent$1, {
          ...contentProps,
          children: [/* @__PURE__ */ jsxDEV(DialogContentText$1, {
            children: description
          }, void 0, false, {
            fileName: _jsxFileName$10,
            lineNumber: 169,
            columnNumber: 275
          }, this), confirmationContent]
        }, void 0, true, {
          fileName: _jsxFileName$10,
          lineNumber: 169,
          columnNumber: 213
        }, this) : confirmationKeyword && /* @__PURE__ */ jsxDEV(DialogContent$1, {
          ...contentProps,
          children: confirmationContent
        }, void 0, false, {
          fileName: _jsxFileName$10,
          lineNumber: 169,
          columnNumber: 393
        }, this), /* @__PURE__ */ jsxDEV(DialogActions$1, {
          ...dialogActionsProps,
          children: [/* @__PURE__ */ jsxDEV(Button$1, {
            ...cancellationButtonProps,
            onClick: onCancel,
            children: cancellationText
          }, void 0, false, {
            fileName: _jsxFileName$10,
            lineNumber: 169,
            columnNumber: 545
          }, this), /* @__PURE__ */ jsxDEV(Button$1, {
            color: "primary",
            disabled: confirmationButtonDisabled,
            ...confirmationButtonProps,
            onClick: onConfirm,
            children: confirmationText
          }, void 0, false, {
            fileName: _jsxFileName$10,
            lineNumber: 171,
            columnNumber: 39
          }, this)]
        }, void 0, true, {
          fileName: _jsxFileName$10,
          lineNumber: 169,
          columnNumber: 477
        }, this)]
      }, void 0, true, {
        fileName: _jsxFileName$10,
        lineNumber: 164,
        columnNumber: 23
      }, this);
    };
    var DEFAULT_OPTIONS = {
      title: "Are you sure?",
      description: "",
      content: null,
      confirmationText: "Ok",
      cancellationText: "Cancel",
      dialogProps: {},
      dialogActionsProps: {},
      confirmationButtonProps: {},
      cancellationButtonProps: {},
      titleProps: {},
      contentProps: {},
      allowClose: true,
      confirmationKeywordTextFieldProps: {}
    };
    var buildOptions = function buildOptions2(defaultOptions, options) {
      var dialogProps = _objectSpread2(_objectSpread2({}, defaultOptions.dialogProps || DEFAULT_OPTIONS.dialogProps), options.dialogProps || {});
      var dialogActionsProps = _objectSpread2(_objectSpread2({}, defaultOptions.dialogActionsProps || DEFAULT_OPTIONS.dialogActionsProps), options.dialogActionsProps || {});
      var confirmationButtonProps = _objectSpread2(_objectSpread2({}, defaultOptions.confirmationButtonProps || DEFAULT_OPTIONS.confirmationButtonProps), options.confirmationButtonProps || {});
      var cancellationButtonProps = _objectSpread2(_objectSpread2({}, defaultOptions.cancellationButtonProps || DEFAULT_OPTIONS.cancellationButtonProps), options.cancellationButtonProps || {});
      var titleProps = _objectSpread2(_objectSpread2({}, defaultOptions.titleProps || DEFAULT_OPTIONS.titleProps), options.titleProps || {});
      var contentProps = _objectSpread2(_objectSpread2({}, defaultOptions.contentProps || DEFAULT_OPTIONS.contentProps), options.contentProps || {});
      var confirmationKeywordTextFieldProps = _objectSpread2(_objectSpread2({}, defaultOptions.confirmationKeywordTextFieldProps || DEFAULT_OPTIONS.confirmationKeywordTextFieldProps), options.confirmationKeywordTextFieldProps || {});
      return _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, DEFAULT_OPTIONS), defaultOptions), options), {}, {
        dialogProps,
        dialogActionsProps,
        confirmationButtonProps,
        cancellationButtonProps,
        titleProps,
        contentProps,
        confirmationKeywordTextFieldProps
      });
    };
    var ConfirmProvider = function ConfirmProvider2(_ref) {
      var children = _ref.children, _ref$defaultOptions = _ref.defaultOptions, defaultOptions = _ref$defaultOptions === void 0 ? {} : _ref$defaultOptions;
      var _useState = react.exports.useState({}), _useState2 = _slicedToArray$1(_useState, 2), options = _useState2[0], setOptions = _useState2[1];
      var _useState3 = react.exports.useState([]), _useState4 = _slicedToArray$1(_useState3, 2), resolveReject = _useState4[0], setResolveReject = _useState4[1];
      var _resolveReject = _slicedToArray$1(resolveReject, 2), resolve = _resolveReject[0], reject = _resolveReject[1];
      var confirm2 = react.exports.useCallback(function() {
        var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        return new Promise(function(resolve2, reject2) {
          setOptions(options2);
          setResolveReject([resolve2, reject2]);
        });
      }, []);
      var handleClose = react.exports.useCallback(function() {
        setResolveReject([]);
      }, []);
      var handleCancel = react.exports.useCallback(function() {
        if (reject) {
          reject();
          handleClose();
        }
      }, [reject, handleClose]);
      var handleConfirm = react.exports.useCallback(function() {
        if (resolve) {
          resolve();
          handleClose();
        }
      }, [resolve, handleClose]);
      return /* @__PURE__ */ jsxDEV(react.exports.Fragment, {
        children: [/* @__PURE__ */ jsxDEV(ConfirmContext.Provider, {
          value: confirm2,
          children
        }, void 0, false, {
          fileName: _jsxFileName$10,
          lineNumber: 262,
          columnNumber: 72
        }, this), /* @__PURE__ */ jsxDEV(ConfirmationDialog, {
          open: resolveReject.length === 2,
          options: buildOptions(defaultOptions, options),
          onClose: handleClose,
          onCancel: handleCancel,
          onConfirm: handleConfirm
        }, void 0, false, {
          fileName: _jsxFileName$10,
          lineNumber: 264,
          columnNumber: 30
        }, this)]
      }, void 0, true, {
        fileName: _jsxFileName$10,
        lineNumber: 262,
        columnNumber: 23
      }, this);
    };
    var useConfirm = function useConfirm2() {
      var confirm2 = react.exports.useContext(ConfirmContext);
      return confirm2;
    };
    const getPickersLocalization = (pickersTranslations) => {
      return {
        components: {
          MuiLocalizationProvider: {
            defaultProps: {
              localeText: _extends$1({}, pickersTranslations)
            }
          }
        }
      };
    };
    const enUSPickers = {
      previousMonth: "Previous month",
      nextMonth: "Next month",
      openPreviousView: "open previous view",
      openNextView: "open next view",
      calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "year view is open, switch to calendar view" : "calendar view is open, switch to year view",
      inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `text input view is open, go to ${viewType} view` : `${viewType} view is open, go to text input view`,
      start: "Start",
      end: "End",
      cancelButtonLabel: "Cancel",
      clearButtonLabel: "Clear",
      okButtonLabel: "OK",
      todayButtonLabel: "Today",
      datePickerDefaultToolbarTitle: "Select date",
      dateTimePickerDefaultToolbarTitle: "Select date & time",
      timePickerDefaultToolbarTitle: "Select time",
      dateRangePickerDefaultToolbarTitle: "Select date range",
      clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? "No time selected" : `Selected time is ${adapter.format(time, "fullTime")}`}`,
      hoursClockNumberText: (hours2) => `${hours2} hours`,
      minutesClockNumberText: (minutes2) => `${minutes2} minutes`,
      secondsClockNumberText: (seconds2) => `${seconds2} seconds`,
      openDatePickerDialogue: (rawValue, utils2) => rawValue && utils2.isValid(utils2.date(rawValue)) ? `Choose date, selected date is ${utils2.format(utils2.date(rawValue), "fullDate")}` : "Choose date",
      openTimePickerDialogue: (rawValue, utils2) => rawValue && utils2.isValid(utils2.date(rawValue)) ? `Choose time, selected time is ${utils2.format(utils2.date(rawValue), "fullTime")}` : "Choose time",
      timeTableLabel: "pick time",
      dateTableLabel: "pick date"
    };
    const DEFAULT_LOCALE = enUSPickers;
    getPickersLocalization(enUSPickers);
    const MuiPickersAdapterContext = /* @__PURE__ */ react.exports.createContext(null);
    {
      MuiPickersAdapterContext.displayName = "MuiPickersAdapterContext";
    }
    let warnedOnce = false;
    function LocalizationProvider(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiLocalizationProvider"
      });
      const {
        children,
        dateAdapter: Utils2,
        dateFormats,
        dateLibInstance,
        locale: locale2,
        adapterLocale,
        localeText
      } = props;
      {
        if (!warnedOnce && locale2 !== void 0) {
          warnedOnce = true;
          console.warn("LocalizationProvider's prop `locale` is deprecated and replaced by `adapterLocale`");
        }
      }
      const utils2 = react.exports.useMemo(() => new Utils2({
        locale: adapterLocale != null ? adapterLocale : locale2,
        formats: dateFormats,
        instance: dateLibInstance
      }), [Utils2, locale2, adapterLocale, dateFormats, dateLibInstance]);
      const defaultDates = react.exports.useMemo(() => {
        return {
          minDate: utils2.date("1900-01-01T00:00:00.000"),
          maxDate: utils2.date("2099-12-31T00:00:00.000")
        };
      }, [utils2]);
      const contextValue = react.exports.useMemo(() => {
        return {
          utils: utils2,
          defaultDates,
          localeText: _extends$1({}, DEFAULT_LOCALE, localeText != null ? localeText : {})
        };
      }, [defaultDates, utils2, localeText]);
      return /* @__PURE__ */ jsx(MuiPickersAdapterContext.Provider, {
        value: contextValue,
        children
      });
    }
    LocalizationProvider.propTypes = {
      adapterLocale: propTypes.exports.oneOfType([propTypes.exports.object, propTypes.exports.string]),
      children: propTypes.exports.node,
      dateAdapter: propTypes.exports.func.isRequired,
      dateFormats: propTypes.exports.shape({
        dayOfMonth: propTypes.exports.string,
        fullDate: propTypes.exports.string,
        fullDateTime: propTypes.exports.string,
        fullDateTime12h: propTypes.exports.string,
        fullDateTime24h: propTypes.exports.string,
        fullDateWithWeekday: propTypes.exports.string,
        fullTime: propTypes.exports.string,
        fullTime12h: propTypes.exports.string,
        fullTime24h: propTypes.exports.string,
        hours12h: propTypes.exports.string,
        hours24h: propTypes.exports.string,
        keyboardDate: propTypes.exports.string,
        keyboardDateTime: propTypes.exports.string,
        keyboardDateTime12h: propTypes.exports.string,
        keyboardDateTime24h: propTypes.exports.string,
        minutes: propTypes.exports.string,
        month: propTypes.exports.string,
        monthAndDate: propTypes.exports.string,
        monthAndYear: propTypes.exports.string,
        monthShort: propTypes.exports.string,
        normalDate: propTypes.exports.string,
        normalDateWithWeekday: propTypes.exports.string,
        seconds: propTypes.exports.string,
        shortDate: propTypes.exports.string,
        weekday: propTypes.exports.string,
        weekdayShort: propTypes.exports.string,
        year: propTypes.exports.string
      }),
      dateLibInstance: propTypes.exports.any,
      locale: propTypes.exports.oneOfType([propTypes.exports.object, propTypes.exports.string]),
      localeText: propTypes.exports.object
    };
    //! moment.js
    //! version : 2.29.4
    //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
    //! license : MIT
    //! momentjs.com
    var hookCallback;
    function hooks() {
      return hookCallback.apply(null, arguments);
    }
    function setHookCallback(callback) {
      hookCallback = callback;
    }
    function isArray$c(input) {
      return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
    }
    function isObject$h(input) {
      return input != null && Object.prototype.toString.call(input) === "[object Object]";
    }
    function hasOwnProp(a, b) {
      return Object.prototype.hasOwnProperty.call(a, b);
    }
    function isObjectEmpty(obj) {
      if (Object.getOwnPropertyNames) {
        return Object.getOwnPropertyNames(obj).length === 0;
      } else {
        var k;
        for (k in obj) {
          if (hasOwnProp(obj, k)) {
            return false;
          }
        }
        return true;
      }
    }
    function isUndefined(input) {
      return input === void 0;
    }
    function isNumber(input) {
      return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
    }
    function isDate$1(input) {
      return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
    }
    function map(arr, fn) {
      var res = [], i, arrLen = arr.length;
      for (i = 0; i < arrLen; ++i) {
        res.push(fn(arr[i], i));
      }
      return res;
    }
    function extend(a, b) {
      for (var i in b) {
        if (hasOwnProp(b, i)) {
          a[i] = b[i];
        }
      }
      if (hasOwnProp(b, "toString")) {
        a.toString = b.toString;
      }
      if (hasOwnProp(b, "valueOf")) {
        a.valueOf = b.valueOf;
      }
      return a;
    }
    function createUTC(input, format2, locale2, strict) {
      return createLocalOrUTC(input, format2, locale2, strict, true).utc();
    }
    function defaultParsingFlags() {
      return {
        empty: false,
        unusedTokens: [],
        unusedInput: [],
        overflow: -2,
        charsLeftOver: 0,
        nullInput: false,
        invalidEra: null,
        invalidMonth: null,
        invalidFormat: false,
        userInvalidated: false,
        iso: false,
        parsedDateParts: [],
        era: null,
        meridiem: null,
        rfc2822: false,
        weekdayMismatch: false
      };
    }
    function getParsingFlags(m) {
      if (m._pf == null) {
        m._pf = defaultParsingFlags();
      }
      return m._pf;
    }
    var some;
    if (Array.prototype.some) {
      some = Array.prototype.some;
    } else {
      some = function(fun) {
        var t = Object(this), len = t.length >>> 0, i;
        for (i = 0; i < len; i++) {
          if (i in t && fun.call(this, t[i], i, t)) {
            return true;
          }
        }
        return false;
      };
    }
    function isValid(m) {
      if (m._isValid == null) {
        var flags = getParsingFlags(m), parsedParts = some.call(flags.parsedDateParts, function(i) {
          return i != null;
        }), isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
        if (m._strict) {
          isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
        }
        if (Object.isFrozen == null || !Object.isFrozen(m)) {
          m._isValid = isNowValid;
        } else {
          return isNowValid;
        }
      }
      return m._isValid;
    }
    function createInvalid(flags) {
      var m = createUTC(NaN);
      if (flags != null) {
        extend(getParsingFlags(m), flags);
      } else {
        getParsingFlags(m).userInvalidated = true;
      }
      return m;
    }
    var momentProperties = hooks.momentProperties = [], updateInProgress = false;
    function copyConfig(to2, from2) {
      var i, prop, val, momentPropertiesLen = momentProperties.length;
      if (!isUndefined(from2._isAMomentObject)) {
        to2._isAMomentObject = from2._isAMomentObject;
      }
      if (!isUndefined(from2._i)) {
        to2._i = from2._i;
      }
      if (!isUndefined(from2._f)) {
        to2._f = from2._f;
      }
      if (!isUndefined(from2._l)) {
        to2._l = from2._l;
      }
      if (!isUndefined(from2._strict)) {
        to2._strict = from2._strict;
      }
      if (!isUndefined(from2._tzm)) {
        to2._tzm = from2._tzm;
      }
      if (!isUndefined(from2._isUTC)) {
        to2._isUTC = from2._isUTC;
      }
      if (!isUndefined(from2._offset)) {
        to2._offset = from2._offset;
      }
      if (!isUndefined(from2._pf)) {
        to2._pf = getParsingFlags(from2);
      }
      if (!isUndefined(from2._locale)) {
        to2._locale = from2._locale;
      }
      if (momentPropertiesLen > 0) {
        for (i = 0; i < momentPropertiesLen; i++) {
          prop = momentProperties[i];
          val = from2[prop];
          if (!isUndefined(val)) {
            to2[prop] = val;
          }
        }
      }
      return to2;
    }
    function Moment(config2) {
      copyConfig(this, config2);
      this._d = new Date(config2._d != null ? config2._d.getTime() : NaN);
      if (!this.isValid()) {
        this._d = new Date(NaN);
      }
      if (updateInProgress === false) {
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
      }
    }
    function isMoment(obj) {
      return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }
    function warn(msg) {
      if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
        console.warn("Deprecation warning: " + msg);
      }
    }
    function deprecate(msg, fn) {
      var firstTime = true;
      return extend(function() {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(null, msg);
        }
        if (firstTime) {
          var args = [], arg, i, key, argLen = arguments.length;
          for (i = 0; i < argLen; i++) {
            arg = "";
            if (typeof arguments[i] === "object") {
              arg += "\n[" + i + "] ";
              for (key in arguments[0]) {
                if (hasOwnProp(arguments[0], key)) {
                  arg += key + ": " + arguments[0][key] + ", ";
                }
              }
              arg = arg.slice(0, -2);
            } else {
              arg = arguments[i];
            }
            args.push(arg);
          }
          warn(
            msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack
          );
          firstTime = false;
        }
        return fn.apply(this, arguments);
      }, fn);
    }
    var deprecations = {};
    function deprecateSimple(name, msg) {
      if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(name, msg);
      }
      if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true;
      }
    }
    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;
    function isFunction$4(input) {
      return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
    }
    function set(config2) {
      var prop, i;
      for (i in config2) {
        if (hasOwnProp(config2, i)) {
          prop = config2[i];
          if (isFunction$4(prop)) {
            this[i] = prop;
          } else {
            this["_" + i] = prop;
          }
        }
      }
      this._config = config2;
      this._dayOfMonthOrdinalParseLenient = new RegExp(
        (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
      );
    }
    function mergeConfigs(parentConfig, childConfig) {
      var res = extend({}, parentConfig), prop;
      for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
          if (isObject$h(parentConfig[prop]) && isObject$h(childConfig[prop])) {
            res[prop] = {};
            extend(res[prop], parentConfig[prop]);
            extend(res[prop], childConfig[prop]);
          } else if (childConfig[prop] != null) {
            res[prop] = childConfig[prop];
          } else {
            delete res[prop];
          }
        }
      }
      for (prop in parentConfig) {
        if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject$h(parentConfig[prop])) {
          res[prop] = extend({}, res[prop]);
        }
      }
      return res;
    }
    function Locale(config2) {
      if (config2 != null) {
        this.set(config2);
      }
    }
    var keys$6;
    if (Object.keys) {
      keys$6 = Object.keys;
    } else {
      keys$6 = function(obj) {
        var i, res = [];
        for (i in obj) {
          if (hasOwnProp(obj, i)) {
            res.push(i);
          }
        }
        return res;
      };
    }
    var defaultCalendar = {
      sameDay: "[Today at] LT",
      nextDay: "[Tomorrow at] LT",
      nextWeek: "dddd [at] LT",
      lastDay: "[Yesterday at] LT",
      lastWeek: "[Last] dddd [at] LT",
      sameElse: "L"
    };
    function calendar(key, mom, now2) {
      var output = this._calendar[key] || this._calendar["sameElse"];
      return isFunction$4(output) ? output.call(mom, now2) : output;
    }
    function zeroFill(number, targetLength, forceSign) {
      var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
      return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }
    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
    function addFormatToken(token2, padded, ordinal2, callback) {
      var func = callback;
      if (typeof callback === "string") {
        func = function() {
          return this[callback]();
        };
      }
      if (token2) {
        formatTokenFunctions[token2] = func;
      }
      if (padded) {
        formatTokenFunctions[padded[0]] = function() {
          return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
      }
      if (ordinal2) {
        formatTokenFunctions[ordinal2] = function() {
          return this.localeData().ordinal(
            func.apply(this, arguments),
            token2
          );
        };
      }
    }
    function removeFormattingTokens(input) {
      if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, "");
      }
      return input.replace(/\\/g, "");
    }
    function makeFormatFunction(format2) {
      var array = format2.match(formattingTokens), i, length2;
      for (i = 0, length2 = array.length; i < length2; i++) {
        if (formatTokenFunctions[array[i]]) {
          array[i] = formatTokenFunctions[array[i]];
        } else {
          array[i] = removeFormattingTokens(array[i]);
        }
      }
      return function(mom) {
        var output = "", i2;
        for (i2 = 0; i2 < length2; i2++) {
          output += isFunction$4(array[i2]) ? array[i2].call(mom, format2) : array[i2];
        }
        return output;
      };
    }
    function formatMoment(m, format2) {
      if (!m.isValid()) {
        return m.localeData().invalidDate();
      }
      format2 = expandFormat(format2, m.localeData());
      formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
      return formatFunctions[format2](m);
    }
    function expandFormat(format2, locale2) {
      var i = 5;
      function replaceLongDateFormatTokens(input) {
        return locale2.longDateFormat(input) || input;
      }
      localFormattingTokens.lastIndex = 0;
      while (i >= 0 && localFormattingTokens.test(format2)) {
        format2 = format2.replace(
          localFormattingTokens,
          replaceLongDateFormatTokens
        );
        localFormattingTokens.lastIndex = 0;
        i -= 1;
      }
      return format2;
    }
    var defaultLongDateFormat = {
      LTS: "h:mm:ss A",
      LT: "h:mm A",
      L: "MM/DD/YYYY",
      LL: "MMMM D, YYYY",
      LLL: "MMMM D, YYYY h:mm A",
      LLLL: "dddd, MMMM D, YYYY h:mm A"
    };
    function longDateFormat(key) {
      var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
      if (format2 || !formatUpper) {
        return format2;
      }
      this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
        if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
          return tok.slice(1);
        }
        return tok;
      }).join("");
      return this._longDateFormat[key];
    }
    var defaultInvalidDate = "Invalid date";
    function invalidDate() {
      return this._invalidDate;
    }
    var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
    function ordinal(number) {
      return this._ordinal.replace("%d", number);
    }
    var defaultRelativeTime = {
      future: "in %s",
      past: "%s ago",
      s: "a few seconds",
      ss: "%d seconds",
      m: "a minute",
      mm: "%d minutes",
      h: "an hour",
      hh: "%d hours",
      d: "a day",
      dd: "%d days",
      w: "a week",
      ww: "%d weeks",
      M: "a month",
      MM: "%d months",
      y: "a year",
      yy: "%d years"
    };
    function relativeTime(number, withoutSuffix, string, isFuture) {
      var output = this._relativeTime[string];
      return isFunction$4(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }
    function pastFuture(diff2, output) {
      var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
      return isFunction$4(format2) ? format2(output) : format2.replace(/%s/i, output);
    }
    var aliases = {};
    function addUnitAlias(unit, shorthand) {
      var lowerCase = unit.toLowerCase();
      aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
    }
    function normalizeUnits(units) {
      return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
    }
    function normalizeObjectUnits(inputObject) {
      var normalizedInput = {}, normalizedProp, prop;
      for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
          normalizedProp = normalizeUnits(prop);
          if (normalizedProp) {
            normalizedInput[normalizedProp] = inputObject[prop];
          }
        }
      }
      return normalizedInput;
    }
    var priorities = {};
    function addUnitPriority(unit, priority) {
      priorities[unit] = priority;
    }
    function getPrioritizedUnits(unitsObj) {
      var units = [], u;
      for (u in unitsObj) {
        if (hasOwnProp(unitsObj, u)) {
          units.push({ unit: u, priority: priorities[u] });
        }
      }
      units.sort(function(a, b) {
        return a.priority - b.priority;
      });
      return units;
    }
    function isLeapYear(year) {
      return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }
    function absFloor(number) {
      if (number < 0) {
        return Math.ceil(number) || 0;
      } else {
        return Math.floor(number);
      }
    }
    function toInt(argumentForCoercion) {
      var coercedNumber = +argumentForCoercion, value2 = 0;
      if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value2 = absFloor(coercedNumber);
      }
      return value2;
    }
    function makeGetSet(unit, keepTime) {
      return function(value2) {
        if (value2 != null) {
          set$1(this, unit, value2);
          hooks.updateOffset(this, keepTime);
          return this;
        } else {
          return get$2(this, unit);
        }
      };
    }
    function get$2(mom, unit) {
      return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
    }
    function set$1(mom, unit, value2) {
      if (mom.isValid() && !isNaN(value2)) {
        if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
          value2 = toInt(value2);
          mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](
            value2,
            mom.month(),
            daysInMonth(value2, mom.month())
          );
        } else {
          mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value2);
        }
      }
    }
    function stringGet(units) {
      units = normalizeUnits(units);
      if (isFunction$4(this[units])) {
        return this[units]();
      }
      return this;
    }
    function stringSet(units, value2) {
      if (typeof units === "object") {
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units), i, prioritizedLen = prioritized.length;
        for (i = 0; i < prioritizedLen; i++) {
          this[prioritized[i].unit](units[prioritized[i].unit]);
        }
      } else {
        units = normalizeUnits(units);
        if (isFunction$4(this[units])) {
          return this[units](value2);
        }
      }
      return this;
    }
    var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
    regexes = {};
    function addRegexToken(token2, regex, strictRegex) {
      regexes[token2] = isFunction$4(regex) ? regex : function(isStrict, localeData2) {
        return isStrict && strictRegex ? strictRegex : regex;
      };
    }
    function getParseRegexForToken(token2, config2) {
      if (!hasOwnProp(regexes, token2)) {
        return new RegExp(unescapeFormat(token2));
      }
      return regexes[token2](config2._strict, config2._locale);
    }
    function unescapeFormat(s) {
      return regexEscape(
        s.replace("\\", "").replace(
          /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
          function(matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
          }
        )
      );
    }
    function regexEscape(s) {
      return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
    }
    var tokens = {};
    function addParseToken(token2, callback) {
      var i, func = callback, tokenLen;
      if (typeof token2 === "string") {
        token2 = [token2];
      }
      if (isNumber(callback)) {
        func = function(input, array) {
          array[callback] = toInt(input);
        };
      }
      tokenLen = token2.length;
      for (i = 0; i < tokenLen; i++) {
        tokens[token2[i]] = func;
      }
    }
    function addWeekParseToken(token2, callback) {
      addParseToken(token2, function(input, array, config2, token3) {
        config2._w = config2._w || {};
        callback(input, config2._w, config2, token3);
      });
    }
    function addTimeToArrayFromToken(token2, input, config2) {
      if (input != null && hasOwnProp(tokens, token2)) {
        tokens[token2](input, config2._a, config2, token2);
      }
    }
    var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
    function mod(n, x) {
      return (n % x + x) % x;
    }
    var indexOf;
    if (Array.prototype.indexOf) {
      indexOf = Array.prototype.indexOf;
    } else {
      indexOf = function(o) {
        var i;
        for (i = 0; i < this.length; ++i) {
          if (this[i] === o) {
            return i;
          }
        }
        return -1;
      };
    }
    function daysInMonth(year, month) {
      if (isNaN(year) || isNaN(month)) {
        return NaN;
      }
      var modMonth = mod(month, 12);
      year += (month - modMonth) / 12;
      return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
    }
    addFormatToken("M", ["MM", 2], "Mo", function() {
      return this.month() + 1;
    });
    addFormatToken("MMM", 0, 0, function(format2) {
      return this.localeData().monthsShort(this, format2);
    });
    addFormatToken("MMMM", 0, 0, function(format2) {
      return this.localeData().months(this, format2);
    });
    addUnitAlias("month", "M");
    addUnitPriority("month", 8);
    addRegexToken("M", match1to2);
    addRegexToken("MM", match1to2, match2);
    addRegexToken("MMM", function(isStrict, locale2) {
      return locale2.monthsShortRegex(isStrict);
    });
    addRegexToken("MMMM", function(isStrict, locale2) {
      return locale2.monthsRegex(isStrict);
    });
    addParseToken(["M", "MM"], function(input, array) {
      array[MONTH] = toInt(input) - 1;
    });
    addParseToken(["MMM", "MMMM"], function(input, array, config2, token2) {
      var month = config2._locale.monthsParse(input, token2, config2._strict);
      if (month != null) {
        array[MONTH] = month;
      } else {
        getParsingFlags(config2).invalidMonth = input;
      }
    });
    var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split(
      "_"
    ), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
    function localeMonths(m, format2) {
      if (!m) {
        return isArray$c(this._months) ? this._months : this._months["standalone"];
      }
      return isArray$c(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m.month()];
    }
    function localeMonthsShort(m, format2) {
      if (!m) {
        return isArray$c(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
      }
      return isArray$c(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m.month()];
    }
    function handleStrictParse(monthName, format2, strict) {
      var i, ii, mom, llc = monthName.toLocaleLowerCase();
      if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i = 0; i < 12; ++i) {
          mom = createUTC([2e3, i]);
          this._shortMonthsParse[i] = this.monthsShort(
            mom,
            ""
          ).toLocaleLowerCase();
          this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
        }
      }
      if (strict) {
        if (format2 === "MMM") {
          ii = indexOf.call(this._shortMonthsParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._longMonthsParse, llc);
          return ii !== -1 ? ii : null;
        }
      } else {
        if (format2 === "MMM") {
          ii = indexOf.call(this._shortMonthsParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._longMonthsParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._longMonthsParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._shortMonthsParse, llc);
          return ii !== -1 ? ii : null;
        }
      }
    }
    function localeMonthsParse(monthName, format2, strict) {
      var i, mom, regex;
      if (this._monthsParseExact) {
        return handleStrictParse.call(this, monthName, format2, strict);
      }
      if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
      }
      for (i = 0; i < 12; i++) {
        mom = createUTC([2e3, i]);
        if (strict && !this._longMonthsParse[i]) {
          this._longMonthsParse[i] = new RegExp(
            "^" + this.months(mom, "").replace(".", "") + "$",
            "i"
          );
          this._shortMonthsParse[i] = new RegExp(
            "^" + this.monthsShort(mom, "").replace(".", "") + "$",
            "i"
          );
        }
        if (!strict && !this._monthsParse[i]) {
          regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
          this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
        }
        if (strict && format2 === "MMMM" && this._longMonthsParse[i].test(monthName)) {
          return i;
        } else if (strict && format2 === "MMM" && this._shortMonthsParse[i].test(monthName)) {
          return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
          return i;
        }
      }
    }
    function setMonth(mom, value2) {
      var dayOfMonth;
      if (!mom.isValid()) {
        return mom;
      }
      if (typeof value2 === "string") {
        if (/^\d+$/.test(value2)) {
          value2 = toInt(value2);
        } else {
          value2 = mom.localeData().monthsParse(value2);
          if (!isNumber(value2)) {
            return mom;
          }
        }
      }
      dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value2));
      mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value2, dayOfMonth);
      return mom;
    }
    function getSetMonth(value2) {
      if (value2 != null) {
        setMonth(this, value2);
        hooks.updateOffset(this, true);
        return this;
      } else {
        return get$2(this, "Month");
      }
    }
    function getDaysInMonth() {
      return daysInMonth(this.year(), this.month());
    }
    function monthsShortRegex(isStrict) {
      if (this._monthsParseExact) {
        if (!hasOwnProp(this, "_monthsRegex")) {
          computeMonthsParse.call(this);
        }
        if (isStrict) {
          return this._monthsShortStrictRegex;
        } else {
          return this._monthsShortRegex;
        }
      } else {
        if (!hasOwnProp(this, "_monthsShortRegex")) {
          this._monthsShortRegex = defaultMonthsShortRegex;
        }
        return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
      }
    }
    function monthsRegex(isStrict) {
      if (this._monthsParseExact) {
        if (!hasOwnProp(this, "_monthsRegex")) {
          computeMonthsParse.call(this);
        }
        if (isStrict) {
          return this._monthsStrictRegex;
        } else {
          return this._monthsRegex;
        }
      } else {
        if (!hasOwnProp(this, "_monthsRegex")) {
          this._monthsRegex = defaultMonthsRegex;
        }
        return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
      }
    }
    function computeMonthsParse() {
      function cmpLenRev(a, b) {
        return b.length - a.length;
      }
      var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
      for (i = 0; i < 12; i++) {
        mom = createUTC([2e3, i]);
        shortPieces.push(this.monthsShort(mom, ""));
        longPieces.push(this.months(mom, ""));
        mixedPieces.push(this.months(mom, ""));
        mixedPieces.push(this.monthsShort(mom, ""));
      }
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      for (i = 0; i < 12; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
      }
      for (i = 0; i < 24; i++) {
        mixedPieces[i] = regexEscape(mixedPieces[i]);
      }
      this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
      this._monthsShortRegex = this._monthsRegex;
      this._monthsStrictRegex = new RegExp(
        "^(" + longPieces.join("|") + ")",
        "i"
      );
      this._monthsShortStrictRegex = new RegExp(
        "^(" + shortPieces.join("|") + ")",
        "i"
      );
    }
    addFormatToken("Y", 0, 0, function() {
      var y = this.year();
      return y <= 9999 ? zeroFill(y, 4) : "+" + y;
    });
    addFormatToken(0, ["YY", 2], 0, function() {
      return this.year() % 100;
    });
    addFormatToken(0, ["YYYY", 4], 0, "year");
    addFormatToken(0, ["YYYYY", 5], 0, "year");
    addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
    addUnitAlias("year", "y");
    addUnitPriority("year", 1);
    addRegexToken("Y", matchSigned);
    addRegexToken("YY", match1to2, match2);
    addRegexToken("YYYY", match1to4, match4);
    addRegexToken("YYYYY", match1to6, match6);
    addRegexToken("YYYYYY", match1to6, match6);
    addParseToken(["YYYYY", "YYYYYY"], YEAR);
    addParseToken("YYYY", function(input, array) {
      array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken("YY", function(input, array) {
      array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken("Y", function(input, array) {
      array[YEAR] = parseInt(input, 10);
    });
    function daysInYear(year) {
      return isLeapYear(year) ? 366 : 365;
    }
    hooks.parseTwoDigitYear = function(input) {
      return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
    };
    var getSetYear = makeGetSet("FullYear", true);
    function getIsLeapYear() {
      return isLeapYear(this.year());
    }
    function createDate(y, m, d, h, M, s, ms) {
      var date;
      if (y < 100 && y >= 0) {
        date = new Date(y + 400, m, d, h, M, s, ms);
        if (isFinite(date.getFullYear())) {
          date.setFullYear(y);
        }
      } else {
        date = new Date(y, m, d, h, M, s, ms);
      }
      return date;
    }
    function createUTCDate(y) {
      var date, args;
      if (y < 100 && y >= 0) {
        args = Array.prototype.slice.call(arguments);
        args[0] = y + 400;
        date = new Date(Date.UTC.apply(null, args));
        if (isFinite(date.getUTCFullYear())) {
          date.setUTCFullYear(y);
        }
      } else {
        date = new Date(Date.UTC.apply(null, arguments));
      }
      return date;
    }
    function firstWeekOffset(year, dow, doy) {
      var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
      return -fwdlw + fwd - 1;
    }
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
      var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
      if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear;
      } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year);
      } else {
        resYear = year;
        resDayOfYear = dayOfYear;
      }
      return {
        year: resYear,
        dayOfYear: resDayOfYear
      };
    }
    function weekOfYear(mom, dow, doy) {
      var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
      if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy);
      } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1;
      } else {
        resYear = mom.year();
        resWeek = week;
      }
      return {
        week: resWeek,
        year: resYear
      };
    }
    function weeksInYear(year, dow, doy) {
      var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
      return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }
    addFormatToken("w", ["ww", 2], "wo", "week");
    addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
    addUnitAlias("week", "w");
    addUnitAlias("isoWeek", "W");
    addUnitPriority("week", 5);
    addUnitPriority("isoWeek", 5);
    addRegexToken("w", match1to2);
    addRegexToken("ww", match1to2, match2);
    addRegexToken("W", match1to2);
    addRegexToken("WW", match1to2, match2);
    addWeekParseToken(
      ["w", "ww", "W", "WW"],
      function(input, week, config2, token2) {
        week[token2.substr(0, 1)] = toInt(input);
      }
    );
    function localeWeek(mom) {
      return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }
    var defaultLocaleWeek = {
      dow: 0,
      doy: 6
    };
    function localeFirstDayOfWeek() {
      return this._week.dow;
    }
    function localeFirstDayOfYear() {
      return this._week.doy;
    }
    function getSetWeek(input) {
      var week = this.localeData().week(this);
      return input == null ? week : this.add((input - week) * 7, "d");
    }
    function getSetISOWeek(input) {
      var week = weekOfYear(this, 1, 4).week;
      return input == null ? week : this.add((input - week) * 7, "d");
    }
    addFormatToken("d", 0, "do", "day");
    addFormatToken("dd", 0, 0, function(format2) {
      return this.localeData().weekdaysMin(this, format2);
    });
    addFormatToken("ddd", 0, 0, function(format2) {
      return this.localeData().weekdaysShort(this, format2);
    });
    addFormatToken("dddd", 0, 0, function(format2) {
      return this.localeData().weekdays(this, format2);
    });
    addFormatToken("e", 0, 0, "weekday");
    addFormatToken("E", 0, 0, "isoWeekday");
    addUnitAlias("day", "d");
    addUnitAlias("weekday", "e");
    addUnitAlias("isoWeekday", "E");
    addUnitPriority("day", 11);
    addUnitPriority("weekday", 11);
    addUnitPriority("isoWeekday", 11);
    addRegexToken("d", match1to2);
    addRegexToken("e", match1to2);
    addRegexToken("E", match1to2);
    addRegexToken("dd", function(isStrict, locale2) {
      return locale2.weekdaysMinRegex(isStrict);
    });
    addRegexToken("ddd", function(isStrict, locale2) {
      return locale2.weekdaysShortRegex(isStrict);
    });
    addRegexToken("dddd", function(isStrict, locale2) {
      return locale2.weekdaysRegex(isStrict);
    });
    addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config2, token2) {
      var weekday = config2._locale.weekdaysParse(input, token2, config2._strict);
      if (weekday != null) {
        week.d = weekday;
      } else {
        getParsingFlags(config2).invalidWeekday = input;
      }
    });
    addWeekParseToken(["d", "e", "E"], function(input, week, config2, token2) {
      week[token2] = toInt(input);
    });
    function parseWeekday(input, locale2) {
      if (typeof input !== "string") {
        return input;
      }
      if (!isNaN(input)) {
        return parseInt(input, 10);
      }
      input = locale2.weekdaysParse(input);
      if (typeof input === "number") {
        return input;
      }
      return null;
    }
    function parseIsoWeekday(input, locale2) {
      if (typeof input === "string") {
        return locale2.weekdaysParse(input) % 7 || 7;
      }
      return isNaN(input) ? null : input;
    }
    function shiftWeekdays(ws, n) {
      return ws.slice(n, 7).concat(ws.slice(0, n));
    }
    var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
    function localeWeekdays(m, format2) {
      var weekdays = isArray$c(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
      return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
    }
    function localeWeekdaysShort(m) {
      return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }
    function localeWeekdaysMin(m) {
      return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }
    function handleStrictParse$1(weekdayName, format2, strict) {
      var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
      if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];
        for (i = 0; i < 7; ++i) {
          mom = createUTC([2e3, 1]).day(i);
          this._minWeekdaysParse[i] = this.weekdaysMin(
            mom,
            ""
          ).toLocaleLowerCase();
          this._shortWeekdaysParse[i] = this.weekdaysShort(
            mom,
            ""
          ).toLocaleLowerCase();
          this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
        }
      }
      if (strict) {
        if (format2 === "dddd") {
          ii = indexOf.call(this._weekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else if (format2 === "ddd") {
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._minWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        }
      } else {
        if (format2 === "dddd") {
          ii = indexOf.call(this._weekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._minWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else if (format2 === "ddd") {
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._weekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._minWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._minWeekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._weekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        }
      }
    }
    function localeWeekdaysParse(weekdayName, format2, strict) {
      var i, mom, regex;
      if (this._weekdaysParseExact) {
        return handleStrictParse$1.call(this, weekdayName, format2, strict);
      }
      if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
      }
      for (i = 0; i < 7; i++) {
        mom = createUTC([2e3, 1]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) {
          this._fullWeekdaysParse[i] = new RegExp(
            "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
            "i"
          );
          this._shortWeekdaysParse[i] = new RegExp(
            "^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$",
            "i"
          );
          this._minWeekdaysParse[i] = new RegExp(
            "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
            "i"
          );
        }
        if (!this._weekdaysParse[i]) {
          regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
          this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
        }
        if (strict && format2 === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) {
          return i;
        } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) {
          return i;
        } else if (strict && format2 === "dd" && this._minWeekdaysParse[i].test(weekdayName)) {
          return i;
        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
          return i;
        }
      }
    }
    function getSetDayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
      if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, "d");
      } else {
        return day;
      }
    }
    function getSetLocaleDayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
      return input == null ? weekday : this.add(input - weekday, "d");
    }
    function getSetISODayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      if (input != null) {
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
      } else {
        return this.day() || 7;
      }
    }
    function weekdaysRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysStrictRegex;
        } else {
          return this._weekdaysRegex;
        }
      } else {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          this._weekdaysRegex = defaultWeekdaysRegex;
        }
        return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
      }
    }
    function weekdaysShortRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysShortStrictRegex;
        } else {
          return this._weekdaysShortRegex;
        }
      } else {
        if (!hasOwnProp(this, "_weekdaysShortRegex")) {
          this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        }
        return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
      }
    }
    function weekdaysMinRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysMinStrictRegex;
        } else {
          return this._weekdaysMinRegex;
        }
      } else {
        if (!hasOwnProp(this, "_weekdaysMinRegex")) {
          this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        }
        return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
      }
    }
    function computeWeekdaysParse() {
      function cmpLenRev(a, b) {
        return b.length - a.length;
      }
      var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
      for (i = 0; i < 7; i++) {
        mom = createUTC([2e3, 1]).day(i);
        minp = regexEscape(this.weekdaysMin(mom, ""));
        shortp = regexEscape(this.weekdaysShort(mom, ""));
        longp = regexEscape(this.weekdays(mom, ""));
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
      }
      minPieces.sort(cmpLenRev);
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
      this._weekdaysShortRegex = this._weekdaysRegex;
      this._weekdaysMinRegex = this._weekdaysRegex;
      this._weekdaysStrictRegex = new RegExp(
        "^(" + longPieces.join("|") + ")",
        "i"
      );
      this._weekdaysShortStrictRegex = new RegExp(
        "^(" + shortPieces.join("|") + ")",
        "i"
      );
      this._weekdaysMinStrictRegex = new RegExp(
        "^(" + minPieces.join("|") + ")",
        "i"
      );
    }
    function hFormat() {
      return this.hours() % 12 || 12;
    }
    function kFormat() {
      return this.hours() || 24;
    }
    addFormatToken("H", ["HH", 2], 0, "hour");
    addFormatToken("h", ["hh", 2], 0, hFormat);
    addFormatToken("k", ["kk", 2], 0, kFormat);
    addFormatToken("hmm", 0, 0, function() {
      return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });
    addFormatToken("hmmss", 0, 0, function() {
      return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    addFormatToken("Hmm", 0, 0, function() {
      return "" + this.hours() + zeroFill(this.minutes(), 2);
    });
    addFormatToken("Hmmss", 0, 0, function() {
      return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    function meridiem(token2, lowercase) {
      addFormatToken(token2, 0, 0, function() {
        return this.localeData().meridiem(
          this.hours(),
          this.minutes(),
          lowercase
        );
      });
    }
    meridiem("a", true);
    meridiem("A", false);
    addUnitAlias("hour", "h");
    addUnitPriority("hour", 13);
    function matchMeridiem(isStrict, locale2) {
      return locale2._meridiemParse;
    }
    addRegexToken("a", matchMeridiem);
    addRegexToken("A", matchMeridiem);
    addRegexToken("H", match1to2);
    addRegexToken("h", match1to2);
    addRegexToken("k", match1to2);
    addRegexToken("HH", match1to2, match2);
    addRegexToken("hh", match1to2, match2);
    addRegexToken("kk", match1to2, match2);
    addRegexToken("hmm", match3to4);
    addRegexToken("hmmss", match5to6);
    addRegexToken("Hmm", match3to4);
    addRegexToken("Hmmss", match5to6);
    addParseToken(["H", "HH"], HOUR);
    addParseToken(["k", "kk"], function(input, array, config2) {
      var kInput = toInt(input);
      array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(["a", "A"], function(input, array, config2) {
      config2._isPm = config2._locale.isPM(input);
      config2._meridiem = input;
    });
    addParseToken(["h", "hh"], function(input, array, config2) {
      array[HOUR] = toInt(input);
      getParsingFlags(config2).bigHour = true;
    });
    addParseToken("hmm", function(input, array, config2) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
      getParsingFlags(config2).bigHour = true;
    });
    addParseToken("hmmss", function(input, array, config2) {
      var pos1 = input.length - 4, pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
      getParsingFlags(config2).bigHour = true;
    });
    addParseToken("Hmm", function(input, array, config2) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken("Hmmss", function(input, array, config2) {
      var pos1 = input.length - 4, pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
    });
    function localeIsPM(input) {
      return (input + "").toLowerCase().charAt(0) === "p";
    }
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
    function localeMeridiem(hours2, minutes2, isLower) {
      if (hours2 > 11) {
        return isLower ? "pm" : "PM";
      } else {
        return isLower ? "am" : "AM";
      }
    }
    var baseConfig = {
      calendar: defaultCalendar,
      longDateFormat: defaultLongDateFormat,
      invalidDate: defaultInvalidDate,
      ordinal: defaultOrdinal,
      dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
      relativeTime: defaultRelativeTime,
      months: defaultLocaleMonths,
      monthsShort: defaultLocaleMonthsShort,
      week: defaultLocaleWeek,
      weekdays: defaultLocaleWeekdays,
      weekdaysMin: defaultLocaleWeekdaysMin,
      weekdaysShort: defaultLocaleWeekdaysShort,
      meridiemParse: defaultLocaleMeridiemParse
    };
    var locales = {}, localeFamilies = {}, globalLocale;
    function commonPrefix(arr1, arr2) {
      var i, minl = Math.min(arr1.length, arr2.length);
      for (i = 0; i < minl; i += 1) {
        if (arr1[i] !== arr2[i]) {
          return i;
        }
      }
      return minl;
    }
    function normalizeLocale(key) {
      return key ? key.toLowerCase().replace("_", "-") : key;
    }
    function chooseLocale(names) {
      var i = 0, j, next2, locale2, split;
      while (i < names.length) {
        split = normalizeLocale(names[i]).split("-");
        j = split.length;
        next2 = normalizeLocale(names[i + 1]);
        next2 = next2 ? next2.split("-") : null;
        while (j > 0) {
          locale2 = loadLocale(split.slice(0, j).join("-"));
          if (locale2) {
            return locale2;
          }
          if (next2 && next2.length >= j && commonPrefix(split, next2) >= j - 1) {
            break;
          }
          j--;
        }
        i++;
      }
      return globalLocale;
    }
    function isLocaleNameSane(name) {
      return name.match("^[^/\\\\]*$") != null;
    }
    function loadLocale(name) {
      var oldLocale = null, aliasedRequire;
      if (locales[name] === void 0 && typeof module !== "undefined" && module && module.exports && isLocaleNameSane(name)) {
        try {
          oldLocale = globalLocale._abbr;
          aliasedRequire = require;
          aliasedRequire("./locale/" + name);
          getSetGlobalLocale(oldLocale);
        } catch (e) {
          locales[name] = null;
        }
      }
      return locales[name];
    }
    function getSetGlobalLocale(key, values2) {
      var data;
      if (key) {
        if (isUndefined(values2)) {
          data = getLocale(key);
        } else {
          data = defineLocale(key, values2);
        }
        if (data) {
          globalLocale = data;
        } else {
          if (typeof console !== "undefined" && console.warn) {
            console.warn(
              "Locale " + key + " not found. Did you forget to load it?"
            );
          }
        }
      }
      return globalLocale._abbr;
    }
    function defineLocale(name, config2) {
      if (config2 !== null) {
        var locale2, parentConfig = baseConfig;
        config2.abbr = name;
        if (locales[name] != null) {
          deprecateSimple(
            "defineLocaleOverride",
            "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
          );
          parentConfig = locales[name]._config;
        } else if (config2.parentLocale != null) {
          if (locales[config2.parentLocale] != null) {
            parentConfig = locales[config2.parentLocale]._config;
          } else {
            locale2 = loadLocale(config2.parentLocale);
            if (locale2 != null) {
              parentConfig = locale2._config;
            } else {
              if (!localeFamilies[config2.parentLocale]) {
                localeFamilies[config2.parentLocale] = [];
              }
              localeFamilies[config2.parentLocale].push({
                name,
                config: config2
              });
              return null;
            }
          }
        }
        locales[name] = new Locale(mergeConfigs(parentConfig, config2));
        if (localeFamilies[name]) {
          localeFamilies[name].forEach(function(x) {
            defineLocale(x.name, x.config);
          });
        }
        getSetGlobalLocale(name);
        return locales[name];
      } else {
        delete locales[name];
        return null;
      }
    }
    function updateLocale(name, config2) {
      if (config2 != null) {
        var locale2, tmpLocale, parentConfig = baseConfig;
        if (locales[name] != null && locales[name].parentLocale != null) {
          locales[name].set(mergeConfigs(locales[name]._config, config2));
        } else {
          tmpLocale = loadLocale(name);
          if (tmpLocale != null) {
            parentConfig = tmpLocale._config;
          }
          config2 = mergeConfigs(parentConfig, config2);
          if (tmpLocale == null) {
            config2.abbr = name;
          }
          locale2 = new Locale(config2);
          locale2.parentLocale = locales[name];
          locales[name] = locale2;
        }
        getSetGlobalLocale(name);
      } else {
        if (locales[name] != null) {
          if (locales[name].parentLocale != null) {
            locales[name] = locales[name].parentLocale;
            if (name === getSetGlobalLocale()) {
              getSetGlobalLocale(name);
            }
          } else if (locales[name] != null) {
            delete locales[name];
          }
        }
      }
      return locales[name];
    }
    function getLocale(key) {
      var locale2;
      if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
      }
      if (!key) {
        return globalLocale;
      }
      if (!isArray$c(key)) {
        locale2 = loadLocale(key);
        if (locale2) {
          return locale2;
        }
        key = [key];
      }
      return chooseLocale(key);
    }
    function listLocales() {
      return keys$6(locales);
    }
    function checkOverflow(m) {
      var overflow, a = m._a;
      if (a && getParsingFlags(m).overflow === -2) {
        overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
          overflow = DATE;
        }
        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
          overflow = WEEK;
        }
        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
          overflow = WEEKDAY;
        }
        getParsingFlags(m).overflow = overflow;
      }
      return m;
    }
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
      ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
      ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
      ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
      ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
      ["YYYY-DDD", /\d{4}-\d{3}/],
      ["YYYY-MM", /\d{4}-\d\d/, false],
      ["YYYYYYMMDD", /[+-]\d{10}/],
      ["YYYYMMDD", /\d{8}/],
      ["GGGG[W]WWE", /\d{4}W\d{3}/],
      ["GGGG[W]WW", /\d{4}W\d{2}/, false],
      ["YYYYDDD", /\d{7}/],
      ["YYYYMM", /\d{6}/, false],
      ["YYYY", /\d{4}/, false]
    ], isoTimes = [
      ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
      ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
      ["HH:mm:ss", /\d\d:\d\d:\d\d/],
      ["HH:mm", /\d\d:\d\d/],
      ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
      ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
      ["HHmmss", /\d\d\d\d\d\d/],
      ["HHmm", /\d\d\d\d/],
      ["HH", /\d\d/]
    ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
      UT: 0,
      GMT: 0,
      EDT: -4 * 60,
      EST: -5 * 60,
      CDT: -5 * 60,
      CST: -6 * 60,
      MDT: -6 * 60,
      MST: -7 * 60,
      PDT: -7 * 60,
      PST: -8 * 60
    };
    function configFromISO(config2) {
      var i, l, string = config2._i, match5 = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
      if (match5) {
        getParsingFlags(config2).iso = true;
        for (i = 0, l = isoDatesLen; i < l; i++) {
          if (isoDates[i][1].exec(match5[1])) {
            dateFormat = isoDates[i][0];
            allowTime = isoDates[i][2] !== false;
            break;
          }
        }
        if (dateFormat == null) {
          config2._isValid = false;
          return;
        }
        if (match5[3]) {
          for (i = 0, l = isoTimesLen; i < l; i++) {
            if (isoTimes[i][1].exec(match5[3])) {
              timeFormat = (match5[2] || " ") + isoTimes[i][0];
              break;
            }
          }
          if (timeFormat == null) {
            config2._isValid = false;
            return;
          }
        }
        if (!allowTime && timeFormat != null) {
          config2._isValid = false;
          return;
        }
        if (match5[4]) {
          if (tzRegex.exec(match5[4])) {
            tzFormat = "Z";
          } else {
            config2._isValid = false;
            return;
          }
        }
        config2._f = dateFormat + (timeFormat || "") + (tzFormat || "");
        configFromStringAndFormat(config2);
      } else {
        config2._isValid = false;
      }
    }
    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
      var result = [
        untruncateYear(yearStr),
        defaultLocaleMonthsShort.indexOf(monthStr),
        parseInt(dayStr, 10),
        parseInt(hourStr, 10),
        parseInt(minuteStr, 10)
      ];
      if (secondStr) {
        result.push(parseInt(secondStr, 10));
      }
      return result;
    }
    function untruncateYear(yearStr) {
      var year = parseInt(yearStr, 10);
      if (year <= 49) {
        return 2e3 + year;
      } else if (year <= 999) {
        return 1900 + year;
      }
      return year;
    }
    function preprocessRFC2822(s) {
      return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
    }
    function checkWeekday(weekdayStr, parsedInput, config2) {
      if (weekdayStr) {
        var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(
          parsedInput[0],
          parsedInput[1],
          parsedInput[2]
        ).getDay();
        if (weekdayProvided !== weekdayActual) {
          getParsingFlags(config2).weekdayMismatch = true;
          config2._isValid = false;
          return false;
        }
      }
      return true;
    }
    function calculateOffset(obsOffset, militaryOffset, numOffset) {
      if (obsOffset) {
        return obsOffsets[obsOffset];
      } else if (militaryOffset) {
        return 0;
      } else {
        var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
        return h * 60 + m;
      }
    }
    function configFromRFC2822(config2) {
      var match5 = rfc2822.exec(preprocessRFC2822(config2._i)), parsedArray;
      if (match5) {
        parsedArray = extractFromRFC2822Strings(
          match5[4],
          match5[3],
          match5[2],
          match5[5],
          match5[6],
          match5[7]
        );
        if (!checkWeekday(match5[1], parsedArray, config2)) {
          return;
        }
        config2._a = parsedArray;
        config2._tzm = calculateOffset(match5[8], match5[9], match5[10]);
        config2._d = createUTCDate.apply(null, config2._a);
        config2._d.setUTCMinutes(config2._d.getUTCMinutes() - config2._tzm);
        getParsingFlags(config2).rfc2822 = true;
      } else {
        config2._isValid = false;
      }
    }
    function configFromString(config2) {
      var matched = aspNetJsonRegex.exec(config2._i);
      if (matched !== null) {
        config2._d = new Date(+matched[1]);
        return;
      }
      configFromISO(config2);
      if (config2._isValid === false) {
        delete config2._isValid;
      } else {
        return;
      }
      configFromRFC2822(config2);
      if (config2._isValid === false) {
        delete config2._isValid;
      } else {
        return;
      }
      if (config2._strict) {
        config2._isValid = false;
      } else {
        hooks.createFromInputFallback(config2);
      }
    }
    hooks.createFromInputFallback = deprecate(
      "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
      function(config2) {
        config2._d = new Date(config2._i + (config2._useUTC ? " UTC" : ""));
      }
    );
    function defaults(a, b, c) {
      if (a != null) {
        return a;
      }
      if (b != null) {
        return b;
      }
      return c;
    }
    function currentDateArray(config2) {
      var nowValue = new Date(hooks.now());
      if (config2._useUTC) {
        return [
          nowValue.getUTCFullYear(),
          nowValue.getUTCMonth(),
          nowValue.getUTCDate()
        ];
      }
      return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }
    function configFromArray(config2) {
      var i, date, input = [], currentDate, expectedWeekday, yearToUse;
      if (config2._d) {
        return;
      }
      currentDate = currentDateArray(config2);
      if (config2._w && config2._a[DATE] == null && config2._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config2);
      }
      if (config2._dayOfYear != null) {
        yearToUse = defaults(config2._a[YEAR], currentDate[YEAR]);
        if (config2._dayOfYear > daysInYear(yearToUse) || config2._dayOfYear === 0) {
          getParsingFlags(config2)._overflowDayOfYear = true;
        }
        date = createUTCDate(yearToUse, 0, config2._dayOfYear);
        config2._a[MONTH] = date.getUTCMonth();
        config2._a[DATE] = date.getUTCDate();
      }
      for (i = 0; i < 3 && config2._a[i] == null; ++i) {
        config2._a[i] = input[i] = currentDate[i];
      }
      for (; i < 7; i++) {
        config2._a[i] = input[i] = config2._a[i] == null ? i === 2 ? 1 : 0 : config2._a[i];
      }
      if (config2._a[HOUR] === 24 && config2._a[MINUTE] === 0 && config2._a[SECOND] === 0 && config2._a[MILLISECOND] === 0) {
        config2._nextDay = true;
        config2._a[HOUR] = 0;
      }
      config2._d = (config2._useUTC ? createUTCDate : createDate).apply(
        null,
        input
      );
      expectedWeekday = config2._useUTC ? config2._d.getUTCDay() : config2._d.getDay();
      if (config2._tzm != null) {
        config2._d.setUTCMinutes(config2._d.getUTCMinutes() - config2._tzm);
      }
      if (config2._nextDay) {
        config2._a[HOUR] = 24;
      }
      if (config2._w && typeof config2._w.d !== "undefined" && config2._w.d !== expectedWeekday) {
        getParsingFlags(config2).weekdayMismatch = true;
      }
    }
    function dayOfYearFromWeekInfo(config2) {
      var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
      w = config2._w;
      if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;
        weekYear = defaults(
          w.GG,
          config2._a[YEAR],
          weekOfYear(createLocal(), 1, 4).year
        );
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
        if (weekday < 1 || weekday > 7) {
          weekdayOverflow = true;
        }
      } else {
        dow = config2._locale._week.dow;
        doy = config2._locale._week.doy;
        curWeek = weekOfYear(createLocal(), dow, doy);
        weekYear = defaults(w.gg, config2._a[YEAR], curWeek.year);
        week = defaults(w.w, curWeek.week);
        if (w.d != null) {
          weekday = w.d;
          if (weekday < 0 || weekday > 6) {
            weekdayOverflow = true;
          }
        } else if (w.e != null) {
          weekday = w.e + dow;
          if (w.e < 0 || w.e > 6) {
            weekdayOverflow = true;
          }
        } else {
          weekday = dow;
        }
      }
      if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config2)._overflowWeeks = true;
      } else if (weekdayOverflow != null) {
        getParsingFlags(config2)._overflowWeekday = true;
      } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config2._a[YEAR] = temp.year;
        config2._dayOfYear = temp.dayOfYear;
      }
    }
    hooks.ISO_8601 = function() {
    };
    hooks.RFC_2822 = function() {
    };
    function configFromStringAndFormat(config2) {
      if (config2._f === hooks.ISO_8601) {
        configFromISO(config2);
        return;
      }
      if (config2._f === hooks.RFC_2822) {
        configFromRFC2822(config2);
        return;
      }
      config2._a = [];
      getParsingFlags(config2).empty = true;
      var string = "" + config2._i, i, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
      tokens2 = expandFormat(config2._f, config2._locale).match(formattingTokens) || [];
      tokenLen = tokens2.length;
      for (i = 0; i < tokenLen; i++) {
        token2 = tokens2[i];
        parsedInput = (string.match(getParseRegexForToken(token2, config2)) || [])[0];
        if (parsedInput) {
          skipped = string.substr(0, string.indexOf(parsedInput));
          if (skipped.length > 0) {
            getParsingFlags(config2).unusedInput.push(skipped);
          }
          string = string.slice(
            string.indexOf(parsedInput) + parsedInput.length
          );
          totalParsedInputLength += parsedInput.length;
        }
        if (formatTokenFunctions[token2]) {
          if (parsedInput) {
            getParsingFlags(config2).empty = false;
          } else {
            getParsingFlags(config2).unusedTokens.push(token2);
          }
          addTimeToArrayFromToken(token2, parsedInput, config2);
        } else if (config2._strict && !parsedInput) {
          getParsingFlags(config2).unusedTokens.push(token2);
        }
      }
      getParsingFlags(config2).charsLeftOver = stringLength - totalParsedInputLength;
      if (string.length > 0) {
        getParsingFlags(config2).unusedInput.push(string);
      }
      if (config2._a[HOUR] <= 12 && getParsingFlags(config2).bigHour === true && config2._a[HOUR] > 0) {
        getParsingFlags(config2).bigHour = void 0;
      }
      getParsingFlags(config2).parsedDateParts = config2._a.slice(0);
      getParsingFlags(config2).meridiem = config2._meridiem;
      config2._a[HOUR] = meridiemFixWrap(
        config2._locale,
        config2._a[HOUR],
        config2._meridiem
      );
      era = getParsingFlags(config2).era;
      if (era !== null) {
        config2._a[YEAR] = config2._locale.erasConvertYear(era, config2._a[YEAR]);
      }
      configFromArray(config2);
      checkOverflow(config2);
    }
    function meridiemFixWrap(locale2, hour, meridiem2) {
      var isPm;
      if (meridiem2 == null) {
        return hour;
      }
      if (locale2.meridiemHour != null) {
        return locale2.meridiemHour(hour, meridiem2);
      } else if (locale2.isPM != null) {
        isPm = locale2.isPM(meridiem2);
        if (isPm && hour < 12) {
          hour += 12;
        }
        if (!isPm && hour === 12) {
          hour = 0;
        }
        return hour;
      } else {
        return hour;
      }
    }
    function configFromStringAndArray(config2) {
      var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config2._f.length;
      if (configfLen === 0) {
        getParsingFlags(config2).invalidFormat = true;
        config2._d = new Date(NaN);
        return;
      }
      for (i = 0; i < configfLen; i++) {
        currentScore = 0;
        validFormatFound = false;
        tempConfig = copyConfig({}, config2);
        if (config2._useUTC != null) {
          tempConfig._useUTC = config2._useUTC;
        }
        tempConfig._f = config2._f[i];
        configFromStringAndFormat(tempConfig);
        if (isValid(tempConfig)) {
          validFormatFound = true;
        }
        currentScore += getParsingFlags(tempConfig).charsLeftOver;
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
        getParsingFlags(tempConfig).score = currentScore;
        if (!bestFormatIsValid) {
          if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
            if (validFormatFound) {
              bestFormatIsValid = true;
            }
          }
        } else {
          if (currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
          }
        }
      }
      extend(config2, bestMoment || tempConfig);
    }
    function configFromObject(config2) {
      if (config2._d) {
        return;
      }
      var i = normalizeObjectUnits(config2._i), dayOrDate = i.day === void 0 ? i.date : i.day;
      config2._a = map(
        [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
        function(obj) {
          return obj && parseInt(obj, 10);
        }
      );
      configFromArray(config2);
    }
    function createFromConfig(config2) {
      var res = new Moment(checkOverflow(prepareConfig(config2)));
      if (res._nextDay) {
        res.add(1, "d");
        res._nextDay = void 0;
      }
      return res;
    }
    function prepareConfig(config2) {
      var input = config2._i, format2 = config2._f;
      config2._locale = config2._locale || getLocale(config2._l);
      if (input === null || format2 === void 0 && input === "") {
        return createInvalid({ nullInput: true });
      }
      if (typeof input === "string") {
        config2._i = input = config2._locale.preparse(input);
      }
      if (isMoment(input)) {
        return new Moment(checkOverflow(input));
      } else if (isDate$1(input)) {
        config2._d = input;
      } else if (isArray$c(format2)) {
        configFromStringAndArray(config2);
      } else if (format2) {
        configFromStringAndFormat(config2);
      } else {
        configFromInput(config2);
      }
      if (!isValid(config2)) {
        config2._d = null;
      }
      return config2;
    }
    function configFromInput(config2) {
      var input = config2._i;
      if (isUndefined(input)) {
        config2._d = new Date(hooks.now());
      } else if (isDate$1(input)) {
        config2._d = new Date(input.valueOf());
      } else if (typeof input === "string") {
        configFromString(config2);
      } else if (isArray$c(input)) {
        config2._a = map(input.slice(0), function(obj) {
          return parseInt(obj, 10);
        });
        configFromArray(config2);
      } else if (isObject$h(input)) {
        configFromObject(config2);
      } else if (isNumber(input)) {
        config2._d = new Date(input);
      } else {
        hooks.createFromInputFallback(config2);
      }
    }
    function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
      var c = {};
      if (format2 === true || format2 === false) {
        strict = format2;
        format2 = void 0;
      }
      if (locale2 === true || locale2 === false) {
        strict = locale2;
        locale2 = void 0;
      }
      if (isObject$h(input) && isObjectEmpty(input) || isArray$c(input) && input.length === 0) {
        input = void 0;
      }
      c._isAMomentObject = true;
      c._useUTC = c._isUTC = isUTC;
      c._l = locale2;
      c._i = input;
      c._f = format2;
      c._strict = strict;
      return createFromConfig(c);
    }
    function createLocal(input, format2, locale2, strict) {
      return createLocalOrUTC(input, format2, locale2, strict, false);
    }
    var prototypeMin = deprecate(
      "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
      function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other < this ? this : other;
        } else {
          return createInvalid();
        }
      }
    ), prototypeMax = deprecate(
      "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
      function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other > this ? this : other;
        } else {
          return createInvalid();
        }
      }
    );
    function pickBy$1(fn, moments) {
      var res, i;
      if (moments.length === 1 && isArray$c(moments[0])) {
        moments = moments[0];
      }
      if (!moments.length) {
        return createLocal();
      }
      res = moments[0];
      for (i = 1; i < moments.length; ++i) {
        if (!moments[i].isValid() || moments[i][fn](res)) {
          res = moments[i];
        }
      }
      return res;
    }
    function min() {
      var args = [].slice.call(arguments, 0);
      return pickBy$1("isBefore", args);
    }
    function max() {
      var args = [].slice.call(arguments, 0);
      return pickBy$1("isAfter", args);
    }
    var now$2 = function() {
      return Date.now ? Date.now() : +new Date();
    };
    var ordering = [
      "year",
      "quarter",
      "month",
      "week",
      "day",
      "hour",
      "minute",
      "second",
      "millisecond"
    ];
    function isDurationValid(m) {
      var key, unitHasDecimal = false, i, orderLen = ordering.length;
      for (key in m) {
        if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
          return false;
        }
      }
      for (i = 0; i < orderLen; ++i) {
        if (m[ordering[i]]) {
          if (unitHasDecimal) {
            return false;
          }
          if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
            unitHasDecimal = true;
          }
        }
      }
      return true;
    }
    function isValid$1() {
      return this._isValid;
    }
    function createInvalid$1() {
      return createDuration(NaN);
    }
    function Duration(duration2) {
      var normalizedInput = normalizeObjectUnits(duration2), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
      this._isValid = isDurationValid(normalizedInput);
      this._milliseconds = +milliseconds2 + seconds2 * 1e3 + minutes2 * 6e4 + hours2 * 1e3 * 60 * 60;
      this._days = +days2 + weeks2 * 7;
      this._months = +months2 + quarters * 3 + years2 * 12;
      this._data = {};
      this._locale = getLocale();
      this._bubble();
    }
    function isDuration(obj) {
      return obj instanceof Duration;
    }
    function absRound(number) {
      if (number < 0) {
        return Math.round(-1 * number) * -1;
      } else {
        return Math.round(number);
      }
    }
    function compareArrays(array1, array2, dontConvert) {
      var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
      for (i = 0; i < len; i++) {
        if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
          diffs++;
        }
      }
      return diffs + lengthDiff;
    }
    function offset(token2, separator) {
      addFormatToken(token2, 0, 0, function() {
        var offset2 = this.utcOffset(), sign2 = "+";
        if (offset2 < 0) {
          offset2 = -offset2;
          sign2 = "-";
        }
        return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
      });
    }
    offset("Z", ":");
    offset("ZZ", "");
    addRegexToken("Z", matchShortOffset);
    addRegexToken("ZZ", matchShortOffset);
    addParseToken(["Z", "ZZ"], function(input, array, config2) {
      config2._useUTC = true;
      config2._tzm = offsetFromString(matchShortOffset, input);
    });
    var chunkOffset = /([\+\-]|\d\d)/gi;
    function offsetFromString(matcher, string) {
      var matches = (string || "").match(matcher), chunk, parts, minutes2;
      if (matches === null) {
        return null;
      }
      chunk = matches[matches.length - 1] || [];
      parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
      minutes2 = +(parts[1] * 60) + toInt(parts[2]);
      return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
    }
    function cloneWithOffset(input, model) {
      var res, diff2;
      if (model._isUTC) {
        res = model.clone();
        diff2 = (isMoment(input) || isDate$1(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        res._d.setTime(res._d.valueOf() + diff2);
        hooks.updateOffset(res, false);
        return res;
      } else {
        return createLocal(input).local();
      }
    }
    function getDateOffset(m) {
      return -Math.round(m._d.getTimezoneOffset());
    }
    hooks.updateOffset = function() {
    };
    function getSetOffset(input, keepLocalTime, keepMinutes) {
      var offset2 = this._offset || 0, localAdjust;
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      if (input != null) {
        if (typeof input === "string") {
          input = offsetFromString(matchShortOffset, input);
          if (input === null) {
            return this;
          }
        } else if (Math.abs(input) < 16 && !keepMinutes) {
          input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
          localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
          this.add(localAdjust, "m");
        }
        if (offset2 !== input) {
          if (!keepLocalTime || this._changeInProgress) {
            addSubtract(
              this,
              createDuration(input - offset2, "m"),
              1,
              false
            );
          } else if (!this._changeInProgress) {
            this._changeInProgress = true;
            hooks.updateOffset(this, true);
            this._changeInProgress = null;
          }
        }
        return this;
      } else {
        return this._isUTC ? offset2 : getDateOffset(this);
      }
    }
    function getSetZone(input, keepLocalTime) {
      if (input != null) {
        if (typeof input !== "string") {
          input = -input;
        }
        this.utcOffset(input, keepLocalTime);
        return this;
      } else {
        return -this.utcOffset();
      }
    }
    function setOffsetToUTC(keepLocalTime) {
      return this.utcOffset(0, keepLocalTime);
    }
    function setOffsetToLocal(keepLocalTime) {
      if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;
        if (keepLocalTime) {
          this.subtract(getDateOffset(this), "m");
        }
      }
      return this;
    }
    function setOffsetToParsedOffset() {
      if (this._tzm != null) {
        this.utcOffset(this._tzm, false, true);
      } else if (typeof this._i === "string") {
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) {
          this.utcOffset(tZone);
        } else {
          this.utcOffset(0, true);
        }
      }
      return this;
    }
    function hasAlignedHourOffset(input) {
      if (!this.isValid()) {
        return false;
      }
      input = input ? createLocal(input).utcOffset() : 0;
      return (this.utcOffset() - input) % 60 === 0;
    }
    function isDaylightSavingTime() {
      return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }
    function isDaylightSavingTimeShifted() {
      if (!isUndefined(this._isDSTShifted)) {
        return this._isDSTShifted;
      }
      var c = {}, other;
      copyConfig(c, this);
      c = prepareConfig(c);
      if (c._a) {
        other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
        this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
      } else {
        this._isDSTShifted = false;
      }
      return this._isDSTShifted;
    }
    function isLocal() {
      return this.isValid() ? !this._isUTC : false;
    }
    function isUtcOffset() {
      return this.isValid() ? this._isUTC : false;
    }
    function isUtc() {
      return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    function createDuration(input, key) {
      var duration2 = input, match5 = null, sign2, ret, diffRes;
      if (isDuration(input)) {
        duration2 = {
          ms: input._milliseconds,
          d: input._days,
          M: input._months
        };
      } else if (isNumber(input) || !isNaN(+input)) {
        duration2 = {};
        if (key) {
          duration2[key] = +input;
        } else {
          duration2.milliseconds = +input;
        }
      } else if (match5 = aspNetRegex.exec(input)) {
        sign2 = match5[1] === "-" ? -1 : 1;
        duration2 = {
          y: 0,
          d: toInt(match5[DATE]) * sign2,
          h: toInt(match5[HOUR]) * sign2,
          m: toInt(match5[MINUTE]) * sign2,
          s: toInt(match5[SECOND]) * sign2,
          ms: toInt(absRound(match5[MILLISECOND] * 1e3)) * sign2
        };
      } else if (match5 = isoRegex.exec(input)) {
        sign2 = match5[1] === "-" ? -1 : 1;
        duration2 = {
          y: parseIso(match5[2], sign2),
          M: parseIso(match5[3], sign2),
          w: parseIso(match5[4], sign2),
          d: parseIso(match5[5], sign2),
          h: parseIso(match5[6], sign2),
          m: parseIso(match5[7], sign2),
          s: parseIso(match5[8], sign2)
        };
      } else if (duration2 == null) {
        duration2 = {};
      } else if (typeof duration2 === "object" && ("from" in duration2 || "to" in duration2)) {
        diffRes = momentsDifference(
          createLocal(duration2.from),
          createLocal(duration2.to)
        );
        duration2 = {};
        duration2.ms = diffRes.milliseconds;
        duration2.M = diffRes.months;
      }
      ret = new Duration(duration2);
      if (isDuration(input) && hasOwnProp(input, "_locale")) {
        ret._locale = input._locale;
      }
      if (isDuration(input) && hasOwnProp(input, "_isValid")) {
        ret._isValid = input._isValid;
      }
      return ret;
    }
    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;
    function parseIso(inp, sign2) {
      var res = inp && parseFloat(inp.replace(",", "."));
      return (isNaN(res) ? 0 : res) * sign2;
    }
    function positiveMomentsDifference(base, other) {
      var res = {};
      res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
      if (base.clone().add(res.months, "M").isAfter(other)) {
        --res.months;
      }
      res.milliseconds = +other - +base.clone().add(res.months, "M");
      return res;
    }
    function momentsDifference(base, other) {
      var res;
      if (!(base.isValid() && other.isValid())) {
        return { milliseconds: 0, months: 0 };
      }
      other = cloneWithOffset(other, base);
      if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
      } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
      }
      return res;
    }
    function createAdder(direction, name) {
      return function(val, period) {
        var dur, tmp;
        if (period !== null && !isNaN(+period)) {
          deprecateSimple(
            name,
            "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
          );
          tmp = val;
          val = period;
          period = tmp;
        }
        dur = createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
      };
    }
    function addSubtract(mom, duration2, isAdding, updateOffset) {
      var milliseconds2 = duration2._milliseconds, days2 = absRound(duration2._days), months2 = absRound(duration2._months);
      if (!mom.isValid()) {
        return;
      }
      updateOffset = updateOffset == null ? true : updateOffset;
      if (months2) {
        setMonth(mom, get$2(mom, "Month") + months2 * isAdding);
      }
      if (days2) {
        set$1(mom, "Date", get$2(mom, "Date") + days2 * isAdding);
      }
      if (milliseconds2) {
        mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
      }
      if (updateOffset) {
        hooks.updateOffset(mom, days2 || months2);
      }
    }
    var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
    function isString(input) {
      return typeof input === "string" || input instanceof String;
    }
    function isMomentInput(input) {
      return isMoment(input) || isDate$1(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
    }
    function isMomentInputObject(input) {
      var objectTest = isObject$h(input) && !isObjectEmpty(input), propertyTest = false, properties2 = [
        "years",
        "year",
        "y",
        "months",
        "month",
        "M",
        "days",
        "day",
        "d",
        "dates",
        "date",
        "D",
        "hours",
        "hour",
        "h",
        "minutes",
        "minute",
        "m",
        "seconds",
        "second",
        "s",
        "milliseconds",
        "millisecond",
        "ms"
      ], i, property2, propertyLen = properties2.length;
      for (i = 0; i < propertyLen; i += 1) {
        property2 = properties2[i];
        propertyTest = propertyTest || hasOwnProp(input, property2);
      }
      return objectTest && propertyTest;
    }
    function isNumberOrStringArray(input) {
      var arrayTest = isArray$c(input), dataTypeTest = false;
      if (arrayTest) {
        dataTypeTest = input.filter(function(item) {
          return !isNumber(item) && isString(input);
        }).length === 0;
      }
      return arrayTest && dataTypeTest;
    }
    function isCalendarSpec(input) {
      var objectTest = isObject$h(input) && !isObjectEmpty(input), propertyTest = false, properties2 = [
        "sameDay",
        "nextDay",
        "lastDay",
        "nextWeek",
        "lastWeek",
        "sameElse"
      ], i, property2;
      for (i = 0; i < properties2.length; i += 1) {
        property2 = properties2[i];
        propertyTest = propertyTest || hasOwnProp(input, property2);
      }
      return objectTest && propertyTest;
    }
    function getCalendarFormat(myMoment, now2) {
      var diff2 = myMoment.diff(now2, "days", true);
      return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
    }
    function calendar$1(time, formats) {
      if (arguments.length === 1) {
        if (!arguments[0]) {
          time = void 0;
          formats = void 0;
        } else if (isMomentInput(arguments[0])) {
          time = arguments[0];
          formats = void 0;
        } else if (isCalendarSpec(arguments[0])) {
          formats = arguments[0];
          time = void 0;
        }
      }
      var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction$4(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
      return this.format(
        output || this.localeData().calendar(format2, this, createLocal(now2))
      );
    }
    function clone$5() {
      return new Moment(this);
    }
    function isAfter(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || "millisecond";
      if (units === "millisecond") {
        return this.valueOf() > localInput.valueOf();
      } else {
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
      }
    }
    function isBefore(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || "millisecond";
      if (units === "millisecond") {
        return this.valueOf() < localInput.valueOf();
      } else {
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
      }
    }
    function isBetween(from2, to2, units, inclusivity) {
      var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
      if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
        return false;
      }
      inclusivity = inclusivity || "()";
      return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }
    function isSame(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input), inputMs;
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || "millisecond";
      if (units === "millisecond") {
        return this.valueOf() === localInput.valueOf();
      } else {
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
      }
    }
    function isSameOrAfter(input, units) {
      return this.isSame(input, units) || this.isAfter(input, units);
    }
    function isSameOrBefore(input, units) {
      return this.isSame(input, units) || this.isBefore(input, units);
    }
    function diff(input, units, asFloat) {
      var that, zoneDelta, output;
      if (!this.isValid()) {
        return NaN;
      }
      that = cloneWithOffset(input, this);
      if (!that.isValid()) {
        return NaN;
      }
      zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
      units = normalizeUnits(units);
      switch (units) {
        case "year":
          output = monthDiff(this, that) / 12;
          break;
        case "month":
          output = monthDiff(this, that);
          break;
        case "quarter":
          output = monthDiff(this, that) / 3;
          break;
        case "second":
          output = (this - that) / 1e3;
          break;
        case "minute":
          output = (this - that) / 6e4;
          break;
        case "hour":
          output = (this - that) / 36e5;
          break;
        case "day":
          output = (this - that - zoneDelta) / 864e5;
          break;
        case "week":
          output = (this - that - zoneDelta) / 6048e5;
          break;
        default:
          output = this - that;
      }
      return asFloat ? output : absFloor(output);
    }
    function monthDiff(a, b) {
      if (a.date() < b.date()) {
        return -monthDiff(b, a);
      }
      var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
      if (b - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
        adjust = (b - anchor) / (anchor - anchor2);
      } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
        adjust = (b - anchor) / (anchor2 - anchor);
      }
      return -(wholeMonthDiff + adjust) || 0;
    }
    hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
    hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
    function toString$3() {
      return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
    }
    function toISOString(keepOffset) {
      if (!this.isValid()) {
        return null;
      }
      var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
      if (m.year() < 0 || m.year() > 9999) {
        return formatMoment(
          m,
          utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
        );
      }
      if (isFunction$4(Date.prototype.toISOString)) {
        if (utc) {
          return this.toDate().toISOString();
        } else {
          return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m, "Z"));
        }
      }
      return formatMoment(
        m,
        utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
      );
    }
    function inspect() {
      if (!this.isValid()) {
        return "moment.invalid(/* " + this._i + " */)";
      }
      var func = "moment", zone = "", prefix2, year, datetime, suffix;
      if (!this.isLocal()) {
        func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
        zone = "Z";
      }
      prefix2 = "[" + func + '("]';
      year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
      datetime = "-MM-DD[T]HH:mm:ss.SSS";
      suffix = zone + '[")]';
      return this.format(prefix2 + year + datetime + suffix);
    }
    function format(inputString) {
      if (!inputString) {
        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
      }
      var output = formatMoment(this, inputString);
      return this.localeData().postformat(output);
    }
    function from(time, withoutSuffix) {
      if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
        return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
      } else {
        return this.localeData().invalidDate();
      }
    }
    function fromNow(withoutSuffix) {
      return this.from(createLocal(), withoutSuffix);
    }
    function to(time, withoutSuffix) {
      if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
        return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
      } else {
        return this.localeData().invalidDate();
      }
    }
    function toNow(withoutSuffix) {
      return this.to(createLocal(), withoutSuffix);
    }
    function locale(key) {
      var newLocaleData;
      if (key === void 0) {
        return this._locale._abbr;
      } else {
        newLocaleData = getLocale(key);
        if (newLocaleData != null) {
          this._locale = newLocaleData;
        }
        return this;
      }
    }
    var lang = deprecate(
      "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
      function(key) {
        if (key === void 0) {
          return this.localeData();
        } else {
          return this.locale(key);
        }
      }
    );
    function localeData() {
      return this._locale;
    }
    var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
    function mod$1(dividend, divisor) {
      return (dividend % divisor + divisor) % divisor;
    }
    function localStartOfDate(y, m, d) {
      if (y < 100 && y >= 0) {
        return new Date(y + 400, m, d) - MS_PER_400_YEARS;
      } else {
        return new Date(y, m, d).valueOf();
      }
    }
    function utcStartOfDate(y, m, d) {
      if (y < 100 && y >= 0) {
        return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
      } else {
        return Date.UTC(y, m, d);
      }
    }
    function startOf(units) {
      var time, startOfDate;
      units = normalizeUnits(units);
      if (units === void 0 || units === "millisecond" || !this.isValid()) {
        return this;
      }
      startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
      switch (units) {
        case "year":
          time = startOfDate(this.year(), 0, 1);
          break;
        case "quarter":
          time = startOfDate(
            this.year(),
            this.month() - this.month() % 3,
            1
          );
          break;
        case "month":
          time = startOfDate(this.year(), this.month(), 1);
          break;
        case "week":
          time = startOfDate(
            this.year(),
            this.month(),
            this.date() - this.weekday()
          );
          break;
        case "isoWeek":
          time = startOfDate(
            this.year(),
            this.month(),
            this.date() - (this.isoWeekday() - 1)
          );
          break;
        case "day":
        case "date":
          time = startOfDate(this.year(), this.month(), this.date());
          break;
        case "hour":
          time = this._d.valueOf();
          time -= mod$1(
            time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
            MS_PER_HOUR
          );
          break;
        case "minute":
          time = this._d.valueOf();
          time -= mod$1(time, MS_PER_MINUTE);
          break;
        case "second":
          time = this._d.valueOf();
          time -= mod$1(time, MS_PER_SECOND);
          break;
      }
      this._d.setTime(time);
      hooks.updateOffset(this, true);
      return this;
    }
    function endOf(units) {
      var time, startOfDate;
      units = normalizeUnits(units);
      if (units === void 0 || units === "millisecond" || !this.isValid()) {
        return this;
      }
      startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
      switch (units) {
        case "year":
          time = startOfDate(this.year() + 1, 0, 1) - 1;
          break;
        case "quarter":
          time = startOfDate(
            this.year(),
            this.month() - this.month() % 3 + 3,
            1
          ) - 1;
          break;
        case "month":
          time = startOfDate(this.year(), this.month() + 1, 1) - 1;
          break;
        case "week":
          time = startOfDate(
            this.year(),
            this.month(),
            this.date() - this.weekday() + 7
          ) - 1;
          break;
        case "isoWeek":
          time = startOfDate(
            this.year(),
            this.month(),
            this.date() - (this.isoWeekday() - 1) + 7
          ) - 1;
          break;
        case "day":
        case "date":
          time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
          break;
        case "hour":
          time = this._d.valueOf();
          time += MS_PER_HOUR - mod$1(
            time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
            MS_PER_HOUR
          ) - 1;
          break;
        case "minute":
          time = this._d.valueOf();
          time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
          break;
        case "second":
          time = this._d.valueOf();
          time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
          break;
      }
      this._d.setTime(time);
      hooks.updateOffset(this, true);
      return this;
    }
    function valueOf() {
      return this._d.valueOf() - (this._offset || 0) * 6e4;
    }
    function unix() {
      return Math.floor(this.valueOf() / 1e3);
    }
    function toDate() {
      return new Date(this.valueOf());
    }
    function toArray() {
      var m = this;
      return [
        m.year(),
        m.month(),
        m.date(),
        m.hour(),
        m.minute(),
        m.second(),
        m.millisecond()
      ];
    }
    function toObject() {
      var m = this;
      return {
        years: m.year(),
        months: m.month(),
        date: m.date(),
        hours: m.hours(),
        minutes: m.minutes(),
        seconds: m.seconds(),
        milliseconds: m.milliseconds()
      };
    }
    function toJSON() {
      return this.isValid() ? this.toISOString() : null;
    }
    function isValid$2() {
      return isValid(this);
    }
    function parsingFlags() {
      return extend({}, getParsingFlags(this));
    }
    function invalidAt() {
      return getParsingFlags(this).overflow;
    }
    function creationData() {
      return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
      };
    }
    addFormatToken("N", 0, 0, "eraAbbr");
    addFormatToken("NN", 0, 0, "eraAbbr");
    addFormatToken("NNN", 0, 0, "eraAbbr");
    addFormatToken("NNNN", 0, 0, "eraName");
    addFormatToken("NNNNN", 0, 0, "eraNarrow");
    addFormatToken("y", ["y", 1], "yo", "eraYear");
    addFormatToken("y", ["yy", 2], 0, "eraYear");
    addFormatToken("y", ["yyy", 3], 0, "eraYear");
    addFormatToken("y", ["yyyy", 4], 0, "eraYear");
    addRegexToken("N", matchEraAbbr);
    addRegexToken("NN", matchEraAbbr);
    addRegexToken("NNN", matchEraAbbr);
    addRegexToken("NNNN", matchEraName);
    addRegexToken("NNNNN", matchEraNarrow);
    addParseToken(
      ["N", "NN", "NNN", "NNNN", "NNNNN"],
      function(input, array, config2, token2) {
        var era = config2._locale.erasParse(input, token2, config2._strict);
        if (era) {
          getParsingFlags(config2).era = era;
        } else {
          getParsingFlags(config2).invalidEra = input;
        }
      }
    );
    addRegexToken("y", matchUnsigned);
    addRegexToken("yy", matchUnsigned);
    addRegexToken("yyy", matchUnsigned);
    addRegexToken("yyyy", matchUnsigned);
    addRegexToken("yo", matchEraYearOrdinal);
    addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
    addParseToken(["yo"], function(input, array, config2, token2) {
      var match5;
      if (config2._locale._eraYearOrdinalRegex) {
        match5 = input.match(config2._locale._eraYearOrdinalRegex);
      }
      if (config2._locale.eraYearOrdinalParse) {
        array[YEAR] = config2._locale.eraYearOrdinalParse(input, match5);
      } else {
        array[YEAR] = parseInt(input, 10);
      }
    });
    function localeEras(m, format2) {
      var i, l, date, eras = this._eras || getLocale("en")._eras;
      for (i = 0, l = eras.length; i < l; ++i) {
        switch (typeof eras[i].since) {
          case "string":
            date = hooks(eras[i].since).startOf("day");
            eras[i].since = date.valueOf();
            break;
        }
        switch (typeof eras[i].until) {
          case "undefined":
            eras[i].until = Infinity;
            break;
          case "string":
            date = hooks(eras[i].until).startOf("day").valueOf();
            eras[i].until = date.valueOf();
            break;
        }
      }
      return eras;
    }
    function localeErasParse(eraName, format2, strict) {
      var i, l, eras = this.eras(), name, abbr, narrow;
      eraName = eraName.toUpperCase();
      for (i = 0, l = eras.length; i < l; ++i) {
        name = eras[i].name.toUpperCase();
        abbr = eras[i].abbr.toUpperCase();
        narrow = eras[i].narrow.toUpperCase();
        if (strict) {
          switch (format2) {
            case "N":
            case "NN":
            case "NNN":
              if (abbr === eraName) {
                return eras[i];
              }
              break;
            case "NNNN":
              if (name === eraName) {
                return eras[i];
              }
              break;
            case "NNNNN":
              if (narrow === eraName) {
                return eras[i];
              }
              break;
          }
        } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
          return eras[i];
        }
      }
    }
    function localeErasConvertYear(era, year) {
      var dir = era.since <= era.until ? 1 : -1;
      if (year === void 0) {
        return hooks(era.since).year();
      } else {
        return hooks(era.since).year() + (year - era.offset) * dir;
      }
    }
    function getEraName() {
      var i, l, val, eras = this.localeData().eras();
      for (i = 0, l = eras.length; i < l; ++i) {
        val = this.clone().startOf("day").valueOf();
        if (eras[i].since <= val && val <= eras[i].until) {
          return eras[i].name;
        }
        if (eras[i].until <= val && val <= eras[i].since) {
          return eras[i].name;
        }
      }
      return "";
    }
    function getEraNarrow() {
      var i, l, val, eras = this.localeData().eras();
      for (i = 0, l = eras.length; i < l; ++i) {
        val = this.clone().startOf("day").valueOf();
        if (eras[i].since <= val && val <= eras[i].until) {
          return eras[i].narrow;
        }
        if (eras[i].until <= val && val <= eras[i].since) {
          return eras[i].narrow;
        }
      }
      return "";
    }
    function getEraAbbr() {
      var i, l, val, eras = this.localeData().eras();
      for (i = 0, l = eras.length; i < l; ++i) {
        val = this.clone().startOf("day").valueOf();
        if (eras[i].since <= val && val <= eras[i].until) {
          return eras[i].abbr;
        }
        if (eras[i].until <= val && val <= eras[i].since) {
          return eras[i].abbr;
        }
      }
      return "";
    }
    function getEraYear() {
      var i, l, dir, val, eras = this.localeData().eras();
      for (i = 0, l = eras.length; i < l; ++i) {
        dir = eras[i].since <= eras[i].until ? 1 : -1;
        val = this.clone().startOf("day").valueOf();
        if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
          return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
        }
      }
      return this.year();
    }
    function erasNameRegex(isStrict) {
      if (!hasOwnProp(this, "_erasNameRegex")) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasNameRegex : this._erasRegex;
    }
    function erasAbbrRegex(isStrict) {
      if (!hasOwnProp(this, "_erasAbbrRegex")) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }
    function erasNarrowRegex(isStrict) {
      if (!hasOwnProp(this, "_erasNarrowRegex")) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }
    function matchEraAbbr(isStrict, locale2) {
      return locale2.erasAbbrRegex(isStrict);
    }
    function matchEraName(isStrict, locale2) {
      return locale2.erasNameRegex(isStrict);
    }
    function matchEraNarrow(isStrict, locale2) {
      return locale2.erasNarrowRegex(isStrict);
    }
    function matchEraYearOrdinal(isStrict, locale2) {
      return locale2._eraYearOrdinalRegex || matchUnsigned;
    }
    function computeErasParse() {
      var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, eras = this.eras();
      for (i = 0, l = eras.length; i < l; ++i) {
        namePieces.push(regexEscape(eras[i].name));
        abbrPieces.push(regexEscape(eras[i].abbr));
        narrowPieces.push(regexEscape(eras[i].narrow));
        mixedPieces.push(regexEscape(eras[i].name));
        mixedPieces.push(regexEscape(eras[i].abbr));
        mixedPieces.push(regexEscape(eras[i].narrow));
      }
      this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
      this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
      this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
      this._erasNarrowRegex = new RegExp(
        "^(" + narrowPieces.join("|") + ")",
        "i"
      );
    }
    addFormatToken(0, ["gg", 2], 0, function() {
      return this.weekYear() % 100;
    });
    addFormatToken(0, ["GG", 2], 0, function() {
      return this.isoWeekYear() % 100;
    });
    function addWeekYearFormatToken(token2, getter) {
      addFormatToken(0, [token2, token2.length], 0, getter);
    }
    addWeekYearFormatToken("gggg", "weekYear");
    addWeekYearFormatToken("ggggg", "weekYear");
    addWeekYearFormatToken("GGGG", "isoWeekYear");
    addWeekYearFormatToken("GGGGG", "isoWeekYear");
    addUnitAlias("weekYear", "gg");
    addUnitAlias("isoWeekYear", "GG");
    addUnitPriority("weekYear", 1);
    addUnitPriority("isoWeekYear", 1);
    addRegexToken("G", matchSigned);
    addRegexToken("g", matchSigned);
    addRegexToken("GG", match1to2, match2);
    addRegexToken("gg", match1to2, match2);
    addRegexToken("GGGG", match1to4, match4);
    addRegexToken("gggg", match1to4, match4);
    addRegexToken("GGGGG", match1to6, match6);
    addRegexToken("ggggg", match1to6, match6);
    addWeekParseToken(
      ["gggg", "ggggg", "GGGG", "GGGGG"],
      function(input, week, config2, token2) {
        week[token2.substr(0, 2)] = toInt(input);
      }
    );
    addWeekParseToken(["gg", "GG"], function(input, week, config2, token2) {
      week[token2] = hooks.parseTwoDigitYear(input);
    });
    function getSetWeekYear(input) {
      return getSetWeekYearHelper.call(
        this,
        input,
        this.week(),
        this.weekday(),
        this.localeData()._week.dow,
        this.localeData()._week.doy
      );
    }
    function getSetISOWeekYear(input) {
      return getSetWeekYearHelper.call(
        this,
        input,
        this.isoWeek(),
        this.isoWeekday(),
        1,
        4
      );
    }
    function getISOWeeksInYear() {
      return weeksInYear(this.year(), 1, 4);
    }
    function getISOWeeksInISOWeekYear() {
      return weeksInYear(this.isoWeekYear(), 1, 4);
    }
    function getWeeksInYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }
    function getWeeksInWeekYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }
    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
      var weeksTarget;
      if (input == null) {
        return weekOfYear(this, dow, doy).year;
      } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
          week = weeksTarget;
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy);
      }
    }
    function setWeekAll(weekYear, week, weekday, dow, doy) {
      var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
      this.year(date.getUTCFullYear());
      this.month(date.getUTCMonth());
      this.date(date.getUTCDate());
      return this;
    }
    addFormatToken("Q", 0, "Qo", "quarter");
    addUnitAlias("quarter", "Q");
    addUnitPriority("quarter", 7);
    addRegexToken("Q", match1);
    addParseToken("Q", function(input, array) {
      array[MONTH] = (toInt(input) - 1) * 3;
    });
    function getSetQuarter(input) {
      return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }
    addFormatToken("D", ["DD", 2], "Do", "date");
    addUnitAlias("date", "D");
    addUnitPriority("date", 9);
    addRegexToken("D", match1to2);
    addRegexToken("DD", match1to2, match2);
    addRegexToken("Do", function(isStrict, locale2) {
      return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
    });
    addParseToken(["D", "DD"], DATE);
    addParseToken("Do", function(input, array) {
      array[DATE] = toInt(input.match(match1to2)[0]);
    });
    var getSetDayOfMonth = makeGetSet("Date", true);
    addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
    addUnitAlias("dayOfYear", "DDD");
    addUnitPriority("dayOfYear", 4);
    addRegexToken("DDD", match1to3);
    addRegexToken("DDDD", match3);
    addParseToken(["DDD", "DDDD"], function(input, array, config2) {
      config2._dayOfYear = toInt(input);
    });
    function getSetDayOfYear(input) {
      var dayOfYear = Math.round(
        (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
      ) + 1;
      return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
    }
    addFormatToken("m", ["mm", 2], 0, "minute");
    addUnitAlias("minute", "m");
    addUnitPriority("minute", 14);
    addRegexToken("m", match1to2);
    addRegexToken("mm", match1to2, match2);
    addParseToken(["m", "mm"], MINUTE);
    var getSetMinute = makeGetSet("Minutes", false);
    addFormatToken("s", ["ss", 2], 0, "second");
    addUnitAlias("second", "s");
    addUnitPriority("second", 15);
    addRegexToken("s", match1to2);
    addRegexToken("ss", match1to2, match2);
    addParseToken(["s", "ss"], SECOND);
    var getSetSecond = makeGetSet("Seconds", false);
    addFormatToken("S", 0, 0, function() {
      return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, ["SS", 2], 0, function() {
      return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, ["SSS", 3], 0, "millisecond");
    addFormatToken(0, ["SSSS", 4], 0, function() {
      return this.millisecond() * 10;
    });
    addFormatToken(0, ["SSSSS", 5], 0, function() {
      return this.millisecond() * 100;
    });
    addFormatToken(0, ["SSSSSS", 6], 0, function() {
      return this.millisecond() * 1e3;
    });
    addFormatToken(0, ["SSSSSSS", 7], 0, function() {
      return this.millisecond() * 1e4;
    });
    addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
      return this.millisecond() * 1e5;
    });
    addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
      return this.millisecond() * 1e6;
    });
    addUnitAlias("millisecond", "ms");
    addUnitPriority("millisecond", 16);
    addRegexToken("S", match1to3, match1);
    addRegexToken("SS", match1to3, match2);
    addRegexToken("SSS", match1to3, match3);
    var token, getSetMillisecond;
    for (token = "SSSS"; token.length <= 9; token += "S") {
      addRegexToken(token, matchUnsigned);
    }
    function parseMs(input, array) {
      array[MILLISECOND] = toInt(("0." + input) * 1e3);
    }
    for (token = "S"; token.length <= 9; token += "S") {
      addParseToken(token, parseMs);
    }
    getSetMillisecond = makeGetSet("Milliseconds", false);
    addFormatToken("z", 0, 0, "zoneAbbr");
    addFormatToken("zz", 0, 0, "zoneName");
    function getZoneAbbr() {
      return this._isUTC ? "UTC" : "";
    }
    function getZoneName() {
      return this._isUTC ? "Coordinated Universal Time" : "";
    }
    var proto = Moment.prototype;
    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone$5;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== "undefined" && Symbol.for != null) {
      proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return "Moment<" + this.format() + ">";
      };
    }
    proto.toJSON = toJSON;
    proto.toString = toString$3;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate(
      "dates accessor is deprecated. Use date instead.",
      getSetDayOfMonth
    );
    proto.months = deprecate(
      "months accessor is deprecated. Use month instead",
      getSetMonth
    );
    proto.years = deprecate(
      "years accessor is deprecated. Use year instead",
      getSetYear
    );
    proto.zone = deprecate(
      "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
      getSetZone
    );
    proto.isDSTShifted = deprecate(
      "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
      isDaylightSavingTimeShifted
    );
    function createUnix(input) {
      return createLocal(input * 1e3);
    }
    function createInZone() {
      return createLocal.apply(null, arguments).parseZone();
    }
    function preParsePostFormat(string) {
      return string;
    }
    var proto$1 = Locale.prototype;
    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;
    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;
    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;
    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;
    function get$1$1(format2, index, field, setter) {
      var locale2 = getLocale(), utc = createUTC().set(setter, index);
      return locale2[field](utc, format2);
    }
    function listMonthsImpl(format2, index, field) {
      if (isNumber(format2)) {
        index = format2;
        format2 = void 0;
      }
      format2 = format2 || "";
      if (index != null) {
        return get$1$1(format2, index, field, "month");
      }
      var i, out = [];
      for (i = 0; i < 12; i++) {
        out[i] = get$1$1(format2, i, field, "month");
      }
      return out;
    }
    function listWeekdaysImpl(localeSorted, format2, index, field) {
      if (typeof localeSorted === "boolean") {
        if (isNumber(format2)) {
          index = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
      } else {
        format2 = localeSorted;
        index = format2;
        localeSorted = false;
        if (isNumber(format2)) {
          index = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
      }
      var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i, out = [];
      if (index != null) {
        return get$1$1(format2, (index + shift) % 7, field, "day");
      }
      for (i = 0; i < 7; i++) {
        out[i] = get$1$1(format2, (i + shift) % 7, field, "day");
      }
      return out;
    }
    function listMonths(format2, index) {
      return listMonthsImpl(format2, index, "months");
    }
    function listMonthsShort(format2, index) {
      return listMonthsImpl(format2, index, "monthsShort");
    }
    function listWeekdays(localeSorted, format2, index) {
      return listWeekdaysImpl(localeSorted, format2, index, "weekdays");
    }
    function listWeekdaysShort(localeSorted, format2, index) {
      return listWeekdaysImpl(localeSorted, format2, index, "weekdaysShort");
    }
    function listWeekdaysMin(localeSorted, format2, index) {
      return listWeekdaysImpl(localeSorted, format2, index, "weekdaysMin");
    }
    getSetGlobalLocale("en", {
      eras: [
        {
          since: "0001-01-01",
          until: Infinity,
          offset: 1,
          name: "Anno Domini",
          narrow: "AD",
          abbr: "AD"
        },
        {
          since: "0000-12-31",
          until: -Infinity,
          offset: 1,
          name: "Before Christ",
          narrow: "BC",
          abbr: "BC"
        }
      ],
      dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal: function(number) {
        var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
        return number + output;
      }
    });
    hooks.lang = deprecate(
      "moment.lang is deprecated. Use moment.locale instead.",
      getSetGlobalLocale
    );
    hooks.langData = deprecate(
      "moment.langData is deprecated. Use moment.localeData instead.",
      getLocale
    );
    var mathAbs = Math.abs;
    function abs() {
      var data = this._data;
      this._milliseconds = mathAbs(this._milliseconds);
      this._days = mathAbs(this._days);
      this._months = mathAbs(this._months);
      data.milliseconds = mathAbs(data.milliseconds);
      data.seconds = mathAbs(data.seconds);
      data.minutes = mathAbs(data.minutes);
      data.hours = mathAbs(data.hours);
      data.months = mathAbs(data.months);
      data.years = mathAbs(data.years);
      return this;
    }
    function addSubtract$1(duration2, input, value2, direction) {
      var other = createDuration(input, value2);
      duration2._milliseconds += direction * other._milliseconds;
      duration2._days += direction * other._days;
      duration2._months += direction * other._months;
      return duration2._bubble();
    }
    function add$1(input, value2) {
      return addSubtract$1(this, input, value2, 1);
    }
    function subtract$1(input, value2) {
      return addSubtract$1(this, input, value2, -1);
    }
    function absCeil(number) {
      if (number < 0) {
        return Math.floor(number);
      } else {
        return Math.ceil(number);
      }
    }
    function bubble() {
      var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
      if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
        milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
        days2 = 0;
        months2 = 0;
      }
      data.milliseconds = milliseconds2 % 1e3;
      seconds2 = absFloor(milliseconds2 / 1e3);
      data.seconds = seconds2 % 60;
      minutes2 = absFloor(seconds2 / 60);
      data.minutes = minutes2 % 60;
      hours2 = absFloor(minutes2 / 60);
      data.hours = hours2 % 24;
      days2 += absFloor(hours2 / 24);
      monthsFromDays = absFloor(daysToMonths(days2));
      months2 += monthsFromDays;
      days2 -= absCeil(monthsToDays(monthsFromDays));
      years2 = absFloor(months2 / 12);
      months2 %= 12;
      data.days = days2;
      data.months = months2;
      data.years = years2;
      return this;
    }
    function daysToMonths(days2) {
      return days2 * 4800 / 146097;
    }
    function monthsToDays(months2) {
      return months2 * 146097 / 4800;
    }
    function as(units) {
      if (!this.isValid()) {
        return NaN;
      }
      var days2, months2, milliseconds2 = this._milliseconds;
      units = normalizeUnits(units);
      if (units === "month" || units === "quarter" || units === "year") {
        days2 = this._days + milliseconds2 / 864e5;
        months2 = this._months + daysToMonths(days2);
        switch (units) {
          case "month":
            return months2;
          case "quarter":
            return months2 / 3;
          case "year":
            return months2 / 12;
        }
      } else {
        days2 = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
          case "week":
            return days2 / 7 + milliseconds2 / 6048e5;
          case "day":
            return days2 + milliseconds2 / 864e5;
          case "hour":
            return days2 * 24 + milliseconds2 / 36e5;
          case "minute":
            return days2 * 1440 + milliseconds2 / 6e4;
          case "second":
            return days2 * 86400 + milliseconds2 / 1e3;
          case "millisecond":
            return Math.floor(days2 * 864e5) + milliseconds2;
          default:
            throw new Error("Unknown unit " + units);
        }
      }
    }
    function valueOf$1() {
      if (!this.isValid()) {
        return NaN;
      }
      return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
    }
    function makeAs(alias) {
      return function() {
        return this.as(alias);
      };
    }
    var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
    function clone$1$1() {
      return createDuration(this);
    }
    function get$2$1(units) {
      units = normalizeUnits(units);
      return this.isValid() ? this[units + "s"]() : NaN;
    }
    function makeGetter(name) {
      return function() {
        return this.isValid() ? this._data[name] : NaN;
      };
    }
    var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
    function weeks() {
      return absFloor(this.days() / 7);
    }
    var round = Math.round, thresholds = {
      ss: 44,
      s: 45,
      m: 45,
      h: 22,
      d: 26,
      w: null,
      M: 11
    };
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
      return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }
    function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
      var duration2 = createDuration(posNegDuration).abs(), seconds2 = round(duration2.as("s")), minutes2 = round(duration2.as("m")), hours2 = round(duration2.as("h")), days2 = round(duration2.as("d")), months2 = round(duration2.as("M")), weeks2 = round(duration2.as("w")), years2 = round(duration2.as("y")), a = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
      if (thresholds2.w != null) {
        a = a || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
      }
      a = a || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
      a[2] = withoutSuffix;
      a[3] = +posNegDuration > 0;
      a[4] = locale2;
      return substituteTimeAgo.apply(null, a);
    }
    function getSetRelativeTimeRounding(roundingFunction) {
      if (roundingFunction === void 0) {
        return round;
      }
      if (typeof roundingFunction === "function") {
        round = roundingFunction;
        return true;
      }
      return false;
    }
    function getSetRelativeTimeThreshold(threshold, limit) {
      if (thresholds[threshold] === void 0) {
        return false;
      }
      if (limit === void 0) {
        return thresholds[threshold];
      }
      thresholds[threshold] = limit;
      if (threshold === "s") {
        thresholds.ss = limit - 1;
      }
      return true;
    }
    function humanize(argWithSuffix, argThresholds) {
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      var withSuffix = false, th = thresholds, locale2, output;
      if (typeof argWithSuffix === "object") {
        argThresholds = argWithSuffix;
        argWithSuffix = false;
      }
      if (typeof argWithSuffix === "boolean") {
        withSuffix = argWithSuffix;
      }
      if (typeof argThresholds === "object") {
        th = Object.assign({}, thresholds, argThresholds);
        if (argThresholds.s != null && argThresholds.ss == null) {
          th.ss = argThresholds.s - 1;
        }
      }
      locale2 = this.localeData();
      output = relativeTime$1(this, !withSuffix, th, locale2);
      if (withSuffix) {
        output = locale2.pastFuture(+this, output);
      }
      return locale2.postformat(output);
    }
    var abs$1 = Math.abs;
    function sign(x) {
      return (x > 0) - (x < 0) || +x;
    }
    function toISOString$1() {
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
      if (!total) {
        return "P0D";
      }
      minutes2 = absFloor(seconds2 / 60);
      hours2 = absFloor(minutes2 / 60);
      seconds2 %= 60;
      minutes2 %= 60;
      years2 = absFloor(months2 / 12);
      months2 %= 12;
      s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
      totalSign = total < 0 ? "-" : "";
      ymSign = sign(this._months) !== sign(total) ? "-" : "";
      daysSign = sign(this._days) !== sign(total) ? "-" : "";
      hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
      return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s + "S" : "");
    }
    var proto$2 = Duration.prototype;
    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1$1;
    proto$2.get = get$2$1;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;
    proto$2.toIsoString = deprecate(
      "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
      toISOString$1
    );
    proto$2.lang = lang;
    addFormatToken("X", 0, 0, "unix");
    addFormatToken("x", 0, 0, "valueOf");
    addRegexToken("x", matchSigned);
    addRegexToken("X", matchTimestamp);
    addParseToken("X", function(input, array, config2) {
      config2._d = new Date(parseFloat(input) * 1e3);
    });
    addParseToken("x", function(input, array, config2) {
      config2._d = new Date(toInt(input));
    });
    //! moment.js
    hooks.version = "2.29.4";
    setHookCallback(createLocal);
    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now$2;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate$1;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;
    hooks.HTML5_FMT = {
      DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
      DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
      DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
      DATE: "YYYY-MM-DD",
      TIME: "HH:mm",
      TIME_SECONDS: "HH:mm:ss",
      TIME_MS: "HH:mm:ss.SSS",
      WEEK: "GGGG-[W]WW",
      MONTH: "YYYY-MM"
    };
    var defaultFormats = {
      normalDateWithWeekday: "ddd, MMM D",
      normalDate: "D MMMM",
      shortDate: "MMM D",
      monthAndDate: "MMMM D",
      dayOfMonth: "D",
      year: "YYYY",
      month: "MMMM",
      monthShort: "MMM",
      monthAndYear: "MMMM YYYY",
      weekday: "dddd",
      weekdayShort: "ddd",
      minutes: "mm",
      hours12h: "hh",
      hours24h: "HH",
      seconds: "ss",
      fullTime: "LT",
      fullTime12h: "hh:mm A",
      fullTime24h: "HH:mm",
      fullDate: "ll",
      fullDateWithWeekday: "dddd, LL",
      fullDateTime: "lll",
      fullDateTime12h: "ll hh:mm A",
      fullDateTime24h: "ll HH:mm",
      keyboardDate: "L",
      keyboardDateTime: "L LT",
      keyboardDateTime12h: "L hh:mm A",
      keyboardDateTime24h: "L HH:mm"
    };
    var MomentUtils = function() {
      function MomentUtils2(_a) {
        var _this = this;
        var _b = _a === void 0 ? {} : _a, locale2 = _b.locale, formats = _b.formats, instance = _b.instance;
        this.lib = "moment";
        this.is12HourCycleInCurrentLocale = function() {
          return /A|a/.test(_this.moment.localeData(_this.getCurrentLocaleCode()).longDateFormat("LT"));
        };
        this.getFormatHelperText = function(format2) {
          var localFormattingTokens2 = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})|./g;
          return format2.match(localFormattingTokens2).map(function(token2) {
            var firstCharacter = token2[0];
            if (firstCharacter === "L" || firstCharacter === ";") {
              return _this.moment.localeData(_this.getCurrentLocaleCode()).longDateFormat(token2);
            }
            return token2;
          }).join("").replace(/a/gi, "(a|p)m").toLocaleLowerCase();
        };
        this.getCurrentLocaleCode = function() {
          return _this.locale || _this.moment.locale();
        };
        this.parseISO = function(isoString) {
          return _this.moment(isoString, true);
        };
        this.toISO = function(value2) {
          return value2.toISOString();
        };
        this.parse = function(value2, format2) {
          if (value2 === "") {
            return null;
          }
          if (_this.locale) {
            return _this.moment(value2, format2, _this.locale, true);
          }
          return _this.moment(value2, format2, true);
        };
        this.date = function(value2) {
          if (value2 === null) {
            return null;
          }
          var moment2 = _this.moment(value2);
          moment2.locale(_this.locale);
          return moment2;
        };
        this.toJsDate = function(value2) {
          return value2.toDate();
        };
        this.isValid = function(value2) {
          return _this.moment(value2).isValid();
        };
        this.isNull = function(date) {
          return date === null;
        };
        this.getDiff = function(date, comparing, unit) {
          return date.diff(comparing, unit);
        };
        this.isAfter = function(date, value2) {
          return date.isAfter(value2);
        };
        this.isBefore = function(date, value2) {
          return date.isBefore(value2);
        };
        this.isAfterDay = function(date, value2) {
          return date.isAfter(value2, "day");
        };
        this.isBeforeDay = function(date, value2) {
          return date.isBefore(value2, "day");
        };
        this.isBeforeYear = function(date, value2) {
          return date.isBefore(value2, "year");
        };
        this.isAfterYear = function(date, value2) {
          return date.isAfter(value2, "year");
        };
        this.startOfDay = function(date) {
          return date.clone().startOf("day");
        };
        this.endOfDay = function(date) {
          return date.clone().endOf("day");
        };
        this.format = function(date, formatKey) {
          return _this.formatByString(date, _this.formats[formatKey]);
        };
        this.formatByString = function(date, formatString) {
          var clonedDate = date.clone();
          clonedDate.locale(_this.locale);
          return clonedDate.format(formatString);
        };
        this.formatNumber = function(numberToFormat) {
          return numberToFormat;
        };
        this.getHours = function(date) {
          return date.get("hours");
        };
        this.addSeconds = function(date, count) {
          return count < 0 ? date.clone().subtract(Math.abs(count), "seconds") : date.clone().add(count, "seconds");
        };
        this.addMinutes = function(date, count) {
          return count < 0 ? date.clone().subtract(Math.abs(count), "minutes") : date.clone().add(count, "minutes");
        };
        this.addHours = function(date, count) {
          return count < 0 ? date.clone().subtract(Math.abs(count), "hours") : date.clone().add(count, "hours");
        };
        this.addDays = function(date, count) {
          return count < 0 ? date.clone().subtract(Math.abs(count), "days") : date.clone().add(count, "days");
        };
        this.addWeeks = function(date, count) {
          return count < 0 ? date.clone().subtract(Math.abs(count), "weeks") : date.clone().add(count, "weeks");
        };
        this.addMonths = function(date, count) {
          return count < 0 ? date.clone().subtract(Math.abs(count), "months") : date.clone().add(count, "months");
        };
        this.addYears = function(date, count) {
          return count < 0 ? date.clone().subtract(Math.abs(count), "years") : date.clone().add(count, "years");
        };
        this.setHours = function(date, count) {
          return date.clone().hours(count);
        };
        this.getMinutes = function(date) {
          return date.get("minutes");
        };
        this.setMinutes = function(date, count) {
          return date.clone().minutes(count);
        };
        this.getSeconds = function(date) {
          return date.get("seconds");
        };
        this.setSeconds = function(date, count) {
          return date.clone().seconds(count);
        };
        this.getMonth = function(date) {
          return date.get("month");
        };
        this.getDaysInMonth = function(date) {
          return date.daysInMonth();
        };
        this.isSameDay = function(date, comparing) {
          return date.isSame(comparing, "day");
        };
        this.isSameMonth = function(date, comparing) {
          return date.isSame(comparing, "month");
        };
        this.isSameYear = function(date, comparing) {
          return date.isSame(comparing, "year");
        };
        this.isSameHour = function(date, comparing) {
          return date.isSame(comparing, "hour");
        };
        this.setMonth = function(date, count) {
          return date.clone().month(count);
        };
        this.getMeridiemText = function(ampm) {
          if (_this.is12HourCycleInCurrentLocale()) {
            return _this.moment.localeData(_this.getCurrentLocaleCode()).meridiem(ampm === "am" ? 0 : 13, 0, false);
          }
          return ampm === "am" ? "AM" : "PM";
        };
        this.startOfYear = function(date) {
          return date.clone().startOf("year");
        };
        this.endOfYear = function(date) {
          return date.clone().endOf("year");
        };
        this.startOfMonth = function(date) {
          return date.clone().startOf("month");
        };
        this.endOfMonth = function(date) {
          return date.clone().endOf("month");
        };
        this.startOfWeek = function(date) {
          return date.clone().startOf("week");
        };
        this.endOfWeek = function(date) {
          return date.clone().endOf("week");
        };
        this.getNextMonth = function(date) {
          return date.clone().add(1, "month");
        };
        this.getPreviousMonth = function(date) {
          return date.clone().subtract(1, "month");
        };
        this.getMonthArray = function(date) {
          var firstMonth = date.clone().startOf("year");
          var monthArray = [firstMonth];
          while (monthArray.length < 12) {
            var prevMonth = monthArray[monthArray.length - 1];
            monthArray.push(_this.getNextMonth(prevMonth));
          }
          return monthArray;
        };
        this.getYear = function(date) {
          return date.get("year");
        };
        this.setYear = function(date, year) {
          return date.clone().set("year", year);
        };
        this.getDate = function(date) {
          return date.get("date");
        };
        this.setDate = function(date, year) {
          return date.clone().set("date", year);
        };
        this.mergeDateAndTime = function(date, time) {
          return date.hour(time.hour()).minute(time.minute()).second(time.second());
        };
        this.getWeekdays = function() {
          return _this.moment.weekdaysShort(true);
        };
        this.isEqual = function(value2, comparing) {
          if (value2 === null && comparing === null) {
            return true;
          }
          return _this.moment(value2).isSame(comparing);
        };
        this.getWeekArray = function(date) {
          var start2 = date.clone().startOf("month").startOf("week");
          var end2 = date.clone().endOf("month").endOf("week");
          var count = 0;
          var current = start2;
          var nestedWeeks = [];
          while (current.isBefore(end2)) {
            var weekNumber = Math.floor(count / 7);
            nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];
            nestedWeeks[weekNumber].push(current);
            current = current.clone().add(1, "day");
            count += 1;
          }
          return nestedWeeks;
        };
        this.getYearRange = function(start2, end2) {
          var startDate = _this.moment(start2).startOf("year");
          var endDate = _this.moment(end2).endOf("year");
          var years2 = [];
          var current = startDate;
          while (current.isBefore(endDate)) {
            years2.push(current);
            current = current.clone().add(1, "year");
          }
          return years2;
        };
        this.isWithinRange = function(date, _a2) {
          var start2 = _a2[0], end2 = _a2[1];
          return date.isBetween(start2, end2, null, "[]");
        };
        this.moment = instance || hooks;
        this.locale = locale2;
        this.formats = Object.assign({}, defaultFormats, formats);
      }
      return MomentUtils2;
    }();
    var _jsxFileName$$ = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/mui/esm/widgets/value/MuiText.js";
    const MuiTextWidget = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var readonly = props.readonly, placeholder = props.placeholder, customProps = props.customProps, maxLength = props.maxLength;
      var onChange = function onChange2(e) {
        var val = e.target.value;
        if (val === "")
          val = void 0;
        setValue2(val);
      };
      var textValue = value2 || "";
      return /* @__PURE__ */ jsxDEV(FormControl$1, {
        children: /* @__PURE__ */ jsxDEV(TextField$1, {
          variant: "standard",
          value: textValue,
          placeholder: !readonly ? placeholder : "",
          InputProps: {
            readOnly: readonly
          },
          inputProps: {
            maxLength
          },
          disabled: readonly,
          onChange,
          size: "small",
          ...customProps
        }, void 0, false, {
          fileName: _jsxFileName$$,
          lineNumber: 19,
          columnNumber: 75
        }, this)
      }, void 0, false, {
        fileName: _jsxFileName$$,
        lineNumber: 19,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$_ = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/mui/esm/widgets/value/MuiTextArea.js";
    const MuiTextAreaWidget = function(props) {
      var value2 = props.value, setValue2 = props.setValue, config2 = props.config, readonly = props.readonly, placeholder = props.placeholder, customProps = props.customProps, maxLength = props.maxLength, maxRows = props.maxRows, fullWidth = props.fullWidth;
      var defaultMaxRows = config2.settings.defaultMaxRows;
      var onChange = function onChange2(e) {
        var val = e.target.value;
        if (val === "")
          val = void 0;
        setValue2(val);
      };
      var textValue = value2 || "";
      return /* @__PURE__ */ jsxDEV(FormControl$1, {
        fullWidth,
        children: /* @__PURE__ */ jsxDEV(TextField$1, {
          variant: "standard",
          fullWidth,
          maxRows: maxRows || defaultMaxRows,
          multiline: true,
          value: textValue,
          placeholder: !readonly ? placeholder : "",
          InputProps: {
            readOnly: readonly
          },
          inputProps: {
            maxLength
          },
          disabled: readonly,
          onChange,
          size: "small",
          ...customProps
        }, void 0, false, {
          fileName: _jsxFileName$_,
          lineNumber: 24,
          columnNumber: 19
        }, this)
      }, void 0, false, {
        fileName: _jsxFileName$_,
        lineNumber: 22,
        columnNumber: 23
      }, this);
    };
    function useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
      const [match5, setMatch] = react.exports.useState(() => {
        if (noSsr && matchMedia) {
          return matchMedia(query).matches;
        }
        if (ssrMatchMedia) {
          return ssrMatchMedia(query).matches;
        }
        return defaultMatches;
      });
      useEnhancedEffect$1(() => {
        let active = true;
        if (!matchMedia) {
          return void 0;
        }
        const queryList = matchMedia(query);
        const updateMatch = () => {
          if (active) {
            setMatch(queryList.matches);
          }
        };
        updateMatch();
        queryList.addListener(updateMatch);
        return () => {
          active = false;
          queryList.removeListener(updateMatch);
        };
      }, [query, matchMedia]);
      return match5;
    }
    const maybeReactUseSyncExternalStore = React$1["useSyncExternalStore"];
    function useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
      const getDefaultSnapshot = react.exports.useCallback(() => defaultMatches, [defaultMatches]);
      const getServerSnapshot = react.exports.useMemo(() => {
        if (noSsr && matchMedia) {
          return () => matchMedia(query).matches;
        }
        if (ssrMatchMedia !== null) {
          const {
            matches
          } = ssrMatchMedia(query);
          return () => matches;
        }
        return getDefaultSnapshot;
      }, [getDefaultSnapshot, query, ssrMatchMedia, noSsr, matchMedia]);
      const [getSnapshot, subscribe] = react.exports.useMemo(() => {
        if (matchMedia === null) {
          return [getDefaultSnapshot, () => () => {
          }];
        }
        const mediaQueryList = matchMedia(query);
        return [() => mediaQueryList.matches, (notify) => {
          mediaQueryList.addListener(notify);
          return () => {
            mediaQueryList.removeListener(notify);
          };
        }];
      }, [getDefaultSnapshot, matchMedia, query]);
      const match5 = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      return match5;
    }
    function useMediaQuery(queryInput, options = {}) {
      const theme = useTheme$3();
      const supportMatchMedia = typeof window !== "undefined" && typeof window.matchMedia !== "undefined";
      const {
        defaultMatches = false,
        matchMedia = supportMatchMedia ? window.matchMedia : null,
        ssrMatchMedia = null,
        noSsr = false
      } = getThemeProps({
        name: "MuiUseMediaQuery",
        props: options,
        theme
      });
      {
        if (typeof queryInput === "function" && theme === null) {
          console.error(["MUI: The `query` argument provided is invalid.", "You are providing a function without a theme in the context.", "One of the parent elements needs to use a ThemeProvider."].join("\n"));
        }
      }
      let query = typeof queryInput === "function" ? queryInput(theme) : queryInput;
      query = query.replace(/^@media( ?)/m, "");
      const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== void 0 ? useMediaQueryNew : useMediaQueryOld;
      const match5 = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);
      {
        react.exports.useDebugValue({
          query,
          match: match5
        });
      }
      return match5;
    }
    const useLocalizationContext = () => {
      const localization = react.exports.useContext(MuiPickersAdapterContext);
      if (localization === null) {
        throw new Error("MUI: Can not find utils in context. It looks like you forgot to wrap your component in LocalizationProvider, or pass dateAdapter prop directly.");
      }
      return localization;
    };
    const useUtils = () => useLocalizationContext().utils;
    const useDefaultDates = () => useLocalizationContext().defaultDates;
    const useLocaleText = () => useLocalizationContext().localeText;
    const useNow = () => {
      const utils2 = useUtils();
      const now2 = react.exports.useRef(utils2.date());
      return now2.current;
    };
    const findClosestEnabledDate = ({
      date,
      disableFuture,
      disablePast,
      maxDate,
      minDate,
      isDateDisabled,
      utils: utils2
    }) => {
      const today = utils2.startOfDay(utils2.date());
      if (disablePast && utils2.isBefore(minDate, today)) {
        minDate = today;
      }
      if (disableFuture && utils2.isAfter(maxDate, today)) {
        maxDate = today;
      }
      let forward = date;
      let backward = date;
      if (utils2.isBefore(date, minDate)) {
        forward = utils2.date(minDate);
        backward = null;
      }
      if (utils2.isAfter(date, maxDate)) {
        if (backward) {
          backward = utils2.date(maxDate);
        }
        forward = null;
      }
      while (forward || backward) {
        if (forward && utils2.isAfter(forward, maxDate)) {
          forward = null;
        }
        if (backward && utils2.isBefore(backward, minDate)) {
          backward = null;
        }
        if (forward) {
          if (!isDateDisabled(forward)) {
            return forward;
          }
          forward = utils2.addDays(forward, 1);
        }
        if (backward) {
          if (!isDateDisabled(backward)) {
            return backward;
          }
          backward = utils2.addDays(backward, -1);
        }
      }
      return null;
    };
    const parsePickerInputValue = (utils2, value2) => {
      const parsedValue = utils2.date(value2);
      return utils2.isValid(parsedValue) ? parsedValue : null;
    };
    const parseNonNullablePickerDate = (utils2, value2, defaultValue2) => {
      if (value2 == null) {
        return defaultValue2;
      }
      const parsedValue = utils2.date(value2);
      const isDateValid = utils2.isValid(parsedValue);
      if (isDateValid) {
        return parsedValue;
      }
      return defaultValue2;
    };
    const isYearOnlyView = (views) => views.length === 1 && views[0] === "year";
    const isYearAndMonthViews = (views) => views.length === 2 && views.indexOf("month") !== -1 && views.indexOf("year") !== -1;
    const getFormatAndMaskByViews = (views, utils2) => {
      if (isYearOnlyView(views)) {
        return {
          inputFormat: utils2.formats.year
        };
      }
      if (isYearAndMonthViews(views)) {
        return {
          disableMaskedInput: true,
          inputFormat: utils2.formats.monthAndYear
        };
      }
      return {
        inputFormat: utils2.formats.keyboardDate
      };
    };
    function useDatePickerDefaultizedProps(props, name) {
      var _themeProps$views;
      const utils2 = useUtils();
      const defaultDates = useDefaultDates();
      const themeProps = useThemeProps({
        props,
        name
      });
      const views = (_themeProps$views = themeProps.views) != null ? _themeProps$views : ["year", "day"];
      return _extends$1({
        openTo: "day",
        disableFuture: false,
        disablePast: false
      }, getFormatAndMaskByViews(views, utils2), themeProps, {
        views,
        minDate: parseNonNullablePickerDate(utils2, themeProps.minDate, defaultDates.minDate),
        maxDate: parseNonNullablePickerDate(utils2, themeProps.maxDate, defaultDates.maxDate)
      });
    }
    const datePickerValueManager = {
      emptyValue: null,
      getTodayValue: (utils2) => utils2.date(),
      parseInput: parsePickerInputValue,
      areValuesEqual: (utils2, a, b) => utils2.isEqual(a, b)
    };
    const unstable_ClassNameGenerator = {
      configure: (generator) => {
        {
          console.warn(["MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.", "", "You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead", "", "The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401", "", "The updated documentation: https://mui.com/guides/classname-generator/"].join("\n"));
        }
        ClassNameGenerator$1.configure(generator);
      }
    };
    const utils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      unstable_ClassNameGenerator,
      capitalize,
      createChainedFunction,
      createSvgIcon: createSvgIcon$1,
      debounce: debounce$3,
      deprecatedPropType,
      isMuiElement,
      ownerDocument,
      ownerWindow,
      requirePropFactory,
      setRef,
      unstable_useEnhancedEffect: useEnhancedEffect$1,
      unstable_useId: useId,
      unsupportedProp,
      useControlled,
      useEventCallback,
      useForkRef,
      useIsFocusVisible
    }, Symbol.toStringTag, { value: "Module" }));
    function getIconButtonUtilityClass(slot) {
      return generateUtilityClass("MuiIconButton", slot);
    }
    const iconButtonClasses = generateUtilityClasses("MuiIconButton", ["root", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "edgeStart", "edgeEnd", "sizeSmall", "sizeMedium", "sizeLarge"]);
    const iconButtonClasses$1 = iconButtonClasses;
    const _excluded$10 = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];
    const useUtilityClasses$I = (ownerState) => {
      const {
        classes,
        disabled,
        color: color2,
        edge,
        size
      } = ownerState;
      const slots = {
        root: ["root", disabled && "disabled", color2 !== "default" && `color${capitalize(color2)}`, edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`]
      };
      return composeClasses(slots, getIconButtonUtilityClass, classes);
    };
    const IconButtonRoot = styled$1(ButtonBase$1, {
      name: "MuiIconButton",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.color !== "default" && styles2[`color${capitalize(ownerState.color)}`], ownerState.edge && styles2[`edge${capitalize(ownerState.edge)}`], styles2[`size${capitalize(ownerState.size)}`]];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      textAlign: "center",
      flex: "0 0 auto",
      fontSize: theme.typography.pxToRem(24),
      padding: 8,
      borderRadius: "50%",
      overflow: "visible",
      color: (theme.vars || theme).palette.action.active,
      transition: theme.transitions.create("background-color", {
        duration: theme.transitions.duration.shortest
      })
    }, !ownerState.disableRipple && {
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }
    }, ownerState.edge === "start" && {
      marginLeft: ownerState.size === "small" ? -3 : -12
    }, ownerState.edge === "end" && {
      marginRight: ownerState.size === "small" ? -3 : -12
    }), ({
      theme,
      ownerState
    }) => {
      var _palette;
      const palette = (_palette = (theme.vars || theme).palette) == null ? void 0 : _palette[ownerState.color];
      return _extends$1({}, ownerState.color === "inherit" && {
        color: "inherit"
      }, ownerState.color !== "inherit" && ownerState.color !== "default" && _extends$1({
        color: palette == null ? void 0 : palette.main
      }, !ownerState.disableRipple && {
        "&:hover": _extends$1({}, palette && {
          backgroundColor: theme.vars ? `rgba(${palette.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(palette.main, theme.palette.action.hoverOpacity)
        }, {
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        })
      }), ownerState.size === "small" && {
        padding: 5,
        fontSize: theme.typography.pxToRem(18)
      }, ownerState.size === "large" && {
        padding: 12,
        fontSize: theme.typography.pxToRem(28)
      }, {
        [`&.${iconButtonClasses$1.disabled}`]: {
          backgroundColor: "transparent",
          color: (theme.vars || theme).palette.action.disabled
        }
      });
    });
    const IconButton = /* @__PURE__ */ react.exports.forwardRef(function IconButton2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiIconButton"
      });
      const {
        edge = false,
        children,
        className,
        color: color2 = "default",
        disabled = false,
        disableFocusRipple = false,
        size = "medium"
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$10);
      const ownerState = _extends$1({}, props, {
        edge,
        color: color2,
        disabled,
        disableFocusRipple,
        size
      });
      const classes = useUtilityClasses$I(ownerState);
      return /* @__PURE__ */ jsx(IconButtonRoot, _extends$1({
        className: clsx(classes.root, className),
        centerRipple: true,
        focusRipple: !disableFocusRipple,
        disabled,
        ref,
        ownerState
      }, other, {
        children
      }));
    });
    IconButton.propTypes = {
      children: chainPropTypes(propTypes.exports.node, (props) => {
        const found = react.exports.Children.toArray(props.children).some((child) => /* @__PURE__ */ react.exports.isValidElement(child) && child.props.onClick);
        if (found) {
          return new Error(["MUI: You are providing an onClick event listener to a child of a button element.", "Prefer applying it to the IconButton directly.", "This guarantees that the whole <button> will be responsive to click events."].join("\n"));
        }
        return null;
      }),
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      color: propTypes.exports.oneOfType([propTypes.exports.oneOf(["inherit", "default", "primary", "secondary", "error", "info", "success", "warning"]), propTypes.exports.string]),
      disabled: propTypes.exports.bool,
      disableFocusRipple: propTypes.exports.bool,
      disableRipple: propTypes.exports.bool,
      edge: propTypes.exports.oneOf(["end", "start", false]),
      size: propTypes.exports.oneOfType([propTypes.exports.oneOf(["small", "medium", "large"]), propTypes.exports.string]),
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
    };
    const IconButton$1 = IconButton;
    const ClearIcon = createSvgIcon$1(/* @__PURE__ */ jsx("path", {
      d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
    }), "Close");
    const _excluded$$ = ["anchorEl", "component", "components", "componentsProps", "container", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "transition", "slots", "slotProps"];
    const PopperRoot = styled$1(BasePopper, {
      name: "MuiPopper",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({});
    const Popper = /* @__PURE__ */ react.exports.forwardRef(function Popper2(inProps, ref) {
      var _slots$root;
      const theme = useTheme$3();
      const props = useThemeProps({
        props: inProps,
        name: "MuiPopper"
      });
      const {
        anchorEl,
        component,
        components,
        componentsProps,
        container,
        disablePortal,
        keepMounted,
        modifiers,
        open,
        placement,
        popperOptions,
        popperRef,
        transition,
        slots,
        slotProps
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$$);
      const RootComponent = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components == null ? void 0 : components.Root;
      const otherProps = _extends$1({
        anchorEl,
        container,
        disablePortal,
        keepMounted,
        modifiers,
        open,
        placement,
        popperOptions,
        popperRef,
        transition
      }, other);
      return /* @__PURE__ */ jsx(PopperRoot, _extends$1({
        as: component,
        direction: theme == null ? void 0 : theme.direction,
        slots: {
          root: RootComponent
        },
        slotProps: slotProps != null ? slotProps : componentsProps
      }, otherProps, {
        ref
      }));
    });
    Popper.propTypes = {
      anchorEl: propTypes.exports.oneOfType([HTMLElementType, propTypes.exports.object, propTypes.exports.func]),
      children: propTypes.exports.oneOfType([propTypes.exports.node, propTypes.exports.func]),
      component: propTypes.exports.elementType,
      components: propTypes.exports.shape({
        Root: propTypes.exports.elementType
      }),
      componentsProps: propTypes.exports.shape({
        root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
      }),
      container: propTypes.exports.oneOfType([HTMLElementType, propTypes.exports.func]),
      disablePortal: propTypes.exports.bool,
      keepMounted: propTypes.exports.bool,
      modifiers: propTypes.exports.arrayOf(propTypes.exports.shape({
        data: propTypes.exports.object,
        effect: propTypes.exports.func,
        enabled: propTypes.exports.bool,
        fn: propTypes.exports.func,
        name: propTypes.exports.any,
        options: propTypes.exports.object,
        phase: propTypes.exports.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
        requires: propTypes.exports.arrayOf(propTypes.exports.string),
        requiresIfExists: propTypes.exports.arrayOf(propTypes.exports.string)
      })),
      open: propTypes.exports.bool.isRequired,
      placement: propTypes.exports.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
      popperOptions: propTypes.exports.shape({
        modifiers: propTypes.exports.array,
        onFirstUpdate: propTypes.exports.func,
        placement: propTypes.exports.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
        strategy: propTypes.exports.oneOf(["absolute", "fixed"])
      }),
      popperRef: refType$1,
      slotProps: propTypes.exports.shape({
        root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
      }),
      slots: propTypes.exports.shape({
        root: propTypes.exports.elementType
      }),
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      transition: propTypes.exports.bool
    };
    const Popper$1 = Popper;
    function getListSubheaderUtilityClass(slot) {
      return generateUtilityClass("MuiListSubheader", slot);
    }
    generateUtilityClasses("MuiListSubheader", ["root", "colorPrimary", "colorInherit", "gutters", "inset", "sticky"]);
    const _excluded$_ = ["className", "color", "component", "disableGutters", "disableSticky", "inset"];
    const useUtilityClasses$H = (ownerState) => {
      const {
        classes,
        color: color2,
        disableGutters,
        inset,
        disableSticky
      } = ownerState;
      const slots = {
        root: ["root", color2 !== "default" && `color${capitalize(color2)}`, !disableGutters && "gutters", inset && "inset", !disableSticky && "sticky"]
      };
      return composeClasses(slots, getListSubheaderUtilityClass, classes);
    };
    const ListSubheaderRoot = styled$1("li", {
      name: "MuiListSubheader",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.color !== "default" && styles2[`color${capitalize(ownerState.color)}`], !ownerState.disableGutters && styles2.gutters, ownerState.inset && styles2.inset, !ownerState.disableSticky && styles2.sticky];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      boxSizing: "border-box",
      lineHeight: "48px",
      listStyle: "none",
      color: (theme.vars || theme).palette.text.secondary,
      fontFamily: theme.typography.fontFamily,
      fontWeight: theme.typography.fontWeightMedium,
      fontSize: theme.typography.pxToRem(14)
    }, ownerState.color === "primary" && {
      color: (theme.vars || theme).palette.primary.main
    }, ownerState.color === "inherit" && {
      color: "inherit"
    }, !ownerState.disableGutters && {
      paddingLeft: 16,
      paddingRight: 16
    }, ownerState.inset && {
      paddingLeft: 72
    }, !ownerState.disableSticky && {
      position: "sticky",
      top: 0,
      zIndex: 1,
      backgroundColor: (theme.vars || theme).palette.background.paper
    }));
    const ListSubheader = /* @__PURE__ */ react.exports.forwardRef(function ListSubheader2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiListSubheader"
      });
      const {
        className,
        color: color2 = "default",
        component = "li",
        disableGutters = false,
        disableSticky = false,
        inset = false
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$_);
      const ownerState = _extends$1({}, props, {
        color: color2,
        component,
        disableGutters,
        disableSticky,
        inset
      });
      const classes = useUtilityClasses$H(ownerState);
      return /* @__PURE__ */ jsx(ListSubheaderRoot, _extends$1({
        as: component,
        className: clsx(classes.root, className),
        ref,
        ownerState
      }, other));
    });
    ListSubheader.muiSkipListHighlight = true;
    ListSubheader.propTypes = {
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      color: propTypes.exports.oneOf(["default", "inherit", "primary"]),
      component: propTypes.exports.elementType,
      disableGutters: propTypes.exports.bool,
      disableSticky: propTypes.exports.bool,
      inset: propTypes.exports.bool,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
    };
    const ListSubheader$1 = ListSubheader;
    const CancelIcon = createSvgIcon$1(/* @__PURE__ */ jsx("path", {
      d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
    }), "Cancel");
    function getChipUtilityClass(slot) {
      return generateUtilityClass("MuiChip", slot);
    }
    const chipClasses = generateUtilityClasses("MuiChip", ["root", "sizeSmall", "sizeMedium", "colorError", "colorInfo", "colorPrimary", "colorSecondary", "colorSuccess", "colorWarning", "disabled", "clickable", "clickableColorPrimary", "clickableColorSecondary", "deletable", "deletableColorPrimary", "deletableColorSecondary", "outlined", "filled", "outlinedPrimary", "outlinedSecondary", "filledPrimary", "filledSecondary", "avatar", "avatarSmall", "avatarMedium", "avatarColorPrimary", "avatarColorSecondary", "icon", "iconSmall", "iconMedium", "iconColorPrimary", "iconColorSecondary", "label", "labelSmall", "labelMedium", "deleteIcon", "deleteIconSmall", "deleteIconMedium", "deleteIconColorPrimary", "deleteIconColorSecondary", "deleteIconOutlinedColorPrimary", "deleteIconOutlinedColorSecondary", "deleteIconFilledColorPrimary", "deleteIconFilledColorSecondary", "focusVisible"]);
    const chipClasses$1 = chipClasses;
    const _excluded$Z = ["avatar", "className", "clickable", "color", "component", "deleteIcon", "disabled", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "size", "variant", "tabIndex", "skipFocusWhenDisabled"];
    const useUtilityClasses$G = (ownerState) => {
      const {
        classes,
        disabled,
        size,
        color: color2,
        iconColor,
        onDelete,
        clickable,
        variant
      } = ownerState;
      const slots = {
        root: ["root", variant, disabled && "disabled", `size${capitalize(size)}`, `color${capitalize(color2)}`, clickable && "clickable", clickable && `clickableColor${capitalize(color2)}`, onDelete && "deletable", onDelete && `deletableColor${capitalize(color2)}`, `${variant}${capitalize(color2)}`],
        label: ["label", `label${capitalize(size)}`],
        avatar: ["avatar", `avatar${capitalize(size)}`, `avatarColor${capitalize(color2)}`],
        icon: ["icon", `icon${capitalize(size)}`, `iconColor${capitalize(iconColor)}`],
        deleteIcon: ["deleteIcon", `deleteIcon${capitalize(size)}`, `deleteIconColor${capitalize(color2)}`, `deleteIcon${capitalize(variant)}Color${capitalize(color2)}`]
      };
      return composeClasses(slots, getChipUtilityClass, classes);
    };
    const ChipRoot = styled$1("div", {
      name: "MuiChip",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        const {
          color: color2,
          iconColor,
          clickable,
          onDelete,
          size,
          variant
        } = ownerState;
        return [{
          [`& .${chipClasses$1.avatar}`]: styles2.avatar
        }, {
          [`& .${chipClasses$1.avatar}`]: styles2[`avatar${capitalize(size)}`]
        }, {
          [`& .${chipClasses$1.avatar}`]: styles2[`avatarColor${capitalize(color2)}`]
        }, {
          [`& .${chipClasses$1.icon}`]: styles2.icon
        }, {
          [`& .${chipClasses$1.icon}`]: styles2[`icon${capitalize(size)}`]
        }, {
          [`& .${chipClasses$1.icon}`]: styles2[`iconColor${capitalize(iconColor)}`]
        }, {
          [`& .${chipClasses$1.deleteIcon}`]: styles2.deleteIcon
        }, {
          [`& .${chipClasses$1.deleteIcon}`]: styles2[`deleteIcon${capitalize(size)}`]
        }, {
          [`& .${chipClasses$1.deleteIcon}`]: styles2[`deleteIconColor${capitalize(color2)}`]
        }, {
          [`& .${chipClasses$1.deleteIcon}`]: styles2[`deleteIcon${capitalize(variant)}Color${capitalize(color2)}`]
        }, styles2.root, styles2[`size${capitalize(size)}`], styles2[`color${capitalize(color2)}`], clickable && styles2.clickable, clickable && color2 !== "default" && styles2[`clickableColor${capitalize(color2)})`], onDelete && styles2.deletable, onDelete && color2 !== "default" && styles2[`deletableColor${capitalize(color2)}`], styles2[variant], styles2[`${variant}${capitalize(color2)}`]];
      }
    })(({
      theme,
      ownerState
    }) => {
      const textColor = theme.palette.mode === "light" ? theme.palette.grey[700] : theme.palette.grey[300];
      return _extends$1({
        maxWidth: "100%",
        fontFamily: theme.typography.fontFamily,
        fontSize: theme.typography.pxToRem(13),
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        height: 32,
        color: (theme.vars || theme).palette.text.primary,
        backgroundColor: (theme.vars || theme).palette.action.selected,
        borderRadius: 32 / 2,
        whiteSpace: "nowrap",
        transition: theme.transitions.create(["background-color", "box-shadow"]),
        cursor: "default",
        outline: 0,
        textDecoration: "none",
        border: 0,
        padding: 0,
        verticalAlign: "middle",
        boxSizing: "border-box",
        [`&.${chipClasses$1.disabled}`]: {
          opacity: (theme.vars || theme).palette.action.disabledOpacity,
          pointerEvents: "none"
        },
        [`& .${chipClasses$1.avatar}`]: {
          marginLeft: 5,
          marginRight: -6,
          width: 24,
          height: 24,
          color: theme.vars ? theme.vars.palette.Chip.defaultAvatarColor : textColor,
          fontSize: theme.typography.pxToRem(12)
        },
        [`& .${chipClasses$1.avatarColorPrimary}`]: {
          color: (theme.vars || theme).palette.primary.contrastText,
          backgroundColor: (theme.vars || theme).palette.primary.dark
        },
        [`& .${chipClasses$1.avatarColorSecondary}`]: {
          color: (theme.vars || theme).palette.secondary.contrastText,
          backgroundColor: (theme.vars || theme).palette.secondary.dark
        },
        [`& .${chipClasses$1.avatarSmall}`]: {
          marginLeft: 4,
          marginRight: -4,
          width: 18,
          height: 18,
          fontSize: theme.typography.pxToRem(10)
        },
        [`& .${chipClasses$1.icon}`]: _extends$1({
          marginLeft: 5,
          marginRight: -6
        }, ownerState.size === "small" && {
          fontSize: 18,
          marginLeft: 4,
          marginRight: -4
        }, ownerState.iconColor === ownerState.color && _extends$1({
          color: theme.vars ? theme.vars.palette.Chip.defaultIconColor : textColor
        }, ownerState.color !== "default" && {
          color: "inherit"
        })),
        [`& .${chipClasses$1.deleteIcon}`]: _extends$1({
          WebkitTapHighlightColor: "transparent",
          color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.26)` : alpha(theme.palette.text.primary, 0.26),
          fontSize: 22,
          cursor: "pointer",
          margin: "0 5px 0 -6px",
          "&:hover": {
            color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.4)` : alpha(theme.palette.text.primary, 0.4)
          }
        }, ownerState.size === "small" && {
          fontSize: 16,
          marginRight: 4,
          marginLeft: -4
        }, ownerState.color !== "default" && {
          color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].contrastTextChannel} / 0.7)` : alpha(theme.palette[ownerState.color].contrastText, 0.7),
          "&:hover, &:active": {
            color: (theme.vars || theme).palette[ownerState.color].contrastText
          }
        })
      }, ownerState.size === "small" && {
        height: 24
      }, ownerState.color !== "default" && {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
        color: (theme.vars || theme).palette[ownerState.color].contrastText
      }, ownerState.onDelete && {
        [`&.${chipClasses$1.focusVisible}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
        }
      }, ownerState.onDelete && ownerState.color !== "default" && {
        [`&.${chipClasses$1.focusVisible}`]: {
          backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
        }
      });
    }, ({
      theme,
      ownerState
    }) => _extends$1({}, ownerState.clickable && {
      userSelect: "none",
      WebkitTapHighlightColor: "transparent",
      cursor: "pointer",
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
      },
      [`&.${chipClasses$1.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      },
      "&:active": {
        boxShadow: (theme.vars || theme).shadows[1]
      }
    }, ownerState.clickable && ownerState.color !== "default" && {
      [`&:hover, &.${chipClasses$1.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
      }
    }), ({
      theme,
      ownerState
    }) => _extends$1({}, ownerState.variant === "outlined" && {
      backgroundColor: "transparent",
      border: theme.vars ? `1px solid ${theme.vars.palette.Chip.defaultBorder}` : `1px solid ${theme.palette.mode === "light" ? theme.palette.grey[400] : theme.palette.grey[700]}`,
      [`&.${chipClasses$1.clickable}:hover`]: {
        backgroundColor: (theme.vars || theme).palette.action.hover
      },
      [`&.${chipClasses$1.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette.action.focus
      },
      [`& .${chipClasses$1.avatar}`]: {
        marginLeft: 4
      },
      [`& .${chipClasses$1.avatarSmall}`]: {
        marginLeft: 2
      },
      [`& .${chipClasses$1.icon}`]: {
        marginLeft: 4
      },
      [`& .${chipClasses$1.iconSmall}`]: {
        marginLeft: 2
      },
      [`& .${chipClasses$1.deleteIcon}`]: {
        marginRight: 5
      },
      [`& .${chipClasses$1.deleteIconSmall}`]: {
        marginRight: 3
      }
    }, ownerState.variant === "outlined" && ownerState.color !== "default" && {
      color: (theme.vars || theme).palette[ownerState.color].main,
      border: `1px solid ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : alpha(theme.palette[ownerState.color].main, 0.7)}`,
      [`&.${chipClasses$1.clickable}:hover`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity)
      },
      [`&.${chipClasses$1.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.focusOpacity)
      },
      [`& .${chipClasses$1.deleteIcon}`]: {
        color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : alpha(theme.palette[ownerState.color].main, 0.7),
        "&:hover, &:active": {
          color: (theme.vars || theme).palette[ownerState.color].main
        }
      }
    }));
    const ChipLabel = styled$1("span", {
      name: "MuiChip",
      slot: "Label",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        const {
          size
        } = ownerState;
        return [styles2.label, styles2[`label${capitalize(size)}`]];
      }
    })(({
      ownerState
    }) => _extends$1({
      overflow: "hidden",
      textOverflow: "ellipsis",
      paddingLeft: 12,
      paddingRight: 12,
      whiteSpace: "nowrap"
    }, ownerState.size === "small" && {
      paddingLeft: 8,
      paddingRight: 8
    }));
    function isDeleteKeyboardEvent(keyboardEvent) {
      return keyboardEvent.key === "Backspace" || keyboardEvent.key === "Delete";
    }
    const Chip = /* @__PURE__ */ react.exports.forwardRef(function Chip2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiChip"
      });
      const {
        avatar: avatarProp,
        className,
        clickable: clickableProp,
        color: color2 = "default",
        component: ComponentProp,
        deleteIcon: deleteIconProp,
        disabled = false,
        icon: iconProp,
        label,
        onClick,
        onDelete,
        onKeyDown,
        onKeyUp,
        size = "medium",
        variant = "filled",
        tabIndex,
        skipFocusWhenDisabled = false
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$Z);
      const chipRef = react.exports.useRef(null);
      const handleRef = useForkRef(chipRef, ref);
      const handleDeleteIconClick = (event) => {
        event.stopPropagation();
        if (onDelete) {
          onDelete(event);
        }
      };
      const handleKeyDown2 = (event) => {
        if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
          event.preventDefault();
        }
        if (onKeyDown) {
          onKeyDown(event);
        }
      };
      const handleKeyUp = (event) => {
        if (event.currentTarget === event.target) {
          if (onDelete && isDeleteKeyboardEvent(event)) {
            onDelete(event);
          } else if (event.key === "Escape" && chipRef.current) {
            chipRef.current.blur();
          }
        }
        if (onKeyUp) {
          onKeyUp(event);
        }
      };
      const clickable = clickableProp !== false && onClick ? true : clickableProp;
      const component = clickable || onDelete ? ButtonBase$1 : ComponentProp || "div";
      const ownerState = _extends$1({}, props, {
        component,
        disabled,
        size,
        color: color2,
        iconColor: /* @__PURE__ */ react.exports.isValidElement(iconProp) ? iconProp.props.color || color2 : color2,
        onDelete: !!onDelete,
        clickable,
        variant
      });
      const classes = useUtilityClasses$G(ownerState);
      const moreProps = component === ButtonBase$1 ? _extends$1({
        component: ComponentProp || "div",
        focusVisibleClassName: classes.focusVisible
      }, onDelete && {
        disableRipple: true
      }) : {};
      let deleteIcon = null;
      if (onDelete) {
        deleteIcon = deleteIconProp && /* @__PURE__ */ react.exports.isValidElement(deleteIconProp) ? /* @__PURE__ */ react.exports.cloneElement(deleteIconProp, {
          className: clsx(deleteIconProp.props.className, classes.deleteIcon),
          onClick: handleDeleteIconClick
        }) : /* @__PURE__ */ jsx(CancelIcon, {
          className: clsx(classes.deleteIcon),
          onClick: handleDeleteIconClick
        });
      }
      let avatar = null;
      if (avatarProp && /* @__PURE__ */ react.exports.isValidElement(avatarProp)) {
        avatar = /* @__PURE__ */ react.exports.cloneElement(avatarProp, {
          className: clsx(classes.avatar, avatarProp.props.className)
        });
      }
      let icon = null;
      if (iconProp && /* @__PURE__ */ react.exports.isValidElement(iconProp)) {
        icon = /* @__PURE__ */ react.exports.cloneElement(iconProp, {
          className: clsx(classes.icon, iconProp.props.className)
        });
      }
      {
        if (avatar && icon) {
          console.error("MUI: The Chip component can not handle the avatar and the icon prop at the same time. Pick one.");
        }
      }
      return /* @__PURE__ */ jsxs(ChipRoot, _extends$1({
        as: component,
        className: clsx(classes.root, className),
        disabled: clickable && disabled ? true : void 0,
        onClick,
        onKeyDown: handleKeyDown2,
        onKeyUp: handleKeyUp,
        ref: handleRef,
        tabIndex: skipFocusWhenDisabled && disabled ? -1 : tabIndex,
        ownerState
      }, moreProps, other, {
        children: [avatar || icon, /* @__PURE__ */ jsx(ChipLabel, {
          className: clsx(classes.label),
          ownerState,
          children: label
        }), deleteIcon]
      }));
    });
    Chip.propTypes = {
      avatar: propTypes.exports.element,
      children: unsupportedProp,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      clickable: propTypes.exports.bool,
      color: propTypes.exports.oneOfType([propTypes.exports.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), propTypes.exports.string]),
      component: propTypes.exports.elementType,
      deleteIcon: propTypes.exports.element,
      disabled: propTypes.exports.bool,
      icon: propTypes.exports.element,
      label: propTypes.exports.node,
      onClick: propTypes.exports.func,
      onDelete: propTypes.exports.func,
      onKeyDown: propTypes.exports.func,
      onKeyUp: propTypes.exports.func,
      size: propTypes.exports.oneOfType([propTypes.exports.oneOf(["medium", "small"]), propTypes.exports.string]),
      skipFocusWhenDisabled: propTypes.exports.bool,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      tabIndex: propTypes.exports.number,
      variant: propTypes.exports.oneOfType([propTypes.exports.oneOf(["filled", "outlined"]), propTypes.exports.string])
    };
    const Chip$1 = Chip;
    function getAutocompleteUtilityClass(slot) {
      return generateUtilityClass("MuiAutocomplete", slot);
    }
    const autocompleteClasses = generateUtilityClasses("MuiAutocomplete", ["root", "expanded", "fullWidth", "focused", "focusVisible", "tag", "tagSizeSmall", "tagSizeMedium", "hasPopupIcon", "hasClearIcon", "inputRoot", "input", "inputFocused", "endAdornment", "clearIndicator", "popupIndicator", "popupIndicatorOpen", "popper", "popperDisablePortal", "paper", "listbox", "loading", "noOptions", "option", "groupLabel", "groupUl"]);
    const autocompleteClasses$1 = autocompleteClasses;
    var _ClearIcon, _ArrowDropDownIcon;
    const _excluded$Y = ["autoComplete", "autoHighlight", "autoSelect", "blurOnSelect", "ChipProps", "className", "clearIcon", "clearOnBlur", "clearOnEscape", "clearText", "closeText", "componentsProps", "defaultValue", "disableClearable", "disableCloseOnSelect", "disabled", "disabledItemsFocusable", "disableListWrap", "disablePortal", "filterOptions", "filterSelectedOptions", "forcePopupIcon", "freeSolo", "fullWidth", "getLimitTagsText", "getOptionDisabled", "getOptionLabel", "isOptionEqualToValue", "groupBy", "handleHomeEndKeys", "id", "includeInputInList", "inputValue", "limitTags", "ListboxComponent", "ListboxProps", "loading", "loadingText", "multiple", "noOptionsText", "onChange", "onClose", "onHighlightChange", "onInputChange", "onOpen", "open", "openOnFocus", "openText", "options", "PaperComponent", "PopperComponent", "popupIcon", "readOnly", "renderGroup", "renderInput", "renderOption", "renderTags", "selectOnFocus", "size", "slotProps", "value"];
    const useUtilityClasses$F = (ownerState) => {
      const {
        classes,
        disablePortal,
        expanded,
        focused,
        fullWidth,
        hasClearIcon,
        hasPopupIcon,
        inputFocused,
        popupOpen,
        size
      } = ownerState;
      const slots = {
        root: ["root", expanded && "expanded", focused && "focused", fullWidth && "fullWidth", hasClearIcon && "hasClearIcon", hasPopupIcon && "hasPopupIcon"],
        inputRoot: ["inputRoot"],
        input: ["input", inputFocused && "inputFocused"],
        tag: ["tag", `tagSize${capitalize(size)}`],
        endAdornment: ["endAdornment"],
        clearIndicator: ["clearIndicator"],
        popupIndicator: ["popupIndicator", popupOpen && "popupIndicatorOpen"],
        popper: ["popper", disablePortal && "popperDisablePortal"],
        paper: ["paper"],
        listbox: ["listbox"],
        loading: ["loading"],
        noOptions: ["noOptions"],
        option: ["option"],
        groupLabel: ["groupLabel"],
        groupUl: ["groupUl"]
      };
      return composeClasses(slots, getAutocompleteUtilityClass, classes);
    };
    const AutocompleteRoot = styled$1("div", {
      name: "MuiAutocomplete",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        const {
          fullWidth,
          hasClearIcon,
          hasPopupIcon,
          inputFocused,
          size
        } = ownerState;
        return [{
          [`& .${autocompleteClasses$1.tag}`]: styles2.tag
        }, {
          [`& .${autocompleteClasses$1.tag}`]: styles2[`tagSize${capitalize(size)}`]
        }, {
          [`& .${autocompleteClasses$1.inputRoot}`]: styles2.inputRoot
        }, {
          [`& .${autocompleteClasses$1.input}`]: styles2.input
        }, {
          [`& .${autocompleteClasses$1.input}`]: inputFocused && styles2.inputFocused
        }, styles2.root, fullWidth && styles2.fullWidth, hasPopupIcon && styles2.hasPopupIcon, hasClearIcon && styles2.hasClearIcon];
      }
    })(({
      ownerState
    }) => _extends$1({
      [`&.${autocompleteClasses$1.focused} .${autocompleteClasses$1.clearIndicator}`]: {
        visibility: "visible"
      },
      "@media (pointer: fine)": {
        [`&:hover .${autocompleteClasses$1.clearIndicator}`]: {
          visibility: "visible"
        }
      }
    }, ownerState.fullWidth && {
      width: "100%"
    }, {
      [`& .${autocompleteClasses$1.tag}`]: _extends$1({
        margin: 3,
        maxWidth: "calc(100% - 6px)"
      }, ownerState.size === "small" && {
        margin: 2,
        maxWidth: "calc(100% - 4px)"
      }),
      [`& .${autocompleteClasses$1.inputRoot}`]: {
        flexWrap: "wrap",
        [`.${autocompleteClasses$1.hasPopupIcon}&, .${autocompleteClasses$1.hasClearIcon}&`]: {
          paddingRight: 26 + 4
        },
        [`.${autocompleteClasses$1.hasPopupIcon}.${autocompleteClasses$1.hasClearIcon}&`]: {
          paddingRight: 52 + 4
        },
        [`& .${autocompleteClasses$1.input}`]: {
          width: 0,
          minWidth: 30
        }
      },
      [`& .${inputClasses$1.root}`]: {
        paddingBottom: 1,
        "& .MuiInput-input": {
          padding: "4px 4px 4px 0px"
        }
      },
      [`& .${inputClasses$1.root}.${inputBaseClasses$1.sizeSmall}`]: {
        [`& .${inputClasses$1.input}`]: {
          padding: "2px 4px 3px 0"
        }
      },
      [`& .${outlinedInputClasses$1.root}`]: {
        padding: 9,
        [`.${autocompleteClasses$1.hasPopupIcon}&, .${autocompleteClasses$1.hasClearIcon}&`]: {
          paddingRight: 26 + 4 + 9
        },
        [`.${autocompleteClasses$1.hasPopupIcon}.${autocompleteClasses$1.hasClearIcon}&`]: {
          paddingRight: 52 + 4 + 9
        },
        [`& .${autocompleteClasses$1.input}`]: {
          padding: "7.5px 4px 7.5px 5px"
        },
        [`& .${autocompleteClasses$1.endAdornment}`]: {
          right: 9
        }
      },
      [`& .${outlinedInputClasses$1.root}.${inputBaseClasses$1.sizeSmall}`]: {
        paddingTop: 6,
        paddingBottom: 6,
        paddingLeft: 6,
        [`& .${autocompleteClasses$1.input}`]: {
          padding: "2.5px 4px 2.5px 8px"
        }
      },
      [`& .${filledInputClasses$1.root}`]: {
        paddingTop: 19,
        paddingLeft: 8,
        [`.${autocompleteClasses$1.hasPopupIcon}&, .${autocompleteClasses$1.hasClearIcon}&`]: {
          paddingRight: 26 + 4 + 9
        },
        [`.${autocompleteClasses$1.hasPopupIcon}.${autocompleteClasses$1.hasClearIcon}&`]: {
          paddingRight: 52 + 4 + 9
        },
        [`& .${filledInputClasses$1.input}`]: {
          padding: "7px 4px"
        },
        [`& .${autocompleteClasses$1.endAdornment}`]: {
          right: 9
        }
      },
      [`& .${filledInputClasses$1.root}.${inputBaseClasses$1.sizeSmall}`]: {
        paddingBottom: 1,
        [`& .${filledInputClasses$1.input}`]: {
          padding: "2.5px 4px"
        }
      },
      [`& .${inputBaseClasses$1.hiddenLabel}`]: {
        paddingTop: 8
      },
      [`& .${filledInputClasses$1.root}.${inputBaseClasses$1.hiddenLabel}`]: {
        paddingTop: 0,
        paddingBottom: 0,
        [`& .${autocompleteClasses$1.input}`]: {
          paddingTop: 16,
          paddingBottom: 17
        }
      },
      [`& .${filledInputClasses$1.root}.${inputBaseClasses$1.hiddenLabel}.${inputBaseClasses$1.sizeSmall}`]: {
        [`& .${autocompleteClasses$1.input}`]: {
          paddingTop: 8,
          paddingBottom: 9
        }
      },
      [`& .${autocompleteClasses$1.input}`]: _extends$1({
        flexGrow: 1,
        textOverflow: "ellipsis",
        opacity: 0
      }, ownerState.inputFocused && {
        opacity: 1
      })
    }));
    const AutocompleteEndAdornment = styled$1("div", {
      name: "MuiAutocomplete",
      slot: "EndAdornment",
      overridesResolver: (props, styles2) => styles2.endAdornment
    })({
      position: "absolute",
      right: 0,
      top: "calc(50% - 14px)"
    });
    const AutocompleteClearIndicator = styled$1(IconButton$1, {
      name: "MuiAutocomplete",
      slot: "ClearIndicator",
      overridesResolver: (props, styles2) => styles2.clearIndicator
    })({
      marginRight: -2,
      padding: 4,
      visibility: "hidden"
    });
    const AutocompletePopupIndicator = styled$1(IconButton$1, {
      name: "MuiAutocomplete",
      slot: "PopupIndicator",
      overridesResolver: ({
        ownerState
      }, styles2) => _extends$1({}, styles2.popupIndicator, ownerState.popupOpen && styles2.popupIndicatorOpen)
    })(({
      ownerState
    }) => _extends$1({
      padding: 2,
      marginRight: -2
    }, ownerState.popupOpen && {
      transform: "rotate(180deg)"
    }));
    const AutocompletePopper = styled$1(Popper$1, {
      name: "MuiAutocomplete",
      slot: "Popper",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [{
          [`& .${autocompleteClasses$1.option}`]: styles2.option
        }, styles2.popper, ownerState.disablePortal && styles2.popperDisablePortal];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      zIndex: (theme.vars || theme).zIndex.modal
    }, ownerState.disablePortal && {
      position: "absolute"
    }));
    const AutocompletePaper = styled$1(Paper$1, {
      name: "MuiAutocomplete",
      slot: "Paper",
      overridesResolver: (props, styles2) => styles2.paper
    })(({
      theme
    }) => _extends$1({}, theme.typography.body1, {
      overflow: "auto"
    }));
    const AutocompleteLoading = styled$1("div", {
      name: "MuiAutocomplete",
      slot: "Loading",
      overridesResolver: (props, styles2) => styles2.loading
    })(({
      theme
    }) => ({
      color: (theme.vars || theme).palette.text.secondary,
      padding: "14px 16px"
    }));
    const AutocompleteNoOptions = styled$1("div", {
      name: "MuiAutocomplete",
      slot: "NoOptions",
      overridesResolver: (props, styles2) => styles2.noOptions
    })(({
      theme
    }) => ({
      color: (theme.vars || theme).palette.text.secondary,
      padding: "14px 16px"
    }));
    const AutocompleteListbox = styled$1("div", {
      name: "MuiAutocomplete",
      slot: "Listbox",
      overridesResolver: (props, styles2) => styles2.listbox
    })(({
      theme
    }) => ({
      listStyle: "none",
      margin: 0,
      padding: "8px 0",
      maxHeight: "40vh",
      overflow: "auto",
      position: "relative",
      [`& .${autocompleteClasses$1.option}`]: {
        minHeight: 48,
        display: "flex",
        overflow: "hidden",
        justifyContent: "flex-start",
        alignItems: "center",
        cursor: "pointer",
        paddingTop: 6,
        boxSizing: "border-box",
        outline: "0",
        WebkitTapHighlightColor: "transparent",
        paddingBottom: 6,
        paddingLeft: 16,
        paddingRight: 16,
        [theme.breakpoints.up("sm")]: {
          minHeight: "auto"
        },
        [`&.${autocompleteClasses$1.focused}`]: {
          backgroundColor: (theme.vars || theme).palette.action.hover,
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        },
        '&[aria-disabled="true"]': {
          opacity: (theme.vars || theme).palette.action.disabledOpacity,
          pointerEvents: "none"
        },
        [`&.${autocompleteClasses$1.focusVisible}`]: {
          backgroundColor: (theme.vars || theme).palette.action.focus
        },
        '&[aria-selected="true"]': {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
          [`&.${autocompleteClasses$1.focused}`]: {
            backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: (theme.vars || theme).palette.action.selected
            }
          },
          [`&.${autocompleteClasses$1.focusVisible}`]: {
            backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
          }
        }
      }
    }));
    const AutocompleteGroupLabel = styled$1(ListSubheader$1, {
      name: "MuiAutocomplete",
      slot: "GroupLabel",
      overridesResolver: (props, styles2) => styles2.groupLabel
    })(({
      theme
    }) => ({
      backgroundColor: (theme.vars || theme).palette.background.paper,
      top: -8
    }));
    const AutocompleteGroupUl = styled$1("ul", {
      name: "MuiAutocomplete",
      slot: "GroupUl",
      overridesResolver: (props, styles2) => styles2.groupUl
    })({
      padding: 0,
      [`& .${autocompleteClasses$1.option}`]: {
        paddingLeft: 24
      }
    });
    const Autocomplete = /* @__PURE__ */ react.exports.forwardRef(function Autocomplete2(inProps, ref) {
      var _slotProps$clearIndic, _slotProps$paper, _slotProps$popper, _slotProps$popupIndic;
      const props = useThemeProps({
        props: inProps,
        name: "MuiAutocomplete"
      });
      const {
        autoComplete = false,
        autoHighlight = false,
        autoSelect = false,
        blurOnSelect = false,
        ChipProps,
        className,
        clearIcon = _ClearIcon || (_ClearIcon = /* @__PURE__ */ jsx(ClearIcon, {
          fontSize: "small"
        })),
        clearOnBlur = !props.freeSolo,
        clearOnEscape = false,
        clearText = "Clear",
        closeText = "Close",
        componentsProps = {},
        defaultValue: defaultValue2 = props.multiple ? [] : null,
        disableClearable = false,
        disableCloseOnSelect = false,
        disabled = false,
        disabledItemsFocusable = false,
        disableListWrap = false,
        disablePortal = false,
        filterSelectedOptions = false,
        forcePopupIcon = "auto",
        freeSolo = false,
        fullWidth = false,
        getLimitTagsText = (more) => `+${more}`,
        getOptionLabel = (option) => {
          var _option$label;
          return (_option$label = option.label) != null ? _option$label : option;
        },
        groupBy,
        handleHomeEndKeys = !props.freeSolo,
        includeInputInList = false,
        limitTags = -1,
        ListboxComponent = "ul",
        ListboxProps,
        loading = false,
        loadingText = "Loading\u2026",
        multiple = false,
        noOptionsText = "No options",
        openOnFocus = false,
        openText = "Open",
        PaperComponent = Paper$1,
        PopperComponent = Popper$1,
        popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /* @__PURE__ */ jsx(ArrowDropDownIcon, {})),
        readOnly = false,
        renderGroup: renderGroupProp,
        renderInput,
        renderOption: renderOptionProp,
        renderTags,
        selectOnFocus = !props.freeSolo,
        size = "medium",
        slotProps = {}
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$Y);
      const {
        getRootProps,
        getInputProps,
        getInputLabelProps,
        getPopupIndicatorProps,
        getClearProps,
        getTagProps,
        getListboxProps,
        getOptionProps,
        value: value2,
        dirty,
        expanded,
        id,
        popupOpen,
        focused,
        focusedTag,
        anchorEl,
        setAnchorEl,
        inputValue,
        groupedOptions
      } = useAutocomplete(_extends$1({}, props, {
        componentName: "Autocomplete"
      }));
      const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;
      const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;
      const {
        onMouseDown: handleInputMouseDown
      } = getInputProps();
      const ownerState = _extends$1({}, props, {
        disablePortal,
        expanded,
        focused,
        fullWidth,
        hasClearIcon,
        hasPopupIcon,
        inputFocused: focusedTag === -1,
        popupOpen,
        size
      });
      const classes = useUtilityClasses$F(ownerState);
      let startAdornment;
      if (multiple && value2.length > 0) {
        const getCustomizedTagProps = (params) => _extends$1({
          className: classes.tag,
          disabled
        }, getTagProps(params));
        if (renderTags) {
          startAdornment = renderTags(value2, getCustomizedTagProps, ownerState);
        } else {
          startAdornment = value2.map((option, index) => /* @__PURE__ */ jsx(Chip$1, _extends$1({
            label: getOptionLabel(option),
            size
          }, getCustomizedTagProps({
            index
          }), ChipProps)));
        }
      }
      if (limitTags > -1 && Array.isArray(startAdornment)) {
        const more = startAdornment.length - limitTags;
        if (!focused && more > 0) {
          startAdornment = startAdornment.splice(0, limitTags);
          startAdornment.push(/* @__PURE__ */ jsx("span", {
            className: classes.tag,
            children: getLimitTagsText(more)
          }, startAdornment.length));
        }
      }
      const defaultRenderGroup = (params) => /* @__PURE__ */ jsxs("li", {
        children: [/* @__PURE__ */ jsx(AutocompleteGroupLabel, {
          className: classes.groupLabel,
          ownerState,
          component: "div",
          children: params.group
        }), /* @__PURE__ */ jsx(AutocompleteGroupUl, {
          className: classes.groupUl,
          ownerState,
          children: params.children
        })]
      }, params.key);
      const renderGroup = renderGroupProp || defaultRenderGroup;
      const defaultRenderOption = (props2, option) => /* @__PURE__ */ jsx("li", _extends$1({}, props2, {
        children: getOptionLabel(option)
      }));
      const renderOption = renderOptionProp || defaultRenderOption;
      const renderListOption = (option, index) => {
        const optionProps = getOptionProps({
          option,
          index
        });
        return renderOption(_extends$1({}, optionProps, {
          className: classes.option
        }), option, {
          selected: optionProps["aria-selected"],
          index,
          inputValue
        });
      };
      const clearIndicatorSlotProps = (_slotProps$clearIndic = slotProps.clearIndicator) != null ? _slotProps$clearIndic : componentsProps.clearIndicator;
      const paperSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : componentsProps.paper;
      const popperSlotProps = (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper;
      const popupIndicatorSlotProps = (_slotProps$popupIndic = slotProps.popupIndicator) != null ? _slotProps$popupIndic : componentsProps.popupIndicator;
      return /* @__PURE__ */ jsxs(react.exports.Fragment, {
        children: [/* @__PURE__ */ jsx(AutocompleteRoot, _extends$1({
          ref,
          className: clsx(classes.root, className),
          ownerState
        }, getRootProps(other), {
          children: renderInput({
            id,
            disabled,
            fullWidth: true,
            size: size === "small" ? "small" : void 0,
            InputLabelProps: getInputLabelProps(),
            InputProps: _extends$1({
              ref: setAnchorEl,
              className: classes.inputRoot,
              startAdornment,
              onClick: (event) => {
                if (event.target === event.currentTarget) {
                  handleInputMouseDown(event);
                }
              }
            }, (hasClearIcon || hasPopupIcon) && {
              endAdornment: /* @__PURE__ */ jsxs(AutocompleteEndAdornment, {
                className: classes.endAdornment,
                ownerState,
                children: [hasClearIcon ? /* @__PURE__ */ jsx(AutocompleteClearIndicator, _extends$1({}, getClearProps(), {
                  "aria-label": clearText,
                  title: clearText,
                  ownerState
                }, clearIndicatorSlotProps, {
                  className: clsx(classes.clearIndicator, clearIndicatorSlotProps == null ? void 0 : clearIndicatorSlotProps.className),
                  children: clearIcon
                })) : null, hasPopupIcon ? /* @__PURE__ */ jsx(AutocompletePopupIndicator, _extends$1({}, getPopupIndicatorProps(), {
                  disabled,
                  "aria-label": popupOpen ? closeText : openText,
                  title: popupOpen ? closeText : openText,
                  ownerState
                }, popupIndicatorSlotProps, {
                  className: clsx(classes.popupIndicator, popupIndicatorSlotProps == null ? void 0 : popupIndicatorSlotProps.className),
                  children: popupIcon
                })) : null]
              })
            }),
            inputProps: _extends$1({
              className: classes.input,
              disabled,
              readOnly
            }, getInputProps())
          })
        })), anchorEl ? /* @__PURE__ */ jsx(AutocompletePopper, _extends$1({
          as: PopperComponent,
          disablePortal,
          style: {
            width: anchorEl ? anchorEl.clientWidth : null
          },
          ownerState,
          role: "presentation",
          anchorEl,
          open: popupOpen
        }, popperSlotProps, {
          className: clsx(classes.popper, popperSlotProps == null ? void 0 : popperSlotProps.className),
          children: /* @__PURE__ */ jsxs(AutocompletePaper, _extends$1({
            ownerState,
            as: PaperComponent
          }, paperSlotProps, {
            className: clsx(classes.paper, paperSlotProps == null ? void 0 : paperSlotProps.className),
            children: [loading && groupedOptions.length === 0 ? /* @__PURE__ */ jsx(AutocompleteLoading, {
              className: classes.loading,
              ownerState,
              children: loadingText
            }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /* @__PURE__ */ jsx(AutocompleteNoOptions, {
              className: classes.noOptions,
              ownerState,
              role: "presentation",
              onMouseDown: (event) => {
                event.preventDefault();
              },
              children: noOptionsText
            }) : null, groupedOptions.length > 0 ? /* @__PURE__ */ jsx(AutocompleteListbox, _extends$1({
              as: ListboxComponent,
              className: classes.listbox,
              ownerState
            }, getListboxProps(), ListboxProps, {
              children: groupedOptions.map((option, index) => {
                if (groupBy) {
                  return renderGroup({
                    key: option.key,
                    group: option.group,
                    children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))
                  });
                }
                return renderListOption(option, index);
              })
            })) : null]
          }))
        })) : null]
      });
    });
    Autocomplete.propTypes = {
      autoComplete: propTypes.exports.bool,
      autoHighlight: propTypes.exports.bool,
      autoSelect: propTypes.exports.bool,
      blurOnSelect: propTypes.exports.oneOfType([propTypes.exports.oneOf(["mouse", "touch"]), propTypes.exports.bool]),
      ChipProps: propTypes.exports.object,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      clearIcon: propTypes.exports.node,
      clearOnBlur: propTypes.exports.bool,
      clearOnEscape: propTypes.exports.bool,
      clearText: propTypes.exports.string,
      closeText: propTypes.exports.string,
      componentsProps: propTypes.exports.shape({
        clearIndicator: propTypes.exports.object,
        paper: propTypes.exports.object,
        popper: propTypes.exports.object,
        popupIndicator: propTypes.exports.object
      }),
      defaultValue: chainPropTypes(propTypes.exports.any, (props) => {
        if (props.multiple && props.defaultValue !== void 0 && !Array.isArray(props.defaultValue)) {
          return new Error(["MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.", `However, ${props.defaultValue} was provided.`].join("\n"));
        }
        return null;
      }),
      disableClearable: propTypes.exports.bool,
      disableCloseOnSelect: propTypes.exports.bool,
      disabled: propTypes.exports.bool,
      disabledItemsFocusable: propTypes.exports.bool,
      disableListWrap: propTypes.exports.bool,
      disablePortal: propTypes.exports.bool,
      filterOptions: propTypes.exports.func,
      filterSelectedOptions: propTypes.exports.bool,
      forcePopupIcon: propTypes.exports.oneOfType([propTypes.exports.oneOf(["auto"]), propTypes.exports.bool]),
      freeSolo: propTypes.exports.bool,
      fullWidth: propTypes.exports.bool,
      getLimitTagsText: propTypes.exports.func,
      getOptionDisabled: propTypes.exports.func,
      getOptionLabel: propTypes.exports.func,
      groupBy: propTypes.exports.func,
      handleHomeEndKeys: propTypes.exports.bool,
      id: propTypes.exports.string,
      includeInputInList: propTypes.exports.bool,
      inputValue: propTypes.exports.string,
      isOptionEqualToValue: propTypes.exports.func,
      limitTags: integerPropType,
      ListboxComponent: propTypes.exports.elementType,
      ListboxProps: propTypes.exports.object,
      loading: propTypes.exports.bool,
      loadingText: propTypes.exports.node,
      multiple: propTypes.exports.bool,
      noOptionsText: propTypes.exports.node,
      onChange: propTypes.exports.func,
      onClose: propTypes.exports.func,
      onHighlightChange: propTypes.exports.func,
      onInputChange: propTypes.exports.func,
      onOpen: propTypes.exports.func,
      open: propTypes.exports.bool,
      openOnFocus: propTypes.exports.bool,
      openText: propTypes.exports.string,
      options: propTypes.exports.array.isRequired,
      PaperComponent: propTypes.exports.elementType,
      PopperComponent: propTypes.exports.elementType,
      popupIcon: propTypes.exports.node,
      readOnly: propTypes.exports.bool,
      renderGroup: propTypes.exports.func,
      renderInput: propTypes.exports.func.isRequired,
      renderOption: propTypes.exports.func,
      renderTags: propTypes.exports.func,
      selectOnFocus: propTypes.exports.bool,
      size: propTypes.exports.oneOfType([propTypes.exports.oneOf(["small", "medium"]), propTypes.exports.string]),
      slotProps: propTypes.exports.shape({
        clearIndicator: propTypes.exports.object,
        paper: propTypes.exports.object,
        popper: propTypes.exports.object,
        popupIndicator: propTypes.exports.object
      }),
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      value: chainPropTypes(propTypes.exports.any, (props) => {
        if (props.multiple && props.value !== void 0 && !Array.isArray(props.value)) {
          return new Error(["MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.", `However, ${props.value} was provided.`].join("\n"));
        }
        return null;
      })
    };
    const Autocomplete$1 = Autocomplete;
    function getButtonGroupUtilityClass(slot) {
      return generateUtilityClass("MuiButtonGroup", slot);
    }
    const buttonGroupClasses = generateUtilityClasses("MuiButtonGroup", ["root", "contained", "outlined", "text", "disableElevation", "disabled", "fullWidth", "vertical", "grouped", "groupedHorizontal", "groupedVertical", "groupedText", "groupedTextHorizontal", "groupedTextVertical", "groupedTextPrimary", "groupedTextSecondary", "groupedOutlined", "groupedOutlinedHorizontal", "groupedOutlinedVertical", "groupedOutlinedPrimary", "groupedOutlinedSecondary", "groupedContained", "groupedContainedHorizontal", "groupedContainedVertical", "groupedContainedPrimary", "groupedContainedSecondary"]);
    const buttonGroupClasses$1 = buttonGroupClasses;
    const _excluded$X = ["children", "className", "color", "component", "disabled", "disableElevation", "disableFocusRipple", "disableRipple", "fullWidth", "orientation", "size", "variant"];
    const overridesResolver$3 = (props, styles2) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${buttonGroupClasses$1.grouped}`]: styles2.grouped
      }, {
        [`& .${buttonGroupClasses$1.grouped}`]: styles2[`grouped${capitalize(ownerState.orientation)}`]
      }, {
        [`& .${buttonGroupClasses$1.grouped}`]: styles2[`grouped${capitalize(ownerState.variant)}`]
      }, {
        [`& .${buttonGroupClasses$1.grouped}`]: styles2[`grouped${capitalize(ownerState.variant)}${capitalize(ownerState.orientation)}`]
      }, {
        [`& .${buttonGroupClasses$1.grouped}`]: styles2[`grouped${capitalize(ownerState.variant)}${capitalize(ownerState.color)}`]
      }, styles2.root, styles2[ownerState.variant], ownerState.disableElevation === true && styles2.disableElevation, ownerState.fullWidth && styles2.fullWidth, ownerState.orientation === "vertical" && styles2.vertical];
    };
    const useUtilityClasses$E = (ownerState) => {
      const {
        classes,
        color: color2,
        disabled,
        disableElevation,
        fullWidth,
        orientation,
        variant
      } = ownerState;
      const slots = {
        root: ["root", variant, orientation === "vertical" && "vertical", fullWidth && "fullWidth", disableElevation && "disableElevation"],
        grouped: ["grouped", `grouped${capitalize(orientation)}`, `grouped${capitalize(variant)}`, `grouped${capitalize(variant)}${capitalize(orientation)}`, `grouped${capitalize(variant)}${capitalize(color2)}`, disabled && "disabled"]
      };
      return composeClasses(slots, getButtonGroupUtilityClass, classes);
    };
    const ButtonGroupRoot = styled$1("div", {
      name: "MuiButtonGroup",
      slot: "Root",
      overridesResolver: overridesResolver$3
    })(({
      theme,
      ownerState
    }) => _extends$1({
      display: "inline-flex",
      borderRadius: (theme.vars || theme).shape.borderRadius
    }, ownerState.variant === "contained" && {
      boxShadow: (theme.vars || theme).shadows[2]
    }, ownerState.disableElevation && {
      boxShadow: "none"
    }, ownerState.fullWidth && {
      width: "100%"
    }, ownerState.orientation === "vertical" && {
      flexDirection: "column"
    }, {
      [`& .${buttonGroupClasses$1.grouped}`]: _extends$1({
        minWidth: 40,
        "&:not(:first-of-type)": _extends$1({}, ownerState.orientation === "horizontal" && {
          borderTopLeftRadius: 0,
          borderBottomLeftRadius: 0
        }, ownerState.orientation === "vertical" && {
          borderTopRightRadius: 0,
          borderTopLeftRadius: 0
        }, ownerState.variant === "outlined" && ownerState.orientation === "horizontal" && {
          marginLeft: -1
        }, ownerState.variant === "outlined" && ownerState.orientation === "vertical" && {
          marginTop: -1
        }),
        "&:not(:last-of-type)": _extends$1({}, ownerState.orientation === "horizontal" && {
          borderTopRightRadius: 0,
          borderBottomRightRadius: 0
        }, ownerState.orientation === "vertical" && {
          borderBottomRightRadius: 0,
          borderBottomLeftRadius: 0
        }, ownerState.variant === "text" && ownerState.orientation === "horizontal" && {
          borderRight: theme.vars ? `1px solid rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"}`,
          [`&.${buttonGroupClasses$1.disabled}`]: {
            borderRight: `1px solid ${(theme.vars || theme).palette.action.disabled}`
          }
        }, ownerState.variant === "text" && ownerState.orientation === "vertical" && {
          borderBottom: theme.vars ? `1px solid rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"}`,
          [`&.${buttonGroupClasses$1.disabled}`]: {
            borderBottom: `1px solid ${(theme.vars || theme).palette.action.disabled}`
          }
        }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
          borderColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : alpha(theme.palette[ownerState.color].main, 0.5)
        }, ownerState.variant === "outlined" && ownerState.orientation === "horizontal" && {
          borderRightColor: "transparent"
        }, ownerState.variant === "outlined" && ownerState.orientation === "vertical" && {
          borderBottomColor: "transparent"
        }, ownerState.variant === "contained" && ownerState.orientation === "horizontal" && {
          borderRight: `1px solid ${(theme.vars || theme).palette.grey[400]}`,
          [`&.${buttonGroupClasses$1.disabled}`]: {
            borderRight: `1px solid ${(theme.vars || theme).palette.action.disabled}`
          }
        }, ownerState.variant === "contained" && ownerState.orientation === "vertical" && {
          borderBottom: `1px solid ${(theme.vars || theme).palette.grey[400]}`,
          [`&.${buttonGroupClasses$1.disabled}`]: {
            borderBottom: `1px solid ${(theme.vars || theme).palette.action.disabled}`
          }
        }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
          borderColor: (theme.vars || theme).palette[ownerState.color].dark
        }, {
          "&:hover": _extends$1({}, ownerState.variant === "outlined" && ownerState.orientation === "horizontal" && {
            borderRightColor: "currentColor"
          }, ownerState.variant === "outlined" && ownerState.orientation === "vertical" && {
            borderBottomColor: "currentColor"
          })
        }),
        "&:hover": _extends$1({}, ownerState.variant === "contained" && {
          boxShadow: "none"
        })
      }, ownerState.variant === "contained" && {
        boxShadow: "none"
      })
    }));
    const ButtonGroup = /* @__PURE__ */ react.exports.forwardRef(function ButtonGroup2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiButtonGroup"
      });
      const {
        children,
        className,
        color: color2 = "primary",
        component = "div",
        disabled = false,
        disableElevation = false,
        disableFocusRipple = false,
        disableRipple = false,
        fullWidth = false,
        orientation = "horizontal",
        size = "medium",
        variant = "outlined"
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$X);
      const ownerState = _extends$1({}, props, {
        color: color2,
        component,
        disabled,
        disableElevation,
        disableFocusRipple,
        disableRipple,
        fullWidth,
        orientation,
        size,
        variant
      });
      const classes = useUtilityClasses$E(ownerState);
      const context2 = react.exports.useMemo(() => ({
        className: classes.grouped,
        color: color2,
        disabled,
        disableElevation,
        disableFocusRipple,
        disableRipple,
        fullWidth,
        size,
        variant
      }), [color2, disabled, disableElevation, disableFocusRipple, disableRipple, fullWidth, size, variant, classes.grouped]);
      return /* @__PURE__ */ jsx(ButtonGroupRoot, _extends$1({
        as: component,
        role: "group",
        className: clsx(classes.root, className),
        ref,
        ownerState
      }, other, {
        children: /* @__PURE__ */ jsx(ButtonGroupContext$1.Provider, {
          value: context2,
          children
        })
      }));
    });
    ButtonGroup.propTypes = {
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      color: propTypes.exports.oneOfType([propTypes.exports.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), propTypes.exports.string]),
      component: propTypes.exports.elementType,
      disabled: propTypes.exports.bool,
      disableElevation: propTypes.exports.bool,
      disableFocusRipple: propTypes.exports.bool,
      disableRipple: propTypes.exports.bool,
      fullWidth: propTypes.exports.bool,
      orientation: propTypes.exports.oneOf(["horizontal", "vertical"]),
      size: propTypes.exports.oneOfType([propTypes.exports.oneOf(["small", "medium", "large"]), propTypes.exports.string]),
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      variant: propTypes.exports.oneOfType([propTypes.exports.oneOf(["contained", "outlined", "text"]), propTypes.exports.string])
    };
    const ButtonGroup$1 = ButtonGroup;
    function getSwitchBaseUtilityClass(slot) {
      return generateUtilityClass("PrivateSwitchBase", slot);
    }
    generateUtilityClasses("PrivateSwitchBase", ["root", "checked", "disabled", "input", "edgeStart", "edgeEnd"]);
    const _excluded$W = ["autoFocus", "checked", "checkedIcon", "className", "defaultChecked", "disabled", "disableFocusRipple", "edge", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"];
    const useUtilityClasses$D = (ownerState) => {
      const {
        classes,
        checked,
        disabled,
        edge
      } = ownerState;
      const slots = {
        root: ["root", checked && "checked", disabled && "disabled", edge && `edge${capitalize(edge)}`],
        input: ["input"]
      };
      return composeClasses(slots, getSwitchBaseUtilityClass, classes);
    };
    const SwitchBaseRoot = styled$1(ButtonBase$1)(({
      ownerState
    }) => _extends$1({
      padding: 9,
      borderRadius: "50%"
    }, ownerState.edge === "start" && {
      marginLeft: ownerState.size === "small" ? -3 : -12
    }, ownerState.edge === "end" && {
      marginRight: ownerState.size === "small" ? -3 : -12
    }));
    const SwitchBaseInput = styled$1("input")({
      cursor: "inherit",
      position: "absolute",
      opacity: 0,
      width: "100%",
      height: "100%",
      top: 0,
      left: 0,
      margin: 0,
      padding: 0,
      zIndex: 1
    });
    const SwitchBase = /* @__PURE__ */ react.exports.forwardRef(function SwitchBase2(props, ref) {
      const {
        autoFocus,
        checked: checkedProp,
        checkedIcon,
        className,
        defaultChecked,
        disabled: disabledProp,
        disableFocusRipple = false,
        edge = false,
        icon,
        id,
        inputProps,
        inputRef,
        name,
        onBlur,
        onChange,
        onFocus,
        readOnly,
        required = false,
        tabIndex,
        type,
        value: value2
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$W);
      const [checked, setCheckedState] = useControlled({
        controlled: checkedProp,
        default: Boolean(defaultChecked),
        name: "SwitchBase",
        state: "checked"
      });
      const muiFormControl = useFormControl();
      const handleFocus = (event) => {
        if (onFocus) {
          onFocus(event);
        }
        if (muiFormControl && muiFormControl.onFocus) {
          muiFormControl.onFocus(event);
        }
      };
      const handleBlur = (event) => {
        if (onBlur) {
          onBlur(event);
        }
        if (muiFormControl && muiFormControl.onBlur) {
          muiFormControl.onBlur(event);
        }
      };
      const handleInputChange = (event) => {
        if (event.nativeEvent.defaultPrevented) {
          return;
        }
        const newChecked = event.target.checked;
        setCheckedState(newChecked);
        if (onChange) {
          onChange(event, newChecked);
        }
      };
      let disabled = disabledProp;
      if (muiFormControl) {
        if (typeof disabled === "undefined") {
          disabled = muiFormControl.disabled;
        }
      }
      const hasLabelFor = type === "checkbox" || type === "radio";
      const ownerState = _extends$1({}, props, {
        checked,
        disabled,
        disableFocusRipple,
        edge
      });
      const classes = useUtilityClasses$D(ownerState);
      return /* @__PURE__ */ jsxs(SwitchBaseRoot, _extends$1({
        component: "span",
        className: clsx(classes.root, className),
        centerRipple: true,
        focusRipple: !disableFocusRipple,
        disabled,
        tabIndex: null,
        role: void 0,
        onFocus: handleFocus,
        onBlur: handleBlur,
        ownerState,
        ref
      }, other, {
        children: [/* @__PURE__ */ jsx(SwitchBaseInput, _extends$1({
          autoFocus,
          checked: checkedProp,
          defaultChecked,
          className: classes.input,
          disabled,
          id: hasLabelFor ? id : void 0,
          name,
          onChange: handleInputChange,
          readOnly,
          ref: inputRef,
          required,
          ownerState,
          tabIndex,
          type
        }, type === "checkbox" && value2 === void 0 ? {} : {
          value: value2
        }, inputProps)), checked ? checkedIcon : icon]
      }));
    });
    SwitchBase.propTypes = {
      autoFocus: propTypes.exports.bool,
      checked: propTypes.exports.bool,
      checkedIcon: propTypes.exports.node.isRequired,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      defaultChecked: propTypes.exports.bool,
      disabled: propTypes.exports.bool,
      disableFocusRipple: propTypes.exports.bool,
      edge: propTypes.exports.oneOf(["end", "start", false]),
      icon: propTypes.exports.node.isRequired,
      id: propTypes.exports.string,
      inputProps: propTypes.exports.object,
      inputRef: refType$1,
      name: propTypes.exports.string,
      onBlur: propTypes.exports.func,
      onChange: propTypes.exports.func,
      onFocus: propTypes.exports.func,
      readOnly: propTypes.exports.bool,
      required: propTypes.exports.bool,
      sx: propTypes.exports.object,
      tabIndex: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),
      type: propTypes.exports.string.isRequired,
      value: propTypes.exports.any
    };
    const SwitchBase$1 = SwitchBase;
    const CheckBoxOutlineBlankIcon = createSvgIcon$1(/* @__PURE__ */ jsx("path", {
      d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
    }), "CheckBoxOutlineBlank");
    const CheckBoxIcon = createSvgIcon$1(/* @__PURE__ */ jsx("path", {
      d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
    }), "CheckBox");
    const IndeterminateCheckBoxIcon = createSvgIcon$1(/* @__PURE__ */ jsx("path", {
      d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
    }), "IndeterminateCheckBox");
    function getCheckboxUtilityClass(slot) {
      return generateUtilityClass("MuiCheckbox", slot);
    }
    const checkboxClasses = generateUtilityClasses("MuiCheckbox", ["root", "checked", "disabled", "indeterminate", "colorPrimary", "colorSecondary"]);
    const checkboxClasses$1 = checkboxClasses;
    const _excluded$V = ["checkedIcon", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size", "className"];
    const useUtilityClasses$C = (ownerState) => {
      const {
        classes,
        indeterminate,
        color: color2
      } = ownerState;
      const slots = {
        root: ["root", indeterminate && "indeterminate", `color${capitalize(color2)}`]
      };
      const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);
      return _extends$1({}, classes, composedClasses);
    };
    const CheckboxRoot = styled$1(SwitchBase$1, {
      shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
      name: "MuiCheckbox",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.indeterminate && styles2.indeterminate, ownerState.color !== "default" && styles2[`color${capitalize(ownerState.color)}`]];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      color: (theme.vars || theme).palette.text.secondary
    }, !ownerState.disableRipple && {
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${ownerState.color === "default" ? theme.vars.palette.action.activeChannel : theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === "default" ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }
    }, ownerState.color !== "default" && {
      [`&.${checkboxClasses$1.checked}, &.${checkboxClasses$1.indeterminate}`]: {
        color: (theme.vars || theme).palette[ownerState.color].main
      },
      [`&.${checkboxClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.action.disabled
      }
    }));
    const defaultCheckedIcon$1 = /* @__PURE__ */ jsx(CheckBoxIcon, {});
    const defaultIcon$1 = /* @__PURE__ */ jsx(CheckBoxOutlineBlankIcon, {});
    const defaultIndeterminateIcon = /* @__PURE__ */ jsx(IndeterminateCheckBoxIcon, {});
    const Checkbox = /* @__PURE__ */ react.exports.forwardRef(function Checkbox2(inProps, ref) {
      var _icon$props$fontSize, _indeterminateIcon$pr;
      const props = useThemeProps({
        props: inProps,
        name: "MuiCheckbox"
      });
      const {
        checkedIcon = defaultCheckedIcon$1,
        color: color2 = "primary",
        icon: iconProp = defaultIcon$1,
        indeterminate = false,
        indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,
        inputProps,
        size = "medium",
        className
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$V);
      const icon = indeterminate ? indeterminateIconProp : iconProp;
      const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
      const ownerState = _extends$1({}, props, {
        color: color2,
        indeterminate,
        size
      });
      const classes = useUtilityClasses$C(ownerState);
      return /* @__PURE__ */ jsx(CheckboxRoot, _extends$1({
        type: "checkbox",
        inputProps: _extends$1({
          "data-indeterminate": indeterminate
        }, inputProps),
        icon: /* @__PURE__ */ react.exports.cloneElement(icon, {
          fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size
        }),
        checkedIcon: /* @__PURE__ */ react.exports.cloneElement(indeterminateIcon, {
          fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size
        }),
        ownerState,
        ref,
        className: clsx(classes.root, className)
      }, other, {
        classes
      }));
    });
    Checkbox.propTypes = {
      checked: propTypes.exports.bool,
      checkedIcon: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      color: propTypes.exports.oneOfType([propTypes.exports.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), propTypes.exports.string]),
      defaultChecked: propTypes.exports.bool,
      disabled: propTypes.exports.bool,
      disableRipple: propTypes.exports.bool,
      icon: propTypes.exports.node,
      id: propTypes.exports.string,
      indeterminate: propTypes.exports.bool,
      indeterminateIcon: propTypes.exports.node,
      inputProps: propTypes.exports.object,
      inputRef: refType$1,
      onChange: propTypes.exports.func,
      required: propTypes.exports.bool,
      size: propTypes.exports.oneOfType([propTypes.exports.oneOf(["medium", "small"]), propTypes.exports.string]),
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      value: propTypes.exports.any
    };
    const Checkbox$1 = Checkbox;
    function getCircularProgressUtilityClass(slot) {
      return generateUtilityClass("MuiCircularProgress", slot);
    }
    generateUtilityClasses("MuiCircularProgress", ["root", "determinate", "indeterminate", "colorPrimary", "colorSecondary", "svg", "circle", "circleDeterminate", "circleIndeterminate", "circleDisableShrink"]);
    const _excluded$U = ["className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"];
    let _ = (t) => t, _t, _t2, _t3, _t4;
    const SIZE = 44;
    const circularRotateKeyframe = keyframes(_t || (_t = _`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`));
    const circularDashKeyframe = keyframes(_t2 || (_t2 = _`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`));
    const useUtilityClasses$B = (ownerState) => {
      const {
        classes,
        variant,
        color: color2,
        disableShrink
      } = ownerState;
      const slots = {
        root: ["root", variant, `color${capitalize(color2)}`],
        svg: ["svg"],
        circle: ["circle", `circle${capitalize(variant)}`, disableShrink && "circleDisableShrink"]
      };
      return composeClasses(slots, getCircularProgressUtilityClass, classes);
    };
    const CircularProgressRoot = styled$1("span", {
      name: "MuiCircularProgress",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, styles2[ownerState.variant], styles2[`color${capitalize(ownerState.color)}`]];
      }
    })(({
      ownerState,
      theme
    }) => _extends$1({
      display: "inline-block"
    }, ownerState.variant === "determinate" && {
      transition: theme.transitions.create("transform")
    }, ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].main
    }), ({
      ownerState
    }) => ownerState.variant === "indeterminate" && css(_t3 || (_t3 = _`
      animation: ${0} 1.4s linear infinite;
    `), circularRotateKeyframe));
    const CircularProgressSVG = styled$1("svg", {
      name: "MuiCircularProgress",
      slot: "Svg",
      overridesResolver: (props, styles2) => styles2.svg
    })({
      display: "block"
    });
    const CircularProgressCircle = styled$1("circle", {
      name: "MuiCircularProgress",
      slot: "Circle",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.circle, styles2[`circle${capitalize(ownerState.variant)}`], ownerState.disableShrink && styles2.circleDisableShrink];
      }
    })(({
      ownerState,
      theme
    }) => _extends$1({
      stroke: "currentColor"
    }, ownerState.variant === "determinate" && {
      transition: theme.transitions.create("stroke-dashoffset")
    }, ownerState.variant === "indeterminate" && {
      strokeDasharray: "80px, 200px",
      strokeDashoffset: 0
    }), ({
      ownerState
    }) => ownerState.variant === "indeterminate" && !ownerState.disableShrink && css(_t4 || (_t4 = _`
      animation: ${0} 1.4s ease-in-out infinite;
    `), circularDashKeyframe));
    const CircularProgress = /* @__PURE__ */ react.exports.forwardRef(function CircularProgress2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiCircularProgress"
      });
      const {
        className,
        color: color2 = "primary",
        disableShrink = false,
        size = 40,
        style: style2,
        thickness = 3.6,
        value: value2 = 0,
        variant = "indeterminate"
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$U);
      const ownerState = _extends$1({}, props, {
        color: color2,
        disableShrink,
        size,
        thickness,
        value: value2,
        variant
      });
      const classes = useUtilityClasses$B(ownerState);
      const circleStyle = {};
      const rootStyle = {};
      const rootProps = {};
      if (variant === "determinate") {
        const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
        circleStyle.strokeDasharray = circumference.toFixed(3);
        rootProps["aria-valuenow"] = Math.round(value2);
        circleStyle.strokeDashoffset = `${((100 - value2) / 100 * circumference).toFixed(3)}px`;
        rootStyle.transform = "rotate(-90deg)";
      }
      return /* @__PURE__ */ jsx(CircularProgressRoot, _extends$1({
        className: clsx(classes.root, className),
        style: _extends$1({
          width: size,
          height: size
        }, rootStyle, style2),
        ownerState,
        ref,
        role: "progressbar"
      }, rootProps, other, {
        children: /* @__PURE__ */ jsx(CircularProgressSVG, {
          className: classes.svg,
          ownerState,
          viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,
          children: /* @__PURE__ */ jsx(CircularProgressCircle, {
            className: classes.circle,
            style: circleStyle,
            ownerState,
            cx: SIZE,
            cy: SIZE,
            r: (SIZE - thickness) / 2,
            fill: "none",
            strokeWidth: thickness
          })
        })
      }));
    });
    CircularProgress.propTypes = {
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      color: propTypes.exports.oneOfType([propTypes.exports.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), propTypes.exports.string]),
      disableShrink: chainPropTypes(propTypes.exports.bool, (props) => {
        if (props.disableShrink && props.variant && props.variant !== "indeterminate") {
          return new Error("MUI: You have provided the `disableShrink` prop with a variant other than `indeterminate`. This will have no effect.");
        }
        return null;
      }),
      size: propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string]),
      style: propTypes.exports.object,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      thickness: propTypes.exports.number,
      value: propTypes.exports.number,
      variant: propTypes.exports.oneOf(["determinate", "indeterminate"])
    };
    const CircularProgress$1 = CircularProgress;
    const dividerClasses = generateUtilityClasses("MuiDivider", ["root", "absolute", "fullWidth", "inset", "middle", "flexItem", "light", "vertical", "withChildren", "withChildrenVertical", "textAlignRight", "textAlignLeft", "wrapper", "wrapperVertical"]);
    const dividerClasses$1 = dividerClasses;
    function getFormControlLabelUtilityClasses(slot) {
      return generateUtilityClass("MuiFormControlLabel", slot);
    }
    const formControlLabelClasses = generateUtilityClasses("MuiFormControlLabel", ["root", "labelPlacementStart", "labelPlacementTop", "labelPlacementBottom", "disabled", "label", "error", "required", "asterisk"]);
    const formControlLabelClasses$1 = formControlLabelClasses;
    const _excluded$T = ["checked", "className", "componentsProps", "control", "disabled", "disableTypography", "inputRef", "label", "labelPlacement", "name", "onChange", "required", "slotProps", "value"];
    const useUtilityClasses$A = (ownerState) => {
      const {
        classes,
        disabled,
        labelPlacement,
        error,
        required
      } = ownerState;
      const slots = {
        root: ["root", disabled && "disabled", `labelPlacement${capitalize(labelPlacement)}`, error && "error", required && "required"],
        label: ["label", disabled && "disabled"],
        asterisk: ["asterisk", error && "error"]
      };
      return composeClasses(slots, getFormControlLabelUtilityClasses, classes);
    };
    const FormControlLabelRoot = styled$1("label", {
      name: "MuiFormControlLabel",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [{
          [`& .${formControlLabelClasses$1.label}`]: styles2.label
        }, styles2.root, styles2[`labelPlacement${capitalize(ownerState.labelPlacement)}`]];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      display: "inline-flex",
      alignItems: "center",
      cursor: "pointer",
      verticalAlign: "middle",
      WebkitTapHighlightColor: "transparent",
      marginLeft: -11,
      marginRight: 16,
      [`&.${formControlLabelClasses$1.disabled}`]: {
        cursor: "default"
      }
    }, ownerState.labelPlacement === "start" && {
      flexDirection: "row-reverse",
      marginLeft: 16,
      marginRight: -11
    }, ownerState.labelPlacement === "top" && {
      flexDirection: "column-reverse",
      marginLeft: 16
    }, ownerState.labelPlacement === "bottom" && {
      flexDirection: "column",
      marginLeft: 16
    }, {
      [`& .${formControlLabelClasses$1.label}`]: {
        [`&.${formControlLabelClasses$1.disabled}`]: {
          color: (theme.vars || theme).palette.text.disabled
        }
      }
    }));
    const AsteriskComponent = styled$1("span", {
      name: "MuiFormControlLabel",
      slot: "Asterisk",
      overridesResolver: (props, styles2) => styles2.asterisk
    })(({
      theme
    }) => ({
      [`&.${formControlLabelClasses$1.error}`]: {
        color: (theme.vars || theme).palette.error.main
      }
    }));
    const FormControlLabel = /* @__PURE__ */ react.exports.forwardRef(function FormControlLabel2(inProps, ref) {
      var _ref, _slotProps$typography;
      const props = useThemeProps({
        props: inProps,
        name: "MuiFormControlLabel"
      });
      const {
        className,
        componentsProps = {},
        control,
        disabled: disabledProp,
        disableTypography,
        label: labelProp,
        labelPlacement = "end",
        required: requiredProp,
        slotProps = {}
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$T);
      const muiFormControl = useFormControl();
      const disabled = (_ref = disabledProp != null ? disabledProp : control.props.disabled) != null ? _ref : muiFormControl == null ? void 0 : muiFormControl.disabled;
      const required = requiredProp != null ? requiredProp : control.props.required;
      const controlProps = {
        disabled,
        required
      };
      ["checked", "name", "onChange", "value", "inputRef"].forEach((key) => {
        if (typeof control.props[key] === "undefined" && typeof props[key] !== "undefined") {
          controlProps[key] = props[key];
        }
      });
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ["error"]
      });
      const ownerState = _extends$1({}, props, {
        disabled,
        labelPlacement,
        required,
        error: fcs.error
      });
      const classes = useUtilityClasses$A(ownerState);
      const typographySlotProps = (_slotProps$typography = slotProps.typography) != null ? _slotProps$typography : componentsProps.typography;
      let label = labelProp;
      if (label != null && label.type !== Typography$1 && !disableTypography) {
        label = /* @__PURE__ */ jsx(Typography$1, _extends$1({
          component: "span"
        }, typographySlotProps, {
          className: clsx(classes.label, typographySlotProps == null ? void 0 : typographySlotProps.className),
          children: label
        }));
      }
      return /* @__PURE__ */ jsxs(FormControlLabelRoot, _extends$1({
        className: clsx(classes.root, className),
        ownerState,
        ref
      }, other, {
        children: [/* @__PURE__ */ react.exports.cloneElement(control, controlProps), label, required && /* @__PURE__ */ jsxs(AsteriskComponent, {
          ownerState,
          "aria-hidden": true,
          className: classes.asterisk,
          children: ["\u2009", "*"]
        })]
      }));
    });
    FormControlLabel.propTypes = {
      checked: propTypes.exports.bool,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      componentsProps: propTypes.exports.shape({
        typography: propTypes.exports.object
      }),
      control: propTypes.exports.element.isRequired,
      disabled: propTypes.exports.bool,
      disableTypography: propTypes.exports.bool,
      inputRef: refType$1,
      label: propTypes.exports.node,
      labelPlacement: propTypes.exports.oneOf(["bottom", "end", "start", "top"]),
      name: propTypes.exports.string,
      onChange: propTypes.exports.func,
      required: propTypes.exports.bool,
      slotProps: propTypes.exports.shape({
        typography: propTypes.exports.object
      }),
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      value: propTypes.exports.any
    };
    const FormControlLabel$1 = FormControlLabel;
    function getFormGroupUtilityClass(slot) {
      return generateUtilityClass("MuiFormGroup", slot);
    }
    generateUtilityClasses("MuiFormGroup", ["root", "row", "error"]);
    const _excluded$S = ["className", "row"];
    const useUtilityClasses$z = (ownerState) => {
      const {
        classes,
        row,
        error
      } = ownerState;
      const slots = {
        root: ["root", row && "row", error && "error"]
      };
      return composeClasses(slots, getFormGroupUtilityClass, classes);
    };
    const FormGroupRoot = styled$1("div", {
      name: "MuiFormGroup",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.row && styles2.row];
      }
    })(({
      ownerState
    }) => _extends$1({
      display: "flex",
      flexDirection: "column",
      flexWrap: "wrap"
    }, ownerState.row && {
      flexDirection: "row"
    }));
    const FormGroup = /* @__PURE__ */ react.exports.forwardRef(function FormGroup2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiFormGroup"
      });
      const {
        className,
        row = false
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$S);
      const muiFormControl = useFormControl();
      const fcs = formControlState({
        props,
        muiFormControl,
        states: ["error"]
      });
      const ownerState = _extends$1({}, props, {
        row,
        error: fcs.error
      });
      const classes = useUtilityClasses$z(ownerState);
      return /* @__PURE__ */ jsx(FormGroupRoot, _extends$1({
        className: clsx(classes.root, className),
        ownerState,
        ref
      }, other));
    });
    FormGroup.propTypes = {
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      row: propTypes.exports.bool,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
    };
    const FormGroup$1 = FormGroup;
    const GridContext = /* @__PURE__ */ react.exports.createContext();
    {
      GridContext.displayName = "GridContext";
    }
    const GridContext$1 = GridContext;
    function getGridUtilityClass(slot) {
      return generateUtilityClass("MuiGrid", slot);
    }
    const SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    const DIRECTIONS = ["column-reverse", "column", "row-reverse", "row"];
    const WRAPS = ["nowrap", "wrap-reverse", "wrap"];
    const GRID_SIZES = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
    const gridClasses = generateUtilityClasses("MuiGrid", [
      "root",
      "container",
      "item",
      "zeroMinWidth",
      ...SPACINGS.map((spacing) => `spacing-xs-${spacing}`),
      ...DIRECTIONS.map((direction) => `direction-xs-${direction}`),
      ...WRAPS.map((wrap) => `wrap-xs-${wrap}`),
      ...GRID_SIZES.map((size) => `grid-xs-${size}`),
      ...GRID_SIZES.map((size) => `grid-sm-${size}`),
      ...GRID_SIZES.map((size) => `grid-md-${size}`),
      ...GRID_SIZES.map((size) => `grid-lg-${size}`),
      ...GRID_SIZES.map((size) => `grid-xl-${size}`)
    ]);
    const _excluded$R = ["className", "columns", "columnSpacing", "component", "container", "direction", "item", "rowSpacing", "spacing", "wrap", "zeroMinWidth"];
    function getOffset(val) {
      const parse2 = parseFloat(val);
      return `${parse2}${String(val).replace(String(parse2), "") || "px"}`;
    }
    function generateGrid({
      theme,
      ownerState
    }) {
      let size;
      return theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {
        let styles2 = {};
        if (ownerState[breakpoint]) {
          size = ownerState[breakpoint];
        }
        if (!size) {
          return globalStyles;
        }
        if (size === true) {
          styles2 = {
            flexBasis: 0,
            flexGrow: 1,
            maxWidth: "100%"
          };
        } else if (size === "auto") {
          styles2 = {
            flexBasis: "auto",
            flexGrow: 0,
            flexShrink: 0,
            maxWidth: "none",
            width: "auto"
          };
        } else {
          const columnsBreakpointValues = resolveBreakpointValues({
            values: ownerState.columns,
            breakpoints: theme.breakpoints.values
          });
          const columnValue = typeof columnsBreakpointValues === "object" ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;
          if (columnValue === void 0 || columnValue === null) {
            return globalStyles;
          }
          const width2 = `${Math.round(size / columnValue * 1e8) / 1e6}%`;
          let more = {};
          if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {
            const themeSpacing = theme.spacing(ownerState.columnSpacing);
            if (themeSpacing !== "0px") {
              const fullWidth = `calc(${width2} + ${getOffset(themeSpacing)})`;
              more = {
                flexBasis: fullWidth,
                maxWidth: fullWidth
              };
            }
          }
          styles2 = _extends$1({
            flexBasis: width2,
            flexGrow: 0,
            maxWidth: width2
          }, more);
        }
        if (theme.breakpoints.values[breakpoint] === 0) {
          Object.assign(globalStyles, styles2);
        } else {
          globalStyles[theme.breakpoints.up(breakpoint)] = styles2;
        }
        return globalStyles;
      }, {});
    }
    function generateDirection({
      theme,
      ownerState
    }) {
      const directionValues = resolveBreakpointValues({
        values: ownerState.direction,
        breakpoints: theme.breakpoints.values
      });
      return handleBreakpoints({
        theme
      }, directionValues, (propValue) => {
        const output = {
          flexDirection: propValue
        };
        if (propValue.indexOf("column") === 0) {
          output[`& > .${gridClasses.item}`] = {
            maxWidth: "none"
          };
        }
        return output;
      });
    }
    function extractZeroValueBreakpointKeys({
      breakpoints,
      values: values2
    }) {
      let nonZeroKey = "";
      Object.keys(values2).forEach((key) => {
        if (nonZeroKey !== "") {
          return;
        }
        if (values2[key] !== 0) {
          nonZeroKey = key;
        }
      });
      const sortedBreakpointKeysByValue = Object.keys(breakpoints).sort((a, b) => {
        return breakpoints[a] - breakpoints[b];
      });
      return sortedBreakpointKeysByValue.slice(0, sortedBreakpointKeysByValue.indexOf(nonZeroKey));
    }
    function generateRowGap({
      theme,
      ownerState
    }) {
      const {
        container,
        rowSpacing
      } = ownerState;
      let styles2 = {};
      if (container && rowSpacing !== 0) {
        const rowSpacingValues = resolveBreakpointValues({
          values: rowSpacing,
          breakpoints: theme.breakpoints.values
        });
        let zeroValueBreakpointKeys;
        if (typeof rowSpacingValues === "object") {
          zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({
            breakpoints: theme.breakpoints.values,
            values: rowSpacingValues
          });
        }
        styles2 = handleBreakpoints({
          theme
        }, rowSpacingValues, (propValue, breakpoint) => {
          var _zeroValueBreakpointK;
          const themeSpacing = theme.spacing(propValue);
          if (themeSpacing !== "0px") {
            return {
              marginTop: `-${getOffset(themeSpacing)}`,
              [`& > .${gridClasses.item}`]: {
                paddingTop: getOffset(themeSpacing)
              }
            };
          }
          if ((_zeroValueBreakpointK = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK.includes(breakpoint)) {
            return {};
          }
          return {
            marginTop: 0,
            [`& > .${gridClasses.item}`]: {
              paddingTop: 0
            }
          };
        });
      }
      return styles2;
    }
    function generateColumnGap({
      theme,
      ownerState
    }) {
      const {
        container,
        columnSpacing
      } = ownerState;
      let styles2 = {};
      if (container && columnSpacing !== 0) {
        const columnSpacingValues = resolveBreakpointValues({
          values: columnSpacing,
          breakpoints: theme.breakpoints.values
        });
        let zeroValueBreakpointKeys;
        if (typeof columnSpacingValues === "object") {
          zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({
            breakpoints: theme.breakpoints.values,
            values: columnSpacingValues
          });
        }
        styles2 = handleBreakpoints({
          theme
        }, columnSpacingValues, (propValue, breakpoint) => {
          var _zeroValueBreakpointK2;
          const themeSpacing = theme.spacing(propValue);
          if (themeSpacing !== "0px") {
            return {
              width: `calc(100% + ${getOffset(themeSpacing)})`,
              marginLeft: `-${getOffset(themeSpacing)}`,
              [`& > .${gridClasses.item}`]: {
                paddingLeft: getOffset(themeSpacing)
              }
            };
          }
          if ((_zeroValueBreakpointK2 = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK2.includes(breakpoint)) {
            return {};
          }
          return {
            width: "100%",
            marginLeft: 0,
            [`& > .${gridClasses.item}`]: {
              paddingLeft: 0
            }
          };
        });
      }
      return styles2;
    }
    function resolveSpacingStyles(spacing, breakpoints, styles2 = {}) {
      if (!spacing || spacing <= 0) {
        return [];
      }
      if (typeof spacing === "string" && !Number.isNaN(Number(spacing)) || typeof spacing === "number") {
        return [styles2[`spacing-xs-${String(spacing)}`]];
      }
      const spacingStyles = [];
      breakpoints.forEach((breakpoint) => {
        const value2 = spacing[breakpoint];
        if (Number(value2) > 0) {
          spacingStyles.push(styles2[`spacing-${breakpoint}-${String(value2)}`]);
        }
      });
      return spacingStyles;
    }
    const GridRoot = styled$1("div", {
      name: "MuiGrid",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        const {
          container,
          direction,
          item,
          spacing,
          wrap,
          zeroMinWidth,
          breakpoints
        } = ownerState;
        let spacingStyles = [];
        if (container) {
          spacingStyles = resolveSpacingStyles(spacing, breakpoints, styles2);
        }
        const breakpointsStyles = [];
        breakpoints.forEach((breakpoint) => {
          const value2 = ownerState[breakpoint];
          if (value2) {
            breakpointsStyles.push(styles2[`grid-${breakpoint}-${String(value2)}`]);
          }
        });
        return [styles2.root, container && styles2.container, item && styles2.item, zeroMinWidth && styles2.zeroMinWidth, ...spacingStyles, direction !== "row" && styles2[`direction-xs-${String(direction)}`], wrap !== "wrap" && styles2[`wrap-xs-${String(wrap)}`], ...breakpointsStyles];
      }
    })(({
      ownerState
    }) => _extends$1({
      boxSizing: "border-box"
    }, ownerState.container && {
      display: "flex",
      flexWrap: "wrap",
      width: "100%"
    }, ownerState.item && {
      margin: 0
    }, ownerState.zeroMinWidth && {
      minWidth: 0
    }, ownerState.wrap !== "wrap" && {
      flexWrap: ownerState.wrap
    }), generateDirection, generateRowGap, generateColumnGap, generateGrid);
    function resolveSpacingClasses(spacing, breakpoints) {
      if (!spacing || spacing <= 0) {
        return [];
      }
      if (typeof spacing === "string" && !Number.isNaN(Number(spacing)) || typeof spacing === "number") {
        return [`spacing-xs-${String(spacing)}`];
      }
      const classes = [];
      breakpoints.forEach((breakpoint) => {
        const value2 = spacing[breakpoint];
        if (Number(value2) > 0) {
          const className = `spacing-${breakpoint}-${String(value2)}`;
          classes.push(className);
        }
      });
      return classes;
    }
    const useUtilityClasses$y = (ownerState) => {
      const {
        classes,
        container,
        direction,
        item,
        spacing,
        wrap,
        zeroMinWidth,
        breakpoints
      } = ownerState;
      let spacingClasses = [];
      if (container) {
        spacingClasses = resolveSpacingClasses(spacing, breakpoints);
      }
      const breakpointsClasses = [];
      breakpoints.forEach((breakpoint) => {
        const value2 = ownerState[breakpoint];
        if (value2) {
          breakpointsClasses.push(`grid-${breakpoint}-${String(value2)}`);
        }
      });
      const slots = {
        root: ["root", container && "container", item && "item", zeroMinWidth && "zeroMinWidth", ...spacingClasses, direction !== "row" && `direction-xs-${String(direction)}`, wrap !== "wrap" && `wrap-xs-${String(wrap)}`, ...breakpointsClasses]
      };
      return composeClasses(slots, getGridUtilityClass, classes);
    };
    const Grid = /* @__PURE__ */ react.exports.forwardRef(function Grid2(inProps, ref) {
      const themeProps = useThemeProps({
        props: inProps,
        name: "MuiGrid"
      });
      const {
        breakpoints
      } = useTheme();
      const props = extendSxProp(themeProps);
      const {
        className,
        columns: columnsProp,
        columnSpacing: columnSpacingProp,
        component = "div",
        container = false,
        direction = "row",
        item = false,
        rowSpacing: rowSpacingProp,
        spacing = 0,
        wrap = "wrap",
        zeroMinWidth = false
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$R);
      const rowSpacing = rowSpacingProp || spacing;
      const columnSpacing = columnSpacingProp || spacing;
      const columnsContext = react.exports.useContext(GridContext$1);
      const columns = container ? columnsProp || 12 : columnsContext;
      const breakpointsValues = {};
      const otherFiltered = _extends$1({}, other);
      breakpoints.keys.forEach((breakpoint) => {
        if (other[breakpoint] != null) {
          breakpointsValues[breakpoint] = other[breakpoint];
          delete otherFiltered[breakpoint];
        }
      });
      const ownerState = _extends$1({}, props, {
        columns,
        container,
        direction,
        item,
        rowSpacing,
        columnSpacing,
        wrap,
        zeroMinWidth,
        spacing
      }, breakpointsValues, {
        breakpoints: breakpoints.keys
      });
      const classes = useUtilityClasses$y(ownerState);
      return /* @__PURE__ */ jsx(GridContext$1.Provider, {
        value: columns,
        children: /* @__PURE__ */ jsx(GridRoot, _extends$1({
          ownerState,
          className: clsx(classes.root, className),
          as: component,
          ref
        }, otherFiltered))
      });
    });
    Grid.propTypes = {
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      columns: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.number), propTypes.exports.number, propTypes.exports.object]),
      columnSpacing: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string])), propTypes.exports.number, propTypes.exports.object, propTypes.exports.string]),
      component: propTypes.exports.elementType,
      container: propTypes.exports.bool,
      direction: propTypes.exports.oneOfType([propTypes.exports.oneOf(["column-reverse", "column", "row-reverse", "row"]), propTypes.exports.arrayOf(propTypes.exports.oneOf(["column-reverse", "column", "row-reverse", "row"])), propTypes.exports.object]),
      item: propTypes.exports.bool,
      lg: propTypes.exports.oneOfType([propTypes.exports.oneOf(["auto"]), propTypes.exports.number, propTypes.exports.bool]),
      md: propTypes.exports.oneOfType([propTypes.exports.oneOf(["auto"]), propTypes.exports.number, propTypes.exports.bool]),
      rowSpacing: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string])), propTypes.exports.number, propTypes.exports.object, propTypes.exports.string]),
      sm: propTypes.exports.oneOfType([propTypes.exports.oneOf(["auto"]), propTypes.exports.number, propTypes.exports.bool]),
      spacing: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.number, propTypes.exports.string])), propTypes.exports.number, propTypes.exports.object, propTypes.exports.string]),
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      wrap: propTypes.exports.oneOf(["nowrap", "wrap-reverse", "wrap"]),
      xl: propTypes.exports.oneOfType([propTypes.exports.oneOf(["auto"]), propTypes.exports.number, propTypes.exports.bool]),
      xs: propTypes.exports.oneOfType([propTypes.exports.oneOf(["auto"]), propTypes.exports.number, propTypes.exports.bool]),
      zeroMinWidth: propTypes.exports.bool
    };
    {
      const requireProp = requirePropFactory("Grid", Grid);
      Grid["propTypes"] = _extends$1({}, Grid.propTypes, {
        direction: requireProp("container"),
        lg: requireProp("item"),
        md: requireProp("item"),
        sm: requireProp("item"),
        spacing: requireProp("container"),
        wrap: requireProp("container"),
        xs: requireProp("item"),
        zeroMinWidth: requireProp("item")
      });
    }
    const Grid$1 = Grid;
    function getInputAdornmentUtilityClass(slot) {
      return generateUtilityClass("MuiInputAdornment", slot);
    }
    const inputAdornmentClasses = generateUtilityClasses("MuiInputAdornment", ["root", "filled", "standard", "outlined", "positionStart", "positionEnd", "disablePointerEvents", "hiddenLabel", "sizeSmall"]);
    const inputAdornmentClasses$1 = inputAdornmentClasses;
    var _span;
    const _excluded$Q = ["children", "className", "component", "disablePointerEvents", "disableTypography", "position", "variant"];
    const overridesResolver$2 = (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, styles2[`position${capitalize(ownerState.position)}`], ownerState.disablePointerEvents === true && styles2.disablePointerEvents, styles2[ownerState.variant]];
    };
    const useUtilityClasses$x = (ownerState) => {
      const {
        classes,
        disablePointerEvents,
        hiddenLabel,
        position: position2,
        size,
        variant
      } = ownerState;
      const slots = {
        root: ["root", disablePointerEvents && "disablePointerEvents", position2 && `position${capitalize(position2)}`, variant, hiddenLabel && "hiddenLabel", size && `size${capitalize(size)}`]
      };
      return composeClasses(slots, getInputAdornmentUtilityClass, classes);
    };
    const InputAdornmentRoot = styled$1("div", {
      name: "MuiInputAdornment",
      slot: "Root",
      overridesResolver: overridesResolver$2
    })(({
      theme,
      ownerState
    }) => _extends$1({
      display: "flex",
      height: "0.01em",
      maxHeight: "2em",
      alignItems: "center",
      whiteSpace: "nowrap",
      color: (theme.vars || theme).palette.action.active
    }, ownerState.variant === "filled" && {
      [`&.${inputAdornmentClasses$1.positionStart}&:not(.${inputAdornmentClasses$1.hiddenLabel})`]: {
        marginTop: 16
      }
    }, ownerState.position === "start" && {
      marginRight: 8
    }, ownerState.position === "end" && {
      marginLeft: 8
    }, ownerState.disablePointerEvents === true && {
      pointerEvents: "none"
    }));
    const InputAdornment = /* @__PURE__ */ react.exports.forwardRef(function InputAdornment2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiInputAdornment"
      });
      const {
        children,
        className,
        component = "div",
        disablePointerEvents = false,
        disableTypography = false,
        position: position2,
        variant: variantProp
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$Q);
      const muiFormControl = useFormControl() || {};
      let variant = variantProp;
      if (variantProp && muiFormControl.variant) {
        {
          if (variantProp === muiFormControl.variant) {
            console.error("MUI: The `InputAdornment` variant infers the variant prop you do not have to provide one.");
          }
        }
      }
      if (muiFormControl && !variant) {
        variant = muiFormControl.variant;
      }
      const ownerState = _extends$1({}, props, {
        hiddenLabel: muiFormControl.hiddenLabel,
        size: muiFormControl.size,
        disablePointerEvents,
        position: position2,
        variant
      });
      const classes = useUtilityClasses$x(ownerState);
      return /* @__PURE__ */ jsx(FormControlContext$1.Provider, {
        value: null,
        children: /* @__PURE__ */ jsx(InputAdornmentRoot, _extends$1({
          as: component,
          ownerState,
          className: clsx(classes.root, className),
          ref
        }, other, {
          children: typeof children === "string" && !disableTypography ? /* @__PURE__ */ jsx(Typography$1, {
            color: "text.secondary",
            children
          }) : /* @__PURE__ */ jsxs(react.exports.Fragment, {
            children: [position2 === "start" ? _span || (_span = /* @__PURE__ */ jsx("span", {
              className: "notranslate",
              children: "\u200B"
            })) : null, children]
          })
        }))
      });
    });
    InputAdornment.propTypes = {
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      component: propTypes.exports.elementType,
      disablePointerEvents: propTypes.exports.bool,
      disableTypography: propTypes.exports.bool,
      position: propTypes.exports.oneOf(["end", "start"]).isRequired,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      variant: propTypes.exports.oneOf(["filled", "outlined", "standard"])
    };
    const InputAdornment$1 = InputAdornment;
    function getListItemIconUtilityClass(slot) {
      return generateUtilityClass("MuiListItemIcon", slot);
    }
    const listItemIconClasses = generateUtilityClasses("MuiListItemIcon", ["root", "alignItemsFlexStart"]);
    const listItemIconClasses$1 = listItemIconClasses;
    const _excluded$P = ["className"];
    const useUtilityClasses$w = (ownerState) => {
      const {
        alignItems,
        classes
      } = ownerState;
      const slots = {
        root: ["root", alignItems === "flex-start" && "alignItemsFlexStart"]
      };
      return composeClasses(slots, getListItemIconUtilityClass, classes);
    };
    const ListItemIconRoot = styled$1("div", {
      name: "MuiListItemIcon",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.alignItems === "flex-start" && styles2.alignItemsFlexStart];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      minWidth: 56,
      color: (theme.vars || theme).palette.action.active,
      flexShrink: 0,
      display: "inline-flex"
    }, ownerState.alignItems === "flex-start" && {
      marginTop: 8
    }));
    const ListItemIcon = /* @__PURE__ */ react.exports.forwardRef(function ListItemIcon2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiListItemIcon"
      });
      const {
        className
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$P);
      const context2 = react.exports.useContext(ListContext$1);
      const ownerState = _extends$1({}, props, {
        alignItems: context2.alignItems
      });
      const classes = useUtilityClasses$w(ownerState);
      return /* @__PURE__ */ jsx(ListItemIconRoot, _extends$1({
        className: clsx(classes.root, className),
        ownerState,
        ref
      }, other));
    });
    ListItemIcon.propTypes = {
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
    };
    const ListItemIcon$1 = ListItemIcon;
    function getListItemTextUtilityClass(slot) {
      return generateUtilityClass("MuiListItemText", slot);
    }
    const listItemTextClasses = generateUtilityClasses("MuiListItemText", ["root", "multiline", "dense", "inset", "primary", "secondary"]);
    const listItemTextClasses$1 = listItemTextClasses;
    const _excluded$O = ["children", "className", "disableTypography", "inset", "primary", "primaryTypographyProps", "secondary", "secondaryTypographyProps"];
    const useUtilityClasses$v = (ownerState) => {
      const {
        classes,
        inset,
        primary,
        secondary,
        dense
      } = ownerState;
      const slots = {
        root: ["root", inset && "inset", dense && "dense", primary && secondary && "multiline"],
        primary: ["primary"],
        secondary: ["secondary"]
      };
      return composeClasses(slots, getListItemTextUtilityClass, classes);
    };
    const ListItemTextRoot = styled$1("div", {
      name: "MuiListItemText",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [{
          [`& .${listItemTextClasses$1.primary}`]: styles2.primary
        }, {
          [`& .${listItemTextClasses$1.secondary}`]: styles2.secondary
        }, styles2.root, ownerState.inset && styles2.inset, ownerState.primary && ownerState.secondary && styles2.multiline, ownerState.dense && styles2.dense];
      }
    })(({
      ownerState
    }) => _extends$1({
      flex: "1 1 auto",
      minWidth: 0,
      marginTop: 4,
      marginBottom: 4
    }, ownerState.primary && ownerState.secondary && {
      marginTop: 6,
      marginBottom: 6
    }, ownerState.inset && {
      paddingLeft: 56
    }));
    const ListItemText = /* @__PURE__ */ react.exports.forwardRef(function ListItemText2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiListItemText"
      });
      const {
        children,
        className,
        disableTypography = false,
        inset = false,
        primary: primaryProp,
        primaryTypographyProps,
        secondary: secondaryProp,
        secondaryTypographyProps
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$O);
      const {
        dense
      } = react.exports.useContext(ListContext$1);
      let primary = primaryProp != null ? primaryProp : children;
      let secondary = secondaryProp;
      const ownerState = _extends$1({}, props, {
        disableTypography,
        inset,
        primary: !!primary,
        secondary: !!secondary,
        dense
      });
      const classes = useUtilityClasses$v(ownerState);
      if (primary != null && primary.type !== Typography$1 && !disableTypography) {
        primary = /* @__PURE__ */ jsx(Typography$1, _extends$1({
          variant: dense ? "body2" : "body1",
          className: classes.primary,
          component: primaryTypographyProps != null && primaryTypographyProps.variant ? void 0 : "span",
          display: "block"
        }, primaryTypographyProps, {
          children: primary
        }));
      }
      if (secondary != null && secondary.type !== Typography$1 && !disableTypography) {
        secondary = /* @__PURE__ */ jsx(Typography$1, _extends$1({
          variant: "body2",
          className: classes.secondary,
          color: "text.secondary",
          display: "block"
        }, secondaryTypographyProps, {
          children: secondary
        }));
      }
      return /* @__PURE__ */ jsxs(ListItemTextRoot, _extends$1({
        className: clsx(classes.root, className),
        ownerState,
        ref
      }, other, {
        children: [primary, secondary]
      }));
    });
    ListItemText.propTypes = {
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      disableTypography: propTypes.exports.bool,
      inset: propTypes.exports.bool,
      primary: propTypes.exports.node,
      primaryTypographyProps: propTypes.exports.object,
      secondary: propTypes.exports.node,
      secondaryTypographyProps: propTypes.exports.object,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
    };
    const ListItemText$1 = ListItemText;
    function getMenuItemUtilityClass(slot) {
      return generateUtilityClass("MuiMenuItem", slot);
    }
    const menuItemClasses = generateUtilityClasses("MuiMenuItem", ["root", "focusVisible", "dense", "disabled", "divider", "gutters", "selected"]);
    const menuItemClasses$1 = menuItemClasses;
    const _excluded$N = ["autoFocus", "component", "dense", "divider", "disableGutters", "focusVisibleClassName", "role", "tabIndex", "className"];
    const overridesResolver$1 = (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, ownerState.dense && styles2.dense, ownerState.divider && styles2.divider, !ownerState.disableGutters && styles2.gutters];
    };
    const useUtilityClasses$u = (ownerState) => {
      const {
        disabled,
        dense,
        divider,
        disableGutters,
        selected,
        classes
      } = ownerState;
      const slots = {
        root: ["root", dense && "dense", disabled && "disabled", !disableGutters && "gutters", divider && "divider", selected && "selected"]
      };
      const composedClasses = composeClasses(slots, getMenuItemUtilityClass, classes);
      return _extends$1({}, classes, composedClasses);
    };
    const MenuItemRoot = styled$1(ButtonBase$1, {
      shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
      name: "MuiMenuItem",
      slot: "Root",
      overridesResolver: overridesResolver$1
    })(({
      theme,
      ownerState
    }) => _extends$1({}, theme.typography.body1, {
      display: "flex",
      justifyContent: "flex-start",
      alignItems: "center",
      position: "relative",
      textDecoration: "none",
      minHeight: 48,
      paddingTop: 6,
      paddingBottom: 6,
      boxSizing: "border-box",
      whiteSpace: "nowrap"
    }, !ownerState.disableGutters && {
      paddingLeft: 16,
      paddingRight: 16
    }, ownerState.divider && {
      borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
      backgroundClip: "padding-box"
    }, {
      "&:hover": {
        textDecoration: "none",
        backgroundColor: (theme.vars || theme).palette.action.hover,
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      [`&.${menuItemClasses$1.selected}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
        [`&.${menuItemClasses$1.focusVisible}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
        }
      },
      [`&.${menuItemClasses$1.selected}:hover`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
        }
      },
      [`&.${menuItemClasses$1.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette.action.focus
      },
      [`&.${menuItemClasses$1.disabled}`]: {
        opacity: (theme.vars || theme).palette.action.disabledOpacity
      },
      [`& + .${dividerClasses$1.root}`]: {
        marginTop: theme.spacing(1),
        marginBottom: theme.spacing(1)
      },
      [`& + .${dividerClasses$1.inset}`]: {
        marginLeft: 52
      },
      [`& .${listItemTextClasses$1.root}`]: {
        marginTop: 0,
        marginBottom: 0
      },
      [`& .${listItemTextClasses$1.inset}`]: {
        paddingLeft: 36
      },
      [`& .${listItemIconClasses$1.root}`]: {
        minWidth: 36
      }
    }, !ownerState.dense && {
      [theme.breakpoints.up("sm")]: {
        minHeight: "auto"
      }
    }, ownerState.dense && _extends$1({
      minHeight: 32,
      paddingTop: 4,
      paddingBottom: 4
    }, theme.typography.body2, {
      [`& .${listItemIconClasses$1.root} svg`]: {
        fontSize: "1.25rem"
      }
    })));
    const MenuItem = /* @__PURE__ */ react.exports.forwardRef(function MenuItem2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiMenuItem"
      });
      const {
        autoFocus = false,
        component = "li",
        dense = false,
        divider = false,
        disableGutters = false,
        focusVisibleClassName,
        role = "menuitem",
        tabIndex: tabIndexProp,
        className
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$N);
      const context2 = react.exports.useContext(ListContext$1);
      const childContext = react.exports.useMemo(() => ({
        dense: dense || context2.dense || false,
        disableGutters
      }), [context2.dense, dense, disableGutters]);
      const menuItemRef = react.exports.useRef(null);
      useEnhancedEffect$1(() => {
        if (autoFocus) {
          if (menuItemRef.current) {
            menuItemRef.current.focus();
          } else {
            console.error("MUI: Unable to set focus to a MenuItem whose component has not been rendered.");
          }
        }
      }, [autoFocus]);
      const ownerState = _extends$1({}, props, {
        dense: childContext.dense,
        divider,
        disableGutters
      });
      const classes = useUtilityClasses$u(props);
      const handleRef = useForkRef(menuItemRef, ref);
      let tabIndex;
      if (!props.disabled) {
        tabIndex = tabIndexProp !== void 0 ? tabIndexProp : -1;
      }
      return /* @__PURE__ */ jsx(ListContext$1.Provider, {
        value: childContext,
        children: /* @__PURE__ */ jsx(MenuItemRoot, _extends$1({
          ref: handleRef,
          role,
          tabIndex,
          component,
          focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
          className: clsx(classes.root, className)
        }, other, {
          ownerState,
          classes
        }))
      });
    });
    MenuItem.propTypes = {
      autoFocus: propTypes.exports.bool,
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      component: propTypes.exports.elementType,
      dense: propTypes.exports.bool,
      disabled: propTypes.exports.bool,
      disableGutters: propTypes.exports.bool,
      divider: propTypes.exports.bool,
      focusVisibleClassName: propTypes.exports.string,
      role: propTypes.exports.string,
      selected: propTypes.exports.bool,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      tabIndex: propTypes.exports.number
    };
    const MenuItem$1 = MenuItem;
    const RadioButtonUncheckedIcon = createSvgIcon$1(/* @__PURE__ */ jsx("path", {
      d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
    }), "RadioButtonUnchecked");
    const RadioButtonCheckedIcon = createSvgIcon$1(/* @__PURE__ */ jsx("path", {
      d: "M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
    }), "RadioButtonChecked");
    const RadioButtonIconRoot = styled$1("span")({
      position: "relative",
      display: "flex"
    });
    const RadioButtonIconBackground = styled$1(RadioButtonUncheckedIcon)({
      transform: "scale(1)"
    });
    const RadioButtonIconDot = styled$1(RadioButtonCheckedIcon)(({
      theme,
      ownerState
    }) => _extends$1({
      left: 0,
      position: "absolute",
      transform: "scale(0)",
      transition: theme.transitions.create("transform", {
        easing: theme.transitions.easing.easeIn,
        duration: theme.transitions.duration.shortest
      })
    }, ownerState.checked && {
      transform: "scale(1)",
      transition: theme.transitions.create("transform", {
        easing: theme.transitions.easing.easeOut,
        duration: theme.transitions.duration.shortest
      })
    }));
    function RadioButtonIcon(props) {
      const {
        checked = false,
        classes = {},
        fontSize
      } = props;
      const ownerState = _extends$1({}, props, {
        checked
      });
      return /* @__PURE__ */ jsxs(RadioButtonIconRoot, {
        className: classes.root,
        ownerState,
        children: [/* @__PURE__ */ jsx(RadioButtonIconBackground, {
          fontSize,
          className: classes.background,
          ownerState
        }), /* @__PURE__ */ jsx(RadioButtonIconDot, {
          fontSize,
          className: classes.dot,
          ownerState
        })]
      });
    }
    RadioButtonIcon.propTypes = {
      checked: propTypes.exports.bool,
      classes: propTypes.exports.object,
      fontSize: propTypes.exports.oneOf(["small", "medium"])
    };
    const RadioGroupContext = /* @__PURE__ */ react.exports.createContext(void 0);
    {
      RadioGroupContext.displayName = "RadioGroupContext";
    }
    const RadioGroupContext$1 = RadioGroupContext;
    function useRadioGroup() {
      return react.exports.useContext(RadioGroupContext$1);
    }
    function getRadioUtilityClass(slot) {
      return generateUtilityClass("MuiRadio", slot);
    }
    const radioClasses = generateUtilityClasses("MuiRadio", ["root", "checked", "disabled", "colorPrimary", "colorSecondary"]);
    const radioClasses$1 = radioClasses;
    const _excluded$M = ["checked", "checkedIcon", "color", "icon", "name", "onChange", "size", "className"];
    const useUtilityClasses$t = (ownerState) => {
      const {
        classes,
        color: color2
      } = ownerState;
      const slots = {
        root: ["root", `color${capitalize(color2)}`]
      };
      return _extends$1({}, classes, composeClasses(slots, getRadioUtilityClass, classes));
    };
    const RadioRoot = styled$1(SwitchBase$1, {
      shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
      name: "MuiRadio",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, styles2[`color${capitalize(ownerState.color)}`]];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      color: (theme.vars || theme).palette.text.secondary
    }, !ownerState.disableRipple && {
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${ownerState.color === "default" ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === "default" ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }
    }, ownerState.color !== "default" && {
      [`&.${radioClasses$1.checked}`]: {
        color: (theme.vars || theme).palette[ownerState.color].main
      }
    }, {
      [`&.${radioClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.action.disabled
      }
    }));
    function areEqualValues(a, b) {
      if (typeof b === "object" && b !== null) {
        return a === b;
      }
      return String(a) === String(b);
    }
    const defaultCheckedIcon = /* @__PURE__ */ jsx(RadioButtonIcon, {
      checked: true
    });
    const defaultIcon = /* @__PURE__ */ jsx(RadioButtonIcon, {});
    const Radio = /* @__PURE__ */ react.exports.forwardRef(function Radio2(inProps, ref) {
      var _defaultIcon$props$fo, _defaultCheckedIcon$p;
      const props = useThemeProps({
        props: inProps,
        name: "MuiRadio"
      });
      const {
        checked: checkedProp,
        checkedIcon = defaultCheckedIcon,
        color: color2 = "primary",
        icon = defaultIcon,
        name: nameProp,
        onChange: onChangeProp,
        size = "medium",
        className
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$M);
      const ownerState = _extends$1({}, props, {
        color: color2,
        size
      });
      const classes = useUtilityClasses$t(ownerState);
      const radioGroup = useRadioGroup();
      let checked = checkedProp;
      const onChange = createChainedFunction(onChangeProp, radioGroup && radioGroup.onChange);
      let name = nameProp;
      if (radioGroup) {
        if (typeof checked === "undefined") {
          checked = areEqualValues(radioGroup.value, props.value);
        }
        if (typeof name === "undefined") {
          name = radioGroup.name;
        }
      }
      return /* @__PURE__ */ jsx(RadioRoot, _extends$1({
        type: "radio",
        icon: /* @__PURE__ */ react.exports.cloneElement(icon, {
          fontSize: (_defaultIcon$props$fo = defaultIcon.props.fontSize) != null ? _defaultIcon$props$fo : size
        }),
        checkedIcon: /* @__PURE__ */ react.exports.cloneElement(checkedIcon, {
          fontSize: (_defaultCheckedIcon$p = defaultCheckedIcon.props.fontSize) != null ? _defaultCheckedIcon$p : size
        }),
        ownerState,
        classes,
        name,
        checked,
        onChange,
        ref,
        className: clsx(classes.root, className)
      }, other));
    });
    Radio.propTypes = {
      checked: propTypes.exports.bool,
      checkedIcon: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      color: propTypes.exports.oneOfType([propTypes.exports.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), propTypes.exports.string]),
      disabled: propTypes.exports.bool,
      disableRipple: propTypes.exports.bool,
      icon: propTypes.exports.node,
      id: propTypes.exports.string,
      inputProps: propTypes.exports.object,
      inputRef: refType$1,
      name: propTypes.exports.string,
      onChange: propTypes.exports.func,
      required: propTypes.exports.bool,
      size: propTypes.exports.oneOfType([propTypes.exports.oneOf(["medium", "small"]), propTypes.exports.string]),
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      value: propTypes.exports.any
    };
    const Radio$1 = Radio;
    const _excluded$L = ["actions", "children", "defaultValue", "name", "onChange", "value"];
    const RadioGroup = /* @__PURE__ */ react.exports.forwardRef(function RadioGroup2(props, ref) {
      const {
        actions,
        children,
        defaultValue: defaultValue2,
        name: nameProp,
        onChange,
        value: valueProp
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$L);
      const rootRef = react.exports.useRef(null);
      const [value2, setValueState] = useControlled({
        controlled: valueProp,
        default: defaultValue2,
        name: "RadioGroup"
      });
      react.exports.useImperativeHandle(actions, () => ({
        focus: () => {
          let input = rootRef.current.querySelector("input:not(:disabled):checked");
          if (!input) {
            input = rootRef.current.querySelector("input:not(:disabled)");
          }
          if (input) {
            input.focus();
          }
        }
      }), []);
      const handleRef = useForkRef(ref, rootRef);
      const name = useId(nameProp);
      const contextValue = react.exports.useMemo(() => ({
        name,
        onChange(event) {
          setValueState(event.target.value);
          if (onChange) {
            onChange(event, event.target.value);
          }
        },
        value: value2
      }), [name, onChange, setValueState, value2]);
      return /* @__PURE__ */ jsx(RadioGroupContext$1.Provider, {
        value: contextValue,
        children: /* @__PURE__ */ jsx(FormGroup$1, _extends$1({
          role: "radiogroup",
          ref: handleRef
        }, other, {
          children
        }))
      });
    });
    RadioGroup.propTypes = {
      children: propTypes.exports.node,
      defaultValue: propTypes.exports.any,
      name: propTypes.exports.string,
      onChange: propTypes.exports.func,
      value: propTypes.exports.any
    };
    const RadioGroup$1 = RadioGroup;
    const shouldSpreadAdditionalProps = (Slot) => {
      return !Slot || !isHostComponent(Slot);
    };
    const shouldSpreadAdditionalProps$1 = shouldSpreadAdditionalProps;
    function getSliderUtilityClass(slot) {
      return generateUtilityClass("MuiSlider", slot);
    }
    const sliderClasses = generateUtilityClasses("MuiSlider", ["root", "active", "colorPrimary", "colorSecondary", "disabled", "dragging", "focusVisible", "mark", "markActive", "marked", "markLabel", "markLabelActive", "rail", "sizeSmall", "thumb", "thumbColorPrimary", "thumbColorSecondary", "track", "trackInverted", "trackFalse", "thumbSizeSmall", "valueLabel", "valueLabelOpen", "valueLabelCircle", "valueLabelLabel", "vertical"]);
    const sliderClasses$1 = sliderClasses;
    const useValueLabelClasses = (props) => {
      const {
        open
      } = props;
      const utilityClasses = {
        offset: clsx(open && sliderClasses$1.valueLabelOpen),
        circle: sliderClasses$1.valueLabelCircle,
        label: sliderClasses$1.valueLabelLabel
      };
      return utilityClasses;
    };
    function SliderValueLabel(props) {
      const {
        children,
        className,
        value: value2
      } = props;
      const classes = useValueLabelClasses(props);
      if (!children) {
        return null;
      }
      return /* @__PURE__ */ react.exports.cloneElement(children, {
        className: clsx(children.props.className)
      }, /* @__PURE__ */ jsxs(react.exports.Fragment, {
        children: [children.props.children, /* @__PURE__ */ jsx("span", {
          className: clsx(classes.offset, className),
          "aria-hidden": true,
          children: /* @__PURE__ */ jsx("span", {
            className: classes.circle,
            children: /* @__PURE__ */ jsx("span", {
              className: classes.label,
              children: value2
            })
          })
        })]
      }));
    }
    SliderValueLabel.propTypes = {
      children: propTypes.exports.element.isRequired,
      className: propTypes.exports.string,
      value: propTypes.exports.node
    };
    const _excluded$K = ["aria-label", "aria-valuetext", "aria-labelledby", "component", "components", "componentsProps", "color", "classes", "className", "disableSwap", "disabled", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "orientation", "size", "step", "scale", "slotProps", "slots", "tabIndex", "track", "value", "valueLabelDisplay", "valueLabelFormat"];
    function Identity(x) {
      return x;
    }
    const SliderRoot = styled$1("span", {
      name: "MuiSlider",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, styles2[`color${capitalize(ownerState.color)}`], ownerState.size !== "medium" && styles2[`size${capitalize(ownerState.size)}`], ownerState.marked && styles2.marked, ownerState.orientation === "vertical" && styles2.vertical, ownerState.track === "inverted" && styles2.trackInverted, ownerState.track === false && styles2.trackFalse];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      borderRadius: 12,
      boxSizing: "content-box",
      display: "inline-block",
      position: "relative",
      cursor: "pointer",
      touchAction: "none",
      color: (theme.vars || theme).palette[ownerState.color].main,
      WebkitTapHighlightColor: "transparent"
    }, ownerState.orientation === "horizontal" && _extends$1({
      height: 4,
      width: "100%",
      padding: "13px 0",
      "@media (pointer: coarse)": {
        padding: "20px 0"
      }
    }, ownerState.size === "small" && {
      height: 2
    }, ownerState.marked && {
      marginBottom: 20
    }), ownerState.orientation === "vertical" && _extends$1({
      height: "100%",
      width: 4,
      padding: "0 13px",
      "@media (pointer: coarse)": {
        padding: "0 20px"
      }
    }, ownerState.size === "small" && {
      width: 2
    }, ownerState.marked && {
      marginRight: 44
    }), {
      "@media print": {
        colorAdjust: "exact"
      },
      [`&.${sliderClasses$1.disabled}`]: {
        pointerEvents: "none",
        cursor: "default",
        color: (theme.vars || theme).palette.grey[400]
      },
      [`&.${sliderClasses$1.dragging}`]: {
        [`& .${sliderClasses$1.thumb}, & .${sliderClasses$1.track}`]: {
          transition: "none"
        }
      }
    }));
    SliderRoot.propTypes = {
      children: propTypes.exports.node
    };
    const SliderRail = styled$1("span", {
      name: "MuiSlider",
      slot: "Rail",
      overridesResolver: (props, styles2) => styles2.rail
    })(({
      ownerState
    }) => _extends$1({
      display: "block",
      position: "absolute",
      borderRadius: "inherit",
      backgroundColor: "currentColor",
      opacity: 0.38
    }, ownerState.orientation === "horizontal" && {
      width: "100%",
      height: "inherit",
      top: "50%",
      transform: "translateY(-50%)"
    }, ownerState.orientation === "vertical" && {
      height: "100%",
      width: "inherit",
      left: "50%",
      transform: "translateX(-50%)"
    }, ownerState.track === "inverted" && {
      opacity: 1
    }));
    SliderRail.propTypes = {
      children: propTypes.exports.node
    };
    const SliderTrack = styled$1("span", {
      name: "MuiSlider",
      slot: "Track",
      overridesResolver: (props, styles2) => styles2.track
    })(({
      theme,
      ownerState
    }) => {
      const color2 = theme.palette.mode === "light" ? lighten(theme.palette[ownerState.color].main, 0.62) : darken(theme.palette[ownerState.color].main, 0.5);
      return _extends$1({
        display: "block",
        position: "absolute",
        borderRadius: "inherit",
        border: "1px solid currentColor",
        backgroundColor: "currentColor",
        transition: theme.transitions.create(["left", "width", "bottom", "height"], {
          duration: theme.transitions.duration.shortest
        })
      }, ownerState.size === "small" && {
        border: "none"
      }, ownerState.orientation === "horizontal" && {
        height: "inherit",
        top: "50%",
        transform: "translateY(-50%)"
      }, ownerState.orientation === "vertical" && {
        width: "inherit",
        left: "50%",
        transform: "translateX(-50%)"
      }, ownerState.track === false && {
        display: "none"
      }, ownerState.track === "inverted" && {
        backgroundColor: theme.vars ? theme.vars.palette.Slider[`${ownerState.color}Track`] : color2,
        borderColor: theme.vars ? theme.vars.palette.Slider[`${ownerState.color}Track`] : color2
      });
    });
    SliderTrack.propTypes = {
      children: propTypes.exports.node
    };
    const SliderThumb = styled$1("span", {
      name: "MuiSlider",
      slot: "Thumb",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.thumb, styles2[`thumbColor${capitalize(ownerState.color)}`], ownerState.size !== "medium" && styles2[`thumbSize${capitalize(ownerState.size)}`]];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({
      position: "absolute",
      width: 20,
      height: 20,
      boxSizing: "border-box",
      borderRadius: "50%",
      outline: 0,
      backgroundColor: "currentColor",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      transition: theme.transitions.create(["box-shadow", "left", "bottom"], {
        duration: theme.transitions.duration.shortest
      })
    }, ownerState.size === "small" && {
      width: 12,
      height: 12
    }, ownerState.orientation === "horizontal" && {
      top: "50%",
      transform: "translate(-50%, -50%)"
    }, ownerState.orientation === "vertical" && {
      left: "50%",
      transform: "translate(-50%, 50%)"
    }, {
      "&:before": _extends$1({
        position: "absolute",
        content: '""',
        borderRadius: "inherit",
        width: "100%",
        height: "100%",
        boxShadow: (theme.vars || theme).shadows[2]
      }, ownerState.size === "small" && {
        boxShadow: "none"
      }),
      "&::after": {
        position: "absolute",
        content: '""',
        borderRadius: "50%",
        width: 42,
        height: 42,
        top: "50%",
        left: "50%",
        transform: "translate(-50%, -50%)"
      },
      [`&:hover, &.${sliderClasses$1.focusVisible}`]: {
        boxShadow: `0px 0px 0px 8px ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.16)` : alpha(theme.palette[ownerState.color].main, 0.16)}`,
        "@media (hover: none)": {
          boxShadow: "none"
        }
      },
      [`&.${sliderClasses$1.active}`]: {
        boxShadow: `0px 0px 0px 14px ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.16)` : alpha(theme.palette[ownerState.color].main, 0.16)}`
      },
      [`&.${sliderClasses$1.disabled}`]: {
        "&:hover": {
          boxShadow: "none"
        }
      }
    }));
    SliderThumb.propTypes = {
      children: propTypes.exports.node
    };
    const StyledSliderValueLabel = styled$1(SliderValueLabel, {
      name: "MuiSlider",
      slot: "ValueLabel",
      overridesResolver: (props, styles2) => styles2.valueLabel
    })(({
      theme,
      ownerState
    }) => _extends$1({
      [`&.${sliderClasses$1.valueLabelOpen}`]: {
        transform: `${ownerState.orientation === "vertical" ? "translateY(-50%)" : "translateY(-100%)"} scale(1)`
      },
      zIndex: 1,
      whiteSpace: "nowrap"
    }, theme.typography.body2, {
      fontWeight: 500,
      transition: theme.transitions.create(["transform"], {
        duration: theme.transitions.duration.shortest
      }),
      transform: `${ownerState.orientation === "vertical" ? "translateY(-50%)" : "translateY(-100%)"} scale(0)`,
      position: "absolute",
      backgroundColor: (theme.vars || theme).palette.grey[600],
      borderRadius: 2,
      color: (theme.vars || theme).palette.common.white,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      padding: "0.25rem 0.75rem"
    }, ownerState.orientation === "horizontal" && {
      top: "-10px",
      transformOrigin: "bottom center",
      "&:before": {
        position: "absolute",
        content: '""',
        width: 8,
        height: 8,
        transform: "translate(-50%, 50%) rotate(45deg)",
        backgroundColor: "inherit",
        bottom: 0,
        left: "50%"
      }
    }, ownerState.orientation === "vertical" && {
      right: ownerState.size === "small" ? "20px" : "30px",
      top: "50%",
      transformOrigin: "right center",
      "&:before": {
        position: "absolute",
        content: '""',
        width: 8,
        height: 8,
        transform: "translate(-50%, -50%) rotate(45deg)",
        backgroundColor: "inherit",
        right: "-20%",
        top: "50%"
      }
    }, ownerState.size === "small" && {
      fontSize: theme.typography.pxToRem(12),
      padding: "0.25rem 0.5rem"
    }));
    StyledSliderValueLabel.propTypes = {
      children: propTypes.exports.node
    };
    const SliderMark = styled$1("span", {
      name: "MuiSlider",
      slot: "Mark",
      shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "markActive",
      overridesResolver: (props, styles2) => {
        const {
          markActive
        } = props;
        return [styles2.mark, markActive && styles2.markActive];
      }
    })(({
      theme,
      ownerState,
      markActive
    }) => _extends$1({
      position: "absolute",
      width: 2,
      height: 2,
      borderRadius: 1,
      backgroundColor: "currentColor"
    }, ownerState.orientation === "horizontal" && {
      top: "50%",
      transform: "translate(-1px, -50%)"
    }, ownerState.orientation === "vertical" && {
      left: "50%",
      transform: "translate(-50%, 1px)"
    }, markActive && {
      backgroundColor: (theme.vars || theme).palette.background.paper,
      opacity: 0.8
    }));
    SliderMark.propTypes = {
      children: propTypes.exports.node
    };
    const SliderMarkLabel = styled$1("span", {
      name: "MuiSlider",
      slot: "MarkLabel",
      shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "markLabelActive",
      overridesResolver: (props, styles2) => styles2.markLabel
    })(({
      theme,
      ownerState,
      markLabelActive
    }) => _extends$1({}, theme.typography.body2, {
      color: (theme.vars || theme).palette.text.secondary,
      position: "absolute",
      whiteSpace: "nowrap"
    }, ownerState.orientation === "horizontal" && {
      top: 30,
      transform: "translateX(-50%)",
      "@media (pointer: coarse)": {
        top: 40
      }
    }, ownerState.orientation === "vertical" && {
      left: 36,
      transform: "translateY(50%)",
      "@media (pointer: coarse)": {
        left: 44
      }
    }, markLabelActive && {
      color: (theme.vars || theme).palette.text.primary
    }));
    SliderMarkLabel.propTypes = {
      children: propTypes.exports.node
    };
    const useUtilityClasses$s = (ownerState) => {
      const {
        disabled,
        dragging,
        marked,
        orientation,
        track,
        classes,
        color: color2,
        size
      } = ownerState;
      const slots = {
        root: ["root", disabled && "disabled", dragging && "dragging", marked && "marked", orientation === "vertical" && "vertical", track === "inverted" && "trackInverted", track === false && "trackFalse", color2 && `color${capitalize(color2)}`, size && `size${capitalize(size)}`],
        rail: ["rail"],
        track: ["track"],
        mark: ["mark"],
        markActive: ["markActive"],
        markLabel: ["markLabel"],
        markLabelActive: ["markLabelActive"],
        valueLabel: ["valueLabel"],
        thumb: ["thumb", disabled && "disabled", size && `thumbSize${capitalize(size)}`, color2 && `thumbColor${capitalize(color2)}`],
        active: ["active"],
        disabled: ["disabled"],
        focusVisible: ["focusVisible"]
      };
      return composeClasses(slots, getSliderUtilityClass, classes);
    };
    const Forward = ({
      children
    }) => children;
    const Slider = /* @__PURE__ */ react.exports.forwardRef(function Slider2(inputProps, ref) {
      var _ref, _slots$root, _ref2, _slots$rail, _ref3, _slots$track, _ref4, _slots$thumb, _ref5, _slots$valueLabel, _ref6, _slots$mark, _ref7, _slots$markLabel, _ref8, _slots$input, _slotProps$root, _slotProps$rail, _slotProps$track, _slotProps$thumb, _slotProps$valueLabel, _slotProps$mark, _slotProps$markLabel, _slotProps$input;
      const props = useThemeProps({
        props: inputProps,
        name: "MuiSlider"
      });
      const theme = useTheme();
      const isRtl = theme.direction === "rtl";
      const {
        "aria-label": ariaLabel,
        "aria-valuetext": ariaValuetext,
        "aria-labelledby": ariaLabelledby,
        component = "span",
        components = {},
        componentsProps = {},
        color: color2 = "primary",
        classes: classesProp,
        className,
        disableSwap = false,
        disabled = false,
        getAriaLabel,
        getAriaValueText,
        marks: marksProp = false,
        max: max2 = 100,
        min: min2 = 0,
        orientation = "horizontal",
        size = "medium",
        step = 1,
        scale = Identity,
        slotProps,
        slots,
        track = "normal",
        valueLabelDisplay = "off",
        valueLabelFormat = Identity
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$K);
      const ownerState = _extends$1({}, props, {
        isRtl,
        max: max2,
        min: min2,
        classes: classesProp,
        disabled,
        disableSwap,
        orientation,
        marks: marksProp,
        color: color2,
        size,
        step,
        scale,
        track,
        valueLabelDisplay,
        valueLabelFormat
      });
      const {
        axisProps: axisProps2,
        getRootProps,
        getHiddenInputProps,
        getThumbProps,
        open,
        active,
        axis,
        focusedThumbIndex,
        range: range2,
        dragging,
        marks,
        values: values2,
        trackOffset,
        trackLeap
      } = useSlider(_extends$1({}, ownerState, {
        rootRef: ref
      }));
      ownerState.marked = marks.length > 0 && marks.some((mark) => mark.label);
      ownerState.dragging = dragging;
      ownerState.focusedThumbIndex = focusedThumbIndex;
      const classes = useUtilityClasses$s(ownerState);
      const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : SliderRoot;
      const RailSlot = (_ref2 = (_slots$rail = slots == null ? void 0 : slots.rail) != null ? _slots$rail : components.Rail) != null ? _ref2 : SliderRail;
      const TrackSlot = (_ref3 = (_slots$track = slots == null ? void 0 : slots.track) != null ? _slots$track : components.Track) != null ? _ref3 : SliderTrack;
      const ThumbSlot = (_ref4 = (_slots$thumb = slots == null ? void 0 : slots.thumb) != null ? _slots$thumb : components.Thumb) != null ? _ref4 : SliderThumb;
      const ValueLabelSlot = (_ref5 = (_slots$valueLabel = slots == null ? void 0 : slots.valueLabel) != null ? _slots$valueLabel : components.ValueLabel) != null ? _ref5 : StyledSliderValueLabel;
      const MarkSlot = (_ref6 = (_slots$mark = slots == null ? void 0 : slots.mark) != null ? _slots$mark : components.Mark) != null ? _ref6 : SliderMark;
      const MarkLabelSlot = (_ref7 = (_slots$markLabel = slots == null ? void 0 : slots.markLabel) != null ? _slots$markLabel : components.MarkLabel) != null ? _ref7 : SliderMarkLabel;
      const InputSlot = (_ref8 = (_slots$input = slots == null ? void 0 : slots.input) != null ? _slots$input : components.Input) != null ? _ref8 : "input";
      const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
      const railSlotProps = (_slotProps$rail = slotProps == null ? void 0 : slotProps.rail) != null ? _slotProps$rail : componentsProps.rail;
      const trackSlotProps = (_slotProps$track = slotProps == null ? void 0 : slotProps.track) != null ? _slotProps$track : componentsProps.track;
      const thumbSlotProps = (_slotProps$thumb = slotProps == null ? void 0 : slotProps.thumb) != null ? _slotProps$thumb : componentsProps.thumb;
      const valueLabelSlotProps = (_slotProps$valueLabel = slotProps == null ? void 0 : slotProps.valueLabel) != null ? _slotProps$valueLabel : componentsProps.valueLabel;
      const markSlotProps = (_slotProps$mark = slotProps == null ? void 0 : slotProps.mark) != null ? _slotProps$mark : componentsProps.mark;
      const markLabelSlotProps = (_slotProps$markLabel = slotProps == null ? void 0 : slotProps.markLabel) != null ? _slotProps$markLabel : componentsProps.markLabel;
      const inputSlotProps = (_slotProps$input = slotProps == null ? void 0 : slotProps.input) != null ? _slotProps$input : componentsProps.input;
      const rootProps = useSlotProps({
        elementType: RootSlot,
        getSlotProps: getRootProps,
        externalSlotProps: rootSlotProps,
        externalForwardedProps: other,
        additionalProps: _extends$1({}, shouldSpreadAdditionalProps$1(RootSlot) && {
          as: component
        }),
        ownerState: _extends$1({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
        className: [classes.root, className]
      });
      const railProps = useSlotProps({
        elementType: RailSlot,
        externalSlotProps: railSlotProps,
        ownerState,
        className: classes.rail
      });
      const trackProps = useSlotProps({
        elementType: TrackSlot,
        externalSlotProps: trackSlotProps,
        additionalProps: {
          style: _extends$1({}, axisProps2[axis].offset(trackOffset), axisProps2[axis].leap(trackLeap))
        },
        ownerState: _extends$1({}, ownerState, trackSlotProps == null ? void 0 : trackSlotProps.ownerState),
        className: classes.track
      });
      const thumbProps = useSlotProps({
        elementType: ThumbSlot,
        getSlotProps: getThumbProps,
        externalSlotProps: thumbSlotProps,
        ownerState: _extends$1({}, ownerState, thumbSlotProps == null ? void 0 : thumbSlotProps.ownerState),
        className: classes.thumb
      });
      const valueLabelProps = useSlotProps({
        elementType: ValueLabelSlot,
        externalSlotProps: valueLabelSlotProps,
        ownerState: _extends$1({}, ownerState, valueLabelSlotProps == null ? void 0 : valueLabelSlotProps.ownerState),
        className: classes.valueLabel
      });
      const markProps = useSlotProps({
        elementType: MarkSlot,
        externalSlotProps: markSlotProps,
        ownerState,
        className: classes.mark
      });
      const markLabelProps = useSlotProps({
        elementType: MarkLabelSlot,
        externalSlotProps: markLabelSlotProps,
        ownerState,
        className: classes.markLabel
      });
      const inputSliderProps = useSlotProps({
        elementType: InputSlot,
        getSlotProps: getHiddenInputProps,
        externalSlotProps: inputSlotProps,
        ownerState
      });
      return /* @__PURE__ */ jsxs(RootSlot, _extends$1({}, rootProps, {
        children: [/* @__PURE__ */ jsx(RailSlot, _extends$1({}, railProps)), /* @__PURE__ */ jsx(TrackSlot, _extends$1({}, trackProps)), marks.filter((mark) => mark.value >= min2 && mark.value <= max2).map((mark, index) => {
          const percent = valueToPercent(mark.value, min2, max2);
          const style2 = axisProps2[axis].offset(percent);
          let markActive;
          if (track === false) {
            markActive = values2.indexOf(mark.value) !== -1;
          } else {
            markActive = track === "normal" && (range2 ? mark.value >= values2[0] && mark.value <= values2[values2.length - 1] : mark.value <= values2[0]) || track === "inverted" && (range2 ? mark.value <= values2[0] || mark.value >= values2[values2.length - 1] : mark.value >= values2[0]);
          }
          return /* @__PURE__ */ jsxs(react.exports.Fragment, {
            children: [/* @__PURE__ */ jsx(MarkSlot, _extends$1({
              "data-index": index
            }, markProps, !isHostComponent(MarkSlot) && {
              markActive
            }, {
              style: _extends$1({}, style2, markProps.style),
              className: clsx(markProps.className, markActive && classes.markActive)
            })), mark.label != null ? /* @__PURE__ */ jsx(MarkLabelSlot, _extends$1({
              "aria-hidden": true,
              "data-index": index
            }, markLabelProps, !isHostComponent(MarkLabelSlot) && {
              markLabelActive: markActive
            }, {
              style: _extends$1({}, style2, markLabelProps.style),
              className: clsx(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
              children: mark.label
            })) : null]
          }, index);
        }), values2.map((value2, index) => {
          const percent = valueToPercent(value2, min2, max2);
          const style2 = axisProps2[axis].offset(percent);
          const ValueLabelComponent = valueLabelDisplay === "off" ? Forward : ValueLabelSlot;
          return /* @__PURE__ */ jsx(ValueLabelComponent, _extends$1({}, !isHostComponent(ValueLabelComponent) && {
            valueLabelFormat,
            valueLabelDisplay,
            value: typeof valueLabelFormat === "function" ? valueLabelFormat(scale(value2), index) : valueLabelFormat,
            index,
            open: open === index || active === index || valueLabelDisplay === "on",
            disabled
          }, valueLabelProps, {
            children: /* @__PURE__ */ jsx(ThumbSlot, _extends$1({
              "data-index": index
            }, thumbProps, {
              className: clsx(classes.thumb, thumbProps.className, active === index && classes.active, focusedThumbIndex === index && classes.focusVisible),
              style: _extends$1({}, style2, {
                pointerEvents: disableSwap && active !== index ? "none" : void 0
              }, thumbProps.style),
              children: /* @__PURE__ */ jsx(InputSlot, _extends$1({
                "data-index": index,
                "aria-label": getAriaLabel ? getAriaLabel(index) : ariaLabel,
                "aria-valuenow": scale(value2),
                "aria-labelledby": ariaLabelledby,
                "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value2), index) : ariaValuetext,
                value: values2[index]
              }, inputSliderProps))
            }))
          }), index);
        })]
      }));
    });
    Slider.propTypes = {
      "aria-label": chainPropTypes(propTypes.exports.string, (props) => {
        const range2 = Array.isArray(props.value || props.defaultValue);
        if (range2 && props["aria-label"] != null) {
          return new Error("MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.");
        }
        return null;
      }),
      "aria-labelledby": propTypes.exports.string,
      "aria-valuetext": chainPropTypes(propTypes.exports.string, (props) => {
        const range2 = Array.isArray(props.value || props.defaultValue);
        if (range2 && props["aria-valuetext"] != null) {
          return new Error("MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.");
        }
        return null;
      }),
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      color: propTypes.exports.oneOfType([propTypes.exports.oneOf(["primary", "secondary"]), propTypes.exports.string]),
      components: propTypes.exports.shape({
        Input: propTypes.exports.elementType,
        Mark: propTypes.exports.elementType,
        MarkLabel: propTypes.exports.elementType,
        Rail: propTypes.exports.elementType,
        Root: propTypes.exports.elementType,
        Thumb: propTypes.exports.elementType,
        Track: propTypes.exports.elementType,
        ValueLabel: propTypes.exports.elementType
      }),
      componentsProps: propTypes.exports.shape({
        input: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
        mark: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
        markLabel: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
        rail: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
        root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
        thumb: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
        track: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
        valueLabel: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.shape({
          children: propTypes.exports.element,
          className: propTypes.exports.string,
          open: propTypes.exports.bool,
          style: propTypes.exports.object,
          value: propTypes.exports.number,
          valueLabelDisplay: propTypes.exports.oneOf(["auto", "off", "on"])
        })])
      }),
      defaultValue: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.number), propTypes.exports.number]),
      disabled: propTypes.exports.bool,
      disableSwap: propTypes.exports.bool,
      getAriaLabel: propTypes.exports.func,
      getAriaValueText: propTypes.exports.func,
      marks: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.shape({
        label: propTypes.exports.node,
        value: propTypes.exports.number.isRequired
      })), propTypes.exports.bool]),
      max: propTypes.exports.number,
      min: propTypes.exports.number,
      name: propTypes.exports.string,
      onChange: propTypes.exports.func,
      onChangeCommitted: propTypes.exports.func,
      orientation: propTypes.exports.oneOf(["horizontal", "vertical"]),
      scale: propTypes.exports.func,
      size: propTypes.exports.oneOfType([propTypes.exports.oneOf(["small", "medium"]), propTypes.exports.string]),
      slotProps: propTypes.exports.shape({
        input: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
        mark: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
        markLabel: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
        rail: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
        root: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
        thumb: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
        track: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
        valueLabel: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.shape({
          children: propTypes.exports.element,
          className: propTypes.exports.string,
          open: propTypes.exports.bool,
          style: propTypes.exports.object,
          value: propTypes.exports.number,
          valueLabelDisplay: propTypes.exports.oneOf(["auto", "off", "on"])
        })])
      }),
      slots: propTypes.exports.shape({
        input: propTypes.exports.elementType,
        mark: propTypes.exports.elementType,
        markLabel: propTypes.exports.elementType,
        rail: propTypes.exports.elementType,
        root: propTypes.exports.elementType,
        thumb: propTypes.exports.elementType,
        track: propTypes.exports.elementType,
        valueLabel: propTypes.exports.elementType
      }),
      step: propTypes.exports.number,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      tabIndex: propTypes.exports.number,
      track: propTypes.exports.oneOf(["inverted", "normal", false]),
      value: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.number), propTypes.exports.number]),
      valueLabelDisplay: propTypes.exports.oneOf(["auto", "off", "on"]),
      valueLabelFormat: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.string])
    };
    const Slider$1 = Slider;
    function getSwitchUtilityClass(slot) {
      return generateUtilityClass("MuiSwitch", slot);
    }
    const switchClasses = generateUtilityClasses("MuiSwitch", ["root", "edgeStart", "edgeEnd", "switchBase", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium", "checked", "disabled", "input", "thumb", "track"]);
    const switchClasses$1 = switchClasses;
    const _excluded$J = ["className", "color", "edge", "size", "sx"];
    const useUtilityClasses$r = (ownerState) => {
      const {
        classes,
        edge,
        size,
        color: color2,
        checked,
        disabled
      } = ownerState;
      const slots = {
        root: ["root", edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`],
        switchBase: ["switchBase", `color${capitalize(color2)}`, checked && "checked", disabled && "disabled"],
        thumb: ["thumb"],
        track: ["track"],
        input: ["input"]
      };
      const composedClasses = composeClasses(slots, getSwitchUtilityClass, classes);
      return _extends$1({}, classes, composedClasses);
    };
    const SwitchRoot = styled$1("span", {
      name: "MuiSwitch",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.edge && styles2[`edge${capitalize(ownerState.edge)}`], styles2[`size${capitalize(ownerState.size)}`]];
      }
    })(({
      ownerState
    }) => _extends$1({
      display: "inline-flex",
      width: 34 + 12 * 2,
      height: 14 + 12 * 2,
      overflow: "hidden",
      padding: 12,
      boxSizing: "border-box",
      position: "relative",
      flexShrink: 0,
      zIndex: 0,
      verticalAlign: "middle",
      "@media print": {
        colorAdjust: "exact"
      }
    }, ownerState.edge === "start" && {
      marginLeft: -8
    }, ownerState.edge === "end" && {
      marginRight: -8
    }, ownerState.size === "small" && {
      width: 40,
      height: 24,
      padding: 7,
      [`& .${switchClasses$1.thumb}`]: {
        width: 16,
        height: 16
      },
      [`& .${switchClasses$1.switchBase}`]: {
        padding: 4,
        [`&.${switchClasses$1.checked}`]: {
          transform: "translateX(16px)"
        }
      }
    }));
    const SwitchSwitchBase = styled$1(SwitchBase$1, {
      name: "MuiSwitch",
      slot: "SwitchBase",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.switchBase, {
          [`& .${switchClasses$1.input}`]: styles2.input
        }, ownerState.color !== "default" && styles2[`color${capitalize(ownerState.color)}`]];
      }
    })(({
      theme
    }) => ({
      position: "absolute",
      top: 0,
      left: 0,
      zIndex: 1,
      color: theme.vars ? theme.vars.palette.Switch.defaultColor : `${theme.palette.mode === "light" ? theme.palette.common.white : theme.palette.grey[300]}`,
      transition: theme.transitions.create(["left", "transform"], {
        duration: theme.transitions.duration.shortest
      }),
      [`&.${switchClasses$1.checked}`]: {
        transform: "translateX(20px)"
      },
      [`&.${switchClasses$1.disabled}`]: {
        color: theme.vars ? theme.vars.palette.Switch.defaultDisabledColor : `${theme.palette.mode === "light" ? theme.palette.grey[100] : theme.palette.grey[600]}`
      },
      [`&.${switchClasses$1.checked} + .${switchClasses$1.track}`]: {
        opacity: 0.5
      },
      [`&.${switchClasses$1.disabled} + .${switchClasses$1.track}`]: {
        opacity: theme.vars ? theme.vars.opacity.switchTrackDisabled : `${theme.palette.mode === "light" ? 0.12 : 0.2}`
      },
      [`& .${switchClasses$1.input}`]: {
        left: "-100%",
        width: "300%"
      }
    }), ({
      theme,
      ownerState
    }) => _extends$1({
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }
    }, ownerState.color !== "default" && {
      [`&.${switchClasses$1.checked}`]: {
        color: (theme.vars || theme).palette[ownerState.color].main,
        "&:hover": {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        },
        [`&.${switchClasses$1.disabled}`]: {
          color: theme.vars ? theme.vars.palette.Switch[`${ownerState.color}DisabledColor`] : `${theme.palette.mode === "light" ? lighten(theme.palette[ownerState.color].main, 0.62) : darken(theme.palette[ownerState.color].main, 0.55)}`
        }
      },
      [`&.${switchClasses$1.checked} + .${switchClasses$1.track}`]: {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].main
      }
    }));
    const SwitchTrack = styled$1("span", {
      name: "MuiSwitch",
      slot: "Track",
      overridesResolver: (props, styles2) => styles2.track
    })(({
      theme
    }) => ({
      height: "100%",
      width: "100%",
      borderRadius: 14 / 2,
      zIndex: -1,
      transition: theme.transitions.create(["opacity", "background-color"], {
        duration: theme.transitions.duration.shortest
      }),
      backgroundColor: theme.vars ? theme.vars.palette.common.onBackground : `${theme.palette.mode === "light" ? theme.palette.common.black : theme.palette.common.white}`,
      opacity: theme.vars ? theme.vars.opacity.switchTrack : `${theme.palette.mode === "light" ? 0.38 : 0.3}`
    }));
    const SwitchThumb = styled$1("span", {
      name: "MuiSwitch",
      slot: "Thumb",
      overridesResolver: (props, styles2) => styles2.thumb
    })(({
      theme
    }) => ({
      boxShadow: (theme.vars || theme).shadows[1],
      backgroundColor: "currentColor",
      width: 20,
      height: 20,
      borderRadius: "50%"
    }));
    const Switch = /* @__PURE__ */ react.exports.forwardRef(function Switch2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiSwitch"
      });
      const {
        className,
        color: color2 = "primary",
        edge = false,
        size = "medium",
        sx
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$J);
      const ownerState = _extends$1({}, props, {
        color: color2,
        edge,
        size
      });
      const classes = useUtilityClasses$r(ownerState);
      const icon = /* @__PURE__ */ jsx(SwitchThumb, {
        className: classes.thumb,
        ownerState
      });
      return /* @__PURE__ */ jsxs(SwitchRoot, {
        className: clsx(classes.root, className),
        sx,
        ownerState,
        children: [/* @__PURE__ */ jsx(SwitchSwitchBase, _extends$1({
          type: "checkbox",
          icon,
          checkedIcon: icon,
          ref,
          ownerState
        }, other, {
          classes: _extends$1({}, classes, {
            root: classes.switchBase
          })
        })), /* @__PURE__ */ jsx(SwitchTrack, {
          className: classes.track,
          ownerState
        })]
      });
    });
    Switch.propTypes = {
      checked: propTypes.exports.bool,
      checkedIcon: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      color: propTypes.exports.oneOfType([propTypes.exports.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), propTypes.exports.string]),
      defaultChecked: propTypes.exports.bool,
      disabled: propTypes.exports.bool,
      disableRipple: propTypes.exports.bool,
      edge: propTypes.exports.oneOf(["end", "start", false]),
      icon: propTypes.exports.node,
      id: propTypes.exports.string,
      inputProps: propTypes.exports.object,
      inputRef: refType$1,
      onChange: propTypes.exports.func,
      required: propTypes.exports.bool,
      size: propTypes.exports.oneOfType([propTypes.exports.oneOf(["medium", "small"]), propTypes.exports.string]),
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      value: propTypes.exports.any
    };
    const Switch$1 = Switch;
    function getTabUtilityClass(slot) {
      return generateUtilityClass("MuiTab", slot);
    }
    const tabClasses = generateUtilityClasses("MuiTab", ["root", "labelIcon", "textColorInherit", "textColorPrimary", "textColorSecondary", "selected", "disabled", "fullWidth", "wrapped", "iconWrapper"]);
    const tabClasses$1 = tabClasses;
    const _excluded$I = ["className", "disabled", "disableFocusRipple", "fullWidth", "icon", "iconPosition", "indicator", "label", "onChange", "onClick", "onFocus", "selected", "selectionFollowsFocus", "textColor", "value", "wrapped"];
    const useUtilityClasses$q = (ownerState) => {
      const {
        classes,
        textColor,
        fullWidth,
        wrapped,
        icon,
        label,
        selected,
        disabled
      } = ownerState;
      const slots = {
        root: ["root", icon && label && "labelIcon", `textColor${capitalize(textColor)}`, fullWidth && "fullWidth", wrapped && "wrapped", selected && "selected", disabled && "disabled"],
        iconWrapper: ["iconWrapper"]
      };
      return composeClasses(slots, getTabUtilityClass, classes);
    };
    const TabRoot = styled$1(ButtonBase$1, {
      name: "MuiTab",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.label && ownerState.icon && styles2.labelIcon, styles2[`textColor${capitalize(ownerState.textColor)}`], ownerState.fullWidth && styles2.fullWidth, ownerState.wrapped && styles2.wrapped];
      }
    })(({
      theme,
      ownerState
    }) => _extends$1({}, theme.typography.button, {
      maxWidth: 360,
      minWidth: 90,
      position: "relative",
      minHeight: 48,
      flexShrink: 0,
      padding: "12px 16px",
      overflow: "hidden",
      whiteSpace: "normal",
      textAlign: "center"
    }, ownerState.label && {
      flexDirection: ownerState.iconPosition === "top" || ownerState.iconPosition === "bottom" ? "column" : "row"
    }, {
      lineHeight: 1.25
    }, ownerState.icon && ownerState.label && {
      minHeight: 72,
      paddingTop: 9,
      paddingBottom: 9,
      [`& > .${tabClasses$1.iconWrapper}`]: _extends$1({}, ownerState.iconPosition === "top" && {
        marginBottom: 6
      }, ownerState.iconPosition === "bottom" && {
        marginTop: 6
      }, ownerState.iconPosition === "start" && {
        marginRight: theme.spacing(1)
      }, ownerState.iconPosition === "end" && {
        marginLeft: theme.spacing(1)
      })
    }, ownerState.textColor === "inherit" && {
      color: "inherit",
      opacity: 0.6,
      [`&.${tabClasses$1.selected}`]: {
        opacity: 1
      },
      [`&.${tabClasses$1.disabled}`]: {
        opacity: (theme.vars || theme).palette.action.disabledOpacity
      }
    }, ownerState.textColor === "primary" && {
      color: (theme.vars || theme).palette.text.secondary,
      [`&.${tabClasses$1.selected}`]: {
        color: (theme.vars || theme).palette.primary.main
      },
      [`&.${tabClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled
      }
    }, ownerState.textColor === "secondary" && {
      color: (theme.vars || theme).palette.text.secondary,
      [`&.${tabClasses$1.selected}`]: {
        color: (theme.vars || theme).palette.secondary.main
      },
      [`&.${tabClasses$1.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled
      }
    }, ownerState.fullWidth && {
      flexShrink: 1,
      flexGrow: 1,
      flexBasis: 0,
      maxWidth: "none"
    }, ownerState.wrapped && {
      fontSize: theme.typography.pxToRem(12)
    }));
    const Tab = /* @__PURE__ */ react.exports.forwardRef(function Tab2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiTab"
      });
      const {
        className,
        disabled = false,
        disableFocusRipple = false,
        fullWidth,
        icon: iconProp,
        iconPosition = "top",
        indicator,
        label,
        onChange,
        onClick,
        onFocus,
        selected,
        selectionFollowsFocus,
        textColor = "inherit",
        value: value2,
        wrapped = false
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$I);
      const ownerState = _extends$1({}, props, {
        disabled,
        disableFocusRipple,
        selected,
        icon: !!iconProp,
        iconPosition,
        label: !!label,
        fullWidth,
        textColor,
        wrapped
      });
      const classes = useUtilityClasses$q(ownerState);
      const icon = iconProp && label && /* @__PURE__ */ react.exports.isValidElement(iconProp) ? /* @__PURE__ */ react.exports.cloneElement(iconProp, {
        className: clsx(classes.iconWrapper, iconProp.props.className)
      }) : iconProp;
      const handleClick = (event) => {
        if (!selected && onChange) {
          onChange(event, value2);
        }
        if (onClick) {
          onClick(event);
        }
      };
      const handleFocus = (event) => {
        if (selectionFollowsFocus && !selected && onChange) {
          onChange(event, value2);
        }
        if (onFocus) {
          onFocus(event);
        }
      };
      return /* @__PURE__ */ jsxs(TabRoot, _extends$1({
        focusRipple: !disableFocusRipple,
        className: clsx(classes.root, className),
        ref,
        role: "tab",
        "aria-selected": selected,
        disabled,
        onClick: handleClick,
        onFocus: handleFocus,
        ownerState,
        tabIndex: selected ? 0 : -1
      }, other, {
        children: [iconPosition === "top" || iconPosition === "start" ? /* @__PURE__ */ jsxs(react.exports.Fragment, {
          children: [icon, label]
        }) : /* @__PURE__ */ jsxs(react.exports.Fragment, {
          children: [label, icon]
        }), indicator]
      }));
    });
    Tab.propTypes = {
      children: unsupportedProp,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      disabled: propTypes.exports.bool,
      disableFocusRipple: propTypes.exports.bool,
      disableRipple: propTypes.exports.bool,
      icon: propTypes.exports.oneOfType([propTypes.exports.element, propTypes.exports.string]),
      iconPosition: propTypes.exports.oneOf(["bottom", "end", "start", "top"]),
      label: propTypes.exports.node,
      onChange: propTypes.exports.func,
      onClick: propTypes.exports.func,
      onFocus: propTypes.exports.func,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      value: propTypes.exports.any,
      wrapped: propTypes.exports.bool
    };
    const Tab$1 = Tab;
    const KeyboardArrowLeft = createSvgIcon$1(/* @__PURE__ */ jsx("path", {
      d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"
    }), "KeyboardArrowLeft");
    const KeyboardArrowRight = createSvgIcon$1(/* @__PURE__ */ jsx("path", {
      d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"
    }), "KeyboardArrowRight");
    function easeInOutSin(time) {
      return (1 + Math.sin(Math.PI * time - Math.PI / 2)) / 2;
    }
    function animate(property2, element, to2, options = {}, cb = () => {
    }) {
      const {
        ease = easeInOutSin,
        duration: duration2 = 300
      } = options;
      let start2 = null;
      const from2 = element[property2];
      let cancelled = false;
      const cancel = () => {
        cancelled = true;
      };
      const step = (timestamp) => {
        if (cancelled) {
          cb(new Error("Animation cancelled"));
          return;
        }
        if (start2 === null) {
          start2 = timestamp;
        }
        const time = Math.min(1, (timestamp - start2) / duration2);
        element[property2] = ease(time) * (to2 - from2) + from2;
        if (time >= 1) {
          requestAnimationFrame(() => {
            cb(null);
          });
          return;
        }
        requestAnimationFrame(step);
      };
      if (from2 === to2) {
        cb(new Error("Element already at target position"));
        return cancel;
      }
      requestAnimationFrame(step);
      return cancel;
    }
    const _excluded$H = ["onChange"];
    const styles$1 = {
      width: 99,
      height: 99,
      position: "absolute",
      top: -9999,
      overflow: "scroll"
    };
    function ScrollbarSize(props) {
      const {
        onChange
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$H);
      const scrollbarHeight = react.exports.useRef();
      const nodeRef = react.exports.useRef(null);
      const setMeasurements = () => {
        scrollbarHeight.current = nodeRef.current.offsetHeight - nodeRef.current.clientHeight;
      };
      useEnhancedEffect$1(() => {
        const handleResize = debounce$3(() => {
          const prevHeight = scrollbarHeight.current;
          setMeasurements();
          if (prevHeight !== scrollbarHeight.current) {
            onChange(scrollbarHeight.current);
          }
        });
        const containerWindow = ownerWindow(nodeRef.current);
        containerWindow.addEventListener("resize", handleResize);
        return () => {
          handleResize.clear();
          containerWindow.removeEventListener("resize", handleResize);
        };
      }, [onChange]);
      react.exports.useEffect(() => {
        setMeasurements();
        onChange(scrollbarHeight.current);
      }, [onChange]);
      return /* @__PURE__ */ jsx("div", _extends$1({
        style: styles$1,
        ref: nodeRef
      }, other));
    }
    ScrollbarSize.propTypes = {
      onChange: propTypes.exports.func.isRequired
    };
    function getTabScrollButtonUtilityClass(slot) {
      return generateUtilityClass("MuiTabScrollButton", slot);
    }
    const tabScrollButtonClasses = generateUtilityClasses("MuiTabScrollButton", ["root", "vertical", "horizontal", "disabled"]);
    const tabScrollButtonClasses$1 = tabScrollButtonClasses;
    const _excluded$G = ["className", "slots", "slotProps", "direction", "orientation", "disabled"];
    const useUtilityClasses$p = (ownerState) => {
      const {
        classes,
        orientation,
        disabled
      } = ownerState;
      const slots = {
        root: ["root", orientation, disabled && "disabled"]
      };
      return composeClasses(slots, getTabScrollButtonUtilityClass, classes);
    };
    const TabScrollButtonRoot = styled$1(ButtonBase$1, {
      name: "MuiTabScrollButton",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.root, ownerState.orientation && styles2[ownerState.orientation]];
      }
    })(({
      ownerState
    }) => _extends$1({
      width: 40,
      flexShrink: 0,
      opacity: 0.8,
      [`&.${tabScrollButtonClasses$1.disabled}`]: {
        opacity: 0
      }
    }, ownerState.orientation === "vertical" && {
      width: "100%",
      height: 40,
      "& svg": {
        transform: `rotate(${ownerState.isRtl ? -90 : 90}deg)`
      }
    }));
    const TabScrollButton = /* @__PURE__ */ react.exports.forwardRef(function TabScrollButton2(inProps, ref) {
      var _slots$StartScrollBut, _slots$EndScrollButto;
      const props = useThemeProps({
        props: inProps,
        name: "MuiTabScrollButton"
      });
      const {
        className,
        slots = {},
        slotProps = {},
        direction
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$G);
      const theme = useTheme();
      const isRtl = theme.direction === "rtl";
      const ownerState = _extends$1({
        isRtl
      }, props);
      const classes = useUtilityClasses$p(ownerState);
      const StartButtonIcon = (_slots$StartScrollBut = slots.StartScrollButtonIcon) != null ? _slots$StartScrollBut : KeyboardArrowLeft;
      const EndButtonIcon = (_slots$EndScrollButto = slots.EndScrollButtonIcon) != null ? _slots$EndScrollButto : KeyboardArrowRight;
      const startButtonIconProps = useSlotProps({
        elementType: StartButtonIcon,
        externalSlotProps: slotProps.startScrollButtonIcon,
        additionalProps: {
          fontSize: "small"
        },
        ownerState
      });
      const endButtonIconProps = useSlotProps({
        elementType: EndButtonIcon,
        externalSlotProps: slotProps.endScrollButtonIcon,
        additionalProps: {
          fontSize: "small"
        },
        ownerState
      });
      return /* @__PURE__ */ jsx(TabScrollButtonRoot, _extends$1({
        component: "div",
        className: clsx(classes.root, className),
        ref,
        role: null,
        ownerState,
        tabIndex: null
      }, other, {
        children: direction === "left" ? /* @__PURE__ */ jsx(StartButtonIcon, _extends$1({}, startButtonIconProps)) : /* @__PURE__ */ jsx(EndButtonIcon, _extends$1({}, endButtonIconProps))
      }));
    });
    TabScrollButton.propTypes = {
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      direction: propTypes.exports.oneOf(["left", "right"]).isRequired,
      disabled: propTypes.exports.bool,
      orientation: propTypes.exports.oneOf(["horizontal", "vertical"]).isRequired,
      slotProps: propTypes.exports.shape({
        endScrollButtonIcon: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
        startScrollButtonIcon: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
      }),
      slots: propTypes.exports.shape({
        EndScrollButtonIcon: propTypes.exports.elementType,
        StartScrollButtonIcon: propTypes.exports.elementType
      }),
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
    };
    const TabScrollButton$1 = TabScrollButton;
    function getTabsUtilityClass(slot) {
      return generateUtilityClass("MuiTabs", slot);
    }
    const tabsClasses = generateUtilityClasses("MuiTabs", ["root", "vertical", "flexContainer", "flexContainerVertical", "centered", "scroller", "fixed", "scrollableX", "scrollableY", "hideScrollbar", "scrollButtons", "scrollButtonsHideMobile", "indicator"]);
    const tabsClasses$1 = tabsClasses;
    const _excluded$F = ["aria-label", "aria-labelledby", "action", "centered", "children", "className", "component", "allowScrollButtonsMobile", "indicatorColor", "onChange", "orientation", "ScrollButtonComponent", "scrollButtons", "selectionFollowsFocus", "slots", "slotProps", "TabIndicatorProps", "TabScrollButtonProps", "textColor", "value", "variant", "visibleScrollbar"];
    const nextItem = (list, item) => {
      if (list === item) {
        return list.firstChild;
      }
      if (item && item.nextElementSibling) {
        return item.nextElementSibling;
      }
      return list.firstChild;
    };
    const previousItem = (list, item) => {
      if (list === item) {
        return list.lastChild;
      }
      if (item && item.previousElementSibling) {
        return item.previousElementSibling;
      }
      return list.lastChild;
    };
    const moveFocus = (list, currentFocus, traversalFunction) => {
      let wrappedOnce = false;
      let nextFocus = traversalFunction(list, currentFocus);
      while (nextFocus) {
        if (nextFocus === list.firstChild) {
          if (wrappedOnce) {
            return;
          }
          wrappedOnce = true;
        }
        const nextFocusDisabled = nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
        if (!nextFocus.hasAttribute("tabindex") || nextFocusDisabled) {
          nextFocus = traversalFunction(list, nextFocus);
        } else {
          nextFocus.focus();
          return;
        }
      }
    };
    const useUtilityClasses$o = (ownerState) => {
      const {
        vertical,
        fixed,
        hideScrollbar,
        scrollableX,
        scrollableY,
        centered,
        scrollButtonsHideMobile,
        classes
      } = ownerState;
      const slots = {
        root: ["root", vertical && "vertical"],
        scroller: ["scroller", fixed && "fixed", hideScrollbar && "hideScrollbar", scrollableX && "scrollableX", scrollableY && "scrollableY"],
        flexContainer: ["flexContainer", vertical && "flexContainerVertical", centered && "centered"],
        indicator: ["indicator"],
        scrollButtons: ["scrollButtons", scrollButtonsHideMobile && "scrollButtonsHideMobile"],
        scrollableX: [scrollableX && "scrollableX"],
        hideScrollbar: [hideScrollbar && "hideScrollbar"]
      };
      return composeClasses(slots, getTabsUtilityClass, classes);
    };
    const TabsRoot = styled$1("div", {
      name: "MuiTabs",
      slot: "Root",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [{
          [`& .${tabsClasses$1.scrollButtons}`]: styles2.scrollButtons
        }, {
          [`& .${tabsClasses$1.scrollButtons}`]: ownerState.scrollButtonsHideMobile && styles2.scrollButtonsHideMobile
        }, styles2.root, ownerState.vertical && styles2.vertical];
      }
    })(({
      ownerState,
      theme
    }) => _extends$1({
      overflow: "hidden",
      minHeight: 48,
      WebkitOverflowScrolling: "touch",
      display: "flex"
    }, ownerState.vertical && {
      flexDirection: "column"
    }, ownerState.scrollButtonsHideMobile && {
      [`& .${tabsClasses$1.scrollButtons}`]: {
        [theme.breakpoints.down("sm")]: {
          display: "none"
        }
      }
    }));
    const TabsScroller = styled$1("div", {
      name: "MuiTabs",
      slot: "Scroller",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.scroller, ownerState.fixed && styles2.fixed, ownerState.hideScrollbar && styles2.hideScrollbar, ownerState.scrollableX && styles2.scrollableX, ownerState.scrollableY && styles2.scrollableY];
      }
    })(({
      ownerState
    }) => _extends$1({
      position: "relative",
      display: "inline-block",
      flex: "1 1 auto",
      whiteSpace: "nowrap"
    }, ownerState.fixed && {
      overflowX: "hidden",
      width: "100%"
    }, ownerState.hideScrollbar && {
      scrollbarWidth: "none",
      "&::-webkit-scrollbar": {
        display: "none"
      }
    }, ownerState.scrollableX && {
      overflowX: "auto",
      overflowY: "hidden"
    }, ownerState.scrollableY && {
      overflowY: "auto",
      overflowX: "hidden"
    }));
    const FlexContainer = styled$1("div", {
      name: "MuiTabs",
      slot: "FlexContainer",
      overridesResolver: (props, styles2) => {
        const {
          ownerState
        } = props;
        return [styles2.flexContainer, ownerState.vertical && styles2.flexContainerVertical, ownerState.centered && styles2.centered];
      }
    })(({
      ownerState
    }) => _extends$1({
      display: "flex"
    }, ownerState.vertical && {
      flexDirection: "column"
    }, ownerState.centered && {
      justifyContent: "center"
    }));
    const TabsIndicator = styled$1("span", {
      name: "MuiTabs",
      slot: "Indicator",
      overridesResolver: (props, styles2) => styles2.indicator
    })(({
      ownerState,
      theme
    }) => _extends$1({
      position: "absolute",
      height: 2,
      bottom: 0,
      width: "100%",
      transition: theme.transitions.create()
    }, ownerState.indicatorColor === "primary" && {
      backgroundColor: (theme.vars || theme).palette.primary.main
    }, ownerState.indicatorColor === "secondary" && {
      backgroundColor: (theme.vars || theme).palette.secondary.main
    }, ownerState.vertical && {
      height: "100%",
      width: 2,
      right: 0
    }));
    const TabsScrollbarSize = styled$1(ScrollbarSize, {
      name: "MuiTabs",
      slot: "ScrollbarSize"
    })({
      overflowX: "auto",
      overflowY: "hidden",
      scrollbarWidth: "none",
      "&::-webkit-scrollbar": {
        display: "none"
      }
    });
    const defaultIndicatorStyle = {};
    let warnedOnceTabPresent = false;
    const Tabs = /* @__PURE__ */ react.exports.forwardRef(function Tabs2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiTabs"
      });
      const theme = useTheme();
      const isRtl = theme.direction === "rtl";
      const {
        "aria-label": ariaLabel,
        "aria-labelledby": ariaLabelledBy,
        action,
        centered = false,
        children: childrenProp,
        className,
        component = "div",
        allowScrollButtonsMobile = false,
        indicatorColor = "primary",
        onChange,
        orientation = "horizontal",
        ScrollButtonComponent = TabScrollButton$1,
        scrollButtons = "auto",
        selectionFollowsFocus,
        slots = {},
        slotProps = {},
        TabIndicatorProps = {},
        TabScrollButtonProps = {},
        textColor = "primary",
        value: value2,
        variant = "standard",
        visibleScrollbar = false
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$F);
      const scrollable = variant === "scrollable";
      const vertical = orientation === "vertical";
      const scrollStart = vertical ? "scrollTop" : "scrollLeft";
      const start2 = vertical ? "top" : "left";
      const end2 = vertical ? "bottom" : "right";
      const clientSize = vertical ? "clientHeight" : "clientWidth";
      const size = vertical ? "height" : "width";
      const ownerState = _extends$1({}, props, {
        component,
        allowScrollButtonsMobile,
        indicatorColor,
        orientation,
        vertical,
        scrollButtons,
        textColor,
        variant,
        visibleScrollbar,
        fixed: !scrollable,
        hideScrollbar: scrollable && !visibleScrollbar,
        scrollableX: scrollable && !vertical,
        scrollableY: scrollable && vertical,
        centered: centered && !scrollable,
        scrollButtonsHideMobile: !allowScrollButtonsMobile
      });
      const classes = useUtilityClasses$o(ownerState);
      const startScrollButtonIconProps = useSlotProps({
        elementType: slots.StartScrollButtonIcon,
        externalSlotProps: slotProps.startScrollButtonIcon,
        ownerState
      });
      const endScrollButtonIconProps = useSlotProps({
        elementType: slots.EndScrollButtonIcon,
        externalSlotProps: slotProps.endScrollButtonIcon,
        ownerState
      });
      {
        if (centered && scrollable) {
          console.error('MUI: You can not use the `centered={true}` and `variant="scrollable"` properties at the same time on a `Tabs` component.');
        }
      }
      const [mounted, setMounted] = react.exports.useState(false);
      const [indicatorStyle, setIndicatorStyle] = react.exports.useState(defaultIndicatorStyle);
      const [displayScroll, setDisplayScroll] = react.exports.useState({
        start: false,
        end: false
      });
      const [scrollerStyle, setScrollerStyle] = react.exports.useState({
        overflow: "hidden",
        scrollbarWidth: 0
      });
      const valueToIndex = /* @__PURE__ */ new Map();
      const tabsRef = react.exports.useRef(null);
      const tabListRef = react.exports.useRef(null);
      const getTabsMeta = () => {
        const tabsNode = tabsRef.current;
        let tabsMeta;
        if (tabsNode) {
          const rect = tabsNode.getBoundingClientRect();
          tabsMeta = {
            clientWidth: tabsNode.clientWidth,
            scrollLeft: tabsNode.scrollLeft,
            scrollTop: tabsNode.scrollTop,
            scrollLeftNormalized: getNormalizedScrollLeft(tabsNode, theme.direction),
            scrollWidth: tabsNode.scrollWidth,
            top: rect.top,
            bottom: rect.bottom,
            left: rect.left,
            right: rect.right
          };
        }
        let tabMeta;
        if (tabsNode && value2 !== false) {
          const children2 = tabListRef.current.children;
          if (children2.length > 0) {
            const tab = children2[valueToIndex.get(value2)];
            {
              if (!tab) {
                console.error([`MUI: The \`value\` provided to the Tabs component is invalid.`, `None of the Tabs' children match with "${value2}".`, valueToIndex.keys ? `You can provide one of the following values: ${Array.from(valueToIndex.keys()).join(", ")}.` : null].join("\n"));
              }
            }
            tabMeta = tab ? tab.getBoundingClientRect() : null;
            {
              if (!warnedOnceTabPresent && tabMeta && tabMeta.width === 0 && tabMeta.height === 0 && tabsMeta.clientWidth !== 0) {
                tabsMeta = null;
                console.error(["MUI: The `value` provided to the Tabs component is invalid.", `The Tab with this \`value\` ("${value2}") is not part of the document layout.`, "Make sure the tab item is present in the document or that it's not `display: none`."].join("\n"));
                warnedOnceTabPresent = true;
              }
            }
          }
        }
        return {
          tabsMeta,
          tabMeta
        };
      };
      const updateIndicatorState = useEventCallback(() => {
        const {
          tabsMeta,
          tabMeta
        } = getTabsMeta();
        let startValue = 0;
        let startIndicator;
        if (vertical) {
          startIndicator = "top";
          if (tabMeta && tabsMeta) {
            startValue = tabMeta.top - tabsMeta.top + tabsMeta.scrollTop;
          }
        } else {
          startIndicator = isRtl ? "right" : "left";
          if (tabMeta && tabsMeta) {
            const correction = isRtl ? tabsMeta.scrollLeftNormalized + tabsMeta.clientWidth - tabsMeta.scrollWidth : tabsMeta.scrollLeft;
            startValue = (isRtl ? -1 : 1) * (tabMeta[startIndicator] - tabsMeta[startIndicator] + correction);
          }
        }
        const newIndicatorStyle = {
          [startIndicator]: startValue,
          [size]: tabMeta ? tabMeta[size] : 0
        };
        if (isNaN(indicatorStyle[startIndicator]) || isNaN(indicatorStyle[size])) {
          setIndicatorStyle(newIndicatorStyle);
        } else {
          const dStart = Math.abs(indicatorStyle[startIndicator] - newIndicatorStyle[startIndicator]);
          const dSize = Math.abs(indicatorStyle[size] - newIndicatorStyle[size]);
          if (dStart >= 1 || dSize >= 1) {
            setIndicatorStyle(newIndicatorStyle);
          }
        }
      });
      const scroll = (scrollValue, {
        animation = true
      } = {}) => {
        if (animation) {
          animate(scrollStart, tabsRef.current, scrollValue, {
            duration: theme.transitions.duration.standard
          });
        } else {
          tabsRef.current[scrollStart] = scrollValue;
        }
      };
      const moveTabsScroll = (delta) => {
        let scrollValue = tabsRef.current[scrollStart];
        if (vertical) {
          scrollValue += delta;
        } else {
          scrollValue += delta * (isRtl ? -1 : 1);
          scrollValue *= isRtl && detectScrollType() === "reverse" ? -1 : 1;
        }
        scroll(scrollValue);
      };
      const getScrollSize = () => {
        const containerSize = tabsRef.current[clientSize];
        let totalSize = 0;
        const children2 = Array.from(tabListRef.current.children);
        for (let i = 0; i < children2.length; i += 1) {
          const tab = children2[i];
          if (totalSize + tab[clientSize] > containerSize) {
            if (i === 0) {
              totalSize = containerSize;
            }
            break;
          }
          totalSize += tab[clientSize];
        }
        return totalSize;
      };
      const handleStartScrollClick = () => {
        moveTabsScroll(-1 * getScrollSize());
      };
      const handleEndScrollClick = () => {
        moveTabsScroll(getScrollSize());
      };
      const handleScrollbarSizeChange = react.exports.useCallback((scrollbarWidth) => {
        setScrollerStyle({
          overflow: null,
          scrollbarWidth
        });
      }, []);
      const getConditionalElements = () => {
        const conditionalElements2 = {};
        conditionalElements2.scrollbarSizeListener = scrollable ? /* @__PURE__ */ jsx(TabsScrollbarSize, {
          onChange: handleScrollbarSizeChange,
          className: clsx(classes.scrollableX, classes.hideScrollbar)
        }) : null;
        const scrollButtonsActive = displayScroll.start || displayScroll.end;
        const showScrollButtons = scrollable && (scrollButtons === "auto" && scrollButtonsActive || scrollButtons === true);
        conditionalElements2.scrollButtonStart = showScrollButtons ? /* @__PURE__ */ jsx(ScrollButtonComponent, _extends$1({
          slots: {
            StartScrollButtonIcon: slots.StartScrollButtonIcon
          },
          slotProps: {
            startScrollButtonIcon: startScrollButtonIconProps
          },
          orientation,
          direction: isRtl ? "right" : "left",
          onClick: handleStartScrollClick,
          disabled: !displayScroll.start
        }, TabScrollButtonProps, {
          className: clsx(classes.scrollButtons, TabScrollButtonProps.className)
        })) : null;
        conditionalElements2.scrollButtonEnd = showScrollButtons ? /* @__PURE__ */ jsx(ScrollButtonComponent, _extends$1({
          slots: {
            EndScrollButtonIcon: slots.EndScrollButtonIcon
          },
          slotProps: {
            endScrollButtonIcon: endScrollButtonIconProps
          },
          orientation,
          direction: isRtl ? "left" : "right",
          onClick: handleEndScrollClick,
          disabled: !displayScroll.end
        }, TabScrollButtonProps, {
          className: clsx(classes.scrollButtons, TabScrollButtonProps.className)
        })) : null;
        return conditionalElements2;
      };
      const scrollSelectedIntoView = useEventCallback((animation) => {
        const {
          tabsMeta,
          tabMeta
        } = getTabsMeta();
        if (!tabMeta || !tabsMeta) {
          return;
        }
        if (tabMeta[start2] < tabsMeta[start2]) {
          const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[start2] - tabsMeta[start2]);
          scroll(nextScrollStart, {
            animation
          });
        } else if (tabMeta[end2] > tabsMeta[end2]) {
          const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[end2] - tabsMeta[end2]);
          scroll(nextScrollStart, {
            animation
          });
        }
      });
      const updateScrollButtonState = useEventCallback(() => {
        if (scrollable && scrollButtons !== false) {
          const {
            scrollTop,
            scrollHeight,
            clientHeight,
            scrollWidth,
            clientWidth
          } = tabsRef.current;
          let showStartScroll;
          let showEndScroll;
          if (vertical) {
            showStartScroll = scrollTop > 1;
            showEndScroll = scrollTop < scrollHeight - clientHeight - 1;
          } else {
            const scrollLeft = getNormalizedScrollLeft(tabsRef.current, theme.direction);
            showStartScroll = isRtl ? scrollLeft < scrollWidth - clientWidth - 1 : scrollLeft > 1;
            showEndScroll = !isRtl ? scrollLeft < scrollWidth - clientWidth - 1 : scrollLeft > 1;
          }
          if (showStartScroll !== displayScroll.start || showEndScroll !== displayScroll.end) {
            setDisplayScroll({
              start: showStartScroll,
              end: showEndScroll
            });
          }
        }
      });
      react.exports.useEffect(() => {
        const handleResize = debounce$3(() => {
          if (tabsRef.current) {
            updateIndicatorState();
            updateScrollButtonState();
          }
        });
        const win = ownerWindow(tabsRef.current);
        win.addEventListener("resize", handleResize);
        let resizeObserver;
        if (typeof ResizeObserver !== "undefined") {
          resizeObserver = new ResizeObserver(handleResize);
          Array.from(tabListRef.current.children).forEach((child) => {
            resizeObserver.observe(child);
          });
        }
        return () => {
          handleResize.clear();
          win.removeEventListener("resize", handleResize);
          if (resizeObserver) {
            resizeObserver.disconnect();
          }
        };
      }, [updateIndicatorState, updateScrollButtonState]);
      const handleTabsScroll = react.exports.useMemo(() => debounce$3(() => {
        updateScrollButtonState();
      }), [updateScrollButtonState]);
      react.exports.useEffect(() => {
        return () => {
          handleTabsScroll.clear();
        };
      }, [handleTabsScroll]);
      react.exports.useEffect(() => {
        setMounted(true);
      }, []);
      react.exports.useEffect(() => {
        updateIndicatorState();
        updateScrollButtonState();
      });
      react.exports.useEffect(() => {
        scrollSelectedIntoView(defaultIndicatorStyle !== indicatorStyle);
      }, [scrollSelectedIntoView, indicatorStyle]);
      react.exports.useImperativeHandle(action, () => ({
        updateIndicator: updateIndicatorState,
        updateScrollButtons: updateScrollButtonState
      }), [updateIndicatorState, updateScrollButtonState]);
      const indicator = /* @__PURE__ */ jsx(TabsIndicator, _extends$1({}, TabIndicatorProps, {
        className: clsx(classes.indicator, TabIndicatorProps.className),
        ownerState,
        style: _extends$1({}, indicatorStyle, TabIndicatorProps.style)
      }));
      let childIndex = 0;
      const children = react.exports.Children.map(childrenProp, (child) => {
        if (!/* @__PURE__ */ react.exports.isValidElement(child)) {
          return null;
        }
        {
          if (reactIs$2.exports.isFragment(child)) {
            console.error(["MUI: The Tabs component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
          }
        }
        const childValue = child.props.value === void 0 ? childIndex : child.props.value;
        valueToIndex.set(childValue, childIndex);
        const selected = childValue === value2;
        childIndex += 1;
        return /* @__PURE__ */ react.exports.cloneElement(child, _extends$1({
          fullWidth: variant === "fullWidth",
          indicator: selected && !mounted && indicator,
          selected,
          selectionFollowsFocus,
          onChange,
          textColor,
          value: childValue
        }, childIndex === 1 && value2 === false && !child.props.tabIndex ? {
          tabIndex: 0
        } : {}));
      });
      const handleKeyDown2 = (event) => {
        const list = tabListRef.current;
        const currentFocus = ownerDocument(list).activeElement;
        const role = currentFocus.getAttribute("role");
        if (role !== "tab") {
          return;
        }
        let previousItemKey = orientation === "horizontal" ? "ArrowLeft" : "ArrowUp";
        let nextItemKey = orientation === "horizontal" ? "ArrowRight" : "ArrowDown";
        if (orientation === "horizontal" && isRtl) {
          previousItemKey = "ArrowRight";
          nextItemKey = "ArrowLeft";
        }
        switch (event.key) {
          case previousItemKey:
            event.preventDefault();
            moveFocus(list, currentFocus, previousItem);
            break;
          case nextItemKey:
            event.preventDefault();
            moveFocus(list, currentFocus, nextItem);
            break;
          case "Home":
            event.preventDefault();
            moveFocus(list, null, nextItem);
            break;
          case "End":
            event.preventDefault();
            moveFocus(list, null, previousItem);
            break;
        }
      };
      const conditionalElements = getConditionalElements();
      return /* @__PURE__ */ jsxs(TabsRoot, _extends$1({
        className: clsx(classes.root, className),
        ownerState,
        ref,
        as: component
      }, other, {
        children: [conditionalElements.scrollButtonStart, conditionalElements.scrollbarSizeListener, /* @__PURE__ */ jsxs(TabsScroller, {
          className: classes.scroller,
          ownerState,
          style: {
            overflow: scrollerStyle.overflow,
            [vertical ? `margin${isRtl ? "Left" : "Right"}` : "marginBottom"]: visibleScrollbar ? void 0 : -scrollerStyle.scrollbarWidth
          },
          ref: tabsRef,
          onScroll: handleTabsScroll,
          children: [/* @__PURE__ */ jsx(FlexContainer, {
            "aria-label": ariaLabel,
            "aria-labelledby": ariaLabelledBy,
            "aria-orientation": orientation === "vertical" ? "vertical" : null,
            className: classes.flexContainer,
            ownerState,
            onKeyDown: handleKeyDown2,
            ref: tabListRef,
            role: "tablist",
            children
          }), mounted && indicator]
        }), conditionalElements.scrollButtonEnd]
      }));
    });
    Tabs.propTypes = {
      action: refType$1,
      allowScrollButtonsMobile: propTypes.exports.bool,
      "aria-label": propTypes.exports.string,
      "aria-labelledby": propTypes.exports.string,
      centered: propTypes.exports.bool,
      children: propTypes.exports.node,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      component: propTypes.exports.elementType,
      indicatorColor: propTypes.exports.oneOfType([propTypes.exports.oneOf(["primary", "secondary"]), propTypes.exports.string]),
      onChange: propTypes.exports.func,
      orientation: propTypes.exports.oneOf(["horizontal", "vertical"]),
      ScrollButtonComponent: propTypes.exports.elementType,
      scrollButtons: propTypes.exports.oneOf(["auto", false, true]),
      selectionFollowsFocus: propTypes.exports.bool,
      slotProps: propTypes.exports.shape({
        endScrollButtonIcon: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object]),
        startScrollButtonIcon: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object])
      }),
      slots: propTypes.exports.shape({
        EndScrollButtonIcon: propTypes.exports.elementType,
        StartScrollButtonIcon: propTypes.exports.elementType
      }),
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      TabIndicatorProps: propTypes.exports.object,
      TabScrollButtonProps: propTypes.exports.object,
      textColor: propTypes.exports.oneOf(["inherit", "primary", "secondary"]),
      value: propTypes.exports.any,
      variant: propTypes.exports.oneOf(["fullWidth", "scrollable", "standard"]),
      visibleScrollbar: propTypes.exports.bool
    };
    const Tabs$1 = Tabs;
    const ArrowDropDown = createSvgIcon$1(/* @__PURE__ */ jsx("path", {
      d: "M7 10l5 5 5-5z"
    }), "ArrowDropDown");
    const ArrowLeft = createSvgIcon$1(/* @__PURE__ */ jsx("path", {
      d: "M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"
    }), "ArrowLeft");
    const ArrowRight = createSvgIcon$1(/* @__PURE__ */ jsx("path", {
      d: "M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
    }), "ArrowRight");
    const Calendar = createSvgIcon$1(/* @__PURE__ */ jsx("path", {
      d: "M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
    }), "Calendar");
    const Clock$1 = createSvgIcon$1(/* @__PURE__ */ jsxs(react.exports.Fragment, {
      children: [/* @__PURE__ */ jsx("path", {
        d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
      }), /* @__PURE__ */ jsx("path", {
        d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
      })]
    }), "Clock");
    const DateRange = createSvgIcon$1(/* @__PURE__ */ jsx("path", {
      d: "M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z"
    }), "DateRange");
    const Pen = createSvgIcon$1(/* @__PURE__ */ jsx("path", {
      d: "M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"
    }), "Pen");
    const Time = createSvgIcon$1(/* @__PURE__ */ jsxs(react.exports.Fragment, {
      children: [/* @__PURE__ */ jsx("path", {
        d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
      }), /* @__PURE__ */ jsx("path", {
        d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
      })]
    }), "Time");
    function getPickersToolbarUtilityClass(slot) {
      return generateUtilityClass("MuiPickersToolbar", slot);
    }
    const pickersToolbarClasses = generateUtilityClasses("MuiPickersToolbar", ["root", "content", "penIconButton", "penIconButtonLandscape"]);
    const useUtilityClasses$n = (ownerState) => {
      const {
        classes,
        isLandscape
      } = ownerState;
      const slots = {
        root: ["root"],
        content: ["content"],
        penIconButton: ["penIconButton", isLandscape && "penIconButtonLandscape"]
      };
      return composeClasses(slots, getPickersToolbarUtilityClass, classes);
    };
    const PickersToolbarRoot = styled$1("div", {
      name: "MuiPickersToolbar",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })(({
      theme,
      ownerState
    }) => _extends$1({
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-start",
      justifyContent: "space-between",
      padding: theme.spacing(2, 3)
    }, ownerState.isLandscape && {
      height: "auto",
      maxWidth: 160,
      padding: 16,
      justifyContent: "flex-start",
      flexWrap: "wrap"
    }));
    const PickersToolbarContent = styled$1(Grid$1, {
      name: "MuiPickersToolbar",
      slot: "Content",
      overridesResolver: (props, styles2) => styles2.content
    })(({
      ownerState
    }) => _extends$1({
      flex: 1
    }, !ownerState.isLandscape && {
      alignItems: "center"
    }));
    const PickersToolbarPenIconButton = styled$1(IconButton$1, {
      name: "MuiPickersToolbar",
      slot: "PenIconButton",
      overridesResolver: (props, styles2) => [{
        [`&.${pickersToolbarClasses.penIconButtonLandscape}`]: styles2.penIconButtonLandscape
      }, styles2.penIconButton]
    })({});
    const getViewTypeIcon = (viewType) => viewType === "clock" ? /* @__PURE__ */ jsx(Clock$1, {
      color: "inherit"
    }) : /* @__PURE__ */ jsx(Calendar, {
      color: "inherit"
    });
    const PickersToolbar = /* @__PURE__ */ react.exports.forwardRef(function PickersToolbar2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiPickersToolbar"
      });
      const {
        children,
        className,
        getMobileKeyboardInputViewButtonText,
        isLandscape,
        isMobileKeyboardViewOpen,
        landscapeDirection = "column",
        toggleMobileKeyboardView,
        toolbarTitle,
        viewType = "calendar"
      } = props;
      const ownerState = props;
      const localeText = useLocaleText();
      const classes = useUtilityClasses$n(ownerState);
      return /* @__PURE__ */ jsxs(PickersToolbarRoot, {
        ref,
        className: clsx(classes.root, className),
        ownerState,
        children: [/* @__PURE__ */ jsx(Typography$1, {
          color: "text.secondary",
          variant: "overline",
          children: toolbarTitle
        }), /* @__PURE__ */ jsxs(PickersToolbarContent, {
          container: true,
          justifyContent: "space-between",
          className: classes.content,
          ownerState,
          direction: isLandscape ? landscapeDirection : "row",
          alignItems: isLandscape ? "flex-start" : "flex-end",
          children: [children, /* @__PURE__ */ jsx(PickersToolbarPenIconButton, {
            onClick: toggleMobileKeyboardView,
            className: classes.penIconButton,
            ownerState,
            color: "inherit",
            "aria-label": getMobileKeyboardInputViewButtonText ? getMobileKeyboardInputViewButtonText(isMobileKeyboardViewOpen, viewType) : localeText.inputModeToggleButtonAriaLabel(isMobileKeyboardViewOpen, viewType),
            children: isMobileKeyboardViewOpen ? getViewTypeIcon(viewType) : /* @__PURE__ */ jsx(Pen, {
              color: "inherit"
            })
          })]
        })]
      });
    });
    function getDatePickerToolbarUtilityClass(slot) {
      return generateUtilityClass("MuiDatePickerToolbar", slot);
    }
    generateUtilityClasses("MuiDatePickerToolbar", ["root", "title"]);
    const _excluded$E = ["parsedValue", "isLandscape", "isMobileKeyboardViewOpen", "onChange", "toggleMobileKeyboardView", "toolbarFormat", "toolbarPlaceholder", "toolbarTitle", "views"];
    const useUtilityClasses$m = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        title: ["title"]
      };
      return composeClasses(slots, getDatePickerToolbarUtilityClass, classes);
    };
    const DatePickerToolbarRoot = styled$1(PickersToolbar, {
      name: "MuiDatePickerToolbar",
      slot: "Root",
      overridesResolver: (_2, styles2) => styles2.root
    })({});
    const DatePickerToolbarTitle = styled$1(Typography$1, {
      name: "MuiDatePickerToolbar",
      slot: "Title",
      overridesResolver: (_2, styles2) => styles2.title
    })(({
      ownerState
    }) => _extends$1({}, ownerState.isLandscape && {
      margin: "auto 16px auto auto"
    }));
    const DatePickerToolbar = /* @__PURE__ */ react.exports.forwardRef(function DatePickerToolbar2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiDatePickerToolbar"
      });
      const {
        parsedValue,
        isLandscape,
        isMobileKeyboardViewOpen,
        toggleMobileKeyboardView,
        toolbarFormat,
        toolbarPlaceholder = "\u2013\u2013",
        toolbarTitle: toolbarTitleProp,
        views
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$E);
      const utils2 = useUtils();
      const localeText = useLocaleText();
      const classes = useUtilityClasses$m(props);
      const toolbarTitle = toolbarTitleProp != null ? toolbarTitleProp : localeText.datePickerDefaultToolbarTitle;
      const dateText = react.exports.useMemo(() => {
        if (!parsedValue) {
          return toolbarPlaceholder;
        }
        if (toolbarFormat) {
          return utils2.formatByString(parsedValue, toolbarFormat);
        }
        if (isYearOnlyView(views)) {
          return utils2.format(parsedValue, "year");
        }
        if (isYearAndMonthViews(views)) {
          return utils2.format(parsedValue, "month");
        }
        return /en/.test(utils2.getCurrentLocaleCode()) ? utils2.format(parsedValue, "normalDateWithWeekday") : utils2.format(parsedValue, "normalDate");
      }, [parsedValue, toolbarFormat, toolbarPlaceholder, utils2, views]);
      const ownerState = props;
      return /* @__PURE__ */ jsx(DatePickerToolbarRoot, _extends$1({
        ref,
        toolbarTitle,
        isMobileKeyboardViewOpen,
        toggleMobileKeyboardView,
        isLandscape,
        className: classes.root
      }, other, {
        children: /* @__PURE__ */ jsx(DatePickerToolbarTitle, {
          variant: "h4",
          align: isLandscape ? "left" : "center",
          ownerState,
          className: classes.title,
          children: dateText
        })
      }));
    });
    const WrapperVariantContext = /* @__PURE__ */ react.exports.createContext(null);
    const _excluded$D = ["onAccept", "onClear", "onCancel", "onSetToday", "actions"];
    const PickersActionBar = (props) => {
      const {
        onAccept,
        onClear,
        onCancel,
        onSetToday,
        actions
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$D);
      const wrapperVariant = react.exports.useContext(WrapperVariantContext);
      const localeText = useLocaleText();
      const actionsArray = typeof actions === "function" ? actions(wrapperVariant) : actions;
      if (actionsArray == null || actionsArray.length === 0) {
        return null;
      }
      const buttons = actionsArray == null ? void 0 : actionsArray.map((actionType) => {
        switch (actionType) {
          case "clear":
            return /* @__PURE__ */ jsx(Button$1, {
              onClick: onClear,
              children: localeText.clearButtonLabel
            }, actionType);
          case "cancel":
            return /* @__PURE__ */ jsx(Button$1, {
              onClick: onCancel,
              children: localeText.cancelButtonLabel
            }, actionType);
          case "accept":
            return /* @__PURE__ */ jsx(Button$1, {
              onClick: onAccept,
              children: localeText.okButtonLabel
            }, actionType);
          case "today":
            return /* @__PURE__ */ jsx(Button$1, {
              onClick: onSetToday,
              children: localeText.todayButtonLabel
            }, actionType);
          default:
            return null;
        }
      });
      return /* @__PURE__ */ jsx(DialogActions$1, _extends$1({}, other, {
        children: buttons
      }));
    };
    function getPickersPopperUtilityClass(slot) {
      return generateUtilityClass("MuiPickersPopper", slot);
    }
    generateUtilityClasses("MuiPickersPopper", ["root", "paper"]);
    function arrayIncludes(array, itemOrItems) {
      if (Array.isArray(itemOrItems)) {
        return itemOrItems.every((item) => array.indexOf(item) !== -1);
      }
      return array.indexOf(itemOrItems) !== -1;
    }
    const onSpaceOrEnter = (innerFn, onFocus) => (event) => {
      if (event.key === "Enter" || event.key === " ") {
        innerFn(event);
        event.preventDefault();
        event.stopPropagation();
      }
      if (onFocus) {
        onFocus(event);
      }
    };
    const getActiveElement = (root2 = document) => {
      const activeEl = root2.activeElement;
      if (!activeEl) {
        return null;
      }
      if (activeEl.shadowRoot) {
        return getActiveElement(activeEl.shadowRoot);
      }
      return activeEl;
    };
    const _excluded$C = ["onClick", "onTouchStart"];
    const useUtilityClasses$l = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        paper: ["paper"]
      };
      return composeClasses(slots, getPickersPopperUtilityClass, classes);
    };
    const PickersPopperRoot = styled$1(Popper$1, {
      name: "MuiPickersPopper",
      slot: "Root",
      overridesResolver: (_2, styles2) => styles2.root
    })(({
      theme
    }) => ({
      zIndex: theme.zIndex.modal
    }));
    const PickersPopperPaper = styled$1(Paper$1, {
      name: "MuiPickersPopper",
      slot: "Paper",
      overridesResolver: (_2, styles2) => styles2.paper
    })(({
      ownerState
    }) => _extends$1({
      transformOrigin: "top center",
      outline: 0
    }, ownerState.placement === "top" && {
      transformOrigin: "bottom center"
    }));
    function clickedRootScrollbar(event, doc) {
      return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
    }
    function useClickAwayListener(active, onClickAway) {
      const movedRef = react.exports.useRef(false);
      const syntheticEventRef = react.exports.useRef(false);
      const nodeRef = react.exports.useRef(null);
      const activatedRef = react.exports.useRef(false);
      react.exports.useEffect(() => {
        if (!active) {
          return void 0;
        }
        function armClickAwayListener() {
          activatedRef.current = true;
        }
        document.addEventListener("mousedown", armClickAwayListener, true);
        document.addEventListener("touchstart", armClickAwayListener, true);
        return () => {
          document.removeEventListener("mousedown", armClickAwayListener, true);
          document.removeEventListener("touchstart", armClickAwayListener, true);
          activatedRef.current = false;
        };
      }, [active]);
      const handleClickAway = useEventCallback((event) => {
        if (!activatedRef.current) {
          return;
        }
        const insideReactTree = syntheticEventRef.current;
        syntheticEventRef.current = false;
        const doc = ownerDocument(nodeRef.current);
        if (!nodeRef.current || "clientX" in event && clickedRootScrollbar(event, doc)) {
          return;
        }
        if (movedRef.current) {
          movedRef.current = false;
          return;
        }
        let insideDOM;
        if (event.composedPath) {
          insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
        } else {
          insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);
        }
        if (!insideDOM && !insideReactTree) {
          onClickAway(event);
        }
      });
      const handleSynthetic = () => {
        syntheticEventRef.current = true;
      };
      react.exports.useEffect(() => {
        if (active) {
          const doc = ownerDocument(nodeRef.current);
          const handleTouchMove = () => {
            movedRef.current = true;
          };
          doc.addEventListener("touchstart", handleClickAway);
          doc.addEventListener("touchmove", handleTouchMove);
          return () => {
            doc.removeEventListener("touchstart", handleClickAway);
            doc.removeEventListener("touchmove", handleTouchMove);
          };
        }
        return void 0;
      }, [active, handleClickAway]);
      react.exports.useEffect(() => {
        if (active) {
          const doc = ownerDocument(nodeRef.current);
          doc.addEventListener("click", handleClickAway);
          return () => {
            doc.removeEventListener("click", handleClickAway);
            syntheticEventRef.current = false;
          };
        }
        return void 0;
      }, [active, handleClickAway]);
      return [nodeRef, handleSynthetic, handleSynthetic];
    }
    function PickersPopper(inProps) {
      var _components$ActionBar;
      const props = useThemeProps({
        props: inProps,
        name: "MuiPickersPopper"
      });
      const {
        anchorEl,
        children,
        containerRef = null,
        onBlur,
        onClose,
        onClear,
        onAccept,
        onCancel,
        onSetToday,
        open,
        PopperProps,
        role,
        TransitionComponent = Grow$1,
        TrapFocusProps,
        PaperProps = {},
        components,
        componentsProps
      } = props;
      react.exports.useEffect(() => {
        function handleKeyDown3(nativeEvent) {
          if (open && (nativeEvent.key === "Escape" || nativeEvent.key === "Esc")) {
            onClose();
          }
        }
        document.addEventListener("keydown", handleKeyDown3);
        return () => {
          document.removeEventListener("keydown", handleKeyDown3);
        };
      }, [onClose, open]);
      const lastFocusedElementRef = react.exports.useRef(null);
      react.exports.useEffect(() => {
        if (role === "tooltip") {
          return;
        }
        if (open) {
          lastFocusedElementRef.current = getActiveElement(document);
        } else if (lastFocusedElementRef.current && lastFocusedElementRef.current instanceof HTMLElement) {
          setTimeout(() => {
            if (lastFocusedElementRef.current instanceof HTMLElement) {
              lastFocusedElementRef.current.focus();
            }
          });
        }
      }, [open, role]);
      const [clickAwayRef, onPaperClick, onPaperTouchStart] = useClickAwayListener(open, onBlur != null ? onBlur : onClose);
      const paperRef = react.exports.useRef(null);
      const handleRef = useForkRef(paperRef, containerRef);
      const handlePaperRef = useForkRef(handleRef, clickAwayRef);
      const ownerState = props;
      const classes = useUtilityClasses$l(ownerState);
      const {
        onClick: onPaperClickProp,
        onTouchStart: onPaperTouchStartProp
      } = PaperProps, otherPaperProps = _objectWithoutPropertiesLoose$1(PaperProps, _excluded$C);
      const handleKeyDown2 = (event) => {
        if (event.key === "Escape") {
          event.stopPropagation();
          onClose();
        }
      };
      const ActionBar = (_components$ActionBar = components == null ? void 0 : components.ActionBar) != null ? _components$ActionBar : PickersActionBar;
      const PaperContent = (components == null ? void 0 : components.PaperContent) || react.exports.Fragment;
      return /* @__PURE__ */ jsx(PickersPopperRoot, _extends$1({
        transition: true,
        role,
        open,
        anchorEl,
        onKeyDown: handleKeyDown2,
        className: classes.root
      }, PopperProps, {
        children: ({
          TransitionProps,
          placement
        }) => /* @__PURE__ */ jsx(FocusTrap, _extends$1({
          open,
          disableAutoFocus: true,
          disableRestoreFocus: true,
          disableEnforceFocus: role === "tooltip",
          isEnabled: () => true
        }, TrapFocusProps, {
          children: /* @__PURE__ */ jsx(TransitionComponent, _extends$1({}, TransitionProps, {
            children: /* @__PURE__ */ jsx(PickersPopperPaper, _extends$1({
              tabIndex: -1,
              elevation: 8,
              ref: handlePaperRef,
              onClick: (event) => {
                onPaperClick(event);
                if (onPaperClickProp) {
                  onPaperClickProp(event);
                }
              },
              onTouchStart: (event) => {
                onPaperTouchStart(event);
                if (onPaperTouchStartProp) {
                  onPaperTouchStartProp(event);
                }
              },
              ownerState: _extends$1({}, ownerState, {
                placement
              }),
              className: classes.paper
            }, otherPaperProps, {
              children: /* @__PURE__ */ jsxs(PaperContent, _extends$1({}, componentsProps == null ? void 0 : componentsProps.paperContent, {
                children: [children, /* @__PURE__ */ jsx(ActionBar, _extends$1({
                  onAccept,
                  onClear,
                  onCancel,
                  onSetToday,
                  actions: []
                }, componentsProps == null ? void 0 : componentsProps.actionBar))]
              }))
            }))
          }))
        }))
      }));
    }
    function DesktopWrapper(props) {
      const {
        children,
        DateInputProps,
        KeyboardDateInputComponent,
        onClear,
        onDismiss,
        onCancel,
        onAccept,
        onSetToday,
        open,
        PopperProps,
        PaperProps,
        TransitionComponent,
        components,
        componentsProps
      } = props;
      const ownInputRef = react.exports.useRef(null);
      const inputRef = useForkRef(DateInputProps.inputRef, ownInputRef);
      return /* @__PURE__ */ jsxs(WrapperVariantContext.Provider, {
        value: "desktop",
        children: [/* @__PURE__ */ jsx(KeyboardDateInputComponent, _extends$1({}, DateInputProps, {
          inputRef
        })), /* @__PURE__ */ jsx(PickersPopper, {
          role: "dialog",
          open,
          anchorEl: ownInputRef.current,
          TransitionComponent,
          PopperProps,
          PaperProps,
          onClose: onDismiss,
          onCancel,
          onClear,
          onAccept,
          onSetToday,
          components,
          componentsProps,
          children
        })]
      });
    }
    function useViews({
      onChange,
      onViewChange,
      openTo,
      view,
      views
    }) {
      var _views, _views2;
      const [openView, setOpenView] = useControlled({
        name: "Picker",
        state: "view",
        controlled: view,
        default: openTo && arrayIncludes(views, openTo) ? openTo : views[0]
      });
      const previousView = (_views = views[views.indexOf(openView) - 1]) != null ? _views : null;
      const nextView = (_views2 = views[views.indexOf(openView) + 1]) != null ? _views2 : null;
      const changeView = react.exports.useCallback((newView) => {
        setOpenView(newView);
        if (onViewChange) {
          onViewChange(newView);
        }
      }, [setOpenView, onViewChange]);
      const openNext = react.exports.useCallback(() => {
        if (nextView) {
          changeView(nextView);
        }
      }, [nextView, changeView]);
      const handleChangeAndOpenNext = react.exports.useCallback((date, currentViewSelectionState) => {
        const isSelectionFinishedOnCurrentView = currentViewSelectionState === "finish";
        const globalSelectionState = isSelectionFinishedOnCurrentView && Boolean(nextView) ? "partial" : currentViewSelectionState;
        onChange(date, globalSelectionState);
        if (isSelectionFinishedOnCurrentView) {
          openNext();
        }
      }, [nextView, onChange, openNext]);
      return {
        handleChangeAndOpenNext,
        nextView,
        previousView,
        openNext,
        openView,
        setOpenView: changeView
      };
    }
    const CLOCK_WIDTH = 220;
    const CLOCK_HOUR_WIDTH = 36;
    const clockCenter = {
      x: CLOCK_WIDTH / 2,
      y: CLOCK_WIDTH / 2
    };
    const baseClockPoint = {
      x: clockCenter.x,
      y: 0
    };
    const cx = baseClockPoint.x - clockCenter.x;
    const cy = baseClockPoint.y - clockCenter.y;
    const rad2deg = (rad) => rad * (180 / Math.PI);
    const getAngleValue = (step, offsetX, offsetY) => {
      const x = offsetX - clockCenter.x;
      const y = offsetY - clockCenter.y;
      const atan = Math.atan2(cx, cy) - Math.atan2(x, y);
      let deg = rad2deg(atan);
      deg = Math.round(deg / step) * step;
      deg %= 360;
      const value2 = Math.floor(deg / step) || 0;
      const delta = x ** 2 + y ** 2;
      const distance = Math.sqrt(delta);
      return {
        value: value2,
        distance
      };
    };
    const getMinutes = (offsetX, offsetY, step = 1) => {
      const angleStep = step * 6;
      let {
        value: value2
      } = getAngleValue(angleStep, offsetX, offsetY);
      value2 = value2 * step % 60;
      return value2;
    };
    const getHours = (offsetX, offsetY, ampm) => {
      const {
        value: value2,
        distance
      } = getAngleValue(30, offsetX, offsetY);
      let hour = value2 || 12;
      if (!ampm) {
        if (distance < CLOCK_WIDTH / 2 - CLOCK_HOUR_WIDTH) {
          hour += 12;
          hour %= 24;
        }
      } else {
        hour %= 12;
      }
      return hour;
    };
    function getClockPointerUtilityClass(slot) {
      return generateUtilityClass("MuiClockPointer", slot);
    }
    generateUtilityClasses("MuiClockPointer", ["root", "thumb"]);
    const _excluded$B = ["className", "hasSelected", "isInner", "type", "value"];
    const useUtilityClasses$k = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        thumb: ["thumb"]
      };
      return composeClasses(slots, getClockPointerUtilityClass, classes);
    };
    const ClockPointerRoot = styled$1("div", {
      name: "MuiClockPointer",
      slot: "Root",
      overridesResolver: (_2, styles2) => styles2.root
    })(({
      theme,
      ownerState
    }) => _extends$1({
      width: 2,
      backgroundColor: theme.palette.primary.main,
      position: "absolute",
      left: "calc(50% - 1px)",
      bottom: "50%",
      transformOrigin: "center bottom 0px"
    }, ownerState.shouldAnimate && {
      transition: theme.transitions.create(["transform", "height"])
    }));
    const ClockPointerThumb = styled$1("div", {
      name: "MuiClockPointer",
      slot: "Thumb",
      overridesResolver: (_2, styles2) => styles2.thumb
    })(({
      theme,
      ownerState
    }) => _extends$1({
      width: 4,
      height: 4,
      backgroundColor: theme.palette.primary.contrastText,
      borderRadius: "50%",
      position: "absolute",
      top: -21,
      left: `calc(50% - ${CLOCK_HOUR_WIDTH / 2}px)`,
      border: `${(CLOCK_HOUR_WIDTH - 4) / 2}px solid ${theme.palette.primary.main}`,
      boxSizing: "content-box"
    }, ownerState.hasSelected && {
      backgroundColor: theme.palette.primary.main
    }));
    function ClockPointer(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiClockPointer"
      });
      const {
        className,
        isInner,
        type,
        value: value2
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$B);
      const previousType = react.exports.useRef(type);
      react.exports.useEffect(() => {
        previousType.current = type;
      }, [type]);
      const ownerState = _extends$1({}, props, {
        shouldAnimate: previousType.current !== type
      });
      const classes = useUtilityClasses$k(ownerState);
      const getAngleStyle = () => {
        const max2 = type === "hours" ? 12 : 60;
        let angle = 360 / max2 * value2;
        if (type === "hours" && value2 > 12) {
          angle -= 360;
        }
        return {
          height: Math.round((isInner ? 0.26 : 0.4) * CLOCK_WIDTH),
          transform: `rotateZ(${angle}deg)`
        };
      };
      return /* @__PURE__ */ jsx(ClockPointerRoot, _extends$1({
        style: getAngleStyle(),
        className: clsx(className, classes.root),
        ownerState
      }, other, {
        children: /* @__PURE__ */ jsx(ClockPointerThumb, {
          ownerState,
          className: classes.thumb
        })
      }));
    }
    function getClockUtilityClass(slot) {
      return generateUtilityClass("MuiClock", slot);
    }
    generateUtilityClasses("MuiClock", ["root", "clock", "wrapper", "squareMask", "pin", "amButton", "pmButton"]);
    const useUtilityClasses$j = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        clock: ["clock"],
        wrapper: ["wrapper"],
        squareMask: ["squareMask"],
        pin: ["pin"],
        amButton: ["amButton"],
        pmButton: ["pmButton"]
      };
      return composeClasses(slots, getClockUtilityClass, classes);
    };
    const ClockRoot = styled$1("div", {
      name: "MuiClock",
      slot: "Root",
      overridesResolver: (_2, styles2) => styles2.root
    })(({
      theme
    }) => ({
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      margin: theme.spacing(2)
    }));
    const ClockClock = styled$1("div", {
      name: "MuiClock",
      slot: "Clock",
      overridesResolver: (_2, styles2) => styles2.clock
    })({
      backgroundColor: "rgba(0,0,0,.07)",
      borderRadius: "50%",
      height: 220,
      width: 220,
      flexShrink: 0,
      position: "relative",
      pointerEvents: "none"
    });
    const ClockWrapper = styled$1("div", {
      name: "MuiClock",
      slot: "Wrapper",
      overridesResolver: (_2, styles2) => styles2.wrapper
    })({
      "&:focus": {
        outline: "none"
      }
    });
    const ClockSquareMask = styled$1("div", {
      name: "MuiClock",
      slot: "SquareMask",
      overridesResolver: (_2, styles2) => styles2.squareMask
    })(({
      ownerState
    }) => _extends$1({
      width: "100%",
      height: "100%",
      position: "absolute",
      pointerEvents: "auto",
      outline: 0,
      touchAction: "none",
      userSelect: "none"
    }, ownerState.disabled ? {} : {
      "@media (pointer: fine)": {
        cursor: "pointer",
        borderRadius: "50%"
      },
      "&:active": {
        cursor: "move"
      }
    }));
    const ClockPin = styled$1("div", {
      name: "MuiClock",
      slot: "Pin",
      overridesResolver: (_2, styles2) => styles2.pin
    })(({
      theme
    }) => ({
      width: 6,
      height: 6,
      borderRadius: "50%",
      backgroundColor: theme.palette.primary.main,
      position: "absolute",
      top: "50%",
      left: "50%",
      transform: "translate(-50%, -50%)"
    }));
    const ClockAmButton = styled$1(IconButton$1, {
      name: "MuiClock",
      slot: "AmButton",
      overridesResolver: (_2, styles2) => styles2.amButton
    })(({
      theme,
      ownerState
    }) => _extends$1({
      zIndex: 1,
      position: "absolute",
      bottom: ownerState.ampmInClock ? 64 : 8,
      left: 8
    }, ownerState.meridiemMode === "am" && {
      backgroundColor: theme.palette.primary.main,
      color: theme.palette.primary.contrastText,
      "&:hover": {
        backgroundColor: theme.palette.primary.light
      }
    }));
    const ClockPmButton = styled$1(IconButton$1, {
      name: "MuiClock",
      slot: "PmButton",
      overridesResolver: (_2, styles2) => styles2.pmButton
    })(({
      theme,
      ownerState
    }) => _extends$1({
      zIndex: 1,
      position: "absolute",
      bottom: ownerState.ampmInClock ? 64 : 8,
      right: 8
    }, ownerState.meridiemMode === "pm" && {
      backgroundColor: theme.palette.primary.main,
      color: theme.palette.primary.contrastText,
      "&:hover": {
        backgroundColor: theme.palette.primary.light
      }
    }));
    function Clock(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiClock"
      });
      const {
        ampm,
        ampmInClock,
        autoFocus,
        children,
        date,
        getClockLabelText,
        handleMeridiemChange,
        isTimeDisabled,
        meridiemMode,
        minutesStep = 1,
        onChange,
        selectedId,
        type,
        value: value2,
        disabled,
        readOnly,
        className
      } = props;
      const ownerState = props;
      const utils2 = useUtils();
      const wrapperVariant = react.exports.useContext(WrapperVariantContext);
      const isMoving = react.exports.useRef(false);
      const classes = useUtilityClasses$j(ownerState);
      const isSelectedTimeDisabled = isTimeDisabled(value2, type);
      const isPointerInner = !ampm && type === "hours" && (value2 < 1 || value2 > 12);
      const handleValueChange = (newValue, isFinish) => {
        if (disabled || readOnly) {
          return;
        }
        if (isTimeDisabled(newValue, type)) {
          return;
        }
        onChange(newValue, isFinish);
      };
      const setTime = (event, isFinish) => {
        let {
          offsetX,
          offsetY
        } = event;
        if (offsetX === void 0) {
          const rect = event.target.getBoundingClientRect();
          offsetX = event.changedTouches[0].clientX - rect.left;
          offsetY = event.changedTouches[0].clientY - rect.top;
        }
        const newSelectedValue = type === "seconds" || type === "minutes" ? getMinutes(offsetX, offsetY, minutesStep) : getHours(offsetX, offsetY, Boolean(ampm));
        handleValueChange(newSelectedValue, isFinish);
      };
      const handleTouchMove = (event) => {
        isMoving.current = true;
        setTime(event, "shallow");
      };
      const handleTouchEnd = (event) => {
        if (isMoving.current) {
          setTime(event, "finish");
          isMoving.current = false;
        }
      };
      const handleMouseMove = (event) => {
        if (event.buttons > 0) {
          setTime(event.nativeEvent, "shallow");
        }
      };
      const handleMouseUp = (event) => {
        if (isMoving.current) {
          isMoving.current = false;
        }
        setTime(event.nativeEvent, "finish");
      };
      const hasSelected = react.exports.useMemo(() => {
        if (type === "hours") {
          return true;
        }
        return value2 % 5 === 0;
      }, [type, value2]);
      const keyboardControlStep = type === "minutes" ? minutesStep : 1;
      const listboxRef = react.exports.useRef(null);
      useEnhancedEffect$1(() => {
        if (autoFocus) {
          listboxRef.current.focus();
        }
      }, [autoFocus]);
      const handleKeyDown2 = (event) => {
        if (isMoving.current) {
          return;
        }
        switch (event.key) {
          case "Home":
            handleValueChange(0, "partial");
            event.preventDefault();
            break;
          case "End":
            handleValueChange(type === "minutes" ? 59 : 23, "partial");
            event.preventDefault();
            break;
          case "ArrowUp":
            handleValueChange(value2 + keyboardControlStep, "partial");
            event.preventDefault();
            break;
          case "ArrowDown":
            handleValueChange(value2 - keyboardControlStep, "partial");
            event.preventDefault();
            break;
        }
      };
      return /* @__PURE__ */ jsxs(ClockRoot, {
        className: clsx(className, classes.root),
        children: [/* @__PURE__ */ jsxs(ClockClock, {
          className: classes.clock,
          children: [/* @__PURE__ */ jsx(ClockSquareMask, {
            onTouchMove: handleTouchMove,
            onTouchEnd: handleTouchEnd,
            onMouseUp: handleMouseUp,
            onMouseMove: handleMouseMove,
            ownerState: {
              disabled
            },
            className: classes.squareMask
          }), !isSelectedTimeDisabled && /* @__PURE__ */ jsxs(react.exports.Fragment, {
            children: [/* @__PURE__ */ jsx(ClockPin, {
              className: classes.pin
            }), date && /* @__PURE__ */ jsx(ClockPointer, {
              type,
              value: value2,
              isInner: isPointerInner,
              hasSelected
            })]
          }), /* @__PURE__ */ jsx(ClockWrapper, {
            "aria-activedescendant": selectedId,
            "aria-label": getClockLabelText(type, date, utils2),
            ref: listboxRef,
            role: "listbox",
            onKeyDown: handleKeyDown2,
            tabIndex: 0,
            className: classes.wrapper,
            children
          })]
        }), ampm && (wrapperVariant === "desktop" || ampmInClock) && /* @__PURE__ */ jsxs(react.exports.Fragment, {
          children: [/* @__PURE__ */ jsx(ClockAmButton, {
            onClick: readOnly ? void 0 : () => handleMeridiemChange("am"),
            disabled: disabled || meridiemMode === null,
            ownerState,
            className: classes.amButton,
            children: /* @__PURE__ */ jsx(Typography$1, {
              variant: "caption",
              children: "AM"
            })
          }), /* @__PURE__ */ jsx(ClockPmButton, {
            disabled: disabled || meridiemMode === null,
            onClick: readOnly ? void 0 : () => handleMeridiemChange("pm"),
            ownerState,
            className: classes.pmButton,
            children: /* @__PURE__ */ jsx(Typography$1, {
              variant: "caption",
              children: "PM"
            })
          })]
        })]
      });
    }
    const buildDeprecatedPropsWarning = (message) => {
      let alreadyWarned = false;
      const cleanMessage = Array.isArray(message) ? message.join("\n") : message;
      return (deprecatedProps) => {
        const deprecatedKeys = Object.entries(deprecatedProps).filter(([, value2]) => value2 !== void 0).map(([key]) => `- ${key}`);
        if (!alreadyWarned && deprecatedKeys.length > 0) {
          alreadyWarned = true;
          console.warn([cleanMessage, "deprecated props observed:", ...deprecatedKeys].join("\n"));
        }
      };
    };
    function getClockNumberUtilityClass(slot) {
      return generateUtilityClass("MuiClockNumber", slot);
    }
    const clockNumberClasses = generateUtilityClasses("MuiClockNumber", ["root", "selected", "disabled"]);
    const _excluded$A = ["className", "disabled", "index", "inner", "label", "selected"];
    const useUtilityClasses$i = (ownerState) => {
      const {
        classes,
        selected,
        disabled
      } = ownerState;
      const slots = {
        root: ["root", selected && "selected", disabled && "disabled"]
      };
      return composeClasses(slots, getClockNumberUtilityClass, classes);
    };
    const ClockNumberRoot = styled$1("span", {
      name: "MuiClockNumber",
      slot: "Root",
      overridesResolver: (_2, styles2) => [styles2.root, {
        [`&.${clockNumberClasses.disabled}`]: styles2.disabled
      }, {
        [`&.${clockNumberClasses.selected}`]: styles2.selected
      }]
    })(({
      theme,
      ownerState
    }) => _extends$1({
      height: CLOCK_HOUR_WIDTH,
      width: CLOCK_HOUR_WIDTH,
      position: "absolute",
      left: `calc((100% - ${CLOCK_HOUR_WIDTH}px) / 2)`,
      display: "inline-flex",
      justifyContent: "center",
      alignItems: "center",
      borderRadius: "50%",
      color: theme.palette.text.primary,
      fontFamily: theme.typography.fontFamily,
      "&:focused": {
        backgroundColor: theme.palette.background.paper
      },
      [`&.${clockNumberClasses.selected}`]: {
        color: theme.palette.primary.contrastText
      },
      [`&.${clockNumberClasses.disabled}`]: {
        pointerEvents: "none",
        color: theme.palette.text.disabled
      }
    }, ownerState.inner && _extends$1({}, theme.typography.body2, {
      color: theme.palette.text.secondary
    })));
    function ClockNumber(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiClockNumber"
      });
      const {
        className,
        disabled,
        index,
        inner,
        label,
        selected
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$A);
      const ownerState = props;
      const classes = useUtilityClasses$i(ownerState);
      const angle = index % 12 / 12 * Math.PI * 2 - Math.PI / 2;
      const length2 = (CLOCK_WIDTH - CLOCK_HOUR_WIDTH - 2) / 2 * (inner ? 0.65 : 1);
      const x = Math.round(Math.cos(angle) * length2);
      const y = Math.round(Math.sin(angle) * length2);
      return /* @__PURE__ */ jsx(ClockNumberRoot, _extends$1({
        className: clsx(className, classes.root),
        "aria-disabled": disabled ? true : void 0,
        "aria-selected": selected ? true : void 0,
        role: "option",
        style: {
          transform: `translate(${x}px, ${y + (CLOCK_WIDTH - CLOCK_HOUR_WIDTH) / 2}px`
        },
        ownerState
      }, other, {
        children: label
      }));
    }
    const getHourNumbers = ({
      ampm,
      date,
      getClockNumberText,
      isDisabled,
      selectedId,
      utils: utils2
    }) => {
      const currentHours = date ? utils2.getHours(date) : null;
      const hourNumbers = [];
      const startHour = ampm ? 1 : 0;
      const endHour = ampm ? 12 : 23;
      const isSelected = (hour) => {
        if (currentHours === null) {
          return false;
        }
        if (ampm) {
          if (hour === 12) {
            return currentHours === 12 || currentHours === 0;
          }
          return currentHours === hour || currentHours - 12 === hour;
        }
        return currentHours === hour;
      };
      for (let hour = startHour; hour <= endHour; hour += 1) {
        let label = hour.toString();
        if (hour === 0) {
          label = "00";
        }
        const inner = !ampm && (hour === 0 || hour > 12);
        label = utils2.formatNumber(label);
        const selected = isSelected(hour);
        hourNumbers.push(/* @__PURE__ */ jsx(ClockNumber, {
          id: selected ? selectedId : void 0,
          index: hour,
          inner,
          selected,
          disabled: isDisabled(hour),
          label,
          "aria-label": getClockNumberText(label)
        }, hour));
      }
      return hourNumbers;
    };
    const getMinutesNumbers = ({
      utils: utils2,
      value: value2,
      isDisabled,
      getClockNumberText,
      selectedId
    }) => {
      const f = utils2.formatNumber;
      return [[5, f("05")], [10, f("10")], [15, f("15")], [20, f("20")], [25, f("25")], [30, f("30")], [35, f("35")], [40, f("40")], [45, f("45")], [50, f("50")], [55, f("55")], [0, f("00")]].map(([numberValue, label], index) => {
        const selected = numberValue === value2;
        return /* @__PURE__ */ jsx(ClockNumber, {
          label,
          id: selected ? selectedId : void 0,
          index: index + 1,
          inner: false,
          disabled: isDisabled(numberValue),
          selected,
          "aria-label": getClockNumberText(label)
        }, numberValue);
      });
    };
    function getPickersArrowSwitcherUtilityClass(slot) {
      return generateUtilityClass("MuiPickersArrowSwitcher", slot);
    }
    generateUtilityClasses("MuiPickersArrowSwitcher", ["root", "spacer", "button"]);
    const _excluded$z = ["children", "className", "components", "componentsProps", "isLeftDisabled", "isLeftHidden", "isRightDisabled", "isRightHidden", "leftArrowButtonText", "onLeftClick", "onRightClick", "rightArrowButtonText"];
    const useUtilityClasses$h = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        spacer: ["spacer"],
        button: ["button"]
      };
      return composeClasses(slots, getPickersArrowSwitcherUtilityClass, classes);
    };
    const PickersArrowSwitcherRoot = styled$1("div", {
      name: "MuiPickersArrowSwitcher",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({
      display: "flex"
    });
    const PickersArrowSwitcherSpacer = styled$1("div", {
      name: "MuiPickersArrowSwitcher",
      slot: "Spacer",
      overridesResolver: (props, styles2) => styles2.spacer
    })(({
      theme
    }) => ({
      width: theme.spacing(3)
    }));
    const PickersArrowSwitcherButton = styled$1(IconButton$1, {
      name: "MuiPickersArrowSwitcher",
      slot: "Button",
      overridesResolver: (props, styles2) => styles2.button
    })(({
      ownerState
    }) => _extends$1({}, ownerState.hidden && {
      visibility: "hidden"
    }));
    const PickersArrowSwitcher = /* @__PURE__ */ react.exports.forwardRef(function PickersArrowSwitcher2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiPickersArrowSwitcher"
      });
      const {
        children,
        className,
        components,
        componentsProps,
        isLeftDisabled,
        isLeftHidden,
        isRightDisabled,
        isRightHidden,
        leftArrowButtonText,
        onLeftClick,
        onRightClick,
        rightArrowButtonText
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$z);
      const theme = useTheme();
      const isRtl = theme.direction === "rtl";
      const leftArrowButtonProps = (componentsProps == null ? void 0 : componentsProps.leftArrowButton) || {};
      const LeftArrowIcon = (components == null ? void 0 : components.LeftArrowIcon) || ArrowLeft;
      const rightArrowButtonProps = (componentsProps == null ? void 0 : componentsProps.rightArrowButton) || {};
      const RightArrowIcon = (components == null ? void 0 : components.RightArrowIcon) || ArrowRight;
      const ownerState = props;
      const classes = useUtilityClasses$h(ownerState);
      return /* @__PURE__ */ jsxs(PickersArrowSwitcherRoot, _extends$1({
        ref,
        className: clsx(classes.root, className),
        ownerState
      }, other, {
        children: [/* @__PURE__ */ jsx(PickersArrowSwitcherButton, _extends$1({
          as: components == null ? void 0 : components.LeftArrowButton,
          size: "small",
          "aria-label": leftArrowButtonText,
          title: leftArrowButtonText,
          disabled: isLeftDisabled,
          edge: "end",
          onClick: onLeftClick
        }, leftArrowButtonProps, {
          className: clsx(classes.button, leftArrowButtonProps.className),
          ownerState: _extends$1({}, ownerState, leftArrowButtonProps, {
            hidden: isLeftHidden
          }),
          children: isRtl ? /* @__PURE__ */ jsx(RightArrowIcon, {}) : /* @__PURE__ */ jsx(LeftArrowIcon, {})
        })), children ? /* @__PURE__ */ jsx(Typography$1, {
          variant: "subtitle1",
          component: "span",
          children
        }) : /* @__PURE__ */ jsx(PickersArrowSwitcherSpacer, {
          className: classes.spacer,
          ownerState
        }), /* @__PURE__ */ jsx(PickersArrowSwitcherButton, _extends$1({
          as: components == null ? void 0 : components.RightArrowButton,
          size: "small",
          "aria-label": rightArrowButtonText,
          title: rightArrowButtonText,
          edge: "start",
          disabled: isRightDisabled,
          onClick: onRightClick
        }, rightArrowButtonProps, {
          className: clsx(classes.button, rightArrowButtonProps.className),
          ownerState: _extends$1({}, ownerState, rightArrowButtonProps, {
            hidden: isRightHidden
          }),
          children: isRtl ? /* @__PURE__ */ jsx(LeftArrowIcon, {}) : /* @__PURE__ */ jsx(RightArrowIcon, {})
        }))]
      }));
    });
    const getMeridiem = (date, utils2) => {
      if (!date) {
        return null;
      }
      return utils2.getHours(date) >= 12 ? "pm" : "am";
    };
    const convertValueToMeridiem = (value2, meridiem2, ampm) => {
      if (ampm) {
        const currentMeridiem = value2 >= 12 ? "pm" : "am";
        if (currentMeridiem !== meridiem2) {
          return meridiem2 === "am" ? value2 - 12 : value2 + 12;
        }
      }
      return value2;
    };
    const convertToMeridiem = (time, meridiem2, ampm, utils2) => {
      const newHoursAmount = convertValueToMeridiem(utils2.getHours(time), meridiem2, ampm);
      return utils2.setHours(time, newHoursAmount);
    };
    const getSecondsInDay = (date, utils2) => {
      return utils2.getHours(date) * 3600 + utils2.getMinutes(date) * 60 + utils2.getSeconds(date);
    };
    const createIsAfterIgnoreDatePart = (disableIgnoringDatePartForTimeValidation = false, utils2) => (dateLeft, dateRight) => {
      if (disableIgnoringDatePartForTimeValidation) {
        return utils2.isAfter(dateLeft, dateRight);
      }
      return getSecondsInDay(dateLeft, utils2) > getSecondsInDay(dateRight, utils2);
    };
    function useNextMonthDisabled(month, {
      disableFuture,
      maxDate
    }) {
      const utils2 = useUtils();
      return react.exports.useMemo(() => {
        const now2 = utils2.date();
        const lastEnabledMonth = utils2.startOfMonth(disableFuture && utils2.isBefore(now2, maxDate) ? now2 : maxDate);
        return !utils2.isAfter(lastEnabledMonth, month);
      }, [disableFuture, maxDate, month, utils2]);
    }
    function usePreviousMonthDisabled(month, {
      disablePast,
      minDate
    }) {
      const utils2 = useUtils();
      return react.exports.useMemo(() => {
        const now2 = utils2.date();
        const firstEnabledMonth = utils2.startOfMonth(disablePast && utils2.isAfter(now2, minDate) ? now2 : minDate);
        return !utils2.isBefore(firstEnabledMonth, month);
      }, [disablePast, minDate, month, utils2]);
    }
    function useMeridiemMode(date, ampm, onChange) {
      const utils2 = useUtils();
      const meridiemMode = getMeridiem(date, utils2);
      const handleMeridiemChange = react.exports.useCallback((mode) => {
        const timeWithMeridiem = date == null ? null : convertToMeridiem(date, mode, Boolean(ampm), utils2);
        onChange(timeWithMeridiem, "partial");
      }, [ampm, date, onChange, utils2]);
      return {
        meridiemMode,
        handleMeridiemChange
      };
    }
    function getClockPickerUtilityClass(slot) {
      return generateUtilityClass("MuiClockPicker", slot);
    }
    generateUtilityClasses("MuiClockPicker", ["root", "arrowSwitcher"]);
    const DAY_SIZE = 36;
    const DAY_MARGIN = 2;
    const DIALOG_WIDTH = 320;
    const VIEW_HEIGHT = 358;
    const PickerViewRoot = styled$1("div")({
      overflowX: "hidden",
      width: DIALOG_WIDTH,
      maxHeight: VIEW_HEIGHT,
      display: "flex",
      flexDirection: "column",
      margin: "0 auto"
    });
    const useUtilityClasses$g = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        arrowSwitcher: ["arrowSwitcher"]
      };
      return composeClasses(slots, getClockPickerUtilityClass, classes);
    };
    const ClockPickerRoot = styled$1(PickerViewRoot, {
      name: "MuiClockPicker",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({
      display: "flex",
      flexDirection: "column"
    });
    const ClockPickerArrowSwitcher = styled$1(PickersArrowSwitcher, {
      name: "MuiClockPicker",
      slot: "ArrowSwitcher",
      overridesResolver: (props, styles2) => styles2.arrowSwitcher
    })({
      position: "absolute",
      right: 12,
      top: 15
    });
    const deprecatedPropsWarning$1 = buildDeprecatedPropsWarning("Props for translation are deprecated. See https://mui.com/x/react-date-pickers/localization for more information.");
    const ClockPicker = /* @__PURE__ */ react.exports.forwardRef(function ClockPicker2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiClockPicker"
      });
      const {
        ampm = false,
        ampmInClock = false,
        autoFocus,
        components,
        componentsProps,
        date,
        disableIgnoringDatePartForTimeValidation,
        getClockLabelText: getClockLabelTextProp,
        getHoursClockNumberText: getHoursClockNumberTextProp,
        getMinutesClockNumberText: getMinutesClockNumberTextProp,
        getSecondsClockNumberText: getSecondsClockNumberTextProp,
        leftArrowButtonText: leftArrowButtonTextProp,
        maxTime,
        minTime,
        minutesStep = 1,
        rightArrowButtonText: rightArrowButtonTextProp,
        shouldDisableTime,
        showViewSwitcher,
        onChange,
        view,
        views = ["hours", "minutes"],
        openTo,
        onViewChange,
        className,
        disabled,
        readOnly
      } = props;
      deprecatedPropsWarning$1({
        leftArrowButtonText: leftArrowButtonTextProp,
        rightArrowButtonText: rightArrowButtonTextProp,
        getClockLabelText: getClockLabelTextProp,
        getHoursClockNumberText: getHoursClockNumberTextProp,
        getMinutesClockNumberText: getMinutesClockNumberTextProp,
        getSecondsClockNumberText: getSecondsClockNumberTextProp
      });
      const localeText = useLocaleText();
      const leftArrowButtonText = leftArrowButtonTextProp != null ? leftArrowButtonTextProp : localeText.openPreviousView;
      const rightArrowButtonText = rightArrowButtonTextProp != null ? rightArrowButtonTextProp : localeText.openNextView;
      const getClockLabelText = getClockLabelTextProp != null ? getClockLabelTextProp : localeText.clockLabelText;
      const getHoursClockNumberText = getHoursClockNumberTextProp != null ? getHoursClockNumberTextProp : localeText.hoursClockNumberText;
      const getMinutesClockNumberText = getMinutesClockNumberTextProp != null ? getMinutesClockNumberTextProp : localeText.minutesClockNumberText;
      const getSecondsClockNumberText = getSecondsClockNumberTextProp != null ? getSecondsClockNumberTextProp : localeText.secondsClockNumberText;
      const {
        openView,
        setOpenView,
        nextView,
        previousView,
        handleChangeAndOpenNext
      } = useViews({
        view,
        views,
        openTo,
        onViewChange,
        onChange
      });
      const now2 = useNow();
      const utils2 = useUtils();
      const dateOrMidnight = react.exports.useMemo(() => date || utils2.setSeconds(utils2.setMinutes(utils2.setHours(now2, 0), 0), 0), [date, now2, utils2]);
      const {
        meridiemMode,
        handleMeridiemChange
      } = useMeridiemMode(dateOrMidnight, ampm, handleChangeAndOpenNext);
      const isTimeDisabled = react.exports.useCallback((rawValue, viewType) => {
        const isAfter2 = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils2);
        const containsValidTime = ({
          start: start2,
          end: end2
        }) => {
          if (minTime && isAfter2(minTime, end2)) {
            return false;
          }
          if (maxTime && isAfter2(start2, maxTime)) {
            return false;
          }
          return true;
        };
        const isValidValue = (value2, step = 1) => {
          if (value2 % step !== 0) {
            return false;
          }
          if (shouldDisableTime) {
            return !shouldDisableTime(value2, viewType);
          }
          return true;
        };
        switch (viewType) {
          case "hours": {
            const value2 = convertValueToMeridiem(rawValue, meridiemMode, ampm);
            const dateWithNewHours = utils2.setHours(dateOrMidnight, value2);
            const start2 = utils2.setSeconds(utils2.setMinutes(dateWithNewHours, 0), 0);
            const end2 = utils2.setSeconds(utils2.setMinutes(dateWithNewHours, 59), 59);
            return !containsValidTime({
              start: start2,
              end: end2
            }) || !isValidValue(value2);
          }
          case "minutes": {
            const dateWithNewMinutes = utils2.setMinutes(dateOrMidnight, rawValue);
            const start2 = utils2.setSeconds(dateWithNewMinutes, 0);
            const end2 = utils2.setSeconds(dateWithNewMinutes, 59);
            return !containsValidTime({
              start: start2,
              end: end2
            }) || !isValidValue(rawValue, minutesStep);
          }
          case "seconds": {
            const dateWithNewSeconds = utils2.setSeconds(dateOrMidnight, rawValue);
            const start2 = dateWithNewSeconds;
            const end2 = dateWithNewSeconds;
            return !containsValidTime({
              start: start2,
              end: end2
            }) || !isValidValue(rawValue);
          }
          default:
            throw new Error("not supported");
        }
      }, [ampm, dateOrMidnight, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, minutesStep, shouldDisableTime, utils2]);
      const selectedId = useId();
      const viewProps = react.exports.useMemo(() => {
        switch (openView) {
          case "hours": {
            const handleHoursChange = (value2, isFinish) => {
              const valueWithMeridiem = convertValueToMeridiem(value2, meridiemMode, ampm);
              handleChangeAndOpenNext(utils2.setHours(dateOrMidnight, valueWithMeridiem), isFinish);
            };
            return {
              onChange: handleHoursChange,
              value: utils2.getHours(dateOrMidnight),
              children: getHourNumbers({
                date,
                utils: utils2,
                ampm,
                onChange: handleHoursChange,
                getClockNumberText: getHoursClockNumberText,
                isDisabled: (value2) => disabled || isTimeDisabled(value2, "hours"),
                selectedId
              })
            };
          }
          case "minutes": {
            const minutesValue = utils2.getMinutes(dateOrMidnight);
            const handleMinutesChange = (value2, isFinish) => {
              handleChangeAndOpenNext(utils2.setMinutes(dateOrMidnight, value2), isFinish);
            };
            return {
              value: minutesValue,
              onChange: handleMinutesChange,
              children: getMinutesNumbers({
                utils: utils2,
                value: minutesValue,
                onChange: handleMinutesChange,
                getClockNumberText: getMinutesClockNumberText,
                isDisabled: (value2) => disabled || isTimeDisabled(value2, "minutes"),
                selectedId
              })
            };
          }
          case "seconds": {
            const secondsValue = utils2.getSeconds(dateOrMidnight);
            const handleSecondsChange = (value2, isFinish) => {
              handleChangeAndOpenNext(utils2.setSeconds(dateOrMidnight, value2), isFinish);
            };
            return {
              value: secondsValue,
              onChange: handleSecondsChange,
              children: getMinutesNumbers({
                utils: utils2,
                value: secondsValue,
                onChange: handleSecondsChange,
                getClockNumberText: getSecondsClockNumberText,
                isDisabled: (value2) => disabled || isTimeDisabled(value2, "seconds"),
                selectedId
              })
            };
          }
          default:
            throw new Error("You must provide the type for ClockView");
        }
      }, [openView, utils2, date, ampm, getHoursClockNumberText, getMinutesClockNumberText, getSecondsClockNumberText, meridiemMode, handleChangeAndOpenNext, dateOrMidnight, isTimeDisabled, selectedId, disabled]);
      const ownerState = props;
      const classes = useUtilityClasses$g(ownerState);
      return /* @__PURE__ */ jsxs(ClockPickerRoot, {
        ref,
        className: clsx(classes.root, className),
        ownerState,
        children: [showViewSwitcher && /* @__PURE__ */ jsx(ClockPickerArrowSwitcher, {
          className: classes.arrowSwitcher,
          leftArrowButtonText,
          rightArrowButtonText,
          components,
          componentsProps,
          onLeftClick: () => setOpenView(previousView),
          onRightClick: () => setOpenView(nextView),
          isLeftDisabled: !previousView,
          isRightDisabled: !nextView,
          ownerState
        }), /* @__PURE__ */ jsx(Clock, _extends$1({
          autoFocus,
          date,
          ampmInClock,
          type: openView,
          ampm,
          getClockLabelText,
          minutesStep,
          isTimeDisabled,
          meridiemMode,
          handleMeridiemChange,
          selectedId,
          disabled,
          readOnly
        }, viewProps))]
      });
    });
    ClockPicker.propTypes = {
      ampm: propTypes.exports.bool,
      ampmInClock: propTypes.exports.bool,
      autoFocus: propTypes.exports.bool,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      components: propTypes.exports.object,
      componentsProps: propTypes.exports.object,
      date: propTypes.exports.any,
      disabled: propTypes.exports.bool,
      disableIgnoringDatePartForTimeValidation: propTypes.exports.bool,
      getClockLabelText: propTypes.exports.func,
      getHoursClockNumberText: propTypes.exports.func,
      getMinutesClockNumberText: propTypes.exports.func,
      getSecondsClockNumberText: propTypes.exports.func,
      leftArrowButtonText: propTypes.exports.string,
      maxTime: propTypes.exports.any,
      minTime: propTypes.exports.any,
      minutesStep: propTypes.exports.number,
      onChange: propTypes.exports.func.isRequired,
      onViewChange: propTypes.exports.func,
      openTo: propTypes.exports.oneOf(["hours", "minutes", "seconds"]),
      readOnly: propTypes.exports.bool,
      rightArrowButtonText: propTypes.exports.string,
      shouldDisableTime: propTypes.exports.func,
      showViewSwitcher: propTypes.exports.bool,
      view: propTypes.exports.oneOf(["hours", "minutes", "seconds"]),
      views: propTypes.exports.arrayOf(propTypes.exports.oneOf(["hours", "minutes", "seconds"]).isRequired)
    };
    function getPickersMonthUtilityClass(slot) {
      return generateUtilityClass("PrivatePickersMonth", slot);
    }
    const pickersMonthClasses = generateUtilityClasses(
      "PrivatePickersMonth",
      ["root", "selected"]
    );
    const _excluded$y = ["disabled", "onSelect", "selected", "value", "tabIndex", "hasFocus", "onFocus", "onBlur"];
    const useUtilityClasses$f = (ownerState) => {
      const {
        classes,
        selected
      } = ownerState;
      const slots = {
        root: ["root", selected && "selected"]
      };
      return composeClasses(slots, getPickersMonthUtilityClass, classes);
    };
    const PickersMonthRoot = styled$1(Typography$1, {
      name: "PrivatePickersMonth",
      slot: "Root",
      overridesResolver: (_2, styles2) => [styles2.root, {
        [`&.${pickersMonthClasses.selected}`]: styles2.selected
      }]
    })(({
      theme
    }) => _extends$1({
      flex: "1 0 33.33%",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      color: "unset",
      backgroundColor: "transparent",
      border: 0,
      outline: 0
    }, theme.typography.subtitle1, {
      margin: "8px 0",
      height: 36,
      borderRadius: 18,
      cursor: "pointer",
      "&:focus, &:hover": {
        backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)
      },
      "&:disabled": {
        pointerEvents: "none",
        color: theme.palette.text.secondary
      },
      [`&.${pickersMonthClasses.selected}`]: {
        color: theme.palette.primary.contrastText,
        backgroundColor: theme.palette.primary.main,
        "&:focus, &:hover": {
          backgroundColor: theme.palette.primary.dark
        }
      }
    }));
    const noop$2 = () => {
    };
    const PickersMonth = (props) => {
      const {
        disabled,
        onSelect,
        selected,
        value: value2,
        tabIndex,
        hasFocus,
        onFocus = noop$2,
        onBlur = noop$2
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$y);
      const classes = useUtilityClasses$f(props);
      const handleSelection = () => {
        onSelect(value2);
      };
      const ref = react.exports.useRef(null);
      useEnhancedEffect$1(() => {
        if (hasFocus) {
          var _ref$current;
          (_ref$current = ref.current) == null ? void 0 : _ref$current.focus();
        }
      }, [hasFocus]);
      return /* @__PURE__ */ jsx(PickersMonthRoot, _extends$1({
        ref,
        component: "button",
        type: "button",
        className: classes.root,
        tabIndex,
        onClick: handleSelection,
        onKeyDown: onSpaceOrEnter(handleSelection),
        color: selected ? "primary" : void 0,
        variant: selected ? "h5" : "subtitle1",
        disabled,
        onFocus: (event) => onFocus(event, value2),
        onBlur: (event) => onBlur(event, value2)
      }, other));
    };
    function getMonthPickerUtilityClass(slot) {
      return generateUtilityClass("MuiMonthPicker", slot);
    }
    generateUtilityClasses("MuiMonthPicker", ["root"]);
    const _excluded$x = ["className", "date", "disabled", "disableFuture", "disablePast", "maxDate", "minDate", "onChange", "shouldDisableMonth", "readOnly", "disableHighlightToday", "autoFocus", "onMonthFocus", "hasFocus", "onFocusedViewChange"];
    const useUtilityClasses$e = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, getMonthPickerUtilityClass, classes);
    };
    function useMonthPickerDefaultizedProps(props, name) {
      const utils2 = useUtils();
      const defaultDates = useDefaultDates();
      const themeProps = useThemeProps({
        props,
        name
      });
      return _extends$1({
        disableFuture: false,
        disablePast: false
      }, themeProps, {
        minDate: parseNonNullablePickerDate(utils2, themeProps.minDate, defaultDates.minDate),
        maxDate: parseNonNullablePickerDate(utils2, themeProps.maxDate, defaultDates.maxDate)
      });
    }
    const MonthPickerRoot = styled$1("div", {
      name: "MuiMonthPicker",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({
      width: 310,
      display: "flex",
      flexWrap: "wrap",
      alignContent: "stretch",
      margin: "0 4px"
    });
    const MonthPicker = /* @__PURE__ */ react.exports.forwardRef(function MonthPicker2(inProps, ref) {
      const utils2 = useUtils();
      const now2 = useNow();
      const props = useMonthPickerDefaultizedProps(inProps, "MuiMonthPicker");
      const {
        className,
        date,
        disabled,
        disableFuture,
        disablePast,
        maxDate,
        minDate,
        onChange,
        shouldDisableMonth,
        readOnly,
        disableHighlightToday,
        autoFocus = false,
        onMonthFocus,
        hasFocus,
        onFocusedViewChange
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$x);
      const ownerState = props;
      const classes = useUtilityClasses$e(ownerState);
      const theme = useTheme$2();
      const selectedDateOrStartOfMonth = react.exports.useMemo(() => date != null ? date : utils2.startOfMonth(now2), [now2, utils2, date]);
      const selectedMonth = react.exports.useMemo(() => {
        if (date != null) {
          return utils2.getMonth(date);
        }
        if (disableHighlightToday) {
          return null;
        }
        return utils2.getMonth(now2);
      }, [now2, date, utils2, disableHighlightToday]);
      const [focusedMonth, setFocusedMonth] = react.exports.useState(() => selectedMonth || utils2.getMonth(now2));
      const isMonthDisabled = react.exports.useCallback((month) => {
        const firstEnabledMonth = utils2.startOfMonth(disablePast && utils2.isAfter(now2, minDate) ? now2 : minDate);
        const lastEnabledMonth = utils2.startOfMonth(disableFuture && utils2.isBefore(now2, maxDate) ? now2 : maxDate);
        if (utils2.isBefore(month, firstEnabledMonth)) {
          return true;
        }
        if (utils2.isAfter(month, lastEnabledMonth)) {
          return true;
        }
        if (!shouldDisableMonth) {
          return false;
        }
        return shouldDisableMonth(month);
      }, [disableFuture, disablePast, maxDate, minDate, now2, shouldDisableMonth, utils2]);
      const onMonthSelect = (month) => {
        if (readOnly) {
          return;
        }
        const newDate = utils2.setMonth(selectedDateOrStartOfMonth, month);
        onChange(newDate, "finish");
      };
      const [internalHasFocus, setInternalHasFocus] = useControlled({
        name: "MonthPicker",
        state: "hasFocus",
        controlled: hasFocus,
        default: autoFocus
      });
      const changeHasFocus = react.exports.useCallback((newHasFocus) => {
        setInternalHasFocus(newHasFocus);
        if (onFocusedViewChange) {
          onFocusedViewChange(newHasFocus);
        }
      }, [setInternalHasFocus, onFocusedViewChange]);
      const focusMonth = react.exports.useCallback((month) => {
        if (!isMonthDisabled(utils2.setMonth(selectedDateOrStartOfMonth, month))) {
          setFocusedMonth(month);
          changeHasFocus(true);
          if (onMonthFocus) {
            onMonthFocus(month);
          }
        }
      }, [isMonthDisabled, utils2, selectedDateOrStartOfMonth, changeHasFocus, onMonthFocus]);
      react.exports.useEffect(() => {
        setFocusedMonth((prevFocusedMonth) => selectedMonth !== null && prevFocusedMonth !== selectedMonth ? selectedMonth : prevFocusedMonth);
      }, [selectedMonth]);
      const handleKeyDown2 = useEventCallback((event) => {
        const monthsInYear = 12;
        const monthsInRow = 3;
        switch (event.key) {
          case "ArrowUp":
            focusMonth((monthsInYear + focusedMonth - monthsInRow) % monthsInYear);
            event.preventDefault();
            break;
          case "ArrowDown":
            focusMonth((monthsInYear + focusedMonth + monthsInRow) % monthsInYear);
            event.preventDefault();
            break;
          case "ArrowLeft":
            focusMonth((monthsInYear + focusedMonth + (theme.direction === "ltr" ? -1 : 1)) % monthsInYear);
            event.preventDefault();
            break;
          case "ArrowRight":
            focusMonth((monthsInYear + focusedMonth + (theme.direction === "ltr" ? 1 : -1)) % monthsInYear);
            event.preventDefault();
            break;
        }
      });
      const handleMonthFocus = react.exports.useCallback((event, month) => {
        focusMonth(month);
      }, [focusMonth]);
      const handleMonthBlur = react.exports.useCallback(() => {
        changeHasFocus(false);
      }, [changeHasFocus]);
      const currentMonthNumber = utils2.getMonth(now2);
      return /* @__PURE__ */ jsx(MonthPickerRoot, _extends$1({
        ref,
        className: clsx(classes.root, className),
        ownerState,
        onKeyDown: handleKeyDown2
      }, other, {
        children: utils2.getMonthArray(selectedDateOrStartOfMonth).map((month) => {
          const monthNumber = utils2.getMonth(month);
          const monthText = utils2.format(month, "monthShort");
          const isDisabled = disabled || isMonthDisabled(month);
          return /* @__PURE__ */ jsx(PickersMonth, {
            value: monthNumber,
            selected: monthNumber === selectedMonth,
            tabIndex: monthNumber === focusedMonth && !isDisabled ? 0 : -1,
            hasFocus: internalHasFocus && monthNumber === focusedMonth,
            onSelect: onMonthSelect,
            onFocus: handleMonthFocus,
            onBlur: handleMonthBlur,
            disabled: isDisabled,
            "aria-current": currentMonthNumber === monthNumber ? "date" : void 0,
            children: monthText
          }, monthText);
        })
      }));
    });
    MonthPicker.propTypes = {
      autoFocus: propTypes.exports.bool,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      date: propTypes.exports.any,
      disabled: propTypes.exports.bool,
      disableFuture: propTypes.exports.bool,
      disableHighlightToday: propTypes.exports.bool,
      disablePast: propTypes.exports.bool,
      hasFocus: propTypes.exports.bool,
      maxDate: propTypes.exports.any,
      minDate: propTypes.exports.any,
      onChange: propTypes.exports.func.isRequired,
      onFocusedViewChange: propTypes.exports.func,
      onMonthFocus: propTypes.exports.func,
      readOnly: propTypes.exports.bool,
      shouldDisableMonth: propTypes.exports.func,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object])
    };
    function useValidation(props, validate, isSameError) {
      const {
        value: value2,
        onError
      } = props;
      const adapter = useLocalizationContext();
      const previousValidationErrorRef = react.exports.useRef(null);
      const validationError = validate({
        adapter,
        value: value2,
        props
      });
      react.exports.useEffect(() => {
        if (onError && !isSameError(validationError, previousValidationErrorRef.current)) {
          onError(validationError, value2);
        }
        previousValidationErrorRef.current = validationError;
      }, [isSameError, onError, previousValidationErrorRef, validationError, value2]);
      return validationError;
    }
    const validateDate = ({
      props,
      value: value2,
      adapter
    }) => {
      const now2 = adapter.utils.date();
      const date = adapter.utils.date(value2);
      const minDate = parseNonNullablePickerDate(adapter.utils, props.minDate, adapter.defaultDates.minDate);
      const maxDate = parseNonNullablePickerDate(adapter.utils, props.maxDate, adapter.defaultDates.maxDate);
      if (date === null) {
        return null;
      }
      switch (true) {
        case !adapter.utils.isValid(value2):
          return "invalidDate";
        case Boolean(props.shouldDisableDate && props.shouldDisableDate(date)):
          return "shouldDisableDate";
        case Boolean(props.disableFuture && adapter.utils.isAfterDay(date, now2)):
          return "disableFuture";
        case Boolean(props.disablePast && adapter.utils.isBeforeDay(date, now2)):
          return "disablePast";
        case Boolean(minDate && adapter.utils.isBeforeDay(date, minDate)):
          return "minDate";
        case Boolean(maxDate && adapter.utils.isAfterDay(date, maxDate)):
          return "maxDate";
        default:
          return null;
      }
    };
    const useIsDayDisabled = ({
      shouldDisableDate,
      minDate,
      maxDate,
      disableFuture,
      disablePast
    }) => {
      const adapter = useLocalizationContext();
      return react.exports.useCallback((day) => validateDate({
        adapter,
        value: day,
        props: {
          shouldDisableDate,
          minDate,
          maxDate,
          disableFuture,
          disablePast
        }
      }) !== null, [adapter, shouldDisableDate, minDate, maxDate, disableFuture, disablePast]);
    };
    const isSameDateError = (a, b) => a === b;
    const useDateValidation = (props) => useValidation(props, validateDate, isSameDateError);
    const createCalendarStateReducer = (reduceAnimations, disableSwitchToMonthOnDayFocus, utils2) => (state, action) => {
      switch (action.type) {
        case "changeMonth":
          return _extends$1({}, state, {
            slideDirection: action.direction,
            currentMonth: action.newMonth,
            isMonthSwitchingAnimating: !reduceAnimations
          });
        case "finishMonthSwitchingAnimation":
          return _extends$1({}, state, {
            isMonthSwitchingAnimating: false
          });
        case "changeFocusedDay": {
          if (state.focusedDay != null && action.focusedDay != null && utils2.isSameDay(action.focusedDay, state.focusedDay)) {
            return state;
          }
          const needMonthSwitch = action.focusedDay != null && !disableSwitchToMonthOnDayFocus && !utils2.isSameMonth(state.currentMonth, action.focusedDay);
          return _extends$1({}, state, {
            focusedDay: action.focusedDay,
            isMonthSwitchingAnimating: needMonthSwitch && !reduceAnimations && !action.withoutMonthSwitchingAnimation,
            currentMonth: needMonthSwitch ? utils2.startOfMonth(action.focusedDay) : state.currentMonth,
            slideDirection: action.focusedDay != null && utils2.isAfterDay(action.focusedDay, state.currentMonth) ? "left" : "right"
          });
        }
        default:
          throw new Error("missing support");
      }
    };
    const useCalendarState = ({
      date,
      defaultCalendarMonth,
      disableFuture,
      disablePast,
      disableSwitchToMonthOnDayFocus = false,
      maxDate,
      minDate,
      onMonthChange,
      reduceAnimations,
      shouldDisableDate
    }) => {
      var _ref;
      const now2 = useNow();
      const utils2 = useUtils();
      const reducerFn = react.exports.useRef(createCalendarStateReducer(Boolean(reduceAnimations), disableSwitchToMonthOnDayFocus, utils2)).current;
      const [calendarState, dispatch] = react.exports.useReducer(reducerFn, {
        isMonthSwitchingAnimating: false,
        focusedDay: date || now2,
        currentMonth: utils2.startOfMonth((_ref = date != null ? date : defaultCalendarMonth) != null ? _ref : now2),
        slideDirection: "left"
      });
      const handleChangeMonth = react.exports.useCallback((payload) => {
        dispatch(_extends$1({
          type: "changeMonth"
        }, payload));
        if (onMonthChange) {
          onMonthChange(payload.newMonth);
        }
      }, [onMonthChange]);
      const changeMonth = react.exports.useCallback((newDate) => {
        const newDateRequested = newDate != null ? newDate : now2;
        if (utils2.isSameMonth(newDateRequested, calendarState.currentMonth)) {
          return;
        }
        handleChangeMonth({
          newMonth: utils2.startOfMonth(newDateRequested),
          direction: utils2.isAfterDay(newDateRequested, calendarState.currentMonth) ? "left" : "right"
        });
      }, [calendarState.currentMonth, handleChangeMonth, now2, utils2]);
      const isDateDisabled = useIsDayDisabled({
        shouldDisableDate,
        minDate,
        maxDate,
        disableFuture,
        disablePast
      });
      const onMonthSwitchingAnimationEnd = react.exports.useCallback(() => {
        dispatch({
          type: "finishMonthSwitchingAnimation"
        });
      }, []);
      const changeFocusedDay = react.exports.useCallback((newFocusedDate, withoutMonthSwitchingAnimation) => {
        if (!isDateDisabled(newFocusedDate)) {
          dispatch({
            type: "changeFocusedDay",
            focusedDay: newFocusedDate,
            withoutMonthSwitchingAnimation
          });
        }
      }, [isDateDisabled]);
      return {
        calendarState,
        changeMonth,
        changeFocusedDay,
        isDateDisabled,
        onMonthSwitchingAnimationEnd,
        handleChangeMonth
      };
    };
    const getPickersFadeTransitionGroupUtilityClass = (slot) => generateUtilityClass("MuiPickersFadeTransitionGroup", slot);
    generateUtilityClasses("MuiPickersFadeTransitionGroup", ["root"]);
    const useUtilityClasses$d = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, getPickersFadeTransitionGroupUtilityClass, classes);
    };
    const animationDuration = 500;
    const PickersFadeTransitionGroupRoot = styled$1(TransitionGroup$1, {
      name: "MuiPickersFadeTransitionGroup",
      slot: "Root",
      overridesResolver: (_2, styles2) => styles2.root
    })({
      display: "block",
      position: "relative"
    });
    function PickersFadeTransitionGroup(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiPickersFadeTransitionGroup"
      });
      const {
        children,
        className,
        reduceAnimations,
        transKey
      } = props;
      const classes = useUtilityClasses$d(props);
      if (reduceAnimations) {
        return children;
      }
      return /* @__PURE__ */ jsx(PickersFadeTransitionGroupRoot, {
        className: clsx(classes.root, className),
        children: /* @__PURE__ */ jsx(Fade$1, {
          appear: false,
          mountOnEnter: true,
          unmountOnExit: true,
          timeout: {
            appear: animationDuration,
            enter: animationDuration / 2,
            exit: 0
          },
          children
        }, transKey)
      });
    }
    function getPickersDayUtilityClass(slot) {
      return generateUtilityClass("MuiPickersDay", slot);
    }
    const pickersDayClasses = generateUtilityClasses("MuiPickersDay", ["root", "dayWithMargin", "dayOutsideMonth", "hiddenDaySpacingFiller", "today", "selected", "disabled"]);
    const _excluded$w = ["autoFocus", "className", "day", "disabled", "disableHighlightToday", "disableMargin", "hidden", "isAnimating", "onClick", "onDaySelect", "onFocus", "onBlur", "onKeyDown", "onMouseDown", "outsideCurrentMonth", "selected", "showDaysOutsideCurrentMonth", "children", "today"];
    const useUtilityClasses$c = (ownerState) => {
      const {
        selected,
        disableMargin,
        disableHighlightToday,
        today,
        disabled,
        outsideCurrentMonth,
        showDaysOutsideCurrentMonth,
        classes
      } = ownerState;
      const slots = {
        root: ["root", selected && "selected", disabled && "disabled", !disableMargin && "dayWithMargin", !disableHighlightToday && today && "today", outsideCurrentMonth && showDaysOutsideCurrentMonth && "dayOutsideMonth", outsideCurrentMonth && !showDaysOutsideCurrentMonth && "hiddenDaySpacingFiller"],
        hiddenDaySpacingFiller: ["hiddenDaySpacingFiller"]
      };
      return composeClasses(slots, getPickersDayUtilityClass, classes);
    };
    const styleArg = ({
      theme,
      ownerState
    }) => _extends$1({}, theme.typography.caption, {
      width: DAY_SIZE,
      height: DAY_SIZE,
      borderRadius: "50%",
      padding: 0,
      backgroundColor: theme.palette.background.paper,
      color: theme.palette.text.primary,
      "&:hover": {
        backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)
      },
      "&:focus": {
        backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
        [`&.${pickersDayClasses.selected}`]: {
          willChange: "background-color",
          backgroundColor: theme.palette.primary.dark
        }
      },
      [`&.${pickersDayClasses.selected}`]: {
        color: theme.palette.primary.contrastText,
        backgroundColor: theme.palette.primary.main,
        fontWeight: theme.typography.fontWeightMedium,
        transition: theme.transitions.create("background-color", {
          duration: theme.transitions.duration.short
        }),
        "&:hover": {
          willChange: "background-color",
          backgroundColor: theme.palette.primary.dark
        }
      },
      [`&.${pickersDayClasses.disabled}`]: {
        color: theme.palette.text.disabled
      }
    }, !ownerState.disableMargin && {
      margin: `0 ${DAY_MARGIN}px`
    }, ownerState.outsideCurrentMonth && ownerState.showDaysOutsideCurrentMonth && {
      color: theme.palette.text.secondary
    }, !ownerState.disableHighlightToday && ownerState.today && {
      [`&:not(.${pickersDayClasses.selected})`]: {
        border: `1px solid ${theme.palette.text.secondary}`
      }
    });
    const overridesResolver = (props, styles2) => {
      const {
        ownerState
      } = props;
      return [styles2.root, !ownerState.disableMargin && styles2.dayWithMargin, !ownerState.disableHighlightToday && ownerState.today && styles2.today, !ownerState.outsideCurrentMonth && ownerState.showDaysOutsideCurrentMonth && styles2.dayOutsideMonth, ownerState.outsideCurrentMonth && !ownerState.showDaysOutsideCurrentMonth && styles2.hiddenDaySpacingFiller];
    };
    const PickersDayRoot = styled$1(ButtonBase$1, {
      name: "MuiPickersDay",
      slot: "Root",
      overridesResolver
    })(styleArg);
    const PickersDayFiller = styled$1("div", {
      name: "MuiPickersDay",
      slot: "Root",
      overridesResolver
    })(({
      theme,
      ownerState
    }) => _extends$1({}, styleArg({
      theme,
      ownerState
    }), {
      opacity: 0,
      pointerEvents: "none"
    }));
    const noop$1 = () => {
    };
    const PickersDayRaw = /* @__PURE__ */ react.exports.forwardRef(function PickersDay2(inProps, forwardedRef) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiPickersDay"
      });
      const {
        autoFocus = false,
        className,
        day,
        disabled = false,
        disableHighlightToday = false,
        disableMargin = false,
        isAnimating,
        onClick,
        onDaySelect,
        onFocus = noop$1,
        onBlur = noop$1,
        onKeyDown = noop$1,
        onMouseDown,
        outsideCurrentMonth,
        selected = false,
        showDaysOutsideCurrentMonth = false,
        children,
        today: isToday = false
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$w);
      const ownerState = _extends$1({}, props, {
        autoFocus,
        disabled,
        disableHighlightToday,
        disableMargin,
        selected,
        showDaysOutsideCurrentMonth,
        today: isToday
      });
      const classes = useUtilityClasses$c(ownerState);
      const utils2 = useUtils();
      const ref = react.exports.useRef(null);
      const handleRef = useForkRef(ref, forwardedRef);
      useEnhancedEffect$1(() => {
        if (autoFocus && !disabled && !isAnimating && !outsideCurrentMonth) {
          ref.current.focus();
        }
      }, [autoFocus, disabled, isAnimating, outsideCurrentMonth]);
      const handleMouseDown = (event) => {
        if (onMouseDown) {
          onMouseDown(event);
        }
        if (outsideCurrentMonth) {
          event.preventDefault();
        }
      };
      const handleClick = (event) => {
        if (!disabled) {
          onDaySelect(day, "finish");
        }
        if (outsideCurrentMonth) {
          event.currentTarget.focus();
        }
        if (onClick) {
          onClick(event);
        }
      };
      if (outsideCurrentMonth && !showDaysOutsideCurrentMonth) {
        return /* @__PURE__ */ jsx(PickersDayFiller, {
          className: clsx(classes.root, classes.hiddenDaySpacingFiller, className),
          ownerState,
          role: other.role
        });
      }
      return /* @__PURE__ */ jsx(PickersDayRoot, _extends$1({
        className: clsx(classes.root, className),
        ownerState,
        ref: handleRef,
        centerRipple: true,
        disabled,
        tabIndex: selected ? 0 : -1,
        onKeyDown: (event) => onKeyDown(event, day),
        onFocus: (event) => onFocus(event, day),
        onBlur: (event) => onBlur(event, day),
        onClick: handleClick,
        onMouseDown: handleMouseDown
      }, other, {
        children: !children ? utils2.format(day, "dayOfMonth") : children
      }));
    });
    const areDayPropsEqual = (prevProps, nextProps) => {
      return prevProps.autoFocus === nextProps.autoFocus && prevProps.isAnimating === nextProps.isAnimating && prevProps.today === nextProps.today && prevProps.disabled === nextProps.disabled && prevProps.selected === nextProps.selected && prevProps.disableMargin === nextProps.disableMargin && prevProps.showDaysOutsideCurrentMonth === nextProps.showDaysOutsideCurrentMonth && prevProps.disableHighlightToday === nextProps.disableHighlightToday && prevProps.className === nextProps.className && prevProps.sx === nextProps.sx && prevProps.outsideCurrentMonth === nextProps.outsideCurrentMonth && prevProps.onFocus === nextProps.onFocus && prevProps.onBlur === nextProps.onBlur && prevProps.onDaySelect === nextProps.onDaySelect;
    };
    PickersDayRaw.propTypes = {
      classes: propTypes.exports.object,
      day: propTypes.exports.any.isRequired,
      disabled: propTypes.exports.bool,
      disableHighlightToday: propTypes.exports.bool,
      disableMargin: propTypes.exports.bool,
      isAnimating: propTypes.exports.bool,
      onBlur: propTypes.exports.func,
      onDaySelect: propTypes.exports.func.isRequired,
      onFocus: propTypes.exports.func,
      onKeyDown: propTypes.exports.func,
      outsideCurrentMonth: propTypes.exports.bool.isRequired,
      selected: propTypes.exports.bool,
      showDaysOutsideCurrentMonth: propTypes.exports.bool,
      sx: propTypes.exports.oneOfType([propTypes.exports.arrayOf(propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.object, propTypes.exports.bool])), propTypes.exports.func, propTypes.exports.object]),
      today: propTypes.exports.bool
    };
    const PickersDay = /* @__PURE__ */ react.exports.memo(PickersDayRaw, areDayPropsEqual);
    const getPickersSlideTransitionUtilityClass = (slot) => generateUtilityClass("PrivatePickersSlideTransition", slot);
    const pickersSlideTransitionClasses = generateUtilityClasses(
      "PrivatePickersSlideTransition",
      ["root", "slideEnter-left", "slideEnter-right", "slideEnterActive", "slideExit", "slideExitActiveLeft-left", "slideExitActiveLeft-right"]
    );
    const _excluded$v = ["children", "className", "reduceAnimations", "slideDirection", "transKey"];
    const useUtilityClasses$b = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, getPickersSlideTransitionUtilityClass, classes);
    };
    const slideAnimationDuration = 350;
    const PickersSlideTransitionRoot = styled$1(TransitionGroup$1, {
      name: "PrivatePickersSlideTransition",
      slot: "Root",
      overridesResolver: (_2, styles2) => [styles2.root, {
        [`.${pickersSlideTransitionClasses["slideEnter-left"]}`]: styles2["slideEnter-left"]
      }, {
        [`.${pickersSlideTransitionClasses["slideEnter-right"]}`]: styles2["slideEnter-right"]
      }, {
        [`.${pickersSlideTransitionClasses.slideEnterActive}`]: styles2.slideEnterActive
      }, {
        [`.${pickersSlideTransitionClasses.slideExit}`]: styles2.slideExit
      }, {
        [`.${pickersSlideTransitionClasses["slideExitActiveLeft-left"]}`]: styles2["slideExitActiveLeft-left"]
      }, {
        [`.${pickersSlideTransitionClasses["slideExitActiveLeft-right"]}`]: styles2["slideExitActiveLeft-right"]
      }]
    })(({
      theme
    }) => {
      const slideTransition = theme.transitions.create("transform", {
        duration: slideAnimationDuration,
        easing: "cubic-bezier(0.35, 0.8, 0.4, 1)"
      });
      return {
        display: "block",
        position: "relative",
        overflowX: "hidden",
        "& > *": {
          position: "absolute",
          top: 0,
          right: 0,
          left: 0
        },
        [`& .${pickersSlideTransitionClasses["slideEnter-left"]}`]: {
          willChange: "transform",
          transform: "translate(100%)",
          zIndex: 1
        },
        [`& .${pickersSlideTransitionClasses["slideEnter-right"]}`]: {
          willChange: "transform",
          transform: "translate(-100%)",
          zIndex: 1
        },
        [`& .${pickersSlideTransitionClasses.slideEnterActive}`]: {
          transform: "translate(0%)",
          transition: slideTransition
        },
        [`& .${pickersSlideTransitionClasses.slideExit}`]: {
          transform: "translate(0%)"
        },
        [`& .${pickersSlideTransitionClasses["slideExitActiveLeft-left"]}`]: {
          willChange: "transform",
          transform: "translate(-100%)",
          transition: slideTransition,
          zIndex: 0
        },
        [`& .${pickersSlideTransitionClasses["slideExitActiveLeft-right"]}`]: {
          willChange: "transform",
          transform: "translate(100%)",
          transition: slideTransition,
          zIndex: 0
        }
      };
    });
    const PickersSlideTransition = (props) => {
      const {
        children,
        className,
        reduceAnimations,
        slideDirection,
        transKey
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$v);
      const classes = useUtilityClasses$b(props);
      if (reduceAnimations) {
        return /* @__PURE__ */ jsx("div", {
          className: clsx(classes.root, className),
          children
        });
      }
      const transitionClasses = {
        exit: pickersSlideTransitionClasses.slideExit,
        enterActive: pickersSlideTransitionClasses.slideEnterActive,
        enter: pickersSlideTransitionClasses[`slideEnter-${slideDirection}`],
        exitActive: pickersSlideTransitionClasses[`slideExitActiveLeft-${slideDirection}`]
      };
      return /* @__PURE__ */ jsx(PickersSlideTransitionRoot, {
        className: clsx(classes.root, className),
        childFactory: (element) => /* @__PURE__ */ react.exports.cloneElement(element, {
          classNames: transitionClasses
        }),
        role: "presentation",
        children: /* @__PURE__ */ jsx(CSSTransition$1, _extends$1({
          mountOnEnter: true,
          unmountOnExit: true,
          timeout: slideAnimationDuration,
          classNames: transitionClasses
        }, other, {
          children
        }), transKey)
      });
    };
    const getDayPickerUtilityClass = (slot) => generateUtilityClass("MuiDayPicker", slot);
    generateUtilityClasses("MuiDayPicker", ["header", "weekDayLabel", "loadingContainer", "slideTransition", "monthContainer", "weekContainer"]);
    const useUtilityClasses$a = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        header: ["header"],
        weekDayLabel: ["weekDayLabel"],
        loadingContainer: ["loadingContainer"],
        slideTransition: ["slideTransition"],
        monthContainer: ["monthContainer"],
        weekContainer: ["weekContainer"]
      };
      return composeClasses(slots, getDayPickerUtilityClass, classes);
    };
    const defaultDayOfWeekFormatter = (day) => day.charAt(0).toUpperCase();
    const weeksContainerHeight = (DAY_SIZE + DAY_MARGIN * 2) * 6;
    const PickersCalendarDayHeader = styled$1("div", {
      name: "MuiDayPicker",
      slot: "Header",
      overridesResolver: (_2, styles2) => styles2.header
    })({
      display: "flex",
      justifyContent: "center",
      alignItems: "center"
    });
    const PickersCalendarWeekDayLabel = styled$1(Typography$1, {
      name: "MuiDayPicker",
      slot: "WeekDayLabel",
      overridesResolver: (_2, styles2) => styles2.weekDayLabel
    })(({
      theme
    }) => ({
      width: 36,
      height: 40,
      margin: "0 2px",
      textAlign: "center",
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      color: theme.palette.text.secondary
    }));
    const PickersCalendarLoadingContainer = styled$1("div", {
      name: "MuiDayPicker",
      slot: "LoadingContainer",
      overridesResolver: (_2, styles2) => styles2.loadingContainer
    })({
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      minHeight: weeksContainerHeight
    });
    const PickersCalendarSlideTransition = styled$1(PickersSlideTransition, {
      name: "MuiDayPicker",
      slot: "SlideTransition",
      overridesResolver: (_2, styles2) => styles2.slideTransition
    })({
      minHeight: weeksContainerHeight
    });
    const PickersCalendarWeekContainer = styled$1("div", {
      name: "MuiDayPicker",
      slot: "MonthContainer",
      overridesResolver: (_2, styles2) => styles2.monthContainer
    })({
      overflow: "hidden"
    });
    const PickersCalendarWeek = styled$1("div", {
      name: "MuiDayPicker",
      slot: "WeekContainer",
      overridesResolver: (_2, styles2) => styles2.weekContainer
    })({
      margin: `${DAY_MARGIN}px 0`,
      display: "flex",
      justifyContent: "center"
    });
    function DayPicker(inProps) {
      const now2 = useNow();
      const utils2 = useUtils();
      const props = useThemeProps({
        props: inProps,
        name: "MuiDayPicker"
      });
      const classes = useUtilityClasses$a(props);
      const {
        onFocusedDayChange,
        className,
        currentMonth,
        selectedDays,
        disabled,
        disableHighlightToday,
        focusedDay,
        isMonthSwitchingAnimating,
        loading,
        onSelectedDaysChange,
        onMonthSwitchingAnimationEnd,
        readOnly,
        reduceAnimations,
        renderDay,
        renderLoading = () => /* @__PURE__ */ jsx("span", {
          children: "..."
        }),
        showDaysOutsideCurrentMonth,
        slideDirection,
        TransitionProps,
        disablePast,
        disableFuture,
        minDate,
        maxDate,
        shouldDisableDate,
        dayOfWeekFormatter = defaultDayOfWeekFormatter,
        hasFocus,
        onFocusedViewChange,
        gridLabelId
      } = props;
      const isDateDisabled = useIsDayDisabled({
        shouldDisableDate,
        minDate,
        maxDate,
        disablePast,
        disableFuture
      });
      const [internalFocusedDay, setInternalFocusedDay] = react.exports.useState(() => focusedDay || now2);
      const changeHasFocus = react.exports.useCallback((newHasFocus) => {
        if (onFocusedViewChange) {
          onFocusedViewChange(newHasFocus);
        }
      }, [onFocusedViewChange]);
      const handleDaySelect = react.exports.useCallback((day, isFinish = "finish") => {
        if (readOnly) {
          return;
        }
        onSelectedDaysChange(day, isFinish);
      }, [onSelectedDaysChange, readOnly]);
      const focusDay = react.exports.useCallback((day) => {
        if (!isDateDisabled(day)) {
          onFocusedDayChange(day);
          setInternalFocusedDay(day);
          changeHasFocus(true);
        }
      }, [isDateDisabled, onFocusedDayChange, changeHasFocus]);
      const theme = useTheme();
      function handleKeyDown2(event, day) {
        switch (event.key) {
          case "ArrowUp":
            focusDay(utils2.addDays(day, -7));
            event.preventDefault();
            break;
          case "ArrowDown":
            focusDay(utils2.addDays(day, 7));
            event.preventDefault();
            break;
          case "ArrowLeft": {
            const newFocusedDayDefault = utils2.addDays(day, theme.direction === "ltr" ? -1 : 1);
            const nextAvailableMonth = theme.direction === "ltr" ? utils2.getPreviousMonth(day) : utils2.getNextMonth(day);
            const closestDayToFocus = findClosestEnabledDate({
              utils: utils2,
              date: newFocusedDayDefault,
              minDate: theme.direction === "ltr" ? utils2.startOfMonth(nextAvailableMonth) : newFocusedDayDefault,
              maxDate: theme.direction === "ltr" ? newFocusedDayDefault : utils2.endOfMonth(nextAvailableMonth),
              isDateDisabled
            });
            focusDay(closestDayToFocus || newFocusedDayDefault);
            event.preventDefault();
            break;
          }
          case "ArrowRight": {
            const newFocusedDayDefault = utils2.addDays(day, theme.direction === "ltr" ? 1 : -1);
            const nextAvailableMonth = theme.direction === "ltr" ? utils2.getNextMonth(day) : utils2.getPreviousMonth(day);
            const closestDayToFocus = findClosestEnabledDate({
              utils: utils2,
              date: newFocusedDayDefault,
              minDate: theme.direction === "ltr" ? newFocusedDayDefault : utils2.startOfMonth(nextAvailableMonth),
              maxDate: theme.direction === "ltr" ? utils2.endOfMonth(nextAvailableMonth) : newFocusedDayDefault,
              isDateDisabled
            });
            focusDay(closestDayToFocus || newFocusedDayDefault);
            event.preventDefault();
            break;
          }
          case "Home":
            focusDay(utils2.startOfWeek(day));
            event.preventDefault();
            break;
          case "End":
            focusDay(utils2.endOfWeek(day));
            event.preventDefault();
            break;
          case "PageUp":
            focusDay(utils2.getNextMonth(day));
            event.preventDefault();
            break;
          case "PageDown":
            focusDay(utils2.getPreviousMonth(day));
            event.preventDefault();
            break;
        }
      }
      function handleFocus(event, day) {
        focusDay(day);
      }
      function handleBlur(event, day) {
        if (hasFocus && utils2.isSameDay(internalFocusedDay, day)) {
          changeHasFocus(false);
        }
      }
      const currentMonthNumber = utils2.getMonth(currentMonth);
      const validSelectedDays = selectedDays.filter((day) => !!day).map((day) => utils2.startOfDay(day));
      const transitionKey = currentMonthNumber;
      const slideNodeRef = react.exports.useMemo(() => /* @__PURE__ */ react.exports.createRef(), [transitionKey]);
      const startOfCurrentWeek = utils2.startOfWeek(now2);
      const focusableDay = react.exports.useMemo(() => {
        const startOfMonth = utils2.startOfMonth(currentMonth);
        const endOfMonth = utils2.endOfMonth(currentMonth);
        if (isDateDisabled(internalFocusedDay) || utils2.isAfterDay(internalFocusedDay, endOfMonth) || utils2.isBeforeDay(internalFocusedDay, startOfMonth)) {
          return findClosestEnabledDate({
            utils: utils2,
            date: internalFocusedDay,
            minDate: startOfMonth,
            maxDate: endOfMonth,
            disablePast,
            disableFuture,
            isDateDisabled
          });
        }
        return internalFocusedDay;
      }, [currentMonth, disableFuture, disablePast, internalFocusedDay, isDateDisabled, utils2]);
      return /* @__PURE__ */ jsxs("div", {
        role: "grid",
        "aria-labelledby": gridLabelId,
        children: [/* @__PURE__ */ jsx(PickersCalendarDayHeader, {
          role: "row",
          className: classes.header,
          children: utils2.getWeekdays().map((day, i) => {
            var _dayOfWeekFormatter;
            return /* @__PURE__ */ jsx(PickersCalendarWeekDayLabel, {
              variant: "caption",
              role: "columnheader",
              "aria-label": utils2.format(utils2.addDays(startOfCurrentWeek, i), "weekday"),
              className: classes.weekDayLabel,
              children: (_dayOfWeekFormatter = dayOfWeekFormatter == null ? void 0 : dayOfWeekFormatter(day)) != null ? _dayOfWeekFormatter : day
            }, day + i.toString());
          })
        }), loading ? /* @__PURE__ */ jsx(PickersCalendarLoadingContainer, {
          className: classes.loadingContainer,
          children: renderLoading()
        }) : /* @__PURE__ */ jsx(PickersCalendarSlideTransition, _extends$1({
          transKey: transitionKey,
          onExited: onMonthSwitchingAnimationEnd,
          reduceAnimations,
          slideDirection,
          className: clsx(className, classes.slideTransition)
        }, TransitionProps, {
          nodeRef: slideNodeRef,
          children: /* @__PURE__ */ jsx(PickersCalendarWeekContainer, {
            ref: slideNodeRef,
            role: "rowgroup",
            className: classes.monthContainer,
            children: utils2.getWeekArray(currentMonth).map((week) => /* @__PURE__ */ jsx(PickersCalendarWeek, {
              role: "row",
              className: classes.weekContainer,
              children: week.map((day) => {
                const isFocusableDay = focusableDay !== null && utils2.isSameDay(day, focusableDay);
                const isSelected = validSelectedDays.some((selectedDay) => utils2.isSameDay(selectedDay, day));
                const isToday = utils2.isSameDay(day, now2);
                const pickersDayProps = {
                  key: day == null ? void 0 : day.toString(),
                  day,
                  isAnimating: isMonthSwitchingAnimating,
                  disabled: disabled || isDateDisabled(day),
                  autoFocus: hasFocus && isFocusableDay,
                  today: isToday,
                  outsideCurrentMonth: utils2.getMonth(day) !== currentMonthNumber,
                  selected: isSelected,
                  disableHighlightToday,
                  showDaysOutsideCurrentMonth,
                  onKeyDown: handleKeyDown2,
                  onFocus: handleFocus,
                  onBlur: handleBlur,
                  onDaySelect: handleDaySelect,
                  tabIndex: isFocusableDay ? 0 : -1,
                  role: "gridcell",
                  "aria-selected": isSelected
                };
                if (isToday) {
                  pickersDayProps["aria-current"] = "date";
                }
                return renderDay ? renderDay(day, validSelectedDays, pickersDayProps) : /* @__PURE__ */ react.exports.createElement(PickersDay, _extends$1({}, pickersDayProps, {
                  key: pickersDayProps.key
                }));
              })
            }, `week-${week[0]}`))
          })
        }))]
      });
    }
    const getPickersCalendarHeaderUtilityClass = (slot) => generateUtilityClass("MuiPickersCalendarHeader", slot);
    generateUtilityClasses("MuiPickersCalendarHeader", ["root", "labelContainer", "label", "switchViewButton", "switchViewIcon"]);
    const useUtilityClasses$9 = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        labelContainer: ["labelContainer"],
        label: ["label"],
        switchViewButton: ["switchViewButton"],
        switchViewIcon: ["switchViewIcon"]
      };
      return composeClasses(slots, getPickersCalendarHeaderUtilityClass, classes);
    };
    const PickersCalendarHeaderRoot = styled$1("div", {
      name: "MuiPickersCalendarHeader",
      slot: "Root",
      overridesResolver: (_2, styles2) => styles2.root
    })({
      display: "flex",
      alignItems: "center",
      marginTop: 16,
      marginBottom: 8,
      paddingLeft: 24,
      paddingRight: 12,
      maxHeight: 30,
      minHeight: 30
    });
    const PickersCalendarHeaderLabelContainer = styled$1("div", {
      name: "MuiPickersCalendarHeader",
      slot: "LabelContainer",
      overridesResolver: (_2, styles2) => styles2.labelContainer
    })(({
      theme
    }) => _extends$1({
      display: "flex",
      maxHeight: 30,
      overflow: "hidden",
      alignItems: "center",
      cursor: "pointer",
      marginRight: "auto"
    }, theme.typography.body1, {
      fontWeight: theme.typography.fontWeightMedium
    }));
    const PickersCalendarHeaderLabel = styled$1("div", {
      name: "MuiPickersCalendarHeader",
      slot: "Label",
      overridesResolver: (_2, styles2) => styles2.label
    })({
      marginRight: 6
    });
    const PickersCalendarHeaderSwitchViewButton = styled$1(IconButton$1, {
      name: "MuiPickersCalendarHeader",
      slot: "SwitchViewButton",
      overridesResolver: (_2, styles2) => styles2.switchViewButton
    })({
      marginRight: "auto"
    });
    const PickersCalendarHeaderSwitchViewIcon = styled$1(ArrowDropDown, {
      name: "MuiPickersCalendarHeader",
      slot: "SwitchViewIcon",
      overridesResolver: (_2, styles2) => styles2.switchViewIcon
    })(({
      theme,
      ownerState
    }) => _extends$1({
      willChange: "transform",
      transition: theme.transitions.create("transform"),
      transform: "rotate(0deg)"
    }, ownerState.openView === "year" && {
      transform: "rotate(180deg)"
    }));
    const deprecatedPropsWarning = buildDeprecatedPropsWarning("Props for translation are deprecated. See https://mui.com/x/react-date-pickers/localization for more information.");
    function PickersCalendarHeader(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiPickersCalendarHeader"
      });
      const {
        components = {},
        componentsProps = {},
        currentMonth: month,
        disabled,
        disableFuture,
        disablePast,
        getViewSwitchingButtonText: getViewSwitchingButtonTextProp,
        leftArrowButtonText: leftArrowButtonTextProp,
        maxDate,
        minDate,
        onMonthChange,
        onViewChange,
        openView: currentView,
        reduceAnimations,
        rightArrowButtonText: rightArrowButtonTextProp,
        views,
        labelId
      } = props;
      deprecatedPropsWarning({
        leftArrowButtonText: leftArrowButtonTextProp,
        rightArrowButtonText: rightArrowButtonTextProp,
        getViewSwitchingButtonText: getViewSwitchingButtonTextProp
      });
      const localeText = useLocaleText();
      const leftArrowButtonText = leftArrowButtonTextProp != null ? leftArrowButtonTextProp : localeText.previousMonth;
      const rightArrowButtonText = rightArrowButtonTextProp != null ? rightArrowButtonTextProp : localeText.nextMonth;
      const getViewSwitchingButtonText = getViewSwitchingButtonTextProp != null ? getViewSwitchingButtonTextProp : localeText.calendarViewSwitchingButtonAriaLabel;
      const utils2 = useUtils();
      const classes = useUtilityClasses$9(props);
      const switchViewButtonProps = componentsProps.switchViewButton || {};
      const selectNextMonth = () => onMonthChange(utils2.getNextMonth(month), "left");
      const selectPreviousMonth = () => onMonthChange(utils2.getPreviousMonth(month), "right");
      const isNextMonthDisabled = useNextMonthDisabled(month, {
        disableFuture,
        maxDate
      });
      const isPreviousMonthDisabled = usePreviousMonthDisabled(month, {
        disablePast,
        minDate
      });
      const handleToggleView = () => {
        if (views.length === 1 || !onViewChange || disabled) {
          return;
        }
        if (views.length === 2) {
          onViewChange(views.find((view) => view !== currentView) || views[0]);
        } else {
          const nextIndexToOpen = views.indexOf(currentView) !== 0 ? 0 : 1;
          onViewChange(views[nextIndexToOpen]);
        }
      };
      if (views.length === 1 && views[0] === "year") {
        return null;
      }
      const ownerState = props;
      return /* @__PURE__ */ jsxs(PickersCalendarHeaderRoot, {
        ownerState,
        className: classes.root,
        children: [/* @__PURE__ */ jsxs(PickersCalendarHeaderLabelContainer, {
          role: "presentation",
          onClick: handleToggleView,
          ownerState,
          "aria-live": "polite",
          className: classes.labelContainer,
          children: [/* @__PURE__ */ jsx(PickersFadeTransitionGroup, {
            reduceAnimations,
            transKey: utils2.format(month, "monthAndYear"),
            children: /* @__PURE__ */ jsx(PickersCalendarHeaderLabel, {
              id: labelId,
              ownerState,
              className: classes.label,
              children: utils2.format(month, "monthAndYear")
            })
          }), views.length > 1 && !disabled && /* @__PURE__ */ jsx(PickersCalendarHeaderSwitchViewButton, _extends$1({
            size: "small",
            as: components.SwitchViewButton,
            "aria-label": getViewSwitchingButtonText(currentView),
            className: classes.switchViewButton
          }, switchViewButtonProps, {
            children: /* @__PURE__ */ jsx(PickersCalendarHeaderSwitchViewIcon, {
              as: components.SwitchViewIcon,
              ownerState,
              className: classes.switchViewIcon
            })
          }))]
        }), /* @__PURE__ */ jsx(Fade$1, {
          in: currentView === "day",
          children: /* @__PURE__ */ jsx(PickersArrowSwitcher, {
            leftArrowButtonText,
            rightArrowButtonText,
            components,
            componentsProps,
            onLeftClick: selectPreviousMonth,
            onRightClick: selectNextMonth,
            isLeftDisabled: isPreviousMonthDisabled,
            isRightDisabled: isNextMonthDisabled
          })
        })]
      });
    }
    function getPickersYearUtilityClass(slot) {
      return generateUtilityClass("PrivatePickersYear", slot);
    }
    const pickersYearClasses = generateUtilityClasses("PrivatePickersYear", ["root", "modeDesktop", "modeMobile", "yearButton", "selected", "disabled"]);
    const _excluded$u = ["autoFocus", "className", "children", "disabled", "onClick", "onKeyDown", "value", "tabIndex", "onFocus", "onBlur"];
    const useUtilityClasses$8 = (ownerState) => {
      const {
        wrapperVariant,
        disabled,
        selected,
        classes
      } = ownerState;
      const slots = {
        root: ["root", wrapperVariant && `mode${capitalize(wrapperVariant)}`],
        yearButton: ["yearButton", disabled && "disabled", selected && "selected"]
      };
      return composeClasses(slots, getPickersYearUtilityClass, classes);
    };
    const PickersYearRoot = styled$1("div", {
      name: "PrivatePickersYear",
      slot: "Root",
      overridesResolver: (_2, styles2) => [styles2.root, {
        [`&.${pickersYearClasses.modeDesktop}`]: styles2.modeDesktop
      }, {
        [`&.${pickersYearClasses.modeMobile}`]: styles2.modeMobile
      }]
    })(({
      ownerState
    }) => _extends$1({
      flexBasis: "33.3%",
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    }, (ownerState == null ? void 0 : ownerState.wrapperVariant) === "desktop" && {
      flexBasis: "25%"
    }));
    const PickersYearButton = styled$1("button", {
      name: "PrivatePickersYear",
      slot: "Button",
      overridesResolver: (_2, styles2) => [styles2.button, {
        [`&.${pickersYearClasses.disabled}`]: styles2.disabled
      }, {
        [`&.${pickersYearClasses.selected}`]: styles2.selected
      }]
    })(({
      theme
    }) => _extends$1({
      color: "unset",
      backgroundColor: "transparent",
      border: 0,
      outline: 0
    }, theme.typography.subtitle1, {
      margin: "8px 0",
      height: 36,
      width: 72,
      borderRadius: 18,
      cursor: "pointer",
      "&:focus, &:hover": {
        backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)
      },
      [`&.${pickersYearClasses.disabled}`]: {
        color: theme.palette.text.secondary
      },
      [`&.${pickersYearClasses.selected}`]: {
        color: theme.palette.primary.contrastText,
        backgroundColor: theme.palette.primary.main,
        "&:focus, &:hover": {
          backgroundColor: theme.palette.primary.dark
        }
      }
    }));
    const noop = () => {
    };
    const PickersYear = /* @__PURE__ */ react.exports.forwardRef(function PickersYear2(props, forwardedRef) {
      const {
        autoFocus,
        className,
        children,
        disabled,
        onClick,
        onKeyDown,
        value: value2,
        tabIndex,
        onFocus = noop,
        onBlur = noop
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$u);
      const ref = react.exports.useRef(null);
      const refHandle = useForkRef(ref, forwardedRef);
      const wrapperVariant = react.exports.useContext(WrapperVariantContext);
      const ownerState = _extends$1({}, props, {
        wrapperVariant
      });
      const classes = useUtilityClasses$8(ownerState);
      react.exports.useEffect(() => {
        if (autoFocus) {
          ref.current.focus();
        }
      }, [autoFocus]);
      return /* @__PURE__ */ jsx(PickersYearRoot, {
        className: clsx(classes.root, className),
        ownerState,
        children: /* @__PURE__ */ jsx(PickersYearButton, _extends$1({
          ref: refHandle,
          disabled,
          type: "button",
          tabIndex: disabled ? -1 : tabIndex,
          onClick: (event) => onClick(event, value2),
          onKeyDown: (event) => onKeyDown(event, value2),
          onFocus: (event) => onFocus(event, value2),
          onBlur: (event) => onBlur(event, value2),
          className: classes.yearButton,
          ownerState
        }, other, {
          children
        }))
      });
    });
    function getYearPickerUtilityClass(slot) {
      return generateUtilityClass("MuiYearPicker", slot);
    }
    generateUtilityClasses("MuiYearPicker", ["root"]);
    const useUtilityClasses$7 = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, getYearPickerUtilityClass, classes);
    };
    function useYearPickerDefaultizedProps(props, name) {
      const utils2 = useUtils();
      const defaultDates = useDefaultDates();
      const themeProps = useThemeProps({
        props,
        name
      });
      return _extends$1({
        disablePast: false,
        disableFuture: false
      }, themeProps, {
        minDate: parseNonNullablePickerDate(utils2, themeProps.minDate, defaultDates.minDate),
        maxDate: parseNonNullablePickerDate(utils2, themeProps.maxDate, defaultDates.maxDate)
      });
    }
    const YearPickerRoot = styled$1("div", {
      name: "MuiYearPicker",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({
      display: "flex",
      flexDirection: "row",
      flexWrap: "wrap",
      overflowY: "auto",
      height: "100%",
      padding: "0 4px",
      maxHeight: "304px"
    });
    const YearPicker = /* @__PURE__ */ react.exports.forwardRef(function YearPicker2(inProps, ref) {
      const now2 = useNow();
      const theme = useTheme();
      const utils2 = useUtils();
      const props = useYearPickerDefaultizedProps(inProps, "MuiYearPicker");
      const {
        autoFocus,
        className,
        date,
        disabled,
        disableFuture,
        disablePast,
        maxDate,
        minDate,
        onChange,
        readOnly,
        shouldDisableYear,
        disableHighlightToday,
        onYearFocus,
        hasFocus,
        onFocusedViewChange
      } = props;
      const ownerState = props;
      const classes = useUtilityClasses$7(ownerState);
      const selectedDateOrStartOfYear = react.exports.useMemo(() => date != null ? date : utils2.startOfYear(now2), [now2, utils2, date]);
      const currentYear = react.exports.useMemo(() => {
        if (date != null) {
          return utils2.getYear(date);
        }
        if (disableHighlightToday) {
          return null;
        }
        return utils2.getYear(now2);
      }, [now2, date, utils2, disableHighlightToday]);
      const wrapperVariant = react.exports.useContext(WrapperVariantContext);
      const selectedYearRef = react.exports.useRef(null);
      const [focusedYear, setFocusedYear] = react.exports.useState(() => currentYear || utils2.getYear(now2));
      const [internalHasFocus, setInternalHasFocus] = useControlled({
        name: "YearPicker",
        state: "hasFocus",
        controlled: hasFocus,
        default: autoFocus
      });
      const changeHasFocus = react.exports.useCallback((newHasFocus) => {
        setInternalHasFocus(newHasFocus);
        if (onFocusedViewChange) {
          onFocusedViewChange(newHasFocus);
        }
      }, [setInternalHasFocus, onFocusedViewChange]);
      const isYearDisabled = react.exports.useCallback((dateToValidate) => {
        if (disablePast && utils2.isBeforeYear(dateToValidate, now2)) {
          return true;
        }
        if (disableFuture && utils2.isAfterYear(dateToValidate, now2)) {
          return true;
        }
        if (minDate && utils2.isBeforeYear(dateToValidate, minDate)) {
          return true;
        }
        if (maxDate && utils2.isAfterYear(dateToValidate, maxDate)) {
          return true;
        }
        if (shouldDisableYear && shouldDisableYear(dateToValidate)) {
          return true;
        }
        return false;
      }, [disableFuture, disablePast, maxDate, minDate, now2, shouldDisableYear, utils2]);
      const handleYearSelection = (event, year, isFinish = "finish") => {
        if (readOnly) {
          return;
        }
        const newDate = utils2.setYear(selectedDateOrStartOfYear, year);
        onChange(newDate, isFinish);
      };
      const focusYear = react.exports.useCallback((year) => {
        if (!isYearDisabled(utils2.setYear(selectedDateOrStartOfYear, year))) {
          setFocusedYear(year);
          changeHasFocus(true);
          onYearFocus == null ? void 0 : onYearFocus(year);
        }
      }, [isYearDisabled, utils2, selectedDateOrStartOfYear, changeHasFocus, onYearFocus]);
      react.exports.useEffect(() => {
        setFocusedYear((prevFocusedYear) => currentYear !== null && prevFocusedYear !== currentYear ? currentYear : prevFocusedYear);
      }, [currentYear]);
      const yearsInRow = wrapperVariant === "desktop" ? 4 : 3;
      const handleKeyDown2 = react.exports.useCallback((event, year) => {
        switch (event.key) {
          case "ArrowUp":
            focusYear(year - yearsInRow);
            event.preventDefault();
            break;
          case "ArrowDown":
            focusYear(year + yearsInRow);
            event.preventDefault();
            break;
          case "ArrowLeft":
            focusYear(year + (theme.direction === "ltr" ? -1 : 1));
            event.preventDefault();
            break;
          case "ArrowRight":
            focusYear(year + (theme.direction === "ltr" ? 1 : -1));
            event.preventDefault();
            break;
        }
      }, [focusYear, theme.direction, yearsInRow]);
      const handleFocus = react.exports.useCallback((event, year) => {
        focusYear(year);
      }, [focusYear]);
      const handleBlur = react.exports.useCallback((event, year) => {
        if (focusedYear === year) {
          changeHasFocus(false);
        }
      }, [focusedYear, changeHasFocus]);
      const nowYear = utils2.getYear(now2);
      const scrollerRef = react.exports.useRef(null);
      const handleRef = useForkRef(ref, scrollerRef);
      react.exports.useEffect(() => {
        if (autoFocus || scrollerRef.current === null) {
          return;
        }
        const tabbableButton = scrollerRef.current.querySelector('[tabindex="0"]');
        if (!tabbableButton) {
          return;
        }
        const offsetHeight = tabbableButton.offsetHeight;
        const offsetTop = tabbableButton.offsetTop;
        const clientHeight = scrollerRef.current.clientHeight;
        const scrollTop = scrollerRef.current.scrollTop;
        const elementBottom = offsetTop + offsetHeight;
        if (offsetHeight > clientHeight || offsetTop < scrollTop) {
          return;
        }
        scrollerRef.current.scrollTop = elementBottom - clientHeight / 2 - offsetHeight / 2;
      }, [autoFocus]);
      return /* @__PURE__ */ jsx(YearPickerRoot, {
        ref: handleRef,
        className: clsx(classes.root, className),
        ownerState,
        children: utils2.getYearRange(minDate, maxDate).map((year) => {
          const yearNumber = utils2.getYear(year);
          const selected = yearNumber === currentYear;
          return /* @__PURE__ */ jsx(PickersYear, {
            selected,
            value: yearNumber,
            onClick: handleYearSelection,
            onKeyDown: handleKeyDown2,
            autoFocus: internalHasFocus && yearNumber === focusedYear,
            ref: selected ? selectedYearRef : void 0,
            disabled: disabled || isYearDisabled(year),
            tabIndex: yearNumber === focusedYear ? 0 : -1,
            onFocus: handleFocus,
            onBlur: handleBlur,
            "aria-current": nowYear === yearNumber ? "date" : void 0,
            children: utils2.format(year, "year")
          }, utils2.format(year, "year"));
        })
      });
    });
    YearPicker.propTypes = {
      autoFocus: propTypes.exports.bool,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      date: propTypes.exports.any,
      disabled: propTypes.exports.bool,
      disableFuture: propTypes.exports.bool,
      disableHighlightToday: propTypes.exports.bool,
      disablePast: propTypes.exports.bool,
      hasFocus: propTypes.exports.bool,
      maxDate: propTypes.exports.any,
      minDate: propTypes.exports.any,
      onChange: propTypes.exports.func.isRequired,
      onFocusedDayChange: propTypes.exports.func,
      onFocusedViewChange: propTypes.exports.func,
      onYearFocus: propTypes.exports.func,
      readOnly: propTypes.exports.bool,
      shouldDisableYear: propTypes.exports.func
    };
    const defaultReduceAnimations = typeof navigator !== "undefined" && /(android)/i.test(navigator.userAgent);
    const getCalendarPickerUtilityClass = (slot) => generateUtilityClass("MuiCalendarPicker", slot);
    generateUtilityClasses("MuiCalendarPicker", ["root", "viewTransitionContainer"]);
    const _excluded$t = ["autoFocus", "onViewChange", "date", "disableFuture", "disablePast", "defaultCalendarMonth", "onChange", "onYearChange", "onMonthChange", "reduceAnimations", "shouldDisableDate", "shouldDisableMonth", "shouldDisableYear", "view", "views", "openTo", "className", "disabled", "readOnly", "minDate", "maxDate", "disableHighlightToday", "focusedView", "onFocusedViewChange", "classes"];
    const useUtilityClasses$6 = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        viewTransitionContainer: ["viewTransitionContainer"]
      };
      return composeClasses(slots, getCalendarPickerUtilityClass, classes);
    };
    function useCalendarPickerDefaultizedProps(props, name) {
      const utils2 = useUtils();
      const defaultDates = useDefaultDates();
      const themeProps = useThemeProps({
        props,
        name
      });
      return _extends$1({
        loading: false,
        disablePast: false,
        disableFuture: false,
        openTo: "day",
        views: ["year", "day"],
        reduceAnimations: defaultReduceAnimations,
        renderLoading: () => /* @__PURE__ */ jsx("span", {
          children: "..."
        })
      }, themeProps, {
        minDate: parseNonNullablePickerDate(utils2, themeProps.minDate, defaultDates.minDate),
        maxDate: parseNonNullablePickerDate(utils2, themeProps.maxDate, defaultDates.maxDate)
      });
    }
    const CalendarPickerRoot = styled$1(PickerViewRoot, {
      name: "MuiCalendarPicker",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({
      display: "flex",
      flexDirection: "column"
    });
    const CalendarPickerViewTransitionContainer = styled$1(PickersFadeTransitionGroup, {
      name: "MuiCalendarPicker",
      slot: "ViewTransitionContainer",
      overridesResolver: (props, styles2) => styles2.viewTransitionContainer
    })({});
    const CalendarPicker = /* @__PURE__ */ react.exports.forwardRef(function CalendarPicker2(inProps, ref) {
      const utils2 = useUtils();
      const id = useId();
      const props = useCalendarPickerDefaultizedProps(inProps, "MuiCalendarPicker");
      const {
        autoFocus,
        onViewChange,
        date,
        disableFuture,
        disablePast,
        defaultCalendarMonth,
        onChange,
        onYearChange,
        onMonthChange,
        reduceAnimations,
        shouldDisableDate,
        shouldDisableMonth,
        shouldDisableYear,
        view,
        views,
        openTo,
        className,
        disabled,
        readOnly,
        minDate,
        maxDate,
        disableHighlightToday,
        focusedView,
        onFocusedViewChange
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$t);
      const {
        openView,
        setOpenView,
        openNext
      } = useViews({
        view,
        views,
        openTo,
        onChange,
        onViewChange
      });
      const {
        calendarState,
        changeFocusedDay,
        changeMonth,
        handleChangeMonth,
        isDateDisabled,
        onMonthSwitchingAnimationEnd
      } = useCalendarState({
        date,
        defaultCalendarMonth,
        reduceAnimations,
        onMonthChange,
        minDate,
        maxDate,
        shouldDisableDate,
        disablePast,
        disableFuture
      });
      const handleDateMonthChange = react.exports.useCallback((newDate, selectionState) => {
        const startOfMonth = utils2.startOfMonth(newDate);
        const endOfMonth = utils2.endOfMonth(newDate);
        const closestEnabledDate = isDateDisabled(newDate) ? findClosestEnabledDate({
          utils: utils2,
          date: newDate,
          minDate: utils2.isBefore(minDate, startOfMonth) ? startOfMonth : minDate,
          maxDate: utils2.isAfter(maxDate, endOfMonth) ? endOfMonth : maxDate,
          disablePast,
          disableFuture,
          isDateDisabled
        }) : newDate;
        if (closestEnabledDate) {
          onChange(closestEnabledDate, selectionState);
          onMonthChange == null ? void 0 : onMonthChange(startOfMonth);
        } else {
          openNext();
          changeMonth(startOfMonth);
        }
        changeFocusedDay(closestEnabledDate, true);
      }, [changeFocusedDay, disableFuture, disablePast, isDateDisabled, maxDate, minDate, onChange, onMonthChange, changeMonth, openNext, utils2]);
      const handleDateYearChange = react.exports.useCallback((newDate, selectionState) => {
        const startOfYear = utils2.startOfYear(newDate);
        const endOfYear = utils2.endOfYear(newDate);
        const closestEnabledDate = isDateDisabled(newDate) ? findClosestEnabledDate({
          utils: utils2,
          date: newDate,
          minDate: utils2.isBefore(minDate, startOfYear) ? startOfYear : minDate,
          maxDate: utils2.isAfter(maxDate, endOfYear) ? endOfYear : maxDate,
          disablePast,
          disableFuture,
          isDateDisabled
        }) : newDate;
        if (closestEnabledDate) {
          onChange(closestEnabledDate, selectionState);
          onYearChange == null ? void 0 : onYearChange(closestEnabledDate);
        } else {
          openNext();
          changeMonth(startOfYear);
        }
        changeFocusedDay(closestEnabledDate, true);
      }, [changeFocusedDay, disableFuture, disablePast, isDateDisabled, maxDate, minDate, onChange, onYearChange, openNext, utils2, changeMonth]);
      const onSelectedDayChange = react.exports.useCallback((day, isFinish) => {
        if (date && day) {
          return onChange(utils2.mergeDateAndTime(day, date), isFinish);
        }
        return onChange(day, isFinish);
      }, [utils2, date, onChange]);
      react.exports.useEffect(() => {
        if (date) {
          changeMonth(date);
        }
      }, [date]);
      const ownerState = props;
      const classes = useUtilityClasses$6(ownerState);
      const baseDateValidationProps = {
        disablePast,
        disableFuture,
        maxDate,
        minDate
      };
      const minDateWithDisabled = disabled && date || minDate;
      const maxDateWithDisabled = disabled && date || maxDate;
      const commonViewProps = {
        disableHighlightToday,
        readOnly,
        disabled
      };
      const gridLabelId = `${id}-grid-label`;
      const [internalFocusedView, setInternalFocusedView] = useControlled({
        name: "DayPicker",
        state: "focusedView",
        controlled: focusedView,
        default: autoFocus ? openView : null
      });
      const hasFocus = internalFocusedView !== null;
      const handleFocusedViewChange = useEventCallback((eventView) => (newHasFocus) => {
        if (onFocusedViewChange) {
          onFocusedViewChange(eventView)(newHasFocus);
          return;
        }
        if (newHasFocus) {
          setInternalFocusedView(eventView);
        } else {
          setInternalFocusedView((prevView) => prevView === eventView ? null : prevView);
        }
      });
      const prevOpenViewRef = react.exports.useRef(openView);
      react.exports.useEffect(() => {
        if (prevOpenViewRef.current === openView) {
          return;
        }
        prevOpenViewRef.current = openView;
        handleFocusedViewChange(openView)(true);
      }, [openView, handleFocusedViewChange]);
      return /* @__PURE__ */ jsxs(CalendarPickerRoot, {
        ref,
        className: clsx(classes.root, className),
        ownerState,
        children: [/* @__PURE__ */ jsx(PickersCalendarHeader, _extends$1({}, other, {
          views,
          openView,
          currentMonth: calendarState.currentMonth,
          onViewChange: setOpenView,
          onMonthChange: (newMonth, direction) => handleChangeMonth({
            newMonth,
            direction
          }),
          minDate: minDateWithDisabled,
          maxDate: maxDateWithDisabled,
          disabled,
          disablePast,
          disableFuture,
          reduceAnimations,
          labelId: gridLabelId
        })), /* @__PURE__ */ jsx(CalendarPickerViewTransitionContainer, {
          reduceAnimations,
          className: classes.viewTransitionContainer,
          transKey: openView,
          ownerState,
          children: /* @__PURE__ */ jsxs("div", {
            children: [openView === "year" && /* @__PURE__ */ jsx(YearPicker, _extends$1({}, other, baseDateValidationProps, commonViewProps, {
              autoFocus,
              date,
              onChange: handleDateYearChange,
              shouldDisableYear,
              hasFocus,
              onFocusedViewChange: handleFocusedViewChange("year")
            })), openView === "month" && /* @__PURE__ */ jsx(MonthPicker, _extends$1({}, baseDateValidationProps, commonViewProps, {
              autoFocus,
              hasFocus,
              className,
              date,
              onChange: handleDateMonthChange,
              shouldDisableMonth,
              onFocusedViewChange: handleFocusedViewChange("month")
            })), openView === "day" && /* @__PURE__ */ jsx(DayPicker, _extends$1({}, other, calendarState, baseDateValidationProps, commonViewProps, {
              autoFocus,
              onMonthSwitchingAnimationEnd,
              onFocusedDayChange: changeFocusedDay,
              reduceAnimations,
              selectedDays: [date],
              onSelectedDaysChange: onSelectedDayChange,
              shouldDisableDate,
              hasFocus,
              onFocusedViewChange: handleFocusedViewChange("day"),
              gridLabelId
            }))]
          })
        })]
      });
    });
    CalendarPicker.propTypes = {
      autoFocus: propTypes.exports.bool,
      classes: propTypes.exports.object,
      className: propTypes.exports.string,
      components: propTypes.exports.object,
      componentsProps: propTypes.exports.object,
      date: propTypes.exports.any,
      dayOfWeekFormatter: propTypes.exports.func,
      defaultCalendarMonth: propTypes.exports.any,
      disabled: propTypes.exports.bool,
      disableFuture: propTypes.exports.bool,
      disableHighlightToday: propTypes.exports.bool,
      disablePast: propTypes.exports.bool,
      focusedView: propTypes.exports.oneOf(["day", "month", "year"]),
      getViewSwitchingButtonText: propTypes.exports.func,
      leftArrowButtonText: propTypes.exports.string,
      loading: propTypes.exports.bool,
      maxDate: propTypes.exports.any,
      minDate: propTypes.exports.any,
      onChange: propTypes.exports.func.isRequired,
      onFocusedViewChange: propTypes.exports.func,
      onMonthChange: propTypes.exports.func,
      onViewChange: propTypes.exports.func,
      onYearChange: propTypes.exports.func,
      openTo: propTypes.exports.oneOf(["day", "month", "year"]),
      readOnly: propTypes.exports.bool,
      reduceAnimations: propTypes.exports.bool,
      renderDay: propTypes.exports.func,
      renderLoading: propTypes.exports.func,
      rightArrowButtonText: propTypes.exports.string,
      shouldDisableDate: propTypes.exports.func,
      shouldDisableMonth: propTypes.exports.func,
      shouldDisableYear: propTypes.exports.func,
      showDaysOutsideCurrentMonth: propTypes.exports.bool,
      view: propTypes.exports.oneOf(["day", "month", "year"]),
      views: propTypes.exports.arrayOf(propTypes.exports.oneOf(["day", "month", "year"]).isRequired)
    };
    const useRifm = (props) => {
      const [, refresh] = react.exports.useReducer((c) => c + 1, 0);
      const valueRef = react.exports.useRef(null);
      const {
        replace: replace2,
        append: append2
      } = props;
      const userValue = replace2 ? replace2(props.format(props.value)) : props.format(props.value);
      const isDeleleteButtonDownRef = react.exports.useRef(false);
      const onChange = (evt) => {
        {
          if (evt.target.type === "number") {
            console.error("Rifm does not support input type=number, use type=tel instead.");
            return;
          }
          if (evt.target.type === "date") {
            console.error("Rifm does not support input type=date.");
            return;
          }
        }
        const eventValue = evt.target.value;
        valueRef.current = [
          eventValue,
          evt.target,
          eventValue.length > userValue.length,
          isDeleleteButtonDownRef.current,
          userValue === props.format(eventValue)
        ];
        {
          const formattedEventValue = props.format(eventValue);
          if (eventValue !== formattedEventValue && eventValue.toLowerCase() === formattedEventValue.toLowerCase()) {
            console.warn("Case enforcement does not work with format. Please use replace={value => value.toLowerCase()} instead");
          }
        }
        refresh();
      };
      if (typeof window !== "undefined") {
        react.exports.useLayoutEffect(() => {
          if (valueRef.current == null)
            return;
          let [
            eventValue,
            input,
            isSizeIncreaseOperation,
            isDeleleteButtonDown,
            isNoOperation
          ] = valueRef.current;
          valueRef.current = null;
          const deleteWasNoOp = isDeleleteButtonDown && isNoOperation;
          const valueAfterSelectionStart = eventValue.slice(input.selectionStart);
          const acceptedCharIndexAfterDelete = valueAfterSelectionStart.search(props.accept || /\d/g);
          const charsToSkipAfterDelete = acceptedCharIndexAfterDelete !== -1 ? acceptedCharIndexAfterDelete : 0;
          const clean = (str) => (str.match(props.accept || /\d/g) || []).join("");
          const valueBeforeSelectionStart = clean(eventValue.substr(0, input.selectionStart));
          const getCursorPosition = (val) => {
            let start2 = 0;
            let cleanPos = 0;
            for (let i = 0; i !== valueBeforeSelectionStart.length; ++i) {
              let newPos = val.indexOf(valueBeforeSelectionStart[i], start2) + 1;
              let newCleanPos = clean(val).indexOf(valueBeforeSelectionStart[i], cleanPos) + 1;
              if (newCleanPos - cleanPos > 1) {
                newPos = start2;
                newCleanPos = cleanPos;
              }
              cleanPos = Math.max(newCleanPos, cleanPos);
              start2 = Math.max(start2, newPos);
            }
            return start2;
          };
          if (props.mask === true && isSizeIncreaseOperation && !isNoOperation) {
            let start2 = getCursorPosition(eventValue);
            const c = clean(eventValue.substr(start2))[0];
            start2 = eventValue.indexOf(c, start2);
            eventValue = `${eventValue.substr(0, start2)}${eventValue.substr(start2 + 1)}`;
          }
          let formattedValue = props.format(eventValue);
          if (append2 != null && input.selectionStart === eventValue.length && !isNoOperation) {
            if (isSizeIncreaseOperation) {
              formattedValue = append2(formattedValue);
            } else {
              if (clean(formattedValue.slice(-1)) === "") {
                formattedValue = formattedValue.slice(0, -1);
              }
            }
          }
          const replacedValue = replace2 ? replace2(formattedValue) : formattedValue;
          if (userValue === replacedValue) {
            refresh();
          } else {
            props.onChange(replacedValue);
          }
          return () => {
            let start2 = getCursorPosition(formattedValue);
            if (props.mask != null && (isSizeIncreaseOperation || isDeleleteButtonDown && !deleteWasNoOp)) {
              while (formattedValue[start2] && clean(formattedValue[start2]) === "") {
                start2 += 1;
              }
            }
            input.selectionStart = input.selectionEnd = start2 + (deleteWasNoOp ? 1 + charsToSkipAfterDelete : 0);
          };
        });
      }
      react.exports.useEffect(() => {
        const handleKeyDown2 = (evt) => {
          if (evt.code === "Delete") {
            isDeleleteButtonDownRef.current = true;
          }
        };
        const handleKeyUp = (evt) => {
          if (evt.code === "Delete") {
            isDeleleteButtonDownRef.current = false;
          }
        };
        document.addEventListener("keydown", handleKeyDown2);
        document.addEventListener("keyup", handleKeyUp);
        return () => {
          document.removeEventListener("keydown", handleKeyDown2);
          document.removeEventListener("keyup", handleKeyUp);
        };
      }, []);
      return {
        value: valueRef.current != null ? valueRef.current[0] : userValue,
        onChange
      };
    };
    const getDisplayDate = (utils2, rawValue, inputFormat) => {
      const date = utils2.date(rawValue);
      const isEmpty2 = rawValue === null;
      if (isEmpty2) {
        return "";
      }
      return utils2.isValid(date) ? utils2.formatByString(
        date,
        inputFormat
      ) : "";
    };
    const MASK_USER_INPUT_SYMBOL = "_";
    const staticDateWith2DigitTokens = "2019-11-21T22:30:00.000";
    const staticDateWith1DigitTokens = "2019-01-01T09:00:00.000";
    function getMaskFromCurrentFormat(mask, format2, acceptRegex, utils2) {
      if (mask) {
        return mask;
      }
      const formattedDateWith1Digit = utils2.formatByString(utils2.date(staticDateWith1DigitTokens), format2);
      const inferredFormatPatternWith1Digits = formattedDateWith1Digit.replace(acceptRegex, MASK_USER_INPUT_SYMBOL);
      const inferredFormatPatternWith2Digits = utils2.formatByString(utils2.date(staticDateWith2DigitTokens), format2).replace(acceptRegex, "_");
      if (inferredFormatPatternWith1Digits === inferredFormatPatternWith2Digits) {
        return inferredFormatPatternWith1Digits;
      }
      {
        console.warn([`Mask does not support numbers with variable length such as 'M'.`, `Either use numbers with fix length or disable mask feature with 'disableMaskedInput' prop`, `Falling down to uncontrolled no-mask input.`].join("\n"));
      }
      return "";
    }
    function checkMaskIsValidForCurrentFormat(mask, format2, acceptRegex, utils2) {
      if (!mask) {
        return false;
      }
      const formattedDateWith1Digit = utils2.formatByString(utils2.date(staticDateWith1DigitTokens), format2);
      const inferredFormatPatternWith1Digits = formattedDateWith1Digit.replace(acceptRegex, MASK_USER_INPUT_SYMBOL);
      const inferredFormatPatternWith2Digits = utils2.formatByString(utils2.date(staticDateWith2DigitTokens), format2).replace(acceptRegex, "_");
      const isMaskValid = inferredFormatPatternWith2Digits === inferredFormatPatternWith1Digits && mask === inferredFormatPatternWith2Digits;
      if (!isMaskValid && utils2.lib !== "luxon" && true) {
        if (format2.includes("MMM")) {
          console.warn([`Mask does not support literals such as 'MMM'.`, `Either use numbers with fix length or disable mask feature with 'disableMaskedInput' prop`, `Falling down to uncontrolled no-mask input.`].join("\n"));
        } else if (inferredFormatPatternWith2Digits && inferredFormatPatternWith2Digits !== inferredFormatPatternWith1Digits) {
          console.warn([`Mask does not support numbers with variable length such as 'M'.`, `Either use numbers with fix length or disable mask feature with 'disableMaskedInput' prop`, `Falling down to uncontrolled no-mask input.`].join("\n"));
        } else if (mask) {
          console.warn([`The mask "${mask}" you passed is not valid for the format used ${format2}.`, `Falling down to uncontrolled no-mask input.`].join("\n"));
        }
      }
      return isMaskValid;
    }
    const maskedDateFormatter = (mask, acceptRegexp) => (value2) => {
      let outputCharIndex = 0;
      return value2.split("").map((char2, inputCharIndex) => {
        acceptRegexp.lastIndex = 0;
        if (outputCharIndex > mask.length - 1) {
          return "";
        }
        const maskChar = mask[outputCharIndex];
        const nextMaskChar = mask[outputCharIndex + 1];
        const acceptedChar = acceptRegexp.test(char2) ? char2 : "";
        const formattedChar = maskChar === MASK_USER_INPUT_SYMBOL ? acceptedChar : maskChar + acceptedChar;
        outputCharIndex += formattedChar.length;
        const isLastCharacter = inputCharIndex === value2.length - 1;
        if (isLastCharacter && nextMaskChar && nextMaskChar !== MASK_USER_INPUT_SYMBOL) {
          return formattedChar ? formattedChar + nextMaskChar : "";
        }
        return formattedChar;
      }).join("");
    };
    const useMaskedInput = ({
      acceptRegex = /[\d]/gi,
      disabled,
      disableMaskedInput,
      ignoreInvalidInputs,
      inputFormat,
      inputProps,
      label,
      mask,
      onChange,
      rawValue,
      readOnly,
      rifmFormatter,
      TextFieldProps,
      validationError
    }) => {
      const utils2 = useUtils();
      const formatHelperText = utils2.getFormatHelperText(inputFormat);
      const {
        shouldUseMaskedInput,
        maskToUse
      } = react.exports.useMemo(() => {
        if (disableMaskedInput) {
          return {
            shouldUseMaskedInput: false,
            maskToUse: ""
          };
        }
        const computedMaskToUse = getMaskFromCurrentFormat(mask, inputFormat, acceptRegex, utils2);
        return {
          shouldUseMaskedInput: checkMaskIsValidForCurrentFormat(computedMaskToUse, inputFormat, acceptRegex, utils2),
          maskToUse: computedMaskToUse
        };
      }, [acceptRegex, disableMaskedInput, inputFormat, mask, utils2]);
      const formatter = react.exports.useMemo(() => shouldUseMaskedInput && maskToUse ? maskedDateFormatter(maskToUse, acceptRegex) : (st) => st, [acceptRegex, maskToUse, shouldUseMaskedInput]);
      const parsedValue = rawValue === null ? null : utils2.date(rawValue);
      const [innerInputValue, setInnerInputValue] = react.exports.useState(parsedValue);
      const [innerDisplayedInputValue, setInnerDisplayedInputValue] = react.exports.useState(getDisplayDate(utils2, rawValue, inputFormat));
      const prevRawValue = react.exports.useRef();
      const prevLocale = react.exports.useRef(utils2.locale);
      const prevInputFormat = react.exports.useRef(inputFormat);
      react.exports.useEffect(() => {
        const rawValueHasChanged = rawValue !== prevRawValue.current;
        const localeHasChanged = utils2.locale !== prevLocale.current;
        const inputFormatHasChanged = inputFormat !== prevInputFormat.current;
        prevRawValue.current = rawValue;
        prevLocale.current = utils2.locale;
        prevInputFormat.current = inputFormat;
        if (!rawValueHasChanged && !localeHasChanged && !inputFormatHasChanged) {
          return;
        }
        const newParsedValue = rawValue === null ? null : utils2.date(rawValue);
        const isAcceptedValue = rawValue === null || utils2.isValid(newParsedValue);
        let innerEqualsParsed = innerInputValue === null && newParsedValue === null;
        if (innerInputValue !== null && newParsedValue !== null) {
          const areEqual = utils2.isEqual(innerInputValue, newParsedValue);
          if (areEqual) {
            innerEqualsParsed = true;
          } else {
            const diff2 = Math.abs(utils2.getDiff(innerInputValue, newParsedValue));
            innerEqualsParsed = diff2 === 0 ? areEqual : diff2 < 1e3;
          }
        }
        if (!localeHasChanged && !inputFormatHasChanged && (!isAcceptedValue || innerEqualsParsed)) {
          return;
        }
        const newDisplayDate = getDisplayDate(utils2, rawValue, inputFormat);
        setInnerInputValue(newParsedValue);
        setInnerDisplayedInputValue(newDisplayDate);
      }, [utils2, rawValue, inputFormat, innerInputValue]);
      const handleChange = (text) => {
        const finalString = text === "" || text === mask ? "" : text;
        setInnerDisplayedInputValue(finalString);
        const date = finalString === null ? null : utils2.parse(finalString, inputFormat);
        if (ignoreInvalidInputs && !utils2.isValid(date)) {
          return;
        }
        setInnerInputValue(date);
        onChange(date, finalString || void 0);
      };
      const rifmProps = useRifm({
        value: innerDisplayedInputValue,
        onChange: handleChange,
        format: rifmFormatter || formatter
      });
      const inputStateArgs = shouldUseMaskedInput ? rifmProps : {
        value: innerDisplayedInputValue,
        onChange: (event) => {
          handleChange(event.currentTarget.value);
        }
      };
      return _extends$1({
        label,
        disabled,
        error: validationError,
        inputProps: _extends$1({}, inputStateArgs, {
          disabled,
          placeholder: formatHelperText,
          readOnly,
          type: shouldUseMaskedInput ? "tel" : "text"
        }, inputProps)
      }, TextFieldProps);
    };
    const _excluded$s = ["className", "components", "disableOpenPicker", "getOpenDialogAriaText", "InputAdornmentProps", "InputProps", "inputRef", "openPicker", "OpenPickerButtonProps", "renderInput"];
    const KeyboardDateInput = /* @__PURE__ */ react.exports.forwardRef(function KeyboardDateInput2(props, ref) {
      const {
        className,
        components = {},
        disableOpenPicker,
        getOpenDialogAriaText: getOpenDialogAriaTextProp,
        InputAdornmentProps,
        InputProps,
        inputRef,
        openPicker,
        OpenPickerButtonProps,
        renderInput
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$s);
      const localeText = useLocaleText();
      const getOpenDialogAriaText = getOpenDialogAriaTextProp != null ? getOpenDialogAriaTextProp : localeText.openDatePickerDialogue;
      const utils2 = useUtils();
      const textFieldProps = useMaskedInput(other);
      const adornmentPosition = (InputAdornmentProps == null ? void 0 : InputAdornmentProps.position) || "end";
      const OpenPickerIcon = components.OpenPickerIcon || Calendar;
      return renderInput(_extends$1({
        ref,
        inputRef,
        className
      }, textFieldProps, {
        InputProps: _extends$1({}, InputProps, {
          [`${adornmentPosition}Adornment`]: disableOpenPicker ? void 0 : /* @__PURE__ */ jsx(InputAdornment$1, _extends$1({
            position: adornmentPosition
          }, InputAdornmentProps, {
            children: /* @__PURE__ */ jsx(IconButton$1, _extends$1({
              edge: adornmentPosition,
              disabled: other.disabled || other.readOnly,
              "aria-label": getOpenDialogAriaText(other.rawValue, utils2)
            }, OpenPickerButtonProps, {
              onClick: openPicker,
              children: /* @__PURE__ */ jsx(OpenPickerIcon, {})
            }))
          }))
        })
      }));
    });
    function getOrientation() {
      if (typeof window === "undefined") {
        return "portrait";
      }
      if (window.screen && window.screen.orientation && window.screen.orientation.angle) {
        return Math.abs(window.screen.orientation.angle) === 90 ? "landscape" : "portrait";
      }
      if (window.orientation) {
        return Math.abs(Number(window.orientation)) === 90 ? "landscape" : "portrait";
      }
      return "portrait";
    }
    const useIsLandscape = (views, customOrientation) => {
      const [orientation, setOrientation] = react.exports.useState(getOrientation);
      useEnhancedEffect$1(() => {
        const eventHandler = () => {
          setOrientation(getOrientation());
        };
        window.addEventListener("orientationchange", eventHandler);
        return () => {
          window.removeEventListener("orientationchange", eventHandler);
        };
      }, []);
      if (arrayIncludes(views, ["hours", "minutes", "seconds"])) {
        return false;
      }
      const orientationToUse = customOrientation || orientation;
      return orientationToUse === "landscape";
    };
    const useFocusManagement = ({
      autoFocus,
      openView
    }) => {
      const [focusedView, setFocusedView] = react.exports.useState(autoFocus ? openView : null);
      const setFocusedViewCallback = react.exports.useCallback((view) => (newHasFocus) => {
        if (newHasFocus) {
          setFocusedView(view);
        } else {
          setFocusedView((prevFocusedView) => view === prevFocusedView ? null : prevFocusedView);
        }
      }, []);
      return {
        focusedView,
        setFocusedView: setFocusedViewCallback
      };
    };
    function getCalendarOrClockPickerUtilityClass(slot) {
      return generateUtilityClass("MuiCalendarOrClockPicker", slot);
    }
    generateUtilityClasses("MuiCalendarOrClockPicker", ["root", "mobileKeyboardInputView"]);
    const _excluded$r = ["autoFocus", "className", "parsedValue", "DateInputProps", "isMobileKeyboardViewOpen", "onDateChange", "onViewChange", "openTo", "orientation", "showToolbar", "toggleMobileKeyboardView", "ToolbarComponent", "toolbarFormat", "toolbarPlaceholder", "toolbarTitle", "views", "dateRangeIcon", "timeIcon", "hideTabs", "classes"];
    const useUtilityClasses$5 = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        mobileKeyboardInputView: ["mobileKeyboardInputView"]
      };
      return composeClasses(slots, getCalendarOrClockPickerUtilityClass, classes);
    };
    const MobileKeyboardInputView = styled$1("div", {
      name: "MuiCalendarOrClockPicker",
      slot: "MobileKeyboardInputView",
      overridesResolver: (_2, styles2) => styles2.mobileKeyboardInputView
    })({
      padding: "16px 24px"
    });
    const PickerRoot = styled$1("div", {
      name: "MuiCalendarOrClockPicker",
      slot: "Root",
      overridesResolver: (_2, styles2) => styles2.root
    })(({
      ownerState
    }) => _extends$1({
      display: "flex",
      flexDirection: "column"
    }, ownerState.isLandscape && {
      flexDirection: "row"
    }));
    const MobileKeyboardTextFieldProps = {
      fullWidth: true
    };
    const isDatePickerView = (view) => view === "year" || view === "month" || view === "day";
    const isTimePickerView = (view) => view === "hours" || view === "minutes" || view === "seconds";
    let warnedOnceNotValidOpenTo = false;
    function CalendarOrClockPicker(inProps) {
      var _other$components, _other$componentsProp;
      const props = useThemeProps({
        props: inProps,
        name: "MuiCalendarOrClockPicker"
      });
      const {
        autoFocus,
        parsedValue,
        DateInputProps,
        isMobileKeyboardViewOpen,
        onDateChange,
        onViewChange,
        openTo,
        orientation,
        showToolbar,
        toggleMobileKeyboardView,
        ToolbarComponent = () => null,
        toolbarFormat,
        toolbarPlaceholder,
        toolbarTitle,
        views,
        dateRangeIcon,
        timeIcon,
        hideTabs
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$r);
      const TabsComponent = (_other$components = other.components) == null ? void 0 : _other$components.Tabs;
      const isLandscape = useIsLandscape(views, orientation);
      const wrapperVariant = react.exports.useContext(WrapperVariantContext);
      const classes = useUtilityClasses$5(props);
      const toShowToolbar = showToolbar != null ? showToolbar : wrapperVariant !== "desktop";
      const showTabs = !hideTabs && typeof window !== "undefined" && window.innerHeight > 667;
      const handleDateChange = react.exports.useCallback((newDate, selectionState) => {
        onDateChange(newDate, wrapperVariant, selectionState);
      }, [onDateChange, wrapperVariant]);
      const handleViewChange = react.exports.useCallback((newView) => {
        if (isMobileKeyboardViewOpen) {
          toggleMobileKeyboardView();
        }
        if (onViewChange) {
          onViewChange(newView);
        }
      }, [isMobileKeyboardViewOpen, onViewChange, toggleMobileKeyboardView]);
      {
        if (!warnedOnceNotValidOpenTo && !views.includes(openTo)) {
          console.warn(`MUI: \`openTo="${openTo}"\` is not a valid prop.`, `It must be an element of \`views=["${views.join('", "')}"]\`.`);
          warnedOnceNotValidOpenTo = true;
        }
      }
      const {
        openView,
        setOpenView,
        handleChangeAndOpenNext
      } = useViews({
        view: void 0,
        views,
        openTo,
        onChange: handleDateChange,
        onViewChange: handleViewChange
      });
      const {
        focusedView,
        setFocusedView
      } = useFocusManagement({
        autoFocus,
        openView
      });
      return /* @__PURE__ */ jsxs(PickerRoot, {
        ownerState: {
          isLandscape
        },
        className: classes.root,
        children: [toShowToolbar && /* @__PURE__ */ jsx(ToolbarComponent, _extends$1({}, other, {
          views,
          isLandscape,
          parsedValue,
          onChange: handleDateChange,
          setOpenView,
          openView,
          toolbarTitle,
          toolbarFormat,
          toolbarPlaceholder,
          isMobileKeyboardViewOpen,
          toggleMobileKeyboardView
        })), showTabs && !!TabsComponent && /* @__PURE__ */ jsx(TabsComponent, _extends$1({
          dateRangeIcon,
          timeIcon,
          view: openView,
          onChange: setOpenView
        }, (_other$componentsProp = other.componentsProps) == null ? void 0 : _other$componentsProp.tabs)), /* @__PURE__ */ jsx(PickerViewRoot, {
          children: isMobileKeyboardViewOpen ? /* @__PURE__ */ jsx(MobileKeyboardInputView, {
            className: classes.mobileKeyboardInputView,
            children: /* @__PURE__ */ jsx(KeyboardDateInput, _extends$1({}, DateInputProps, {
              ignoreInvalidInputs: true,
              disableOpenPicker: true,
              TextFieldProps: MobileKeyboardTextFieldProps
            }))
          }) : /* @__PURE__ */ jsxs(react.exports.Fragment, {
            children: [isDatePickerView(openView) && /* @__PURE__ */ jsx(CalendarPicker, _extends$1({
              autoFocus,
              date: parsedValue,
              onViewChange: setOpenView,
              onChange: handleChangeAndOpenNext,
              view: openView,
              views: views.filter(isDatePickerView),
              focusedView,
              onFocusedViewChange: setFocusedView
            }, other)), isTimePickerView(openView) && /* @__PURE__ */ jsx(ClockPicker, _extends$1({}, other, {
              autoFocus,
              date: parsedValue,
              view: openView,
              views: views.filter(isTimePickerView),
              onChange: handleChangeAndOpenNext,
              onViewChange: setOpenView,
              showViewSwitcher: wrapperVariant === "desktop"
            }))]
          })
        })]
      });
    }
    const useOpenState = ({
      open,
      onOpen,
      onClose
    }) => {
      const isControllingOpenProp = react.exports.useRef(typeof open === "boolean").current;
      const [openState, setIsOpenState] = react.exports.useState(false);
      react.exports.useEffect(() => {
        if (isControllingOpenProp) {
          if (typeof open !== "boolean") {
            throw new Error("You must not mix controlling and uncontrolled mode for `open` prop");
          }
          setIsOpenState(open);
        }
      }, [isControllingOpenProp, open]);
      const setIsOpen = react.exports.useCallback((newIsOpen) => {
        if (!isControllingOpenProp) {
          setIsOpenState(newIsOpen);
        }
        if (newIsOpen && onOpen) {
          onOpen();
        }
        if (!newIsOpen && onClose) {
          onClose();
        }
      }, [isControllingOpenProp, onOpen, onClose]);
      return {
        isOpen: openState,
        setIsOpen
      };
    };
    const usePickerState = (props, valueManager) => {
      const {
        onAccept,
        onChange,
        value: value2,
        closeOnSelect
      } = props;
      const utils2 = useUtils();
      const {
        isOpen,
        setIsOpen
      } = useOpenState(props);
      const parsedDateValue = react.exports.useMemo(() => valueManager.parseInput(utils2, value2), [valueManager, utils2, value2]);
      const [lastValidDateValue, setLastValidDateValue] = react.exports.useState(parsedDateValue);
      const [dateState, setDateState] = react.exports.useState(() => ({
        committed: parsedDateValue,
        draft: parsedDateValue,
        resetFallback: parsedDateValue
      }));
      const setDate = react.exports.useCallback((params) => {
        setDateState((prev2) => {
          switch (params.action) {
            case "setAll":
            case "acceptAndClose": {
              return {
                draft: params.value,
                committed: params.value,
                resetFallback: params.value
              };
            }
            case "setCommitted": {
              return _extends$1({}, prev2, {
                draft: params.value,
                committed: params.value
              });
            }
            case "setDraft": {
              return _extends$1({}, prev2, {
                draft: params.value
              });
            }
            default: {
              return prev2;
            }
          }
        });
        if (params.forceOnChangeCall || !params.skipOnChangeCall && !valueManager.areValuesEqual(utils2, dateState.committed, params.value)) {
          onChange(params.value);
        }
        if (params.action === "acceptAndClose") {
          setIsOpen(false);
          if (onAccept && !valueManager.areValuesEqual(utils2, dateState.resetFallback, params.value)) {
            onAccept(params.value);
          }
        }
      }, [onAccept, onChange, setIsOpen, dateState, utils2, valueManager]);
      react.exports.useEffect(() => {
        if (utils2.isValid(parsedDateValue)) {
          setLastValidDateValue(parsedDateValue);
        }
      }, [utils2, parsedDateValue]);
      react.exports.useEffect(() => {
        if (isOpen) {
          setDate({
            action: "setAll",
            value: parsedDateValue,
            skipOnChangeCall: true
          });
        }
      }, [isOpen]);
      if (!valueManager.areValuesEqual(utils2, dateState.committed, parsedDateValue)) {
        setDate({
          action: "setCommitted",
          value: parsedDateValue,
          skipOnChangeCall: true
        });
      }
      const wrapperProps = react.exports.useMemo(() => ({
        open: isOpen,
        onClear: () => {
          setDate({
            value: valueManager.emptyValue,
            action: "acceptAndClose",
            forceOnChangeCall: !valueManager.areValuesEqual(utils2, value2, valueManager.emptyValue)
          });
        },
        onAccept: () => {
          setDate({
            value: dateState.draft,
            action: "acceptAndClose",
            forceOnChangeCall: !valueManager.areValuesEqual(utils2, value2, parsedDateValue)
          });
        },
        onDismiss: () => {
          setDate({
            value: dateState.committed,
            action: "acceptAndClose"
          });
        },
        onCancel: () => {
          setDate({
            value: dateState.resetFallback,
            action: "acceptAndClose"
          });
        },
        onSetToday: () => {
          setDate({
            value: valueManager.getTodayValue(utils2),
            action: "acceptAndClose"
          });
        }
      }), [setDate, isOpen, utils2, dateState, valueManager, value2, parsedDateValue]);
      const [isMobileKeyboardViewOpen, setMobileKeyboardViewOpen] = react.exports.useState(false);
      const pickerProps = react.exports.useMemo(() => ({
        parsedValue: dateState.draft,
        isMobileKeyboardViewOpen,
        toggleMobileKeyboardView: () => setMobileKeyboardViewOpen(!isMobileKeyboardViewOpen),
        onDateChange: (newDate, wrapperVariant, selectionState = "partial") => {
          switch (selectionState) {
            case "shallow": {
              return setDate({
                action: "setDraft",
                value: newDate,
                skipOnChangeCall: true
              });
            }
            case "partial": {
              return setDate({
                action: "setDraft",
                value: newDate
              });
            }
            case "finish": {
              if (closeOnSelect != null ? closeOnSelect : wrapperVariant === "desktop") {
                return setDate({
                  value: newDate,
                  action: "acceptAndClose"
                });
              }
              return setDate({
                value: newDate,
                action: "setCommitted"
              });
            }
            default: {
              throw new Error("MUI: Invalid selectionState passed to `onDateChange`");
            }
          }
        }
      }), [setDate, isMobileKeyboardViewOpen, dateState.draft, closeOnSelect]);
      const handleInputChange = react.exports.useCallback((newParsedValue, keyboardInputValue) => {
        const cleanParsedValue = valueManager.valueReducer ? valueManager.valueReducer(utils2, lastValidDateValue, newParsedValue) : newParsedValue;
        onChange(cleanParsedValue, keyboardInputValue);
      }, [onChange, valueManager, lastValidDateValue, utils2]);
      const inputProps = react.exports.useMemo(() => ({
        onChange: handleInputChange,
        open: isOpen,
        rawValue: value2,
        openPicker: () => setIsOpen(true)
      }), [handleInputChange, isOpen, value2, setIsOpen]);
      const pickerState = {
        pickerProps,
        inputProps,
        wrapperProps
      };
      react.exports.useDebugValue(pickerState, () => ({
        MuiPickerState: {
          dateState,
          other: pickerState
        }
      }));
      return pickerState;
    };
    const _excluded$q = ["onChange", "PopperProps", "PaperProps", "ToolbarComponent", "TransitionComponent", "value", "components", "componentsProps"];
    const DesktopDatePicker = /* @__PURE__ */ react.exports.forwardRef(function DesktopDatePicker2(inProps, ref) {
      const props = useDatePickerDefaultizedProps(inProps, "MuiDesktopDatePicker");
      const validationError = useDateValidation(props) !== null;
      const {
        pickerProps,
        inputProps,
        wrapperProps
      } = usePickerState(props, datePickerValueManager);
      const {
        PopperProps,
        PaperProps,
        ToolbarComponent = DatePickerToolbar,
        TransitionComponent,
        components,
        componentsProps
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$q);
      const AllDateInputProps = _extends$1({}, inputProps, other, {
        components,
        componentsProps,
        ref,
        validationError
      });
      return /* @__PURE__ */ jsx(DesktopWrapper, _extends$1({}, wrapperProps, {
        DateInputProps: AllDateInputProps,
        KeyboardDateInputComponent: KeyboardDateInput,
        PopperProps,
        PaperProps,
        TransitionComponent,
        components,
        componentsProps,
        children: /* @__PURE__ */ jsx(CalendarOrClockPicker, _extends$1({}, pickerProps, {
          autoFocus: true,
          toolbarTitle: props.label || props.toolbarTitle,
          ToolbarComponent,
          DateInputProps: AllDateInputProps,
          components,
          componentsProps
        }, other))
      }));
    });
    DesktopDatePicker.propTypes = {
      acceptRegex: propTypes.exports.instanceOf(RegExp),
      autoFocus: propTypes.exports.bool,
      children: propTypes.exports.node,
      className: propTypes.exports.string,
      closeOnSelect: propTypes.exports.bool,
      components: propTypes.exports.object,
      componentsProps: propTypes.exports.object,
      dayOfWeekFormatter: propTypes.exports.func,
      defaultCalendarMonth: propTypes.exports.any,
      disabled: propTypes.exports.bool,
      disableFuture: propTypes.exports.bool,
      disableHighlightToday: propTypes.exports.bool,
      disableMaskedInput: propTypes.exports.bool,
      disableOpenPicker: propTypes.exports.bool,
      disablePast: propTypes.exports.bool,
      getOpenDialogAriaText: propTypes.exports.func,
      getViewSwitchingButtonText: propTypes.exports.func,
      ignoreInvalidInputs: propTypes.exports.bool,
      InputAdornmentProps: propTypes.exports.object,
      inputFormat: propTypes.exports.string,
      InputProps: propTypes.exports.object,
      inputRef: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.shape({
        current: propTypes.exports.object
      })]),
      label: propTypes.exports.node,
      leftArrowButtonText: propTypes.exports.string,
      loading: propTypes.exports.bool,
      mask: propTypes.exports.string,
      maxDate: propTypes.exports.any,
      minDate: propTypes.exports.any,
      onAccept: propTypes.exports.func,
      onChange: propTypes.exports.func.isRequired,
      onClose: propTypes.exports.func,
      onError: propTypes.exports.func,
      onMonthChange: propTypes.exports.func,
      onOpen: propTypes.exports.func,
      onViewChange: propTypes.exports.func,
      onYearChange: propTypes.exports.func,
      open: propTypes.exports.bool,
      OpenPickerButtonProps: propTypes.exports.object,
      openTo: propTypes.exports.oneOf(["day", "month", "year"]),
      orientation: propTypes.exports.oneOf(["landscape", "portrait"]),
      PaperProps: propTypes.exports.object,
      PopperProps: propTypes.exports.object,
      readOnly: propTypes.exports.bool,
      reduceAnimations: propTypes.exports.bool,
      renderDay: propTypes.exports.func,
      renderInput: propTypes.exports.func.isRequired,
      renderLoading: propTypes.exports.func,
      rifmFormatter: propTypes.exports.func,
      rightArrowButtonText: propTypes.exports.string,
      shouldDisableDate: propTypes.exports.func,
      shouldDisableMonth: propTypes.exports.func,
      shouldDisableYear: propTypes.exports.func,
      showDaysOutsideCurrentMonth: propTypes.exports.bool,
      showToolbar: propTypes.exports.bool,
      ToolbarComponent: propTypes.exports.elementType,
      toolbarFormat: propTypes.exports.string,
      toolbarPlaceholder: propTypes.exports.node,
      toolbarTitle: propTypes.exports.node,
      TransitionComponent: propTypes.exports.elementType,
      value: propTypes.exports.any,
      views: propTypes.exports.arrayOf(propTypes.exports.oneOf(["day", "month", "year"]).isRequired)
    };
    const PickersModalDialogRoot = styled$1(Dialog$1)({
      [`& .${dialogClasses$1.container}`]: {
        outline: 0
      },
      [`& .${dialogClasses$1.paper}`]: {
        outline: 0,
        minWidth: DIALOG_WIDTH
      }
    });
    const PickersModalDialogContent = styled$1(DialogContent$1)({
      "&:first-of-type": {
        padding: 0
      }
    });
    const PickersModalDialog = (props) => {
      var _components$ActionBar;
      const {
        children,
        DialogProps = {},
        onAccept,
        onClear,
        onDismiss,
        onCancel,
        onSetToday,
        open,
        components,
        componentsProps
      } = props;
      const ActionBar = (_components$ActionBar = components == null ? void 0 : components.ActionBar) != null ? _components$ActionBar : PickersActionBar;
      return /* @__PURE__ */ jsxs(PickersModalDialogRoot, _extends$1({
        open,
        onClose: onDismiss
      }, DialogProps, {
        children: [/* @__PURE__ */ jsx(PickersModalDialogContent, {
          children
        }), /* @__PURE__ */ jsx(ActionBar, _extends$1({
          onAccept,
          onClear,
          onCancel,
          onSetToday,
          actions: ["cancel", "accept"]
        }, componentsProps == null ? void 0 : componentsProps.actionBar))]
      }));
    };
    const _excluded$p = ["children", "DateInputProps", "DialogProps", "onAccept", "onClear", "onDismiss", "onCancel", "onSetToday", "open", "PureDateInputComponent", "components", "componentsProps"];
    function MobileWrapper(props) {
      const {
        children,
        DateInputProps,
        DialogProps,
        onAccept,
        onClear,
        onDismiss,
        onCancel,
        onSetToday,
        open,
        PureDateInputComponent,
        components,
        componentsProps
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$p);
      return /* @__PURE__ */ jsxs(WrapperVariantContext.Provider, {
        value: "mobile",
        children: [/* @__PURE__ */ jsx(PureDateInputComponent, _extends$1({
          components
        }, other, DateInputProps)), /* @__PURE__ */ jsx(PickersModalDialog, {
          DialogProps,
          onAccept,
          onClear,
          onDismiss,
          onCancel,
          onSetToday,
          open,
          components,
          componentsProps,
          children
        })]
      });
    }
    const PureDateInput = /* @__PURE__ */ react.exports.forwardRef(function PureDateInput2(props, ref) {
      const {
        disabled,
        getOpenDialogAriaText: getOpenDialogAriaTextProp,
        inputFormat,
        InputProps,
        inputRef,
        label,
        openPicker: onOpen,
        rawValue,
        renderInput,
        TextFieldProps = {},
        validationError,
        className
      } = props;
      const localeText = useLocaleText();
      const getOpenDialogAriaText = getOpenDialogAriaTextProp != null ? getOpenDialogAriaTextProp : localeText.openDatePickerDialogue;
      const utils2 = useUtils();
      const PureDateInputProps = react.exports.useMemo(() => _extends$1({}, InputProps, {
        readOnly: true
      }), [InputProps]);
      const inputValue = getDisplayDate(utils2, rawValue, inputFormat);
      const handleOnClick = useEventCallback((event) => {
        event.stopPropagation();
        onOpen();
      });
      return renderInput(_extends$1({
        label,
        disabled,
        ref,
        inputRef,
        error: validationError,
        InputProps: PureDateInputProps,
        className
      }, !props.readOnly && !props.disabled && {
        onClick: handleOnClick
      }, {
        inputProps: _extends$1({
          disabled,
          readOnly: true,
          "aria-readonly": true,
          "aria-label": getOpenDialogAriaText(rawValue, utils2),
          value: inputValue
        }, !props.readOnly && {
          onClick: handleOnClick
        }, {
          onKeyDown: onSpaceOrEnter(onOpen)
        })
      }, TextFieldProps));
    });
    const _excluded$o = ["ToolbarComponent", "value", "onChange", "components", "componentsProps"];
    const MobileDatePicker = /* @__PURE__ */ react.exports.forwardRef(function MobileDatePicker2(inProps, ref) {
      const props = useDatePickerDefaultizedProps(inProps, "MuiMobileDatePicker");
      const validationError = useDateValidation(props) !== null;
      const {
        pickerProps,
        inputProps,
        wrapperProps
      } = usePickerState(props, datePickerValueManager);
      const {
        ToolbarComponent = DatePickerToolbar,
        components,
        componentsProps
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$o);
      const DateInputProps = _extends$1({}, inputProps, other, {
        components,
        componentsProps,
        ref,
        validationError
      });
      return /* @__PURE__ */ jsx(MobileWrapper, _extends$1({}, other, wrapperProps, {
        DateInputProps,
        PureDateInputComponent: PureDateInput,
        components,
        componentsProps,
        children: /* @__PURE__ */ jsx(CalendarOrClockPicker, _extends$1({}, pickerProps, {
          autoFocus: true,
          toolbarTitle: props.label || props.toolbarTitle,
          ToolbarComponent,
          DateInputProps,
          components,
          componentsProps
        }, other))
      }));
    });
    MobileDatePicker.propTypes = {
      acceptRegex: propTypes.exports.instanceOf(RegExp),
      autoFocus: propTypes.exports.bool,
      children: propTypes.exports.node,
      className: propTypes.exports.string,
      closeOnSelect: propTypes.exports.bool,
      components: propTypes.exports.object,
      componentsProps: propTypes.exports.object,
      dayOfWeekFormatter: propTypes.exports.func,
      defaultCalendarMonth: propTypes.exports.any,
      DialogProps: propTypes.exports.object,
      disabled: propTypes.exports.bool,
      disableFuture: propTypes.exports.bool,
      disableHighlightToday: propTypes.exports.bool,
      disableMaskedInput: propTypes.exports.bool,
      disableOpenPicker: propTypes.exports.bool,
      disablePast: propTypes.exports.bool,
      getOpenDialogAriaText: propTypes.exports.func,
      getViewSwitchingButtonText: propTypes.exports.func,
      ignoreInvalidInputs: propTypes.exports.bool,
      InputAdornmentProps: propTypes.exports.object,
      inputFormat: propTypes.exports.string,
      InputProps: propTypes.exports.object,
      inputRef: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.shape({
        current: propTypes.exports.object
      })]),
      label: propTypes.exports.node,
      leftArrowButtonText: propTypes.exports.string,
      loading: propTypes.exports.bool,
      mask: propTypes.exports.string,
      maxDate: propTypes.exports.any,
      minDate: propTypes.exports.any,
      onAccept: propTypes.exports.func,
      onChange: propTypes.exports.func.isRequired,
      onClose: propTypes.exports.func,
      onError: propTypes.exports.func,
      onMonthChange: propTypes.exports.func,
      onOpen: propTypes.exports.func,
      onViewChange: propTypes.exports.func,
      onYearChange: propTypes.exports.func,
      open: propTypes.exports.bool,
      OpenPickerButtonProps: propTypes.exports.object,
      openTo: propTypes.exports.oneOf(["day", "month", "year"]),
      orientation: propTypes.exports.oneOf(["landscape", "portrait"]),
      readOnly: propTypes.exports.bool,
      reduceAnimations: propTypes.exports.bool,
      renderDay: propTypes.exports.func,
      renderInput: propTypes.exports.func.isRequired,
      renderLoading: propTypes.exports.func,
      rifmFormatter: propTypes.exports.func,
      rightArrowButtonText: propTypes.exports.string,
      shouldDisableDate: propTypes.exports.func,
      shouldDisableMonth: propTypes.exports.func,
      shouldDisableYear: propTypes.exports.func,
      showDaysOutsideCurrentMonth: propTypes.exports.bool,
      showToolbar: propTypes.exports.bool,
      ToolbarComponent: propTypes.exports.elementType,
      toolbarFormat: propTypes.exports.string,
      toolbarPlaceholder: propTypes.exports.node,
      toolbarTitle: propTypes.exports.node,
      value: propTypes.exports.any,
      views: propTypes.exports.arrayOf(propTypes.exports.oneOf(["day", "month", "year"]).isRequired)
    };
    const _excluded$n = ["desktopModeMediaQuery", "DialogProps", "PopperProps", "TransitionComponent"];
    const DatePicker = /* @__PURE__ */ react.exports.forwardRef(function DatePicker2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiDatePicker"
      });
      const {
        desktopModeMediaQuery = "@media (pointer: fine)",
        DialogProps,
        PopperProps,
        TransitionComponent
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$n);
      const isDesktop = useMediaQuery(desktopModeMediaQuery, {
        defaultMatches: true
      });
      if (isDesktop) {
        return /* @__PURE__ */ jsx(DesktopDatePicker, _extends$1({
          ref,
          PopperProps,
          TransitionComponent
        }, other));
      }
      return /* @__PURE__ */ jsx(MobileDatePicker, _extends$1({
        ref,
        DialogProps
      }, other));
    });
    DatePicker.propTypes = {
      acceptRegex: propTypes.exports.instanceOf(RegExp),
      autoFocus: propTypes.exports.bool,
      children: propTypes.exports.node,
      className: propTypes.exports.string,
      closeOnSelect: propTypes.exports.bool,
      components: propTypes.exports.object,
      componentsProps: propTypes.exports.object,
      dayOfWeekFormatter: propTypes.exports.func,
      defaultCalendarMonth: propTypes.exports.any,
      desktopModeMediaQuery: propTypes.exports.string,
      DialogProps: propTypes.exports.object,
      disabled: propTypes.exports.bool,
      disableFuture: propTypes.exports.bool,
      disableHighlightToday: propTypes.exports.bool,
      disableMaskedInput: propTypes.exports.bool,
      disableOpenPicker: propTypes.exports.bool,
      disablePast: propTypes.exports.bool,
      getOpenDialogAriaText: propTypes.exports.func,
      getViewSwitchingButtonText: propTypes.exports.func,
      ignoreInvalidInputs: propTypes.exports.bool,
      InputAdornmentProps: propTypes.exports.object,
      inputFormat: propTypes.exports.string,
      InputProps: propTypes.exports.object,
      inputRef: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.shape({
        current: propTypes.exports.object
      })]),
      label: propTypes.exports.node,
      leftArrowButtonText: propTypes.exports.string,
      loading: propTypes.exports.bool,
      mask: propTypes.exports.string,
      maxDate: propTypes.exports.any,
      minDate: propTypes.exports.any,
      onAccept: propTypes.exports.func,
      onChange: propTypes.exports.func.isRequired,
      onClose: propTypes.exports.func,
      onError: propTypes.exports.func,
      onMonthChange: propTypes.exports.func,
      onOpen: propTypes.exports.func,
      onViewChange: propTypes.exports.func,
      onYearChange: propTypes.exports.func,
      open: propTypes.exports.bool,
      OpenPickerButtonProps: propTypes.exports.object,
      openTo: propTypes.exports.oneOf(["day", "month", "year"]),
      orientation: propTypes.exports.oneOf(["landscape", "portrait"]),
      PaperProps: propTypes.exports.object,
      PopperProps: propTypes.exports.object,
      readOnly: propTypes.exports.bool,
      reduceAnimations: propTypes.exports.bool,
      renderDay: propTypes.exports.func,
      renderInput: propTypes.exports.func.isRequired,
      renderLoading: propTypes.exports.func,
      rifmFormatter: propTypes.exports.func,
      rightArrowButtonText: propTypes.exports.string,
      shouldDisableDate: propTypes.exports.func,
      shouldDisableMonth: propTypes.exports.func,
      shouldDisableYear: propTypes.exports.func,
      showDaysOutsideCurrentMonth: propTypes.exports.bool,
      showToolbar: propTypes.exports.bool,
      ToolbarComponent: propTypes.exports.elementType,
      toolbarFormat: propTypes.exports.string,
      toolbarPlaceholder: propTypes.exports.node,
      toolbarTitle: propTypes.exports.node,
      TransitionComponent: propTypes.exports.elementType,
      value: propTypes.exports.any,
      views: propTypes.exports.arrayOf(propTypes.exports.oneOf(["day", "month", "year"]).isRequired)
    };
    var _jsxFileName$Z = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/mui/esm/widgets/value/MuiDate.js";
    const MuiDateWidget = function(props) {
      var value2 = props.value, setValue2 = props.setValue, readonly = props.readonly, customProps = props.customProps, dateFormat = props.dateFormat, valueFormat = props.valueFormat, placeholder = props.placeholder;
      var formatSingleValue = function formatSingleValue2(value3) {
        return value3 && value3.isValid() ? value3.format(valueFormat) : void 0;
      };
      var handleChange = function handleChange2(value3) {
        setValue2(formatSingleValue(value3));
      };
      var renderInput = function renderInput2(params) {
        return /* @__PURE__ */ jsxDEV(TextField$1, {
          size: "small",
          variant: "standard",
          ...params
        }, void 0, false, {
          fileName: _jsxFileName$Z,
          lineNumber: 21,
          columnNumber: 25
        }, this);
      };
      var desktopModeMediaQuery = "@media (pointer: fine), (pointer: none)";
      return /* @__PURE__ */ jsxDEV(FormControl$1, {
        children: /* @__PURE__ */ jsxDEV(DatePicker, {
          desktopModeMediaQuery,
          readOnly: readonly,
          disabled: readonly,
          toolbarPlaceholder: !readonly ? placeholder : "",
          inputFormat: dateFormat,
          value: value2 || null,
          onChange: handleChange,
          renderInput,
          ...customProps
        }, void 0, false, {
          fileName: _jsxFileName$Z,
          lineNumber: 27,
          columnNumber: 75
        }, this)
      }, void 0, false, {
        fileName: _jsxFileName$Z,
        lineNumber: 27,
        columnNumber: 23
      }, this);
    };
    function useDateTimePickerDefaultizedProps(props, name) {
      var _themeProps$ampm, _themeProps$minDateTi, _themeProps$maxDateTi, _themeProps$minDateTi2, _themeProps$maxDateTi2;
      const themeProps = useThemeProps({
        props,
        name
      });
      const utils2 = useUtils();
      const defaultDates = useDefaultDates();
      const ampm = (_themeProps$ampm = themeProps.ampm) != null ? _themeProps$ampm : utils2.is12HourCycleInCurrentLocale();
      if (themeProps.orientation != null && themeProps.orientation !== "portrait") {
        throw new Error("We are not supporting custom orientation for DateTimePicker yet :(");
      }
      return _extends$1({
        ampm,
        orientation: "portrait",
        openTo: "day",
        views: ["year", "day", "hours", "minutes"],
        ampmInClock: true,
        acceptRegex: ampm ? /[\dap]/gi : /\d/gi,
        disableMaskedInput: false,
        inputFormat: ampm ? utils2.formats.keyboardDateTime12h : utils2.formats.keyboardDateTime24h,
        disableIgnoringDatePartForTimeValidation: Boolean(themeProps.minDateTime || themeProps.maxDateTime),
        disablePast: false,
        disableFuture: false
      }, themeProps, {
        minDate: parseNonNullablePickerDate(utils2, (_themeProps$minDateTi = themeProps.minDateTime) != null ? _themeProps$minDateTi : themeProps.minDate, defaultDates.minDate),
        maxDate: parseNonNullablePickerDate(utils2, (_themeProps$maxDateTi = themeProps.maxDateTime) != null ? _themeProps$maxDateTi : themeProps.maxDate, defaultDates.maxDate),
        minTime: (_themeProps$minDateTi2 = themeProps.minDateTime) != null ? _themeProps$minDateTi2 : themeProps.minTime,
        maxTime: (_themeProps$maxDateTi2 = themeProps.maxDateTime) != null ? _themeProps$maxDateTi2 : themeProps.maxTime
      });
    }
    const dateTimePickerValueManager = {
      emptyValue: null,
      getTodayValue: (utils2) => utils2.date(),
      parseInput: parsePickerInputValue,
      areValuesEqual: (utils2, a, b) => utils2.isEqual(a, b)
    };
    const resolveViewTypeFromView = (view) => {
      switch (view) {
        case "year":
        case "month":
        case "day":
          return "calendar";
        default:
          return "clock";
      }
    };
    function getPickersToolbarTextUtilityClass(slot) {
      return generateUtilityClass("PrivatePickersToolbarText", slot);
    }
    const pickersToolbarTextClasses = generateUtilityClasses("PrivatePickersToolbarText", ["root", "selected"]);
    const _excluded$m = ["className", "selected", "value"];
    const useUtilityClasses$4 = (ownerState) => {
      const {
        classes,
        selected
      } = ownerState;
      const slots = {
        root: ["root", selected && "selected"]
      };
      return composeClasses(slots, getPickersToolbarTextUtilityClass, classes);
    };
    const PickersToolbarTextRoot = styled$1(Typography$1, {
      name: "PrivatePickersToolbarText",
      slot: "Root",
      overridesResolver: (_2, styles2) => [styles2.root, {
        [`&.${pickersToolbarTextClasses.selected}`]: styles2.selected
      }]
    })(({
      theme
    }) => ({
      transition: theme.transitions.create("color"),
      color: theme.palette.text.secondary,
      [`&.${pickersToolbarTextClasses.selected}`]: {
        color: theme.palette.text.primary
      }
    }));
    const PickersToolbarText = /* @__PURE__ */ react.exports.forwardRef(function PickersToolbarText2(props, ref) {
      const {
        className,
        value: value2
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$m);
      const classes = useUtilityClasses$4(props);
      return /* @__PURE__ */ jsx(PickersToolbarTextRoot, _extends$1({
        ref,
        className: clsx(className, classes.root),
        component: "span"
      }, other, {
        children: value2
      }));
    });
    const _excluded$l = ["align", "className", "selected", "typographyClassName", "value", "variant"];
    const useUtilityClasses$3 = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, getPickersToolbarUtilityClass, classes);
    };
    const PickersToolbarButtonRoot = styled$1(Button$1, {
      name: "MuiPickersToolbarButton",
      slot: "Root",
      overridesResolver: (_2, styles2) => styles2.root
    })({
      padding: 0,
      minWidth: 16,
      textTransform: "none"
    });
    const PickersToolbarButton = /* @__PURE__ */ react.exports.forwardRef(function PickersToolbarButton2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiPickersToolbarButton"
      });
      const {
        align,
        className,
        selected,
        typographyClassName,
        value: value2,
        variant
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$l);
      const classes = useUtilityClasses$3(props);
      return /* @__PURE__ */ jsx(PickersToolbarButtonRoot, _extends$1({
        variant: "text",
        ref,
        className: clsx(className, classes.root)
      }, other, {
        children: /* @__PURE__ */ jsx(PickersToolbarText, {
          align,
          className: typographyClassName,
          variant,
          value: value2,
          selected
        })
      }));
    });
    function getDateTimePickerToolbarUtilityClass(slot) {
      return generateUtilityClass("MuiDateTimePickerToolbar", slot);
    }
    generateUtilityClasses("MuiDateTimePickerToolbar", ["root", "dateContainer", "timeContainer", "separator"]);
    const _excluded$k = ["ampm", "parsedValue", "isMobileKeyboardViewOpen", "onChange", "openView", "setOpenView", "toggleMobileKeyboardView", "toolbarFormat", "toolbarPlaceholder", "toolbarTitle", "views"];
    const useUtilityClasses$2 = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        dateContainer: ["dateContainer"],
        timeContainer: ["timeContainer"],
        separator: ["separator"]
      };
      return composeClasses(slots, getDateTimePickerToolbarUtilityClass, classes);
    };
    const DateTimePickerToolbarRoot = styled$1(PickersToolbar, {
      name: "MuiDateTimePickerToolbar",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })(({
      theme
    }) => ({
      paddingLeft: 16,
      paddingRight: 16,
      justifyContent: "space-around",
      position: "relative",
      [`& .${pickersToolbarClasses.penIconButton}`]: _extends$1({
        position: "absolute",
        top: 8
      }, theme.direction === "rtl" ? {
        left: 8
      } : {
        right: 8
      })
    }));
    const DateTimePickerToolbarDateContainer = styled$1("div", {
      name: "MuiDateTimePickerToolbar",
      slot: "DateContainer",
      overridesResolver: (props, styles2) => styles2.dateContainer
    })({
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-start"
    });
    const DateTimePickerToolbarTimeContainer = styled$1("div", {
      name: "MuiDateTimePickerToolbar",
      slot: "TimeContainer",
      overridesResolver: (props, styles2) => styles2.timeContainer
    })({
      display: "flex"
    });
    const DateTimePickerToolbarSeparator = styled$1(PickersToolbarText, {
      name: "MuiDateTimePickerToolbar",
      slot: "Separator",
      overridesResolver: (props, styles2) => styles2.separator
    })({
      margin: "0 4px 0 2px",
      cursor: "default"
    });
    function DateTimePickerToolbar(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiDateTimePickerToolbar"
      });
      const {
        ampm,
        parsedValue,
        isMobileKeyboardViewOpen,
        openView,
        setOpenView,
        toggleMobileKeyboardView,
        toolbarFormat,
        toolbarPlaceholder = "\u2013\u2013",
        toolbarTitle: toolbarTitleProp,
        views
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$k);
      const ownerState = props;
      const utils2 = useUtils();
      const localeText = useLocaleText();
      const classes = useUtilityClasses$2(ownerState);
      const toolbarTitle = toolbarTitleProp != null ? toolbarTitleProp : localeText.dateTimePickerDefaultToolbarTitle;
      const formatHours = (time) => ampm ? utils2.format(time, "hours12h") : utils2.format(time, "hours24h");
      const dateText = react.exports.useMemo(() => {
        if (!parsedValue) {
          return toolbarPlaceholder;
        }
        if (toolbarFormat) {
          return utils2.formatByString(parsedValue, toolbarFormat);
        }
        return utils2.format(parsedValue, "shortDate");
      }, [parsedValue, toolbarFormat, toolbarPlaceholder, utils2]);
      return /* @__PURE__ */ jsxs(DateTimePickerToolbarRoot, _extends$1({
        toolbarTitle,
        isMobileKeyboardViewOpen,
        toggleMobileKeyboardView,
        className: classes.root,
        viewType: resolveViewTypeFromView(openView)
      }, other, {
        isLandscape: false,
        ownerState,
        children: [/* @__PURE__ */ jsxs(DateTimePickerToolbarDateContainer, {
          className: classes.dateContainer,
          ownerState,
          children: [views.includes("year") && /* @__PURE__ */ jsx(PickersToolbarButton, {
            tabIndex: -1,
            variant: "subtitle1",
            onClick: () => setOpenView("year"),
            selected: openView === "year",
            value: parsedValue ? utils2.format(parsedValue, "year") : "\u2013"
          }), views.includes("day") && /* @__PURE__ */ jsx(PickersToolbarButton, {
            tabIndex: -1,
            variant: "h4",
            onClick: () => setOpenView("day"),
            selected: openView === "day",
            value: dateText
          })]
        }), /* @__PURE__ */ jsxs(DateTimePickerToolbarTimeContainer, {
          className: classes.timeContainer,
          ownerState,
          children: [views.includes("hours") && /* @__PURE__ */ jsx(PickersToolbarButton, {
            variant: "h3",
            onClick: () => setOpenView("hours"),
            selected: openView === "hours",
            value: parsedValue ? formatHours(parsedValue) : "--"
          }), views.includes("minutes") && /* @__PURE__ */ jsxs(react.exports.Fragment, {
            children: [/* @__PURE__ */ jsx(DateTimePickerToolbarSeparator, {
              variant: "h3",
              value: ":",
              className: classes.separator,
              ownerState
            }), /* @__PURE__ */ jsx(PickersToolbarButton, {
              variant: "h3",
              onClick: () => setOpenView("minutes"),
              selected: openView === "minutes",
              value: parsedValue ? utils2.format(parsedValue, "minutes") : "--"
            })]
          }), views.includes("seconds") && /* @__PURE__ */ jsxs(react.exports.Fragment, {
            children: [/* @__PURE__ */ jsx(DateTimePickerToolbarSeparator, {
              variant: "h3",
              value: ":",
              className: classes.separator,
              ownerState
            }), /* @__PURE__ */ jsx(PickersToolbarButton, {
              variant: "h3",
              onClick: () => setOpenView("seconds"),
              selected: openView === "seconds",
              value: parsedValue ? utils2.format(parsedValue, "seconds") : "--"
            })]
          })]
        })]
      }));
    }
    const validateTime = ({
      adapter,
      value: value2,
      props
    }) => {
      const {
        minTime,
        maxTime,
        minutesStep,
        shouldDisableTime,
        disableIgnoringDatePartForTimeValidation
      } = props;
      const date = adapter.utils.date(value2);
      const isAfter2 = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, adapter.utils);
      if (value2 === null) {
        return null;
      }
      switch (true) {
        case !adapter.utils.isValid(value2):
          return "invalidDate";
        case Boolean(minTime && isAfter2(minTime, date)):
          return "minTime";
        case Boolean(maxTime && isAfter2(date, maxTime)):
          return "maxTime";
        case Boolean(shouldDisableTime && shouldDisableTime(adapter.utils.getHours(date), "hours")):
          return "shouldDisableTime-hours";
        case Boolean(shouldDisableTime && shouldDisableTime(adapter.utils.getMinutes(date), "minutes")):
          return "shouldDisableTime-minutes";
        case Boolean(shouldDisableTime && shouldDisableTime(adapter.utils.getSeconds(date), "seconds")):
          return "shouldDisableTime-seconds";
        case Boolean(minutesStep && adapter.utils.getMinutes(date) % minutesStep !== 0):
          return "minutesStep";
        default:
          return null;
      }
    };
    const isSameTimeError = (a, b) => a === b;
    const useTimeValidation = (props) => useValidation(props, validateTime, isSameTimeError);
    const _excluded$j = ["minDate", "maxDate", "disableFuture", "shouldDisableDate", "disablePast"];
    const validateDateTime = ({
      props,
      value: value2,
      adapter
    }) => {
      const {
        minDate,
        maxDate,
        disableFuture,
        shouldDisableDate,
        disablePast
      } = props, timeValidationProps = _objectWithoutPropertiesLoose$1(props, _excluded$j);
      const dateValidationResult = validateDate({
        adapter,
        value: value2,
        props: {
          minDate,
          maxDate,
          disableFuture,
          shouldDisableDate,
          disablePast
        }
      });
      if (dateValidationResult !== null) {
        return dateValidationResult;
      }
      return validateTime({
        adapter,
        value: value2,
        props: timeValidationProps
      });
    };
    const isSameDateTimeError = (a, b) => a === b;
    function useDateTimeValidation(props) {
      return useValidation(props, validateDateTime, isSameDateTimeError);
    }
    function getDateTimePickerTabsUtilityClass(slot) {
      return generateUtilityClass("MuiDateTimePickerTabs", slot);
    }
    generateUtilityClasses("MuiDateTimePickerTabs", ["root"]);
    const viewToTab = (openView) => {
      if (["day", "month", "year"].includes(openView)) {
        return "date";
      }
      return "time";
    };
    const tabToView = (tab) => {
      if (tab === "date") {
        return "day";
      }
      return "hours";
    };
    const useUtilityClasses$1 = (ownerState) => {
      const {
        classes
      } = ownerState;
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, getDateTimePickerTabsUtilityClass, classes);
    };
    const DateTimePickerTabsRoot = styled$1(Tabs$1, {
      name: "MuiDateTimePickerTabs",
      slot: "Root",
      overridesResolver: (_2, styles2) => styles2.root
    })(({
      ownerState,
      theme
    }) => _extends$1({
      boxShadow: `0 -1px 0 0 inset ${theme.palette.divider}`
    }, ownerState.wrapperVariant === "desktop" && {
      order: 1,
      boxShadow: `0 1px 0 0 inset ${theme.palette.divider}`,
      [`& .${tabsClasses$1.indicator}`]: {
        bottom: "auto",
        top: 0
      }
    }));
    const DateTimePickerTabs = function DateTimePickerTabs2(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiDateTimePickerTabs"
      });
      const {
        dateRangeIcon = /* @__PURE__ */ jsx(DateRange, {}),
        onChange,
        timeIcon = /* @__PURE__ */ jsx(Time, {}),
        view
      } = props;
      const localeText = useLocaleText();
      const wrapperVariant = react.exports.useContext(WrapperVariantContext);
      const ownerState = _extends$1({}, props, {
        wrapperVariant
      });
      const classes = useUtilityClasses$1(ownerState);
      const handleChange = (event, value2) => {
        onChange(tabToView(value2));
      };
      return /* @__PURE__ */ jsxs(DateTimePickerTabsRoot, {
        ownerState,
        variant: "fullWidth",
        value: viewToTab(view),
        onChange: handleChange,
        className: classes.root,
        children: [/* @__PURE__ */ jsx(Tab$1, {
          value: "date",
          "aria-label": localeText.dateTableLabel,
          icon: /* @__PURE__ */ jsx(react.exports.Fragment, {
            children: dateRangeIcon
          })
        }), /* @__PURE__ */ jsx(Tab$1, {
          value: "time",
          "aria-label": localeText.timeTableLabel,
          icon: /* @__PURE__ */ jsx(react.exports.Fragment, {
            children: timeIcon
          })
        })]
      });
    };
    DateTimePickerTabs.propTypes = {
      classes: propTypes.exports.object,
      dateRangeIcon: propTypes.exports.node,
      onChange: propTypes.exports.func.isRequired,
      timeIcon: propTypes.exports.node,
      view: propTypes.exports.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]).isRequired
    };
    const _excluded$i = ["onChange", "PaperProps", "PopperProps", "ToolbarComponent", "TransitionComponent", "value", "components", "componentsProps", "hideTabs"];
    const DesktopDateTimePicker = /* @__PURE__ */ react.exports.forwardRef(function DesktopDateTimePicker2(inProps, ref) {
      const props = useDateTimePickerDefaultizedProps(inProps, "MuiDesktopDateTimePicker");
      const validationError = useDateTimeValidation(props) !== null;
      const {
        pickerProps,
        inputProps,
        wrapperProps
      } = usePickerState(props, dateTimePickerValueManager);
      const {
        PaperProps,
        PopperProps,
        ToolbarComponent = DateTimePickerToolbar,
        TransitionComponent,
        components: providedComponents,
        componentsProps,
        hideTabs = true
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$i);
      const components = react.exports.useMemo(() => _extends$1({
        Tabs: DateTimePickerTabs
      }, providedComponents), [providedComponents]);
      const AllDateInputProps = _extends$1({}, inputProps, other, {
        components,
        componentsProps,
        ref,
        validationError
      });
      return /* @__PURE__ */ jsx(DesktopWrapper, _extends$1({}, wrapperProps, {
        DateInputProps: AllDateInputProps,
        KeyboardDateInputComponent: KeyboardDateInput,
        PopperProps,
        PaperProps,
        TransitionComponent,
        components,
        componentsProps,
        children: /* @__PURE__ */ jsx(CalendarOrClockPicker, _extends$1({}, pickerProps, {
          autoFocus: true,
          toolbarTitle: props.label || props.toolbarTitle,
          ToolbarComponent,
          DateInputProps: AllDateInputProps,
          components,
          componentsProps,
          hideTabs
        }, other))
      }));
    });
    DesktopDateTimePicker.propTypes = {
      acceptRegex: propTypes.exports.instanceOf(RegExp),
      ampm: propTypes.exports.bool,
      ampmInClock: propTypes.exports.bool,
      autoFocus: propTypes.exports.bool,
      children: propTypes.exports.node,
      className: propTypes.exports.string,
      closeOnSelect: propTypes.exports.bool,
      components: propTypes.exports.object,
      componentsProps: propTypes.exports.object,
      dateRangeIcon: propTypes.exports.node,
      dayOfWeekFormatter: propTypes.exports.func,
      defaultCalendarMonth: propTypes.exports.any,
      disabled: propTypes.exports.bool,
      disableFuture: propTypes.exports.bool,
      disableHighlightToday: propTypes.exports.bool,
      disableIgnoringDatePartForTimeValidation: propTypes.exports.bool,
      disableMaskedInput: propTypes.exports.bool,
      disableOpenPicker: propTypes.exports.bool,
      disablePast: propTypes.exports.bool,
      getClockLabelText: propTypes.exports.func,
      getOpenDialogAriaText: propTypes.exports.func,
      getViewSwitchingButtonText: propTypes.exports.func,
      hideTabs: propTypes.exports.bool,
      ignoreInvalidInputs: propTypes.exports.bool,
      InputAdornmentProps: propTypes.exports.object,
      inputFormat: propTypes.exports.string,
      InputProps: propTypes.exports.object,
      inputRef: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.shape({
        current: propTypes.exports.object
      })]),
      label: propTypes.exports.node,
      leftArrowButtonText: propTypes.exports.string,
      loading: propTypes.exports.bool,
      mask: propTypes.exports.string,
      maxDate: propTypes.exports.any,
      maxDateTime: propTypes.exports.any,
      maxTime: propTypes.exports.any,
      minDate: propTypes.exports.any,
      minDateTime: propTypes.exports.any,
      minTime: propTypes.exports.any,
      minutesStep: propTypes.exports.number,
      onAccept: propTypes.exports.func,
      onChange: propTypes.exports.func.isRequired,
      onClose: propTypes.exports.func,
      onError: propTypes.exports.func,
      onMonthChange: propTypes.exports.func,
      onOpen: propTypes.exports.func,
      onViewChange: propTypes.exports.func,
      onYearChange: propTypes.exports.func,
      open: propTypes.exports.bool,
      OpenPickerButtonProps: propTypes.exports.object,
      openTo: propTypes.exports.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]),
      orientation: propTypes.exports.oneOf(["landscape", "portrait"]),
      PaperProps: propTypes.exports.object,
      PopperProps: propTypes.exports.object,
      readOnly: propTypes.exports.bool,
      reduceAnimations: propTypes.exports.bool,
      renderDay: propTypes.exports.func,
      renderInput: propTypes.exports.func.isRequired,
      renderLoading: propTypes.exports.func,
      rifmFormatter: propTypes.exports.func,
      rightArrowButtonText: propTypes.exports.string,
      shouldDisableDate: propTypes.exports.func,
      shouldDisableMonth: propTypes.exports.func,
      shouldDisableTime: propTypes.exports.func,
      shouldDisableYear: propTypes.exports.func,
      showDaysOutsideCurrentMonth: propTypes.exports.bool,
      showToolbar: propTypes.exports.bool,
      timeIcon: propTypes.exports.node,
      ToolbarComponent: propTypes.exports.elementType,
      toolbarFormat: propTypes.exports.string,
      toolbarPlaceholder: propTypes.exports.node,
      toolbarTitle: propTypes.exports.node,
      TransitionComponent: propTypes.exports.elementType,
      value: propTypes.exports.any,
      views: propTypes.exports.arrayOf(propTypes.exports.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]).isRequired)
    };
    const _excluded$h = ["ToolbarComponent", "value", "onChange", "components", "componentsProps", "hideTabs"];
    const MobileDateTimePicker = /* @__PURE__ */ react.exports.forwardRef(function MobileDateTimePicker2(inProps, ref) {
      const props = useDateTimePickerDefaultizedProps(inProps, "MuiMobileDateTimePicker");
      const validationError = useDateTimeValidation(props) !== null;
      const {
        pickerProps,
        inputProps,
        wrapperProps
      } = usePickerState(props, dateTimePickerValueManager);
      const {
        ToolbarComponent = DateTimePickerToolbar,
        components: providedComponents,
        componentsProps,
        hideTabs = false
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$h);
      const components = react.exports.useMemo(() => _extends$1({
        Tabs: DateTimePickerTabs
      }, providedComponents), [providedComponents]);
      const DateInputProps = _extends$1({}, inputProps, other, {
        components,
        componentsProps,
        ref,
        validationError
      });
      return /* @__PURE__ */ jsx(MobileWrapper, _extends$1({}, other, wrapperProps, {
        DateInputProps,
        PureDateInputComponent: PureDateInput,
        components,
        componentsProps,
        children: /* @__PURE__ */ jsx(CalendarOrClockPicker, _extends$1({}, pickerProps, {
          autoFocus: true,
          toolbarTitle: props.label || props.toolbarTitle,
          ToolbarComponent,
          DateInputProps,
          components,
          componentsProps,
          hideTabs
        }, other))
      }));
    });
    MobileDateTimePicker.propTypes = {
      acceptRegex: propTypes.exports.instanceOf(RegExp),
      ampm: propTypes.exports.bool,
      ampmInClock: propTypes.exports.bool,
      autoFocus: propTypes.exports.bool,
      children: propTypes.exports.node,
      className: propTypes.exports.string,
      closeOnSelect: propTypes.exports.bool,
      components: propTypes.exports.object,
      componentsProps: propTypes.exports.object,
      dateRangeIcon: propTypes.exports.node,
      dayOfWeekFormatter: propTypes.exports.func,
      defaultCalendarMonth: propTypes.exports.any,
      DialogProps: propTypes.exports.object,
      disabled: propTypes.exports.bool,
      disableFuture: propTypes.exports.bool,
      disableHighlightToday: propTypes.exports.bool,
      disableIgnoringDatePartForTimeValidation: propTypes.exports.bool,
      disableMaskedInput: propTypes.exports.bool,
      disableOpenPicker: propTypes.exports.bool,
      disablePast: propTypes.exports.bool,
      getClockLabelText: propTypes.exports.func,
      getOpenDialogAriaText: propTypes.exports.func,
      getViewSwitchingButtonText: propTypes.exports.func,
      hideTabs: propTypes.exports.bool,
      ignoreInvalidInputs: propTypes.exports.bool,
      InputAdornmentProps: propTypes.exports.object,
      inputFormat: propTypes.exports.string,
      InputProps: propTypes.exports.object,
      inputRef: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.shape({
        current: propTypes.exports.object
      })]),
      label: propTypes.exports.node,
      leftArrowButtonText: propTypes.exports.string,
      loading: propTypes.exports.bool,
      mask: propTypes.exports.string,
      maxDate: propTypes.exports.any,
      maxDateTime: propTypes.exports.any,
      maxTime: propTypes.exports.any,
      minDate: propTypes.exports.any,
      minDateTime: propTypes.exports.any,
      minTime: propTypes.exports.any,
      minutesStep: propTypes.exports.number,
      onAccept: propTypes.exports.func,
      onChange: propTypes.exports.func.isRequired,
      onClose: propTypes.exports.func,
      onError: propTypes.exports.func,
      onMonthChange: propTypes.exports.func,
      onOpen: propTypes.exports.func,
      onViewChange: propTypes.exports.func,
      onYearChange: propTypes.exports.func,
      open: propTypes.exports.bool,
      OpenPickerButtonProps: propTypes.exports.object,
      openTo: propTypes.exports.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]),
      orientation: propTypes.exports.oneOf(["landscape", "portrait"]),
      readOnly: propTypes.exports.bool,
      reduceAnimations: propTypes.exports.bool,
      renderDay: propTypes.exports.func,
      renderInput: propTypes.exports.func.isRequired,
      renderLoading: propTypes.exports.func,
      rifmFormatter: propTypes.exports.func,
      rightArrowButtonText: propTypes.exports.string,
      shouldDisableDate: propTypes.exports.func,
      shouldDisableMonth: propTypes.exports.func,
      shouldDisableTime: propTypes.exports.func,
      shouldDisableYear: propTypes.exports.func,
      showDaysOutsideCurrentMonth: propTypes.exports.bool,
      showToolbar: propTypes.exports.bool,
      timeIcon: propTypes.exports.node,
      ToolbarComponent: propTypes.exports.elementType,
      toolbarFormat: propTypes.exports.string,
      toolbarPlaceholder: propTypes.exports.node,
      toolbarTitle: propTypes.exports.node,
      value: propTypes.exports.any,
      views: propTypes.exports.arrayOf(propTypes.exports.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]).isRequired)
    };
    const _excluded$g = ["desktopModeMediaQuery", "DialogProps", "PopperProps", "TransitionComponent"];
    const DateTimePicker = /* @__PURE__ */ react.exports.forwardRef(function DateTimePicker2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiDateTimePicker"
      });
      const {
        desktopModeMediaQuery = "@media (pointer: fine)",
        DialogProps,
        PopperProps,
        TransitionComponent
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$g);
      const isDesktop = useMediaQuery(desktopModeMediaQuery, {
        defaultMatches: true
      });
      if (isDesktop) {
        return /* @__PURE__ */ jsx(DesktopDateTimePicker, _extends$1({
          ref,
          PopperProps,
          TransitionComponent
        }, other));
      }
      return /* @__PURE__ */ jsx(MobileDateTimePicker, _extends$1({
        ref,
        DialogProps
      }, other));
    });
    DateTimePicker.propTypes = {
      acceptRegex: propTypes.exports.instanceOf(RegExp),
      ampm: propTypes.exports.bool,
      ampmInClock: propTypes.exports.bool,
      autoFocus: propTypes.exports.bool,
      children: propTypes.exports.node,
      className: propTypes.exports.string,
      closeOnSelect: propTypes.exports.bool,
      components: propTypes.exports.object,
      componentsProps: propTypes.exports.object,
      dateRangeIcon: propTypes.exports.node,
      dayOfWeekFormatter: propTypes.exports.func,
      defaultCalendarMonth: propTypes.exports.any,
      desktopModeMediaQuery: propTypes.exports.string,
      DialogProps: propTypes.exports.object,
      disabled: propTypes.exports.bool,
      disableFuture: propTypes.exports.bool,
      disableHighlightToday: propTypes.exports.bool,
      disableIgnoringDatePartForTimeValidation: propTypes.exports.bool,
      disableMaskedInput: propTypes.exports.bool,
      disableOpenPicker: propTypes.exports.bool,
      disablePast: propTypes.exports.bool,
      getClockLabelText: propTypes.exports.func,
      getOpenDialogAriaText: propTypes.exports.func,
      getViewSwitchingButtonText: propTypes.exports.func,
      hideTabs: propTypes.exports.bool,
      ignoreInvalidInputs: propTypes.exports.bool,
      InputAdornmentProps: propTypes.exports.object,
      inputFormat: propTypes.exports.string,
      InputProps: propTypes.exports.object,
      inputRef: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.shape({
        current: propTypes.exports.object
      })]),
      label: propTypes.exports.node,
      leftArrowButtonText: propTypes.exports.string,
      loading: propTypes.exports.bool,
      mask: propTypes.exports.string,
      maxDate: propTypes.exports.any,
      maxDateTime: propTypes.exports.any,
      maxTime: propTypes.exports.any,
      minDate: propTypes.exports.any,
      minDateTime: propTypes.exports.any,
      minTime: propTypes.exports.any,
      minutesStep: propTypes.exports.number,
      onAccept: propTypes.exports.func,
      onChange: propTypes.exports.func.isRequired,
      onClose: propTypes.exports.func,
      onError: propTypes.exports.func,
      onMonthChange: propTypes.exports.func,
      onOpen: propTypes.exports.func,
      onViewChange: propTypes.exports.func,
      onYearChange: propTypes.exports.func,
      open: propTypes.exports.bool,
      OpenPickerButtonProps: propTypes.exports.object,
      openTo: propTypes.exports.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]),
      orientation: propTypes.exports.oneOf(["landscape", "portrait"]),
      PaperProps: propTypes.exports.object,
      PopperProps: propTypes.exports.object,
      readOnly: propTypes.exports.bool,
      reduceAnimations: propTypes.exports.bool,
      renderDay: propTypes.exports.func,
      renderInput: propTypes.exports.func.isRequired,
      renderLoading: propTypes.exports.func,
      rifmFormatter: propTypes.exports.func,
      rightArrowButtonText: propTypes.exports.string,
      shouldDisableDate: propTypes.exports.func,
      shouldDisableMonth: propTypes.exports.func,
      shouldDisableTime: propTypes.exports.func,
      shouldDisableYear: propTypes.exports.func,
      showDaysOutsideCurrentMonth: propTypes.exports.bool,
      showToolbar: propTypes.exports.bool,
      timeIcon: propTypes.exports.node,
      ToolbarComponent: propTypes.exports.elementType,
      toolbarFormat: propTypes.exports.string,
      toolbarPlaceholder: propTypes.exports.node,
      toolbarTitle: propTypes.exports.node,
      TransitionComponent: propTypes.exports.elementType,
      value: propTypes.exports.any,
      views: propTypes.exports.arrayOf(propTypes.exports.oneOf(["day", "hours", "minutes", "month", "seconds", "year"]).isRequired)
    };
    var _jsxFileName$Y = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/mui/esm/widgets/value/MuiDateTime.js";
    const MuiDateTimeWidget = function(props) {
      var value2 = props.value, setValue2 = props.setValue, use12Hours = props.use12Hours, readonly = props.readonly, placeholder = props.placeholder, dateFormat = props.dateFormat, timeFormat = props.timeFormat, valueFormat = props.valueFormat, customProps = props.customProps;
      var formatSingleValue = function formatSingleValue2(value3) {
        return value3 && value3.isValid() ? value3.format(valueFormat) : void 0;
      };
      var handleChange = function handleChange2(value3) {
        setValue2(formatSingleValue(value3));
      };
      var dateTimeFormat = dateFormat + " " + timeFormat;
      var renderInput = function renderInput2(params) {
        return /* @__PURE__ */ jsxDEV(TextField$1, {
          size: "small",
          variant: "standard",
          ...params
        }, void 0, false, {
          fileName: _jsxFileName$Y,
          lineNumber: 24,
          columnNumber: 25
        }, this);
      };
      var desktopModeMediaQuery = "@media (pointer: fine), (pointer: none)";
      return /* @__PURE__ */ jsxDEV(FormControl$1, {
        children: /* @__PURE__ */ jsxDEV(DateTimePicker, {
          desktopModeMediaQuery,
          readOnly: readonly,
          disabled: readonly,
          ampm: !!use12Hours,
          toolbarPlaceholder: !readonly ? placeholder : "",
          inputFormat: dateTimeFormat,
          value: value2 || null,
          onChange: handleChange,
          renderInput,
          ...customProps
        }, void 0, false, {
          fileName: _jsxFileName$Y,
          lineNumber: 30,
          columnNumber: 75
        }, this)
      }, void 0, false, {
        fileName: _jsxFileName$Y,
        lineNumber: 30,
        columnNumber: 23
      }, this);
    };
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof$1(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self2);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
      if (null != _i) {
        var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
        try {
          if (_x = (_i = _i.call(arr)).next, 0 === i) {
            if (Object(_i) !== _i)
              return;
            _n = false;
          } else
            for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true)
              ;
        } catch (err) {
          _d = true, _e = err;
        } finally {
          try {
            if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r))
              return;
          } finally {
            if (_d)
              throw _e;
          }
        }
        return _arr;
      }
    }
    function _arrayLikeToArray$8(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function _unsupportedIterableToArray$8(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$8(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$8(o, minLen);
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$8(arr, i) || _nonIterableRest();
    }
    var immutable = { exports: {} };
    (function(module2, exports2) {
      (function(global2, factory) {
        module2.exports = factory();
      })(commonjsGlobal, function() {
        var SLICE$0 = Array.prototype.slice;
        function createClass(ctor, superClass) {
          if (superClass) {
            ctor.prototype = Object.create(superClass.prototype);
          }
          ctor.prototype.constructor = ctor;
        }
        function Iterable(value2) {
          return isIterable(value2) ? value2 : Seq(value2);
        }
        createClass(KeyedIterable, Iterable);
        function KeyedIterable(value2) {
          return isKeyed(value2) ? value2 : KeyedSeq(value2);
        }
        createClass(IndexedIterable, Iterable);
        function IndexedIterable(value2) {
          return isIndexed(value2) ? value2 : IndexedSeq(value2);
        }
        createClass(SetIterable, Iterable);
        function SetIterable(value2) {
          return isIterable(value2) && !isAssociative(value2) ? value2 : SetSeq(value2);
        }
        function isIterable(maybeIterable) {
          return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);
        }
        function isKeyed(maybeKeyed) {
          return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);
        }
        function isIndexed(maybeIndexed) {
          return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);
        }
        function isAssociative(maybeAssociative) {
          return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
        }
        function isOrdered(maybeOrdered) {
          return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);
        }
        Iterable.isIterable = isIterable;
        Iterable.isKeyed = isKeyed;
        Iterable.isIndexed = isIndexed;
        Iterable.isAssociative = isAssociative;
        Iterable.isOrdered = isOrdered;
        Iterable.Keyed = KeyedIterable;
        Iterable.Indexed = IndexedIterable;
        Iterable.Set = SetIterable;
        var IS_ITERABLE_SENTINEL = "@@__IMMUTABLE_ITERABLE__@@";
        var IS_KEYED_SENTINEL = "@@__IMMUTABLE_KEYED__@@";
        var IS_INDEXED_SENTINEL = "@@__IMMUTABLE_INDEXED__@@";
        var IS_ORDERED_SENTINEL = "@@__IMMUTABLE_ORDERED__@@";
        var DELETE = "delete";
        var SHIFT = 5;
        var SIZE2 = 1 << SHIFT;
        var MASK = SIZE2 - 1;
        var NOT_SET = {};
        var CHANGE_LENGTH = { value: false };
        var DID_ALTER = { value: false };
        function MakeRef(ref) {
          ref.value = false;
          return ref;
        }
        function SetRef(ref) {
          ref && (ref.value = true);
        }
        function OwnerID() {
        }
        function arrCopy(arr, offset2) {
          offset2 = offset2 || 0;
          var len = Math.max(0, arr.length - offset2);
          var newArr = new Array(len);
          for (var ii = 0; ii < len; ii++) {
            newArr[ii] = arr[ii + offset2];
          }
          return newArr;
        }
        function ensureSize(iter) {
          if (iter.size === void 0) {
            iter.size = iter.__iterate(returnTrue);
          }
          return iter.size;
        }
        function wrapIndex(iter, index) {
          if (typeof index !== "number") {
            var uint32Index = index >>> 0;
            if ("" + uint32Index !== index || uint32Index === 4294967295) {
              return NaN;
            }
            index = uint32Index;
          }
          return index < 0 ? ensureSize(iter) + index : index;
        }
        function returnTrue() {
          return true;
        }
        function wholeSlice(begin, end2, size) {
          return (begin === 0 || size !== void 0 && begin <= -size) && (end2 === void 0 || size !== void 0 && end2 >= size);
        }
        function resolveBegin(begin, size) {
          return resolveIndex(begin, size, 0);
        }
        function resolveEnd(end2, size) {
          return resolveIndex(end2, size, size);
        }
        function resolveIndex(index, size, defaultIndex) {
          return index === void 0 ? defaultIndex : index < 0 ? Math.max(0, size + index) : size === void 0 ? index : Math.min(size, index);
        }
        var ITERATE_KEYS = 0;
        var ITERATE_VALUES = 1;
        var ITERATE_ENTRIES = 2;
        var REAL_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;
        function Iterator(next2) {
          this.next = next2;
        }
        Iterator.prototype.toString = function() {
          return "[Iterator]";
        };
        Iterator.KEYS = ITERATE_KEYS;
        Iterator.VALUES = ITERATE_VALUES;
        Iterator.ENTRIES = ITERATE_ENTRIES;
        Iterator.prototype.inspect = Iterator.prototype.toSource = function() {
          return this.toString();
        };
        Iterator.prototype[ITERATOR_SYMBOL] = function() {
          return this;
        };
        function iteratorValue(type, k, v, iteratorResult) {
          var value2 = type === 0 ? k : type === 1 ? v : [k, v];
          iteratorResult ? iteratorResult.value = value2 : iteratorResult = {
            value: value2,
            done: false
          };
          return iteratorResult;
        }
        function iteratorDone() {
          return { value: void 0, done: true };
        }
        function hasIterator(maybeIterable) {
          return !!getIteratorFn(maybeIterable);
        }
        function isIterator(maybeIterator) {
          return maybeIterator && typeof maybeIterator.next === "function";
        }
        function getIterator(iterable) {
          var iteratorFn = getIteratorFn(iterable);
          return iteratorFn && iteratorFn.call(iterable);
        }
        function getIteratorFn(iterable) {
          var iteratorFn = iterable && (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL] || iterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        function isArrayLike2(value2) {
          return value2 && typeof value2.length === "number";
        }
        createClass(Seq, Iterable);
        function Seq(value2) {
          return value2 === null || value2 === void 0 ? emptySequence() : isIterable(value2) ? value2.toSeq() : seqFromValue(value2);
        }
        Seq.of = function() {
          return Seq(arguments);
        };
        Seq.prototype.toSeq = function() {
          return this;
        };
        Seq.prototype.toString = function() {
          return this.__toString("Seq {", "}");
        };
        Seq.prototype.cacheResult = function() {
          if (!this._cache && this.__iterateUncached) {
            this._cache = this.entrySeq().toArray();
            this.size = this._cache.length;
          }
          return this;
        };
        Seq.prototype.__iterate = function(fn, reverse) {
          return seqIterate(this, fn, reverse, true);
        };
        Seq.prototype.__iterator = function(type, reverse) {
          return seqIterator(this, type, reverse, true);
        };
        createClass(KeyedSeq, Seq);
        function KeyedSeq(value2) {
          return value2 === null || value2 === void 0 ? emptySequence().toKeyedSeq() : isIterable(value2) ? isKeyed(value2) ? value2.toSeq() : value2.fromEntrySeq() : keyedSeqFromValue(value2);
        }
        KeyedSeq.prototype.toKeyedSeq = function() {
          return this;
        };
        createClass(IndexedSeq, Seq);
        function IndexedSeq(value2) {
          return value2 === null || value2 === void 0 ? emptySequence() : !isIterable(value2) ? indexedSeqFromValue(value2) : isKeyed(value2) ? value2.entrySeq() : value2.toIndexedSeq();
        }
        IndexedSeq.of = function() {
          return IndexedSeq(arguments);
        };
        IndexedSeq.prototype.toIndexedSeq = function() {
          return this;
        };
        IndexedSeq.prototype.toString = function() {
          return this.__toString("Seq [", "]");
        };
        IndexedSeq.prototype.__iterate = function(fn, reverse) {
          return seqIterate(this, fn, reverse, false);
        };
        IndexedSeq.prototype.__iterator = function(type, reverse) {
          return seqIterator(this, type, reverse, false);
        };
        createClass(SetSeq, Seq);
        function SetSeq(value2) {
          return (value2 === null || value2 === void 0 ? emptySequence() : !isIterable(value2) ? indexedSeqFromValue(value2) : isKeyed(value2) ? value2.entrySeq() : value2).toSetSeq();
        }
        SetSeq.of = function() {
          return SetSeq(arguments);
        };
        SetSeq.prototype.toSetSeq = function() {
          return this;
        };
        Seq.isSeq = isSeq;
        Seq.Keyed = KeyedSeq;
        Seq.Set = SetSeq;
        Seq.Indexed = IndexedSeq;
        var IS_SEQ_SENTINEL = "@@__IMMUTABLE_SEQ__@@";
        Seq.prototype[IS_SEQ_SENTINEL] = true;
        createClass(ArraySeq, IndexedSeq);
        function ArraySeq(array) {
          this._array = array;
          this.size = array.length;
        }
        ArraySeq.prototype.get = function(index, notSetValue) {
          return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
        };
        ArraySeq.prototype.__iterate = function(fn, reverse) {
          var array = this._array;
          var maxIndex = array.length - 1;
          for (var ii = 0; ii <= maxIndex; ii++) {
            if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {
              return ii + 1;
            }
          }
          return ii;
        };
        ArraySeq.prototype.__iterator = function(type, reverse) {
          var array = this._array;
          var maxIndex = array.length - 1;
          var ii = 0;
          return new Iterator(
            function() {
              return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++]);
            }
          );
        };
        createClass(ObjectSeq, KeyedSeq);
        function ObjectSeq(object) {
          var keys2 = Object.keys(object);
          this._object = object;
          this._keys = keys2;
          this.size = keys2.length;
        }
        ObjectSeq.prototype.get = function(key, notSetValue) {
          if (notSetValue !== void 0 && !this.has(key)) {
            return notSetValue;
          }
          return this._object[key];
        };
        ObjectSeq.prototype.has = function(key) {
          return this._object.hasOwnProperty(key);
        };
        ObjectSeq.prototype.__iterate = function(fn, reverse) {
          var object = this._object;
          var keys2 = this._keys;
          var maxIndex = keys2.length - 1;
          for (var ii = 0; ii <= maxIndex; ii++) {
            var key = keys2[reverse ? maxIndex - ii : ii];
            if (fn(object[key], key, this) === false) {
              return ii + 1;
            }
          }
          return ii;
        };
        ObjectSeq.prototype.__iterator = function(type, reverse) {
          var object = this._object;
          var keys2 = this._keys;
          var maxIndex = keys2.length - 1;
          var ii = 0;
          return new Iterator(function() {
            var key = keys2[reverse ? maxIndex - ii : ii];
            return ii++ > maxIndex ? iteratorDone() : iteratorValue(type, key, object[key]);
          });
        };
        ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;
        createClass(IterableSeq, IndexedSeq);
        function IterableSeq(iterable) {
          this._iterable = iterable;
          this.size = iterable.length || iterable.size;
        }
        IterableSeq.prototype.__iterateUncached = function(fn, reverse) {
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var iterable = this._iterable;
          var iterator = getIterator(iterable);
          var iterations = 0;
          if (isIterator(iterator)) {
            var step;
            while (!(step = iterator.next()).done) {
              if (fn(step.value, iterations++, this) === false) {
                break;
              }
            }
          }
          return iterations;
        };
        IterableSeq.prototype.__iteratorUncached = function(type, reverse) {
          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var iterable = this._iterable;
          var iterator = getIterator(iterable);
          if (!isIterator(iterator)) {
            return new Iterator(iteratorDone);
          }
          var iterations = 0;
          return new Iterator(function() {
            var step = iterator.next();
            return step.done ? step : iteratorValue(type, iterations++, step.value);
          });
        };
        createClass(IteratorSeq, IndexedSeq);
        function IteratorSeq(iterator) {
          this._iterator = iterator;
          this._iteratorCache = [];
        }
        IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var iterator = this._iterator;
          var cache = this._iteratorCache;
          var iterations = 0;
          while (iterations < cache.length) {
            if (fn(cache[iterations], iterations++, this) === false) {
              return iterations;
            }
          }
          var step;
          while (!(step = iterator.next()).done) {
            var val = step.value;
            cache[iterations] = val;
            if (fn(val, iterations++, this) === false) {
              break;
            }
          }
          return iterations;
        };
        IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {
          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var iterator = this._iterator;
          var cache = this._iteratorCache;
          var iterations = 0;
          return new Iterator(function() {
            if (iterations >= cache.length) {
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              cache[iterations] = step.value;
            }
            return iteratorValue(type, iterations, cache[iterations++]);
          });
        };
        function isSeq(maybeSeq) {
          return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);
        }
        var EMPTY_SEQ;
        function emptySequence() {
          return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
        }
        function keyedSeqFromValue(value2) {
          var seq = Array.isArray(value2) ? new ArraySeq(value2).fromEntrySeq() : isIterator(value2) ? new IteratorSeq(value2).fromEntrySeq() : hasIterator(value2) ? new IterableSeq(value2).fromEntrySeq() : typeof value2 === "object" ? new ObjectSeq(value2) : void 0;
          if (!seq) {
            throw new TypeError(
              "Expected Array or iterable object of [k, v] entries, or keyed object: " + value2
            );
          }
          return seq;
        }
        function indexedSeqFromValue(value2) {
          var seq = maybeIndexedSeqFromValue(value2);
          if (!seq) {
            throw new TypeError(
              "Expected Array or iterable object of values: " + value2
            );
          }
          return seq;
        }
        function seqFromValue(value2) {
          var seq = maybeIndexedSeqFromValue(value2) || typeof value2 === "object" && new ObjectSeq(value2);
          if (!seq) {
            throw new TypeError(
              "Expected Array or iterable object of values, or keyed object: " + value2
            );
          }
          return seq;
        }
        function maybeIndexedSeqFromValue(value2) {
          return isArrayLike2(value2) ? new ArraySeq(value2) : isIterator(value2) ? new IteratorSeq(value2) : hasIterator(value2) ? new IterableSeq(value2) : void 0;
        }
        function seqIterate(seq, fn, reverse, useKeys) {
          var cache = seq._cache;
          if (cache) {
            var maxIndex = cache.length - 1;
            for (var ii = 0; ii <= maxIndex; ii++) {
              var entry = cache[reverse ? maxIndex - ii : ii];
              if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {
                return ii + 1;
              }
            }
            return ii;
          }
          return seq.__iterateUncached(fn, reverse);
        }
        function seqIterator(seq, type, reverse, useKeys) {
          var cache = seq._cache;
          if (cache) {
            var maxIndex = cache.length - 1;
            var ii = 0;
            return new Iterator(function() {
              var entry = cache[reverse ? maxIndex - ii : ii];
              return ii++ > maxIndex ? iteratorDone() : iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);
            });
          }
          return seq.__iteratorUncached(type, reverse);
        }
        function fromJS(json, converter) {
          return converter ? fromJSWith(converter, json, "", { "": json }) : fromJSDefault(json);
        }
        function fromJSWith(converter, json, key, parentJSON) {
          if (Array.isArray(json)) {
            return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k) {
              return fromJSWith(converter, v, k, json);
            }));
          }
          if (isPlainObj(json)) {
            return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k) {
              return fromJSWith(converter, v, k, json);
            }));
          }
          return json;
        }
        function fromJSDefault(json) {
          if (Array.isArray(json)) {
            return IndexedSeq(json).map(fromJSDefault).toList();
          }
          if (isPlainObj(json)) {
            return KeyedSeq(json).map(fromJSDefault).toMap();
          }
          return json;
        }
        function isPlainObj(value2) {
          return value2 && (value2.constructor === Object || value2.constructor === void 0);
        }
        function is2(valueA, valueB) {
          if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
            return true;
          }
          if (!valueA || !valueB) {
            return false;
          }
          if (typeof valueA.valueOf === "function" && typeof valueB.valueOf === "function") {
            valueA = valueA.valueOf();
            valueB = valueB.valueOf();
            if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
              return true;
            }
            if (!valueA || !valueB) {
              return false;
            }
          }
          if (typeof valueA.equals === "function" && typeof valueB.equals === "function" && valueA.equals(valueB)) {
            return true;
          }
          return false;
        }
        function deepEqual2(a, b) {
          if (a === b) {
            return true;
          }
          if (!isIterable(b) || a.size !== void 0 && b.size !== void 0 && a.size !== b.size || a.__hash !== void 0 && b.__hash !== void 0 && a.__hash !== b.__hash || isKeyed(a) !== isKeyed(b) || isIndexed(a) !== isIndexed(b) || isOrdered(a) !== isOrdered(b)) {
            return false;
          }
          if (a.size === 0 && b.size === 0) {
            return true;
          }
          var notAssociative = !isAssociative(a);
          if (isOrdered(a)) {
            var entries = a.entries();
            return b.every(function(v, k) {
              var entry = entries.next().value;
              return entry && is2(entry[1], v) && (notAssociative || is2(entry[0], k));
            }) && entries.next().done;
          }
          var flipped = false;
          if (a.size === void 0) {
            if (b.size === void 0) {
              if (typeof a.cacheResult === "function") {
                a.cacheResult();
              }
            } else {
              flipped = true;
              var _2 = a;
              a = b;
              b = _2;
            }
          }
          var allEqual = true;
          var bSize = b.__iterate(function(v, k) {
            if (notAssociative ? !a.has(v) : flipped ? !is2(v, a.get(k, NOT_SET)) : !is2(a.get(k, NOT_SET), v)) {
              allEqual = false;
              return false;
            }
          });
          return allEqual && a.size === bSize;
        }
        createClass(Repeat, IndexedSeq);
        function Repeat(value2, times) {
          if (!(this instanceof Repeat)) {
            return new Repeat(value2, times);
          }
          this._value = value2;
          this.size = times === void 0 ? Infinity : Math.max(0, times);
          if (this.size === 0) {
            if (EMPTY_REPEAT) {
              return EMPTY_REPEAT;
            }
            EMPTY_REPEAT = this;
          }
        }
        Repeat.prototype.toString = function() {
          if (this.size === 0) {
            return "Repeat []";
          }
          return "Repeat [ " + this._value + " " + this.size + " times ]";
        };
        Repeat.prototype.get = function(index, notSetValue) {
          return this.has(index) ? this._value : notSetValue;
        };
        Repeat.prototype.includes = function(searchValue) {
          return is2(this._value, searchValue);
        };
        Repeat.prototype.slice = function(begin, end2) {
          var size = this.size;
          return wholeSlice(begin, end2, size) ? this : new Repeat(this._value, resolveEnd(end2, size) - resolveBegin(begin, size));
        };
        Repeat.prototype.reverse = function() {
          return this;
        };
        Repeat.prototype.indexOf = function(searchValue) {
          if (is2(this._value, searchValue)) {
            return 0;
          }
          return -1;
        };
        Repeat.prototype.lastIndexOf = function(searchValue) {
          if (is2(this._value, searchValue)) {
            return this.size;
          }
          return -1;
        };
        Repeat.prototype.__iterate = function(fn, reverse) {
          for (var ii = 0; ii < this.size; ii++) {
            if (fn(this._value, ii, this) === false) {
              return ii + 1;
            }
          }
          return ii;
        };
        Repeat.prototype.__iterator = function(type, reverse) {
          var this$0 = this;
          var ii = 0;
          return new Iterator(
            function() {
              return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone();
            }
          );
        };
        Repeat.prototype.equals = function(other) {
          return other instanceof Repeat ? is2(this._value, other._value) : deepEqual2(other);
        };
        var EMPTY_REPEAT;
        function invariant(condition, error) {
          if (!condition)
            throw new Error(error);
        }
        createClass(Range, IndexedSeq);
        function Range(start2, end2, step) {
          if (!(this instanceof Range)) {
            return new Range(start2, end2, step);
          }
          invariant(step !== 0, "Cannot step a Range by 0");
          start2 = start2 || 0;
          if (end2 === void 0) {
            end2 = Infinity;
          }
          step = step === void 0 ? 1 : Math.abs(step);
          if (end2 < start2) {
            step = -step;
          }
          this._start = start2;
          this._end = end2;
          this._step = step;
          this.size = Math.max(0, Math.ceil((end2 - start2) / step - 1) + 1);
          if (this.size === 0) {
            if (EMPTY_RANGE) {
              return EMPTY_RANGE;
            }
            EMPTY_RANGE = this;
          }
        }
        Range.prototype.toString = function() {
          if (this.size === 0) {
            return "Range []";
          }
          return "Range [ " + this._start + "..." + this._end + (this._step !== 1 ? " by " + this._step : "") + " ]";
        };
        Range.prototype.get = function(index, notSetValue) {
          return this.has(index) ? this._start + wrapIndex(this, index) * this._step : notSetValue;
        };
        Range.prototype.includes = function(searchValue) {
          var possibleIndex = (searchValue - this._start) / this._step;
          return possibleIndex >= 0 && possibleIndex < this.size && possibleIndex === Math.floor(possibleIndex);
        };
        Range.prototype.slice = function(begin, end2) {
          if (wholeSlice(begin, end2, this.size)) {
            return this;
          }
          begin = resolveBegin(begin, this.size);
          end2 = resolveEnd(end2, this.size);
          if (end2 <= begin) {
            return new Range(0, 0);
          }
          return new Range(this.get(begin, this._end), this.get(end2, this._end), this._step);
        };
        Range.prototype.indexOf = function(searchValue) {
          var offsetValue = searchValue - this._start;
          if (offsetValue % this._step === 0) {
            var index = offsetValue / this._step;
            if (index >= 0 && index < this.size) {
              return index;
            }
          }
          return -1;
        };
        Range.prototype.lastIndexOf = function(searchValue) {
          return this.indexOf(searchValue);
        };
        Range.prototype.__iterate = function(fn, reverse) {
          var maxIndex = this.size - 1;
          var step = this._step;
          var value2 = reverse ? this._start + maxIndex * step : this._start;
          for (var ii = 0; ii <= maxIndex; ii++) {
            if (fn(value2, ii, this) === false) {
              return ii + 1;
            }
            value2 += reverse ? -step : step;
          }
          return ii;
        };
        Range.prototype.__iterator = function(type, reverse) {
          var maxIndex = this.size - 1;
          var step = this._step;
          var value2 = reverse ? this._start + maxIndex * step : this._start;
          var ii = 0;
          return new Iterator(function() {
            var v = value2;
            value2 += reverse ? -step : step;
            return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);
          });
        };
        Range.prototype.equals = function(other) {
          return other instanceof Range ? this._start === other._start && this._end === other._end && this._step === other._step : deepEqual2(this, other);
        };
        var EMPTY_RANGE;
        createClass(Collection, Iterable);
        function Collection() {
          throw TypeError("Abstract");
        }
        createClass(KeyedCollection, Collection);
        function KeyedCollection() {
        }
        createClass(IndexedCollection, Collection);
        function IndexedCollection() {
        }
        createClass(SetCollection, Collection);
        function SetCollection() {
        }
        Collection.Keyed = KeyedCollection;
        Collection.Indexed = IndexedCollection;
        Collection.Set = SetCollection;
        var imul = typeof Math.imul === "function" && Math.imul(4294967295, 2) === -2 ? Math.imul : function imul2(a, b) {
          a = a | 0;
          b = b | 0;
          var c = a & 65535;
          var d = b & 65535;
          return c * d + ((a >>> 16) * d + c * (b >>> 16) << 16 >>> 0) | 0;
        };
        function smi(i32) {
          return i32 >>> 1 & 1073741824 | i32 & 3221225471;
        }
        function hash2(o) {
          if (o === false || o === null || o === void 0) {
            return 0;
          }
          if (typeof o.valueOf === "function") {
            o = o.valueOf();
            if (o === false || o === null || o === void 0) {
              return 0;
            }
          }
          if (o === true) {
            return 1;
          }
          var type = typeof o;
          if (type === "number") {
            if (o !== o || o === Infinity) {
              return 0;
            }
            var h = o | 0;
            if (h !== o) {
              h ^= o * 4294967295;
            }
            while (o > 4294967295) {
              o /= 4294967295;
              h ^= o;
            }
            return smi(h);
          }
          if (type === "string") {
            return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);
          }
          if (typeof o.hashCode === "function") {
            return o.hashCode();
          }
          if (type === "object") {
            return hashJSObj(o);
          }
          if (typeof o.toString === "function") {
            return hashString(o.toString());
          }
          throw new Error("Value type " + type + " cannot be hashed.");
        }
        function cachedHashString(string) {
          var hash3 = stringHashCache[string];
          if (hash3 === void 0) {
            hash3 = hashString(string);
            if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
              STRING_HASH_CACHE_SIZE = 0;
              stringHashCache = {};
            }
            STRING_HASH_CACHE_SIZE++;
            stringHashCache[string] = hash3;
          }
          return hash3;
        }
        function hashString(string) {
          var hash3 = 0;
          for (var ii = 0; ii < string.length; ii++) {
            hash3 = 31 * hash3 + string.charCodeAt(ii) | 0;
          }
          return smi(hash3);
        }
        function hashJSObj(obj) {
          var hash3;
          if (usingWeakMap) {
            hash3 = weakMap.get(obj);
            if (hash3 !== void 0) {
              return hash3;
            }
          }
          hash3 = obj[UID_HASH_KEY];
          if (hash3 !== void 0) {
            return hash3;
          }
          if (!canDefineProperty) {
            hash3 = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
            if (hash3 !== void 0) {
              return hash3;
            }
            hash3 = getIENodeHash(obj);
            if (hash3 !== void 0) {
              return hash3;
            }
          }
          hash3 = ++objHashUID;
          if (objHashUID & 1073741824) {
            objHashUID = 0;
          }
          if (usingWeakMap) {
            weakMap.set(obj, hash3);
          } else if (isExtensible !== void 0 && isExtensible(obj) === false) {
            throw new Error("Non-extensible objects are not allowed as keys.");
          } else if (canDefineProperty) {
            Object.defineProperty(obj, UID_HASH_KEY, {
              "enumerable": false,
              "configurable": false,
              "writable": false,
              "value": hash3
            });
          } else if (obj.propertyIsEnumerable !== void 0 && obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
            obj.propertyIsEnumerable = function() {
              return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);
            };
            obj.propertyIsEnumerable[UID_HASH_KEY] = hash3;
          } else if (obj.nodeType !== void 0) {
            obj[UID_HASH_KEY] = hash3;
          } else {
            throw new Error("Unable to set a non-enumerable property on object.");
          }
          return hash3;
        }
        var isExtensible = Object.isExtensible;
        var canDefineProperty = function() {
          try {
            Object.defineProperty({}, "@", {});
            return true;
          } catch (e) {
            return false;
          }
        }();
        function getIENodeHash(node2) {
          if (node2 && node2.nodeType > 0) {
            switch (node2.nodeType) {
              case 1:
                return node2.uniqueID;
              case 9:
                return node2.documentElement && node2.documentElement.uniqueID;
            }
          }
        }
        var usingWeakMap = typeof WeakMap === "function";
        var weakMap;
        if (usingWeakMap) {
          weakMap = /* @__PURE__ */ new WeakMap();
        }
        var objHashUID = 0;
        var UID_HASH_KEY = "__immutablehash__";
        if (typeof Symbol === "function") {
          UID_HASH_KEY = Symbol(UID_HASH_KEY);
        }
        var STRING_HASH_CACHE_MIN_STRLEN = 16;
        var STRING_HASH_CACHE_MAX_SIZE = 255;
        var STRING_HASH_CACHE_SIZE = 0;
        var stringHashCache = {};
        function assertNotInfinite(size) {
          invariant(
            size !== Infinity,
            "Cannot perform this action with an infinite size."
          );
        }
        createClass(Map2, KeyedCollection);
        function Map2(value2) {
          return value2 === null || value2 === void 0 ? emptyMap() : isMap2(value2) && !isOrdered(value2) ? value2 : emptyMap().withMutations(function(map2) {
            var iter = KeyedIterable(value2);
            assertNotInfinite(iter.size);
            iter.forEach(function(v, k) {
              return map2.set(k, v);
            });
          });
        }
        Map2.of = function() {
          var keyValues = SLICE$0.call(arguments, 0);
          return emptyMap().withMutations(function(map2) {
            for (var i = 0; i < keyValues.length; i += 2) {
              if (i + 1 >= keyValues.length) {
                throw new Error("Missing value for key: " + keyValues[i]);
              }
              map2.set(keyValues[i], keyValues[i + 1]);
            }
          });
        };
        Map2.prototype.toString = function() {
          return this.__toString("Map {", "}");
        };
        Map2.prototype.get = function(k, notSetValue) {
          return this._root ? this._root.get(0, void 0, k, notSetValue) : notSetValue;
        };
        Map2.prototype.set = function(k, v) {
          return updateMap(this, k, v);
        };
        Map2.prototype.setIn = function(keyPath, v) {
          return this.updateIn(keyPath, NOT_SET, function() {
            return v;
          });
        };
        Map2.prototype.remove = function(k) {
          return updateMap(this, k, NOT_SET);
        };
        Map2.prototype.deleteIn = function(keyPath) {
          return this.updateIn(keyPath, function() {
            return NOT_SET;
          });
        };
        Map2.prototype.update = function(k, notSetValue, updater) {
          return arguments.length === 1 ? k(this) : this.updateIn([k], notSetValue, updater);
        };
        Map2.prototype.updateIn = function(keyPath, notSetValue, updater) {
          if (!updater) {
            updater = notSetValue;
            notSetValue = void 0;
          }
          var updatedValue = updateInDeepMap(
            this,
            forceIterator(keyPath),
            notSetValue,
            updater
          );
          return updatedValue === NOT_SET ? void 0 : updatedValue;
        };
        Map2.prototype.clear = function() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._root = null;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return emptyMap();
        };
        Map2.prototype.merge = function() {
          return mergeIntoMapWith(this, void 0, arguments);
        };
        Map2.prototype.mergeWith = function(merger) {
          var iters = SLICE$0.call(arguments, 1);
          return mergeIntoMapWith(this, merger, iters);
        };
        Map2.prototype.mergeIn = function(keyPath) {
          var iters = SLICE$0.call(arguments, 1);
          return this.updateIn(
            keyPath,
            emptyMap(),
            function(m) {
              return typeof m.merge === "function" ? m.merge.apply(m, iters) : iters[iters.length - 1];
            }
          );
        };
        Map2.prototype.mergeDeep = function() {
          return mergeIntoMapWith(this, deepMerger, arguments);
        };
        Map2.prototype.mergeDeepWith = function(merger) {
          var iters = SLICE$0.call(arguments, 1);
          return mergeIntoMapWith(this, deepMergerWith(merger), iters);
        };
        Map2.prototype.mergeDeepIn = function(keyPath) {
          var iters = SLICE$0.call(arguments, 1);
          return this.updateIn(
            keyPath,
            emptyMap(),
            function(m) {
              return typeof m.mergeDeep === "function" ? m.mergeDeep.apply(m, iters) : iters[iters.length - 1];
            }
          );
        };
        Map2.prototype.sort = function(comparator) {
          return OrderedMap(sortFactory(this, comparator));
        };
        Map2.prototype.sortBy = function(mapper, comparator) {
          return OrderedMap(sortFactory(this, comparator, mapper));
        };
        Map2.prototype.withMutations = function(fn) {
          var mutable = this.asMutable();
          fn(mutable);
          return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
        };
        Map2.prototype.asMutable = function() {
          return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
        };
        Map2.prototype.asImmutable = function() {
          return this.__ensureOwner();
        };
        Map2.prototype.wasAltered = function() {
          return this.__altered;
        };
        Map2.prototype.__iterator = function(type, reverse) {
          return new MapIterator(this, type, reverse);
        };
        Map2.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          var iterations = 0;
          this._root && this._root.iterate(function(entry) {
            iterations++;
            return fn(entry[1], entry[0], this$0);
          }, reverse);
          return iterations;
        };
        Map2.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            this.__ownerID = ownerID;
            this.__altered = false;
            return this;
          }
          return makeMap(this.size, this._root, ownerID, this.__hash);
        };
        function isMap2(maybeMap) {
          return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);
        }
        Map2.isMap = isMap2;
        var IS_MAP_SENTINEL = "@@__IMMUTABLE_MAP__@@";
        var MapPrototype = Map2.prototype;
        MapPrototype[IS_MAP_SENTINEL] = true;
        MapPrototype[DELETE] = MapPrototype.remove;
        MapPrototype.removeIn = MapPrototype.deleteIn;
        function ArrayMapNode(ownerID, entries) {
          this.ownerID = ownerID;
          this.entries = entries;
        }
        ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
          var entries = this.entries;
          for (var ii = 0, len = entries.length; ii < len; ii++) {
            if (is2(key, entries[ii][0])) {
              return entries[ii][1];
            }
          }
          return notSetValue;
        };
        ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
          var removed = value2 === NOT_SET;
          var entries = this.entries;
          var idx = 0;
          for (var len = entries.length; idx < len; idx++) {
            if (is2(key, entries[idx][0])) {
              break;
            }
          }
          var exists = idx < len;
          if (exists ? entries[idx][1] === value2 : removed) {
            return this;
          }
          SetRef(didAlter);
          (removed || !exists) && SetRef(didChangeSize);
          if (removed && entries.length === 1) {
            return;
          }
          if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
            return createNodes(ownerID, entries, key, value2);
          }
          var isEditable = ownerID && ownerID === this.ownerID;
          var newEntries = isEditable ? entries : arrCopy(entries);
          if (exists) {
            if (removed) {
              idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
            } else {
              newEntries[idx] = [key, value2];
            }
          } else {
            newEntries.push([key, value2]);
          }
          if (isEditable) {
            this.entries = newEntries;
            return this;
          }
          return new ArrayMapNode(ownerID, newEntries);
        };
        function BitmapIndexedNode(ownerID, bitmap, nodes) {
          this.ownerID = ownerID;
          this.bitmap = bitmap;
          this.nodes = nodes;
        }
        BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {
          if (keyHash === void 0) {
            keyHash = hash2(key);
          }
          var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);
          var bitmap = this.bitmap;
          return (bitmap & bit) === 0 ? notSetValue : this.nodes[popCount(bitmap & bit - 1)].get(shift + SHIFT, keyHash, key, notSetValue);
        };
        BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
          if (keyHash === void 0) {
            keyHash = hash2(key);
          }
          var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
          var bit = 1 << keyHashFrag;
          var bitmap = this.bitmap;
          var exists = (bitmap & bit) !== 0;
          if (!exists && value2 === NOT_SET) {
            return this;
          }
          var idx = popCount(bitmap & bit - 1);
          var nodes = this.nodes;
          var node2 = exists ? nodes[idx] : void 0;
          var newNode = updateNode(node2, ownerID, shift + SHIFT, keyHash, key, value2, didChangeSize, didAlter);
          if (newNode === node2) {
            return this;
          }
          if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
            return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
          }
          if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
            return nodes[idx ^ 1];
          }
          if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
            return newNode;
          }
          var isEditable = ownerID && ownerID === this.ownerID;
          var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
          var newNodes = exists ? newNode ? setIn(nodes, idx, newNode, isEditable) : spliceOut(nodes, idx, isEditable) : spliceIn(nodes, idx, newNode, isEditable);
          if (isEditable) {
            this.bitmap = newBitmap;
            this.nodes = newNodes;
            return this;
          }
          return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
        };
        function HashArrayMapNode(ownerID, count, nodes) {
          this.ownerID = ownerID;
          this.count = count;
          this.nodes = nodes;
        }
        HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
          if (keyHash === void 0) {
            keyHash = hash2(key);
          }
          var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
          var node2 = this.nodes[idx];
          return node2 ? node2.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
        };
        HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
          if (keyHash === void 0) {
            keyHash = hash2(key);
          }
          var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
          var removed = value2 === NOT_SET;
          var nodes = this.nodes;
          var node2 = nodes[idx];
          if (removed && !node2) {
            return this;
          }
          var newNode = updateNode(node2, ownerID, shift + SHIFT, keyHash, key, value2, didChangeSize, didAlter);
          if (newNode === node2) {
            return this;
          }
          var newCount = this.count;
          if (!node2) {
            newCount++;
          } else if (!newNode) {
            newCount--;
            if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
              return packNodes(ownerID, nodes, newCount, idx);
            }
          }
          var isEditable = ownerID && ownerID === this.ownerID;
          var newNodes = setIn(nodes, idx, newNode, isEditable);
          if (isEditable) {
            this.count = newCount;
            this.nodes = newNodes;
            return this;
          }
          return new HashArrayMapNode(ownerID, newCount, newNodes);
        };
        function HashCollisionNode(ownerID, keyHash, entries) {
          this.ownerID = ownerID;
          this.keyHash = keyHash;
          this.entries = entries;
        }
        HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {
          var entries = this.entries;
          for (var ii = 0, len = entries.length; ii < len; ii++) {
            if (is2(key, entries[ii][0])) {
              return entries[ii][1];
            }
          }
          return notSetValue;
        };
        HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
          if (keyHash === void 0) {
            keyHash = hash2(key);
          }
          var removed = value2 === NOT_SET;
          if (keyHash !== this.keyHash) {
            if (removed) {
              return this;
            }
            SetRef(didAlter);
            SetRef(didChangeSize);
            return mergeIntoNode(this, ownerID, shift, keyHash, [key, value2]);
          }
          var entries = this.entries;
          var idx = 0;
          for (var len = entries.length; idx < len; idx++) {
            if (is2(key, entries[idx][0])) {
              break;
            }
          }
          var exists = idx < len;
          if (exists ? entries[idx][1] === value2 : removed) {
            return this;
          }
          SetRef(didAlter);
          (removed || !exists) && SetRef(didChangeSize);
          if (removed && len === 2) {
            return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
          }
          var isEditable = ownerID && ownerID === this.ownerID;
          var newEntries = isEditable ? entries : arrCopy(entries);
          if (exists) {
            if (removed) {
              idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
            } else {
              newEntries[idx] = [key, value2];
            }
          } else {
            newEntries.push([key, value2]);
          }
          if (isEditable) {
            this.entries = newEntries;
            return this;
          }
          return new HashCollisionNode(ownerID, this.keyHash, newEntries);
        };
        function ValueNode(ownerID, keyHash, entry) {
          this.ownerID = ownerID;
          this.keyHash = keyHash;
          this.entry = entry;
        }
        ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {
          return is2(key, this.entry[0]) ? this.entry[1] : notSetValue;
        };
        ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
          var removed = value2 === NOT_SET;
          var keyMatch = is2(key, this.entry[0]);
          if (keyMatch ? value2 === this.entry[1] : removed) {
            return this;
          }
          SetRef(didAlter);
          if (removed) {
            SetRef(didChangeSize);
            return;
          }
          if (keyMatch) {
            if (ownerID && ownerID === this.ownerID) {
              this.entry[1] = value2;
              return this;
            }
            return new ValueNode(ownerID, this.keyHash, [key, value2]);
          }
          SetRef(didChangeSize);
          return mergeIntoNode(this, ownerID, shift, hash2(key), [key, value2]);
        };
        ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function(fn, reverse) {
          var entries = this.entries;
          for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
            if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
              return false;
            }
          }
        };
        BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function(fn, reverse) {
          var nodes = this.nodes;
          for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
            var node2 = nodes[reverse ? maxIndex - ii : ii];
            if (node2 && node2.iterate(fn, reverse) === false) {
              return false;
            }
          }
        };
        ValueNode.prototype.iterate = function(fn, reverse) {
          return fn(this.entry);
        };
        createClass(MapIterator, Iterator);
        function MapIterator(map2, type, reverse) {
          this._type = type;
          this._reverse = reverse;
          this._stack = map2._root && mapIteratorFrame(map2._root);
        }
        MapIterator.prototype.next = function() {
          var type = this._type;
          var stack = this._stack;
          while (stack) {
            var node2 = stack.node;
            var index = stack.index++;
            var maxIndex;
            if (node2.entry) {
              if (index === 0) {
                return mapIteratorValue(type, node2.entry);
              }
            } else if (node2.entries) {
              maxIndex = node2.entries.length - 1;
              if (index <= maxIndex) {
                return mapIteratorValue(type, node2.entries[this._reverse ? maxIndex - index : index]);
              }
            } else {
              maxIndex = node2.nodes.length - 1;
              if (index <= maxIndex) {
                var subNode = node2.nodes[this._reverse ? maxIndex - index : index];
                if (subNode) {
                  if (subNode.entry) {
                    return mapIteratorValue(type, subNode.entry);
                  }
                  stack = this._stack = mapIteratorFrame(subNode, stack);
                }
                continue;
              }
            }
            stack = this._stack = this._stack.__prev;
          }
          return iteratorDone();
        };
        function mapIteratorValue(type, entry) {
          return iteratorValue(type, entry[0], entry[1]);
        }
        function mapIteratorFrame(node2, prev2) {
          return {
            node: node2,
            index: 0,
            __prev: prev2
          };
        }
        function makeMap(size, root2, ownerID, hash3) {
          var map2 = Object.create(MapPrototype);
          map2.size = size;
          map2._root = root2;
          map2.__ownerID = ownerID;
          map2.__hash = hash3;
          map2.__altered = false;
          return map2;
        }
        var EMPTY_MAP;
        function emptyMap() {
          return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
        }
        function updateMap(map2, k, v) {
          var newRoot;
          var newSize;
          if (!map2._root) {
            if (v === NOT_SET) {
              return map2;
            }
            newSize = 1;
            newRoot = new ArrayMapNode(map2.__ownerID, [[k, v]]);
          } else {
            var didChangeSize = MakeRef(CHANGE_LENGTH);
            var didAlter = MakeRef(DID_ALTER);
            newRoot = updateNode(map2._root, map2.__ownerID, 0, void 0, k, v, didChangeSize, didAlter);
            if (!didAlter.value) {
              return map2;
            }
            newSize = map2.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);
          }
          if (map2.__ownerID) {
            map2.size = newSize;
            map2._root = newRoot;
            map2.__hash = void 0;
            map2.__altered = true;
            return map2;
          }
          return newRoot ? makeMap(newSize, newRoot) : emptyMap();
        }
        function updateNode(node2, ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
          if (!node2) {
            if (value2 === NOT_SET) {
              return node2;
            }
            SetRef(didAlter);
            SetRef(didChangeSize);
            return new ValueNode(ownerID, keyHash, [key, value2]);
          }
          return node2.update(ownerID, shift, keyHash, key, value2, didChangeSize, didAlter);
        }
        function isLeafNode(node2) {
          return node2.constructor === ValueNode || node2.constructor === HashCollisionNode;
        }
        function mergeIntoNode(node2, ownerID, shift, keyHash, entry) {
          if (node2.keyHash === keyHash) {
            return new HashCollisionNode(ownerID, keyHash, [node2.entry, entry]);
          }
          var idx1 = (shift === 0 ? node2.keyHash : node2.keyHash >>> shift) & MASK;
          var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
          var newNode;
          var nodes = idx1 === idx2 ? [mergeIntoNode(node2, ownerID, shift + SHIFT, keyHash, entry)] : (newNode = new ValueNode(ownerID, keyHash, entry), idx1 < idx2 ? [node2, newNode] : [newNode, node2]);
          return new BitmapIndexedNode(ownerID, 1 << idx1 | 1 << idx2, nodes);
        }
        function createNodes(ownerID, entries, key, value2) {
          if (!ownerID) {
            ownerID = new OwnerID();
          }
          var node2 = new ValueNode(ownerID, hash2(key), [key, value2]);
          for (var ii = 0; ii < entries.length; ii++) {
            var entry = entries[ii];
            node2 = node2.update(ownerID, 0, void 0, entry[0], entry[1]);
          }
          return node2;
        }
        function packNodes(ownerID, nodes, count, excluding) {
          var bitmap = 0;
          var packedII = 0;
          var packedNodes = new Array(count);
          for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
            var node2 = nodes[ii];
            if (node2 !== void 0 && ii !== excluding) {
              bitmap |= bit;
              packedNodes[packedII++] = node2;
            }
          }
          return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
        }
        function expandNodes(ownerID, nodes, bitmap, including, node2) {
          var count = 0;
          var expandedNodes = new Array(SIZE2);
          for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
            expandedNodes[ii] = bitmap & 1 ? nodes[count++] : void 0;
          }
          expandedNodes[including] = node2;
          return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
        }
        function mergeIntoMapWith(map2, merger, iterables) {
          var iters = [];
          for (var ii = 0; ii < iterables.length; ii++) {
            var value2 = iterables[ii];
            var iter = KeyedIterable(value2);
            if (!isIterable(value2)) {
              iter = iter.map(function(v) {
                return fromJS(v);
              });
            }
            iters.push(iter);
          }
          return mergeIntoCollectionWith(map2, merger, iters);
        }
        function deepMerger(existing, value2, key) {
          return existing && existing.mergeDeep && isIterable(value2) ? existing.mergeDeep(value2) : is2(existing, value2) ? existing : value2;
        }
        function deepMergerWith(merger) {
          return function(existing, value2, key) {
            if (existing && existing.mergeDeepWith && isIterable(value2)) {
              return existing.mergeDeepWith(merger, value2);
            }
            var nextValue = merger(existing, value2, key);
            return is2(existing, nextValue) ? existing : nextValue;
          };
        }
        function mergeIntoCollectionWith(collection, merger, iters) {
          iters = iters.filter(function(x) {
            return x.size !== 0;
          });
          if (iters.length === 0) {
            return collection;
          }
          if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {
            return collection.constructor(iters[0]);
          }
          return collection.withMutations(function(collection2) {
            var mergeIntoMap = merger ? function(value2, key) {
              collection2.update(
                key,
                NOT_SET,
                function(existing) {
                  return existing === NOT_SET ? value2 : merger(existing, value2, key);
                }
              );
            } : function(value2, key) {
              collection2.set(key, value2);
            };
            for (var ii = 0; ii < iters.length; ii++) {
              iters[ii].forEach(mergeIntoMap);
            }
          });
        }
        function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {
          var isNotSet = existing === NOT_SET;
          var step = keyPathIter.next();
          if (step.done) {
            var existingValue = isNotSet ? notSetValue : existing;
            var newValue = updater(existingValue);
            return newValue === existingValue ? existing : newValue;
          }
          invariant(
            isNotSet || existing && existing.set,
            "invalid keyPath"
          );
          var key = step.value;
          var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);
          var nextUpdated = updateInDeepMap(
            nextExisting,
            keyPathIter,
            notSetValue,
            updater
          );
          return nextUpdated === nextExisting ? existing : nextUpdated === NOT_SET ? existing.remove(key) : (isNotSet ? emptyMap() : existing).set(key, nextUpdated);
        }
        function popCount(x) {
          x = x - (x >> 1 & 1431655765);
          x = (x & 858993459) + (x >> 2 & 858993459);
          x = x + (x >> 4) & 252645135;
          x = x + (x >> 8);
          x = x + (x >> 16);
          return x & 127;
        }
        function setIn(array, idx, val, canEdit) {
          var newArray = canEdit ? array : arrCopy(array);
          newArray[idx] = val;
          return newArray;
        }
        function spliceIn(array, idx, val, canEdit) {
          var newLen = array.length + 1;
          if (canEdit && idx + 1 === newLen) {
            array[idx] = val;
            return array;
          }
          var newArray = new Array(newLen);
          var after = 0;
          for (var ii = 0; ii < newLen; ii++) {
            if (ii === idx) {
              newArray[ii] = val;
              after = -1;
            } else {
              newArray[ii] = array[ii + after];
            }
          }
          return newArray;
        }
        function spliceOut(array, idx, canEdit) {
          var newLen = array.length - 1;
          if (canEdit && idx === newLen) {
            array.pop();
            return array;
          }
          var newArray = new Array(newLen);
          var after = 0;
          for (var ii = 0; ii < newLen; ii++) {
            if (ii === idx) {
              after = 1;
            }
            newArray[ii] = array[ii + after];
          }
          return newArray;
        }
        var MAX_ARRAY_MAP_SIZE = SIZE2 / 4;
        var MAX_BITMAP_INDEXED_SIZE = SIZE2 / 2;
        var MIN_HASH_ARRAY_MAP_SIZE = SIZE2 / 4;
        createClass(List2, IndexedCollection);
        function List2(value2) {
          var empty = emptyList();
          if (value2 === null || value2 === void 0) {
            return empty;
          }
          if (isList(value2)) {
            return value2;
          }
          var iter = IndexedIterable(value2);
          var size = iter.size;
          if (size === 0) {
            return empty;
          }
          assertNotInfinite(size);
          if (size > 0 && size < SIZE2) {
            return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
          }
          return empty.withMutations(function(list) {
            list.setSize(size);
            iter.forEach(function(v, i) {
              return list.set(i, v);
            });
          });
        }
        List2.of = function() {
          return this(arguments);
        };
        List2.prototype.toString = function() {
          return this.__toString("List [", "]");
        };
        List2.prototype.get = function(index, notSetValue) {
          index = wrapIndex(this, index);
          if (index >= 0 && index < this.size) {
            index += this._origin;
            var node2 = listNodeFor(this, index);
            return node2 && node2.array[index & MASK];
          }
          return notSetValue;
        };
        List2.prototype.set = function(index, value2) {
          return updateList(this, index, value2);
        };
        List2.prototype.remove = function(index) {
          return !this.has(index) ? this : index === 0 ? this.shift() : index === this.size - 1 ? this.pop() : this.splice(index, 1);
        };
        List2.prototype.insert = function(index, value2) {
          return this.splice(index, 0, value2);
        };
        List2.prototype.clear = function() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = this._origin = this._capacity = 0;
            this._level = SHIFT;
            this._root = this._tail = null;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return emptyList();
        };
        List2.prototype.push = function() {
          var values2 = arguments;
          var oldSize = this.size;
          return this.withMutations(function(list) {
            setListBounds(list, 0, oldSize + values2.length);
            for (var ii = 0; ii < values2.length; ii++) {
              list.set(oldSize + ii, values2[ii]);
            }
          });
        };
        List2.prototype.pop = function() {
          return setListBounds(this, 0, -1);
        };
        List2.prototype.unshift = function() {
          var values2 = arguments;
          return this.withMutations(function(list) {
            setListBounds(list, -values2.length);
            for (var ii = 0; ii < values2.length; ii++) {
              list.set(ii, values2[ii]);
            }
          });
        };
        List2.prototype.shift = function() {
          return setListBounds(this, 1);
        };
        List2.prototype.merge = function() {
          return mergeIntoListWith(this, void 0, arguments);
        };
        List2.prototype.mergeWith = function(merger) {
          var iters = SLICE$0.call(arguments, 1);
          return mergeIntoListWith(this, merger, iters);
        };
        List2.prototype.mergeDeep = function() {
          return mergeIntoListWith(this, deepMerger, arguments);
        };
        List2.prototype.mergeDeepWith = function(merger) {
          var iters = SLICE$0.call(arguments, 1);
          return mergeIntoListWith(this, deepMergerWith(merger), iters);
        };
        List2.prototype.setSize = function(size) {
          return setListBounds(this, 0, size);
        };
        List2.prototype.slice = function(begin, end2) {
          var size = this.size;
          if (wholeSlice(begin, end2, size)) {
            return this;
          }
          return setListBounds(
            this,
            resolveBegin(begin, size),
            resolveEnd(end2, size)
          );
        };
        List2.prototype.__iterator = function(type, reverse) {
          var index = 0;
          var values2 = iterateList(this, reverse);
          return new Iterator(function() {
            var value2 = values2();
            return value2 === DONE ? iteratorDone() : iteratorValue(type, index++, value2);
          });
        };
        List2.prototype.__iterate = function(fn, reverse) {
          var index = 0;
          var values2 = iterateList(this, reverse);
          var value2;
          while ((value2 = values2()) !== DONE) {
            if (fn(value2, index++, this) === false) {
              break;
            }
          }
          return index;
        };
        List2.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            this.__ownerID = ownerID;
            return this;
          }
          return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);
        };
        function isList(maybeList) {
          return !!(maybeList && maybeList[IS_LIST_SENTINEL]);
        }
        List2.isList = isList;
        var IS_LIST_SENTINEL = "@@__IMMUTABLE_LIST__@@";
        var ListPrototype = List2.prototype;
        ListPrototype[IS_LIST_SENTINEL] = true;
        ListPrototype[DELETE] = ListPrototype.remove;
        ListPrototype.setIn = MapPrototype.setIn;
        ListPrototype.deleteIn = ListPrototype.removeIn = MapPrototype.removeIn;
        ListPrototype.update = MapPrototype.update;
        ListPrototype.updateIn = MapPrototype.updateIn;
        ListPrototype.mergeIn = MapPrototype.mergeIn;
        ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
        ListPrototype.withMutations = MapPrototype.withMutations;
        ListPrototype.asMutable = MapPrototype.asMutable;
        ListPrototype.asImmutable = MapPrototype.asImmutable;
        ListPrototype.wasAltered = MapPrototype.wasAltered;
        function VNode(array, ownerID) {
          this.array = array;
          this.ownerID = ownerID;
        }
        VNode.prototype.removeBefore = function(ownerID, level, index) {
          if (index === level ? 1 << level : this.array.length === 0) {
            return this;
          }
          var originIndex = index >>> level & MASK;
          if (originIndex >= this.array.length) {
            return new VNode([], ownerID);
          }
          var removingFirst = originIndex === 0;
          var newChild;
          if (level > 0) {
            var oldChild = this.array[originIndex];
            newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
            if (newChild === oldChild && removingFirst) {
              return this;
            }
          }
          if (removingFirst && !newChild) {
            return this;
          }
          var editable = editableVNode(this, ownerID);
          if (!removingFirst) {
            for (var ii = 0; ii < originIndex; ii++) {
              editable.array[ii] = void 0;
            }
          }
          if (newChild) {
            editable.array[originIndex] = newChild;
          }
          return editable;
        };
        VNode.prototype.removeAfter = function(ownerID, level, index) {
          if (index === (level ? 1 << level : 0) || this.array.length === 0) {
            return this;
          }
          var sizeIndex = index - 1 >>> level & MASK;
          if (sizeIndex >= this.array.length) {
            return this;
          }
          var newChild;
          if (level > 0) {
            var oldChild = this.array[sizeIndex];
            newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
            if (newChild === oldChild && sizeIndex === this.array.length - 1) {
              return this;
            }
          }
          var editable = editableVNode(this, ownerID);
          editable.array.splice(sizeIndex + 1);
          if (newChild) {
            editable.array[sizeIndex] = newChild;
          }
          return editable;
        };
        var DONE = {};
        function iterateList(list, reverse) {
          var left2 = list._origin;
          var right2 = list._capacity;
          var tailPos = getTailOffset(right2);
          var tail = list._tail;
          return iterateNodeOrLeaf(list._root, list._level, 0);
          function iterateNodeOrLeaf(node2, level, offset2) {
            return level === 0 ? iterateLeaf(node2, offset2) : iterateNode(node2, level, offset2);
          }
          function iterateLeaf(node2, offset2) {
            var array = offset2 === tailPos ? tail && tail.array : node2 && node2.array;
            var from2 = offset2 > left2 ? 0 : left2 - offset2;
            var to2 = right2 - offset2;
            if (to2 > SIZE2) {
              to2 = SIZE2;
            }
            return function() {
              if (from2 === to2) {
                return DONE;
              }
              var idx = reverse ? --to2 : from2++;
              return array && array[idx];
            };
          }
          function iterateNode(node2, level, offset2) {
            var values2;
            var array = node2 && node2.array;
            var from2 = offset2 > left2 ? 0 : left2 - offset2 >> level;
            var to2 = (right2 - offset2 >> level) + 1;
            if (to2 > SIZE2) {
              to2 = SIZE2;
            }
            return function() {
              do {
                if (values2) {
                  var value2 = values2();
                  if (value2 !== DONE) {
                    return value2;
                  }
                  values2 = null;
                }
                if (from2 === to2) {
                  return DONE;
                }
                var idx = reverse ? --to2 : from2++;
                values2 = iterateNodeOrLeaf(
                  array && array[idx],
                  level - SHIFT,
                  offset2 + (idx << level)
                );
              } while (true);
            };
          }
        }
        function makeList(origin, capacity, level, root2, tail, ownerID, hash3) {
          var list = Object.create(ListPrototype);
          list.size = capacity - origin;
          list._origin = origin;
          list._capacity = capacity;
          list._level = level;
          list._root = root2;
          list._tail = tail;
          list.__ownerID = ownerID;
          list.__hash = hash3;
          list.__altered = false;
          return list;
        }
        var EMPTY_LIST;
        function emptyList() {
          return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
        }
        function updateList(list, index, value2) {
          index = wrapIndex(list, index);
          if (index !== index) {
            return list;
          }
          if (index >= list.size || index < 0) {
            return list.withMutations(function(list2) {
              index < 0 ? setListBounds(list2, index).set(0, value2) : setListBounds(list2, 0, index + 1).set(index, value2);
            });
          }
          index += list._origin;
          var newTail = list._tail;
          var newRoot = list._root;
          var didAlter = MakeRef(DID_ALTER);
          if (index >= getTailOffset(list._capacity)) {
            newTail = updateVNode(newTail, list.__ownerID, 0, index, value2, didAlter);
          } else {
            newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value2, didAlter);
          }
          if (!didAlter.value) {
            return list;
          }
          if (list.__ownerID) {
            list._root = newRoot;
            list._tail = newTail;
            list.__hash = void 0;
            list.__altered = true;
            return list;
          }
          return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
        }
        function updateVNode(node2, ownerID, level, index, value2, didAlter) {
          var idx = index >>> level & MASK;
          var nodeHas = node2 && idx < node2.array.length;
          if (!nodeHas && value2 === void 0) {
            return node2;
          }
          var newNode;
          if (level > 0) {
            var lowerNode = node2 && node2.array[idx];
            var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value2, didAlter);
            if (newLowerNode === lowerNode) {
              return node2;
            }
            newNode = editableVNode(node2, ownerID);
            newNode.array[idx] = newLowerNode;
            return newNode;
          }
          if (nodeHas && node2.array[idx] === value2) {
            return node2;
          }
          SetRef(didAlter);
          newNode = editableVNode(node2, ownerID);
          if (value2 === void 0 && idx === newNode.array.length - 1) {
            newNode.array.pop();
          } else {
            newNode.array[idx] = value2;
          }
          return newNode;
        }
        function editableVNode(node2, ownerID) {
          if (ownerID && node2 && ownerID === node2.ownerID) {
            return node2;
          }
          return new VNode(node2 ? node2.array.slice() : [], ownerID);
        }
        function listNodeFor(list, rawIndex) {
          if (rawIndex >= getTailOffset(list._capacity)) {
            return list._tail;
          }
          if (rawIndex < 1 << list._level + SHIFT) {
            var node2 = list._root;
            var level = list._level;
            while (node2 && level > 0) {
              node2 = node2.array[rawIndex >>> level & MASK];
              level -= SHIFT;
            }
            return node2;
          }
        }
        function setListBounds(list, begin, end2) {
          if (begin !== void 0) {
            begin = begin | 0;
          }
          if (end2 !== void 0) {
            end2 = end2 | 0;
          }
          var owner = list.__ownerID || new OwnerID();
          var oldOrigin = list._origin;
          var oldCapacity = list._capacity;
          var newOrigin = oldOrigin + begin;
          var newCapacity = end2 === void 0 ? oldCapacity : end2 < 0 ? oldCapacity + end2 : oldOrigin + end2;
          if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
            return list;
          }
          if (newOrigin >= newCapacity) {
            return list.clear();
          }
          var newLevel = list._level;
          var newRoot = list._root;
          var offsetShift = 0;
          while (newOrigin + offsetShift < 0) {
            newRoot = new VNode(newRoot && newRoot.array.length ? [void 0, newRoot] : [], owner);
            newLevel += SHIFT;
            offsetShift += 1 << newLevel;
          }
          if (offsetShift) {
            newOrigin += offsetShift;
            oldOrigin += offsetShift;
            newCapacity += offsetShift;
            oldCapacity += offsetShift;
          }
          var oldTailOffset = getTailOffset(oldCapacity);
          var newTailOffset = getTailOffset(newCapacity);
          while (newTailOffset >= 1 << newLevel + SHIFT) {
            newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);
            newLevel += SHIFT;
          }
          var oldTail = list._tail;
          var newTail = newTailOffset < oldTailOffset ? listNodeFor(list, newCapacity - 1) : newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;
          if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
            newRoot = editableVNode(newRoot, owner);
            var node2 = newRoot;
            for (var level = newLevel; level > SHIFT; level -= SHIFT) {
              var idx = oldTailOffset >>> level & MASK;
              node2 = node2.array[idx] = editableVNode(node2.array[idx], owner);
            }
            node2.array[oldTailOffset >>> SHIFT & MASK] = oldTail;
          }
          if (newCapacity < oldCapacity) {
            newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
          }
          if (newOrigin >= newTailOffset) {
            newOrigin -= newTailOffset;
            newCapacity -= newTailOffset;
            newLevel = SHIFT;
            newRoot = null;
            newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);
          } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
            offsetShift = 0;
            while (newRoot) {
              var beginIndex = newOrigin >>> newLevel & MASK;
              if (beginIndex !== newTailOffset >>> newLevel & MASK) {
                break;
              }
              if (beginIndex) {
                offsetShift += (1 << newLevel) * beginIndex;
              }
              newLevel -= SHIFT;
              newRoot = newRoot.array[beginIndex];
            }
            if (newRoot && newOrigin > oldOrigin) {
              newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
            }
            if (newRoot && newTailOffset < oldTailOffset) {
              newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);
            }
            if (offsetShift) {
              newOrigin -= offsetShift;
              newCapacity -= offsetShift;
            }
          }
          if (list.__ownerID) {
            list.size = newCapacity - newOrigin;
            list._origin = newOrigin;
            list._capacity = newCapacity;
            list._level = newLevel;
            list._root = newRoot;
            list._tail = newTail;
            list.__hash = void 0;
            list.__altered = true;
            return list;
          }
          return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
        }
        function mergeIntoListWith(list, merger, iterables) {
          var iters = [];
          var maxSize = 0;
          for (var ii = 0; ii < iterables.length; ii++) {
            var value2 = iterables[ii];
            var iter = IndexedIterable(value2);
            if (iter.size > maxSize) {
              maxSize = iter.size;
            }
            if (!isIterable(value2)) {
              iter = iter.map(function(v) {
                return fromJS(v);
              });
            }
            iters.push(iter);
          }
          if (maxSize > list.size) {
            list = list.setSize(maxSize);
          }
          return mergeIntoCollectionWith(list, merger, iters);
        }
        function getTailOffset(size) {
          return size < SIZE2 ? 0 : size - 1 >>> SHIFT << SHIFT;
        }
        createClass(OrderedMap, Map2);
        function OrderedMap(value2) {
          return value2 === null || value2 === void 0 ? emptyOrderedMap() : isOrderedMap(value2) ? value2 : emptyOrderedMap().withMutations(function(map2) {
            var iter = KeyedIterable(value2);
            assertNotInfinite(iter.size);
            iter.forEach(function(v, k) {
              return map2.set(k, v);
            });
          });
        }
        OrderedMap.of = function() {
          return this(arguments);
        };
        OrderedMap.prototype.toString = function() {
          return this.__toString("OrderedMap {", "}");
        };
        OrderedMap.prototype.get = function(k, notSetValue) {
          var index = this._map.get(k);
          return index !== void 0 ? this._list.get(index)[1] : notSetValue;
        };
        OrderedMap.prototype.clear = function() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._map.clear();
            this._list.clear();
            return this;
          }
          return emptyOrderedMap();
        };
        OrderedMap.prototype.set = function(k, v) {
          return updateOrderedMap(this, k, v);
        };
        OrderedMap.prototype.remove = function(k) {
          return updateOrderedMap(this, k, NOT_SET);
        };
        OrderedMap.prototype.wasAltered = function() {
          return this._map.wasAltered() || this._list.wasAltered();
        };
        OrderedMap.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          return this._list.__iterate(
            function(entry) {
              return entry && fn(entry[1], entry[0], this$0);
            },
            reverse
          );
        };
        OrderedMap.prototype.__iterator = function(type, reverse) {
          return this._list.fromEntrySeq().__iterator(type, reverse);
        };
        OrderedMap.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          var newMap = this._map.__ensureOwner(ownerID);
          var newList = this._list.__ensureOwner(ownerID);
          if (!ownerID) {
            this.__ownerID = ownerID;
            this._map = newMap;
            this._list = newList;
            return this;
          }
          return makeOrderedMap(newMap, newList, ownerID, this.__hash);
        };
        function isOrderedMap(maybeOrderedMap) {
          return isMap2(maybeOrderedMap) && isOrdered(maybeOrderedMap);
        }
        OrderedMap.isOrderedMap = isOrderedMap;
        OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;
        OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;
        function makeOrderedMap(map2, list, ownerID, hash3) {
          var omap = Object.create(OrderedMap.prototype);
          omap.size = map2 ? map2.size : 0;
          omap._map = map2;
          omap._list = list;
          omap.__ownerID = ownerID;
          omap.__hash = hash3;
          return omap;
        }
        var EMPTY_ORDERED_MAP;
        function emptyOrderedMap() {
          return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
        }
        function updateOrderedMap(omap, k, v) {
          var map2 = omap._map;
          var list = omap._list;
          var i = map2.get(k);
          var has2 = i !== void 0;
          var newMap;
          var newList;
          if (v === NOT_SET) {
            if (!has2) {
              return omap;
            }
            if (list.size >= SIZE2 && list.size >= map2.size * 2) {
              newList = list.filter(function(entry, idx) {
                return entry !== void 0 && i !== idx;
              });
              newMap = newList.toKeyedSeq().map(function(entry) {
                return entry[0];
              }).flip().toMap();
              if (omap.__ownerID) {
                newMap.__ownerID = newList.__ownerID = omap.__ownerID;
              }
            } else {
              newMap = map2.remove(k);
              newList = i === list.size - 1 ? list.pop() : list.set(i, void 0);
            }
          } else {
            if (has2) {
              if (v === list.get(i)[1]) {
                return omap;
              }
              newMap = map2;
              newList = list.set(i, [k, v]);
            } else {
              newMap = map2.set(k, list.size);
              newList = list.set(list.size, [k, v]);
            }
          }
          if (omap.__ownerID) {
            omap.size = newMap.size;
            omap._map = newMap;
            omap._list = newList;
            omap.__hash = void 0;
            return omap;
          }
          return makeOrderedMap(newMap, newList);
        }
        createClass(ToKeyedSequence, KeyedSeq);
        function ToKeyedSequence(indexed, useKeys) {
          this._iter = indexed;
          this._useKeys = useKeys;
          this.size = indexed.size;
        }
        ToKeyedSequence.prototype.get = function(key, notSetValue) {
          return this._iter.get(key, notSetValue);
        };
        ToKeyedSequence.prototype.has = function(key) {
          return this._iter.has(key);
        };
        ToKeyedSequence.prototype.valueSeq = function() {
          return this._iter.valueSeq();
        };
        ToKeyedSequence.prototype.reverse = function() {
          var this$0 = this;
          var reversedSequence = reverseFactory(this, true);
          if (!this._useKeys) {
            reversedSequence.valueSeq = function() {
              return this$0._iter.toSeq().reverse();
            };
          }
          return reversedSequence;
        };
        ToKeyedSequence.prototype.map = function(mapper, context2) {
          var this$0 = this;
          var mappedSequence = mapFactory(this, mapper, context2);
          if (!this._useKeys) {
            mappedSequence.valueSeq = function() {
              return this$0._iter.toSeq().map(mapper, context2);
            };
          }
          return mappedSequence;
        };
        ToKeyedSequence.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          var ii;
          return this._iter.__iterate(
            this._useKeys ? function(v, k) {
              return fn(v, k, this$0);
            } : (ii = reverse ? resolveSize(this) : 0, function(v) {
              return fn(v, reverse ? --ii : ii++, this$0);
            }),
            reverse
          );
        };
        ToKeyedSequence.prototype.__iterator = function(type, reverse) {
          if (this._useKeys) {
            return this._iter.__iterator(type, reverse);
          }
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          var ii = reverse ? resolveSize(this) : 0;
          return new Iterator(function() {
            var step = iterator.next();
            return step.done ? step : iteratorValue(type, reverse ? --ii : ii++, step.value, step);
          });
        };
        ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;
        createClass(ToIndexedSequence, IndexedSeq);
        function ToIndexedSequence(iter) {
          this._iter = iter;
          this.size = iter.size;
        }
        ToIndexedSequence.prototype.includes = function(value2) {
          return this._iter.includes(value2);
        };
        ToIndexedSequence.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          var iterations = 0;
          return this._iter.__iterate(function(v) {
            return fn(v, iterations++, this$0);
          }, reverse);
        };
        ToIndexedSequence.prototype.__iterator = function(type, reverse) {
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          var iterations = 0;
          return new Iterator(function() {
            var step = iterator.next();
            return step.done ? step : iteratorValue(type, iterations++, step.value, step);
          });
        };
        createClass(ToSetSequence, SetSeq);
        function ToSetSequence(iter) {
          this._iter = iter;
          this.size = iter.size;
        }
        ToSetSequence.prototype.has = function(key) {
          return this._iter.includes(key);
        };
        ToSetSequence.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          return this._iter.__iterate(function(v) {
            return fn(v, v, this$0);
          }, reverse);
        };
        ToSetSequence.prototype.__iterator = function(type, reverse) {
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          return new Iterator(function() {
            var step = iterator.next();
            return step.done ? step : iteratorValue(type, step.value, step.value, step);
          });
        };
        createClass(FromEntriesSequence, KeyedSeq);
        function FromEntriesSequence(entries) {
          this._iter = entries;
          this.size = entries.size;
        }
        FromEntriesSequence.prototype.entrySeq = function() {
          return this._iter.toSeq();
        };
        FromEntriesSequence.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          return this._iter.__iterate(function(entry) {
            if (entry) {
              validateEntry(entry);
              var indexedIterable = isIterable(entry);
              return fn(
                indexedIterable ? entry.get(1) : entry[1],
                indexedIterable ? entry.get(0) : entry[0],
                this$0
              );
            }
          }, reverse);
        };
        FromEntriesSequence.prototype.__iterator = function(type, reverse) {
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          return new Iterator(function() {
            while (true) {
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              var entry = step.value;
              if (entry) {
                validateEntry(entry);
                var indexedIterable = isIterable(entry);
                return iteratorValue(
                  type,
                  indexedIterable ? entry.get(0) : entry[0],
                  indexedIterable ? entry.get(1) : entry[1],
                  step
                );
              }
            }
          });
        };
        ToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;
        function flipFactory(iterable) {
          var flipSequence = makeSequence(iterable);
          flipSequence._iter = iterable;
          flipSequence.size = iterable.size;
          flipSequence.flip = function() {
            return iterable;
          };
          flipSequence.reverse = function() {
            var reversedSequence = iterable.reverse.apply(this);
            reversedSequence.flip = function() {
              return iterable.reverse();
            };
            return reversedSequence;
          };
          flipSequence.has = function(key) {
            return iterable.includes(key);
          };
          flipSequence.includes = function(key) {
            return iterable.has(key);
          };
          flipSequence.cacheResult = cacheResultThrough;
          flipSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            return iterable.__iterate(function(v, k) {
              return fn(k, v, this$0) !== false;
            }, reverse);
          };
          flipSequence.__iteratorUncached = function(type, reverse) {
            if (type === ITERATE_ENTRIES) {
              var iterator = iterable.__iterator(type, reverse);
              return new Iterator(function() {
                var step = iterator.next();
                if (!step.done) {
                  var k = step.value[0];
                  step.value[0] = step.value[1];
                  step.value[1] = k;
                }
                return step;
              });
            }
            return iterable.__iterator(
              type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
              reverse
            );
          };
          return flipSequence;
        }
        function mapFactory(iterable, mapper, context2) {
          var mappedSequence = makeSequence(iterable);
          mappedSequence.size = iterable.size;
          mappedSequence.has = function(key) {
            return iterable.has(key);
          };
          mappedSequence.get = function(key, notSetValue) {
            var v = iterable.get(key, NOT_SET);
            return v === NOT_SET ? notSetValue : mapper.call(context2, v, key, iterable);
          };
          mappedSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            return iterable.__iterate(
              function(v, k, c) {
                return fn(mapper.call(context2, v, k, c), k, this$0) !== false;
              },
              reverse
            );
          };
          mappedSequence.__iteratorUncached = function(type, reverse) {
            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
            return new Iterator(function() {
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              var entry = step.value;
              var key = entry[0];
              return iteratorValue(
                type,
                key,
                mapper.call(context2, entry[1], key, iterable),
                step
              );
            });
          };
          return mappedSequence;
        }
        function reverseFactory(iterable, useKeys) {
          var reversedSequence = makeSequence(iterable);
          reversedSequence._iter = iterable;
          reversedSequence.size = iterable.size;
          reversedSequence.reverse = function() {
            return iterable;
          };
          if (iterable.flip) {
            reversedSequence.flip = function() {
              var flipSequence = flipFactory(iterable);
              flipSequence.reverse = function() {
                return iterable.flip();
              };
              return flipSequence;
            };
          }
          reversedSequence.get = function(key, notSetValue) {
            return iterable.get(useKeys ? key : -1 - key, notSetValue);
          };
          reversedSequence.has = function(key) {
            return iterable.has(useKeys ? key : -1 - key);
          };
          reversedSequence.includes = function(value2) {
            return iterable.includes(value2);
          };
          reversedSequence.cacheResult = cacheResultThrough;
          reversedSequence.__iterate = function(fn, reverse) {
            var this$0 = this;
            return iterable.__iterate(function(v, k) {
              return fn(v, k, this$0);
            }, !reverse);
          };
          reversedSequence.__iterator = function(type, reverse) {
            return iterable.__iterator(type, !reverse);
          };
          return reversedSequence;
        }
        function filterFactory(iterable, predicate, context2, useKeys) {
          var filterSequence = makeSequence(iterable);
          if (useKeys) {
            filterSequence.has = function(key) {
              var v = iterable.get(key, NOT_SET);
              return v !== NOT_SET && !!predicate.call(context2, v, key, iterable);
            };
            filterSequence.get = function(key, notSetValue) {
              var v = iterable.get(key, NOT_SET);
              return v !== NOT_SET && predicate.call(context2, v, key, iterable) ? v : notSetValue;
            };
          }
          filterSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            var iterations = 0;
            iterable.__iterate(function(v, k, c) {
              if (predicate.call(context2, v, k, c)) {
                iterations++;
                return fn(v, useKeys ? k : iterations - 1, this$0);
              }
            }, reverse);
            return iterations;
          };
          filterSequence.__iteratorUncached = function(type, reverse) {
            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
            var iterations = 0;
            return new Iterator(function() {
              while (true) {
                var step = iterator.next();
                if (step.done) {
                  return step;
                }
                var entry = step.value;
                var key = entry[0];
                var value2 = entry[1];
                if (predicate.call(context2, value2, key, iterable)) {
                  return iteratorValue(type, useKeys ? key : iterations++, value2, step);
                }
              }
            });
          };
          return filterSequence;
        }
        function countByFactory(iterable, grouper, context2) {
          var groups = Map2().asMutable();
          iterable.__iterate(function(v, k) {
            groups.update(
              grouper.call(context2, v, k, iterable),
              0,
              function(a) {
                return a + 1;
              }
            );
          });
          return groups.asImmutable();
        }
        function groupByFactory(iterable, grouper, context2) {
          var isKeyedIter = isKeyed(iterable);
          var groups = (isOrdered(iterable) ? OrderedMap() : Map2()).asMutable();
          iterable.__iterate(function(v, k) {
            groups.update(
              grouper.call(context2, v, k, iterable),
              function(a) {
                return a = a || [], a.push(isKeyedIter ? [k, v] : v), a;
              }
            );
          });
          var coerce = iterableClass(iterable);
          return groups.map(function(arr) {
            return reify(iterable, coerce(arr));
          });
        }
        function sliceFactory(iterable, begin, end2, useKeys) {
          var originalSize = iterable.size;
          if (begin !== void 0) {
            begin = begin | 0;
          }
          if (end2 !== void 0) {
            if (end2 === Infinity) {
              end2 = originalSize;
            } else {
              end2 = end2 | 0;
            }
          }
          if (wholeSlice(begin, end2, originalSize)) {
            return iterable;
          }
          var resolvedBegin = resolveBegin(begin, originalSize);
          var resolvedEnd = resolveEnd(end2, originalSize);
          if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
            return sliceFactory(iterable.toSeq().cacheResult(), begin, end2, useKeys);
          }
          var resolvedSize = resolvedEnd - resolvedBegin;
          var sliceSize;
          if (resolvedSize === resolvedSize) {
            sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
          }
          var sliceSeq = makeSequence(iterable);
          sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || void 0;
          if (!useKeys && isSeq(iterable) && sliceSize >= 0) {
            sliceSeq.get = function(index, notSetValue) {
              index = wrapIndex(this, index);
              return index >= 0 && index < sliceSize ? iterable.get(index + resolvedBegin, notSetValue) : notSetValue;
            };
          }
          sliceSeq.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            if (sliceSize === 0) {
              return 0;
            }
            if (reverse) {
              return this.cacheResult().__iterate(fn, reverse);
            }
            var skipped = 0;
            var isSkipping = true;
            var iterations = 0;
            iterable.__iterate(function(v, k) {
              if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
                iterations++;
                return fn(v, useKeys ? k : iterations - 1, this$0) !== false && iterations !== sliceSize;
              }
            });
            return iterations;
          };
          sliceSeq.__iteratorUncached = function(type, reverse) {
            if (sliceSize !== 0 && reverse) {
              return this.cacheResult().__iterator(type, reverse);
            }
            var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);
            var skipped = 0;
            var iterations = 0;
            return new Iterator(function() {
              while (skipped++ < resolvedBegin) {
                iterator.next();
              }
              if (++iterations > sliceSize) {
                return iteratorDone();
              }
              var step = iterator.next();
              if (useKeys || type === ITERATE_VALUES) {
                return step;
              } else if (type === ITERATE_KEYS) {
                return iteratorValue(type, iterations - 1, void 0, step);
              } else {
                return iteratorValue(type, iterations - 1, step.value[1], step);
              }
            });
          };
          return sliceSeq;
        }
        function takeWhileFactory(iterable, predicate, context2) {
          var takeSequence = makeSequence(iterable);
          takeSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            if (reverse) {
              return this.cacheResult().__iterate(fn, reverse);
            }
            var iterations = 0;
            iterable.__iterate(
              function(v, k, c) {
                return predicate.call(context2, v, k, c) && ++iterations && fn(v, k, this$0);
              }
            );
            return iterations;
          };
          takeSequence.__iteratorUncached = function(type, reverse) {
            var this$0 = this;
            if (reverse) {
              return this.cacheResult().__iterator(type, reverse);
            }
            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
            var iterating = true;
            return new Iterator(function() {
              if (!iterating) {
                return iteratorDone();
              }
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              var entry = step.value;
              var k = entry[0];
              var v = entry[1];
              if (!predicate.call(context2, v, k, this$0)) {
                iterating = false;
                return iteratorDone();
              }
              return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
            });
          };
          return takeSequence;
        }
        function skipWhileFactory(iterable, predicate, context2, useKeys) {
          var skipSequence = makeSequence(iterable);
          skipSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            if (reverse) {
              return this.cacheResult().__iterate(fn, reverse);
            }
            var isSkipping = true;
            var iterations = 0;
            iterable.__iterate(function(v, k, c) {
              if (!(isSkipping && (isSkipping = predicate.call(context2, v, k, c)))) {
                iterations++;
                return fn(v, useKeys ? k : iterations - 1, this$0);
              }
            });
            return iterations;
          };
          skipSequence.__iteratorUncached = function(type, reverse) {
            var this$0 = this;
            if (reverse) {
              return this.cacheResult().__iterator(type, reverse);
            }
            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
            var skipping = true;
            var iterations = 0;
            return new Iterator(function() {
              var step, k, v;
              do {
                step = iterator.next();
                if (step.done) {
                  if (useKeys || type === ITERATE_VALUES) {
                    return step;
                  } else if (type === ITERATE_KEYS) {
                    return iteratorValue(type, iterations++, void 0, step);
                  } else {
                    return iteratorValue(type, iterations++, step.value[1], step);
                  }
                }
                var entry = step.value;
                k = entry[0];
                v = entry[1];
                skipping && (skipping = predicate.call(context2, v, k, this$0));
              } while (skipping);
              return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
            });
          };
          return skipSequence;
        }
        function concatFactory(iterable, values2) {
          var isKeyedIterable = isKeyed(iterable);
          var iters = [iterable].concat(values2).map(function(v) {
            if (!isIterable(v)) {
              v = isKeyedIterable ? keyedSeqFromValue(v) : indexedSeqFromValue(Array.isArray(v) ? v : [v]);
            } else if (isKeyedIterable) {
              v = KeyedIterable(v);
            }
            return v;
          }).filter(function(v) {
            return v.size !== 0;
          });
          if (iters.length === 0) {
            return iterable;
          }
          if (iters.length === 1) {
            var singleton = iters[0];
            if (singleton === iterable || isKeyedIterable && isKeyed(singleton) || isIndexed(iterable) && isIndexed(singleton)) {
              return singleton;
            }
          }
          var concatSeq = new ArraySeq(iters);
          if (isKeyedIterable) {
            concatSeq = concatSeq.toKeyedSeq();
          } else if (!isIndexed(iterable)) {
            concatSeq = concatSeq.toSetSeq();
          }
          concatSeq = concatSeq.flatten(true);
          concatSeq.size = iters.reduce(
            function(sum, seq) {
              if (sum !== void 0) {
                var size = seq.size;
                if (size !== void 0) {
                  return sum + size;
                }
              }
            },
            0
          );
          return concatSeq;
        }
        function flattenFactory(iterable, depth, useKeys) {
          var flatSequence = makeSequence(iterable);
          flatSequence.__iterateUncached = function(fn, reverse) {
            var iterations = 0;
            var stopped = false;
            function flatDeep(iter, currentDepth) {
              var this$0 = this;
              iter.__iterate(function(v, k) {
                if ((!depth || currentDepth < depth) && isIterable(v)) {
                  flatDeep(v, currentDepth + 1);
                } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {
                  stopped = true;
                }
                return !stopped;
              }, reverse);
            }
            flatDeep(iterable, 0);
            return iterations;
          };
          flatSequence.__iteratorUncached = function(type, reverse) {
            var iterator = iterable.__iterator(type, reverse);
            var stack = [];
            var iterations = 0;
            return new Iterator(function() {
              while (iterator) {
                var step = iterator.next();
                if (step.done !== false) {
                  iterator = stack.pop();
                  continue;
                }
                var v = step.value;
                if (type === ITERATE_ENTRIES) {
                  v = v[1];
                }
                if ((!depth || stack.length < depth) && isIterable(v)) {
                  stack.push(iterator);
                  iterator = v.__iterator(type, reverse);
                } else {
                  return useKeys ? step : iteratorValue(type, iterations++, v, step);
                }
              }
              return iteratorDone();
            });
          };
          return flatSequence;
        }
        function flatMapFactory(iterable, mapper, context2) {
          var coerce = iterableClass(iterable);
          return iterable.toSeq().map(
            function(v, k) {
              return coerce(mapper.call(context2, v, k, iterable));
            }
          ).flatten(true);
        }
        function interposeFactory(iterable, separator) {
          var interposedSequence = makeSequence(iterable);
          interposedSequence.size = iterable.size && iterable.size * 2 - 1;
          interposedSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            var iterations = 0;
            iterable.__iterate(
              function(v, k) {
                return (!iterations || fn(separator, iterations++, this$0) !== false) && fn(v, iterations++, this$0) !== false;
              },
              reverse
            );
            return iterations;
          };
          interposedSequence.__iteratorUncached = function(type, reverse) {
            var iterator = iterable.__iterator(ITERATE_VALUES, reverse);
            var iterations = 0;
            var step;
            return new Iterator(function() {
              if (!step || iterations % 2) {
                step = iterator.next();
                if (step.done) {
                  return step;
                }
              }
              return iterations % 2 ? iteratorValue(type, iterations++, separator) : iteratorValue(type, iterations++, step.value, step);
            });
          };
          return interposedSequence;
        }
        function sortFactory(iterable, comparator, mapper) {
          if (!comparator) {
            comparator = defaultComparator;
          }
          var isKeyedIterable = isKeyed(iterable);
          var index = 0;
          var entries = iterable.toSeq().map(
            function(v, k) {
              return [k, v, index++, mapper ? mapper(v, k, iterable) : v];
            }
          ).toArray();
          entries.sort(function(a, b) {
            return comparator(a[3], b[3]) || a[2] - b[2];
          }).forEach(
            isKeyedIterable ? function(v, i) {
              entries[i].length = 2;
            } : function(v, i) {
              entries[i] = v[1];
            }
          );
          return isKeyedIterable ? KeyedSeq(entries) : isIndexed(iterable) ? IndexedSeq(entries) : SetSeq(entries);
        }
        function maxFactory(iterable, comparator, mapper) {
          if (!comparator) {
            comparator = defaultComparator;
          }
          if (mapper) {
            var entry = iterable.toSeq().map(function(v, k) {
              return [v, mapper(v, k, iterable)];
            }).reduce(function(a, b) {
              return maxCompare(comparator, a[1], b[1]) ? b : a;
            });
            return entry && entry[0];
          } else {
            return iterable.reduce(function(a, b) {
              return maxCompare(comparator, a, b) ? b : a;
            });
          }
        }
        function maxCompare(comparator, a, b) {
          var comp = comparator(b, a);
          return comp === 0 && b !== a && (b === void 0 || b === null || b !== b) || comp > 0;
        }
        function zipWithFactory(keyIter, zipper, iters) {
          var zipSequence = makeSequence(keyIter);
          zipSequence.size = new ArraySeq(iters).map(function(i) {
            return i.size;
          }).min();
          zipSequence.__iterate = function(fn, reverse) {
            var iterator = this.__iterator(ITERATE_VALUES, reverse);
            var step;
            var iterations = 0;
            while (!(step = iterator.next()).done) {
              if (fn(step.value, iterations++, this) === false) {
                break;
              }
            }
            return iterations;
          };
          zipSequence.__iteratorUncached = function(type, reverse) {
            var iterators = iters.map(
              function(i) {
                return i = Iterable(i), getIterator(reverse ? i.reverse() : i);
              }
            );
            var iterations = 0;
            var isDone = false;
            return new Iterator(function() {
              var steps;
              if (!isDone) {
                steps = iterators.map(function(i) {
                  return i.next();
                });
                isDone = steps.some(function(s) {
                  return s.done;
                });
              }
              if (isDone) {
                return iteratorDone();
              }
              return iteratorValue(
                type,
                iterations++,
                zipper.apply(null, steps.map(function(s) {
                  return s.value;
                }))
              );
            });
          };
          return zipSequence;
        }
        function reify(iter, seq) {
          return isSeq(iter) ? seq : iter.constructor(seq);
        }
        function validateEntry(entry) {
          if (entry !== Object(entry)) {
            throw new TypeError("Expected [K, V] tuple: " + entry);
          }
        }
        function resolveSize(iter) {
          assertNotInfinite(iter.size);
          return ensureSize(iter);
        }
        function iterableClass(iterable) {
          return isKeyed(iterable) ? KeyedIterable : isIndexed(iterable) ? IndexedIterable : SetIterable;
        }
        function makeSequence(iterable) {
          return Object.create(
            (isKeyed(iterable) ? KeyedSeq : isIndexed(iterable) ? IndexedSeq : SetSeq).prototype
          );
        }
        function cacheResultThrough() {
          if (this._iter.cacheResult) {
            this._iter.cacheResult();
            this.size = this._iter.size;
            return this;
          } else {
            return Seq.prototype.cacheResult.call(this);
          }
        }
        function defaultComparator(a, b) {
          return a > b ? 1 : a < b ? -1 : 0;
        }
        function forceIterator(keyPath) {
          var iter = getIterator(keyPath);
          if (!iter) {
            if (!isArrayLike2(keyPath)) {
              throw new TypeError("Expected iterable or array-like: " + keyPath);
            }
            iter = getIterator(Iterable(keyPath));
          }
          return iter;
        }
        createClass(Record, KeyedCollection);
        function Record(defaultValues, name) {
          var hasInitialized;
          var RecordType = function Record2(values2) {
            if (values2 instanceof RecordType) {
              return values2;
            }
            if (!(this instanceof RecordType)) {
              return new RecordType(values2);
            }
            if (!hasInitialized) {
              hasInitialized = true;
              var keys2 = Object.keys(defaultValues);
              setProps(RecordTypePrototype, keys2);
              RecordTypePrototype.size = keys2.length;
              RecordTypePrototype._name = name;
              RecordTypePrototype._keys = keys2;
              RecordTypePrototype._defaultValues = defaultValues;
            }
            this._map = Map2(values2);
          };
          var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
          RecordTypePrototype.constructor = RecordType;
          return RecordType;
        }
        Record.prototype.toString = function() {
          return this.__toString(recordName(this) + " {", "}");
        };
        Record.prototype.has = function(k) {
          return this._defaultValues.hasOwnProperty(k);
        };
        Record.prototype.get = function(k, notSetValue) {
          if (!this.has(k)) {
            return notSetValue;
          }
          var defaultVal = this._defaultValues[k];
          return this._map ? this._map.get(k, defaultVal) : defaultVal;
        };
        Record.prototype.clear = function() {
          if (this.__ownerID) {
            this._map && this._map.clear();
            return this;
          }
          var RecordType = this.constructor;
          return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));
        };
        Record.prototype.set = function(k, v) {
          if (!this.has(k)) {
            throw new Error('Cannot set unknown key "' + k + '" on ' + recordName(this));
          }
          if (this._map && !this._map.has(k)) {
            var defaultVal = this._defaultValues[k];
            if (v === defaultVal) {
              return this;
            }
          }
          var newMap = this._map && this._map.set(k, v);
          if (this.__ownerID || newMap === this._map) {
            return this;
          }
          return makeRecord(this, newMap);
        };
        Record.prototype.remove = function(k) {
          if (!this.has(k)) {
            return this;
          }
          var newMap = this._map && this._map.remove(k);
          if (this.__ownerID || newMap === this._map) {
            return this;
          }
          return makeRecord(this, newMap);
        };
        Record.prototype.wasAltered = function() {
          return this._map.wasAltered();
        };
        Record.prototype.__iterator = function(type, reverse) {
          var this$0 = this;
          return KeyedIterable(this._defaultValues).map(function(_2, k) {
            return this$0.get(k);
          }).__iterator(type, reverse);
        };
        Record.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          return KeyedIterable(this._defaultValues).map(function(_2, k) {
            return this$0.get(k);
          }).__iterate(fn, reverse);
        };
        Record.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          var newMap = this._map && this._map.__ensureOwner(ownerID);
          if (!ownerID) {
            this.__ownerID = ownerID;
            this._map = newMap;
            return this;
          }
          return makeRecord(this, newMap, ownerID);
        };
        var RecordPrototype = Record.prototype;
        RecordPrototype[DELETE] = RecordPrototype.remove;
        RecordPrototype.deleteIn = RecordPrototype.removeIn = MapPrototype.removeIn;
        RecordPrototype.merge = MapPrototype.merge;
        RecordPrototype.mergeWith = MapPrototype.mergeWith;
        RecordPrototype.mergeIn = MapPrototype.mergeIn;
        RecordPrototype.mergeDeep = MapPrototype.mergeDeep;
        RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;
        RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
        RecordPrototype.setIn = MapPrototype.setIn;
        RecordPrototype.update = MapPrototype.update;
        RecordPrototype.updateIn = MapPrototype.updateIn;
        RecordPrototype.withMutations = MapPrototype.withMutations;
        RecordPrototype.asMutable = MapPrototype.asMutable;
        RecordPrototype.asImmutable = MapPrototype.asImmutable;
        function makeRecord(likeRecord, map2, ownerID) {
          var record = Object.create(Object.getPrototypeOf(likeRecord));
          record._map = map2;
          record.__ownerID = ownerID;
          return record;
        }
        function recordName(record) {
          return record._name || record.constructor.name || "Record";
        }
        function setProps(prototype, names) {
          try {
            names.forEach(setProp.bind(void 0, prototype));
          } catch (error) {
          }
        }
        function setProp(prototype, name) {
          Object.defineProperty(prototype, name, {
            get: function() {
              return this.get(name);
            },
            set: function(value2) {
              invariant(this.__ownerID, "Cannot set on an immutable record.");
              this.set(name, value2);
            }
          });
        }
        createClass(Set2, SetCollection);
        function Set2(value2) {
          return value2 === null || value2 === void 0 ? emptySet() : isSet2(value2) && !isOrdered(value2) ? value2 : emptySet().withMutations(function(set2) {
            var iter = SetIterable(value2);
            assertNotInfinite(iter.size);
            iter.forEach(function(v) {
              return set2.add(v);
            });
          });
        }
        Set2.of = function() {
          return this(arguments);
        };
        Set2.fromKeys = function(value2) {
          return this(KeyedIterable(value2).keySeq());
        };
        Set2.prototype.toString = function() {
          return this.__toString("Set {", "}");
        };
        Set2.prototype.has = function(value2) {
          return this._map.has(value2);
        };
        Set2.prototype.add = function(value2) {
          return updateSet(this, this._map.set(value2, true));
        };
        Set2.prototype.remove = function(value2) {
          return updateSet(this, this._map.remove(value2));
        };
        Set2.prototype.clear = function() {
          return updateSet(this, this._map.clear());
        };
        Set2.prototype.union = function() {
          var iters = SLICE$0.call(arguments, 0);
          iters = iters.filter(function(x) {
            return x.size !== 0;
          });
          if (iters.length === 0) {
            return this;
          }
          if (this.size === 0 && !this.__ownerID && iters.length === 1) {
            return this.constructor(iters[0]);
          }
          return this.withMutations(function(set2) {
            for (var ii = 0; ii < iters.length; ii++) {
              SetIterable(iters[ii]).forEach(function(value2) {
                return set2.add(value2);
              });
            }
          });
        };
        Set2.prototype.intersect = function() {
          var iters = SLICE$0.call(arguments, 0);
          if (iters.length === 0) {
            return this;
          }
          iters = iters.map(function(iter) {
            return SetIterable(iter);
          });
          var originalSet = this;
          return this.withMutations(function(set2) {
            originalSet.forEach(function(value2) {
              if (!iters.every(function(iter) {
                return iter.includes(value2);
              })) {
                set2.remove(value2);
              }
            });
          });
        };
        Set2.prototype.subtract = function() {
          var iters = SLICE$0.call(arguments, 0);
          if (iters.length === 0) {
            return this;
          }
          iters = iters.map(function(iter) {
            return SetIterable(iter);
          });
          var originalSet = this;
          return this.withMutations(function(set2) {
            originalSet.forEach(function(value2) {
              if (iters.some(function(iter) {
                return iter.includes(value2);
              })) {
                set2.remove(value2);
              }
            });
          });
        };
        Set2.prototype.merge = function() {
          return this.union.apply(this, arguments);
        };
        Set2.prototype.mergeWith = function(merger) {
          var iters = SLICE$0.call(arguments, 1);
          return this.union.apply(this, iters);
        };
        Set2.prototype.sort = function(comparator) {
          return OrderedSet(sortFactory(this, comparator));
        };
        Set2.prototype.sortBy = function(mapper, comparator) {
          return OrderedSet(sortFactory(this, comparator, mapper));
        };
        Set2.prototype.wasAltered = function() {
          return this._map.wasAltered();
        };
        Set2.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          return this._map.__iterate(function(_2, k) {
            return fn(k, k, this$0);
          }, reverse);
        };
        Set2.prototype.__iterator = function(type, reverse) {
          return this._map.map(function(_2, k) {
            return k;
          }).__iterator(type, reverse);
        };
        Set2.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          var newMap = this._map.__ensureOwner(ownerID);
          if (!ownerID) {
            this.__ownerID = ownerID;
            this._map = newMap;
            return this;
          }
          return this.__make(newMap, ownerID);
        };
        function isSet2(maybeSet) {
          return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);
        }
        Set2.isSet = isSet2;
        var IS_SET_SENTINEL = "@@__IMMUTABLE_SET__@@";
        var SetPrototype = Set2.prototype;
        SetPrototype[IS_SET_SENTINEL] = true;
        SetPrototype[DELETE] = SetPrototype.remove;
        SetPrototype.mergeDeep = SetPrototype.merge;
        SetPrototype.mergeDeepWith = SetPrototype.mergeWith;
        SetPrototype.withMutations = MapPrototype.withMutations;
        SetPrototype.asMutable = MapPrototype.asMutable;
        SetPrototype.asImmutable = MapPrototype.asImmutable;
        SetPrototype.__empty = emptySet;
        SetPrototype.__make = makeSet;
        function updateSet(set2, newMap) {
          if (set2.__ownerID) {
            set2.size = newMap.size;
            set2._map = newMap;
            return set2;
          }
          return newMap === set2._map ? set2 : newMap.size === 0 ? set2.__empty() : set2.__make(newMap);
        }
        function makeSet(map2, ownerID) {
          var set2 = Object.create(SetPrototype);
          set2.size = map2 ? map2.size : 0;
          set2._map = map2;
          set2.__ownerID = ownerID;
          return set2;
        }
        var EMPTY_SET;
        function emptySet() {
          return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
        }
        createClass(OrderedSet, Set2);
        function OrderedSet(value2) {
          return value2 === null || value2 === void 0 ? emptyOrderedSet() : isOrderedSet(value2) ? value2 : emptyOrderedSet().withMutations(function(set2) {
            var iter = SetIterable(value2);
            assertNotInfinite(iter.size);
            iter.forEach(function(v) {
              return set2.add(v);
            });
          });
        }
        OrderedSet.of = function() {
          return this(arguments);
        };
        OrderedSet.fromKeys = function(value2) {
          return this(KeyedIterable(value2).keySeq());
        };
        OrderedSet.prototype.toString = function() {
          return this.__toString("OrderedSet {", "}");
        };
        function isOrderedSet(maybeOrderedSet) {
          return isSet2(maybeOrderedSet) && isOrdered(maybeOrderedSet);
        }
        OrderedSet.isOrderedSet = isOrderedSet;
        var OrderedSetPrototype = OrderedSet.prototype;
        OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;
        OrderedSetPrototype.__empty = emptyOrderedSet;
        OrderedSetPrototype.__make = makeOrderedSet;
        function makeOrderedSet(map2, ownerID) {
          var set2 = Object.create(OrderedSetPrototype);
          set2.size = map2 ? map2.size : 0;
          set2._map = map2;
          set2.__ownerID = ownerID;
          return set2;
        }
        var EMPTY_ORDERED_SET;
        function emptyOrderedSet() {
          return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
        }
        createClass(Stack2, IndexedCollection);
        function Stack2(value2) {
          return value2 === null || value2 === void 0 ? emptyStack() : isStack(value2) ? value2 : emptyStack().unshiftAll(value2);
        }
        Stack2.of = function() {
          return this(arguments);
        };
        Stack2.prototype.toString = function() {
          return this.__toString("Stack [", "]");
        };
        Stack2.prototype.get = function(index, notSetValue) {
          var head = this._head;
          index = wrapIndex(this, index);
          while (head && index--) {
            head = head.next;
          }
          return head ? head.value : notSetValue;
        };
        Stack2.prototype.peek = function() {
          return this._head && this._head.value;
        };
        Stack2.prototype.push = function() {
          if (arguments.length === 0) {
            return this;
          }
          var newSize = this.size + arguments.length;
          var head = this._head;
          for (var ii = arguments.length - 1; ii >= 0; ii--) {
            head = {
              value: arguments[ii],
              next: head
            };
          }
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };
        Stack2.prototype.pushAll = function(iter) {
          iter = IndexedIterable(iter);
          if (iter.size === 0) {
            return this;
          }
          assertNotInfinite(iter.size);
          var newSize = this.size;
          var head = this._head;
          iter.reverse().forEach(function(value2) {
            newSize++;
            head = {
              value: value2,
              next: head
            };
          });
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };
        Stack2.prototype.pop = function() {
          return this.slice(1);
        };
        Stack2.prototype.unshift = function() {
          return this.push.apply(this, arguments);
        };
        Stack2.prototype.unshiftAll = function(iter) {
          return this.pushAll(iter);
        };
        Stack2.prototype.shift = function() {
          return this.pop.apply(this, arguments);
        };
        Stack2.prototype.clear = function() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._head = void 0;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return emptyStack();
        };
        Stack2.prototype.slice = function(begin, end2) {
          if (wholeSlice(begin, end2, this.size)) {
            return this;
          }
          var resolvedBegin = resolveBegin(begin, this.size);
          var resolvedEnd = resolveEnd(end2, this.size);
          if (resolvedEnd !== this.size) {
            return IndexedCollection.prototype.slice.call(this, begin, end2);
          }
          var newSize = this.size - resolvedBegin;
          var head = this._head;
          while (resolvedBegin--) {
            head = head.next;
          }
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };
        Stack2.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            this.__ownerID = ownerID;
            this.__altered = false;
            return this;
          }
          return makeStack(this.size, this._head, ownerID, this.__hash);
        };
        Stack2.prototype.__iterate = function(fn, reverse) {
          if (reverse) {
            return this.reverse().__iterate(fn);
          }
          var iterations = 0;
          var node2 = this._head;
          while (node2) {
            if (fn(node2.value, iterations++, this) === false) {
              break;
            }
            node2 = node2.next;
          }
          return iterations;
        };
        Stack2.prototype.__iterator = function(type, reverse) {
          if (reverse) {
            return this.reverse().__iterator(type);
          }
          var iterations = 0;
          var node2 = this._head;
          return new Iterator(function() {
            if (node2) {
              var value2 = node2.value;
              node2 = node2.next;
              return iteratorValue(type, iterations++, value2);
            }
            return iteratorDone();
          });
        };
        function isStack(maybeStack) {
          return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);
        }
        Stack2.isStack = isStack;
        var IS_STACK_SENTINEL = "@@__IMMUTABLE_STACK__@@";
        var StackPrototype = Stack2.prototype;
        StackPrototype[IS_STACK_SENTINEL] = true;
        StackPrototype.withMutations = MapPrototype.withMutations;
        StackPrototype.asMutable = MapPrototype.asMutable;
        StackPrototype.asImmutable = MapPrototype.asImmutable;
        StackPrototype.wasAltered = MapPrototype.wasAltered;
        function makeStack(size, head, ownerID, hash3) {
          var map2 = Object.create(StackPrototype);
          map2.size = size;
          map2._head = head;
          map2.__ownerID = ownerID;
          map2.__hash = hash3;
          map2.__altered = false;
          return map2;
        }
        var EMPTY_STACK;
        function emptyStack() {
          return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
        }
        function mixin(ctor, methods) {
          var keyCopier = function(key) {
            ctor.prototype[key] = methods[key];
          };
          Object.keys(methods).forEach(keyCopier);
          Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(methods).forEach(keyCopier);
          return ctor;
        }
        Iterable.Iterator = Iterator;
        mixin(Iterable, {
          toArray: function() {
            assertNotInfinite(this.size);
            var array = new Array(this.size || 0);
            this.valueSeq().__iterate(function(v, i) {
              array[i] = v;
            });
            return array;
          },
          toIndexedSeq: function() {
            return new ToIndexedSequence(this);
          },
          toJS: function() {
            return this.toSeq().map(
              function(value2) {
                return value2 && typeof value2.toJS === "function" ? value2.toJS() : value2;
              }
            ).__toJS();
          },
          toJSON: function() {
            return this.toSeq().map(
              function(value2) {
                return value2 && typeof value2.toJSON === "function" ? value2.toJSON() : value2;
              }
            ).__toJS();
          },
          toKeyedSeq: function() {
            return new ToKeyedSequence(this, true);
          },
          toMap: function() {
            return Map2(this.toKeyedSeq());
          },
          toObject: function() {
            assertNotInfinite(this.size);
            var object = {};
            this.__iterate(function(v, k) {
              object[k] = v;
            });
            return object;
          },
          toOrderedMap: function() {
            return OrderedMap(this.toKeyedSeq());
          },
          toOrderedSet: function() {
            return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
          },
          toSet: function() {
            return Set2(isKeyed(this) ? this.valueSeq() : this);
          },
          toSetSeq: function() {
            return new ToSetSequence(this);
          },
          toSeq: function() {
            return isIndexed(this) ? this.toIndexedSeq() : isKeyed(this) ? this.toKeyedSeq() : this.toSetSeq();
          },
          toStack: function() {
            return Stack2(isKeyed(this) ? this.valueSeq() : this);
          },
          toList: function() {
            return List2(isKeyed(this) ? this.valueSeq() : this);
          },
          toString: function() {
            return "[Iterable]";
          },
          __toString: function(head, tail) {
            if (this.size === 0) {
              return head + tail;
            }
            return head + " " + this.toSeq().map(this.__toStringMapper).join(", ") + " " + tail;
          },
          concat: function() {
            var values2 = SLICE$0.call(arguments, 0);
            return reify(this, concatFactory(this, values2));
          },
          includes: function(searchValue) {
            return this.some(function(value2) {
              return is2(value2, searchValue);
            });
          },
          entries: function() {
            return this.__iterator(ITERATE_ENTRIES);
          },
          every: function(predicate, context2) {
            assertNotInfinite(this.size);
            var returnValue = true;
            this.__iterate(function(v, k, c) {
              if (!predicate.call(context2, v, k, c)) {
                returnValue = false;
                return false;
              }
            });
            return returnValue;
          },
          filter: function(predicate, context2) {
            return reify(this, filterFactory(this, predicate, context2, true));
          },
          find: function(predicate, context2, notSetValue) {
            var entry = this.findEntry(predicate, context2);
            return entry ? entry[1] : notSetValue;
          },
          forEach: function(sideEffect, context2) {
            assertNotInfinite(this.size);
            return this.__iterate(context2 ? sideEffect.bind(context2) : sideEffect);
          },
          join: function(separator) {
            assertNotInfinite(this.size);
            separator = separator !== void 0 ? "" + separator : ",";
            var joined = "";
            var isFirst = true;
            this.__iterate(function(v) {
              isFirst ? isFirst = false : joined += separator;
              joined += v !== null && v !== void 0 ? v.toString() : "";
            });
            return joined;
          },
          keys: function() {
            return this.__iterator(ITERATE_KEYS);
          },
          map: function(mapper, context2) {
            return reify(this, mapFactory(this, mapper, context2));
          },
          reduce: function(reducer, initialReduction, context2) {
            assertNotInfinite(this.size);
            var reduction;
            var useFirst;
            if (arguments.length < 2) {
              useFirst = true;
            } else {
              reduction = initialReduction;
            }
            this.__iterate(function(v, k, c) {
              if (useFirst) {
                useFirst = false;
                reduction = v;
              } else {
                reduction = reducer.call(context2, reduction, v, k, c);
              }
            });
            return reduction;
          },
          reduceRight: function(reducer, initialReduction, context2) {
            var reversed = this.toKeyedSeq().reverse();
            return reversed.reduce.apply(reversed, arguments);
          },
          reverse: function() {
            return reify(this, reverseFactory(this, true));
          },
          slice: function(begin, end2) {
            return reify(this, sliceFactory(this, begin, end2, true));
          },
          some: function(predicate, context2) {
            return !this.every(not(predicate), context2);
          },
          sort: function(comparator) {
            return reify(this, sortFactory(this, comparator));
          },
          values: function() {
            return this.__iterator(ITERATE_VALUES);
          },
          butLast: function() {
            return this.slice(0, -1);
          },
          isEmpty: function() {
            return this.size !== void 0 ? this.size === 0 : !this.some(function() {
              return true;
            });
          },
          count: function(predicate, context2) {
            return ensureSize(
              predicate ? this.toSeq().filter(predicate, context2) : this
            );
          },
          countBy: function(grouper, context2) {
            return countByFactory(this, grouper, context2);
          },
          equals: function(other) {
            return deepEqual2(this, other);
          },
          entrySeq: function() {
            var iterable = this;
            if (iterable._cache) {
              return new ArraySeq(iterable._cache);
            }
            var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();
            entriesSequence.fromEntrySeq = function() {
              return iterable.toSeq();
            };
            return entriesSequence;
          },
          filterNot: function(predicate, context2) {
            return this.filter(not(predicate), context2);
          },
          findEntry: function(predicate, context2, notSetValue) {
            var found = notSetValue;
            this.__iterate(function(v, k, c) {
              if (predicate.call(context2, v, k, c)) {
                found = [k, v];
                return false;
              }
            });
            return found;
          },
          findKey: function(predicate, context2) {
            var entry = this.findEntry(predicate, context2);
            return entry && entry[0];
          },
          findLast: function(predicate, context2, notSetValue) {
            return this.toKeyedSeq().reverse().find(predicate, context2, notSetValue);
          },
          findLastEntry: function(predicate, context2, notSetValue) {
            return this.toKeyedSeq().reverse().findEntry(predicate, context2, notSetValue);
          },
          findLastKey: function(predicate, context2) {
            return this.toKeyedSeq().reverse().findKey(predicate, context2);
          },
          first: function() {
            return this.find(returnTrue);
          },
          flatMap: function(mapper, context2) {
            return reify(this, flatMapFactory(this, mapper, context2));
          },
          flatten: function(depth) {
            return reify(this, flattenFactory(this, depth, true));
          },
          fromEntrySeq: function() {
            return new FromEntriesSequence(this);
          },
          get: function(searchKey, notSetValue) {
            return this.find(function(_2, key) {
              return is2(key, searchKey);
            }, void 0, notSetValue);
          },
          getIn: function(searchKeyPath, notSetValue) {
            var nested2 = this;
            var iter = forceIterator(searchKeyPath);
            var step;
            while (!(step = iter.next()).done) {
              var key = step.value;
              nested2 = nested2 && nested2.get ? nested2.get(key, NOT_SET) : NOT_SET;
              if (nested2 === NOT_SET) {
                return notSetValue;
              }
            }
            return nested2;
          },
          groupBy: function(grouper, context2) {
            return groupByFactory(this, grouper, context2);
          },
          has: function(searchKey) {
            return this.get(searchKey, NOT_SET) !== NOT_SET;
          },
          hasIn: function(searchKeyPath) {
            return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;
          },
          isSubset: function(iter) {
            iter = typeof iter.includes === "function" ? iter : Iterable(iter);
            return this.every(function(value2) {
              return iter.includes(value2);
            });
          },
          isSuperset: function(iter) {
            iter = typeof iter.isSubset === "function" ? iter : Iterable(iter);
            return iter.isSubset(this);
          },
          keyOf: function(searchValue) {
            return this.findKey(function(value2) {
              return is2(value2, searchValue);
            });
          },
          keySeq: function() {
            return this.toSeq().map(keyMapper).toIndexedSeq();
          },
          last: function() {
            return this.toSeq().reverse().first();
          },
          lastKeyOf: function(searchValue) {
            return this.toKeyedSeq().reverse().keyOf(searchValue);
          },
          max: function(comparator) {
            return maxFactory(this, comparator);
          },
          maxBy: function(mapper, comparator) {
            return maxFactory(this, comparator, mapper);
          },
          min: function(comparator) {
            return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);
          },
          minBy: function(mapper, comparator) {
            return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);
          },
          rest: function() {
            return this.slice(1);
          },
          skip: function(amount) {
            return this.slice(Math.max(0, amount));
          },
          skipLast: function(amount) {
            return reify(this, this.toSeq().reverse().skip(amount).reverse());
          },
          skipWhile: function(predicate, context2) {
            return reify(this, skipWhileFactory(this, predicate, context2, true));
          },
          skipUntil: function(predicate, context2) {
            return this.skipWhile(not(predicate), context2);
          },
          sortBy: function(mapper, comparator) {
            return reify(this, sortFactory(this, comparator, mapper));
          },
          take: function(amount) {
            return this.slice(0, Math.max(0, amount));
          },
          takeLast: function(amount) {
            return reify(this, this.toSeq().reverse().take(amount).reverse());
          },
          takeWhile: function(predicate, context2) {
            return reify(this, takeWhileFactory(this, predicate, context2));
          },
          takeUntil: function(predicate, context2) {
            return this.takeWhile(not(predicate), context2);
          },
          valueSeq: function() {
            return this.toIndexedSeq();
          },
          hashCode: function() {
            return this.__hash || (this.__hash = hashIterable(this));
          }
        });
        var IterablePrototype = Iterable.prototype;
        IterablePrototype[IS_ITERABLE_SENTINEL] = true;
        IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;
        IterablePrototype.__toJS = IterablePrototype.toArray;
        IterablePrototype.__toStringMapper = quoteString;
        IterablePrototype.inspect = IterablePrototype.toSource = function() {
          return this.toString();
        };
        IterablePrototype.chain = IterablePrototype.flatMap;
        IterablePrototype.contains = IterablePrototype.includes;
        mixin(KeyedIterable, {
          flip: function() {
            return reify(this, flipFactory(this));
          },
          mapEntries: function(mapper, context2) {
            var this$0 = this;
            var iterations = 0;
            return reify(
              this,
              this.toSeq().map(
                function(v, k) {
                  return mapper.call(context2, [k, v], iterations++, this$0);
                }
              ).fromEntrySeq()
            );
          },
          mapKeys: function(mapper, context2) {
            var this$0 = this;
            return reify(
              this,
              this.toSeq().flip().map(
                function(k, v) {
                  return mapper.call(context2, k, v, this$0);
                }
              ).flip()
            );
          }
        });
        var KeyedIterablePrototype = KeyedIterable.prototype;
        KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;
        KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;
        KeyedIterablePrototype.__toJS = IterablePrototype.toObject;
        KeyedIterablePrototype.__toStringMapper = function(v, k) {
          return JSON.stringify(k) + ": " + quoteString(v);
        };
        mixin(IndexedIterable, {
          toKeyedSeq: function() {
            return new ToKeyedSequence(this, false);
          },
          filter: function(predicate, context2) {
            return reify(this, filterFactory(this, predicate, context2, false));
          },
          findIndex: function(predicate, context2) {
            var entry = this.findEntry(predicate, context2);
            return entry ? entry[0] : -1;
          },
          indexOf: function(searchValue) {
            var key = this.keyOf(searchValue);
            return key === void 0 ? -1 : key;
          },
          lastIndexOf: function(searchValue) {
            var key = this.lastKeyOf(searchValue);
            return key === void 0 ? -1 : key;
          },
          reverse: function() {
            return reify(this, reverseFactory(this, false));
          },
          slice: function(begin, end2) {
            return reify(this, sliceFactory(this, begin, end2, false));
          },
          splice: function(index, removeNum) {
            var numArgs = arguments.length;
            removeNum = Math.max(removeNum | 0, 0);
            if (numArgs === 0 || numArgs === 2 && !removeNum) {
              return this;
            }
            index = resolveBegin(index, index < 0 ? this.count() : this.size);
            var spliced = this.slice(0, index);
            return reify(
              this,
              numArgs === 1 ? spliced : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))
            );
          },
          findLastIndex: function(predicate, context2) {
            var entry = this.findLastEntry(predicate, context2);
            return entry ? entry[0] : -1;
          },
          first: function() {
            return this.get(0);
          },
          flatten: function(depth) {
            return reify(this, flattenFactory(this, depth, false));
          },
          get: function(index, notSetValue) {
            index = wrapIndex(this, index);
            return index < 0 || (this.size === Infinity || this.size !== void 0 && index > this.size) ? notSetValue : this.find(function(_2, key) {
              return key === index;
            }, void 0, notSetValue);
          },
          has: function(index) {
            index = wrapIndex(this, index);
            return index >= 0 && (this.size !== void 0 ? this.size === Infinity || index < this.size : this.indexOf(index) !== -1);
          },
          interpose: function(separator) {
            return reify(this, interposeFactory(this, separator));
          },
          interleave: function() {
            var iterables = [this].concat(arrCopy(arguments));
            var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);
            var interleaved = zipped.flatten(true);
            if (zipped.size) {
              interleaved.size = zipped.size * iterables.length;
            }
            return reify(this, interleaved);
          },
          keySeq: function() {
            return Range(0, this.size);
          },
          last: function() {
            return this.get(-1);
          },
          skipWhile: function(predicate, context2) {
            return reify(this, skipWhileFactory(this, predicate, context2, false));
          },
          zip: function() {
            var iterables = [this].concat(arrCopy(arguments));
            return reify(this, zipWithFactory(this, defaultZipper, iterables));
          },
          zipWith: function(zipper) {
            var iterables = arrCopy(arguments);
            iterables[0] = this;
            return reify(this, zipWithFactory(this, zipper, iterables));
          }
        });
        IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;
        IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;
        mixin(SetIterable, {
          get: function(value2, notSetValue) {
            return this.has(value2) ? value2 : notSetValue;
          },
          includes: function(value2) {
            return this.has(value2);
          },
          keySeq: function() {
            return this.valueSeq();
          }
        });
        SetIterable.prototype.has = IterablePrototype.includes;
        SetIterable.prototype.contains = SetIterable.prototype.includes;
        mixin(KeyedSeq, KeyedIterable.prototype);
        mixin(IndexedSeq, IndexedIterable.prototype);
        mixin(SetSeq, SetIterable.prototype);
        mixin(KeyedCollection, KeyedIterable.prototype);
        mixin(IndexedCollection, IndexedIterable.prototype);
        mixin(SetCollection, SetIterable.prototype);
        function keyMapper(v, k) {
          return k;
        }
        function entryMapper(v, k) {
          return [k, v];
        }
        function not(predicate) {
          return function() {
            return !predicate.apply(this, arguments);
          };
        }
        function neg(predicate) {
          return function() {
            return -predicate.apply(this, arguments);
          };
        }
        function quoteString(value2) {
          return typeof value2 === "string" ? JSON.stringify(value2) : String(value2);
        }
        function defaultZipper() {
          return arrCopy(arguments);
        }
        function defaultNegComparator(a, b) {
          return a < b ? 1 : a > b ? -1 : 0;
        }
        function hashIterable(iterable) {
          if (iterable.size === Infinity) {
            return 0;
          }
          var ordered = isOrdered(iterable);
          var keyed = isKeyed(iterable);
          var h = ordered ? 1 : 0;
          var size = iterable.__iterate(
            keyed ? ordered ? function(v, k) {
              h = 31 * h + hashMerge(hash2(v), hash2(k)) | 0;
            } : function(v, k) {
              h = h + hashMerge(hash2(v), hash2(k)) | 0;
            } : ordered ? function(v) {
              h = 31 * h + hash2(v) | 0;
            } : function(v) {
              h = h + hash2(v) | 0;
            }
          );
          return murmurHashOfSize(size, h);
        }
        function murmurHashOfSize(size, h) {
          h = imul(h, 3432918353);
          h = imul(h << 15 | h >>> -15, 461845907);
          h = imul(h << 13 | h >>> -13, 5);
          h = (h + 3864292196 | 0) ^ size;
          h = imul(h ^ h >>> 16, 2246822507);
          h = imul(h ^ h >>> 13, 3266489909);
          h = smi(h ^ h >>> 16);
          return h;
        }
        function hashMerge(a, b) {
          return a ^ b + 2654435769 + (a << 6) + (a >> 2) | 0;
        }
        var Immutable2 = {
          Iterable,
          Seq,
          Collection,
          Map: Map2,
          OrderedMap,
          List: List2,
          Stack: Stack2,
          Set: Set2,
          OrderedSet,
          Record,
          Range,
          Repeat,
          is: is2,
          fromJS
        };
        return Immutable2;
      });
    })(immutable);
    const Immutable = immutable.exports;
    function arrayMap$3(array, iteratee) {
      var index = -1, length2 = array == null ? 0 : array.length, result = Array(length2);
      while (++index < length2) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    var _arrayMap = arrayMap$3;
    function listCacheClear$1() {
      this.__data__ = [];
      this.size = 0;
    }
    var _listCacheClear = listCacheClear$1;
    function eq$5(value2, other) {
      return value2 === other || value2 !== value2 && other !== other;
    }
    var eq_1 = eq$5;
    var eq$4 = eq_1;
    function assocIndexOf$4(array, key) {
      var length2 = array.length;
      while (length2--) {
        if (eq$4(array[length2][0], key)) {
          return length2;
        }
      }
      return -1;
    }
    var _assocIndexOf = assocIndexOf$4;
    var assocIndexOf$3 = _assocIndexOf;
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete$1(key) {
      var data = this.__data__, index = assocIndexOf$3(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    var _listCacheDelete = listCacheDelete$1;
    var assocIndexOf$2 = _assocIndexOf;
    function listCacheGet$1(key) {
      var data = this.__data__, index = assocIndexOf$2(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    var _listCacheGet = listCacheGet$1;
    var assocIndexOf$1 = _assocIndexOf;
    function listCacheHas$1(key) {
      return assocIndexOf$1(this.__data__, key) > -1;
    }
    var _listCacheHas = listCacheHas$1;
    var assocIndexOf = _assocIndexOf;
    function listCacheSet$1(key, value2) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value2]);
      } else {
        data[index][1] = value2;
      }
      return this;
    }
    var _listCacheSet = listCacheSet$1;
    var listCacheClear = _listCacheClear, listCacheDelete = _listCacheDelete, listCacheGet = _listCacheGet, listCacheHas = _listCacheHas, listCacheSet = _listCacheSet;
    function ListCache$4(entries) {
      var index = -1, length2 = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length2) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache$4.prototype.clear = listCacheClear;
    ListCache$4.prototype["delete"] = listCacheDelete;
    ListCache$4.prototype.get = listCacheGet;
    ListCache$4.prototype.has = listCacheHas;
    ListCache$4.prototype.set = listCacheSet;
    var _ListCache = ListCache$4;
    var ListCache$3 = _ListCache;
    function stackClear$1() {
      this.__data__ = new ListCache$3();
      this.size = 0;
    }
    var _stackClear = stackClear$1;
    function stackDelete$1(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    var _stackDelete = stackDelete$1;
    function stackGet$1(key) {
      return this.__data__.get(key);
    }
    var _stackGet = stackGet$1;
    function stackHas$1(key) {
      return this.__data__.has(key);
    }
    var _stackHas = stackHas$1;
    var freeGlobal$1 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
    var _freeGlobal = freeGlobal$1;
    var freeGlobal = _freeGlobal;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root$9 = freeGlobal || freeSelf || Function("return this")();
    var _root = root$9;
    var root$8 = _root;
    var Symbol$7 = root$8.Symbol;
    var _Symbol = Symbol$7;
    var Symbol$6 = _Symbol;
    var objectProto$f = Object.prototype;
    var hasOwnProperty$c = objectProto$f.hasOwnProperty;
    var nativeObjectToString$1 = objectProto$f.toString;
    var symToStringTag$1 = Symbol$6 ? Symbol$6.toStringTag : void 0;
    function getRawTag$1(value2) {
      var isOwn = hasOwnProperty$c.call(value2, symToStringTag$1), tag = value2[symToStringTag$1];
      try {
        value2[symToStringTag$1] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString$1.call(value2);
      if (unmasked) {
        if (isOwn) {
          value2[symToStringTag$1] = tag;
        } else {
          delete value2[symToStringTag$1];
        }
      }
      return result;
    }
    var _getRawTag = getRawTag$1;
    var objectProto$e = Object.prototype;
    var nativeObjectToString = objectProto$e.toString;
    function objectToString$1(value2) {
      return nativeObjectToString.call(value2);
    }
    var _objectToString = objectToString$1;
    var Symbol$5 = _Symbol, getRawTag = _getRawTag, objectToString = _objectToString;
    var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol$5 ? Symbol$5.toStringTag : void 0;
    function baseGetTag$6(value2) {
      if (value2 == null) {
        return value2 === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value2) ? getRawTag(value2) : objectToString(value2);
    }
    var _baseGetTag = baseGetTag$6;
    function isObject$g(value2) {
      var type = typeof value2;
      return value2 != null && (type == "object" || type == "function");
    }
    var isObject_1 = isObject$g;
    var baseGetTag$5 = _baseGetTag, isObject$f = isObject_1;
    var asyncTag = "[object AsyncFunction]", funcTag$2 = "[object Function]", genTag$1 = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
    function isFunction$3(value2) {
      if (!isObject$f(value2)) {
        return false;
      }
      var tag = baseGetTag$5(value2);
      return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
    }
    var isFunction_1 = isFunction$3;
    var root$7 = _root;
    var coreJsData$1 = root$7["__core-js_shared__"];
    var _coreJsData = coreJsData$1;
    var coreJsData = _coreJsData;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked$1(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    var _isMasked = isMasked$1;
    var funcProto$2 = Function.prototype;
    var funcToString$2 = funcProto$2.toString;
    function toSource$2(func) {
      if (func != null) {
        try {
          return funcToString$2.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    var _toSource = toSource$2;
    var isFunction$2 = isFunction_1, isMasked = _isMasked, isObject$e = isObject_1, toSource$1 = _toSource;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto$1 = Function.prototype, objectProto$d = Object.prototype;
    var funcToString$1 = funcProto$1.toString;
    var hasOwnProperty$b = objectProto$d.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString$1.call(hasOwnProperty$b).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative$1(value2) {
      if (!isObject$e(value2) || isMasked(value2)) {
        return false;
      }
      var pattern = isFunction$2(value2) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource$1(value2));
    }
    var _baseIsNative = baseIsNative$1;
    function getValue$1(object, key) {
      return object == null ? void 0 : object[key];
    }
    var _getValue = getValue$1;
    var baseIsNative = _baseIsNative, getValue = _getValue;
    function getNative$7(object, key) {
      var value2 = getValue(object, key);
      return baseIsNative(value2) ? value2 : void 0;
    }
    var _getNative = getNative$7;
    var getNative$6 = _getNative, root$6 = _root;
    var Map$4 = getNative$6(root$6, "Map");
    var _Map = Map$4;
    var getNative$5 = _getNative;
    var nativeCreate$4 = getNative$5(Object, "create");
    var _nativeCreate = nativeCreate$4;
    var nativeCreate$3 = _nativeCreate;
    function hashClear$1() {
      this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
      this.size = 0;
    }
    var _hashClear = hashClear$1;
    function hashDelete$1(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    var _hashDelete = hashDelete$1;
    var nativeCreate$2 = _nativeCreate;
    var HASH_UNDEFINED$2 = "__lodash_hash_undefined__";
    var objectProto$c = Object.prototype;
    var hasOwnProperty$a = objectProto$c.hasOwnProperty;
    function hashGet$1(key) {
      var data = this.__data__;
      if (nativeCreate$2) {
        var result = data[key];
        return result === HASH_UNDEFINED$2 ? void 0 : result;
      }
      return hasOwnProperty$a.call(data, key) ? data[key] : void 0;
    }
    var _hashGet = hashGet$1;
    var nativeCreate$1 = _nativeCreate;
    var objectProto$b = Object.prototype;
    var hasOwnProperty$9 = objectProto$b.hasOwnProperty;
    function hashHas$1(key) {
      var data = this.__data__;
      return nativeCreate$1 ? data[key] !== void 0 : hasOwnProperty$9.call(data, key);
    }
    var _hashHas = hashHas$1;
    var nativeCreate = _nativeCreate;
    var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
    function hashSet$1(key, value2) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value2 === void 0 ? HASH_UNDEFINED$1 : value2;
      return this;
    }
    var _hashSet = hashSet$1;
    var hashClear = _hashClear, hashDelete = _hashDelete, hashGet = _hashGet, hashHas = _hashHas, hashSet = _hashSet;
    function Hash$1(entries) {
      var index = -1, length2 = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length2) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash$1.prototype.clear = hashClear;
    Hash$1.prototype["delete"] = hashDelete;
    Hash$1.prototype.get = hashGet;
    Hash$1.prototype.has = hashHas;
    Hash$1.prototype.set = hashSet;
    var _Hash = Hash$1;
    var Hash = _Hash, ListCache$2 = _ListCache, Map$3 = _Map;
    function mapCacheClear$1() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map$3 || ListCache$2)(),
        "string": new Hash()
      };
    }
    var _mapCacheClear = mapCacheClear$1;
    function isKeyable$1(value2) {
      var type = typeof value2;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value2 !== "__proto__" : value2 === null;
    }
    var _isKeyable = isKeyable$1;
    var isKeyable = _isKeyable;
    function getMapData$4(map2, key) {
      var data = map2.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    var _getMapData = getMapData$4;
    var getMapData$3 = _getMapData;
    function mapCacheDelete$1(key) {
      var result = getMapData$3(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    var _mapCacheDelete = mapCacheDelete$1;
    var getMapData$2 = _getMapData;
    function mapCacheGet$1(key) {
      return getMapData$2(this, key).get(key);
    }
    var _mapCacheGet = mapCacheGet$1;
    var getMapData$1 = _getMapData;
    function mapCacheHas$1(key) {
      return getMapData$1(this, key).has(key);
    }
    var _mapCacheHas = mapCacheHas$1;
    var getMapData = _getMapData;
    function mapCacheSet$1(key, value2) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value2);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    var _mapCacheSet = mapCacheSet$1;
    var mapCacheClear = _mapCacheClear, mapCacheDelete = _mapCacheDelete, mapCacheGet = _mapCacheGet, mapCacheHas = _mapCacheHas, mapCacheSet = _mapCacheSet;
    function MapCache$3(entries) {
      var index = -1, length2 = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length2) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache$3.prototype.clear = mapCacheClear;
    MapCache$3.prototype["delete"] = mapCacheDelete;
    MapCache$3.prototype.get = mapCacheGet;
    MapCache$3.prototype.has = mapCacheHas;
    MapCache$3.prototype.set = mapCacheSet;
    var _MapCache = MapCache$3;
    var ListCache$1 = _ListCache, Map$2 = _Map, MapCache$2 = _MapCache;
    var LARGE_ARRAY_SIZE = 200;
    function stackSet$1(key, value2) {
      var data = this.__data__;
      if (data instanceof ListCache$1) {
        var pairs = data.__data__;
        if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value2]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache$2(pairs);
      }
      data.set(key, value2);
      this.size = data.size;
      return this;
    }
    var _stackSet = stackSet$1;
    var ListCache = _ListCache, stackClear = _stackClear, stackDelete = _stackDelete, stackGet = _stackGet, stackHas = _stackHas, stackSet = _stackSet;
    function Stack$4(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    Stack$4.prototype.clear = stackClear;
    Stack$4.prototype["delete"] = stackDelete;
    Stack$4.prototype.get = stackGet;
    Stack$4.prototype.has = stackHas;
    Stack$4.prototype.set = stackSet;
    var _Stack = Stack$4;
    function arrayEach$1(array, iteratee) {
      var index = -1, length2 = array == null ? 0 : array.length;
      while (++index < length2) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }
    var _arrayEach = arrayEach$1;
    var getNative$4 = _getNative;
    var defineProperty$2 = function() {
      try {
        var func = getNative$4(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    var _defineProperty = defineProperty$2;
    var defineProperty$1 = _defineProperty;
    function baseAssignValue$4(object, key, value2) {
      if (key == "__proto__" && defineProperty$1) {
        defineProperty$1(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value2,
          "writable": true
        });
      } else {
        object[key] = value2;
      }
    }
    var _baseAssignValue = baseAssignValue$4;
    var baseAssignValue$3 = _baseAssignValue, eq$3 = eq_1;
    var objectProto$a = Object.prototype;
    var hasOwnProperty$8 = objectProto$a.hasOwnProperty;
    function assignValue$3(object, key, value2) {
      var objValue = object[key];
      if (!(hasOwnProperty$8.call(object, key) && eq$3(objValue, value2)) || value2 === void 0 && !(key in object)) {
        baseAssignValue$3(object, key, value2);
      }
    }
    var _assignValue = assignValue$3;
    var assignValue$2 = _assignValue, baseAssignValue$2 = _baseAssignValue;
    function copyObject$6(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1, length2 = props.length;
      while (++index < length2) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue$2(object, key, newValue);
        } else {
          assignValue$2(object, key, newValue);
        }
      }
      return object;
    }
    var _copyObject = copyObject$6;
    function baseTimes$1(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    var _baseTimes = baseTimes$1;
    function isObjectLike$9(value2) {
      return value2 != null && typeof value2 == "object";
    }
    var isObjectLike_1 = isObjectLike$9;
    var baseGetTag$4 = _baseGetTag, isObjectLike$8 = isObjectLike_1;
    var argsTag$3 = "[object Arguments]";
    function baseIsArguments$1(value2) {
      return isObjectLike$8(value2) && baseGetTag$4(value2) == argsTag$3;
    }
    var _baseIsArguments = baseIsArguments$1;
    var baseIsArguments = _baseIsArguments, isObjectLike$7 = isObjectLike_1;
    var objectProto$9 = Object.prototype;
    var hasOwnProperty$7 = objectProto$9.hasOwnProperty;
    var propertyIsEnumerable$1 = objectProto$9.propertyIsEnumerable;
    var isArguments$4 = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value2) {
      return isObjectLike$7(value2) && hasOwnProperty$7.call(value2, "callee") && !propertyIsEnumerable$1.call(value2, "callee");
    };
    var isArguments_1 = isArguments$4;
    var isArray$b = Array.isArray;
    var isArray_1 = isArray$b;
    var isBuffer$4 = { exports: {} };
    function stubFalse() {
      return false;
    }
    var stubFalse_1 = stubFalse;
    (function(module2, exports2) {
      var root2 = _root, stubFalse2 = stubFalse_1;
      var freeExports = exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root2.Buffer : void 0;
      var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
      var isBuffer2 = nativeIsBuffer || stubFalse2;
      module2.exports = isBuffer2;
    })(isBuffer$4, isBuffer$4.exports);
    var MAX_SAFE_INTEGER$1 = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex$4(value2, length2) {
      var type = typeof value2;
      length2 = length2 == null ? MAX_SAFE_INTEGER$1 : length2;
      return !!length2 && (type == "number" || type != "symbol" && reIsUint.test(value2)) && (value2 > -1 && value2 % 1 == 0 && value2 < length2);
    }
    var _isIndex = isIndex$4;
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength$3(value2) {
      return typeof value2 == "number" && value2 > -1 && value2 % 1 == 0 && value2 <= MAX_SAFE_INTEGER;
    }
    var isLength_1 = isLength$3;
    var baseGetTag$3 = _baseGetTag, isLength$2 = isLength_1, isObjectLike$6 = isObjectLike_1;
    var argsTag$2 = "[object Arguments]", arrayTag$2 = "[object Array]", boolTag$3 = "[object Boolean]", dateTag$3 = "[object Date]", errorTag$2 = "[object Error]", funcTag$1 = "[object Function]", mapTag$5 = "[object Map]", numberTag$3 = "[object Number]", objectTag$4 = "[object Object]", regexpTag$3 = "[object RegExp]", setTag$5 = "[object Set]", stringTag$3 = "[object String]", weakMapTag$2 = "[object WeakMap]";
    var arrayBufferTag$3 = "[object ArrayBuffer]", dataViewTag$4 = "[object DataView]", float32Tag$2 = "[object Float32Array]", float64Tag$2 = "[object Float64Array]", int8Tag$2 = "[object Int8Array]", int16Tag$2 = "[object Int16Array]", int32Tag$2 = "[object Int32Array]", uint8Tag$2 = "[object Uint8Array]", uint8ClampedTag$2 = "[object Uint8ClampedArray]", uint16Tag$2 = "[object Uint16Array]", uint32Tag$2 = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
    typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$3] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] = typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$5] = typedArrayTags[numberTag$3] = typedArrayTags[objectTag$4] = typedArrayTags[regexpTag$3] = typedArrayTags[setTag$5] = typedArrayTags[stringTag$3] = typedArrayTags[weakMapTag$2] = false;
    function baseIsTypedArray$1(value2) {
      return isObjectLike$6(value2) && isLength$2(value2.length) && !!typedArrayTags[baseGetTag$3(value2)];
    }
    var _baseIsTypedArray = baseIsTypedArray$1;
    function baseUnary$3(func) {
      return function(value2) {
        return func(value2);
      };
    }
    var _baseUnary = baseUnary$3;
    var _nodeUtil = { exports: {} };
    (function(module2, exports2) {
      var freeGlobal2 = _freeGlobal;
      var freeExports = exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal2.process;
      var nodeUtil2 = function() {
        try {
          var types2 = freeModule && freeModule.require && freeModule.require("util").types;
          if (types2) {
            return types2;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      module2.exports = nodeUtil2;
    })(_nodeUtil, _nodeUtil.exports);
    var baseIsTypedArray = _baseIsTypedArray, baseUnary$2 = _baseUnary, nodeUtil$2 = _nodeUtil.exports;
    var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray;
    var isTypedArray$3 = nodeIsTypedArray ? baseUnary$2(nodeIsTypedArray) : baseIsTypedArray;
    var isTypedArray_1 = isTypedArray$3;
    var baseTimes = _baseTimes, isArguments$3 = isArguments_1, isArray$a = isArray_1, isBuffer$3 = isBuffer$4.exports, isIndex$3 = _isIndex, isTypedArray$2 = isTypedArray_1;
    var objectProto$8 = Object.prototype;
    var hasOwnProperty$6 = objectProto$8.hasOwnProperty;
    function arrayLikeKeys$2(value2, inherited) {
      var isArr = isArray$a(value2), isArg = !isArr && isArguments$3(value2), isBuff = !isArr && !isArg && isBuffer$3(value2), isType = !isArr && !isArg && !isBuff && isTypedArray$2(value2), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value2.length, String) : [], length2 = result.length;
      for (var key in value2) {
        if ((inherited || hasOwnProperty$6.call(value2, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex$3(key, length2)))) {
          result.push(key);
        }
      }
      return result;
    }
    var _arrayLikeKeys = arrayLikeKeys$2;
    var objectProto$7 = Object.prototype;
    function isPrototype$3(value2) {
      var Ctor = value2 && value2.constructor, proto2 = typeof Ctor == "function" && Ctor.prototype || objectProto$7;
      return value2 === proto2;
    }
    var _isPrototype = isPrototype$3;
    function overArg$2(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var _overArg = overArg$2;
    var overArg$1 = _overArg;
    var nativeKeys$1 = overArg$1(Object.keys, Object);
    var _nativeKeys = nativeKeys$1;
    var isPrototype$2 = _isPrototype, nativeKeys = _nativeKeys;
    var objectProto$6 = Object.prototype;
    var hasOwnProperty$5 = objectProto$6.hasOwnProperty;
    function baseKeys$1(object) {
      if (!isPrototype$2(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty$5.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    var _baseKeys = baseKeys$1;
    var isFunction$1 = isFunction_1, isLength$1 = isLength_1;
    function isArrayLike$4(value2) {
      return value2 != null && isLength$1(value2.length) && !isFunction$1(value2);
    }
    var isArrayLike_1 = isArrayLike$4;
    var arrayLikeKeys$1 = _arrayLikeKeys, baseKeys = _baseKeys, isArrayLike$3 = isArrayLike_1;
    function keys$5(object) {
      return isArrayLike$3(object) ? arrayLikeKeys$1(object) : baseKeys(object);
    }
    var keys_1 = keys$5;
    var copyObject$5 = _copyObject, keys$4 = keys_1;
    function baseAssign$1(object, source) {
      return object && copyObject$5(source, keys$4(source), object);
    }
    var _baseAssign = baseAssign$1;
    function nativeKeysIn$1(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    var _nativeKeysIn = nativeKeysIn$1;
    var isObject$d = isObject_1, isPrototype$1 = _isPrototype, nativeKeysIn = _nativeKeysIn;
    var objectProto$5 = Object.prototype;
    var hasOwnProperty$4 = objectProto$5.hasOwnProperty;
    function baseKeysIn$1(object) {
      if (!isObject$d(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype$1(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty$4.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    var _baseKeysIn = baseKeysIn$1;
    var arrayLikeKeys = _arrayLikeKeys, baseKeysIn = _baseKeysIn, isArrayLike$2 = isArrayLike_1;
    function keysIn$5(object) {
      return isArrayLike$2(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    var keysIn_1 = keysIn$5;
    var copyObject$4 = _copyObject, keysIn$4 = keysIn_1;
    function baseAssignIn$1(object, source) {
      return object && copyObject$4(source, keysIn$4(source), object);
    }
    var _baseAssignIn = baseAssignIn$1;
    var _cloneBuffer = { exports: {} };
    (function(module2, exports2) {
      var root2 = _root;
      var freeExports = exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root2.Buffer : void 0, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
      function cloneBuffer2(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length2 = buffer.length, result = allocUnsafe ? allocUnsafe(length2) : new buffer.constructor(length2);
        buffer.copy(result);
        return result;
      }
      module2.exports = cloneBuffer2;
    })(_cloneBuffer, _cloneBuffer.exports);
    function copyArray$2(source, array) {
      var index = -1, length2 = source.length;
      array || (array = Array(length2));
      while (++index < length2) {
        array[index] = source[index];
      }
      return array;
    }
    var _copyArray = copyArray$2;
    function arrayFilter$1(array, predicate) {
      var index = -1, length2 = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length2) {
        var value2 = array[index];
        if (predicate(value2, index, array)) {
          result[resIndex++] = value2;
        }
      }
      return result;
    }
    var _arrayFilter = arrayFilter$1;
    function stubArray$2() {
      return [];
    }
    var stubArray_1 = stubArray$2;
    var arrayFilter = _arrayFilter, stubArray$1 = stubArray_1;
    var objectProto$4 = Object.prototype;
    var propertyIsEnumerable = objectProto$4.propertyIsEnumerable;
    var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
    var getSymbols$3 = !nativeGetSymbols$1 ? stubArray$1 : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols$1(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    var _getSymbols = getSymbols$3;
    var copyObject$3 = _copyObject, getSymbols$2 = _getSymbols;
    function copySymbols$1(source, object) {
      return copyObject$3(source, getSymbols$2(source), object);
    }
    var _copySymbols = copySymbols$1;
    function arrayPush$3(array, values2) {
      var index = -1, length2 = values2.length, offset2 = array.length;
      while (++index < length2) {
        array[offset2 + index] = values2[index];
      }
      return array;
    }
    var _arrayPush = arrayPush$3;
    var overArg = _overArg;
    var getPrototype$3 = overArg(Object.getPrototypeOf, Object);
    var _getPrototype = getPrototype$3;
    var arrayPush$2 = _arrayPush, getPrototype$2 = _getPrototype, getSymbols$1 = _getSymbols, stubArray = stubArray_1;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush$2(result, getSymbols$1(object));
        object = getPrototype$2(object);
      }
      return result;
    };
    var _getSymbolsIn = getSymbolsIn$2;
    var copyObject$2 = _copyObject, getSymbolsIn$1 = _getSymbolsIn;
    function copySymbolsIn$1(source, object) {
      return copyObject$2(source, getSymbolsIn$1(source), object);
    }
    var _copySymbolsIn = copySymbolsIn$1;
    var arrayPush$1 = _arrayPush, isArray$9 = isArray_1;
    function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray$9(object) ? result : arrayPush$1(result, symbolsFunc(object));
    }
    var _baseGetAllKeys = baseGetAllKeys$2;
    var baseGetAllKeys$1 = _baseGetAllKeys, getSymbols = _getSymbols, keys$3 = keys_1;
    function getAllKeys$2(object) {
      return baseGetAllKeys$1(object, keys$3, getSymbols);
    }
    var _getAllKeys = getAllKeys$2;
    var baseGetAllKeys = _baseGetAllKeys, getSymbolsIn = _getSymbolsIn, keysIn$3 = keysIn_1;
    function getAllKeysIn$3(object) {
      return baseGetAllKeys(object, keysIn$3, getSymbolsIn);
    }
    var _getAllKeysIn = getAllKeysIn$3;
    var getNative$3 = _getNative, root$5 = _root;
    var DataView$1 = getNative$3(root$5, "DataView");
    var _DataView = DataView$1;
    var getNative$2 = _getNative, root$4 = _root;
    var Promise$2 = getNative$2(root$4, "Promise");
    var _Promise = Promise$2;
    var getNative$1 = _getNative, root$3 = _root;
    var Set$2 = getNative$1(root$3, "Set");
    var _Set = Set$2;
    var getNative = _getNative, root$2 = _root;
    var WeakMap$2 = getNative(root$2, "WeakMap");
    var _WeakMap = WeakMap$2;
    var DataView = _DataView, Map$1 = _Map, Promise$1 = _Promise, Set$1 = _Set, WeakMap$1 = _WeakMap, baseGetTag$2 = _baseGetTag, toSource = _toSource;
    var mapTag$4 = "[object Map]", objectTag$3 = "[object Object]", promiseTag = "[object Promise]", setTag$4 = "[object Set]", weakMapTag$1 = "[object WeakMap]";
    var dataViewTag$3 = "[object DataView]";
    var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map$1), promiseCtorString = toSource(Promise$1), setCtorString = toSource(Set$1), weakMapCtorString = toSource(WeakMap$1);
    var getTag$4 = baseGetTag$2;
    if (DataView && getTag$4(new DataView(new ArrayBuffer(1))) != dataViewTag$3 || Map$1 && getTag$4(new Map$1()) != mapTag$4 || Promise$1 && getTag$4(Promise$1.resolve()) != promiseTag || Set$1 && getTag$4(new Set$1()) != setTag$4 || WeakMap$1 && getTag$4(new WeakMap$1()) != weakMapTag$1) {
      getTag$4 = function(value2) {
        var result = baseGetTag$2(value2), Ctor = result == objectTag$3 ? value2.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag$3;
            case mapCtorString:
              return mapTag$4;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag$4;
            case weakMapCtorString:
              return weakMapTag$1;
          }
        }
        return result;
      };
    }
    var _getTag = getTag$4;
    var objectProto$3 = Object.prototype;
    var hasOwnProperty$3 = objectProto$3.hasOwnProperty;
    function initCloneArray$1(array) {
      var length2 = array.length, result = new array.constructor(length2);
      if (length2 && typeof array[0] == "string" && hasOwnProperty$3.call(array, "index")) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }
    var _initCloneArray = initCloneArray$1;
    var root$1 = _root;
    var Uint8Array$2 = root$1.Uint8Array;
    var _Uint8Array = Uint8Array$2;
    var Uint8Array$1 = _Uint8Array;
    function cloneArrayBuffer$3(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
      return result;
    }
    var _cloneArrayBuffer = cloneArrayBuffer$3;
    var cloneArrayBuffer$2 = _cloneArrayBuffer;
    function cloneDataView$1(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer$2(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }
    var _cloneDataView = cloneDataView$1;
    var reFlags = /\w*$/;
    function cloneRegExp$1(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }
    var _cloneRegExp = cloneRegExp$1;
    var Symbol$4 = _Symbol;
    var symbolProto$2 = Symbol$4 ? Symbol$4.prototype : void 0, symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : void 0;
    function cloneSymbol$1(symbol) {
      return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
    }
    var _cloneSymbol = cloneSymbol$1;
    var cloneArrayBuffer$1 = _cloneArrayBuffer;
    function cloneTypedArray$2(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer$1(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    var _cloneTypedArray = cloneTypedArray$2;
    var cloneArrayBuffer = _cloneArrayBuffer, cloneDataView = _cloneDataView, cloneRegExp = _cloneRegExp, cloneSymbol = _cloneSymbol, cloneTypedArray$1 = _cloneTypedArray;
    var boolTag$2 = "[object Boolean]", dateTag$2 = "[object Date]", mapTag$3 = "[object Map]", numberTag$2 = "[object Number]", regexpTag$2 = "[object RegExp]", setTag$3 = "[object Set]", stringTag$2 = "[object String]", symbolTag$3 = "[object Symbol]";
    var arrayBufferTag$2 = "[object ArrayBuffer]", dataViewTag$2 = "[object DataView]", float32Tag$1 = "[object Float32Array]", float64Tag$1 = "[object Float64Array]", int8Tag$1 = "[object Int8Array]", int16Tag$1 = "[object Int16Array]", int32Tag$1 = "[object Int32Array]", uint8Tag$1 = "[object Uint8Array]", uint8ClampedTag$1 = "[object Uint8ClampedArray]", uint16Tag$1 = "[object Uint16Array]", uint32Tag$1 = "[object Uint32Array]";
    function initCloneByTag$1(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag$2:
          return cloneArrayBuffer(object);
        case boolTag$2:
        case dateTag$2:
          return new Ctor(+object);
        case dataViewTag$2:
          return cloneDataView(object, isDeep);
        case float32Tag$1:
        case float64Tag$1:
        case int8Tag$1:
        case int16Tag$1:
        case int32Tag$1:
        case uint8Tag$1:
        case uint8ClampedTag$1:
        case uint16Tag$1:
        case uint32Tag$1:
          return cloneTypedArray$1(object, isDeep);
        case mapTag$3:
          return new Ctor();
        case numberTag$2:
        case stringTag$2:
          return new Ctor(object);
        case regexpTag$2:
          return cloneRegExp(object);
        case setTag$3:
          return new Ctor();
        case symbolTag$3:
          return cloneSymbol(object);
      }
    }
    var _initCloneByTag = initCloneByTag$1;
    var isObject$c = isObject_1;
    var objectCreate = Object.create;
    var baseCreate$1 = function() {
      function object() {
      }
      return function(proto2) {
        if (!isObject$c(proto2)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto2);
        }
        object.prototype = proto2;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    var _baseCreate = baseCreate$1;
    var baseCreate = _baseCreate, getPrototype$1 = _getPrototype, isPrototype = _isPrototype;
    function initCloneObject$2(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype$1(object)) : {};
    }
    var _initCloneObject = initCloneObject$2;
    var getTag$3 = _getTag, isObjectLike$5 = isObjectLike_1;
    var mapTag$2 = "[object Map]";
    function baseIsMap$1(value2) {
      return isObjectLike$5(value2) && getTag$3(value2) == mapTag$2;
    }
    var _baseIsMap = baseIsMap$1;
    var baseIsMap = _baseIsMap, baseUnary$1 = _baseUnary, nodeUtil$1 = _nodeUtil.exports;
    var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;
    var isMap$1 = nodeIsMap ? baseUnary$1(nodeIsMap) : baseIsMap;
    var isMap_1 = isMap$1;
    var getTag$2 = _getTag, isObjectLike$4 = isObjectLike_1;
    var setTag$2 = "[object Set]";
    function baseIsSet$1(value2) {
      return isObjectLike$4(value2) && getTag$2(value2) == setTag$2;
    }
    var _baseIsSet = baseIsSet$1;
    var baseIsSet = _baseIsSet, baseUnary = _baseUnary, nodeUtil = _nodeUtil.exports;
    var nodeIsSet = nodeUtil && nodeUtil.isSet;
    var isSet$1 = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
    var isSet_1 = isSet$1;
    var Stack$3 = _Stack, arrayEach = _arrayEach, assignValue$1 = _assignValue, baseAssign = _baseAssign, baseAssignIn = _baseAssignIn, cloneBuffer$1 = _cloneBuffer.exports, copyArray$1 = _copyArray, copySymbols = _copySymbols, copySymbolsIn = _copySymbolsIn, getAllKeys$1 = _getAllKeys, getAllKeysIn$2 = _getAllKeysIn, getTag$1 = _getTag, initCloneArray = _initCloneArray, initCloneByTag = _initCloneByTag, initCloneObject$1 = _initCloneObject, isArray$8 = isArray_1, isBuffer$2 = isBuffer$4.exports, isMap = isMap_1, isObject$b = isObject_1, isSet = isSet_1, keys$2 = keys_1, keysIn$2 = keysIn_1;
    var CLONE_DEEP_FLAG$1 = 1, CLONE_FLAT_FLAG$1 = 2, CLONE_SYMBOLS_FLAG$1 = 4;
    var argsTag$1 = "[object Arguments]", arrayTag$1 = "[object Array]", boolTag$1 = "[object Boolean]", dateTag$1 = "[object Date]", errorTag$1 = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag$1 = "[object Map]", numberTag$1 = "[object Number]", objectTag$2 = "[object Object]", regexpTag$1 = "[object RegExp]", setTag$1 = "[object Set]", stringTag$1 = "[object String]", symbolTag$2 = "[object Symbol]", weakMapTag = "[object WeakMap]";
    var arrayBufferTag$1 = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
    var cloneableTags = {};
    cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] = cloneableTags[boolTag$1] = cloneableTags[dateTag$1] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag$1] = cloneableTags[numberTag$1] = cloneableTags[objectTag$2] = cloneableTags[regexpTag$1] = cloneableTags[setTag$1] = cloneableTags[stringTag$1] = cloneableTags[symbolTag$2] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag$1] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    function baseClone$1(value2, bitmask, customizer, key, object, stack) {
      var result, isDeep = bitmask & CLONE_DEEP_FLAG$1, isFlat = bitmask & CLONE_FLAT_FLAG$1, isFull = bitmask & CLONE_SYMBOLS_FLAG$1;
      if (customizer) {
        result = object ? customizer(value2, key, object, stack) : customizer(value2);
      }
      if (result !== void 0) {
        return result;
      }
      if (!isObject$b(value2)) {
        return value2;
      }
      var isArr = isArray$8(value2);
      if (isArr) {
        result = initCloneArray(value2);
        if (!isDeep) {
          return copyArray$1(value2, result);
        }
      } else {
        var tag = getTag$1(value2), isFunc = tag == funcTag || tag == genTag;
        if (isBuffer$2(value2)) {
          return cloneBuffer$1(value2, isDeep);
        }
        if (tag == objectTag$2 || tag == argsTag$1 || isFunc && !object) {
          result = isFlat || isFunc ? {} : initCloneObject$1(value2);
          if (!isDeep) {
            return isFlat ? copySymbolsIn(value2, baseAssignIn(result, value2)) : copySymbols(value2, baseAssign(result, value2));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value2 : {};
          }
          result = initCloneByTag(value2, tag, isDeep);
        }
      }
      stack || (stack = new Stack$3());
      var stacked = stack.get(value2);
      if (stacked) {
        return stacked;
      }
      stack.set(value2, result);
      if (isSet(value2)) {
        value2.forEach(function(subValue) {
          result.add(baseClone$1(subValue, bitmask, customizer, subValue, value2, stack));
        });
      } else if (isMap(value2)) {
        value2.forEach(function(subValue, key2) {
          result.set(key2, baseClone$1(subValue, bitmask, customizer, key2, value2, stack));
        });
      }
      var keysFunc = isFull ? isFlat ? getAllKeysIn$2 : getAllKeys$1 : isFlat ? keysIn$2 : keys$2;
      var props = isArr ? void 0 : keysFunc(value2);
      arrayEach(props || value2, function(subValue, key2) {
        if (props) {
          key2 = subValue;
          subValue = value2[key2];
        }
        assignValue$1(result, key2, baseClone$1(subValue, bitmask, customizer, key2, value2, stack));
      });
      return result;
    }
    var _baseClone = baseClone$1;
    var baseGetTag$1 = _baseGetTag, isObjectLike$3 = isObjectLike_1;
    var symbolTag$1 = "[object Symbol]";
    function isSymbol$4(value2) {
      return typeof value2 == "symbol" || isObjectLike$3(value2) && baseGetTag$1(value2) == symbolTag$1;
    }
    var isSymbol_1 = isSymbol$4;
    var isArray$7 = isArray_1, isSymbol$3 = isSymbol_1;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
    function isKey$3(value2, object) {
      if (isArray$7(value2)) {
        return false;
      }
      var type = typeof value2;
      if (type == "number" || type == "symbol" || type == "boolean" || value2 == null || isSymbol$3(value2)) {
        return true;
      }
      return reIsPlainProp.test(value2) || !reIsDeepProp.test(value2) || object != null && value2 in Object(object);
    }
    var _isKey = isKey$3;
    var MapCache$1 = _MapCache;
    var FUNC_ERROR_TEXT$2 = "Expected a function";
    function memoize$1(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT$2);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize$1.Cache || MapCache$1)();
      return memoized;
    }
    memoize$1.Cache = MapCache$1;
    var memoize_1 = memoize$1;
    var memoize = memoize_1;
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped$1(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });
      var cache = result.cache;
      return result;
    }
    var _memoizeCapped = memoizeCapped$1;
    var memoizeCapped = _memoizeCapped;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath$1 = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46) {
        result.push("");
      }
      string.replace(rePropName, function(match5, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match5);
      });
      return result;
    });
    var _stringToPath = stringToPath$1;
    var Symbol$3 = _Symbol, arrayMap$2 = _arrayMap, isArray$6 = isArray_1, isSymbol$2 = isSymbol_1;
    var INFINITY$2 = 1 / 0;
    var symbolProto$1 = Symbol$3 ? Symbol$3.prototype : void 0, symbolToString = symbolProto$1 ? symbolProto$1.toString : void 0;
    function baseToString$2(value2) {
      if (typeof value2 == "string") {
        return value2;
      }
      if (isArray$6(value2)) {
        return arrayMap$2(value2, baseToString$2) + "";
      }
      if (isSymbol$2(value2)) {
        return symbolToString ? symbolToString.call(value2) : "";
      }
      var result = value2 + "";
      return result == "0" && 1 / value2 == -INFINITY$2 ? "-0" : result;
    }
    var _baseToString = baseToString$2;
    var baseToString$1 = _baseToString;
    function toString$2(value2) {
      return value2 == null ? "" : baseToString$1(value2);
    }
    var toString_1 = toString$2;
    var isArray$5 = isArray_1, isKey$2 = _isKey, stringToPath = _stringToPath, toString$1 = toString_1;
    function castPath$6(value2, object) {
      if (isArray$5(value2)) {
        return value2;
      }
      return isKey$2(value2, object) ? [value2] : stringToPath(toString$1(value2));
    }
    var _castPath = castPath$6;
    function last$1(array) {
      var length2 = array == null ? 0 : array.length;
      return length2 ? array[length2 - 1] : void 0;
    }
    var last_1 = last$1;
    var isSymbol$1 = isSymbol_1;
    var INFINITY$1 = 1 / 0;
    function toKey$6(value2) {
      if (typeof value2 == "string" || isSymbol$1(value2)) {
        return value2;
      }
      var result = value2 + "";
      return result == "0" && 1 / value2 == -INFINITY$1 ? "-0" : result;
    }
    var _toKey = toKey$6;
    var castPath$5 = _castPath, toKey$5 = _toKey;
    function baseGet$4(object, path) {
      path = castPath$5(path, object);
      var index = 0, length2 = path.length;
      while (object != null && index < length2) {
        object = object[toKey$5(path[index++])];
      }
      return index && index == length2 ? object : void 0;
    }
    var _baseGet = baseGet$4;
    function baseSlice$1(array, start2, end2) {
      var index = -1, length2 = array.length;
      if (start2 < 0) {
        start2 = -start2 > length2 ? 0 : length2 + start2;
      }
      end2 = end2 > length2 ? length2 : end2;
      if (end2 < 0) {
        end2 += length2;
      }
      length2 = start2 > end2 ? 0 : end2 - start2 >>> 0;
      start2 >>>= 0;
      var result = Array(length2);
      while (++index < length2) {
        result[index] = array[index + start2];
      }
      return result;
    }
    var _baseSlice = baseSlice$1;
    var baseGet$3 = _baseGet, baseSlice = _baseSlice;
    function parent$1(object, path) {
      return path.length < 2 ? object : baseGet$3(object, baseSlice(path, 0, -1));
    }
    var _parent = parent$1;
    var castPath$4 = _castPath, last = last_1, parent = _parent, toKey$4 = _toKey;
    function baseUnset$1(object, path) {
      path = castPath$4(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey$4(last(path))];
    }
    var _baseUnset = baseUnset$1;
    var baseGetTag = _baseGetTag, getPrototype = _getPrototype, isObjectLike$2 = isObjectLike_1;
    var objectTag$1 = "[object Object]";
    var funcProto = Function.prototype, objectProto$2 = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty$2 = objectProto$2.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject$4(value2) {
      if (!isObjectLike$2(value2) || baseGetTag(value2) != objectTag$1) {
        return false;
      }
      var proto2 = getPrototype(value2);
      if (proto2 === null) {
        return true;
      }
      var Ctor = hasOwnProperty$2.call(proto2, "constructor") && proto2.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    var isPlainObject_1 = isPlainObject$4;
    var isPlainObject$3 = isPlainObject_1;
    function customOmitClone$1(value2) {
      return isPlainObject$3(value2) ? void 0 : value2;
    }
    var _customOmitClone = customOmitClone$1;
    var Symbol$2 = _Symbol, isArguments$2 = isArguments_1, isArray$4 = isArray_1;
    var spreadableSymbol = Symbol$2 ? Symbol$2.isConcatSpreadable : void 0;
    function isFlattenable$1(value2) {
      return isArray$4(value2) || isArguments$2(value2) || !!(spreadableSymbol && value2 && value2[spreadableSymbol]);
    }
    var _isFlattenable = isFlattenable$1;
    var arrayPush = _arrayPush, isFlattenable = _isFlattenable;
    function baseFlatten$1(array, depth, predicate, isStrict, result) {
      var index = -1, length2 = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index < length2) {
        var value2 = array[index];
        if (depth > 0 && predicate(value2)) {
          if (depth > 1) {
            baseFlatten$1(value2, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value2);
          }
        } else if (!isStrict) {
          result[result.length] = value2;
        }
      }
      return result;
    }
    var _baseFlatten = baseFlatten$1;
    var baseFlatten = _baseFlatten;
    function flatten$1(array) {
      var length2 = array == null ? 0 : array.length;
      return length2 ? baseFlatten(array, 1) : [];
    }
    var flatten_1 = flatten$1;
    function apply$1(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    var _apply = apply$1;
    var apply = _apply;
    var nativeMax$2 = Math.max;
    function overRest$2(func, start2, transform) {
      start2 = nativeMax$2(start2 === void 0 ? func.length - 1 : start2, 0);
      return function() {
        var args = arguments, index = -1, length2 = nativeMax$2(args.length - start2, 0), array = Array(length2);
        while (++index < length2) {
          array[index] = args[start2 + index];
        }
        index = -1;
        var otherArgs = Array(start2 + 1);
        while (++index < start2) {
          otherArgs[index] = args[index];
        }
        otherArgs[start2] = transform(array);
        return apply(func, this, otherArgs);
      };
    }
    var _overRest = overRest$2;
    function constant$1(value2) {
      return function() {
        return value2;
      };
    }
    var constant_1 = constant$1;
    function identity$3(value2) {
      return value2;
    }
    var identity_1 = identity$3;
    var constant = constant_1, defineProperty = _defineProperty, identity$2 = identity_1;
    var baseSetToString$1 = !defineProperty ? identity$2 : function(func, string) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    var _baseSetToString = baseSetToString$1;
    var HOT_COUNT = 800, HOT_SPAN = 16;
    var nativeNow = Date.now;
    function shortOut$1(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    var _shortOut = shortOut$1;
    var baseSetToString = _baseSetToString, shortOut = _shortOut;
    var setToString$2 = shortOut(baseSetToString);
    var _setToString = setToString$2;
    var flatten = flatten_1, overRest$1 = _overRest, setToString$1 = _setToString;
    function flatRest$2(func) {
      return setToString$1(overRest$1(func, void 0, flatten), func + "");
    }
    var _flatRest = flatRest$2;
    var arrayMap$1 = _arrayMap, baseClone = _baseClone, baseUnset = _baseUnset, castPath$3 = _castPath, copyObject$1 = _copyObject, customOmitClone = _customOmitClone, flatRest$1 = _flatRest, getAllKeysIn$1 = _getAllKeysIn;
    var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
    var omit = flatRest$1(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap$1(paths, function(path) {
        path = castPath$3(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject$1(object, getAllKeysIn$1(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length2 = paths.length;
      while (length2--) {
        baseUnset(result, paths[length2]);
      }
      return result;
    });
    var omit_1 = omit;
    var defaultValue$1 = function defaultValue2(value2, _default2) {
      return typeof value2 === "undefined" ? _default2 : value2;
    };
    var deepEqual = function deepEqual2(v1, v2) {
      if (v1 === v2) {
        return true;
      } else if (immutable.exports.Map.isMap(v1)) {
        return v1.equals(v2);
      } else {
        return JSON.stringify(v1) == JSON.stringify(v2);
      }
    };
    var shallowEqual$2 = function shallowEqual2(a, b) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (a === b) {
        return true;
      } else if (Array.isArray(a))
        return shallowEqualArrays$1(a, b, deep);
      else if (immutable.exports.Map.isMap(a))
        return a.equals(b);
      else if (_typeof$1(a) == "object")
        return shallowEqualObjects$1(a, b, deep);
      else
        return a === b;
    };
    function shallowEqualArrays$1(arrA, arrB) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (arrA === arrB) {
        return true;
      }
      if (!arrA || !arrB) {
        return false;
      }
      var len = arrA.length;
      if (arrB.length !== len) {
        return false;
      }
      for (var i = 0; i < len; i++) {
        var isEqual = deep ? shallowEqual$2(arrA[i], arrB[i], deep) : arrA[i] === arrB[i];
        if (!isEqual) {
          return false;
        }
      }
      return true;
    }
    function shallowEqualObjects$1(objA, objB) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (objA === objB) {
        return true;
      }
      if (!objA || !objB) {
        return false;
      }
      var aKeys = Object.keys(objA);
      var bKeys = Object.keys(objB);
      var len = aKeys.length;
      if (bKeys.length !== len) {
        return false;
      }
      for (var i = 0; i < len; i++) {
        var key = aKeys[i];
        var isEqual = deep ? shallowEqual$2(objA[key], objB[key], deep) : objA[key] === objB[key];
        if (!isEqual) {
          return false;
        }
      }
      return true;
    }
    var isImmutable = function isImmutable2(v) {
      return _typeof$1(v) === "object" && v !== null && typeof v.toJS === "function";
    };
    function toImmutableList(v) {
      return isImmutable(v) ? v : new Immutable.List(v);
    }
    function applyToJS(v) {
      return isImmutable(v) ? v.toJS() : v;
    }
    var escapeRegExp = function escapeRegExp2(string) {
      return string.replace(/[.*+?^${}()|[\]\\/]/g, "\\$&");
    };
    var cleanJSX = function cleanJSX2(jsx2) {
      var jsxKeys = ["$$typeof", "_owner", "_store", "ref", "key"];
      var getName = function getName2(val) {
        if (typeof val === "string") {
          return val;
        } else if (typeof val === "function") {
          return val.name;
        }
        return val;
      };
      if (jsx2 instanceof Array) {
        return jsx2.map(function(el, _i) {
          return cleanJSX2(el);
        });
      } else if (_typeof$1(jsx2) === "object" && jsx2 !== null) {
        if (isDirtyJSX(jsx2)) {
          var _cleaned$props;
          var cleaned = omit_1(jsx2, jsxKeys);
          if (cleaned.type) {
            cleaned.type = getName(cleaned.type);
          }
          if (cleaned !== null && cleaned !== void 0 && (_cleaned$props = cleaned.props) !== null && _cleaned$props !== void 0 && _cleaned$props.children) {
            cleaned.props.children = cleanJSX2(cleaned.props.children);
          }
          return cleaned;
        }
      }
      return jsx2;
    };
    var isDirtyJSX = function isDirtyJSX2(jsx2) {
      return _typeof$1(jsx2) === "object" && jsx2 !== null && !Array.isArray(jsx2) && Object.keys(jsx2).includes("type") && Object.keys(jsx2).includes("props") && Object.keys(jsx2).includes("key") && Object.keys(jsx2).includes("ref") && Object.keys(jsx2).includes("$$typeof");
    };
    var isJSX = function isJSX2(jsx2) {
      return _typeof$1(jsx2) === "object" && jsx2 !== null && !Array.isArray(jsx2) && typeof jsx2["type"] === "string" && Object.keys(jsx2).includes("props");
    };
    var isJsonLogic = function isJsonLogic2(logic2) {
      var isJL = _typeof$1(logic2) === "object" && logic2 !== null && !Array.isArray(logic2) && Object.keys(logic2).length === 1;
      return isJL;
    };
    function sleep$1(delay) {
      return new Promise(function(resolve) {
        setTimeout(resolve, delay);
      });
    }
    function mergeArraysSmart(arr1, arr2) {
      if (!arr1)
        arr1 = [];
      if (!arr2)
        arr2 = [];
      return arr2.map(function(op) {
        return [op, arr1.indexOf(op)];
      }).map(function(_ref, i, orig) {
        var _ref2 = _slicedToArray(_ref, 2), op = _ref2[0], ind = _ref2[1];
        if (ind == -1) {
          var next2 = orig.slice(i + 1);
          var prev2 = orig.slice(0, i);
          var after = prev2.reverse().find(function(_ref3) {
            var _ref4 = _slicedToArray(_ref3, 2);
            _ref4[0];
            var ci = _ref4[1];
            return ci != -1;
          });
          var before = next2.find(function(_ref5) {
            var _ref6 = _slicedToArray(_ref5, 2);
            _ref6[0];
            var ci = _ref6[1];
            return ci != -1;
          });
          if (before)
            return [op, "before", before[0]];
          else if (after)
            return [op, "after", after[0]];
          else
            return [op, "append", null];
        } else {
          return null;
        }
      }).filter(function(x) {
        return x !== null;
      }).reduce(function(acc, _ref7) {
        var _ref8 = _slicedToArray(_ref7, 3), newOp = _ref8[0], rel = _ref8[1], relOp = _ref8[2];
        var ind = acc.indexOf(relOp);
        if (acc.indexOf(newOp) == -1) {
          if (ind > -1) {
            acc.splice(ind + (rel == "after" ? 1 : 0), 0, newOp);
          } else {
            acc.splice(rel == "append" ? Infinity : 0, 0, newOp);
          }
        }
        return acc;
      }, arr1.slice());
    }
    var isDev$1 = function isDev2() {
      return typeof process !== "undefined" && process.env && false;
    };
    var getLogger$1 = function getLogger2() {
      var devMode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      var verbose = devMode != void 0 ? devMode : isDev$1();
      return verbose ? console : {
        error: function error() {
        },
        log: function log() {
        },
        warn: function warn2() {
        },
        debug: function debug() {
        },
        info: function info() {
        }
      };
    };
    var getFirstDefined = function getFirstDefined2() {
      var arr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      var ret;
      for (var i = 0; i < arr.length; i++) {
        var v = arr[i];
        if (v !== void 0) {
          ret = v;
          break;
        }
      }
      return ret;
    };
    var logger$1 = getLogger$1();
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray$8(arr);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$8(arr) || _nonIterableSpread();
    }
    var baseAssignValue$1 = _baseAssignValue, eq$2 = eq_1;
    function assignMergeValue$2(object, key, value2) {
      if (value2 !== void 0 && !eq$2(object[key], value2) || value2 === void 0 && !(key in object)) {
        baseAssignValue$1(object, key, value2);
      }
    }
    var _assignMergeValue = assignMergeValue$2;
    function createBaseFor$1(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length2 = props.length;
        while (length2--) {
          var key = props[fromRight ? length2 : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    var _createBaseFor = createBaseFor$1;
    var createBaseFor = _createBaseFor;
    var baseFor$2 = createBaseFor();
    var _baseFor = baseFor$2;
    var isArrayLike$1 = isArrayLike_1, isObjectLike$1 = isObjectLike_1;
    function isArrayLikeObject$1(value2) {
      return isObjectLike$1(value2) && isArrayLike$1(value2);
    }
    var isArrayLikeObject_1 = isArrayLikeObject$1;
    function safeGet$2(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    var _safeGet = safeGet$2;
    var copyObject = _copyObject, keysIn$1 = keysIn_1;
    function toPlainObject$1(value2) {
      return copyObject(value2, keysIn$1(value2));
    }
    var toPlainObject_1 = toPlainObject$1;
    var assignMergeValue$1 = _assignMergeValue, cloneBuffer = _cloneBuffer.exports, cloneTypedArray = _cloneTypedArray, copyArray = _copyArray, initCloneObject = _initCloneObject, isArguments$1 = isArguments_1, isArray$3 = isArray_1, isArrayLikeObject = isArrayLikeObject_1, isBuffer$1 = isBuffer$4.exports, isFunction = isFunction_1, isObject$a = isObject_1, isPlainObject$2 = isPlainObject_1, isTypedArray$1 = isTypedArray_1, safeGet$1 = _safeGet, toPlainObject = toPlainObject_1;
    function baseMergeDeep$1(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet$1(object, key), srcValue = safeGet$1(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue$1(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray$3(srcValue), isBuff = !isArr && isBuffer$1(srcValue), isTyped = !isArr && !isBuff && isTypedArray$1(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray$3(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject$2(srcValue) || isArguments$1(srcValue)) {
          newValue = objValue;
          if (isArguments$1(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject$a(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue$1(object, key, newValue);
    }
    var _baseMergeDeep = baseMergeDeep$1;
    var Stack$2 = _Stack, assignMergeValue = _assignMergeValue, baseFor$1 = _baseFor, baseMergeDeep = _baseMergeDeep, isObject$9 = isObject_1, keysIn = keysIn_1, safeGet = _safeGet;
    function baseMerge$2(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor$1(source, function(srcValue, key) {
        stack || (stack = new Stack$2());
        if (isObject$9(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge$2, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    var _baseMerge = baseMerge$2;
    var identity$1 = identity_1, overRest = _overRest, setToString = _setToString;
    function baseRest$1(func, start2) {
      return setToString(overRest(func, start2, identity$1), func + "");
    }
    var _baseRest = baseRest$1;
    var eq$1 = eq_1, isArrayLike = isArrayLike_1, isIndex$2 = _isIndex, isObject$8 = isObject_1;
    function isIterateeCall$2(value2, index, object) {
      if (!isObject$8(object)) {
        return false;
      }
      var type = typeof index;
      if (type == "number" ? isArrayLike(object) && isIndex$2(index, object.length) : type == "string" && index in object) {
        return eq$1(object[index], value2);
      }
      return false;
    }
    var _isIterateeCall = isIterateeCall$2;
    var baseRest = _baseRest, isIterateeCall$1 = _isIterateeCall;
    function createAssigner$2(assigner) {
      return baseRest(function(object, sources) {
        var index = -1, length2 = sources.length, customizer = length2 > 1 ? sources[length2 - 1] : void 0, guard = length2 > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length2--, customizer) : void 0;
        if (guard && isIterateeCall$1(sources[0], sources[1], guard)) {
          customizer = length2 < 3 ? void 0 : customizer;
          length2 = 1;
        }
        object = Object(object);
        while (++index < length2) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }
    var _createAssigner = createAssigner$2;
    var baseMerge$1 = _baseMerge, createAssigner$1 = _createAssigner;
    var merge = createAssigner$1(function(object, source, srcIndex) {
      baseMerge$1(object, source, srcIndex);
    });
    var merge_1 = merge;
    var query_builder_seed = 0;
    const uuid$1 = function() {
      var timePart = (new Date().getTime().toString(16) + "FF").substr(0, 11);
      var s = "ssssssss-xxxx-4xxx-yxxx-x".replace(/[xys]/g, function(c) {
        var r2 = c === "s" ? Math.floor(Math.random() * 16) : query_builder_seed++ & 15;
        var v = c === "x" ? r2 : r2 & 3 | 8;
        return v.toString(16);
      });
      return s + timePart;
    };
    var baseMerge = _baseMerge, createAssigner = _createAssigner;
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });
    var mergeWith_1 = mergeWith;
    var settings$3 = {
      formatField: function formatField2(field, parts, label2, fieldDefinition, config2, isForDisplay) {
        if (isForDisplay)
          return label2;
        else
          return field;
      },
      valueSourcesInfo: {
        value: {}
      },
      fieldSeparator: ".",
      fieldSeparatorDisplay: ".",
      canReorder: true,
      canRegroup: true,
      canDeleteLocked: false,
      canLeaveEmptyGroup: true,
      shouldCreateEmptyGroup: false,
      canShortMongoQuery: true,
      removeEmptyGroupsOnLoad: true,
      removeIncompleteRulesOnLoad: true,
      removeInvalidMultiSelectValuesOnLoad: true,
      setOpOnChangeField: ["keep", "default"],
      groupOperators: ["some", "all", "none"],
      defaultGroupConjunction: "AND",
      locale: {
        moment: "en"
      },
      valueLabel: "Value",
      valuePlaceholder: "Value",
      fieldLabel: "Field",
      operatorLabel: "Operator",
      funcLabel: "Function",
      fieldPlaceholder: "Select field",
      funcPlaceholder: "Select function",
      operatorPlaceholder: "Select operator",
      lockLabel: "Lock",
      lockedLabel: "Locked",
      deleteLabel: null,
      addGroupLabel: "Add group",
      addCaseLabel: "Add condition",
      addDefaultCaseLabel: "Add default condition",
      defaultCaseLabel: "Default:",
      addRuleLabel: "Add rule",
      addSubRuleLabel: "Add sub rule",
      delGroupLabel: "",
      notLabel: "Not",
      valueSourcesPopupTitle: "Select value source",
      removeRuleConfirmOptions: null,
      removeGroupConfirmOptions: null
    };
    function _createForOfIteratorHelper$7(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$7(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$7(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$7(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$7(o, minLen);
    }
    function _arrayLikeToArray$7(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$z(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$z(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$z(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$z(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var isObject$7 = function isObject2(v) {
      return _typeof$1(v) == "object" && v !== null && !Array.isArray(v);
    };
    var toListValue = function toListValue2(v, title) {
      if (v == null || v == "") {
        return void 0;
      } else if (isObject$7(v)) {
        return v;
      } else {
        return {
          value: v,
          title: title !== void 0 ? title : v
        };
      }
    };
    var makeCustomListValue$1 = function makeCustomListValue2(v) {
      var lv = toListValue(v);
      if (isObject$7(lv)) {
        return _objectSpread$z(_objectSpread$z({}, toListValue(v)), {}, {
          isCustom: true
        });
      } else {
        return lv;
      }
    };
    var listValuesToArray$1 = function listValuesToArray2(listValuesObj) {
      if (Array.isArray(listValuesObj))
        return listValuesObj.map(function(v2) {
          return toListValue(v2);
        });
      if (!isObject$7(listValuesObj))
        return listValuesObj;
      var listValuesArr = [];
      for (var v in listValuesObj) {
        var title = listValuesObj[v];
        listValuesArr.push(toListValue(v, title));
      }
      return listValuesArr;
    };
    var getItemInListValues = function getItemInListValues2(listValues2, value2) {
      if (Array.isArray(listValues2)) {
        var values2 = listValues2.map(function(v) {
          return toListValue(v);
        });
        return values2.find(function(v) {
          return "" + v.value === "" + value2;
        });
      } else {
        return listValues2[value2] !== void 0 ? toListValue(value2, listValues2[value2]) : void 0;
      }
    };
    var getTitleInListValues$1 = function getTitleInListValues2(listValues2, value2) {
      if (listValues2 == void 0)
        return value2;
      var it = getItemInListValues(listValues2, value2);
      return it !== void 0 ? it.title : value2;
    };
    var getValueInListValues = function getValueInListValues2(listValues2, value2) {
      if (listValues2 == void 0)
        return value2;
      var it = getItemInListValues(listValues2, value2);
      return it !== void 0 ? it.value : value2;
    };
    var mapListValues$5 = function mapListValues2(listValues2, mapFn) {
      var ret = [];
      if (Array.isArray(listValues2)) {
        var _iterator = _createForOfIteratorHelper$7(listValues2), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var v = _step.value;
            var lv = mapFn(toListValue(v));
            if (lv != null)
              ret.push(lv);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } else {
        for (var value2 in listValues2) {
          var _lv = mapFn(toListValue(value2, listValues2[value2]));
          if (_lv != null)
            ret.push(_lv);
        }
      }
      return ret;
    };
    var searchListValue$1 = function searchListValue2(search, listValues2) {
      return mapListValues$5(listValues2, function(lv) {
        return "".concat(lv.value).indexOf(search) != -1 || lv.title.indexOf(search) != -1 ? lv : null;
      }).filter(function(v) {
        return v !== null;
      }).shift();
    };
    var getListValue$1 = function getListValue2(selectedValue, listValues2) {
      return mapListValues$5(listValues2, function(lv) {
        return "" + lv.value === "" + selectedValue ? lv : null;
      }).filter(function(v) {
        return v !== null;
      }).shift();
    };
    const listValues = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      toListValue,
      makeCustomListValue: makeCustomListValue$1,
      listValuesToArray: listValuesToArray$1,
      getItemInListValues,
      getTitleInListValues: getTitleInListValues$1,
      getValueInListValues,
      mapListValues: mapListValues$5,
      searchListValue: searchListValue$1,
      getListValue: getListValue$1
    }, Symbol.toStringTag, { value: "Module" }));
    function ownKeys$y(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$y(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$y(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$y(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var defaultField = function defaultField2(config2) {
      var canGetFirst = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var parentRuleGroupPath = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      return typeof config2.settings.defaultField === "function" ? config2.settings.defaultField(parentRuleGroupPath) : config2.settings.defaultField || (canGetFirst ? getFirstField(config2, parentRuleGroupPath) : null);
    };
    var defaultOperator = function defaultOperator2(config2, field) {
      var canGetFirst = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var fieldConfig = getFieldConfig$8(config2, field);
      var fieldOperators = fieldConfig && fieldConfig.operators || [];
      var fieldDefaultOperator = fieldConfig && fieldConfig.defaultOperator;
      if (!fieldOperators.includes(fieldDefaultOperator))
        fieldDefaultOperator = null;
      if (!fieldDefaultOperator && canGetFirst)
        fieldDefaultOperator = getFirstOperator(config2, field);
      var op = typeof config2.settings.defaultOperator === "function" ? config2.settings.defaultOperator(field, fieldConfig) : fieldDefaultOperator;
      return op;
    };
    var defaultOperatorOptions = function defaultOperatorOptions2(config2, operator, field) {
      var operatorConfig = operator ? getOperatorConfig$4(config2, operator, field) : null;
      if (!operatorConfig)
        return null;
      return operatorConfig.options ? new Immutable.Map(operatorConfig.options && operatorConfig.options.defaults || {}) : null;
    };
    var defaultRuleProperties = function defaultRuleProperties2(config2) {
      var parentRuleGroupPath = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var item = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var field = null, operator = null;
      var _config$settings = config2.settings, setDefaultFieldAndOp = _config$settings.setDefaultFieldAndOp, showErrorMessage = _config$settings.showErrorMessage;
      if (item) {
        var _item$properties, _item$properties2;
        field = item === null || item === void 0 ? void 0 : (_item$properties = item.properties) === null || _item$properties === void 0 ? void 0 : _item$properties.field;
        operator = item === null || item === void 0 ? void 0 : (_item$properties2 = item.properties) === null || _item$properties2 === void 0 ? void 0 : _item$properties2.operator;
      } else if (setDefaultFieldAndOp) {
        field = defaultField(config2, true, parentRuleGroupPath);
        operator = defaultOperator(config2, field);
      }
      var current = new Immutable.Map({
        field,
        operator,
        value: new Immutable.List(),
        valueSrc: new Immutable.List(),
        operatorOptions: defaultOperatorOptions(config2, operator, field)
      });
      if (showErrorMessage) {
        current = current.set("valueError", new Immutable.List());
      }
      if (field && operator) {
        var _getNewValueForFieldO = getNewValueForFieldOp(config2, config2, current, field, operator, "operator", false), newValue = _getNewValueForFieldO.newValue, newValueSrc = _getNewValueForFieldO.newValueSrc, newValueType = _getNewValueForFieldO.newValueType, newValueError = _getNewValueForFieldO.newValueError;
        current = current.set("value", newValue).set("valueSrc", newValueSrc).set("valueType", newValueType);
        if (showErrorMessage) {
          current = current.set("valueError", newValueError);
        }
      }
      return current;
    };
    var defaultGroupConjunction$1 = function defaultGroupConjunction2(config2) {
      var fieldConfig = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      fieldConfig = getFieldConfig$8(config2, fieldConfig);
      var conjs = fieldConfig && fieldConfig.conjunctions || Object.keys(config2.conjunctions);
      if (conjs.length == 1)
        return conjs[0];
      return config2.settings.defaultGroupConjunction || config2.settings.defaultConjunction || conjs[0];
    };
    var defaultConjunction = function defaultConjunction2(config2) {
      return config2.settings.defaultConjunction || Object.keys(config2.conjunctions)[0];
    };
    var defaultGroupProperties = function defaultGroupProperties2(config2) {
      var fieldConfig = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      return new Immutable.Map({
        conjunction: defaultGroupConjunction$1(config2, fieldConfig),
        not: false
      });
    };
    var defaultItemProperties = function defaultItemProperties2(config2, item) {
      var _item$properties3;
      return item && item.type == "group" ? defaultGroupProperties(config2, item === null || item === void 0 ? void 0 : (_item$properties3 = item.properties) === null || _item$properties3 === void 0 ? void 0 : _item$properties3.field) : defaultRuleProperties(config2, null, item);
    };
    var defaultRule = function defaultRule2(id, config2) {
      return _defineProperty$2({}, id, new Immutable.Map({
        type: "rule",
        id,
        properties: defaultRuleProperties(config2)
      }));
    };
    var defaultRoot$1 = function defaultRoot2(config2) {
      return new Immutable.Map({
        type: "group",
        id: uuid$1(),
        children1: new Immutable.OrderedMap(_objectSpread$y({}, defaultRule(uuid$1(), config2))),
        properties: defaultGroupProperties(config2)
      });
    };
    var createListFromArray$2 = function createListFromArray2(ids) {
      return new Immutable.List(ids);
    };
    var emptyProperies$1 = function emptyProperies2() {
      return new Immutable.Map();
    };
    const defaultUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      defaultField,
      defaultOperator,
      defaultOperatorOptions,
      defaultRuleProperties,
      defaultGroupConjunction: defaultGroupConjunction$1,
      defaultConjunction,
      defaultGroupProperties,
      defaultItemProperties,
      defaultRule,
      defaultRoot: defaultRoot$1,
      createListFromArray: createListFromArray$2,
      emptyProperies: emptyProperies$1
    }, Symbol.toStringTag, { value: "Module" }));
    var expandTreePath = function expandTreePath2(path) {
      for (var _len = arguments.length, suffix = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        suffix[_key - 1] = arguments[_key];
      }
      return path.interpose("children1").withMutations(function(list) {
        list.skip(1);
        list.push.apply(list, suffix);
        return list;
      });
    };
    var expandTreeSubpath = function expandTreeSubpath2(path) {
      for (var _len2 = arguments.length, suffix = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        suffix[_key2 - 1] = arguments[_key2];
      }
      return path.interpose("children1").withMutations(function(list) {
        list.push.apply(list, suffix);
        return list;
      });
    };
    var getItemByPath = function getItemByPath2(tree2, path) {
      var children = new Immutable.OrderedMap(_defineProperty$2({}, tree2.get("id"), tree2));
      var res = tree2;
      path.forEach(function(id) {
        res = children.get(id);
        children = res.get("children1");
      });
      return res;
    };
    var removePathsInTree = function removePathsInTree2(tree2) {
      var newTree = tree2;
      function _processNode(item, path) {
        var itemPath = path.push(item.get("id"));
        if (item.get("path")) {
          newTree = newTree.removeIn(expandTreePath(itemPath, "path"));
        }
        var children = item.get("children1");
        if (children) {
          children.map(function(child, _childId) {
            _processNode(child, itemPath);
          });
        }
      }
      _processNode(tree2, new Immutable.List());
      return newTree;
    };
    var removeIsLockedInTree = function removeIsLockedInTree2(tree2) {
      var newTree = tree2;
      function _processNode(item, path) {
        var isParentLocked = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
        var itemPath = path.push(item.get("id"));
        var isLocked = item.getIn(["properties", "isLocked"]);
        if (isParentLocked && isLocked) {
          newTree = newTree.deleteIn(expandTreePath(itemPath, "properties", "isLocked"));
        }
        var children = item.get("children1");
        if (children) {
          children.map(function(child, _childId) {
            _processNode(child, itemPath, isLocked || isParentLocked);
          });
        }
      }
      _processNode(tree2, new Immutable.List());
      return newTree;
    };
    var fixPathsInTree = function fixPathsInTree2(tree2) {
      var newTree = tree2;
      function _processNode(item, path, lev, nodeId) {
        if (!item)
          return;
        var currPath = item.get("path");
        var currId = item.get("id");
        var itemId = currId || nodeId;
        var itemPath = path.push(itemId);
        if (!currPath || !currPath.equals(itemPath)) {
          newTree = newTree.setIn(expandTreePath(itemPath, "path"), itemPath);
        }
        if (!currId) {
          newTree = newTree.setIn(expandTreePath(itemPath, "id"), itemId);
        }
        var children = item.get("children1");
        if (children) {
          if (children.constructor.name == "Map") {
            newTree = newTree.setIn(expandTreePath(itemPath, "children1"), new Immutable.OrderedMap(children));
          }
          children.map(function(child, childId) {
            _processNode(child, itemPath, lev + 1, childId);
          });
        }
      }
      _processNode(tree2, new Immutable.List(), 0);
      return newTree;
    };
    var fixEmptyGroupsInTree = function fixEmptyGroupsInTree2(tree2) {
      var newTree = tree2;
      function _processNode(item, path, lev, nodeId) {
        if (!item)
          return false;
        var itemId = item.get("id") || nodeId;
        var itemPath = path.push(itemId);
        var children = item.get("children1");
        if (children) {
          var allChildrenGone = children.map(function(child, childId) {
            return _processNode(child, itemPath, lev + 1, childId);
          }).reduce(function(curr, v) {
            return curr && v;
          }, true);
          if ((children.size == 0 || allChildrenGone) && lev > 0) {
            newTree = newTree.deleteIn(expandTreePath(itemPath));
            return true;
          }
        }
        return false;
      }
      _processNode(tree2, new Immutable.List(), 0);
      return newTree;
    };
    var getFlatTree$1 = function getFlatTree2(tree2) {
      var flat = [];
      var items = {};
      var realHeight = 0;
      function _flatizeTree(item2, path, insideCollapsed, insideLocked, insideRuleGroup, lev, info, parentType, caseId) {
        var type = item2.get("type");
        var collapsed = item2.get("collapsed");
        var id = item2.get("id");
        var children = item2.get("children1");
        var isLocked = item2.getIn(["properties", "isLocked"]);
        var childrenIds = children ? children.map(function(_child, childId) {
          return childId;
        }) : null;
        var isRuleGroup = type == "rule_group";
        var isLeaf = !insideRuleGroup && (!children || isRuleGroup);
        var itemsBefore = flat.length;
        var top2 = realHeight;
        flat.push(id);
        if (!insideCollapsed)
          realHeight += 1;
        info.height = (info.height || 0) + 1;
        items[id] = {
          type,
          parent: path.length ? path[path.length - 1] : null,
          parentType,
          caseId: type == "case_group" ? id : caseId,
          isDefaultCase: type == "case_group" && !children,
          path: path.concat(id),
          lev,
          leaf: !children,
          index: itemsBefore,
          id,
          children: childrenIds,
          leafsCount: 0,
          _top: itemsBefore,
          top: insideCollapsed ? null : top2,
          collapsed,
          node: item2,
          isLocked: isLocked || insideLocked
        };
        if (children) {
          var subinfo = {};
          children.map(function(child, _childId) {
            _flatizeTree(child, path.concat(id), insideCollapsed || collapsed, insideLocked || isLocked, insideRuleGroup || isRuleGroup, lev + 1, subinfo, type, type == "case_group" ? id : caseId);
          });
          if (!collapsed) {
            info.height = (info.height || 0) + (subinfo.height || 0);
          }
        }
        if (caseId && isLeaf) {
          items[caseId].leafsCount++;
        }
        var itemsAfter = flat.length;
        var height2 = info.height;
        Object.assign(items[id], {
          _height: itemsAfter - itemsBefore,
          height: height2,
          bottom: (insideCollapsed ? null : top2) + height2
        });
      }
      _flatizeTree(tree2, [], false, false, false, 0, {}, null, null);
      for (var i = 0; i < flat.length; i++) {
        var prevId = i > 0 ? flat[i - 1] : null;
        var nextId = i < flat.length - 1 ? flat[i + 1] : null;
        var item = items[flat[i]];
        item.prev = prevId;
        item.next = nextId;
      }
      return {
        flat,
        items
      };
    };
    var getTotalReordableNodesCountInTree$2 = function getTotalReordableNodesCountInTree2(tree2) {
      if (!tree2)
        return -1;
      var cnt = 0;
      function _processNode(item, path, lev) {
        var id, children, type;
        if (typeof item.get === "function") {
          id = item.get("id");
          children = item.get("children1");
          type = item.get("type");
        } else {
          id = item.id;
          children = item.children1;
          type = item.type;
        }
        var isRuleGroup = type == "rule_group";
        cnt++;
        if (children && !isRuleGroup) {
          children.map(function(child, _childId) {
            _processNode(child, path.concat(id));
          });
        }
      }
      _processNode(tree2, []);
      return cnt - 1;
    };
    var getTotalRulesCountInTree$2 = function getTotalRulesCountInTree2(tree2) {
      if (!tree2)
        return -1;
      var cnt = 0;
      function _processNode(item, path, lev) {
        var id, children, type;
        if (typeof item.get === "function") {
          id = item.get("id");
          children = item.get("children1");
          type = item.get("type");
        } else {
          id = item.id;
          children = item.children1;
          type = item.type;
        }
        if (type == "rule" || type == "rule_group") {
          cnt++;
        } else if (children) {
          children.map(function(child, _childId) {
            _processNode(child, path.concat(id));
          });
        }
      }
      _processNode(tree2, []);
      return cnt;
    };
    var getTreeBadFields = function getTreeBadFields2(tree2) {
      var badFields = [];
      function _processNode(item, path, lev) {
        var id = item.get("id");
        var children = item.get("children1");
        var valueError = item.getIn(["properties", "valueError"]);
        var field = item.getIn(["properties", "field"]);
        if (valueError && valueError.size > 0 && valueError.filter(function(v) {
          return v != null;
        }).size > 0) {
          badFields.push(field);
        }
        if (children) {
          children.map(function(child, _childId) {
            _processNode(child, path.concat(id));
          });
        }
      }
      if (tree2)
        _processNode(tree2, []);
      return Array.from(new Set(badFields));
    };
    var getLightTree = function getLightTree2(tree2) {
      var children1AsArray = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var newTree = tree2;
      function _processNode(item, itemId) {
        if (item.path)
          delete item.path;
        if (!children1AsArray && itemId)
          delete item.id;
        var properties2 = item.properties;
        if (properties2) {
          if (properties2.operatorOptions == null)
            delete properties2.operatorOptions;
        }
        var children = item.children1;
        if (children) {
          for (var id in children) {
            _processNode(children[id], id);
          }
          if (children1AsArray) {
            item.children1 = Object.values(children);
          }
        }
      }
      _processNode(tree2, null);
      return newTree;
    };
    var getSwitchValues = function getSwitchValues2(tree2) {
      var vals = [];
      var children = tree2.get("children1");
      if (children) {
        children.map(function(child) {
          var value2 = child.getIn(["properties", "value"]);
          var caseValue;
          if (value2 && value2.size == 1) {
            caseValue = value2.get(0);
            if (Array.isArray(caseValue) && caseValue.length == 0) {
              caseValue = null;
            }
          } else {
            caseValue = null;
          }
          vals = [].concat(_toConsumableArray(vals), [caseValue]);
        });
      }
      return vals;
    };
    var isEmptyTree = function isEmptyTree2(tree2) {
      return !tree2.get("children1") || tree2.get("children1").size == 0;
    };
    var hasChildren = function hasChildren2(tree2, path) {
      return tree2.getIn(expandTreePath(path, "children1")).size > 0;
    };
    const treeUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      expandTreePath,
      expandTreeSubpath,
      getItemByPath,
      removePathsInTree,
      removeIsLockedInTree,
      fixPathsInTree,
      fixEmptyGroupsInTree,
      getFlatTree: getFlatTree$1,
      getTotalReordableNodesCountInTree: getTotalReordableNodesCountInTree$2,
      getTotalRulesCountInTree: getTotalRulesCountInTree$2,
      getTreeBadFields,
      getLightTree,
      getSwitchValues,
      isEmptyTree,
      hasChildren
    }, Symbol.toStringTag, { value: "Module" }));
    var typeOf = function typeOf2(v) {
      if (_typeof$1(v) == "object" && v !== null && Array.isArray(v))
        return "array";
      else
        return _typeof$1(v);
    };
    var isTypeOf = function isTypeOf2(v, type) {
      if (typeOf(v) == type)
        return true;
      if (type == "number" && !isNaN(v))
        return true;
      return false;
    };
    var validateAndFixTree$1 = function validateAndFixTree2(newTree, _oldTree, newConfig, oldConfig, removeEmptyGroups, removeIncompleteRules) {
      var tree2 = validateTree(newTree, _oldTree, newConfig, oldConfig, removeEmptyGroups, removeIncompleteRules);
      tree2 = fixPathsInTree(tree2);
      return tree2;
    };
    var validateTree = function validateTree2(tree2, _oldTree, config2, oldConfig, removeEmptyGroups, removeIncompleteRules) {
      if (removeEmptyGroups === void 0) {
        removeEmptyGroups = config2.settings.removeEmptyGroupsOnLoad;
      }
      if (removeIncompleteRules === void 0) {
        removeIncompleteRules = config2.settings.removeIncompleteRulesOnLoad;
      }
      var c = {
        config: config2,
        oldConfig,
        removeEmptyGroups,
        removeIncompleteRules
      };
      return validateItem(tree2, [], null, {}, c);
    };
    function validateItem(item, path, itemId, meta, c) {
      var type = item.get("type");
      var children = item.get("children1");
      if ((type === "group" || type === "rule_group" || type == "case_group" || type == "switch_group") && children && children.size) {
        return validateGroup(item, path, itemId, meta, c);
      } else if (type === "rule") {
        return validateRule(item, path, itemId, meta, c);
      } else {
        return item;
      }
    }
    function validateGroup(item, path, itemId, meta, c) {
      var removeEmptyGroups = c.removeEmptyGroups;
      var id = item.get("id");
      var children = item.get("children1");
      var oldChildren = children;
      if (!id && itemId) {
        id = itemId;
        item = item.set("id", id);
        meta.sanitized = true;
      }
      var submeta = {};
      children = children.map(function(currentChild, childId) {
        return validateItem(currentChild, path.concat(id), childId, submeta, c);
      });
      if (removeEmptyGroups)
        children = children.filter(function(currentChild) {
          return currentChild != void 0;
        });
      var sanitized = submeta.sanitized || oldChildren.size != children.size;
      if (!children.size && removeEmptyGroups && path.length) {
        sanitized = true;
        item = void 0;
      }
      if (sanitized)
        meta.sanitized = true;
      if (sanitized && item)
        item = item.set("children1", children);
      return item;
    }
    function validateRule(item, path, itemId, meta, c) {
      var removeIncompleteRules = c.removeIncompleteRules, config2 = c.config, oldConfig = c.oldConfig;
      var showErrorMessage = config2.settings.showErrorMessage;
      var id = item.get("id");
      var properties2 = item.get("properties");
      var field = properties2.get("field") || null;
      var operator = properties2.get("operator") || null;
      var operatorOptions = properties2.get("operatorOptions");
      var valueSrc = properties2.get("valueSrc");
      var value2 = properties2.get("value");
      var valueError = properties2.get("valueError");
      var oldSerialized = {
        field,
        operator,
        operatorOptions: operatorOptions ? operatorOptions.toJS() : {},
        valueSrc: valueSrc ? valueSrc.toJS() : null,
        value: value2 ? value2.toJS() : null,
        valueError: valueError ? valueError.toJS() : null
      };
      field && operator && value2 && !value2.includes(void 0);
      if (!id && itemId) {
        id = itemId;
        item = item.set("id", id);
        meta.sanitized = true;
      }
      var fieldDefinition = field ? getFieldConfig$8(config2, field) : null;
      if (field && !fieldDefinition) {
        logger$1.warn("No config for field ".concat(field));
        field = null;
      }
      if (field == null) {
        properties2 = ["operator", "operatorOptions", "valueSrc", "value"].reduce(function(map2, key) {
          return map2["delete"](key);
        }, properties2);
        operator = null;
      }
      if (operator == "range_between" || operator == "range_not_between") {
        operator = operator == "range_between" ? "between" : "not_between";
        console.info("Fixed operator ".concat(properties2.get("operator"), " to ").concat(operator));
        properties2 = properties2.set("operator", operator);
      }
      var operatorDefinition = operator ? getOperatorConfig$4(config2, operator, field) : null;
      if (operator && !operatorDefinition) {
        console.warn("No config for operator ".concat(operator));
        operator = null;
      }
      var availOps = field ? getOperatorsForField(config2, field) : [];
      if (!availOps) {
        console.warn("Type of field ".concat(field, " is not supported"));
        operator = null;
      } else if (operator && availOps.indexOf(operator) == -1) {
        if (operator == "is_empty" || operator == "is_not_empty") {
          operator = operator == "is_empty" ? "is_null" : "is_not_null";
          console.info("Fixed operator ".concat(properties2.get("operator"), " to ").concat(operator, " for ").concat(field));
          properties2 = properties2.set("operator", operator);
        } else {
          console.warn("Operator ".concat(operator, " is not supported for field ").concat(field));
          operator = null;
        }
      }
      if (operator == null) {
        properties2 = properties2["delete"]("operatorOptions");
        properties2 = properties2["delete"]("valueSrc");
        properties2 = properties2["delete"]("value");
      }
      operatorOptions = properties2.get("operatorOptions");
      operator ? defaultValue$1(operatorDefinition.cardinality, 1) : null;
      if (!operator || operatorOptions && !operatorDefinition.options) {
        operatorOptions = null;
        properties2 = properties2["delete"]("operatorOptions");
      } else if (operator && !operatorOptions && operatorDefinition.options) {
        operatorOptions = defaultOperatorOptions(config2, operator, field);
        properties2 = properties2.set("operatorOptions", operatorOptions);
      }
      valueSrc = properties2.get("valueSrc");
      value2 = properties2.get("value");
      var canFix = !showErrorMessage;
      var isEndValue = true;
      var _getNewValueForFieldO = getNewValueForFieldOp(config2, oldConfig, properties2, field, operator, null, canFix, isEndValue), newValue = _getNewValueForFieldO.newValue, newValueSrc = _getNewValueForFieldO.newValueSrc, newValueError = _getNewValueForFieldO.newValueError;
      value2 = newValue;
      valueSrc = newValueSrc;
      valueError = newValueError;
      properties2 = properties2.set("value", value2);
      properties2 = properties2.set("valueSrc", valueSrc);
      if (showErrorMessage) {
        properties2 = properties2.set("valueError", valueError);
      }
      var newSerialized = {
        field,
        operator,
        operatorOptions: operatorOptions ? operatorOptions.toJS() : {},
        valueSrc: valueSrc ? valueSrc.toJS() : null,
        value: value2 ? value2.toJS() : null,
        valueError: valueError ? valueError.toJS() : null
      };
      var sanitized = !deepEqual(oldSerialized, newSerialized);
      var isComplete = field && operator && value2 && !value2.includes(void 0);
      if (sanitized)
        meta.sanitized = true;
      if (!isComplete && removeIncompleteRules)
        item = void 0;
      else if (sanitized)
        item = item.set("properties", properties2);
      return item;
    }
    var validateValue = function validateValue2(config2, leftField, field, operator, value2, valueType, valueSrc, asyncListValues) {
      var canFix = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : false;
      var isEndValue = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : false;
      var isRawValue = arguments.length > 10 && arguments[10] !== void 0 ? arguments[10] : true;
      var validError = null;
      var fixedValue = value2;
      if (value2 != null) {
        if (valueSrc == "field") {
          var _validateFieldValue = validateFieldValue(leftField, field, value2, valueSrc, valueType, asyncListValues, config2);
          var _validateFieldValue2 = _slicedToArray(_validateFieldValue, 2);
          validError = _validateFieldValue2[0];
          fixedValue = _validateFieldValue2[1];
        } else if (valueSrc == "func") {
          var _validateFuncValue = validateFuncValue(leftField, field, value2, valueSrc, valueType, asyncListValues, config2, operator, isEndValue, canFix);
          var _validateFuncValue2 = _slicedToArray(_validateFuncValue, 2);
          validError = _validateFuncValue2[0];
          fixedValue = _validateFuncValue2[1];
        } else if (valueSrc == "value" || !valueSrc) {
          var _validateNormalValue = validateNormalValue(leftField, field, value2, valueSrc, valueType, asyncListValues, config2, operator, isEndValue, canFix);
          var _validateNormalValue2 = _slicedToArray(_validateNormalValue, 2);
          validError = _validateNormalValue2[0];
          fixedValue = _validateNormalValue2[1];
        }
        if (!validError) {
          getFieldConfig$8(config2, field);
          var w = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
          var operatorDefinition = operator ? getOperatorConfig$4(config2, operator, field) : null;
          var fieldWidgetDefinition = omit_1(getFieldWidgetConfig$3(config2, field, operator, w, valueSrc), ["factory"]);
          var rightFieldDefinition = valueSrc == "field" ? getFieldConfig$8(config2, value2) : null;
          var fieldSettings = fieldWidgetDefinition;
          var fn = fieldWidgetDefinition.validateValue;
          if (typeof fn == "function") {
            var args = [fixedValue, fieldSettings, operator, operatorDefinition];
            if (valueSrc == "field")
              args.push(rightFieldDefinition);
            var validResult = fn.call.apply(fn, [config2.ctx].concat(args));
            if (typeof validResult == "boolean") {
              if (validResult == false)
                validError = "Invalid value";
            } else {
              validError = validResult;
            }
          }
        }
      }
      if (isRawValue && validError) {
        console.warn("[RAQB validate]", "Field ".concat(field, ": ").concat(validError));
      }
      return [validError, fixedValue];
    };
    var validateValueInList = function validateValueInList2(value2, listValues2, canFix, isEndValue, removeInvalidMultiSelectValuesOnLoad) {
      var values2 = immutable.exports.List.isList(value2) ? value2.toJS() : value2 instanceof Array ? _toConsumableArray(value2) : void 0;
      if (values2) {
        var _values$reduce = values2.reduce(function(_ref, val) {
          var _ref2 = _slicedToArray(_ref, 2), goodVals = _ref2[0], badVals = _ref2[1];
          var vv2 = getItemInListValues(listValues2, val);
          if (vv2 == void 0) {
            return [goodVals, [].concat(_toConsumableArray(badVals), [val])];
          } else {
            return [[].concat(_toConsumableArray(goodVals), [vv2.value]), badVals];
          }
        }, [[], []]), _values$reduce2 = _slicedToArray(_values$reduce, 2), goodValues = _values$reduce2[0], badValues = _values$reduce2[1];
        var plural = badValues.length > 1;
        var err = badValues.length ? "".concat(plural ? "Values" : "Value", " ").concat(badValues.join(", "), " ").concat(plural ? "are" : "is", " not in list of values") : null;
        if (removeInvalidMultiSelectValuesOnLoad !== void 0) {
          canFix = removeInvalidMultiSelectValuesOnLoad;
        } else {
          canFix = canFix || isEndValue;
        }
        return [err, canFix ? goodValues : value2];
      } else {
        var vv = getItemInListValues(listValues2, value2);
        if (vv == void 0) {
          return ["Value ".concat(value2, " is not in list of values"), value2];
        } else {
          value2 = vv.value;
        }
        return [null, value2];
      }
    };
    var validateNormalValue = function validateNormalValue2(leftField, field, value2, valueSrc, valueType, asyncListValues, config2) {
      var operator = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : null;
      var isEndValue = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : false;
      var canFix = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : false;
      if (field) {
        var fieldConfig = getFieldConfig$8(config2, field);
        var w = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
        var wConfig = config2.widgets[w];
        var wType = wConfig.type;
        var jsType = wConfig.jsType;
        var fieldSettings = fieldConfig.fieldSettings;
        var listValues2 = (fieldSettings === null || fieldSettings === void 0 ? void 0 : fieldSettings.treeValues) || (fieldSettings === null || fieldSettings === void 0 ? void 0 : fieldSettings.listValues);
        var isAsyncListValues = !!(fieldSettings !== null && fieldSettings !== void 0 && fieldSettings.asyncFetch);
        var canSkipCheck = listValues2 || isAsyncListValues;
        if (valueType && valueType != wType)
          return ["Value should have type ".concat(wType, ", but got value of type ").concat(valueType), value2];
        if (jsType && !isTypeOf(value2, jsType) && !canSkipCheck) {
          return ["Value should have JS type ".concat(jsType, ", but got value of type ").concat(_typeof$1(value2)), value2];
        }
        if (fieldSettings) {
          var realListValues = asyncListValues || listValues2;
          if (realListValues && !fieldSettings.allowCustomValues) {
            return validateValueInList(value2, realListValues, canFix, isEndValue, config2.settings.removeInvalidMultiSelectValuesOnLoad);
          }
          if (fieldSettings.min != null && value2 < fieldSettings.min) {
            return ["Value ".concat(value2, " < min ").concat(fieldSettings.min), canFix ? fieldSettings.min : value2];
          }
          if (fieldSettings.max != null && value2 > fieldSettings.max) {
            return ["Value ".concat(value2, " > max ").concat(fieldSettings.max), canFix ? fieldSettings.max : value2];
          }
        }
      }
      return [null, value2];
    };
    var validateFieldValue = function validateFieldValue2(leftField, field, value2, _valueSrc, valueType, asyncListValues, config2) {
      var fieldSeparator = config2.settings.fieldSeparator;
      var isFuncArg = _typeof$1(field) == "object" && (field === null || field === void 0 ? void 0 : field._isFuncArg);
      var leftFieldStr = Array.isArray(leftField) ? leftField.join(fieldSeparator) : leftField;
      var rightFieldStr = Array.isArray(value2) ? value2.join(fieldSeparator) : value2;
      var rightFieldDefinition = getFieldConfig$8(config2, value2);
      if (!rightFieldDefinition)
        return ["Unknown field ".concat(value2), value2];
      if (rightFieldStr == leftFieldStr && !isFuncArg)
        return ["Can't compare field ".concat(leftField, " with itself"), value2];
      if (valueType && valueType != rightFieldDefinition.type)
        return ["Field ".concat(value2, " is of type ").concat(rightFieldDefinition.type, ", but expected ").concat(valueType), value2];
      return [null, value2];
    };
    var validateFuncValue = function validateFuncValue2(leftField, field, value2, _valueSrc, valueType, asyncListValues, config2) {
      var operator = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : null;
      var isEndValue = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : false;
      var canFix = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : false;
      var fixedValue = value2;
      if (value2) {
        var funcKey = value2.get("func");
        if (funcKey) {
          var funcConfig = getFuncConfig$2(config2, funcKey);
          if (funcConfig) {
            if (valueType && funcConfig.returnType != valueType)
              return ["Function ".concat(funcKey, " should return value of type ").concat(funcConfig.returnType, ", but got ").concat(valueType), value2];
            for (var argKey in funcConfig.args) {
              var argConfig = funcConfig.args[argKey];
              var args = fixedValue.get("args");
              var argVal = args ? args.get(argKey) : void 0;
              var fieldDef = getFieldConfig$8(config2, argConfig);
              var argValue = argVal ? argVal.get("value") : void 0;
              var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
              if (argValue !== void 0) {
                var _validateValue = validateValue(config2, leftField, fieldDef, operator, argValue, argConfig.type, argValueSrc, asyncListValues, canFix, isEndValue, false), _validateValue2 = _slicedToArray(_validateValue, 2), argValidError = _validateValue2[0], fixedArgVal = _validateValue2[1];
                if (argValidError !== null) {
                  if (canFix) {
                    fixedValue = fixedValue.deleteIn(["args", argKey]);
                    if (argConfig.defaultValue !== void 0) {
                      fixedValue = fixedValue.setIn(["args", argKey, "value"], argConfig.defaultValue);
                      fixedValue = fixedValue.setIn(["args", argKey, "valueSrc"], "value");
                    }
                  } else {
                    return ["Invalid value of arg ".concat(argKey, " for func ").concat(funcKey, ": ").concat(argValidError), value2];
                  }
                } else if (fixedArgVal !== argValue) {
                  fixedValue = fixedValue.setIn(["args", argKey, "value"], fixedArgVal);
                }
              } else if (isEndValue && argConfig.defaultValue === void 0 && !canFix) {
                return ["Value of arg ".concat(argKey, " for func ").concat(funcKey, " is required"), value2];
              }
            }
          } else
            return ["Unknown function ".concat(funcKey), value2];
        }
      }
      return [null, fixedValue];
    };
    var selectTypes = ["select", "multiselect", "treeselect", "treemultiselect"];
    var getNewValueForFieldOp = function getNewValueForFieldOp2(config2) {
      var oldConfig = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var current = arguments.length > 2 ? arguments[2] : void 0;
      var newField = arguments.length > 3 ? arguments[3] : void 0;
      var newOperator = arguments.length > 4 ? arguments[4] : void 0;
      var changedProp = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var canFix = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : true;
      var isEndValue = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : false;
      if (!oldConfig)
        oldConfig = config2;
      var currentField = current.get("field");
      var currentOperator = current.get("operator");
      var currentValue = current.get("value");
      var currentValueSrc = current.get("valueSrc", new Immutable.List());
      var currentValueType = current.get("valueType", new Immutable.List());
      var currentAsyncListValues = current.get("asyncListValues");
      var _config$settings = config2.settings, convertableWidgets = _config$settings.convertableWidgets, clearValueOnChangeField = _config$settings.clearValueOnChangeField, clearValueOnChangeOp = _config$settings.clearValueOnChangeOp, showErrorMessage = _config$settings.showErrorMessage;
      var newOperatorConfig = getOperatorConfig$4(config2, newOperator, newField);
      var operatorCardinality = newOperator ? defaultValue$1(newOperatorConfig.cardinality, 1) : null;
      var currentFieldConfig = getFieldConfig$8(oldConfig, currentField);
      var newFieldConfig = getFieldConfig$8(config2, newField);
      var canReuseValue = currentField && currentOperator && newOperator && currentValue != void 0 && (!changedProp || changedProp == "field" && !clearValueOnChangeField || changedProp == "operator" && !clearValueOnChangeOp) && currentFieldConfig && newFieldConfig && currentFieldConfig.type == newFieldConfig.type;
      if (canReuseValue && selectTypes.includes(currentFieldConfig.type) && changedProp == "field") {
        canReuseValue = false;
      }
      for (var i = 0; i < operatorCardinality; i++) {
        var vs = currentValueSrc.get(i) || null;
        var currentWidget = getWidgetForFieldOp$3(oldConfig, currentField, currentOperator, vs);
        var newWidget = getWidgetForFieldOp$3(config2, newField, newOperator, vs);
        var currentValueWidget = vs == "value" ? currentWidget : getWidgetForFieldOp$3(oldConfig, currentField, currentOperator, "value");
        var newValueWidget = vs == "value" ? newWidget : getWidgetForFieldOp$3(config2, newField, newOperator, "value");
        var canReuseWidget = newValueWidget == currentValueWidget || (convertableWidgets[currentValueWidget] || []).includes(newValueWidget);
        if (!canReuseWidget)
          canReuseValue = false;
      }
      if (currentOperator != newOperator && [currentOperator, newOperator].includes("proximity"))
        canReuseValue = false;
      var firstWidgetConfig = getFieldWidgetConfig$3(config2, newField, newOperator, null, currentValueSrc.first());
      var valueSources = getValueSourcesForFieldOp$1(config2, newField, newOperator);
      var valueFixes = {};
      var valueErrors = Array.from({
        length: operatorCardinality
      }, function() {
        return null;
      });
      if (canReuseValue) {
        var _loop = function _loop2() {
          var v = currentValue.get(_i);
          var vType = currentValueType.get(_i) || null;
          var vSrc = currentValueSrc.get(_i) || null;
          var isValidSrc = valueSources.find(function(v2) {
            return v2 == vSrc;
          }) != null;
          if (!isValidSrc && _i > 0 && vSrc == null)
            isValidSrc = true;
          var asyncListValues = currentAsyncListValues;
          var _validateValue = validateValue(config2, newField, newField, newOperator, v, vType, vSrc, asyncListValues, canFix, isEndValue), _validateValue2 = _slicedToArray(_validateValue, 2), validateError = _validateValue2[0], fixedValue = _validateValue2[1];
          var isValid2 = !validateError;
          var fixValue = fixedValue !== v;
          var dropValue = !isValidSrc || !isValid2 && (changedProp == "field" || !showErrorMessage && !fixValue);
          var showValueError = !!validateError && showErrorMessage && !dropValue && !fixValue;
          if (showValueError) {
            valueErrors[_i] = validateError;
          }
          if (fixValue) {
            valueFixes[_i] = fixedValue;
          }
          if (dropValue) {
            canReuseValue = false;
            return "break";
          }
        };
        for (var _i = 0; _i < operatorCardinality; _i++) {
          var _ret = _loop();
          if (_ret === "break")
            break;
        }
      }
      var newValue = null, newValueSrc = null, newValueType = null, newValueError = null;
      newValue = new Immutable.List(Array.from({
        length: operatorCardinality
      }, function(_ignore, i2) {
        var v = void 0;
        if (canReuseValue) {
          if (i2 < currentValue.size) {
            v = currentValue.get(i2);
            if (valueFixes[i2] !== void 0) {
              v = valueFixes[i2];
            }
          }
        } else if (operatorCardinality == 1) {
          var _newFieldConfig$field;
          v = getFirstDefined([newFieldConfig === null || newFieldConfig === void 0 ? void 0 : newFieldConfig.defaultValue, newFieldConfig === null || newFieldConfig === void 0 ? void 0 : (_newFieldConfig$field = newFieldConfig.fieldSettings) === null || _newFieldConfig$field === void 0 ? void 0 : _newFieldConfig$field.defaultValue, firstWidgetConfig === null || firstWidgetConfig === void 0 ? void 0 : firstWidgetConfig.defaultValue]);
        }
        return v;
      }));
      newValueSrc = new Immutable.List(Array.from({
        length: operatorCardinality
      }, function(_ignore, i2) {
        var vs2 = null;
        if (canReuseValue) {
          if (i2 < currentValueSrc.size)
            vs2 = currentValueSrc.get(i2);
        } else if (valueSources.length == 1) {
          vs2 = valueSources[0];
        } else if (valueSources.length > 1) {
          vs2 = valueSources[0];
        }
        return vs2;
      }));
      if (showErrorMessage) {
        if (newOperatorConfig && newOperatorConfig.validateValues && newValueSrc.toJS().filter(function(vs2) {
          return vs2 == "value" || vs2 == null;
        }).length == operatorCardinality) {
          var jsValues = firstWidgetConfig && firstWidgetConfig.toJS ? newValue.toJS().map(function(v) {
            return firstWidgetConfig.toJS.call(config2.ctx, v, firstWidgetConfig);
          }) : newValue.toJS();
          var rangeValidateError = newOperatorConfig.validateValues(jsValues);
          if (showErrorMessage) {
            valueErrors.push(rangeValidateError);
          }
        }
        newValueError = new Immutable.List(valueErrors);
      }
      newValueType = new Immutable.List(Array.from({
        length: operatorCardinality
      }, function(_ignore, i2) {
        var vt = null;
        if (canReuseValue) {
          if (i2 < currentValueType.size)
            vt = currentValueType.get(i2);
        } else if (operatorCardinality == 1 && firstWidgetConfig && firstWidgetConfig.type !== void 0) {
          vt = firstWidgetConfig.type;
        } else if (operatorCardinality == 1 && newFieldConfig && newFieldConfig.type !== void 0) {
          vt = newFieldConfig.type == "!group" ? "number" : newFieldConfig.type;
        }
        return vt;
      }));
      return {
        canReuseValue,
        newValue,
        newValueSrc,
        newValueType,
        newValueError,
        operatorCardinality
      };
    };
    var getFirstField = function getFirstField2(config2) {
      var parentRuleGroupPath = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var fieldSeparator = config2.settings.fieldSeparator;
      var parentPathArr = typeof parentRuleGroupPath == "string" ? parentRuleGroupPath.split(fieldSeparator) : parentRuleGroupPath;
      var parentField = parentRuleGroupPath ? getFieldRawConfig(config2, parentRuleGroupPath) : config2;
      var firstField = parentField, key = null, keysPath = [];
      do {
        var subfields = firstField === config2 ? config2.fields : firstField.subfields;
        if (!subfields || !Object.keys(subfields).length) {
          firstField = key = null;
          break;
        }
        key = Object.keys(subfields)[0];
        keysPath.push(key);
        firstField = subfields[key];
      } while (firstField.type == "!struct" || firstField.type == "!group");
      return (parentPathArr || []).concat(keysPath).join(fieldSeparator);
    };
    var getOperatorsForField = function getOperatorsForField2(config2, field) {
      var fieldConfig = getFieldConfig$8(config2, field);
      var fieldOps = fieldConfig ? fieldConfig.operators : [];
      return fieldOps;
    };
    var getFirstOperator = function getFirstOperator2(config2, field) {
      var fieldOps = getOperatorsForField(config2, field);
      return fieldOps ? fieldOps[0] : null;
    };
    var getFieldPath$3 = function getFieldPath2(field, config2) {
      var onlyKeys = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (!field)
        return null;
      var fieldSeparator = config2.settings.fieldSeparator;
      var parts = Array.isArray(field) ? field : field.split(fieldSeparator);
      if (onlyKeys)
        return parts;
      else
        return parts.map(function(_curr, ind, arr) {
          return arr.slice(0, ind + 1);
        }).map(function(parts2) {
          return parts2.join(fieldSeparator);
        });
    };
    var getFuncPathLabels$1 = function getFuncPathLabels2(field, config2) {
      var parentField = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      return getFieldPathLabels$3(field, config2, parentField, "funcs", "subfields");
    };
    var getFieldPathLabels$3 = function getFieldPathLabels2(field, config2) {
      var parentField = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var fieldsKey = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "fields";
      var subfieldsKey = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : "subfields";
      if (!field)
        return null;
      var fieldSeparator = config2.settings.fieldSeparator;
      var parts = Array.isArray(field) ? field : field.split(fieldSeparator);
      var parentParts = parentField ? Array.isArray(parentField) ? parentField : parentField.split(fieldSeparator) : [];
      return parts.slice(parentParts.length).map(function(_curr, ind, arr) {
        return arr.slice(0, ind + 1);
      }).map(function(parts2) {
        return [].concat(_toConsumableArray(parentParts), _toConsumableArray(parts2)).join(fieldSeparator);
      }).map(function(part) {
        var cnf = getFieldRawConfig(config2, part, fieldsKey, subfieldsKey);
        return cnf && cnf.label || last_1(part.split(fieldSeparator));
      }).filter(function(label) {
        return label != null;
      });
    };
    var getFieldPartsConfigs = function getFieldPartsConfigs2(field, config2) {
      var parentField = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      if (!field)
        return null;
      var parentFieldDef = parentField && getFieldRawConfig(config2, parentField) || null;
      var fieldSeparator = config2.settings.fieldSeparator;
      var parts = Array.isArray(field) ? field : field.split(fieldSeparator);
      var parentParts = parentField ? Array.isArray(parentField) ? parentField : parentField.split(fieldSeparator) : [];
      return parts.slice(parentParts.length).map(function(_curr, ind, arr) {
        return arr.slice(0, ind + 1);
      }).map(function(parts2) {
        return {
          part: [].concat(_toConsumableArray(parentParts), _toConsumableArray(parts2)).join(fieldSeparator),
          key: parts2[parts2.length - 1]
        };
      }).map(function(_ref) {
        var part = _ref.part, key = _ref.key;
        var cnf = getFieldRawConfig(config2, part);
        return {
          key,
          cnf
        };
      }).map(function(_ref2, ind, arr) {
        var key = _ref2.key, cnf = _ref2.cnf;
        var parentCnf = ind > 0 ? arr[ind - 1].cnf : parentFieldDef;
        return [key, cnf, parentCnf];
      });
    };
    var getValueLabel$1 = function getValueLabel2(config2, field, operator, delta) {
      var valueSrc = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var isSpecialRange = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : false;
      var isFuncArg = field && _typeof$1(field) == "object" && !!field.func && !!field.arg;
      var showLabels = config2.settings.showLabels;
      var fieldConfig = getFieldConfig$8(config2, field);
      var fieldWidgetConfig = getFieldWidgetConfig$3(config2, field, operator, null, valueSrc) || {};
      var mergedOpConfig = getOperatorConfig$4(config2, operator, field) || {};
      var cardinality = isSpecialRange ? 1 : mergedOpConfig.cardinality;
      var ret = null;
      if (cardinality > 1) {
        var valueLabels = fieldWidgetConfig.valueLabels || mergedOpConfig.valueLabels;
        if (valueLabels)
          ret = valueLabels[delta];
        if (ret && _typeof$1(ret) != "object") {
          ret = {
            label: ret,
            placeholder: ret
          };
        }
        if (!ret) {
          ret = {
            label: config2.settings.valueLabel + " " + (delta + 1),
            placeholder: config2.settings.valuePlaceholder + " " + (delta + 1)
          };
        }
      } else {
        var label = fieldWidgetConfig.valueLabel;
        var placeholder = fieldWidgetConfig.valuePlaceholder;
        if (isFuncArg) {
          if (!label)
            label = fieldConfig.label || field.arg;
          if (!placeholder && !showLabels)
            placeholder = fieldConfig.label || field.arg;
        }
        ret = {
          label: label || config2.settings.valueLabel,
          placeholder: placeholder || config2.settings.valuePlaceholder
        };
      }
      return ret;
    };
    function _getWidgetsAndSrcsForFieldOp(config2, field) {
      var operator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var valueSrc = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var widgets2 = [];
      var valueSrcs = [];
      if (!field)
        return {
          widgets: widgets2,
          valueSrcs
        };
      var isFuncArg = _typeof$1(field) == "object" && (!!field.func && !!field.arg || field._isFuncArg);
      var fieldConfig = getFieldConfig$8(config2, field);
      var opConfig = operator ? config2.operators[operator] : null;
      if (fieldConfig && fieldConfig.widgets) {
        var _loop2 = function _loop22() {
          var widgetConfig = fieldConfig.widgets[widget];
          if (!config2.widgets[widget]) {
            return "continue";
          }
          var widgetValueSrc = config2.widgets[widget].valueSrc || "value";
          var canAdd = true;
          if (widget == "field") {
            canAdd = canAdd && filterValueSourcesForField(config2, ["field"], fieldConfig).length > 0;
          }
          if (widget == "func") {
            canAdd = canAdd && filterValueSourcesForField(config2, ["func"], fieldConfig).length > 0;
          }
          if (valueSrc == "value" && !widgetConfig.operators && !isFuncArg && field != "!case_value")
            canAdd = false;
          if (widgetConfig.operators && operator)
            canAdd = canAdd && widgetConfig.operators.indexOf(operator) != -1;
          if (valueSrc && valueSrc != widgetValueSrc && valueSrc != "const")
            canAdd = false;
          if (opConfig && opConfig.cardinality == 0 && widgetValueSrc != "value")
            canAdd = false;
          if (canAdd) {
            widgets2.push(widget);
            var canAddValueSrc = fieldConfig.valueSources && fieldConfig.valueSources.indexOf(widgetValueSrc) != -1;
            if (opConfig && opConfig.valueSources && opConfig.valueSources.indexOf(widgetValueSrc) == -1)
              canAddValueSrc = false;
            if (canAddValueSrc && !valueSrcs.find(function(v) {
              return v == widgetValueSrc;
            }))
              valueSrcs.push(widgetValueSrc);
          }
        };
        for (var widget in fieldConfig.widgets) {
          var _ret2 = _loop2();
          if (_ret2 === "continue")
            continue;
        }
      }
      var widgetWeight = function widgetWeight2(w) {
        var wg = 0;
        if (fieldConfig.preferWidgets) {
          if (fieldConfig.preferWidgets.includes(w))
            wg += 10 - fieldConfig.preferWidgets.indexOf(w);
        } else if (w == fieldConfig.mainWidget) {
          wg += 100;
        }
        if (w == "field") {
          wg -= 1;
        }
        if (w == "func") {
          wg -= 2;
        }
        return wg;
      };
      widgets2.sort(function(w1, w2) {
        return widgetWeight(w2) - widgetWeight(w1);
      });
      return {
        widgets: widgets2,
        valueSrcs
      };
    }
    var getWidgetsForFieldOp$1 = function getWidgetsForFieldOp2(config2, field, operator) {
      var valueSrc = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var _getWidgetsAndSrcsFor = _getWidgetsAndSrcsForFieldOp(config2, field, operator, valueSrc), widgets2 = _getWidgetsAndSrcsFor.widgets;
      return widgets2;
    };
    var filterValueSourcesForField = function filterValueSourcesForField2(config2, valueSrcs, fieldDefinition) {
      if (!fieldDefinition)
        return valueSrcs;
      return valueSrcs.filter(function(vs) {
        var canAdd = true;
        if (vs == "field") {
          if (config2._fieldsCntByType) {
            var minCnt = fieldDefinition._isFuncArg ? 0 : 1;
            canAdd = canAdd && config2._fieldsCntByType[fieldDefinition.type] > minCnt;
          }
        }
        if (vs == "func") {
          if (config2._funcsCntByType)
            canAdd = canAdd && !!config2._funcsCntByType[fieldDefinition.type];
          if (fieldDefinition.funcs)
            canAdd = canAdd && fieldDefinition.funcs.length > 0;
        }
        return canAdd;
      });
    };
    var getValueSourcesForFieldOp$1 = function getValueSourcesForFieldOp2(config2, field, operator) {
      var fieldDefinition = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var _getWidgetsAndSrcsFor2 = _getWidgetsAndSrcsForFieldOp(config2, field, operator, null), valueSrcs = _getWidgetsAndSrcsFor2.valueSrcs;
      var filteredValueSrcs = filterValueSourcesForField(config2, valueSrcs, fieldDefinition);
      return filteredValueSrcs;
    };
    var getWidgetForFieldOp$3 = function getWidgetForFieldOp2(config2, field, operator) {
      var valueSrc = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var _getWidgetsAndSrcsFor3 = _getWidgetsAndSrcsForFieldOp(config2, field, operator, valueSrc), widgets2 = _getWidgetsAndSrcsFor3.widgets;
      var widget = null;
      if (widgets2.length)
        widget = widgets2[0];
      return widget;
    };
    var formatFieldName = function formatFieldName2(field, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {};
      if (!field)
        return;
      var fieldDef = getFieldConfig$8(config2, field) || {};
      var fieldSeparator = config2.settings.fieldSeparator;
      var fieldParts = Array.isArray(field) ? field : field.split(fieldSeparator);
      var fieldName = Array.isArray(field) ? field.join(fieldSeparator) : field;
      if (options !== null && options !== void 0 && options.useTableName && fieldDef.tableName) {
        var fieldPartsCopy = _toConsumableArray(fieldParts);
        fieldPartsCopy[0] = fieldDef.tableName;
        fieldName = fieldPartsCopy.join(fieldSeparator);
      }
      if (fieldDef.fieldName) {
        fieldName = fieldDef.fieldName;
      }
      if (parentField) {
        var parentFieldDef = getFieldConfig$8(config2, parentField) || {};
        var parentFieldName = parentField;
        if (parentFieldDef.fieldName) {
          parentFieldName = parentFieldDef.fieldName;
        }
        if (fieldName.indexOf(parentFieldName + fieldSeparator) == 0) {
          fieldName = fieldName.slice((parentFieldName + fieldSeparator).length);
        } else {
          meta.errors.push("Can't cut group ".concat(parentFieldName, " from field ").concat(fieldName));
        }
      }
      return fieldName;
    };
    const ruleUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      getNewValueForFieldOp,
      getFirstField,
      getOperatorsForField,
      getFirstOperator,
      getFieldPath: getFieldPath$3,
      getFuncPathLabels: getFuncPathLabels$1,
      getFieldPathLabels: getFieldPathLabels$3,
      getFieldPartsConfigs,
      getValueLabel: getValueLabel$1,
      getWidgetsForFieldOp: getWidgetsForFieldOp$1,
      filterValueSourcesForField,
      getValueSourcesForFieldOp: getValueSourcesForFieldOp$1,
      getWidgetForFieldOp: getWidgetForFieldOp$3,
      formatFieldName
    }, Symbol.toStringTag, { value: "Module" }));
    var clone$4 = { exports: {} };
    (function(module2) {
      var clone2 = function() {
        function _instanceof(obj, type) {
          return type != null && obj instanceof type;
        }
        var nativeMap;
        try {
          nativeMap = Map;
        } catch (_2) {
          nativeMap = function() {
          };
        }
        var nativeSet;
        try {
          nativeSet = Set;
        } catch (_2) {
          nativeSet = function() {
          };
        }
        var nativePromise;
        try {
          nativePromise = Promise;
        } catch (_2) {
          nativePromise = function() {
          };
        }
        function clone3(parent2, circular, depth, prototype, includeNonEnumerable) {
          if (typeof circular === "object") {
            depth = circular.depth;
            prototype = circular.prototype;
            includeNonEnumerable = circular.includeNonEnumerable;
            circular = circular.circular;
          }
          var allParents = [];
          var allChildren = [];
          var useBuffer = typeof Buffer != "undefined";
          if (typeof circular == "undefined")
            circular = true;
          if (typeof depth == "undefined")
            depth = Infinity;
          function _clone(parent3, depth2) {
            if (parent3 === null)
              return null;
            if (depth2 === 0)
              return parent3;
            var child;
            var proto2;
            if (typeof parent3 != "object") {
              return parent3;
            }
            if (_instanceof(parent3, nativeMap)) {
              child = new nativeMap();
            } else if (_instanceof(parent3, nativeSet)) {
              child = new nativeSet();
            } else if (_instanceof(parent3, nativePromise)) {
              child = new nativePromise(function(resolve, reject) {
                parent3.then(function(value2) {
                  resolve(_clone(value2, depth2 - 1));
                }, function(err) {
                  reject(_clone(err, depth2 - 1));
                });
              });
            } else if (clone3.__isArray(parent3)) {
              child = [];
            } else if (clone3.__isRegExp(parent3)) {
              child = new RegExp(parent3.source, __getRegExpFlags(parent3));
              if (parent3.lastIndex)
                child.lastIndex = parent3.lastIndex;
            } else if (clone3.__isDate(parent3)) {
              child = new Date(parent3.getTime());
            } else if (useBuffer && Buffer.isBuffer(parent3)) {
              if (Buffer.allocUnsafe) {
                child = Buffer.allocUnsafe(parent3.length);
              } else {
                child = new Buffer(parent3.length);
              }
              parent3.copy(child);
              return child;
            } else if (_instanceof(parent3, Error)) {
              child = Object.create(parent3);
            } else {
              if (typeof prototype == "undefined") {
                proto2 = Object.getPrototypeOf(parent3);
                child = Object.create(proto2);
              } else {
                child = Object.create(prototype);
                proto2 = prototype;
              }
            }
            if (circular) {
              var index = allParents.indexOf(parent3);
              if (index != -1) {
                return allChildren[index];
              }
              allParents.push(parent3);
              allChildren.push(child);
            }
            if (_instanceof(parent3, nativeMap)) {
              parent3.forEach(function(value2, key) {
                var keyChild = _clone(key, depth2 - 1);
                var valueChild = _clone(value2, depth2 - 1);
                child.set(keyChild, valueChild);
              });
            }
            if (_instanceof(parent3, nativeSet)) {
              parent3.forEach(function(value2) {
                var entryChild = _clone(value2, depth2 - 1);
                child.add(entryChild);
              });
            }
            for (var i in parent3) {
              var attrs;
              if (proto2) {
                attrs = Object.getOwnPropertyDescriptor(proto2, i);
              }
              if (attrs && attrs.set == null) {
                continue;
              }
              child[i] = _clone(parent3[i], depth2 - 1);
            }
            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(parent3);
              for (var i = 0; i < symbols.length; i++) {
                var symbol = symbols[i];
                var descriptor = Object.getOwnPropertyDescriptor(parent3, symbol);
                if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
                  continue;
                }
                child[symbol] = _clone(parent3[symbol], depth2 - 1);
                if (!descriptor.enumerable) {
                  Object.defineProperty(child, symbol, {
                    enumerable: false
                  });
                }
              }
            }
            if (includeNonEnumerable) {
              var allPropertyNames = Object.getOwnPropertyNames(parent3);
              for (var i = 0; i < allPropertyNames.length; i++) {
                var propertyName = allPropertyNames[i];
                var descriptor = Object.getOwnPropertyDescriptor(parent3, propertyName);
                if (descriptor && descriptor.enumerable) {
                  continue;
                }
                child[propertyName] = _clone(parent3[propertyName], depth2 - 1);
                Object.defineProperty(child, propertyName, {
                  enumerable: false
                });
              }
            }
            return child;
          }
          return _clone(parent2, depth);
        }
        clone3.clonePrototype = function clonePrototype(parent2) {
          if (parent2 === null)
            return null;
          var c = function() {
          };
          c.prototype = parent2;
          return new c();
        };
        function __objToStr(o) {
          return Object.prototype.toString.call(o);
        }
        clone3.__objToStr = __objToStr;
        function __isDate(o) {
          return typeof o === "object" && __objToStr(o) === "[object Date]";
        }
        clone3.__isDate = __isDate;
        function __isArray(o) {
          return typeof o === "object" && __objToStr(o) === "[object Array]";
        }
        clone3.__isArray = __isArray;
        function __isRegExp(o) {
          return typeof o === "object" && __objToStr(o) === "[object RegExp]";
        }
        clone3.__isRegExp = __isRegExp;
        function __getRegExpFlags(re) {
          var flags = "";
          if (re.global)
            flags += "g";
          if (re.ignoreCase)
            flags += "i";
          if (re.multiline)
            flags += "m";
          return flags;
        }
        clone3.__getRegExpFlags = __getRegExpFlags;
        return clone3;
      }();
      if (module2.exports) {
        module2.exports = clone2;
      }
    })(clone$4);
    const clone$3 = clone$4.exports;
    var assignValue = _assignValue, castPath$2 = _castPath, isIndex$1 = _isIndex, isObject$6 = isObject_1, toKey$3 = _toKey;
    function baseSet$1(object, path, value2, customizer) {
      if (!isObject$6(object)) {
        return object;
      }
      path = castPath$2(path, object);
      var index = -1, length2 = path.length, lastIndex = length2 - 1, nested2 = object;
      while (nested2 != null && ++index < length2) {
        var key = toKey$3(path[index]), newValue = value2;
        if (key === "__proto__" || key === "constructor" || key === "prototype") {
          return object;
        }
        if (index != lastIndex) {
          var objValue = nested2[key];
          newValue = customizer ? customizer(objValue, key, nested2) : void 0;
          if (newValue === void 0) {
            newValue = isObject$6(objValue) ? objValue : isIndex$1(path[index + 1]) ? [] : {};
          }
        }
        assignValue(nested2, key, newValue);
        nested2 = nested2[key];
      }
      return object;
    }
    var _baseSet = baseSet$1;
    var baseGet$2 = _baseGet, baseSet = _baseSet, castPath$1 = _castPath;
    function basePickBy$2(object, paths, predicate) {
      var index = -1, length2 = paths.length, result = {};
      while (++index < length2) {
        var path = paths[index], value2 = baseGet$2(object, path);
        if (predicate(value2, path)) {
          baseSet(result, castPath$1(path, object), value2);
        }
      }
      return result;
    }
    var _basePickBy = basePickBy$2;
    function baseHasIn$1(object, key) {
      return object != null && key in Object(object);
    }
    var _baseHasIn = baseHasIn$1;
    var castPath = _castPath, isArguments = isArguments_1, isArray$2 = isArray_1, isIndex = _isIndex, isLength = isLength_1, toKey$2 = _toKey;
    function hasPath$1(object, path, hasFunc) {
      path = castPath(path, object);
      var index = -1, length2 = path.length, result = false;
      while (++index < length2) {
        var key = toKey$2(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length2) {
        return result;
      }
      length2 = object == null ? 0 : object.length;
      return !!length2 && isLength(length2) && isIndex(key, length2) && (isArray$2(object) || isArguments(object));
    }
    var _hasPath = hasPath$1;
    var baseHasIn = _baseHasIn, hasPath = _hasPath;
    function hasIn$2(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }
    var hasIn_1 = hasIn$2;
    var basePickBy$1 = _basePickBy, hasIn$1 = hasIn_1;
    function basePick$1(object, paths) {
      return basePickBy$1(object, paths, function(value2, path) {
        return hasIn$1(object, path);
      });
    }
    var _basePick = basePick$1;
    var basePick = _basePick, flatRest = _flatRest;
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });
    var pick_1 = pick;
    var logic = { exports: {} };
    (function(module2, exports2) {
      (function(root2, factory) {
        {
          module2.exports = factory();
        }
      })(commonjsGlobal, function() {
        if (!Array.isArray) {
          Array.isArray = function(arg) {
            return Object.prototype.toString.call(arg) === "[object Array]";
          };
        }
        function arrayUnique(array) {
          var a = [];
          for (var i = 0, l = array.length; i < l; i++) {
            if (a.indexOf(array[i]) === -1) {
              a.push(array[i]);
            }
          }
          return a;
        }
        var jsonLogic = {};
        var operations = {
          "==": function(a, b) {
            return a == b;
          },
          "===": function(a, b) {
            return a === b;
          },
          "!=": function(a, b) {
            return a != b;
          },
          "!==": function(a, b) {
            return a !== b;
          },
          ">": function(a, b) {
            return a > b;
          },
          ">=": function(a, b) {
            return a >= b;
          },
          "<": function(a, b, c) {
            return c === void 0 ? a < b : a < b && b < c;
          },
          "<=": function(a, b, c) {
            return c === void 0 ? a <= b : a <= b && b <= c;
          },
          "!!": function(a) {
            return jsonLogic.truthy(a);
          },
          "!": function(a) {
            return !jsonLogic.truthy(a);
          },
          "%": function(a, b) {
            return a % b;
          },
          "log": function(a) {
            console.log(a);
            return a;
          },
          "in": function(a, b) {
            if (!b || typeof b.indexOf === "undefined")
              return false;
            return b.indexOf(a) !== -1;
          },
          "cat": function() {
            return Array.prototype.join.call(arguments, "");
          },
          "substr": function(source, start2, end2) {
            if (end2 < 0) {
              var temp = String(source).substr(start2);
              return temp.substr(0, temp.length + end2);
            }
            return String(source).substr(start2, end2);
          },
          "+": function() {
            return Array.prototype.reduce.call(arguments, function(a, b) {
              return parseFloat(a, 10) + parseFloat(b, 10);
            }, 0);
          },
          "*": function() {
            return Array.prototype.reduce.call(arguments, function(a, b) {
              return parseFloat(a, 10) * parseFloat(b, 10);
            });
          },
          "-": function(a, b) {
            if (b === void 0) {
              return -a;
            } else {
              return a - b;
            }
          },
          "/": function(a, b) {
            return a / b;
          },
          "min": function() {
            return Math.min.apply(this, arguments);
          },
          "max": function() {
            return Math.max.apply(this, arguments);
          },
          "merge": function() {
            return Array.prototype.reduce.call(arguments, function(a, b) {
              return a.concat(b);
            }, []);
          },
          "var": function(a, b) {
            var not_found = b === void 0 ? null : b;
            var data = this;
            if (typeof a === "undefined" || a === "" || a === null) {
              return data;
            }
            var sub_props = String(a).split(".");
            for (var i = 0; i < sub_props.length; i++) {
              if (data === null || data === void 0) {
                return not_found;
              }
              data = data[sub_props[i]];
              if (data === void 0) {
                return not_found;
              }
            }
            return data;
          },
          "missing": function() {
            var missing = [];
            var keys2 = Array.isArray(arguments[0]) ? arguments[0] : arguments;
            for (var i = 0; i < keys2.length; i++) {
              var key = keys2[i];
              var value2 = jsonLogic.apply({ "var": key }, this);
              if (value2 === null || value2 === "") {
                missing.push(key);
              }
            }
            return missing;
          },
          "missing_some": function(need_count, options) {
            var are_missing = jsonLogic.apply({ "missing": options }, this);
            if (options.length - are_missing.length >= need_count) {
              return [];
            } else {
              return are_missing;
            }
          }
        };
        jsonLogic.is_logic = function(logic2) {
          return typeof logic2 === "object" && logic2 !== null && !Array.isArray(logic2) && Object.keys(logic2).length === 1;
        };
        jsonLogic.truthy = function(value2) {
          if (Array.isArray(value2) && value2.length === 0) {
            return false;
          }
          return !!value2;
        };
        jsonLogic.get_operator = function(logic2) {
          return Object.keys(logic2)[0];
        };
        jsonLogic.get_values = function(logic2) {
          return logic2[jsonLogic.get_operator(logic2)];
        };
        jsonLogic.apply = function(logic2, data) {
          if (Array.isArray(logic2)) {
            return logic2.map(function(l) {
              return jsonLogic.apply(l, data);
            });
          }
          if (!jsonLogic.is_logic(logic2)) {
            return logic2;
          }
          var op = jsonLogic.get_operator(logic2);
          var values2 = logic2[op];
          var i;
          var current;
          var scopedLogic;
          var scopedData;
          var initial;
          if (!Array.isArray(values2)) {
            values2 = [values2];
          }
          if (op === "if" || op == "?:") {
            for (i = 0; i < values2.length - 1; i += 2) {
              if (jsonLogic.truthy(jsonLogic.apply(values2[i], data))) {
                return jsonLogic.apply(values2[i + 1], data);
              }
            }
            if (values2.length === i + 1) {
              return jsonLogic.apply(values2[i], data);
            }
            return null;
          } else if (op === "and") {
            for (i = 0; i < values2.length; i += 1) {
              current = jsonLogic.apply(values2[i], data);
              if (!jsonLogic.truthy(current)) {
                return current;
              }
            }
            return current;
          } else if (op === "or") {
            for (i = 0; i < values2.length; i += 1) {
              current = jsonLogic.apply(values2[i], data);
              if (jsonLogic.truthy(current)) {
                return current;
              }
            }
            return current;
          } else if (op === "filter") {
            scopedData = jsonLogic.apply(values2[0], data);
            scopedLogic = values2[1];
            if (!Array.isArray(scopedData)) {
              return [];
            }
            return scopedData.filter(function(datum) {
              return jsonLogic.truthy(jsonLogic.apply(scopedLogic, datum));
            });
          } else if (op === "map") {
            scopedData = jsonLogic.apply(values2[0], data);
            scopedLogic = values2[1];
            if (!Array.isArray(scopedData)) {
              return [];
            }
            return scopedData.map(function(datum) {
              return jsonLogic.apply(scopedLogic, datum);
            });
          } else if (op === "reduce") {
            scopedData = jsonLogic.apply(values2[0], data);
            scopedLogic = values2[1];
            initial = typeof values2[2] !== "undefined" ? values2[2] : null;
            if (!Array.isArray(scopedData)) {
              return initial;
            }
            return scopedData.reduce(
              function(accumulator, current2) {
                return jsonLogic.apply(
                  scopedLogic,
                  { current: current2, accumulator }
                );
              },
              initial
            );
          } else if (op === "all") {
            scopedData = jsonLogic.apply(values2[0], data);
            scopedLogic = values2[1];
            if (!Array.isArray(scopedData) || !scopedData.length) {
              return false;
            }
            for (i = 0; i < scopedData.length; i += 1) {
              if (!jsonLogic.truthy(jsonLogic.apply(scopedLogic, scopedData[i]))) {
                return false;
              }
            }
            return true;
          } else if (op === "none") {
            scopedData = jsonLogic.apply(values2[0], data);
            scopedLogic = values2[1];
            if (!Array.isArray(scopedData) || !scopedData.length) {
              return true;
            }
            for (i = 0; i < scopedData.length; i += 1) {
              if (jsonLogic.truthy(jsonLogic.apply(scopedLogic, scopedData[i]))) {
                return false;
              }
            }
            return true;
          } else if (op === "some") {
            scopedData = jsonLogic.apply(values2[0], data);
            scopedLogic = values2[1];
            if (!Array.isArray(scopedData) || !scopedData.length) {
              return false;
            }
            for (i = 0; i < scopedData.length; i += 1) {
              if (jsonLogic.truthy(jsonLogic.apply(scopedLogic, scopedData[i]))) {
                return true;
              }
            }
            return false;
          }
          values2 = values2.map(function(val) {
            return jsonLogic.apply(val, data);
          });
          if (operations.hasOwnProperty(op) && typeof operations[op] === "function") {
            return operations[op].apply(data, values2);
          } else if (op.indexOf(".") > 0) {
            var sub_ops = String(op).split(".");
            var operation = operations;
            for (i = 0; i < sub_ops.length; i++) {
              if (!operation.hasOwnProperty(sub_ops[i])) {
                throw new Error("Unrecognized operation " + op + " (failed at " + sub_ops.slice(0, i + 1).join(".") + ")");
              }
              operation = operation[sub_ops[i]];
            }
            return operation.apply(data, values2);
          }
          throw new Error("Unrecognized operation " + op);
        };
        jsonLogic.uses_data = function(logic2) {
          var collection = [];
          if (jsonLogic.is_logic(logic2)) {
            var op = jsonLogic.get_operator(logic2);
            var values2 = logic2[op];
            if (!Array.isArray(values2)) {
              values2 = [values2];
            }
            if (op === "var") {
              collection.push(values2[0]);
            } else {
              values2.forEach(function(val) {
                collection.push.apply(collection, jsonLogic.uses_data(val));
              });
            }
          }
          return arrayUnique(collection);
        };
        jsonLogic.add_operation = function(name, code) {
          operations[name] = code;
        };
        jsonLogic.rm_operation = function(name) {
          delete operations[name];
        };
        jsonLogic.rule_like = function(rule2, pattern) {
          if (pattern === rule2) {
            return true;
          }
          if (pattern === "@") {
            return true;
          }
          if (pattern === "number") {
            return typeof rule2 === "number";
          }
          if (pattern === "string") {
            return typeof rule2 === "string";
          }
          if (pattern === "array") {
            return Array.isArray(rule2) && !jsonLogic.is_logic(rule2);
          }
          if (jsonLogic.is_logic(pattern)) {
            if (jsonLogic.is_logic(rule2)) {
              var pattern_op = jsonLogic.get_operator(pattern);
              var rule_op = jsonLogic.get_operator(rule2);
              if (pattern_op === "@" || pattern_op === rule_op) {
                return jsonLogic.rule_like(
                  jsonLogic.get_values(rule2, false),
                  jsonLogic.get_values(pattern, false)
                );
              }
            }
            return false;
          }
          if (Array.isArray(pattern)) {
            if (Array.isArray(rule2)) {
              if (pattern.length !== rule2.length) {
                return false;
              }
              for (var i = 0; i < pattern.length; i += 1) {
                if (!jsonLogic.rule_like(rule2[i], pattern[i])) {
                  return false;
                }
              }
              return true;
            } else {
              return false;
            }
          }
          return false;
        };
        return jsonLogic;
      });
    })(logic);
    const JL = logic.exports;
    function ownKeys$x(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$x(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$x(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$x(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function applyJsonLogic(logic2, data) {
      return JL.apply(logic2, data);
    }
    function addJsonLogicOperation(name, op) {
      return JL.add_operation(name, op);
    }
    var customJsonLogicOperations = {
      CALL: function CALL(fn, ctx2) {
        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }
        return fn.call.apply(fn, [ctx2].concat(args));
      },
      JSX: function JSX(type, props) {
        return {
          type,
          props
        };
      },
      mergeObjects: function mergeObjects(obj1, obj2) {
        return _objectSpread$x(_objectSpread$x({}, obj1), obj2);
      },
      fromEntries: function fromEntries(entries) {
        return Object.fromEntries(entries);
      },
      strlen: function strlen2(str) {
        return (str === null || str === void 0 ? void 0 : str.length) || 0;
      },
      regexTest: function regexTest(str, pattern, flags) {
        return (str === null || str === void 0 ? void 0 : str.match(new RegExp(pattern, flags))) != null;
      },
      now: function now2() {
        return new Date();
      },
      date_add: function date_add(date, val, dim) {
        return hooks(date).add(val, dim).toDate();
      },
      toLowerCase: function toLowerCase(str) {
        return str.toLowerCase();
      },
      toUpperCase: function toUpperCase(str) {
        return str.toUpperCase();
      }
    };
    function addRequiredJsonLogicOperations() {
      for (var k in customJsonLogicOperations) {
        addJsonLogicOperation(k, customJsonLogicOperations[k]);
      }
    }
    function _createForOfIteratorHelper$6(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$6(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$6(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$6(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$6(o, minLen);
    }
    function _arrayLikeToArray$6(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$w(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$w(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$w(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$w(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    addRequiredJsonLogicOperations();
    function applyJsonLogicWithPath(logic2, data, path) {
      var ret;
      try {
        ret = JL.apply(logic2, data);
      } catch (e) {
        e.message = "".concat(path.join("."), " :: ").concat(e.message);
        throw e;
      }
      return ret;
    }
    function callContextFn(_this, fn, args, path) {
      var ret;
      try {
        ret = fn.call.apply(fn, [_this].concat(_toConsumableArray(args)));
      } catch (e) {
        e.message = "".concat(path.join("."), " :: ").concat(e.message);
        throw e;
      }
      return ret;
    }
    var configKeys$1 = ["conjunctions", "fields", "types", "operators", "widgets", "settings", "funcs", "ctx"];
    var compileMetaFieldSettings = {
      asyncFetch: {
        type: "f",
        args: ["search", "offset"]
      },
      labelYes: {
        type: "r"
      },
      labelNo: {
        type: "r"
      },
      marks: {
        type: "r",
        isArr: true
      },
      validateValue: {
        type: "f",
        args: ["val", "fieldSettings", "op", "opDef", "rightFieldDef"]
      }
    };
    var compileMetaWidget = _objectSpread$w(_objectSpread$w({}, compileMetaFieldSettings), {}, {
      factory: {
        type: "rf"
      },
      formatValue: {
        type: "f",
        args: ["val", "fieldDef", "wgtDef", "isForDisplay", "op", "opDef", "rightFieldDef"]
      },
      sqlFormatValue: {
        type: "f",
        args: ["val", "fieldDef", "wgtDef", "op", "opDef", "rightFieldDef"]
      },
      spelFormatValue: {
        type: "f",
        args: ["val", "fieldDef", "wgtDef", "op", "opDef", "rightFieldDef"]
      },
      spelImportValue: {
        type: "f",
        args: ["val"]
      },
      mongoFormatValue: {
        type: "f",
        args: ["val", "fieldDef", "wgtDef", "op", "opDef"]
      },
      elasticSearchFormatValue: {
        type: "f",
        args: ["queryType", "val", "op", "field", "config"]
      },
      jsonLogic: {
        type: "f",
        args: ["val", "fieldDef", "wgtDef", "op", "opDef"]
      },
      validateValue: {
        type: "f",
        args: ["val", "fieldSettings", "op", "opDef", "rightFieldDef"]
      },
      toJS: {
        type: "f",
        args: ["val"]
      }
    });
    var compileMetaOperator = {
      options: {
        factory: {
          type: "rf"
        }
      },
      formatOp: {
        type: "f",
        args: ["field", "op", "vals", "valueSrc", "valueType", "opDef", "operatorOptions", "isForDisplay", "fieldDef"]
      },
      mongoFormatOp: {
        type: "f",
        args: ["field", "op", "vals", "useExpr", "valueSrc", "valueType", "opDef", "operatorOptions", "fieldDef"]
      },
      sqlFormatOp: {
        type: "f",
        args: ["field", "op", "vals", "valueSrc", "valueType", "opDef", "operatorOptions", "fieldDef"]
      },
      spelFormatOp: {
        type: "f",
        args: ["field", "op", "vals", "valueSrc", "valueType", "opDef", "operatorOptions", "fieldDef"]
      },
      jsonLogic: {
        type: "f",
        ignore: "string",
        args: ["field", "op", "vals", "opDef", "operatorOptions", "fieldDef"]
      },
      elasticSearchQueryType: {
        type: "f",
        ignore: "string",
        args: ["valueType"]
      },
      textSeparators: {
        type: "r",
        isArr: true
      }
    };
    var compileMetaConjunction = {
      formatConj: {
        type: "f",
        args: ["children", "conj", "not", "isForDisplay"]
      },
      sqlFormatConj: {
        type: "f",
        args: ["children", "conj", "not"]
      },
      spelFormatConj: {
        type: "f",
        args: ["children", "conj", "not", "omitBrackets"]
      }
    };
    var compileMetaWidgetForType = {
      widgetProps: compileMetaWidget,
      opProps: compileMetaOperator
    };
    var compileMetaFunc = {
      renderBrackets: {
        type: "r",
        isArr: true
      },
      renderSeps: {
        type: "r",
        isArr: true
      },
      jsonLogic: {
        type: "f",
        ignore: "string",
        args: ["formattedArgs"]
      },
      jsonLogicImport: {
        type: "f",
        args: ["val"]
      },
      formatFunc: {
        type: "f",
        args: ["formattedArgs", "isForDisplay"]
      },
      sqlFormatFunc: {
        type: "f",
        args: ["formattedArgs"]
      },
      mongoFormatFunc: {
        type: "f",
        args: ["formattedArgs"]
      },
      spelFormatFunc: {
        type: "f",
        args: ["formattedArgs"]
      }
    };
    var compileMetaSettings = {
      locale: {
        mui: {
          type: "f",
          args: [],
          invokeWith: [],
          ignore: "jl"
        }
      },
      canCompareFieldWithField: {
        type: "f",
        args: ["leftField", "leftFieldConfig", "rightField", "rightFieldConfig", "op"]
      },
      formatReverse: {
        type: "f",
        args: ["q", "op", "reversedOp", "operatorDefinition", "revOperatorDefinition", "isForDisplay"]
      },
      sqlFormatReverse: {
        type: "f",
        args: ["q"]
      },
      spelFormatReverse: {
        type: "f",
        args: ["q"]
      },
      formatField: {
        type: "f",
        args: ["field", "parts", "label2", "fieldDefinition", "config", "isForDisplay"]
      },
      formatSpelField: {
        type: "f",
        args: ["field", "parentField", "parts", "partsExt", "fieldDefinition", "config"]
      },
      formatAggr: {
        type: "f",
        args: ["whereStr", "aggrField", "operator", "value", "valueSrc", "valueType", "opDef", "operatorOptions", "isForDisplay", "aggrFieldDef"]
      },
      normalizeListValues: {
        type: "f",
        args: ["listValues", "type", "fieldSettings"]
      },
      renderConfirm: {
        type: "f",
        args: ["props"]
      },
      useConfirm: {
        type: "f",
        args: []
      },
      renderField: {
        type: "rf"
      },
      renderOperator: {
        type: "rf"
      },
      renderFunc: {
        type: "rf"
      },
      renderConjs: {
        type: "rf"
      },
      renderButton: {
        type: "rf"
      },
      renderButtonGroup: {
        type: "rf"
      },
      renderValueSources: {
        type: "rf"
      },
      renderProvider: {
        type: "rf"
      },
      renderSwitch: {
        type: "rf"
      },
      renderSwitchPrefix: {
        type: "r"
      },
      renderItem: {
        type: "rf"
      },
      renderBeforeWidget: {
        type: "rf"
      },
      renderAfterWidget: {
        type: "rf"
      },
      renderBeforeActions: {
        type: "rf"
      },
      renderAfterActions: {
        type: "rf"
      },
      renderRuleError: {
        type: "rf"
      }
    };
    var compileMeta = {
      fields: {
        x: {
          fieldSettings: compileMetaFieldSettings,
          widgets: {
            x: compileMetaWidgetForType
          },
          mainWidgetProps: compileMetaWidget
        }
      },
      widgets: {
        x: compileMetaWidget
      },
      conjunctions: {
        x: compileMetaConjunction
      },
      operators: {
        x: compileMetaOperator
      },
      types: {
        x: {
          widgets: {
            x: compileMetaWidgetForType
          }
        }
      },
      funcs: {
        x: compileMetaFunc
      },
      settings: compileMetaSettings
    };
    var compressConfig = function compressConfig2(config2, baseConfig2) {
      if (config2.__fieldNames) {
        throw new Error("Don't apply `compressConfig()` to extended config");
      }
      var zipConfig = pick_1(config2, configKeys$1);
      delete zipConfig.ctx;
      var isObject2 = function isObject3(v) {
        return _typeof$1(v) == "object" && v !== null && !Array.isArray(v);
      };
      var _clean = function _clean2(target, base, path, meta) {
        if (isObject2(target)) {
          if (isDirtyJSX(target)) {
            target = cleanJSX(target);
          }
          if (path[0] === "funcs" && !base) {
            var funcKey = path[path.length - 1];
            base = getFuncConfig$2({
              funcs: meta.BasicFuncs
            }, funcKey) || void 0;
            if (base) {
              target["$$key"] = funcKey;
            }
          }
          if (base !== void 0 && isObject2(base)) {
            for (var k2 in base) {
              if (Object.prototype.hasOwnProperty.call(base, k2)) {
                if (!Object.keys(target).includes(k2) || target[k2] === void 0 && base[k2] !== void 0) {
                  target[k2] = "$$deleted";
                } else {
                  target[k2] = _clean2(target[k2], base[k2], [].concat(_toConsumableArray(path), [k2]), meta);
                  if (target[k2] === void 0) {
                    delete target[k2];
                  }
                }
              }
            }
          }
          for (var _k in target) {
            if (Object.prototype.hasOwnProperty.call(target, _k)) {
              if (!base || !Object.keys(base).includes(_k)) {
                var _base;
                target[_k] = _clean2(target[_k], (_base = base) === null || _base === void 0 ? void 0 : _base[_k], [].concat(_toConsumableArray(path), [_k]), meta);
              }
              if (target[_k] === void 0) {
                delete target[_k];
              }
            }
          }
          if (Object.keys(target).length === 0) {
            target = void 0;
          }
        } else if (Array.isArray(target)) {
          target.forEach(function(val, ind) {
            target[ind] = _clean2(target[ind], void 0, [].concat(_toConsumableArray(path), [ind]), meta);
          });
        }
        if (base !== void 0 && shallowEqual$2(target, base, true)) {
          return void 0;
        }
        if (typeof target === "function") {
          throw new Error("compressConfig: function at ".concat(path.join("."), " should be converted to JsonLogic"));
        }
        return target;
      };
      for (var _i = 0, _configKeys = configKeys$1; _i < _configKeys.length; _i++) {
        var rootKey = _configKeys[_i];
        if (rootKey === "ctx")
          ;
        else if (rootKey === "fields") {
          zipConfig[rootKey] = clone$3(zipConfig[rootKey]);
          _clean(zipConfig[rootKey], {}, [rootKey]);
        } else if (rootKey === "funcs") {
          zipConfig[rootKey] = clone$3(zipConfig[rootKey] || {});
          for (var k in zipConfig[rootKey]) {
            _clean(zipConfig[rootKey][k], null, [rootKey, k], {
              BasicFuncs
            });
          }
        } else {
          zipConfig[rootKey] = clone$3(zipConfig[rootKey]);
          _clean(zipConfig[rootKey], baseConfig2[rootKey], [rootKey]);
        }
      }
      return zipConfig;
    };
    var decompressConfig = function decompressConfig2(zipConfig, baseConfig2, ctx2) {
      if (!zipConfig.settings.useConfigCompress) {
        throw new Error("Please enable `useConfigCompress` in config settings to use decompressConfig()");
      }
      var unzipConfig = {};
      var isObject2 = function isObject3(v) {
        return _typeof$1(v) == "object" && v !== null && !Array.isArray(v);
      };
      var _mergeDeep = function _mergeDeep2(target, mixin, path) {
        if (isObject2(mixin)) {
          if (!isObject2(target)) {
            target = {};
          }
          for (var k in mixin) {
            if (Object.prototype.hasOwnProperty.call(mixin, k)) {
              if (mixin[k] === "$$deleted") {
                delete target[k];
              } else {
                target[k] = _mergeDeep2(target[k], mixin[k], [].concat(_toConsumableArray(path), [k]));
              }
            }
          }
        } else if (Array.isArray(mixin)) {
          target = clone$3(mixin);
        } else {
          target = mixin;
        }
        return target;
      };
      var _resolveAndMergeDeep = function _resolveAndMergeDeep2(target, path, meta) {
        var resolved = false;
        if (isObject2(target) && Object.prototype.hasOwnProperty.call(target, "$$key") && target["$$key"]) {
          var func = getFuncConfig$2({
            funcs: meta.BasicFuncs
          }, target["$$key"]);
          if (func) {
            delete target["$$key"];
            target = _mergeDeep(clone$3(func), target, path);
            resolved = true;
          } else {
            throw new Error("decompressConfig: basic function not found by key ".concat(target["$$key"], " at ").concat(path.join(".")));
          }
        }
        if (!resolved) {
          if (isObject2(target)) {
            for (var k in target) {
              if (Object.prototype.hasOwnProperty.call(target, k)) {
                target[k] = _resolveAndMergeDeep2(target[k], [].concat(_toConsumableArray(path), [k]), meta);
              }
            }
          } else if (Array.isArray(target)) {
            var _iterator = _createForOfIteratorHelper$6(target), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var _k2 = _step.value;
                target[_k2] = _resolveAndMergeDeep2(target[_k2], [].concat(_toConsumableArray(path), [_k2]), meta);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
        }
        return target;
      };
      for (var _i2 = 0, _configKeys2 = configKeys$1; _i2 < _configKeys2.length; _i2++) {
        var rootKey = _configKeys2[_i2];
        if (rootKey === "ctx") {
          unzipConfig[rootKey] = merge_1({}, baseConfig2.ctx || {}, ctx2 || {});
        } else if (rootKey === "funcs") {
          unzipConfig[rootKey] = clone$3(zipConfig[rootKey] || {});
          _resolveAndMergeDeep(unzipConfig[rootKey], [rootKey], {
            BasicFuncs
          });
        } else if (rootKey === "fields") {
          unzipConfig[rootKey] = clone$3(zipConfig[rootKey] || {});
        } else {
          unzipConfig[rootKey] = clone$3(baseConfig2[rootKey] || {});
          _mergeDeep(unzipConfig[rootKey], zipConfig[rootKey] || {}, [rootKey]);
        }
      }
      return unzipConfig;
    };
    var compileConfig = function compileConfig2(config2) {
      if (config2.__compliled) {
        return config2;
      }
      config2 = _objectSpread$w({}, config2);
      var opts = {
        ctx: config2.ctx
      };
      var logs = [];
      _compileConfigParts(config2, config2, opts, compileMeta, logs);
      Object.defineProperty(config2, "__compliled", {
        enumerable: false,
        writable: false,
        value: true
      });
      return config2;
    };
    function _compileConfigParts(config2, subconfig, opts, meta, logs) {
      var path = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : [];
      if (!subconfig)
        return;
      var isRoot = !path.length;
      for (var k in meta) {
        var submeta = meta[k];
        var newPath = k === "x" ? path : [].concat(_toConsumableArray(path), [k]);
        if (isRoot) {
          config2[k] = clone$3(config2[k]);
        }
        if (submeta.type === "r") {
          var targetObj = subconfig;
          var val = targetObj[k];
          if (submeta.isArr) {
            for (var ind in val) {
              var newVal = renderReactElement(val[ind], opts, [].concat(_toConsumableArray(newPath), [ind]));
              if (newVal !== val[ind]) {
                logs.push("Compiled ".concat(newPath.join("."), "[").concat(ind, "]"));
                val[ind] = newVal;
              }
            }
          } else {
            var _newVal = renderReactElement(val, opts, newPath, void 0);
            if (_newVal !== val) {
              logs.push("Compiled R ".concat(newPath.join(".")));
              targetObj[k] = _newVal;
            }
          }
        } else if (submeta.type === "rf") {
          var _targetObj = subconfig;
          var _val = _targetObj[k];
          var _newVal2 = compileJsonLogicReact(_val, opts, newPath, submeta.ignore);
          if (_newVal2 !== _val) {
            logs.push("Compiled JL-RF ".concat(newPath.join(".")));
            _targetObj[k] = _newVal2;
          }
        } else if (submeta.type === "f") {
          var _targetObj2 = subconfig;
          var _val2 = _targetObj2[k];
          var _newVal3 = compileJsonLogic(_val2, opts, newPath, submeta.args, submeta.ignore);
          if (submeta.invokeWith && _newVal3 && typeof _newVal3 === "function") {
            var _newVal4;
            _newVal3 = (_newVal4 = _newVal3).call.apply(_newVal4, [null].concat(_toConsumableArray(submeta.invokeWith)));
          }
          if (_newVal3 !== _val2) {
            logs.push("Compiled JL-F ".concat(newPath.join(".")));
            _targetObj2[k] = _newVal3;
          }
        } else if (k === "x") {
          for (var field in subconfig) {
            newPath = [].concat(_toConsumableArray(path), [field]);
            var def = subconfig[field];
            _compileConfigParts(config2, def, opts, submeta, logs, newPath);
            if (def.subfields) {
              _compileConfigParts(config2, def.subfields, opts, meta, logs, newPath);
            }
          }
        } else {
          var _def = subconfig[k];
          _compileConfigParts(config2, _def, opts, submeta, logs, newPath);
        }
      }
    }
    function compileJsonLogicReact(jl, opts, path) {
      if (isJsonLogic(jl)) {
        return function(props, ctx2) {
          ctx2 = ctx2 || (opts === null || opts === void 0 ? void 0 : opts.ctx);
          var data = {
            props,
            ctx: ctx2
          };
          var re = applyJsonLogicWithPath(jl, data, path);
          if (typeof re === "string") {
            re = {
              type: re,
              props
            };
          }
          var ret = renderReactElement(re, {
            ctx: ctx2
          }, path);
          return ret;
        };
      } else if (typeof jl === "string") {
        return function(props, ctx2) {
          ctx2 = ctx2 || (opts === null || opts === void 0 ? void 0 : opts.ctx);
          var fn = jl.split(".").reduce(function(o, k) {
            return o === null || o === void 0 ? void 0 : o[k];
          }, ctx2);
          if (fn) {
            return callContextFn(this, fn, [props, ctx2], path);
          } else {
            var re = {
              type: jl,
              props
            };
            var ret = renderReactElement(re, {
              ctx: ctx2
            }, path);
            return ret;
          }
        };
      }
      return jl;
    }
    function compileJsonLogic(jl, opts, path, argNames) {
      var ignore = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : void 0;
      if (isJsonLogic(jl) && ignore !== "jl") {
        return function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var ctx2 = this || (opts === null || opts === void 0 ? void 0 : opts.ctx);
          var data = (argNames || []).reduce(function(acc, k, i) {
            return _objectSpread$w(_objectSpread$w({}, acc), {}, _defineProperty$2({}, k, args[i]));
          }, {
            args,
            ctx: ctx2
          });
          var ret = applyJsonLogicWithPath(jl, data, path);
          return ret;
        }.bind(opts === null || opts === void 0 ? void 0 : opts.ctx);
      } else if (typeof jl === "string" && ignore !== "string") {
        return function() {
          var ctx2 = this || (opts === null || opts === void 0 ? void 0 : opts.ctx);
          var fn = jl.split(".").reduce(function(o, k) {
            return o === null || o === void 0 ? void 0 : o[k];
          }, ctx2);
          if (fn) {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }
            return callContextFn(this, fn, args, path);
          } else {
            throw new Error("".concat(path.join("."), " :: Function ").concat(jl, " is not found in ctx"));
          }
        }.bind(opts === null || opts === void 0 ? void 0 : opts.ctx);
      }
      return jl;
    }
    function getReactComponentFromCtx(name, ctx2) {
      var _ctx$components;
      return (ctx2 === null || ctx2 === void 0 ? void 0 : (_ctx$components = ctx2.components) === null || _ctx$components === void 0 ? void 0 : _ctx$components[name]) || ctx2.W[name] || ctx2.O[name];
    }
    function renderReactElement(jsx2, opts, path) {
      var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : void 0;
      if (isJSX(jsx2)) {
        var _props;
        var type = jsx2.type, props = jsx2.props;
        if (typeof type !== "string") {
          throw new Error("renderReactElement for ".concat(path.join("."), ": type should be string"));
        }
        var Cmp = getReactComponentFromCtx(type, opts.ctx) || type.toLowerCase();
        var children;
        if (key !== void 0) {
          props = _objectSpread$w(_objectSpread$w({}, props), {}, {
            key
          });
        }
        if ((_props = props) !== null && _props !== void 0 && _props.children) {
          children = renderReactElement(props.children, opts, path);
          props = _objectSpread$w(_objectSpread$w({}, props), {}, {
            children
          });
        }
        var res = opts.ctx.RCE(Cmp, props);
        return res;
      } else if (jsx2 instanceof Array) {
        return jsx2.map(function(el, i) {
          return renderReactElement(el, opts, path, "" + i);
        });
      }
      return jsx2;
    }
    function _createForOfIteratorHelper$5(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$5(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$5(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$5(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$5(o, minLen);
    }
    function _arrayLikeToArray$5(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$v(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$v(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$v(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$v(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var extendConfig$1 = function extendConfig2(config2, configId) {
      var canCompile = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      if (config2.__configId) {
        return config2;
      }
      if (canCompile && config2.settings.useConfigCompress) {
        config2 = compileConfig(config2);
      }
      config2 = _objectSpread$v({}, config2);
      config2.settings = merge_1({}, settings$3, config2.settings);
      config2._fieldsCntByType = {};
      config2._funcsCntByType = {};
      config2.types = clone$3(config2.types);
      _extendTypesConfig(config2.types, config2);
      config2.fields = clone$3(config2.fields);
      config2.__fieldNames = {};
      _extendFieldsConfig(config2.fields, config2);
      config2.funcs = clone$3(config2.funcs);
      _extendFuncArgsConfig(config2.funcs, config2);
      hooks.locale(config2.settings.locale.moment);
      Object.defineProperty(config2, "__configId", {
        enumerable: false,
        writable: false,
        value: configId || uuid$1()
      });
      return config2;
    };
    function _extendTypesConfig(typesConfig, config2) {
      for (var type in typesConfig) {
        var typeConfig = typesConfig[type];
        _extendTypeConfig(type, typeConfig, config2);
      }
    }
    function _extendTypeConfig(type, typeConfig, config2) {
      var operators2 = null, defaultOperator2 = null;
      typeConfig.mainWidget = typeConfig.mainWidget || Object.keys(typeConfig.widgets).filter(function(w) {
        return w != "field" && w != "func";
      })[0];
      for (var widget in typeConfig.widgets) {
        var typeWidgetConfig = typeConfig.widgets[widget];
        if (typeWidgetConfig.operators) {
          var typeWidgetOperators = typeWidgetConfig.operators;
          if (typeConfig.excludeOperators) {
            typeWidgetOperators = typeWidgetOperators.filter(function(op) {
              return !typeConfig.excludeOperators.includes(op);
            });
          }
          operators2 = mergeArraysSmart(operators2, typeWidgetOperators);
        }
        if (typeWidgetConfig.defaultOperator)
          defaultOperator2 = typeWidgetConfig.defaultOperator;
        if (widget == typeConfig.mainWidget) {
          typeWidgetConfig = merge_1({}, {
            widgetProps: typeConfig.mainWidgetProps || {}
          }, typeWidgetConfig);
        }
        typeConfig.widgets[widget] = typeWidgetConfig;
      }
      if (!typeConfig.valueSources)
        typeConfig.valueSources = Object.keys(config2.settings.valueSourcesInfo);
      var _iterator = _createForOfIteratorHelper$5(typeConfig.valueSources), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var valueSrc = _step.value;
          if (valueSrc != "value" && !typeConfig.widgets[valueSrc]) {
            typeConfig.widgets[valueSrc] = {};
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (!typeConfig.operators && operators2)
        typeConfig.operators = Array.from(new Set(operators2));
      if (!typeConfig.defaultOperator && defaultOperator2)
        typeConfig.defaultOperator = defaultOperator2;
    }
    function _extendFieldsConfig(subconfig, config2) {
      var path = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
      for (var field in subconfig) {
        _extendFieldConfig(subconfig[field], config2, [].concat(_toConsumableArray(path), [field]));
        if (subconfig[field].subfields) {
          _extendFieldsConfig(subconfig[field].subfields, config2, [].concat(_toConsumableArray(path), [field]));
        }
      }
    }
    function _extendFuncArgsConfig(subconfig, config2) {
      if (!subconfig)
        return;
      for (var funcKey in subconfig) {
        var funcDef = subconfig[funcKey];
        if (funcDef.returnType) {
          if (!config2._funcsCntByType[funcDef.returnType])
            config2._funcsCntByType[funcDef.returnType] = 0;
          config2._funcsCntByType[funcDef.returnType]++;
        }
        for (var argKey in funcDef.args) {
          _extendFieldConfig(funcDef.args[argKey], config2, null, true);
        }
        if (funcDef.args) {
          var argKeys = Object.keys(funcDef.args);
          var tmpIsOptional = true;
          var _iterator2 = _createForOfIteratorHelper$5(argKeys.reverse()), _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
              var _argKey = _step2.value;
              var argDef = funcDef.args[_argKey];
              if (!tmpIsOptional && argDef.isOptional) {
                delete argDef.isOptional;
              }
              if (!argDef.isOptional)
                tmpIsOptional = false;
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
        if (funcDef.subfields) {
          _extendFuncArgsConfig(funcDef.subfields, config2);
        }
      }
    }
    function _extendFieldConfig(fieldConfig, config2) {
      var path = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var isFuncArg = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var operators2 = null, defaultOperator2 = null;
      var typeConfig = config2.types[fieldConfig.type];
      var excludeOperatorsForField = fieldConfig.excludeOperators || [];
      if (fieldConfig.type != "!struct" && fieldConfig.type != "!group") {
        var keysToPutInFieldSettings = ["listValues", "treeValues", "allowCustomValues", "validateValue"];
        if (!fieldConfig.fieldSettings)
          fieldConfig.fieldSettings = {};
        for (var _i = 0, _keysToPutInFieldSett = keysToPutInFieldSettings; _i < _keysToPutInFieldSett.length; _i++) {
          var k = _keysToPutInFieldSett[_i];
          if (fieldConfig[k]) {
            fieldConfig.fieldSettings[k] = fieldConfig[k];
            delete fieldConfig[k];
          }
        }
        if (fieldConfig.fieldSettings.listValues) {
          if (config2.settings.normalizeListValues) {
            fieldConfig.fieldSettings.listValues = config2.settings.normalizeListValues.call(config2.ctx, fieldConfig.fieldSettings.listValues, fieldConfig.type, fieldConfig.fieldSettings);
          }
        }
        if (fieldConfig.fieldSettings.treeValues) {
          if (config2.settings.normalizeListValues) {
            fieldConfig.fieldSettings.treeValues = config2.settings.normalizeListValues.call(config2.ctx, fieldConfig.fieldSettings.treeValues, fieldConfig.type, fieldConfig.fieldSettings);
          }
        }
        if (!typeConfig) {
          fieldConfig.disabled = true;
          return;
        }
        if (!isFuncArg) {
          if (!config2._fieldsCntByType[fieldConfig.type])
            config2._fieldsCntByType[fieldConfig.type] = 0;
          config2._fieldsCntByType[fieldConfig.type]++;
        }
        if (!fieldConfig.widgets)
          fieldConfig.widgets = {};
        if (isFuncArg)
          fieldConfig._isFuncArg = true;
        fieldConfig.mainWidget = fieldConfig.mainWidget || typeConfig.mainWidget;
        fieldConfig.valueSources = fieldConfig.valueSources || typeConfig.valueSources;
        var excludeOperatorsForType = typeConfig.excludeOperators || [];
        var _loop = function _loop2() {
          var fieldWidgetConfig = fieldConfig.widgets[widget] || {};
          var typeWidgetConfig = typeConfig.widgets[widget] || {};
          if (!isFuncArg) {
            var excludeOperators = [].concat(_toConsumableArray(excludeOperatorsForField), _toConsumableArray(excludeOperatorsForType));
            var shouldIncludeOperators = fieldConfig.preferWidgets && (widget == "field" || fieldConfig.preferWidgets.includes(widget)) || excludeOperators.length > 0;
            if (fieldWidgetConfig.operators) {
              var addOperators = fieldWidgetConfig.operators.filter(function(o) {
                return !excludeOperators.includes(o);
              });
              operators2 = [].concat(_toConsumableArray(operators2 || []), _toConsumableArray(addOperators));
            } else if (shouldIncludeOperators && typeWidgetConfig.operators) {
              var _addOperators = typeWidgetConfig.operators.filter(function(o) {
                return !excludeOperators.includes(o);
              });
              operators2 = [].concat(_toConsumableArray(operators2 || []), _toConsumableArray(_addOperators));
            }
            if (fieldWidgetConfig.defaultOperator)
              defaultOperator2 = fieldWidgetConfig.defaultOperator;
          }
          if (widget == fieldConfig.mainWidget) {
            fieldWidgetConfig = merge_1({}, {
              widgetProps: fieldConfig.mainWidgetProps || {}
            }, fieldWidgetConfig);
          }
          fieldConfig.widgets[widget] = fieldWidgetConfig;
        };
        for (var widget in typeConfig.widgets) {
          _loop();
        }
        if (!isFuncArg) {
          if (!fieldConfig.operators && operators2)
            fieldConfig.operators = Array.from(new Set(operators2));
          if (!fieldConfig.defaultOperator && defaultOperator2)
            fieldConfig.defaultOperator = defaultOperator2;
        }
      }
      var computedFieldName = computeFieldName(config2, path);
      if (computedFieldName) {
        fieldConfig.fieldName = computedFieldName;
      }
      if (path && fieldConfig.fieldName) {
        config2.__fieldNames[fieldConfig.fieldName] = path;
      }
    }
    var mergeCustomizerNoArrays = function mergeCustomizerNoArrays2(objValue, srcValue, _key, _object, _source, _stack) {
      if (Array.isArray(objValue)) {
        return srcValue;
      }
    };
    var getFieldRawConfig = function getFieldRawConfig2(config2, field) {
      var _config$settings;
      var fieldsKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "fields";
      var subfieldsKey = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "subfields";
      if (!field)
        return null;
      if (field == "!case_value") {
        return {
          type: "case_value",
          mainWidget: "case_value",
          widgets: {
            "case_value": config2.widgets["case_value"]
          }
        };
      }
      var fieldSeparator = (config2 === null || config2 === void 0 ? void 0 : (_config$settings = config2.settings) === null || _config$settings === void 0 ? void 0 : _config$settings.fieldSeparator) || ".";
      var parts = Array.isArray(field) ? field : field.split(fieldSeparator);
      var targetFields = config2[fieldsKey];
      if (!targetFields)
        return null;
      var fields = targetFields;
      var fieldConfig = null;
      var path = [];
      for (var i = 0; i < parts.length; i++) {
        var part = parts[i];
        path.push(part);
        var pathKey = path.join(fieldSeparator);
        fieldConfig = fields[pathKey];
        if (i < parts.length - 1) {
          if (fieldConfig && fieldConfig[subfieldsKey]) {
            fields = fieldConfig[subfieldsKey];
            path = [];
          } else {
            fieldConfig = null;
          }
        }
      }
      return fieldConfig;
    };
    var computeFieldName = function computeFieldName2(config2, path) {
      if (!path)
        return null;
      var fieldSeparator = config2.settings.fieldSeparator;
      var l = _toConsumableArray(path), r2 = [], f, fConfig;
      while ((f = l.pop()) !== void 0 && l.length > 0) {
        r2.unshift(f);
        fConfig = getFieldRawConfig(config2, l);
        if (fConfig.fieldName) {
          return [fConfig.fieldName].concat(r2).join(fieldSeparator);
        }
      }
      return null;
    };
    var normalizeField = function normalizeField2(config2, field) {
      var fieldSeparator = config2.settings.fieldSeparator;
      var fieldStr = Array.isArray(field) ? field.join(fieldSeparator) : field;
      if (config2.__fieldNames[fieldStr]) {
        return config2.__fieldNames[fieldStr].join(fieldSeparator);
      }
      return fieldStr;
    };
    var getFuncConfig$2 = function getFuncConfig2(config2, func) {
      if (!func)
        return null;
      var funcConfig = getFieldRawConfig(config2, func, "funcs", "subfields");
      if (!funcConfig)
        return null;
      return funcConfig;
    };
    var getFuncArgConfig = function getFuncArgConfig2(config2, funcKey, argKey) {
      var funcConfig = getFuncConfig$2(config2, funcKey);
      if (!funcConfig)
        return null;
      var argConfig = funcConfig.args && funcConfig.args[argKey] || null;
      if (!argConfig)
        return null;
      var typeConfig = config2.types[argConfig.type] || {};
      var ret = mergeWith_1({}, typeConfig, argConfig || {}, mergeCustomizerNoArrays);
      return ret;
    };
    var getFieldConfig$8 = function getFieldConfig2(config2, field) {
      if (!field)
        return null;
      if (_typeof$1(field) == "object" && !field.func && !!field.type)
        return field;
      if (_typeof$1(field) == "object" && field.func && field.arg)
        return getFuncArgConfig(config2, field.func, field.arg);
      var fieldConfig = getFieldRawConfig(config2, field);
      if (!fieldConfig)
        return null;
      var typeConfig = config2.types[fieldConfig.type] || {};
      var ret = mergeWith_1({}, typeConfig, fieldConfig || {}, mergeCustomizerNoArrays);
      return ret;
    };
    var getOperatorConfig$4 = function getOperatorConfig2(config2, operator) {
      var field = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      if (!operator)
        return null;
      var opConfig = config2.operators[operator];
      if (field) {
        var fieldConfig = getFieldConfig$8(config2, field);
        var widget = getWidgetForFieldOp$3(config2, field, operator);
        var widgetConfig = config2.widgets[widget] || {};
        var fieldWidgetConfig = (fieldConfig && fieldConfig.widgets ? fieldConfig.widgets[widget] : {}) || {};
        var widgetOpProps = (widgetConfig.opProps || {})[operator];
        var fieldWidgetOpProps = (fieldWidgetConfig.opProps || {})[operator];
        var mergedOpConfig = merge_1({}, opConfig, widgetOpProps, fieldWidgetOpProps);
        return mergedOpConfig;
      } else {
        return opConfig;
      }
    };
    var getFieldWidgetConfig$3 = function getFieldWidgetConfig2(config2, field, operator) {
      var widget = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var valueSrc = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      if (!field)
        return null;
      if (!(operator || widget) && valueSrc != "const" && field != "!case_value")
        return null;
      var fieldConfig = getFieldConfig$8(config2, field);
      if (!widget)
        widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
      var widgetConfig = config2.widgets[widget] || {};
      var fieldWidgetConfig = (fieldConfig && fieldConfig.widgets ? fieldConfig.widgets[widget] : {}) || {};
      var fieldWidgetProps = fieldWidgetConfig.widgetProps || {};
      var valueFieldSettings = (valueSrc == "value" || !valueSrc) && fieldConfig && fieldConfig.fieldSettings || {};
      var mergedConfig = merge_1({}, widgetConfig, fieldWidgetProps, valueFieldSettings);
      return mergedConfig;
    };
    const configUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      extendConfig: extendConfig$1,
      getFieldRawConfig,
      normalizeField,
      getFuncConfig: getFuncConfig$2,
      getFuncArgConfig,
      getFieldConfig: getFieldConfig$8,
      getOperatorConfig: getOperatorConfig$4,
      getFieldWidgetConfig: getFieldWidgetConfig$3,
      isJSX,
      isDirtyJSX,
      cleanJSX,
      applyJsonLogic,
      configKeys: configKeys$1,
      compressConfig,
      decompressConfig,
      compileConfig
    }, Symbol.toStringTag, { value: "Module" }));
    var isObject$5 = function isObject2(v) {
      return _typeof$1(v) == "object" && v !== null && !Array.isArray(v);
    };
    var completeValue = function completeValue2(value2, valueSrc, config2) {
      if (valueSrc == "func")
        return completeFuncValue(value2, config2);
      else
        return value2;
    };
    var completeFuncValue = function completeFuncValue2(value2, config2) {
      var _checkFuncValue = function _checkFuncValue2(value3) {
        if (!value3)
          return void 0;
        var funcKey = value3.get("func");
        var funcConfig = funcKey && getFuncConfig$2(config2, funcKey);
        if (!funcConfig)
          return void 0;
        var complValue = value3;
        var tmpHasOptional = false;
        for (var argKey in funcConfig.args) {
          var argConfig = funcConfig.args[argKey];
          var valueSources = argConfig.valueSources, isOptional = argConfig.isOptional, defaultValue2 = argConfig.defaultValue;
          var filteredValueSources = filterValueSourcesForField(config2, valueSources, argConfig);
          var args = complValue.get("args");
          var argDefaultValueSrc = filteredValueSources.length == 1 ? filteredValueSources[0] : void 0;
          var argVal = args ? args.get(argKey) : void 0;
          var argValue = argVal ? argVal.get("value") : void 0;
          var argValueSrc = (argVal ? argVal.get("valueSrc") : void 0) || argDefaultValueSrc;
          if (argValue !== void 0) {
            var completeArgValue = completeValue(argValue, argValueSrc, config2);
            if (completeArgValue === void 0) {
              return void 0;
            } else if (completeArgValue !== argValue) {
              complValue = complValue.setIn(["args", argKey, "value"], completeArgValue);
            }
            if (tmpHasOptional) {
              return void 0;
            }
          } else if (defaultValue2 !== void 0 && !isObject$5(defaultValue2)) {
            complValue = complValue.setIn(["args", argKey, "value"], getDefaultArgValue(argConfig));
            complValue = complValue.setIn(["args", argKey, "valueSrc"], "value");
          } else if (isOptional) {
            tmpHasOptional = true;
          } else {
            return void 0;
          }
        }
        return complValue;
      };
      return _checkFuncValue(value2);
    };
    var setFunc$1 = function setFunc2(value2, funcKey, config2) {
      var fieldSeparator = config2.settings.fieldSeparator;
      value2 = value2 || new Immutable.Map();
      if (Array.isArray(funcKey)) {
        funcKey = funcKey.join(fieldSeparator);
      }
      value2 = value2.set("func", funcKey);
      value2 = value2.set("args", new Immutable.Map());
      var funcConfig = funcKey && getFuncConfig$2(config2, funcKey);
      if (funcConfig) {
        for (var argKey in funcConfig.args) {
          var argConfig = funcConfig.args[argKey];
          var valueSources = argConfig.valueSources, defaultValue2 = argConfig.defaultValue;
          var filteredValueSources = filterValueSourcesForField(config2, valueSources, argConfig);
          var firstValueSrc = filteredValueSources.length ? filteredValueSources[0] : void 0;
          var defaultValueSrc = defaultValue2 ? isObject$5(defaultValue2) && !!defaultValue2.func ? "func" : "value" : void 0;
          var argDefaultValueSrc = defaultValueSrc || firstValueSrc;
          if (defaultValue2 !== void 0) {
            value2 = value2.setIn(["args", argKey, "value"], getDefaultArgValue(argConfig));
          }
          if (argDefaultValueSrc) {
            value2 = value2.setIn(["args", argKey, "valueSrc"], argDefaultValueSrc);
          }
        }
      }
      return value2;
    };
    var getDefaultArgValue = function getDefaultArgValue2(_ref) {
      var value2 = _ref.defaultValue;
      if (isObject$5(value2) && !Immutable.Map.isMap(value2) && value2.func) {
        return Immutable.fromJS(value2, function(k, v) {
          return Immutable.Iterable.isIndexed(v) ? v.toList() : v.toOrderedMap();
        });
      }
      return value2;
    };
    var setArgValue$1 = function setArgValue2(value2, argKey, argVal, argConfig, config2) {
      if (value2 && value2.get("func")) {
        value2 = value2.setIn(["args", argKey, "value"], argVal);
        var valueSources = argConfig.valueSources;
        var filteredValueSources = filterValueSourcesForField(config2, valueSources, argConfig);
        var argDefaultValueSrc = filteredValueSources.length == 1 ? filteredValueSources[0] : void 0;
        if (argDefaultValueSrc) {
          value2 = value2.setIn(["args", argKey, "valueSrc"], argDefaultValueSrc);
        }
      }
      return value2;
    };
    var setArgValueSrc$1 = function setArgValueSrc2(value2, argKey, argValSrc, _argConfig, _config) {
      if (value2 && value2.get("func")) {
        value2 = value2.setIn(["args", argKey], new Immutable.Map({
          valueSrc: argValSrc
        }));
      }
      return value2;
    };
    const funcUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      completeValue,
      completeFuncValue,
      setFunc: setFunc$1,
      setArgValue: setArgValue$1,
      setArgValueSrc: setArgValueSrc$1
    }, Symbol.toStringTag, { value: "Module" }));
    function ownKeys$u(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$u(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$u(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$u(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var queryBuilderFormat$1 = function queryBuilderFormat2(item, config2) {
      var meta = {
        usedFields: []
      };
      var res = formatItem$5(item, config2, meta);
      if (!res)
        return void 0;
      return _objectSpread$u(_objectSpread$u({}, res), meta);
    };
    var formatItem$5 = function formatItem2(item, config2, meta) {
      if (!item)
        return void 0;
      var type = item.get("type");
      var children = item.get("children1");
      if ((type === "group" || type === "rule_group") && children && children.size) {
        return formatGroup$5(item, config2, meta);
      } else if (type === "rule") {
        return formatRule$5(item, config2, meta);
      }
      return void 0;
    };
    var formatGroup$5 = function formatGroup2(item, config2, meta) {
      var properties2 = item.get("properties") || new immutable.exports.Map();
      var children = item.get("children1");
      var id = item.get("id");
      var list = children.map(function(currentChild) {
        return formatItem$5(currentChild, config2, meta);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      if (!list.size)
        return void 0;
      var conjunction = properties2.get("conjunction");
      if (!conjunction)
        conjunction = defaultConjunction(config2);
      var not = properties2.get("not");
      var resultQuery = {
        id,
        rules: list.toList(),
        condition: conjunction.toUpperCase(),
        not
      };
      return resultQuery;
    };
    var formatRule$5 = function formatRule2(item, config2, meta) {
      var properties2 = item.get("properties") || new immutable.exports.Map();
      var id = item.get("id");
      var operator = properties2.get("operator");
      var options = properties2.get("operatorOptions");
      var field = properties2.get("field");
      var value2 = properties2.get("value");
      var valueSrc = properties2.get("valueSrc");
      var valueType = properties2.get("valueType");
      var hasUndefinedValues = value2.filter(function(v) {
        return v === void 0;
      }).size > 0;
      if (field == null || operator == null || hasUndefinedValues)
        return void 0;
      var fieldDefinition = getFieldConfig$8(config2, field) || {};
      var operatorDefinition = getOperatorConfig$4(config2, operator, field) || {};
      var fieldType = fieldDefinition.type || "undefined";
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      var typeConfig = config2.types[fieldDefinition.type] || {};
      var fieldName = formatFieldName(field, config2, meta);
      if (value2.size < cardinality)
        return void 0;
      if (meta.usedFields.indexOf(field) == -1)
        meta.usedFields.push(field);
      value2 = value2.toArray();
      valueSrc = valueSrc.toArray();
      valueType = valueType.toArray();
      var values2 = [];
      for (var i = 0; i < value2.length; i++) {
        var val = {
          type: valueType[i],
          value: value2[i]
        };
        values2.push(val);
        if (valueSrc[i] == "field") {
          var secondField = value2[i];
          if (meta.usedFields.indexOf(secondField) == -1)
            meta.usedFields.push(secondField);
        }
      }
      var operatorOptions = options ? options.toJS() : null;
      if (operatorOptions && !Object.keys(operatorOptions).length)
        operatorOptions = null;
      var ruleQuery = {
        id,
        fieldName,
        type: fieldType,
        input: typeConfig.mainWidget,
        operator
      };
      if (operatorOptions)
        ruleQuery.operatorOptions = operatorOptions;
      ruleQuery.values = values2;
      return ruleQuery;
    };
    function ownKeys$t(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$t(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$t(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$t(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createForOfIteratorHelper$4(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$4(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$4(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$4(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$4(o, minLen);
    }
    function _arrayLikeToArray$4(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    var jsonLogicFormat$1 = function jsonLogicFormat2(item, config2) {
      var meta = {
        usedFields: [],
        errors: []
      };
      var logic2 = formatItem$4(item, config2, meta, true);
      var errors = meta.errors, usedFields = meta.usedFields;
      var fieldSeparator = config2.settings.fieldSeparator;
      var data = {};
      var _iterator = _createForOfIteratorHelper$4(usedFields), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var ff = _step.value;
          var def = getFieldConfig$8(config2, ff) || {};
          var parts = ff.split(fieldSeparator);
          var tmp = data;
          for (var i = 0; i < parts.length; i++) {
            var p = parts[i];
            var pdef = getFieldConfig$8(config2, parts.slice(0, i + 1)) || {};
            if (i != parts.length - 1) {
              if (pdef.type == "!group" && pdef.mode != "struct") {
                if (!tmp[p])
                  tmp[p] = [{}];
                tmp = tmp[p][0];
              } else {
                if (!tmp[p])
                  tmp[p] = {};
                tmp = tmp[p];
              }
            } else {
              if (!tmp[p])
                tmp[p] = null;
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return {
        errors,
        logic: logic2,
        data
      };
    };
    var formatItem$4 = function formatItem2(item, config2, meta, isRoot) {
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      if (!item)
        return void 0;
      var type = item.get("type");
      var properties2 = item.get("properties") || new immutable.exports.Map();
      var isLocked = properties2.get("isLocked");
      var lockedOp = config2.settings.jsonLogic.lockedOp;
      var ret;
      if (type === "group" || type === "rule_group") {
        ret = formatGroup$4(item, config2, meta, isRoot, parentField);
      } else if (type === "rule") {
        ret = formatRule$4(item, config2, meta, parentField);
      }
      if (isLocked && ret && lockedOp) {
        ret = _defineProperty$2({}, lockedOp, ret);
      }
      return ret;
    };
    var formatGroup$4 = function formatGroup2(item, config2, meta, isRoot) {
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var type = item.get("type");
      var properties2 = item.get("properties") || new immutable.exports.Map();
      var mode = properties2.get("mode");
      var children = item.get("children1") || new immutable.exports.List();
      var field = properties2.get("field");
      var conjunction = properties2.get("conjunction");
      if (!conjunction)
        conjunction = defaultConjunction(config2);
      var conjunctionDefinition = config2.conjunctions[conjunction];
      var conj = conjunctionDefinition.jsonLogicConj || conjunction.toLowerCase();
      var not = properties2.get("not");
      if (conj != "and" && conj != "or") {
        meta.errors.push("Conjunction ".concat(conj, " is not supported"));
        return void 0;
      }
      var isRuleGroup = type === "rule_group" && !isRoot;
      var groupField = isRuleGroup && mode != "struct" ? field : parentField;
      var groupOperator = properties2.get("operator");
      var groupOperatorDefinition = groupOperator && getOperatorConfig$4(config2, groupOperator, field) || null;
      var formattedValue = formatItemValue$2(config2, properties2, meta, groupOperator, parentField);
      var isGroup0 = isRuleGroup && (!groupOperator || groupOperatorDefinition.cardinality == 0);
      var list = children.map(function(currentChild) {
        return formatItem$4(currentChild, config2, meta, false, groupField);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      if (isRuleGroup && mode != "struct" && !isGroup0) {
        if (formattedValue == void 0)
          return void 0;
      } else {
        if (!list.size)
          return void 0;
      }
      var resultQuery = {};
      if (list.size == 1 && !isRoot)
        resultQuery = list.first();
      else
        resultQuery[conj] = list.toList().toJS();
      if (not) {
        resultQuery = {
          "!": resultQuery
        };
      }
      if (isRuleGroup && mode != "struct") {
        var formattedField = formatField$3(meta, config2, field, parentField);
        if (isGroup0) {
          var op = groupOperator || "some";
          resultQuery = _defineProperty$2({}, op, [formattedField, resultQuery]);
        } else {
          var filter = !list.size ? formattedField : {
            "filter": [formattedField, resultQuery]
          };
          var count = {
            "reduce": [filter, {
              "+": [1, {
                "var": "accumulator"
              }]
            }, 0]
          };
          resultQuery = formatLogic(config2, properties2, count, formattedValue, groupOperator);
        }
      }
      return resultQuery;
    };
    var formatRule$4 = function formatRule2(item, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var properties2 = item.get("properties") || new immutable.exports.Map();
      var field = properties2.get("field");
      var operator = properties2.get("operator");
      var operatorOptions = properties2.get("operatorOptions");
      operatorOptions = operatorOptions ? operatorOptions.toJS() : null;
      if (operatorOptions && !Object.keys(operatorOptions).length)
        operatorOptions = null;
      if (field == null || operator == null)
        return void 0;
      var fieldDefinition = getFieldConfig$8(config2, field) || {};
      var operatorDefinition = getOperatorConfig$4(config2, operator, field) || {};
      var reversedOp = operatorDefinition.reversedOp;
      var revOperatorDefinition = getOperatorConfig$4(config2, reversedOp, field) || {};
      var isRev = false;
      if (!operatorDefinition.jsonLogic && !revOperatorDefinition.jsonLogic) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      if (!operatorDefinition.jsonLogic && revOperatorDefinition.jsonLogic) {
        isRev = true;
        var _ref = [reversedOp, operator];
        operator = _ref[0];
        reversedOp = _ref[1];
        var _ref2 = [revOperatorDefinition, operatorDefinition];
        operatorDefinition = _ref2[0];
        revOperatorDefinition = _ref2[1];
      }
      var formattedValue = formatItemValue$2(config2, properties2, meta, operator, parentField);
      if (formattedValue === void 0)
        return void 0;
      var formattedField = formatField$3(meta, config2, field, parentField);
      return formatLogic(config2, properties2, formattedField, formattedValue, operator, operatorOptions, fieldDefinition, isRev);
    };
    var formatItemValue$2 = function formatItemValue2(config2, properties2, meta, operator, parentField) {
      var field = properties2.get("field");
      var iValueSrc = properties2.get("valueSrc");
      var iValueType = properties2.get("valueType");
      var fieldDefinition = getFieldConfig$8(config2, field) || {};
      var operatorDefinition = getOperatorConfig$4(config2, operator, field) || {};
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      var iValue = properties2.get("value");
      var asyncListValues = properties2.get("asyncListValues");
      if (iValue == void 0)
        return void 0;
      var oldUsedFields = meta.usedFields;
      var fvalue = iValue.map(function(currentValue, ind) {
        var valueSrc = iValueSrc ? iValueSrc.get(ind) : null;
        var valueType = iValueType ? iValueType.get(ind) : null;
        var cValue = completeValue(currentValue, valueSrc, config2);
        var widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
        var fieldWidgetDef = omit_1(getFieldWidgetConfig$3(config2, field, operator, widget, valueSrc), ["factory"]);
        var fv = formatValue$4(meta, config2, cValue, valueSrc, valueType, fieldWidgetDef, fieldDefinition, operator, operatorDefinition, parentField, asyncListValues);
        return fv;
      });
      var hasUndefinedValues = fvalue.filter(function(v) {
        return v === void 0;
      }).size > 0;
      if (fvalue.size < cardinality || hasUndefinedValues) {
        meta.usedFields = oldUsedFields;
        return void 0;
      }
      return cardinality > 1 ? fvalue.toArray() : cardinality == 1 ? fvalue.first() : null;
    };
    var formatValue$4 = function formatValue2(meta, config2, currentValue, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, operatorDef) {
      var parentField = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : null;
      var asyncListValues = arguments.length > 10 ? arguments[10] : void 0;
      if (currentValue === void 0)
        return void 0;
      var ret;
      if (valueSrc == "field") {
        ret = formatField$3(meta, config2, currentValue, parentField);
      } else if (valueSrc == "func") {
        ret = formatFunc$4(meta, config2, currentValue, parentField);
      } else if (typeof fieldWidgetDef.jsonLogic === "function") {
        var fn = fieldWidgetDef.jsonLogic;
        var args = [
          currentValue,
          _objectSpread$t(_objectSpread$t({}, pick_1(fieldDef, ["fieldSettings", "listValues"])), {}, {
            asyncListValues
          }),
          omit_1(fieldWidgetDef, ["formatValue", "mongoFormatValue", "sqlFormatValue", "jsonLogic", "elasticSearchFormatValue", "spelFormatValue"])
        ];
        if (operator) {
          args.push(operator);
          args.push(operatorDef);
        }
        ret = fn.call.apply(fn, [config2.ctx].concat(args));
      } else {
        ret = currentValue;
      }
      return ret;
    };
    var formatFunc$4 = function formatFunc2(meta, config2, currentValue) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var funcKey = currentValue.get("func");
      var args = currentValue.get("args");
      var funcConfig = getFuncConfig$2(config2, funcKey);
      if (!funcConfig.jsonLogic) {
        meta.errors.push("Func ".concat(funcKey, " is not supported"));
        return void 0;
      }
      var formattedArgs = {};
      for (var argKey in funcConfig.args) {
        var argConfig = funcConfig.args[argKey];
        var fieldDef = getFieldConfig$8(config2, argConfig);
        var argVal = args ? args.get(argKey) : void 0;
        var argValue = argVal ? argVal.get("value") : void 0;
        var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
        var formattedArgVal = formatValue$4(meta, config2, argValue, argValueSrc, argConfig.type, fieldDef, argConfig, null, null, parentField);
        if (argValue != void 0 && formattedArgVal === void 0) {
          meta.errors.push("Can't format value of arg ".concat(argKey, " for func ").concat(funcKey));
          return void 0;
        }
        if (formattedArgVal !== void 0) {
          formattedArgs[argKey] = formattedArgVal;
        }
      }
      var formattedArgsArr = Object.values(formattedArgs);
      var ret;
      if (typeof funcConfig.jsonLogic === "function") {
        var fn = funcConfig.jsonLogic;
        var _args = [formattedArgs];
        ret = fn.call.apply(fn, [config2.ctx].concat(_args));
      } else {
        var funcName = funcConfig.jsonLogic || funcKey;
        var isMethod = !!funcConfig.jsonLogicIsMethod;
        if (isMethod) {
          var obj = formattedArgsArr[0], params = formattedArgsArr.slice(1);
          if (params.length) {
            ret = {
              "method": [obj, funcName, params]
            };
          } else {
            ret = {
              "method": [obj, funcName]
            };
          }
        } else {
          ret = _defineProperty$2({}, funcName, formattedArgsArr);
        }
      }
      return ret;
    };
    var formatField$3 = function formatField2(meta, config2, field) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var _config$settings = config2.settings, fieldSeparator = _config$settings.fieldSeparator, jsonLogic = _config$settings.jsonLogic;
      var ret;
      if (field) {
        if (Array.isArray(field))
          field = field.join(fieldSeparator);
        var fieldDef = getFieldConfig$8(config2, field) || {};
        var fieldName = formatFieldName(field, config2, meta, parentField);
        var varName = fieldDef.jsonLogicVar || (fieldDef.type == "!group" ? jsonLogic.groupVarKey : "var");
        ret = _defineProperty$2({}, varName, fieldName);
        if (meta.usedFields.indexOf(field) == -1)
          meta.usedFields.push(field);
      }
      return ret;
    };
    var buildFnToFormatOp$3 = function buildFnToFormatOp2(operator, operatorDefinition, formattedField, formattedValue) {
      var formatteOp = operator;
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      var isReverseArgs = defaultValue$1(operatorDefinition._jsonLogicIsRevArgs, false);
      if (typeof operatorDefinition.jsonLogic == "string")
        formatteOp = operatorDefinition.jsonLogic;
      var rangeOps = ["<", "<=", ">", ">="];
      var eqOps = ["==", "!="];
      var fn = function fn2(field, op, val, opDef, opOpts) {
        if (cardinality == 0 && eqOps.includes(formatteOp))
          return _defineProperty$2({}, formatteOp, [formattedField, null]);
        else if (cardinality == 0)
          return _defineProperty$2({}, formatteOp, formattedField);
        else if (cardinality == 1 && isReverseArgs)
          return _defineProperty$2({}, formatteOp, [formattedValue, formattedField]);
        else if (cardinality == 1)
          return _defineProperty$2({}, formatteOp, [formattedField, formattedValue]);
        else if (cardinality == 2 && rangeOps.includes(formatteOp))
          return _defineProperty$2({}, formatteOp, [formattedValue[0], formattedField, formattedValue[1]]);
        else
          return _defineProperty$2({}, formatteOp, [formattedField].concat(_toConsumableArray(formattedValue)));
      };
      return fn;
    };
    var formatLogic = function formatLogic2(config2, properties2, formattedField, formattedValue, operator) {
      var operatorOptions = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var fieldDefinition = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      var isRev = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : false;
      var field = properties2.get("field");
      var operatorDefinition = getOperatorConfig$4(config2, operator, field) || {};
      var fn = typeof operatorDefinition.jsonLogic == "function" ? operatorDefinition.jsonLogic : buildFnToFormatOp$3(operator, operatorDefinition, formattedField, formattedValue);
      var args = [formattedField, operator, formattedValue, omit_1(operatorDefinition, ["formatOp", "mongoFormatOp", "sqlFormatOp", "jsonLogic", "spelFormatOp"]), operatorOptions, fieldDefinition];
      var ruleQuery = fn.call.apply(fn, [config2.ctx].concat(args));
      if (isRev) {
        ruleQuery = {
          "!": ruleQuery
        };
      }
      return ruleQuery;
    };
    function ownKeys$s(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$s(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$s(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$s(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var isObject$4 = function isObject2(v) {
      return _typeof$1(v) == "object" && v !== null && !Array.isArray(v);
    };
    var mongodbFormat$1 = function mongodbFormat2(tree2, config2) {
      return _mongodbFormat(tree2, config2, false);
    };
    var _mongodbFormat = function _mongodbFormat2(tree2, config2) {
      var returnErrors = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var meta = {
        errors: []
      };
      var res = formatItem$3([], tree2, config2, meta);
      if (returnErrors) {
        return [res, meta.errors];
      } else {
        if (meta.errors.length)
          console.warn("Errors while exporting to MongoDb:", meta.errors);
        return res;
      }
    };
    var formatItem$3 = function formatItem2(parents, item, config2, meta) {
      var _not = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      var _canWrapExpr = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
      var _fieldName = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : void 0;
      var _value = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : void 0;
      if (!item)
        return void 0;
      var type = item.get("type");
      if (type === "group" || type === "rule_group") {
        return formatGroup$3(parents, item, config2, meta, _not, _canWrapExpr, _fieldName, _value);
      } else if (type === "rule") {
        return formatRule$3(parents, item, config2, meta, _not, _canWrapExpr, _fieldName, _value);
      }
      return void 0;
    };
    var formatGroup$3 = function formatGroup2(parents, item, config2, meta) {
      var _not = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      var type = item.get("type");
      var properties2 = item.get("properties") || new immutable.exports.Map();
      var children = item.get("children1") || new immutable.exports.List();
      var canShortMongoQuery = config2.settings.canShortMongoQuery;
      var hasParentRuleGroup = parents.filter(function(it) {
        return it.get("type") == "rule_group";
      }).length > 0;
      var parentPath = parents.filter(function(it) {
        return it.get("type") == "rule_group";
      }).map(function(it) {
        return it.get("properties").get("field");
      }).slice(-1).pop();
      var realParentPath = hasParentRuleGroup && parentPath;
      var groupField = type === "rule_group" ? properties2.get("field") : null;
      var groupFieldName = formatFieldName(groupField, config2, meta, realParentPath);
      var groupFieldDef = getFieldConfig$8(config2, groupField) || {};
      var mode = groupFieldDef.mode;
      var canHaveEmptyChildren = groupField && mode == "array";
      var not = _not ? !properties2.get("not") : properties2.get("not");
      var list = children.map(function(currentChild) {
        return formatItem$3([].concat(_toConsumableArray(parents), [item]), currentChild, config2, meta, not, mode != "array", mode == "array" ? function(f) {
          return "$$el.".concat(f);
        } : void 0);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      if (!canHaveEmptyChildren && !list.size)
        return void 0;
      var conjunction = properties2.get("conjunction");
      if (!conjunction)
        conjunction = defaultConjunction(config2);
      var conjunctionDefinition = config2.conjunctions[conjunction];
      var reversedConj = conjunctionDefinition.reversedConj;
      if (not && reversedConj) {
        conjunction = reversedConj;
        conjunctionDefinition = config2.conjunctions[conjunction];
      }
      var mongoConj = conjunctionDefinition.mongoConj;
      var resultQuery;
      if (list.size == 1) {
        resultQuery = list.first();
      } else if (list.size > 1) {
        var rules = list.toList().toJS();
        var canShort = canShortMongoQuery && mongoConj == "$and";
        if (canShort) {
          resultQuery = rules.reduce(function(acc, rule2) {
            if (!acc)
              return void 0;
            for (var k in rule2) {
              if (k[0] == "$") {
                acc = void 0;
                break;
              }
              if (acc[k] == void 0) {
                acc[k] = rule2[k];
              } else {
                var prev2 = acc[k], next2 = rule2[k];
                if (!isObject$4(prev2)) {
                  prev2 = {
                    "$eq": prev2
                  };
                }
                if (!isObject$4(next2)) {
                  next2 = {
                    "$eq": next2
                  };
                }
                var prevOp = Object.keys(prev2)[0], nextOp = Object.keys(next2)[0];
                if (prevOp == nextOp) {
                  acc = void 0;
                  break;
                }
                acc[k] = Object.assign({}, prev2, next2);
              }
            }
            return acc;
          }, {});
        }
        if (!resultQuery)
          resultQuery = _defineProperty$2({}, mongoConj, rules);
      }
      if (groupField) {
        if (mode == "array") {
          var totalQuery = {
            "$size": {
              "$ifNull": ["$" + groupFieldName, []]
            }
          };
          var filterQuery = resultQuery ? {
            "$size": {
              "$ifNull": [{
                "$filter": {
                  input: "$" + groupFieldName,
                  as: "el",
                  cond: resultQuery
                }
              }, []]
            }
          } : totalQuery;
          resultQuery = formatItem$3(parents, item.set("type", "rule"), config2, meta, false, false, function(_f) {
            return filterQuery;
          }, totalQuery);
          resultQuery = {
            "$expr": resultQuery
          };
        } else {
          resultQuery = _defineProperty$2({}, groupFieldName, {
            "$elemMatch": resultQuery
          });
        }
      }
      return resultQuery;
    };
    var formatRule$3 = function formatRule2(parents, item, config2, meta) {
      var _not = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      var _canWrapExpr = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
      var _fieldName = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : void 0;
      var _value = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : void 0;
      var properties2 = item.get("properties") || new immutable.exports.Map();
      var hasParentRuleGroup = parents.filter(function(it) {
        return it.get("type") == "rule_group";
      }).length > 0;
      var parentPath = parents.filter(function(it) {
        return it.get("type") == "rule_group";
      }).map(function(it) {
        return it.get("properties").get("field");
      }).slice(-1).pop();
      var realParentPath = hasParentRuleGroup && parentPath;
      var operator = properties2.get("operator");
      var operatorOptions = properties2.get("operatorOptions");
      var field = properties2.get("field");
      var iValue = properties2.get("value");
      var iValueSrc = properties2.get("valueSrc");
      var iValueType = properties2.get("valueType");
      var asyncListValues = properties2.get("asyncListValues");
      if (field == null || operator == null || iValue === void 0)
        return void 0;
      var fieldDef = getFieldConfig$8(config2, field) || {};
      var operatorDefinition = getOperatorConfig$4(config2, operator, field) || {};
      var reversedOp = operatorDefinition.reversedOp;
      var revOperatorDefinition = getOperatorConfig$4(config2, reversedOp, field) || {};
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      var not = _not;
      if (not && reversedOp) {
        var _ref = [reversedOp, operator];
        operator = _ref[0];
        reversedOp = _ref[1];
        var _ref2 = [revOperatorDefinition, operatorDefinition];
        operatorDefinition = _ref2[0];
        revOperatorDefinition = _ref2[1];
        not = false;
      }
      var fieldName = formatFieldName(field, config2, meta, realParentPath);
      var valueSrcs = [];
      var valueTypes = [];
      var useExpr = false;
      var fvalue = iValue.map(function(currentValue, ind) {
        var valueSrc = iValueSrc ? iValueSrc.get(ind) : null;
        var valueType = iValueType ? iValueType.get(ind) : null;
        var cValue = completeValue(currentValue, valueSrc, config2);
        var widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
        var fieldWidgetDef = omit_1(getFieldWidgetConfig$3(config2, field, operator, widget, valueSrc), ["factory"]);
        var _formatValue = formatValue$3(meta, config2, cValue, valueSrc, valueType, fieldWidgetDef, fieldDef, realParentPath, operator, operatorDefinition, asyncListValues), _formatValue2 = _slicedToArray(_formatValue, 2), fv = _formatValue2[0], fvUseExpr = _formatValue2[1];
        if (fv !== void 0) {
          useExpr = useExpr || fvUseExpr;
          valueSrcs.push(valueSrc);
          valueTypes.push(valueType);
        }
        return fv;
      });
      if (_fieldName)
        useExpr = true;
      var wrapExpr = useExpr && _canWrapExpr;
      var hasUndefinedValues = fvalue.filter(function(v) {
        return v === void 0;
      }).size > 0;
      if (fvalue.size < cardinality || hasUndefinedValues)
        return void 0;
      var formattedValue = cardinality > 1 ? fvalue.toArray() : cardinality == 1 ? fvalue.first() : null;
      var fn = operatorDefinition.mongoFormatOp;
      if (!fn) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      var args = [_fieldName ? _fieldName(fieldName) : fieldName, operator, _value !== void 0 && formattedValue == null ? _value : formattedValue, useExpr, valueSrcs.length > 1 ? valueSrcs : valueSrcs[0], valueTypes.length > 1 ? valueTypes : valueTypes[0], omit_1(operatorDefinition, ["formatOp", "mongoFormatOp", "sqlFormatOp", "jsonLogic", "spelFormatOp"]), operatorOptions, fieldDef];
      var ruleQuery = fn.call.apply(fn, [config2.ctx].concat(args));
      if (wrapExpr) {
        ruleQuery = {
          "$expr": ruleQuery
        };
      }
      if (not) {
        ruleQuery = {
          "$not": ruleQuery
        };
      }
      return ruleQuery;
    };
    var formatValue$3 = function formatValue2(meta, config2, currentValue, valueSrc, valueType, fieldWidgetDef, fieldDef, parentPath, operator, operatorDef, asyncListValues) {
      if (currentValue === void 0)
        return [void 0, false];
      var ret;
      var useExpr = false;
      if (valueSrc == "field") {
        var _formatRightField = formatRightField(meta, config2, currentValue, parentPath);
        var _formatRightField2 = _slicedToArray(_formatRightField, 2);
        ret = _formatRightField2[0];
        useExpr = _formatRightField2[1];
      } else if (valueSrc == "func") {
        var _formatFunc = formatFunc$3(meta, config2, currentValue, parentPath);
        var _formatFunc2 = _slicedToArray(_formatFunc, 2);
        ret = _formatFunc2[0];
        useExpr = _formatFunc2[1];
      } else {
        if (typeof fieldWidgetDef.mongoFormatValue === "function") {
          var fn = fieldWidgetDef.mongoFormatValue;
          var args = [
            currentValue,
            _objectSpread$s(_objectSpread$s({}, pick_1(fieldDef, ["fieldSettings", "listValues"])), {}, {
              asyncListValues
            }),
            omit_1(fieldWidgetDef, ["formatValue", "mongoFormatValue", "sqlFormatValue", "jsonLogic", "elasticSearchFormatValue", "spelFormatValue"])
          ];
          if (operator) {
            args.push(operator);
            args.push(operatorDef);
          }
          ret = fn.call.apply(fn, [config2.ctx].concat(args));
        } else {
          ret = currentValue;
        }
      }
      return [ret, useExpr];
    };
    var formatRightField = function formatRightField2(meta, config2, rightField, parentPath) {
      var fieldSeparator = config2.settings.fieldSeparator;
      var ret;
      var useExpr = true;
      if (rightField) {
        var rightFieldDefinition = getFieldConfig$8(config2, rightField) || {};
        var fieldParts = Array.isArray(rightField) ? rightField : rightField.split(fieldSeparator);
        getFieldPath$3(rightField, config2);
        var fieldPartsLabels = getFieldPathLabels$3(rightField, config2);
        var fieldFullLabel = fieldPartsLabels ? fieldPartsLabels.join(fieldSeparator) : null;
        var formatFieldFn = config2.settings.formatField;
        var rightFieldName = formatFieldName(rightField, config2, meta, parentPath);
        var formattedField = formatFieldFn(rightFieldName, fieldParts, fieldFullLabel, rightFieldDefinition, config2, false);
        ret = "$" + formattedField;
      }
      return [ret, useExpr];
    };
    var formatFunc$3 = function formatFunc2(meta, config2, currentValue, parentPath) {
      var useExpr = true;
      var ret;
      var funcKey = currentValue.get("func");
      var args = currentValue.get("args");
      var funcConfig = getFuncConfig$2(config2, funcKey);
      var funcName = funcConfig.mongoFunc || funcKey;
      var mongoArgsAsObject = funcConfig.mongoArgsAsObject;
      var formattedArgs = {};
      var argsCnt = 0;
      var lastArg = void 0;
      for (var argKey in funcConfig.args) {
        var argConfig = funcConfig.args[argKey];
        var fieldDef = getFieldConfig$8(config2, argConfig);
        var argVal = args ? args.get(argKey) : void 0;
        var argValue = argVal ? argVal.get("value") : void 0;
        var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
        var argAsyncListValues = argVal ? argVal.get("asyncListValues") : void 0;
        var widget = getWidgetForFieldOp$3(config2, fieldDef, null, argValueSrc);
        var fieldWidgetDef = omit_1(getFieldWidgetConfig$3(config2, fieldDef, null, widget, argValueSrc), ["factory"]);
        var _formatValue3 = formatValue$3(meta, config2, argValue, argValueSrc, argConfig.type, fieldWidgetDef, fieldDef, parentPath, null, null, argAsyncListValues), _formatValue4 = _slicedToArray(_formatValue3, 2), formattedArgVal = _formatValue4[0];
        _formatValue4[1];
        if (argValue != void 0 && formattedArgVal === void 0) {
          meta.errors.push("Can't format value of arg ".concat(argKey, " for func ").concat(funcKey));
          return [void 0, false];
        }
        argsCnt++;
        if (formattedArgVal !== void 0) {
          formattedArgs[argKey] = formattedArgVal;
          lastArg = formattedArgVal;
        }
      }
      if (typeof funcConfig.mongoFormatFunc === "function") {
        var fn = funcConfig.mongoFormatFunc;
        var _args = [formattedArgs];
        ret = fn.call.apply(fn, [config2.ctx].concat(_args));
      } else if (funcConfig.mongoFormatFunc === null) {
        meta.errors.push("Functon ".concat(funcName, " is not supported"));
        return [void 0, false];
      } else {
        if (mongoArgsAsObject)
          ret = _defineProperty$2({}, funcName, formattedArgs);
        else if (argsCnt == 1 && lastArg !== void 0)
          ret = _defineProperty$2({}, funcName, lastArg);
        else
          ret = _defineProperty$2({}, funcName, Object.values(formattedArgs));
      }
      return [ret, useExpr];
    };
    var sqlstring = { exports: {} };
    var SqlString$1 = {};
    (function(exports2) {
      var SqlString2 = exports2;
      var ID_GLOBAL_REGEXP = /`/g;
      var QUAL_GLOBAL_REGEXP = /\./g;
      var CHARS_GLOBAL_REGEXP = /[\0\b\t\n\r\x1a\"\'\\]/g;
      var CHARS_ESCAPE_MAP = {
        "\0": "\\0",
        "\b": "\\b",
        "	": "\\t",
        "\n": "\\n",
        "\r": "\\r",
        "": "\\Z",
        '"': '\\"',
        "'": "\\'",
        "\\": "\\\\"
      };
      SqlString2.escapeId = function escapeId(val, forbidQualified) {
        if (Array.isArray(val)) {
          var sql = "";
          for (var i = 0; i < val.length; i++) {
            sql += (i === 0 ? "" : ", ") + SqlString2.escapeId(val[i], forbidQualified);
          }
          return sql;
        } else if (forbidQualified) {
          return "`" + String(val).replace(ID_GLOBAL_REGEXP, "``") + "`";
        } else {
          return "`" + String(val).replace(ID_GLOBAL_REGEXP, "``").replace(QUAL_GLOBAL_REGEXP, "`.`") + "`";
        }
      };
      SqlString2.escape = function escape(val, stringifyObjects, timeZone) {
        if (val === void 0 || val === null) {
          return "NULL";
        }
        switch (typeof val) {
          case "boolean":
            return val ? "true" : "false";
          case "number":
            return val + "";
          case "object":
            if (Object.prototype.toString.call(val) === "[object Date]") {
              return SqlString2.dateToString(val, timeZone || "local");
            } else if (Array.isArray(val)) {
              return SqlString2.arrayToList(val, timeZone);
            } else if (Buffer.isBuffer(val)) {
              return SqlString2.bufferToString(val);
            } else if (typeof val.toSqlString === "function") {
              return String(val.toSqlString());
            } else if (stringifyObjects) {
              return escapeString(val.toString());
            } else {
              return SqlString2.objectToValues(val, timeZone);
            }
          default:
            return escapeString(val);
        }
      };
      SqlString2.arrayToList = function arrayToList(array, timeZone) {
        var sql = "";
        for (var i = 0; i < array.length; i++) {
          var val = array[i];
          if (Array.isArray(val)) {
            sql += (i === 0 ? "" : ", ") + "(" + SqlString2.arrayToList(val, timeZone) + ")";
          } else {
            sql += (i === 0 ? "" : ", ") + SqlString2.escape(val, true, timeZone);
          }
        }
        return sql;
      };
      SqlString2.format = function format2(sql, values2, stringifyObjects, timeZone) {
        if (values2 == null) {
          return sql;
        }
        if (!Array.isArray(values2)) {
          values2 = [values2];
        }
        var chunkIndex = 0;
        var placeholdersRegex = /\?+/g;
        var result = "";
        var valuesIndex = 0;
        var match5;
        while (valuesIndex < values2.length && (match5 = placeholdersRegex.exec(sql))) {
          var len = match5[0].length;
          if (len > 2) {
            continue;
          }
          var value2 = len === 2 ? SqlString2.escapeId(values2[valuesIndex]) : SqlString2.escape(values2[valuesIndex], stringifyObjects, timeZone);
          result += sql.slice(chunkIndex, match5.index) + value2;
          chunkIndex = placeholdersRegex.lastIndex;
          valuesIndex++;
        }
        if (chunkIndex === 0) {
          return sql;
        }
        if (chunkIndex < sql.length) {
          return result + sql.slice(chunkIndex);
        }
        return result;
      };
      SqlString2.dateToString = function dateToString(date, timeZone) {
        var dt = new Date(date);
        if (isNaN(dt.getTime())) {
          return "NULL";
        }
        var year;
        var month;
        var day;
        var hour;
        var minute;
        var second;
        var millisecond;
        if (timeZone === "local") {
          year = dt.getFullYear();
          month = dt.getMonth() + 1;
          day = dt.getDate();
          hour = dt.getHours();
          minute = dt.getMinutes();
          second = dt.getSeconds();
          millisecond = dt.getMilliseconds();
        } else {
          var tz = convertTimezone(timeZone);
          if (tz !== false && tz !== 0) {
            dt.setTime(dt.getTime() + tz * 6e4);
          }
          year = dt.getUTCFullYear();
          month = dt.getUTCMonth() + 1;
          day = dt.getUTCDate();
          hour = dt.getUTCHours();
          minute = dt.getUTCMinutes();
          second = dt.getUTCSeconds();
          millisecond = dt.getUTCMilliseconds();
        }
        var str = zeroPad(year, 4) + "-" + zeroPad(month, 2) + "-" + zeroPad(day, 2) + " " + zeroPad(hour, 2) + ":" + zeroPad(minute, 2) + ":" + zeroPad(second, 2) + "." + zeroPad(millisecond, 3);
        return escapeString(str);
      };
      SqlString2.bufferToString = function bufferToString(buffer) {
        return "X" + escapeString(buffer.toString("hex"));
      };
      SqlString2.objectToValues = function objectToValues(object, timeZone) {
        var sql = "";
        for (var key in object) {
          var val = object[key];
          if (typeof val === "function") {
            continue;
          }
          sql += (sql.length === 0 ? "" : ", ") + SqlString2.escapeId(key) + " = " + SqlString2.escape(val, true, timeZone);
        }
        return sql;
      };
      SqlString2.raw = function raw(sql) {
        if (typeof sql !== "string") {
          throw new TypeError("argument sql must be a string");
        }
        return {
          toSqlString: function toSqlString() {
            return sql;
          }
        };
      };
      function escapeString(val) {
        var chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex = 0;
        var escapedVal = "";
        var match5;
        while (match5 = CHARS_GLOBAL_REGEXP.exec(val)) {
          escapedVal += val.slice(chunkIndex, match5.index) + CHARS_ESCAPE_MAP[match5[0]];
          chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex;
        }
        if (chunkIndex === 0) {
          return "'" + val + "'";
        }
        if (chunkIndex < val.length) {
          return "'" + escapedVal + val.slice(chunkIndex) + "'";
        }
        return "'" + escapedVal + "'";
      }
      function zeroPad(number, length2) {
        number = number.toString();
        while (number.length < length2) {
          number = "0" + number;
        }
        return number;
      }
      function convertTimezone(tz) {
        if (tz === "Z") {
          return 0;
        }
        var m = tz.match(/([\+\-\s])(\d\d):?(\d\d)?/);
        if (m) {
          return (m[1] === "-" ? -1 : 1) * (parseInt(m[2], 10) + (m[3] ? parseInt(m[3], 10) : 0) / 60) * 60;
        }
        return false;
      }
    })(SqlString$1);
    (function(module2) {
      module2.exports = SqlString$1;
    })(sqlstring);
    const SqlStringOrig = /* @__PURE__ */ getDefaultExportFromCjs(sqlstring.exports);
    var SqlString = SqlStringOrig;
    SqlString.trim = function(val) {
      if (val.charAt(0) == "'")
        return val.substring(1, val.length - 1);
      else
        return val;
    };
    SqlString.escapeLike = function(val) {
      var any_start = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var any_end = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var res = SqlString.escape(val);
      res = SqlString.trim(res);
      res = res.replace(/[%_]/g, "\\$&");
      res = (any_start ? "%" : "") + res + (any_end ? "%" : "");
      res = "'" + res + "'";
      return res;
    };
    var sqlEmptyValue = function sqlEmptyValue2(fieldDef) {
      var v = "''";
      var type = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.type;
      if (type == "date") {
        v = "'0000-00-00'";
      } else if (type == "datetime") {
        v = "'0000-00-00 00:00'";
      } else if (type == "time") {
        v = "'00:00'";
      } else if (type == "number") {
        v = "0";
      }
      return v;
    };
    var mongoEmptyValue = function mongoEmptyValue2(fieldDef) {
      var v = "";
      var type = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.type;
      if (type == "number") {
        v = 0;
      }
      return v;
    };
    var spelEscapeString = function spelEscapeString2(val) {
      return "'" + val.replace(/'/g, "''") + "'";
    };
    var spelInlineList = function spelInlineList2(vals) {
      var toArray2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var javaType;
      var jt;
      var numberJavaTypes = ["int", "float"];
      vals.map(function(v) {
        if (v !== void 0 && v !== null) {
          if (typeof v === "string") {
            jt = "String";
          } else if (typeof v === "number") {
            jt = Number.isInteger(v) ? "int" : "float";
          } else
            throw new Error("spelEscape: Can't use value ".concat(v, " in array"));
          if (!javaType) {
            javaType = jt;
          } else if (javaType != jt) {
            if (numberJavaTypes.includes(javaType) && numberJavaTypes.includes(jt)) {
              javaType = "float";
            } else
              throw new Error("spelEscape: Can't use different types in array: found ".concat(javaType, " and ").concat(jt));
          }
        }
      });
      if (!javaType) {
        javaType = "String";
      }
      var escapedVals;
      if (javaType == "float") {
        escapedVals = vals.map(function(v) {
          return spelEscape(v, true);
        });
      } else {
        escapedVals = vals.map(function(v) {
          return spelEscape(v);
        });
      }
      var res;
      if (toArray2) {
        res = "new ".concat(javaType, "[]{").concat(escapedVals.join(", "), "}");
      } else {
        res = "{".concat(escapedVals.join(", "), "}");
      }
      return res;
    };
    var spelFixList = function spelFixList2(val) {
      return "".concat(val, ".?[true]");
    };
    var spelEscape = function spelEscape2(val) {
      var numberToFloat = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var arrayToArray = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (val === void 0 || val === null) {
        return "null";
      }
      switch (_typeof$1(val)) {
        case "boolean":
          return val ? "true" : "false";
        case "number":
          if (!Number.isFinite(val) || isNaN(val))
            return void 0;
          return val + (!Number.isInteger(val) || numberToFloat ? "f" : "");
        case "object":
          if (Array.isArray(val)) {
            return spelInlineList(val, arrayToArray);
          } else {
            throw new Error("spelEscape: Object is not supported");
          }
        default:
          return spelEscapeString(val);
      }
    };
    var spelFormatConcat = function spelFormatConcat2(parts) {
      if (parts && Array.isArray(parts) && parts.length) {
        return parts.map(function(part) {
          if (part.type == "const") {
            return spelEscape(part.value);
          } else if (part.type == "property") {
            return "" + part.value;
          } else if (part.type == "variable") {
            return "#" + part.value;
          }
          return void 0;
        }).filter(function(r2) {
          return r2 != void 0;
        }).join(" + ");
      } else {
        return "null";
      }
    };
    var spelImportConcat = function spelImportConcat2(val) {
      if (val == void 0)
        return [void 0, []];
      var errors = [];
      var parts = val.valueType == "case_value" ? val.value : [val];
      var res = parts.map(function(child) {
        if (child.valueSrc == "value") {
          if (child.value === null) {
            return void 0;
          } else {
            return {
              type: "const",
              value: child.value
            };
          }
        } else if (child.valueSrc == "field") {
          return {
            type: child.isVariable ? "variable" : "property",
            value: child.value
          };
        } else {
          errors.push("Unsupported valueSrc ".concat(child.valueSrc, " in concatenation"));
        }
      }).filter(function(v) {
        return v != void 0;
      });
      return [res, errors];
    };
    var stringifyForDisplay = function stringifyForDisplay2(v) {
      return v == null ? "NULL" : v.toString();
    };
    const _export = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      SqlString,
      sqlEmptyValue,
      mongoEmptyValue,
      spelFixList,
      spelEscape,
      spelFormatConcat,
      spelImportConcat,
      stringifyForDisplay
    }, Symbol.toStringTag, { value: "Module" }));
    function ownKeys$r(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$r(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$r(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$r(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var sqlFormat$1 = function sqlFormat2(tree2, config2) {
      return _sqlFormat(tree2, config2, false);
    };
    var _sqlFormat = function _sqlFormat2(tree2, config2) {
      var returnErrors = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var meta = {
        errors: []
      };
      var res = formatItem$2(tree2, config2, meta);
      if (returnErrors) {
        return [res, meta.errors];
      } else {
        if (meta.errors.length)
          console.warn("Errors while exporting to SQL:", meta.errors);
        return res;
      }
    };
    var formatItem$2 = function formatItem2(item, config2, meta) {
      if (!item)
        return void 0;
      var type = item.get("type");
      item.get("children1");
      if (type === "group" || type === "rule_group") {
        return formatGroup$2(item, config2, meta);
      } else if (type === "rule") {
        return formatRule$2(item, config2, meta);
      }
      return void 0;
    };
    var formatGroup$2 = function formatGroup2(item, config2, meta) {
      var type = item.get("type");
      var properties2 = item.get("properties") || new immutable.exports.Map();
      var children = item.get("children1") || new immutable.exports.List();
      var isRuleGroup = type === "rule_group";
      var groupField = isRuleGroup ? properties2.get("field") : null;
      var groupFieldDef = getFieldConfig$8(config2, groupField) || {};
      var mode = groupFieldDef.mode;
      if (mode == "array") {
        meta.errors.push("Aggregation is not supported for ".concat(groupField));
      }
      var not = properties2.get("not");
      var list = children.map(function(currentChild) {
        return formatItem$2(currentChild, config2, meta);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      if (!list.size)
        return void 0;
      var conjunction = properties2.get("conjunction");
      if (!conjunction)
        conjunction = defaultConjunction(config2);
      var conjunctionDefinition = config2.conjunctions[conjunction];
      return conjunctionDefinition.sqlFormatConj(list, conjunction, not);
    };
    var buildFnToFormatOp$2 = function buildFnToFormatOp2(operator, operatorDefinition) {
      var sqlOp = operatorDefinition.sqlOp || operator;
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      var fn;
      if (cardinality == 0) {
        fn = function fn2(field, op, values2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " ").concat(sqlOp);
        };
      } else if (cardinality == 1) {
        fn = function fn2(field, op, value2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " ").concat(sqlOp, " ").concat(value2);
        };
      } else if (cardinality == 2) {
        fn = function fn2(field, op, values2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          var valFrom = values2.first();
          var valTo = values2.get(1);
          return "".concat(field, " ").concat(sqlOp, " ").concat(valFrom, " AND ").concat(valTo);
        };
      }
      return fn;
    };
    var formatRule$2 = function formatRule2(item, config2, meta) {
      var properties2 = item.get("properties") || new immutable.exports.Map();
      var field = properties2.get("field");
      var operator = properties2.get("operator");
      var operatorOptions = properties2.get("operatorOptions");
      var iValueSrc = properties2.get("valueSrc");
      var iValueType = properties2.get("valueType");
      var iValue = properties2.get("value");
      var asyncListValues = properties2.get("asyncListValues");
      if (field == null || operator == null)
        return void 0;
      var fieldDefinition = getFieldConfig$8(config2, field) || {};
      var opDef = getOperatorConfig$4(config2, operator, field) || {};
      var reversedOp = opDef.reversedOp;
      var revOpDef = getOperatorConfig$4(config2, reversedOp, field) || {};
      var cardinality = defaultValue$1(opDef.cardinality, 1);
      var isRev = false;
      var canFormatOp = opDef.sqlOp || opDef.sqlFormatOp;
      var canFormatRevOp = revOpDef.sqlOp || revOpDef.sqlFormatOp;
      if (!canFormatOp && !canFormatRevOp) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      if (!canFormatOp && canFormatRevOp) {
        isRev = true;
        var _ref = [reversedOp, operator];
        operator = _ref[0];
        reversedOp = _ref[1];
        var _ref2 = [revOpDef, opDef];
        opDef = _ref2[0];
        revOpDef = _ref2[1];
      }
      var valueSrcs = [];
      var valueTypes = [];
      var fvalue = iValue.map(function(currentValue, ind) {
        var valueSrc = iValueSrc ? iValueSrc.get(ind) : null;
        var valueType = iValueType ? iValueType.get(ind) : null;
        var cValue = completeValue(currentValue, valueSrc, config2);
        var widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
        var fieldWidgetDefinition = omit_1(getFieldWidgetConfig$3(config2, field, operator, widget, valueSrc), ["factory"]);
        var fv = formatValue$2(meta, config2, cValue, valueSrc, valueType, fieldWidgetDefinition, fieldDefinition, operator, opDef, asyncListValues);
        if (fv !== void 0) {
          valueSrcs.push(valueSrc);
          valueTypes.push(valueType);
        }
        return fv;
      });
      var hasUndefinedValues = fvalue.filter(function(v) {
        return v === void 0;
      }).size > 0;
      if (hasUndefinedValues || fvalue.size < cardinality)
        return void 0;
      var formattedValue = cardinality == 1 ? fvalue.first() : fvalue;
      var fn = opDef.sqlFormatOp || buildFnToFormatOp$2(operator, opDef);
      if (!fn) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      var formattedField = formatField$2(meta, config2, field);
      var args = [formattedField, operator, formattedValue, valueSrcs.length > 1 ? valueSrcs : valueSrcs[0], valueTypes.length > 1 ? valueTypes : valueTypes[0], omit_1(opDef, ["formatOp", "mongoFormatOp", "sqlFormatOp", "jsonLogic", "spelFormatOp"]), operatorOptions, fieldDefinition];
      var ret;
      ret = fn.call.apply(fn, [config2.ctx].concat(args));
      if (isRev) {
        ret = config2.settings.sqlFormatReverse(ret);
      }
      if (ret === void 0) {
        meta.errors.push("Operator ".concat(operator, " is not supported for value source ").concat(valueSrcs.join(", ")));
        return void 0;
      }
      return ret;
    };
    var formatValue$2 = function formatValue2(meta, config2, currentValue, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, operatorDef, asyncListValues) {
      if (currentValue === void 0)
        return void 0;
      var ret;
      if (valueSrc == "field") {
        ret = formatField$2(meta, config2, currentValue);
      } else if (valueSrc == "func") {
        ret = formatFunc$2(meta, config2, currentValue);
      } else {
        if (typeof fieldWidgetDef.sqlFormatValue === "function") {
          var fn = fieldWidgetDef.sqlFormatValue;
          var args = [
            currentValue,
            _objectSpread$r(_objectSpread$r({}, pick_1(fieldDef, ["fieldSettings", "listValues"])), {}, {
              asyncListValues
            }),
            omit_1(fieldWidgetDef, ["formatValue", "mongoFormatValue", "sqlFormatValue", "jsonLogic", "elasticSearchFormatValue", "spelFormatValue"])
          ];
          if (operator) {
            args.push(operator);
            args.push(operatorDef);
          }
          if (valueSrc == "field") {
            var valFieldDefinition = getFieldConfig$8(config2, currentValue) || {};
            args.push(valFieldDefinition);
          }
          ret = fn.call.apply(fn, [config2.ctx].concat(args));
        } else {
          if (Array.isArray(currentValue)) {
            ret = currentValue.map(function(v) {
              return SqlString.escape(v);
            });
          } else {
            ret = SqlString.escape(currentValue);
          }
        }
      }
      return ret;
    };
    var formatField$2 = function formatField2(meta, config2, field) {
      if (!field)
        return;
      var fieldSeparator = config2.settings.fieldSeparator;
      var fieldDefinition = getFieldConfig$8(config2, field) || {};
      var fieldParts = Array.isArray(field) ? field : field.split(fieldSeparator);
      getFieldPath$3(field, config2);
      var fieldPartsLabels = getFieldPathLabels$3(field, config2);
      var fieldFullLabel = fieldPartsLabels ? fieldPartsLabels.join(fieldSeparator) : null;
      var formatFieldFn = config2.settings.formatField;
      var fieldName = formatFieldName(field, config2, meta, null, {
        useTableName: true
      });
      var formattedField = formatFieldFn(fieldName, fieldParts, fieldFullLabel, fieldDefinition, config2);
      return formattedField;
    };
    var formatFunc$2 = function formatFunc2(meta, config2, currentValue) {
      var funcKey = currentValue.get("func");
      var args = currentValue.get("args");
      var funcConfig = getFuncConfig$2(config2, funcKey);
      var funcName = funcConfig.sqlFunc || funcKey;
      var formattedArgs = {};
      for (var argKey in funcConfig.args) {
        var argConfig = funcConfig.args[argKey];
        var fieldDef = getFieldConfig$8(config2, argConfig);
        var argVal = args ? args.get(argKey) : void 0;
        var argValue = argVal ? argVal.get("value") : void 0;
        var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
        var argAsyncListValues = argVal ? argVal.get("asyncListValues") : void 0;
        var formattedArgVal = formatValue$2(meta, config2, argValue, argValueSrc, argConfig.type, fieldDef, argConfig, null, null, argAsyncListValues);
        if (argValue != void 0 && formattedArgVal === void 0) {
          meta.errors.push("Can't format value of arg ".concat(argKey, " for func ").concat(funcKey));
          return void 0;
        }
        if (formattedArgVal !== void 0) {
          formattedArgs[argKey] = formattedArgVal;
        }
      }
      var ret;
      if (typeof funcConfig.sqlFormatFunc === "function") {
        var fn = funcConfig.sqlFormatFunc;
        var _args = [formattedArgs];
        ret = fn.call.apply(fn, [config2.ctx].concat(_args));
      } else {
        var argsStr = Object.entries(formattedArgs).map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2);
          _ref4[0];
          var v = _ref4[1];
          return v;
        }).join(", ");
        ret = "".concat(funcName, "(").concat(argsStr, ")");
      }
      return ret;
    };
    function _toArray(arr) {
      return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$8(arr) || _nonIterableRest();
    }
    function ownKeys$q(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$q(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$q(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$q(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var spelFormat = function spelFormat2(tree2, config2) {
      return _spelFormat(tree2, config2, false);
    };
    var _spelFormat = function _spelFormat2(tree2, config2) {
      var returnErrors = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var meta = {
        errors: []
      };
      var res = formatItem$1(tree2, config2, meta, null);
      if (returnErrors) {
        return [res, meta.errors];
      } else {
        if (meta.errors.length)
          console.warn("Errors while exporting to SpEL:", meta.errors);
        return res;
      }
    };
    var formatItem$1 = function formatItem2(item, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      if (!item)
        return void 0;
      var type = item.get("type");
      if (type === "group" || type === "rule_group") {
        return formatGroup$1(item, config2, meta, parentField);
      } else if (type === "rule") {
        return formatRule$1(item, config2, meta, parentField);
      } else if (type == "switch_group") {
        return formatSwitch(item, config2, meta);
      } else if (type == "case_group") {
        return formatCase(item, config2, meta, parentField);
      }
      return void 0;
    };
    var formatCase = function formatCase2(item, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var type = item.get("type");
      if (type != "case_group") {
        meta.errors.push("Unexpected child of type ".concat(type, " inside switch"));
        return void 0;
      }
      var properties2 = item.get("properties") || new immutable.exports.Map();
      var _formatItemValue = formatItemValue$1(config2, properties2, meta, null, parentField, "!case_value"), _formatItemValue2 = _slicedToArray(_formatItemValue, 3), formattedValue = _formatItemValue2[0];
      _formatItemValue2[1];
      _formatItemValue2[2];
      var cond = formatGroup$1(item, config2, meta, parentField);
      return [cond, formattedValue];
    };
    var formatSwitch = function formatSwitch2(item, config2, meta) {
      item.get("properties") || new immutable.exports.Map();
      var children = item.get("children1");
      if (!children)
        return void 0;
      var cases = children.map(function(currentChild) {
        return formatCase(currentChild, config2, meta, null);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      }).toArray();
      if (!cases.length)
        return void 0;
      if (cases.length == 1 && !cases[0][0]) {
        return cases[0][1];
      }
      var filteredCases = [];
      for (var i = 0; i < cases.length; i++) {
        if (i != cases.length - 1 && !cases[i][0]) {
          meta.errors.push("No condition for case ".concat(i));
        } else {
          filteredCases.push(cases[i]);
          if (i == cases.length - 1 && cases[i][0]) {
            filteredCases.push([void 0, null]);
          }
        }
      }
      var left2 = "", right2 = "";
      for (var _i = 0; _i < filteredCases.length; _i++) {
        var _filteredCases$_i = _slicedToArray(filteredCases[_i], 2), cond = _filteredCases$_i[0], value2 = _filteredCases$_i[1];
        if (value2 == void 0)
          value2 = "null";
        if (cond == void 0)
          cond = "true";
        if (_i != filteredCases.length - 1) {
          left2 += "(".concat(cond, " ? ").concat(value2, " : ");
          right2 += ")";
        } else {
          left2 += "".concat(value2);
        }
      }
      return left2 + right2;
    };
    var formatGroup$1 = function formatGroup2(item, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var type = item.get("type");
      var properties2 = item.get("properties") || new immutable.exports.Map();
      var mode = properties2.get("mode");
      var children = item.get("children1") || new immutable.exports.List();
      var field = properties2.get("field");
      var conjunction = properties2.get("conjunction");
      if (!conjunction)
        conjunction = defaultConjunction(config2);
      var conjunctionDefinition = config2.conjunctions[conjunction];
      var not = properties2.get("not");
      var isRuleGroup = type === "rule_group";
      var isRuleGroupArray = isRuleGroup && mode != "struct";
      var groupField = isRuleGroupArray ? field : parentField;
      var groupFieldDef = getFieldConfig$8(config2, groupField) || {};
      var isSpelArray = groupFieldDef.isSpelArray;
      var groupOperator = properties2.get("operator");
      if (!groupOperator && (!mode || mode == "some")) {
        groupOperator = "some";
      }
      var realGroupOperator = checkOp(config2, groupOperator, field);
      var isGroupOpRev = realGroupOperator != groupOperator;
      var realGroupOperatorDefinition = groupOperator && getOperatorConfig$4(config2, realGroupOperator, field) || null;
      var isGroup0 = isRuleGroup && (!realGroupOperator || realGroupOperatorDefinition.cardinality == 0);
      var _formatItemValue3 = formatItemValue$1(config2, properties2, meta, realGroupOperator, parentField, null), _formatItemValue4 = _slicedToArray(_formatItemValue3, 3), formattedValue = _formatItemValue4[0], valueSrc = _formatItemValue4[1], valueType = _formatItemValue4[2];
      var list = children.map(function(currentChild) {
        return formatItem$1(currentChild, config2, meta, groupField);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      if (isRuleGroupArray && !isGroup0) {
        if (formattedValue == void 0)
          return void 0;
      } else {
        if (!list.size)
          return void 0;
      }
      var omitBrackets = isRuleGroup;
      var filter = list.size ? conjunctionDefinition.spelFormatConj(list, conjunction, not, omitBrackets) : null;
      var ret;
      if (isRuleGroupArray) {
        var formattedField = formatField$1(meta, config2, field, parentField);
        var getSize = isSpelArray ? ".length" : ".size()";
        var fullSize = "".concat(formattedField).concat(getSize);
        var filteredSize = filter ? "".concat(formattedField, ".?[").concat(filter, "]").concat(getSize) : fullSize;
        var groupValue = isGroup0 ? fullSize : formattedValue;
        ret = formatExpression(meta, config2, properties2, filteredSize, groupValue, realGroupOperator, valueSrc, valueType, isGroupOpRev);
      } else {
        ret = filter;
      }
      return ret;
    };
    var buildFnToFormatOp$1 = function buildFnToFormatOp2(operator, operatorDefinition) {
      var spelOp = operatorDefinition.spelOp;
      if (!spelOp)
        return void 0;
      var objectIsFirstArg = spelOp[0] == "$";
      var isMethod = spelOp[0] == "." || objectIsFirstArg;
      var isFunction2 = spelOp.substring(spelOp.length - 2) == "()";
      var sop = isMethod ? spelOp.slice(1) : isFunction2 ? spelOp.substring(0, spelOp.length - 2) : spelOp;
      var fn;
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      if (cardinality == 0) {
        fn = function fn2(field, op, values2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          if (isMethod)
            return "".concat(field, ".").concat(sop, "()");
          else
            return "".concat(field, " ").concat(sop);
        };
      } else if (cardinality == 1) {
        fn = function fn2(field, op, values2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          if (objectIsFirstArg)
            return "".concat(values2, ".").concat(sop, "(").concat(field, ")");
          else if (isFunction2)
            return "".concat(sop, "(").concat(field, ", ").concat(values2, ")");
          else if (isMethod)
            return "".concat(field, ".").concat(sop, "(").concat(values2, ")");
          else
            return "".concat(field, " ").concat(sop, " ").concat(values2);
        };
      }
      return fn;
    };
    var formatExpression = function formatExpression2(meta, config2, properties2, formattedField, formattedValue, operator, valueSrc, valueType) {
      var isRev = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : false;
      var field = properties2.get("field");
      var opDef = getOperatorConfig$4(config2, operator, field) || {};
      var fieldDef = getFieldConfig$8(config2, field) || {};
      var operatorOptions = properties2.get("operatorOptions");
      var fn = opDef.spelFormatOp || buildFnToFormatOp$1(operator, opDef);
      if (!fn) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      var args = [formattedField, operator, formattedValue, valueSrc, valueType, omit_1(opDef, ["formatOp", "mongoFormatOp", "sqlFormatOp", "jsonLogic", "spelFormatOp"]), operatorOptions, fieldDef];
      var ret;
      ret = fn.call.apply(fn, [config2.ctx].concat(args));
      if (isRev) {
        ret = config2.settings.spelFormatReverse(ret);
      }
      if (ret === void 0) {
        meta.errors.push("Operator ".concat(operator, " is not supported for value source ").concat(valueSrc));
      }
      return ret;
    };
    var checkOp = function checkOp2(config2, operator, field) {
      if (!operator)
        return void 0;
      var opDef = getOperatorConfig$4(config2, operator, field) || {};
      var reversedOp = opDef.reversedOp;
      var revOpDef = getOperatorConfig$4(config2, reversedOp, field) || {};
      var canFormatOp = opDef.spelOp || opDef.spelFormatOp;
      var canFormatRevOp = revOpDef.spelOp || revOpDef.spelFormatOp;
      if (!canFormatOp && !canFormatRevOp) {
        return void 0;
      }
      if (!canFormatOp && canFormatRevOp) {
        var _ref = [reversedOp, operator];
        operator = _ref[0];
        reversedOp = _ref[1];
        var _ref2 = [revOpDef, opDef];
        opDef = _ref2[0];
        revOpDef = _ref2[1];
      }
      return operator;
    };
    var formatRule$1 = function formatRule2(item, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var properties2 = item.get("properties") || new immutable.exports.Map();
      var field = properties2.get("field");
      var operator = properties2.get("operator");
      if (field == null || operator == null)
        return void 0;
      var realOp = checkOp(config2, operator, field);
      if (!realOp) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      var isRev = realOp != operator;
      var _formatItemValue5 = formatItemValue$1(config2, properties2, meta, realOp, parentField, null), _formatItemValue6 = _slicedToArray(_formatItemValue5, 3), formattedValue = _formatItemValue6[0], valueSrc = _formatItemValue6[1], valueType = _formatItemValue6[2];
      if (formattedValue === void 0)
        return void 0;
      var formattedField = formatField$1(meta, config2, field, parentField);
      var res = formatExpression(meta, config2, properties2, formattedField, formattedValue, realOp, valueSrc, valueType, isRev);
      return res;
    };
    var formatItemValue$1 = function formatItemValue2(config2, properties2, meta, operator, parentField) {
      var expectedValueType = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var field = properties2.get("field");
      var iValueSrc = properties2.get("valueSrc");
      var iValueType = properties2.get("valueType");
      if (expectedValueType == "!case_value" || iValueType && iValueType.get(0) == "case_value") {
        field = "!case_value";
      }
      var fieldDef = getFieldConfig$8(config2, field) || {};
      var operatorDefinition = getOperatorConfig$4(config2, operator, field) || {};
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      var iValue = properties2.get("value");
      var asyncListValues = properties2.get("asyncListValues");
      var valueSrcs = [];
      var valueTypes = [];
      var formattedValue;
      if (iValue != void 0) {
        var fvalue = iValue.map(function(currentValue, ind) {
          var valueSrc = iValueSrc ? iValueSrc.get(ind) : null;
          var valueType = iValueType ? iValueType.get(ind) : null;
          var cValue = completeValue(currentValue, valueSrc, config2);
          var widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
          var fieldWidgetDef = omit_1(getFieldWidgetConfig$3(config2, field, operator, widget, valueSrc), ["factory"]);
          var fv = formatValue$1(meta, config2, cValue, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, operatorDefinition, parentField, asyncListValues);
          if (fv !== void 0) {
            valueSrcs.push(valueSrc);
            valueTypes.push(valueType);
          }
          return fv;
        });
        var hasUndefinedValues = fvalue.filter(function(v) {
          return v === void 0;
        }).size > 0;
        if (!(fvalue.size < cardinality || hasUndefinedValues)) {
          formattedValue = cardinality > 1 ? fvalue.toArray() : cardinality == 1 ? fvalue.first() : null;
        }
      }
      return [formattedValue, valueSrcs.length > 1 ? valueSrcs : valueSrcs[0], valueTypes.length > 1 ? valueTypes : valueTypes[0]];
    };
    var formatValue$1 = function formatValue2(meta, config2, currentValue, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, operatorDef) {
      var parentField = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : null;
      var asyncListValues = arguments.length > 10 ? arguments[10] : void 0;
      if (currentValue === void 0)
        return void 0;
      var ret;
      if (valueSrc == "field") {
        ret = formatField$1(meta, config2, currentValue, parentField);
      } else if (valueSrc == "func") {
        ret = formatFunc$1(meta, config2, currentValue, parentField);
      } else {
        if (typeof fieldWidgetDef.spelFormatValue === "function") {
          var fn = fieldWidgetDef.spelFormatValue;
          var args = [
            currentValue,
            _objectSpread$q(_objectSpread$q({}, pick_1(fieldDef, ["fieldSettings", "listValues"])), {}, {
              asyncListValues
            }),
            omit_1(fieldWidgetDef, ["formatValue", "mongoFormatValue", "sqlFormatValue", "jsonLogic", "elasticSearchFormatValue", "spelFormatValue"])
          ];
          if (operator) {
            args.push(operator);
            args.push(operatorDef);
          }
          if (valueSrc == "field") {
            var valFieldDefinition = getFieldConfig$8(config2, currentValue) || {};
            args.push(valFieldDefinition);
          }
          ret = fn.call.apply(fn, [config2.ctx].concat(args));
        } else {
          ret = spelEscape(currentValue);
        }
      }
      return ret;
    };
    var formatField$1 = function formatField2(meta, config2, field) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      if (!field)
        return;
      var fieldSeparator = config2.settings.fieldSeparator;
      var fieldDefinition = getFieldConfig$8(config2, field) || {};
      var fieldParts = Array.isArray(field) ? field : field.split(fieldSeparator);
      getFieldPath$3(field, config2, parentField);
      var fieldPartsConfigs = getFieldPartsConfigs(field, config2, parentField);
      var formatFieldFn = config2.settings.formatSpelField;
      var fieldName = formatFieldName(field, config2, meta, parentField);
      var fieldPartsMeta = fieldPartsConfigs.map(function(_ref3) {
        var _ref4 = _slicedToArray(_ref3, 3), key = _ref4[0], cnf = _ref4[1], parentCnf = _ref4[2];
        var parent2;
        if (parentCnf) {
          if (parentCnf.type == "!struct" || parentCnf.type == "!group" && parentCnf.mode == "struct")
            parent2 = cnf.isSpelMap ? "map" : "class";
          else if (parentCnf.type == "!group")
            parent2 = cnf.isSpelItemMap ? "[map]" : "[class]";
          else
            parent2 = "class";
        }
        var isSpelVariable = cnf === null || cnf === void 0 ? void 0 : cnf.isSpelVariable;
        return {
          key,
          parent: parent2,
          isSpelVariable
        };
      });
      var formattedField = formatFieldFn.call(config2.ctx, fieldName, parentField, fieldParts, fieldPartsMeta, fieldDefinition, config2);
      return formattedField;
    };
    var formatFunc$1 = function formatFunc2(meta, config2, currentValue) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var funcKey = currentValue.get("func");
      var args = currentValue.get("args");
      var funcConfig = getFuncConfig$2(config2, funcKey);
      var funcName = funcConfig.spelFunc || funcKey;
      var formattedArgs = {};
      for (var argKey in funcConfig.args) {
        var argConfig = funcConfig.args[argKey];
        var fieldDef = getFieldConfig$8(config2, argConfig);
        var argVal = args ? args.get(argKey) : void 0;
        var argValue = argVal ? argVal.get("value") : void 0;
        var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
        var argAsyncListValues = argVal ? argVal.get("asyncListValues") : void 0;
        var formattedArgVal = formatValue$1(meta, config2, argValue, argValueSrc, argConfig.type, fieldDef, argConfig, null, null, parentField, argAsyncListValues);
        if (argValue != void 0 && formattedArgVal === void 0) {
          meta.errors.push("Can't format value of arg ".concat(argKey, " for func ").concat(funcKey));
          return void 0;
        }
        if (formattedArgVal !== void 0) {
          formattedArgs[argKey] = formattedArgVal;
        }
      }
      var ret;
      if (typeof funcConfig.spelFormatFunc === "function") {
        var fn = funcConfig.spelFormatFunc;
        var _args = [formattedArgs];
        ret = fn.call.apply(fn, [config2.ctx].concat(_args));
      } else {
        var _args2 = Object.entries(formattedArgs).map(function(_ref5) {
          var _ref6 = _slicedToArray(_ref5, 2);
          _ref6[0];
          var v = _ref6[1];
          return v;
        });
        if (funcName[0] == "." && _args2.length) {
          var _args3 = _toArray(_args2), obj = _args3[0], params = _args3.slice(1);
          ret = "".concat(obj).concat(funcName, "(").concat(params.join(", "), ")");
        } else {
          ret = "".concat(funcName, "(").concat(_args2.join(", "), ")");
        }
      }
      return ret;
    };
    function ownKeys$p(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$p(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$p(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$p(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var queryString$1 = function queryString2(item, config2) {
      var isForDisplay = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var meta = {
        errors: []
      };
      var res = formatItem(item, config2, meta, isForDisplay, null);
      if (meta.errors.length)
        console.warn("Errors while exporting to string:", meta.errors);
      return res;
    };
    var formatItem = function formatItem2(item, config2, meta) {
      var isForDisplay = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      if (!item)
        return void 0;
      var type = item.get("type");
      item.get("children1");
      if (type === "group" || type === "rule_group") {
        return formatGroup(item, config2, meta, isForDisplay, parentField);
      } else if (type === "rule") {
        return formatRule(item, config2, meta, isForDisplay, parentField);
      }
      return void 0;
    };
    var formatGroup = function formatGroup2(item, config2, meta) {
      var isForDisplay = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var type = item.get("type");
      var properties2 = item.get("properties") || new immutable.exports.Map();
      var mode = properties2.get("mode");
      var children = item.get("children1") || new immutable.exports.List();
      var isRuleGroup = type === "rule_group";
      var groupField = isRuleGroup && mode == "array" ? properties2.get("field") : null;
      var canHaveEmptyChildren = isRuleGroup && mode == "array";
      var not = properties2.get("not");
      var list = children.map(function(currentChild) {
        return formatItem(currentChild, config2, meta, isForDisplay, groupField);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      if (!canHaveEmptyChildren && !list.size)
        return void 0;
      var conjunction = properties2.get("conjunction");
      if (!conjunction)
        conjunction = defaultConjunction(config2);
      var conjunctionDefinition = config2.conjunctions[conjunction];
      var conjStr = list.size ? conjunctionDefinition.formatConj(list, conjunction, not, isForDisplay) : null;
      var ret;
      if (groupField) {
        var aggrArgs = formatRule(item, config2, meta, isForDisplay, parentField, true);
        if (aggrArgs) {
          var _config$settings;
          var isRev = aggrArgs.pop();
          var args = [conjStr].concat(_toConsumableArray(aggrArgs));
          ret = (_config$settings = config2.settings).formatAggr.apply(_config$settings, _toConsumableArray(args));
          if (isRev) {
            ret = config2.settings.formatReverse(ret, null, null, null, null, isForDisplay);
          }
        }
      } else {
        ret = conjStr;
      }
      return ret;
    };
    var formatItemValue = function formatItemValue2(config2, properties2, meta, _operator, isForDisplay, parentField) {
      var field = properties2.get("field");
      var iValueSrc = properties2.get("valueSrc");
      var iValueType = properties2.get("valueType");
      var fieldDef = getFieldConfig$8(config2, field) || {};
      var operator = _operator || properties2.get("operator");
      var operatorDef = getOperatorConfig$4(config2, operator, field) || {};
      var cardinality = defaultValue$1(operatorDef.cardinality, 1);
      var iValue = properties2.get("value");
      var asyncListValues = properties2.get("asyncListValues");
      var valueSrcs = [];
      var valueTypes = [];
      var formattedValue;
      if (iValue != void 0) {
        var fvalue = iValue.map(function(currentValue, ind) {
          var valueSrc = iValueSrc ? iValueSrc.get(ind) : null;
          var valueType = iValueType ? iValueType.get(ind) : null;
          var cValue = completeValue(currentValue, valueSrc, config2);
          var widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
          var fieldWidgetDef = omit_1(getFieldWidgetConfig$3(config2, field, operator, widget, valueSrc), ["factory"]);
          var fv = formatValue(config2, meta, cValue, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, operatorDef, isForDisplay, parentField, asyncListValues);
          if (fv !== void 0) {
            valueSrcs.push(valueSrc);
            valueTypes.push(valueType);
          }
          return fv;
        });
        var hasUndefinedValues = fvalue.filter(function(v) {
          return v === void 0;
        }).size > 0;
        if (!(hasUndefinedValues || fvalue.size < cardinality)) {
          formattedValue = cardinality == 1 ? fvalue.first() : fvalue;
        }
      }
      return [formattedValue, valueSrcs.length > 1 ? valueSrcs : valueSrcs[0], valueTypes.length > 1 ? valueTypes : valueTypes[0]];
    };
    var buildFnToFormatOp = function buildFnToFormatOp2(operator, operatorDefinition) {
      var fop = operatorDefinition.labelForFormat || operator;
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      var fn;
      if (cardinality == 0) {
        fn = function fn2(field, op, values2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return "".concat(field, " ").concat(fop);
        };
      } else if (cardinality == 1) {
        fn = function fn2(field, op, values2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return "".concat(field, " ").concat(fop, " ").concat(values2);
        };
      } else if (cardinality == 2) {
        fn = function fn2(field, op, values2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          var valFrom = values2.first();
          var valTo = values2.get(1);
          return "".concat(field, " ").concat(fop, " ").concat(valFrom, " AND ").concat(valTo);
        };
      }
      return fn;
    };
    var formatRule = function formatRule2(item, config2, meta) {
      var isForDisplay = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var returnArgs = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : false;
      var properties2 = item.get("properties") || new immutable.exports.Map();
      var field = properties2.get("field");
      var operator = properties2.get("operator");
      var operatorOptions = properties2.get("operatorOptions");
      if (field == null || operator == null)
        return void 0;
      var fieldDef = getFieldConfig$8(config2, field) || {};
      var operatorDef = getOperatorConfig$4(config2, operator, field) || {};
      var reversedOp = operatorDef.reversedOp;
      var revOperatorDef = getOperatorConfig$4(config2, reversedOp, field) || {};
      var isRev = false;
      var fn = operatorDef.formatOp;
      if (!fn && reversedOp) {
        fn = revOperatorDef.formatOp;
        if (fn) {
          isRev = true;
          var _ref = [reversedOp, operator];
          operator = _ref[0];
          reversedOp = _ref[1];
          var _ref2 = [revOperatorDef, operatorDef];
          operatorDef = _ref2[0];
          revOperatorDef = _ref2[1];
        }
      }
      if (!fn)
        fn = buildFnToFormatOp(operator, operatorDef);
      if (!fn)
        return void 0;
      var formattedField = formatField(config2, meta, field, isForDisplay, parentField);
      var _formatItemValue = formatItemValue(config2, properties2, meta, operator, isForDisplay, parentField), _formatItemValue2 = _slicedToArray(_formatItemValue, 3), formattedValue = _formatItemValue2[0], valueSrc = _formatItemValue2[1], valueType = _formatItemValue2[2];
      if (formattedValue === void 0)
        return void 0;
      var args = [formattedField, operator, formattedValue, valueSrc, valueType, omit_1(operatorDef, ["formatOp", "mongoFormatOp", "sqlFormatOp", "jsonLogic", "spelFormatOp"]), operatorOptions, isForDisplay, fieldDef, isRev];
      if (returnArgs) {
        return args;
      } else {
        var _fn;
        var ret = (_fn = fn).call.apply(_fn, [config2.ctx].concat(args));
        if (isRev) {
          ret = config2.settings.formatReverse(ret, operator, reversedOp, operatorDef, revOperatorDef, isForDisplay);
        }
        return ret;
      }
    };
    var formatValue = function formatValue2(config2, meta, value2, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, opDef, isForDisplay) {
      var parentField = arguments.length > 10 && arguments[10] !== void 0 ? arguments[10] : null;
      var asyncListValues = arguments.length > 11 ? arguments[11] : void 0;
      if (value2 === void 0)
        return void 0;
      var ret;
      if (valueSrc == "field") {
        ret = formatField(config2, meta, value2, isForDisplay, parentField);
      } else if (valueSrc == "func") {
        ret = formatFunc(config2, meta, value2, isForDisplay, parentField);
      } else {
        if (typeof fieldWidgetDef.formatValue === "function") {
          var fn = fieldWidgetDef.formatValue;
          var args = [
            value2,
            _objectSpread$p(_objectSpread$p({}, pick_1(fieldDef, ["fieldSettings", "listValues"])), {}, {
              asyncListValues
            }),
            omit_1(fieldWidgetDef, ["formatValue", "mongoFormatValue", "sqlFormatValue", "jsonLogic", "elasticSearchFormatValue", "spelFormatValue"]),
            isForDisplay
          ];
          if (operator) {
            args.push(operator);
            args.push(opDef);
          }
          if (valueSrc == "field") {
            var valFieldDefinition = getFieldConfig$8(config2, value2) || {};
            args.push(valFieldDefinition);
          }
          ret = fn.call.apply(fn, [config2.ctx].concat(args));
        } else {
          ret = value2;
        }
      }
      return ret;
    };
    var formatField = function formatField2(config2, meta, field, isForDisplay) {
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var cutParentField = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
      var _config$settings2 = config2.settings, fieldSeparator = _config$settings2.fieldSeparator, fieldSeparatorDisplay = _config$settings2.fieldSeparatorDisplay;
      var ret = null;
      if (field) {
        var fieldDefinition = getFieldConfig$8(config2, field) || {};
        var fieldParts = Array.isArray(field) ? field : field.split(fieldSeparator);
        getFieldPath$3(field, config2);
        var fieldPartsLabels = getFieldPathLabels$3(field, config2, cutParentField ? parentField : null);
        var fieldFullLabel = fieldPartsLabels ? fieldPartsLabels.join(fieldSeparatorDisplay) : null;
        var fieldLabel2 = fieldDefinition.label2 || fieldFullLabel;
        var formatFieldFn = config2.settings.formatField;
        var fieldName = formatFieldName(field, config2, meta, cutParentField ? parentField : null, {
          useTableName: true
        });
        ret = formatFieldFn(fieldName, fieldParts, fieldLabel2, fieldDefinition, config2, isForDisplay);
      }
      return ret;
    };
    var formatFunc = function formatFunc2(config2, meta, funcValue, isForDisplay) {
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var funcKey = funcValue.get("func");
      var args = funcValue.get("args");
      var funcConfig = getFuncConfig$2(config2, funcKey);
      var funcName = isForDisplay && funcConfig.label || funcKey;
      var formattedArgs = {};
      var formattedArgsWithNames = {};
      for (var argKey in funcConfig.args) {
        var argConfig = funcConfig.args[argKey];
        var fieldDef = getFieldConfig$8(config2, argConfig);
        var argVal = args ? args.get(argKey) : void 0;
        var argValue = argVal ? argVal.get("value") : void 0;
        var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
        var argAsyncListValues = argVal ? argVal.get("asyncListValues") : void 0;
        var formattedArgVal = formatValue.call(config2.ctx, config2, meta, argValue, argValueSrc, argConfig.type, fieldDef, argConfig, null, null, isForDisplay, parentField, argAsyncListValues);
        var argName = isForDisplay && argConfig.label || argKey;
        if (formattedArgVal !== void 0) {
          formattedArgs[argKey] = formattedArgVal;
          formattedArgsWithNames[argName] = formattedArgVal;
        }
      }
      var ret = null;
      if (typeof funcConfig.formatFunc === "function") {
        var fn = funcConfig.formatFunc;
        var _args = [formattedArgs, isForDisplay];
        ret = fn.call.apply(fn, [config2.ctx].concat(_args));
      } else {
        var argsStr = Object.entries(formattedArgsWithNames).map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), k = _ref4[0], v = _ref4[1];
          return isForDisplay ? "".concat(k, ": ").concat(v) : "".concat(v);
        }).join(", ");
        ret = "".concat(funcName, "(").concat(argsStr, ")");
      }
      return ret;
    };
    function ownKeys$o(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$o(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$o(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$o(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function buildEsGeoPoint(geoPointString) {
      if (geoPointString == null) {
        return null;
      }
      var coordsNumberArray = geoPointString.split(",").map(Number);
      return {
        top_left: {
          lat: coordsNumberArray[0],
          lon: coordsNumberArray[1]
        },
        bottom_right: {
          lat: coordsNumberArray[2],
          lon: coordsNumberArray[3]
        }
      };
    }
    function buildEsRangeParameters(value2, operator) {
      if (value2.length > 1) {
        return {
          gte: "".concat(value2[0]),
          lte: "".concat(value2[1])
        };
      }
      var dateTime = value2[0];
      switch (operator) {
        case "on_date":
        case "not_on_date":
        case "equal":
        case "select_equals":
        case "not_equal":
          return {
            gte: "".concat(dateTime, "||/d"),
            lte: "".concat(dateTime, "||+1d")
          };
        case "less_or_equal":
          return {
            lte: "".concat(dateTime)
          };
        case "greater_or_equal":
          return {
            gte: "".concat(dateTime)
          };
        case "less":
          return {
            lt: "".concat(dateTime)
          };
        case "greater":
          return {
            gt: "".concat(dateTime)
          };
        default:
          return void 0;
      }
    }
    function buildEsWildcardParameters(value2) {
      return {
        value: "*" + value2 + "*"
      };
    }
    function determineOccurrence(combinator, not) {
      switch (combinator) {
        case "AND":
          return not ? "must_not" : "must";
        case "OR":
          return not ? "should_not" : "should";
        case "NOT":
          return not ? "must" : "must_not";
        default:
          return void 0;
      }
    }
    function buildRegexpParameters(value2) {
      return {
        value: value2
      };
    }
    function determineField(fieldName, config2) {
      return fieldName;
    }
    function buildParameters(queryType, value2, operator, fieldName, config2, syntax) {
      var textField = determineField(fieldName);
      switch (queryType) {
        case "filter":
          return {
            script: config2.operators[operator].elasticSearchScript(fieldName, value2)
          };
        case "exists":
          return {
            field: fieldName
          };
        case "match":
          return _defineProperty$2({}, textField, value2[0]);
        case "term":
          return syntax === ES_7_SYNTAX ? _defineProperty$2({}, fieldName, {
            value: value2[0]
          }) : _defineProperty$2({}, fieldName, value2[0]);
        case "geo_bounding_box":
          return _defineProperty$2({}, fieldName, buildEsGeoPoint(value2[0]));
        case "range":
          return _defineProperty$2({}, fieldName, buildEsRangeParameters(value2, operator));
        case "wildcard":
          return _defineProperty$2({}, fieldName, buildEsWildcardParameters(value2[0]));
        case "regexp":
          return _defineProperty$2({}, fieldName, buildRegexpParameters(value2[0]));
        default:
          return void 0;
      }
    }
    function buildEsRule(fieldName, value2, operator, config2, valueSrc, syntax) {
      if (!fieldName || !operator || value2 == void 0)
        return void 0;
      var op = operator;
      var opConfig = config2.operators[op];
      if (!opConfig)
        return void 0;
      var _opConfig = opConfig, elasticSearchQueryType = _opConfig.elasticSearchQueryType;
      var not = false;
      if (!elasticSearchQueryType && opConfig.reversedOp) {
        not = true;
        op = opConfig.reversedOp;
        opConfig = config2.operators[op];
        var _opConfig2 = opConfig;
        elasticSearchQueryType = _opConfig2.elasticSearchQueryType;
      }
      var widget = getWidgetForFieldOp$3(config2, fieldName, op, valueSrc);
      var widgetConfig = config2.widgets[widget];
      if (!widgetConfig)
        return void 0;
      var elasticSearchFormatValue = widgetConfig.elasticSearchFormatValue;
      var queryType;
      if (typeof elasticSearchQueryType === "function") {
        queryType = elasticSearchQueryType(widget);
      } else {
        queryType = elasticSearchQueryType;
      }
      if (!queryType) {
        return void 0;
      }
      var parameters;
      if (typeof elasticSearchFormatValue === "function") {
        parameters = elasticSearchFormatValue(queryType, value2, op, fieldName, config2);
      } else {
        parameters = buildParameters(queryType, value2, op, fieldName, config2, syntax);
      }
      if (not) {
        return {
          bool: {
            must_not: _defineProperty$2({}, queryType, _objectSpread$o({}, parameters))
          }
        };
      } else {
        return _defineProperty$2({}, queryType, _objectSpread$o({}, parameters));
      }
    }
    function buildEsGroup(children, conjunction, not, recursiveFxn, config2, syntax) {
      if (!children || !children.size)
        return void 0;
      var childrenArray = children.valueSeq().toArray();
      var occurrence = determineOccurrence(conjunction, not);
      var result = childrenArray.map(function(c) {
        return recursiveFxn(c, config2, syntax);
      }).filter(function(v) {
        return v !== void 0;
      });
      if (!result.length)
        return void 0;
      var resultFlat = result.flat(Infinity);
      return {
        bool: _defineProperty$2({}, occurrence, resultFlat)
      };
    }
    var ES_7_SYNTAX = "ES_7_SYNTAX";
    var ES_6_SYNTAX = "ES_6_SYNTAX";
    function elasticSearchFormat(tree2, config2) {
      var syntax = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ES_6_SYNTAX;
      if (!tree2)
        return void 0;
      var type = tree2.get("type");
      var properties2 = tree2.get("properties") || /* @__PURE__ */ new Map();
      if (type === "rule" && properties2.get("field")) {
        var _properties$get, _properties$get2;
        var operator = properties2.get("operator");
        var field = properties2.get("field");
        var value2 = properties2.get("value").toJS();
        (_properties$get = properties2.get("valueType")) === null || _properties$get === void 0 ? void 0 : _properties$get.get(0);
        var valueSrc = (_properties$get2 = properties2.get("valueSrc")) === null || _properties$get2 === void 0 ? void 0 : _properties$get2.get(0);
        if (valueSrc === "func") {
          return;
        }
        if (value2 && Array.isArray(value2[0])) {
          return value2[0].map(function(val) {
            return buildEsRule(field, [val], operator, config2, valueSrc, syntax);
          });
        } else {
          return buildEsRule(field, value2, operator, config2, valueSrc, syntax);
        }
      }
      if (type === "group" || type === "rule_group") {
        var not = properties2.get("not");
        var conjunction = properties2.get("conjunction");
        if (!conjunction)
          conjunction = defaultConjunction(config2);
        var children = tree2.get("children1");
        return buildEsGroup(children, conjunction, not, elasticSearchFormat, config2, syntax);
      }
    }
    const Export = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      queryBuilderFormat: queryBuilderFormat$1,
      jsonLogicFormat: jsonLogicFormat$1,
      mongodbFormat: mongodbFormat$1,
      _mongodbFormat,
      sqlFormat: sqlFormat$1,
      _sqlFormat,
      spelFormat,
      _spelFormat,
      queryString: queryString$1,
      ES_7_SYNTAX,
      ES_6_SYNTAX,
      elasticSearchFormat
    }, Symbol.toStringTag, { value: "Module" }));
    var getTree$1 = function getTree2(immutableTree) {
      var light2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var children1AsArray = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      if (!immutableTree)
        return void 0;
      var tree2 = immutableTree;
      tree2 = tree2.toJS();
      if (light2)
        tree2 = getLightTree(tree2, children1AsArray);
      return tree2;
    };
    var loadTree$1 = function loadTree2(serTree) {
      if (isImmutableTree(serTree)) {
        return serTree;
      } else if (isTree(serTree)) {
        return jsTreeToImmutable(serTree);
      } else if (typeof serTree == "string" && serTree.startsWith('["~#iM"')) {
        throw "You are trying to load query in obsolete serialization format (Immutable string) which is not supported in versions starting from 2.1.17";
      } else if (typeof serTree == "string") {
        return jsTreeToImmutable(JSON.parse(serTree));
      } else
        throw "Can't load tree!";
    };
    var checkTree$1 = function checkTree2(tree2, config2) {
      if (!tree2)
        return void 0;
      var extendedConfig = extendConfig$1(config2, void 0, true);
      return validateTree(tree2, null, extendedConfig, extendedConfig);
    };
    var isValidTree = function isValidTree2(tree2) {
      return getTreeBadFields(tree2).length == 0;
    };
    var isImmutableTree = function isImmutableTree2(tree2) {
      return immutable.exports.Map.isMap(tree2);
    };
    var isTree = function isTree2(tree2) {
      return _typeof$1(tree2) == "object" && (tree2.type == "group" || tree2.type == "switch_group");
    };
    function jsTreeToImmutable(tree2) {
      return immutable.exports.fromJS(tree2, function(key, value2) {
        var outValue;
        if (key == "properties") {
          outValue = value2.toOrderedMap();
          for (var i = 0; i < 2; i++) {
            var _outValue$get;
            if (((_outValue$get = outValue.get("value")) === null || _outValue$get === void 0 ? void 0 : _outValue$get.get(i)) === null) {
              outValue = outValue.setIn(["value", i], void 0);
            }
          }
        } else if (key == "value" && Immutable.Iterable.isIndexed(value2)) {
          outValue = value2.map(function(v) {
            var _v$toJS;
            var vJs = v === null || v === void 0 ? void 0 : (_v$toJS = v.toJS) === null || _v$toJS === void 0 ? void 0 : _v$toJS.call(v);
            if (vJs !== null && vJs !== void 0 && vJs.func) {
              return v.toOrderedMap();
            } else if (v !== null && v !== void 0 && v.toJS) {
              return vJs;
            } else {
              return v;
            }
          }).toList();
        } else if (key == "asyncListValues") {
          outValue = value2.toJS();
        } else if (key == "children1" && Immutable.Iterable.isIndexed(value2)) {
          outValue = new Immutable.OrderedMap(value2.map(function(child) {
            return [child.get("id"), child];
          }));
        } else {
          outValue = Immutable.Iterable.isIndexed(value2) ? value2.toList() : value2.toOrderedMap();
        }
        return outValue;
      });
    }
    function ownKeys$n(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$n(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$n(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$n(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var arrayUniq = function arrayUniq2(arr) {
      return Array.from(new Set(arr));
    };
    var loadFromJsonLogic$1 = function loadFromJsonLogic2(logicTree, config2) {
      return _loadFromJsonLogic(logicTree, config2, false);
    };
    var _loadFromJsonLogic = function _loadFromJsonLogic2(logicTree, config2) {
      var returnErrors = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var meta = {
        errors: []
      };
      var extendedConfig = extendConfig$1(config2, void 0, false);
      var conv = buildConv$1(extendedConfig);
      var jsTree = logicTree ? convertFromLogic(logicTree, conv, extendedConfig, "rule", meta) : void 0;
      if (jsTree && jsTree.type != "group") {
        jsTree = wrapInDefaultConj$1(jsTree, extendedConfig);
      }
      var immTree = jsTree ? loadTree$1(jsTree) : void 0;
      if (returnErrors) {
        return [immTree, meta.errors];
      } else {
        if (meta.errors.length)
          console.warn("Errors while importing from JsonLogic:", meta.errors);
        return immTree;
      }
    };
    var buildConv$1 = function buildConv2(config2) {
      var operators2 = {};
      for (var opKey in config2.operators) {
        var opConfig = config2.operators[opKey];
        if (typeof opConfig.jsonLogic == "string") {
          var opk = (opConfig._jsonLogicIsRevArgs ? "#" : "") + opConfig.jsonLogic + "/" + defaultValue$1(opConfig.cardinality, 1);
          if (!operators2[opk])
            operators2[opk] = [];
          operators2[opk].push(opKey);
        } else if (typeof opConfig.jsonLogic2 == "string") {
          var _opk = opConfig.jsonLogic2 + "/" + defaultValue$1(opConfig.cardinality, 1);
          if (!operators2[_opk])
            operators2[_opk] = [];
          operators2[_opk].push(opKey);
        }
      }
      var conjunctions2 = {};
      for (var conjKey in config2.conjunctions) {
        var conjunctionDefinition = config2.conjunctions[conjKey];
        var ck = conjunctionDefinition.jsonLogicConj || conjKey.toLowerCase();
        conjunctions2[ck] = conjKey;
      }
      var funcs = {};
      for (var funcKey in config2.funcs) {
        var funcConfig = config2.funcs[funcKey];
        var fk = void 0;
        if (funcConfig.jsonLogicIsMethod) {
          fk = "#" + funcConfig.jsonLogic;
        } else if (typeof funcConfig.jsonLogic == "string") {
          fk = funcConfig.jsonLogic;
        }
        if (fk) {
          if (!funcs[fk])
            funcs[fk] = [];
          funcs[fk].push(funcKey);
        }
      }
      var _config$settings$json = config2.settings.jsonLogic, groupVarKey = _config$settings$json.groupVarKey, altVarKey = _config$settings$json.altVarKey;
      return {
        operators: operators2,
        conjunctions: conjunctions2,
        funcs,
        varKeys: ["var", groupVarKey, altVarKey]
      };
    };
    var convertFromLogic = function convertFromLogic2(logic2, conv, config2, expectedType, meta) {
      var not = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : false;
      var fieldConfig = arguments.length > 6 ? arguments[6] : void 0;
      var widget = arguments.length > 7 ? arguments[7] : void 0;
      var parentField = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : null;
      var op, vals;
      if (isJsonLogic(logic2)) {
        op = Object.keys(logic2)[0];
        vals = logic2[op];
        if (!Array.isArray(vals))
          vals = [vals];
      }
      var ret;
      var beforeErrorsCnt = meta.errors.length;
      var lockedOp = config2.settings.jsonLogic.lockedOp;
      var isEmptyOp = op == "!" && vals.length == 1 && vals[0] && isJsonLogic(vals[0]) && conv.varKeys.includes(Object.keys(vals[0])[0]);
      var isRev = op == "!" && !isEmptyOp;
      var isLocked = lockedOp && op == lockedOp;
      if (isLocked) {
        ret = convertFromLogic2(vals[0], conv, config2, expectedType, meta, not, fieldConfig, widget, parentField, true);
      } else if (isRev) {
        ret = convertFromLogic2(vals[0], conv, config2, expectedType, meta, !not, fieldConfig, widget, parentField);
      } else if (expectedType == "val") {
        ret = convertField(op, vals, conv, config2, not, meta, parentField) || convertFunc(op, vals, conv, config2, not, fieldConfig, meta, parentField) || convertVal(logic2, fieldConfig, widget, config2, meta);
      } else if (expectedType == "rule") {
        ret = convertConj(op, vals, conv, config2, not, meta, parentField, false) || convertOp(op, vals, conv, config2, not, meta, parentField);
      }
      var afterErrorsCnt = meta.errors.length;
      if (op != "!" && ret === void 0 && afterErrorsCnt == beforeErrorsCnt) {
        meta.errors.push("Can't parse logic ".concat(JSON.stringify(logic2)));
      }
      if (isLocked) {
        ret.properties.isLocked = true;
      }
      return ret;
    };
    var convertVal = function convertVal2(val, fieldConfig, widget, config2, meta) {
      if (val === void 0)
        return void 0;
      var widgetConfig = config2.widgets[widget || fieldConfig.mainWidget];
      if (!widgetConfig) {
        meta.errors.push("No widget for type ".concat(fieldConfig.type));
        return void 0;
      }
      if (isJsonLogic(val)) {
        meta.errors.push("Unexpected logic in value: ".concat(JSON.stringify(val)));
        return void 0;
      }
      if (fieldConfig && fieldConfig.type == "time" && typeof val == "number") {
        var h = Math.floor(val / 60 / 60) % 24, m = Math.floor(val / 60) % 60, s = val % 60;
        var valueFormat = widgetConfig.valueFormat;
        if (valueFormat) {
          var dateVal = new Date(val);
          dateVal.setMilliseconds(0);
          dateVal.setHours(h);
          dateVal.setMinutes(m);
          dateVal.setSeconds(s);
          val = hooks(dateVal).format(valueFormat);
        } else {
          val = "".concat(h, ":").concat(m, ":").concat(s);
        }
      }
      if (fieldConfig && ["date", "datetime"].includes(fieldConfig.type) && val && !(val instanceof Date)) {
        try {
          var _dateVal = new Date(val);
          if (_dateVal instanceof Date && _dateVal.toISOString() === val) {
            val = _dateVal;
          }
        } catch (e) {
          meta.errors.push("Can't convert value ".concat(val, " as Date"));
          val = void 0;
        }
      }
      if (val instanceof Date && fieldConfig) {
        var _valueFormat = widgetConfig.valueFormat;
        if (_valueFormat) {
          val = hooks(val).format(_valueFormat);
        }
      }
      var asyncListValues;
      if (val && fieldConfig.fieldSettings && fieldConfig.fieldSettings.asyncFetch) {
        var vals = Array.isArray(val) ? val : [val];
        asyncListValues = vals;
      }
      return {
        valueSrc: "value",
        value: val,
        valueType: widgetConfig.type,
        asyncListValues
      };
    };
    var convertField = function convertField2(op, vals, conv, config2, not, meta) {
      var parentField = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      var fieldSeparator = config2.settings.fieldSeparator;
      if (conv.varKeys.includes(op) && typeof vals[0] == "string") {
        var field = vals[0];
        if (parentField)
          field = [parentField, field].join(fieldSeparator);
        field = normalizeField(config2, field);
        var fieldConfig = getFieldConfig$8(config2, field);
        if (!fieldConfig) {
          meta.errors.push("No config for field ".concat(field));
          return void 0;
        }
        return {
          valueSrc: "field",
          value: field,
          valueType: fieldConfig.type
        };
      }
      return void 0;
    };
    var convertFunc = function convertFunc2(op, vals, conv, config2, not, fieldConfig, meta) {
      var parentField = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : null;
      if (!op)
        return void 0;
      var func, argsArr, funcKey;
      var jsonLogicIsMethod = op == "method";
      if (jsonLogicIsMethod) {
        var obj, opts;
        var _vals = _toArray(vals);
        obj = _vals[0];
        func = _vals[1];
        opts = _vals.slice(2);
        argsArr = [obj].concat(_toConsumableArray(opts));
      } else {
        func = op;
        argsArr = vals;
      }
      var fk = (jsonLogicIsMethod ? "#" : "") + func;
      var funcKeys = (conv.funcs[fk] || []).filter(function(k) {
        return fieldConfig ? config2.funcs[k].returnType == fieldConfig.type : true;
      });
      if (funcKeys.length) {
        funcKey = funcKeys[0];
      } else {
        var v = _defineProperty$2({}, op, vals);
        for (var _i = 0, _Object$entries = Object.entries(config2.funcs || {}); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), f = _Object$entries$_i[0], fc = _Object$entries$_i[1];
          if (fc.jsonLogicImport && fc.returnType == fieldConfig.type) {
            var parsed = void 0;
            try {
              parsed = fc.jsonLogicImport(v);
            } catch (_e) {
            }
            if (parsed) {
              funcKey = f;
              argsArr = parsed;
            }
          }
        }
      }
      if (!funcKey)
        return void 0;
      if (funcKey) {
        var funcConfig = config2.funcs[funcKey];
        var argKeys = Object.keys(funcConfig.args || {});
        var args = argsArr.reduce(function(acc, val, ind) {
          var argKey = argKeys[ind];
          var argConfig = funcConfig.args[argKey];
          var argVal = convertFromLogic(val, conv, config2, "val", meta, false, argConfig, null, parentField);
          if (argVal === void 0) {
            argVal = argConfig.defaultValue;
            if (argVal === void 0) {
              meta.errors.push("No value for arg ".concat(argKey, " of func ").concat(funcKey));
              return void 0;
            }
          }
          return _objectSpread$n(_objectSpread$n({}, acc), {}, _defineProperty$2({}, argKey, argVal));
        }, {});
        return {
          valueSrc: "func",
          value: {
            func: funcKey,
            args
          },
          valueType: funcConfig.returnType
        };
      }
      return void 0;
    };
    var convertConj = function convertConj2(op, vals, conv, config2, not, meta) {
      var parentField = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      var conjKey = conv.conjunctions[op];
      var fieldSeparator = config2.settings.fieldSeparator;
      var parentFieldConfig = parentField ? getFieldConfig$8(config2, parentField) : null;
      (parentFieldConfig === null || parentFieldConfig === void 0 ? void 0 : parentFieldConfig.type) == "!group";
      if (conjKey) {
        var type = "group";
        var children = vals.map(function(v) {
          return convertFromLogic(v, conv, config2, "rule", meta, false, null, null, parentField);
        }).filter(function(r2) {
          return r2 !== void 0;
        }).reduce(function(acc, r2) {
          return _objectSpread$n(_objectSpread$n({}, acc), {}, _defineProperty$2({}, r2.id, r2));
        }, {});
        var complexFields = Object.values(children).map(function(v) {
          var _v$properties;
          return v === null || v === void 0 ? void 0 : (_v$properties = v.properties) === null || _v$properties === void 0 ? void 0 : _v$properties.field;
        }).filter(function(f) {
          return f && f.includes(fieldSeparator);
        });
        var complexFieldsGroupAncestors = Object.fromEntries(arrayUniq(complexFields).map(function(f) {
          var parts = f.split(fieldSeparator);
          var ancs = Object.fromEntries(parts.slice(0, -1).map(function(f2, i, parts2) {
            return [].concat(_toConsumableArray(parts2.slice(0, i)), [f2]);
          }).map(function(fp) {
            return [fp.join(fieldSeparator), getFieldConfig$8(config2, fp)];
          }).filter(function(_ref3) {
            var _ref4 = _slicedToArray(_ref3, 2);
            _ref4[0];
            var fc = _ref4[1];
            return fc.type == "!group";
          }));
          return [f, Object.keys(ancs)];
        }));
        Object.values(children).map(function(v) {
          var _v$properties2;
          return v === null || v === void 0 ? void 0 : (_v$properties2 = v.properties) === null || _v$properties2 === void 0 ? void 0 : _v$properties2.field;
        }).map(function(f) {
          return complexFieldsGroupAncestors[f];
        }).filter(function(ancs) {
          return ancs && ancs.length;
        });
        var usedRuleGroups = arrayUniq(Object.values(complexFieldsGroupAncestors).flat());
        topLevelFieldsFilter(usedRuleGroups);
        var properties2 = {
          conjunction: conjKey,
          not
        };
        var id = uuid$1();
        var children1 = {};
        var groupToId = {};
        Object.entries(children).map(function(_ref5) {
          var _ref6 = _slicedToArray(_ref5, 2), k = _ref6[0], v = _ref6[1];
          if (v.type == "group" || v.type == "rule_group") {
            children1[k] = v;
          } else {
            var _v$properties3;
            var field = v === null || v === void 0 ? void 0 : (_v$properties3 = v.properties) === null || _v$properties3 === void 0 ? void 0 : _v$properties3.field;
            var groupAncestors = complexFieldsGroupAncestors[field] || [];
            var groupField = groupAncestors[groupAncestors.length - 1];
            if (!groupField) {
              children1[k] = v;
            } else {
              var ch = children1;
              var parentFieldParts = parentField ? parentField.split(fieldSeparator) : [];
              var isInParent = shallowEqual$2(parentFieldParts, groupField.split(fieldSeparator).slice(0, parentFieldParts.length));
              if (!isInParent)
                parentFieldParts = [];
              var traverseGroupFields = groupField.split(fieldSeparator).slice(parentFieldParts.length).map(function(f, i, parts) {
                return [].concat(_toConsumableArray(parentFieldParts), _toConsumableArray(parts.slice(0, i)), [f]).join(fieldSeparator);
              }).map(function(f) {
                return normalizeField(config2, f);
              }).map(function(f) {
                return {
                  f,
                  fc: getFieldConfig$8(config2, f) || {}
                };
              }).filter(function(_ref7) {
                var fc = _ref7.fc;
                return fc.type != "!struct";
              });
              traverseGroupFields.map(function(_ref8, i) {
                var gf = _ref8.f, gfc = _ref8.fc;
                var groupId = groupToId[gf];
                if (!groupId) {
                  groupId = uuid$1();
                  groupToId[gf] = groupId;
                  ch[groupId] = {
                    type: "rule_group",
                    id: groupId,
                    children1: {},
                    properties: {
                      conjunction: conjKey,
                      not: false,
                      field: gf,
                      mode: gfc.mode
                    }
                  };
                }
                ch = ch[groupId].children1;
              });
              ch[k] = v;
            }
          }
        });
        return {
          type,
          id,
          children1,
          properties: properties2
        };
      }
      return void 0;
    };
    var topLevelFieldsFilter = function topLevelFieldsFilter2(fields) {
      var arr = _toConsumableArray(fields).sort(function(a, b) {
        return a.length - b.length;
      });
      for (var i = 0; i < arr.length; i++) {
        for (var j = i + 1; j < arr.length; j++) {
          if (arr[j].indexOf(arr[i]) == 0) {
            arr.splice(j, 1);
            j--;
          }
        }
      }
      return arr;
    };
    var wrapInDefaultConjRuleGroup = function wrapInDefaultConjRuleGroup2(rule2, parentField, parentFieldConfig, config2, conj) {
      if (!rule2)
        return void 0;
      return {
        type: "rule_group",
        id: uuid$1(),
        children1: _defineProperty$2({}, rule2.id, rule2),
        properties: {
          conjunction: conj || defaultGroupConjunction$1(config2, parentFieldConfig),
          not: false,
          field: parentField
        }
      };
    };
    var wrapInDefaultConj$1 = function wrapInDefaultConj2(rule2, config2) {
      var not = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      return {
        type: "group",
        id: uuid$1(),
        children1: _defineProperty$2({}, rule2.id, rule2),
        properties: {
          conjunction: defaultConjunction(config2),
          not
        }
      };
    };
    var parseRule = function parseRule2(op, arity, vals, parentField, conv, config2, meta) {
      var errors = [];
      var res = _parseRule(op, arity, vals, parentField, conv, config2, errors, false) || _parseRule(op, arity, vals, parentField, conv, config2, errors, true);
      if (!res) {
        meta.errors.push(errors.join("; ") || "Unknown op ".concat(op, "/").concat(arity));
        return void 0;
      }
      return res;
    };
    var _parseRule = function _parseRule2(op, arity, vals, parentField, conv, config2, errors, isRevArgs) {
      var isAllOrSomeInForMultiselect = (op == "all" || op == "some") && isJsonLogic(vals[1]) && Object.keys(vals[1])[0] == "in";
      var isGroup0 = !isAllOrSomeInForMultiselect && config2.settings.groupOperators.includes(op);
      var eqOps = ["==", "!="];
      var cardinality = isGroup0 ? 0 : arity - 1;
      if (isGroup0)
        cardinality = 0;
      else if (eqOps.includes(op) && cardinality == 1 && vals[1] === null) {
        arity = 1;
        cardinality = 0;
        vals = [vals[0]];
      }
      var opk = op + "/" + cardinality;
      var fieldSeparator = config2.settings.fieldSeparator;
      var opKeys = conv.operators[(isRevArgs ? "#" : "") + opk];
      if (!opKeys)
        return;
      var jlField, args = [];
      var rangeOps = ["<", "<=", ">", ">="];
      if (rangeOps.includes(op) && arity == 3) {
        jlField = vals[1];
        args = [vals[0], vals[2]];
      } else if (isRevArgs) {
        jlField = vals[1];
        args = [vals[0]];
      } else {
        var _vals2 = vals;
        var _vals3 = _toArray(_vals2);
        jlField = _vals3[0];
        args = _vals3.slice(1);
      }
      if (!isJsonLogic(jlField)) {
        errors.push("Incorrect operands for ".concat(op, ": ").concat(JSON.stringify(vals)));
        return;
      }
      var k = Object.keys(jlField)[0];
      var v = Object.values(jlField)[0];
      var field, having;
      if (conv.varKeys.includes(k) && typeof v == "string") {
        field = v;
      }
      if (isGroup0) {
        having = args[0];
        args = [];
      }
      if (k == "reduce" && Array.isArray(v) && v.length == 3) {
        var _v2 = v, _v3 = _slicedToArray(_v2, 3), filter = _v3[0], acc = _v3[1], init = _v3[2];
        if (isJsonLogic(filter) && init == 0 && isJsonLogic(acc) && Array.isArray(acc["+"]) && acc["+"][0] == 1 && isJsonLogic(acc["+"][1]) && acc["+"][1]["var"] == "accumulator") {
          k = Object.keys(filter)[0];
          v = Object.values(filter)[0];
          if (k == "filter") {
            var _v4 = v, _v5 = _slicedToArray(_v4, 2), group2 = _v5[0], _filter = _v5[1];
            if (isJsonLogic(group2)) {
              k = Object.keys(group2)[0];
              v = Object.values(group2)[0];
              if (conv.varKeys.includes(k) && typeof v == "string") {
                field = v;
                having = _filter;
              }
            }
          } else if (conv.varKeys.includes(k) && typeof v == "string") {
            field = v;
          }
        }
      }
      if (!field) {
        errors.push("Unknown field ".concat(JSON.stringify(jlField)));
        return;
      }
      if (parentField)
        field = [parentField, field].join(fieldSeparator);
      field = normalizeField(config2, field);
      var fieldConfig = getFieldConfig$8(config2, field);
      if (!fieldConfig) {
        errors.push("No config for field ".concat(field));
        return;
      }
      var opKey = opKeys[0];
      if (opKeys.length > 1 && fieldConfig && fieldConfig.operators) {
        opKeys = opKeys.filter(function(k2) {
          return fieldConfig.operators.includes(k2);
        });
        if (opKeys.length == 0) {
          errors.push("No corresponding ops for field ".concat(field));
          return;
        }
        opKey = opKeys[0];
      }
      return {
        field,
        fieldConfig,
        opKey,
        args,
        having
      };
    };
    var convertOp = function convertOp2(op, vals, conv, config2, not, meta) {
      var parentField = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      if (!op)
        return void 0;
      var arity = vals.length;
      if ((op == "all" || op == "some") && isJsonLogic(vals[1])) {
        var op2 = Object.keys(vals[1])[0];
        if (op2 == "in") {
          vals = [vals[0], vals[1][op2][1]];
          op = op + "-" + op2;
        }
      }
      var parseRes = parseRule(op, arity, vals, parentField, conv, config2, meta);
      if (!parseRes)
        return void 0;
      var field = parseRes.field, fieldConfig = parseRes.fieldConfig, opKey = parseRes.opKey, args = parseRes.args, having = parseRes.having;
      var opConfig = config2.operators[opKey];
      fieldConfig.showNot !== void 0 ? fieldConfig.showNot : config2.settings.showNot;
      var canRev = true;
      var conj;
      var havingVals;
      var havingNot = false;
      if (fieldConfig.type == "!group" && having) {
        conj = Object.keys(having)[0];
        havingVals = having[conj];
        if (!Array.isArray(havingVals))
          havingVals = [havingVals];
        var isEmptyOp = conj == "!" && havingVals.length == 1 && havingVals[0] && isJsonLogic(havingVals[0]) && conv.varKeys.includes(Object.keys(havingVals[0])[0]);
        if (conj == "!" && !isEmptyOp) {
          havingNot = true;
          having = having["!"];
          conj = Object.keys(having)[0];
          havingVals = having[conj];
          if (!Array.isArray(havingVals))
            havingVals = [havingVals];
        }
      }
      if (not && canRev && opConfig.reversedOp) {
        not = false;
        opKey = opConfig.reversedOp;
        opConfig = config2.operators[opKey];
      }
      var widget = getWidgetForFieldOp$3(config2, field, opKey);
      var convertedArgs = args.map(function(v) {
        return convertFromLogic(v, conv, config2, "val", meta, false, fieldConfig, widget, parentField);
      });
      if (convertedArgs.filter(function(v) {
        return v === void 0;
      }).length) {
        return void 0;
      }
      var res;
      if (fieldConfig.type == "!group" && having) {
        if (conv.conjunctions[conj] !== void 0) {
          res = convertConj(conj, havingVals, conv, config2, havingNot, meta, field, true);
          havingNot = false;
        } else {
          var rule2 = convertOp2(conj, havingVals, conv, config2, havingNot, meta, field);
          havingNot = false;
          res = wrapInDefaultConjRuleGroup(rule2, field, fieldConfig, config2, conv.conjunctions["and"]);
        }
        if (!res)
          return void 0;
        res.type = "rule_group";
        Object.assign(res.properties, {
          field,
          mode: fieldConfig.mode,
          operator: opKey
        });
        if (fieldConfig.mode == "array") {
          Object.assign(res.properties, {
            value: convertedArgs.map(function(v) {
              return v.value;
            }),
            valueSrc: convertedArgs.map(function(v) {
              return v.valueSrc;
            }),
            valueType: convertedArgs.map(function(v) {
              return v.valueType;
            })
          });
        }
        if (not) {
          res = wrapInDefaultConj$1(res, config2, not);
        }
      } else if (fieldConfig.type == "!group" && !having) {
        res = {
          type: "rule_group",
          id: uuid$1(),
          children1: {},
          properties: {
            conjunction: defaultGroupConjunction$1(config2, fieldConfig),
            not,
            mode: fieldConfig.mode,
            field,
            operator: opKey
          }
        };
        if (fieldConfig.mode == "array") {
          Object.assign(res.properties, {
            value: convertedArgs.map(function(v) {
              return v.value;
            }),
            valueSrc: convertedArgs.map(function(v) {
              return v.valueSrc;
            }),
            valueType: convertedArgs.map(function(v) {
              return v.valueType;
            })
          });
        }
      } else {
        var asyncListValuesArr = convertedArgs.map(function(v) {
          return v.asyncListValues;
        }).filter(function(v) {
          return v != void 0;
        });
        var asyncListValues = asyncListValuesArr.length ? asyncListValuesArr[0] : void 0;
        res = {
          type: "rule",
          id: uuid$1(),
          properties: _objectSpread$n({
            field,
            operator: opKey,
            value: convertedArgs.map(function(v) {
              return v.value;
            }),
            valueSrc: convertedArgs.map(function(v) {
              return v.valueSrc;
            }),
            valueType: convertedArgs.map(function(v) {
              return v.valueType;
            })
          }, asyncListValues ? {
            asyncListValues
          } : {})
        };
        if (not) {
          res = wrapInDefaultConj$1(res, config2, not);
        }
      }
      return res;
    };
    var spel2js = { exports: {} };
    (function(module2, exports2) {
      (function webpackUniversalModuleDefinition(root2, factory) {
        module2.exports = factory();
      })(commonjsGlobal, function() {
        return function(modules) {
          var installedModules = {};
          function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
              return installedModules[moduleId].exports;
            }
            var module3 = installedModules[moduleId] = {
              i: moduleId,
              l: false,
              exports: {}
            };
            modules[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
            module3.l = true;
            return module3.exports;
          }
          __webpack_require__.m = modules;
          __webpack_require__.c = installedModules;
          __webpack_require__.d = function(exports3, name, getter) {
            if (!__webpack_require__.o(exports3, name)) {
              Object.defineProperty(exports3, name, {
                configurable: false,
                enumerable: true,
                get: getter
              });
            }
          };
          __webpack_require__.n = function(module3) {
            var getter = module3 && module3.__esModule ? function getDefault() {
              return module3["default"];
            } : function getModuleExports() {
              return module3;
            };
            __webpack_require__.d(getter, "a", getter);
            return getter;
          };
          __webpack_require__.o = function(object, property2) {
            return Object.prototype.hasOwnProperty.call(object, property2);
          };
          __webpack_require__.p = "";
          return __webpack_require__(__webpack_require__.s = 3);
        }([
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            function createSpelNode(nodeType, position2) {
              var node2 = {}, type = nodeType || "Abstract", children = [], parent2 = null, activeContext;
              node2._type = type;
              node2.getType = function() {
                return type;
              };
              node2.setType = function(nodeType2) {
                type = nodeType2;
              };
              node2.getChildren = function() {
                return children;
              };
              node2.addChild = function(childNode) {
                if (!childNode) {
                  return;
                }
                if (!childNode.setParent) {
                  throw {
                    name: "Error",
                    message: "Trying to add a child which is not a node: " + JSON.stringify(childNode)
                  };
                }
                childNode.setParent(node2);
                children.push(childNode);
              };
              node2.getParent = function() {
                return parent2;
              };
              node2.setParent = function(parentNode) {
                parent2 = parentNode;
              };
              node2.getContext = function(state) {
                return activeContext || state.activeContext.peek();
              };
              node2.setContext = function(nodeContext) {
                activeContext = nodeContext;
              };
              node2.getStartPosition = function() {
                return position2 >> 16;
              };
              node2.getEndPosition = function() {
                return position2 & 65535;
              };
              node2.getValue = function() {
                throw {
                  name: "MethodNotImplementedException",
                  message: "SpelNode#getValue() must be overridden."
                };
              };
              node2.toString = function() {
                var s = "Kind: " + node2.getType();
                s += ", Children: [";
                for (var i = 0, l = node2.getChildren().length; i < l; i += 1) {
                  s += "{" + node2.getChildren()[i] + "}, ";
                }
                s += "]";
                return s;
              };
              if (position2 === 0) {
                throw {
                  name: "Error",
                  message: "Position cannot be 0"
                };
              }
              for (var _len = arguments.length, operands = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                operands[_key - 2] = arguments[_key];
              }
              if (operands) {
                operands.forEach(function(operand) {
                  node2.addChild(operand);
                });
              }
              return node2;
            }
            exports3.SpelNode = {
              create: createSpelNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.Stack = Stack2;
            function Stack2(startingElements) {
              this.elements = startingElements || [];
            }
            Stack2.prototype.push = function(el) {
              this.elements.push(el);
              return el;
            };
            Stack2.prototype.pop = function() {
              return this.elements.pop();
            };
            Stack2.prototype.peek = function() {
              return this.elements[this.elements.length - 1];
            };
            Stack2.prototype.empty = function() {
              return this.elements.length > 0;
            };
            Stack2.prototype.search = function(el) {
              return this.elements.length - this.elements.indexOf(el);
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            var types2 = {
              LITERAL_INT: 1,
              LITERAL_LONG: 2,
              LITERAL_HEXINT: 3,
              LITERAL_HEXLONG: 4,
              LITERAL_STRING: 5,
              LITERAL_REAL: 6,
              LITERAL_REAL_FLOAT: 7,
              LPAREN: "(",
              RPAREN: ")",
              COMMA: ",",
              IDENTIFIER: 0,
              COLON: ":",
              HASH: "#",
              RSQUARE: "]",
              LSQUARE: "[",
              LCURLY: "{",
              RCURLY: "}",
              DOT: ".",
              PLUS: "+",
              STAR: "*",
              MINUS: "-",
              SELECT_FIRST: "^[",
              SELECT_LAST: "$[",
              QMARK: "?",
              PROJECT: "![",
              DIV: "/",
              GE: ">=",
              GT: ">",
              LE: "<=",
              LT: "<",
              EQ: "==",
              NE: "!=",
              MOD: "%",
              NOT: "!",
              ASSIGN: "=",
              INSTANCEOF: "instanceof",
              MATCHES: "matches",
              BETWEEN: "between",
              SELECT: "?[",
              POWER: "^",
              ELVIS: "?:",
              SAFE_NAVI: "?.",
              BEAN_REF: "@",
              SYMBOLIC_OR: "||",
              SYMBOLIC_AND: "&&",
              INC: "++",
              DEC: "--"
            };
            function TokenKind(type) {
              this.type = type;
              this.tokenChars = types2[type];
              this._hasPayload = typeof types2[type] !== "string";
              if (typeof types2[type] === "number") {
                this._ordinal = types2[type];
              }
            }
            for (var t in types2) {
              if (types2.hasOwnProperty(t)) {
                TokenKind[t] = new TokenKind(t);
              }
            }
            TokenKind.prototype.toString = function() {
              return this.type + (this.tokenChars.length !== 0 ? "(" + this.tokenChars + ")" : "");
            };
            TokenKind.prototype.getLength = function() {
              return this.tokenChars.length;
            };
            TokenKind.prototype.hasPayload = function() {
              return this._hasPayload;
            };
            TokenKind.prototype.valueOf = function(id) {
              for (var t2 in types2) {
                if (types2.hasOwnProperty(t2) && types2[t2] === id) {
                  return TokenKind[t2];
                }
              }
            };
            TokenKind.prototype.ordinal = function() {
              return this._ordinal;
            };
            exports3.TokenKind = TokenKind;
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.StandardContext = exports3.SpelExpressionEvaluator = void 0;
            var _SpelExpressionEvaluator = __webpack_require__(4);
            var _StandardContext = __webpack_require__(50);
            exports3.SpelExpressionEvaluator = _SpelExpressionEvaluator.SpelExpressionEvaluator;
            exports3.StandardContext = _StandardContext.StandardContext;
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.SpelExpressionEvaluator = void 0;
            var _SpelExpressionParser = __webpack_require__(5);
            var _Stack2 = __webpack_require__(1);
            var spelExpressionEvaluator = {};
            function evalCompiled(compiledExpression, context2, locals) {
              var activeContext = new _Stack2.Stack(), state;
              if (!context2) {
                context2 = {};
              }
              activeContext.push(context2);
              state = {
                rootContext: context2,
                activeContext,
                locals
              };
              return compiledExpression.getValue(state);
            }
            spelExpressionEvaluator.compile = function(expression) {
              var compiledExpression = (0, _SpelExpressionParser.SpelExpressionParser)().parse(expression);
              return {
                eval: function _eval(context2, locals) {
                  return evalCompiled(compiledExpression, context2, locals);
                },
                _compiledExpression: compiledExpression
              };
            };
            spelExpressionEvaluator.eval = function(expression, context2, locals) {
              return spelExpressionEvaluator.compile(expression).eval(context2, locals);
            };
            exports3.SpelExpressionEvaluator = spelExpressionEvaluator;
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.SpelExpressionParser = void 0;
            var _TokenKind = __webpack_require__(2);
            var _Tokenizer = __webpack_require__(6);
            var _BooleanLiteral = __webpack_require__(8);
            var _NumberLiteral = __webpack_require__(9);
            var _StringLiteral = __webpack_require__(10);
            var _NullLiteral = __webpack_require__(11);
            var _FunctionReference = __webpack_require__(12);
            var _MethodReference = __webpack_require__(13);
            var _PropertyReference = __webpack_require__(14);
            var _VariableReference = __webpack_require__(15);
            var _CompoundExpression = __webpack_require__(16);
            var _Indexer = __webpack_require__(17);
            var _Assign = __webpack_require__(18);
            var _OpEQ = __webpack_require__(19);
            var _OpNE = __webpack_require__(20);
            var _OpGE = __webpack_require__(21);
            var _OpGT = __webpack_require__(22);
            var _OpLE = __webpack_require__(23);
            var _OpLT = __webpack_require__(24);
            var _OpPlus = __webpack_require__(25);
            var _OpMinus = __webpack_require__(26);
            var _OpMultiply = __webpack_require__(27);
            var _OpDivide = __webpack_require__(28);
            var _OpModulus = __webpack_require__(29);
            var _OpPower = __webpack_require__(30);
            var _OpInc = __webpack_require__(31);
            var _OpDec = __webpack_require__(32);
            var _OpNot = __webpack_require__(33);
            var _OpAnd = __webpack_require__(34);
            var _OpOr = __webpack_require__(35);
            var _OpMatches = __webpack_require__(36);
            var _Ternary = __webpack_require__(37);
            var _Elvis = __webpack_require__(38);
            var _InlineList = __webpack_require__(39);
            var _InlineMap = __webpack_require__(40);
            var _Selection = __webpack_require__(41);
            var _Projection = __webpack_require__(42);
            var _OpInstanceof = __webpack_require__(43);
            var _OpBetween = __webpack_require__(44);
            var _TypeReference = __webpack_require__(45);
            var _BeanReference = __webpack_require__(46);
            var _Identifier = __webpack_require__(47);
            var _QualifiedIdentifier = __webpack_require__(48);
            var _ConstructorReference = __webpack_require__(49);
            exports3.SpelExpressionParser = function SpelExpressionParser() {
              var VALID_QUALIFIED_ID_PATTERN = new RegExp("[\\p{L}\\p{N}_$]+");
              var constructedNodes = [];
              var expressionString;
              var tokenStream;
              var tokenStreamLength;
              var tokenStreamPointer;
              function setConfiguration(config2) {
              }
              function parse2(expression, context2) {
                try {
                  expressionString = expression;
                  tokenStream = _Tokenizer.Tokenizer.tokenize(expression);
                  tokenStreamLength = tokenStream.length;
                  tokenStreamPointer = 0;
                  constructedNodes = [];
                  var ast = eatExpression();
                  if (moreTokens()) {
                    raiseInternalException(peekToken().startPos, "MORE_INPUT", nextToken().toString());
                  }
                  return ast;
                } catch (e) {
                  throw e.message;
                }
              }
              function eatExpression() {
                var expr = eatLogicalOrExpression();
                if (moreTokens()) {
                  var token2 = peekToken();
                  if (token2.getKind() === _TokenKind.TokenKind.ASSIGN) {
                    if (expr === null) {
                      expr = _NullLiteral.NullLiteral.create(toPosBounds(token2.startPos - 1, token2.endPos - 1));
                    }
                    nextToken();
                    var assignedValue = eatLogicalOrExpression();
                    return _Assign.Assign.create(toPosToken(token2), expr, assignedValue);
                  }
                  if (token2.getKind() === _TokenKind.TokenKind.ELVIS) {
                    if (expr === null) {
                      expr = _NullLiteral.NullLiteral.create(toPosBounds(token2.startPos - 1, token2.endPos - 2));
                    }
                    nextToken();
                    var valueIfNull = eatExpression();
                    if (valueIfNull === null) {
                      valueIfNull = _NullLiteral.NullLiteral.create(toPosBounds(token2.startPos + 1, token2.endPos + 1));
                    }
                    return _Elvis.Elvis.create(toPosToken(token2), expr, valueIfNull);
                  }
                  if (token2.getKind() === _TokenKind.TokenKind.QMARK) {
                    if (expr === null) {
                      expr = _NullLiteral.NullLiteral.create(toPosBounds(token2.startPos - 1, token2.endPos - 1));
                    }
                    nextToken();
                    var ifTrueExprValue = eatExpression();
                    eatToken(_TokenKind.TokenKind.COLON);
                    var ifFalseExprValue = eatExpression();
                    return _Ternary.Ternary.create(toPosToken(token2), expr, ifTrueExprValue, ifFalseExprValue);
                  }
                }
                return expr;
              }
              function eatLogicalOrExpression() {
                var expr = eatLogicalAndExpression();
                while (peekIdentifierToken("or") || peekTokenOne(_TokenKind.TokenKind.SYMBOLIC_OR)) {
                  var token2 = nextToken();
                  var rhExpr = eatLogicalAndExpression();
                  checkOperands(token2, expr, rhExpr);
                  expr = _OpOr.OpOr.create(toPosToken(token2), expr, rhExpr);
                }
                return expr;
              }
              function eatLogicalAndExpression() {
                var expr = eatRelationalExpression();
                while (peekIdentifierToken("and") || peekTokenOne(_TokenKind.TokenKind.SYMBOLIC_AND)) {
                  var token2 = nextToken();
                  var rhExpr = eatRelationalExpression();
                  checkOperands(token2, expr, rhExpr);
                  expr = _OpAnd.OpAnd.create(toPosToken(token2), expr, rhExpr);
                }
                return expr;
              }
              function eatRelationalExpression() {
                var expr = eatSumExpression();
                var relationalOperatorToken = maybeEatRelationalOperator();
                if (relationalOperatorToken !== null) {
                  var token2 = nextToken();
                  var rhExpr = eatSumExpression();
                  checkOperands(token2, expr, rhExpr);
                  var tk = relationalOperatorToken.kind;
                  if (relationalOperatorToken.isNumericRelationalOperator()) {
                    var pos = toPosToken(token2);
                    if (tk === _TokenKind.TokenKind.GT) {
                      return _OpGT.OpGT.create(pos, expr, rhExpr);
                    }
                    if (tk === _TokenKind.TokenKind.LT) {
                      return _OpLT.OpLT.create(pos, expr, rhExpr);
                    }
                    if (tk === _TokenKind.TokenKind.LE) {
                      return _OpLE.OpLE.create(pos, expr, rhExpr);
                    }
                    if (tk === _TokenKind.TokenKind.GE) {
                      return _OpGE.OpGE.create(pos, expr, rhExpr);
                    }
                    if (tk === _TokenKind.TokenKind.EQ) {
                      return _OpEQ.OpEQ.create(pos, expr, rhExpr);
                    }
                    return _OpNE.OpNE.create(pos, expr, rhExpr);
                  }
                  if (tk === _TokenKind.TokenKind.INSTANCEOF) {
                    return _OpInstanceof.OpInstanceof.create(toPosToken(token2), expr, rhExpr);
                  }
                  if (tk === _TokenKind.TokenKind.MATCHES) {
                    return _OpMatches.OpMatches.create(toPosToken(token2), expr, rhExpr);
                  }
                  return _OpBetween.OpBetween.create(toPosToken(token2), expr, rhExpr);
                }
                return expr;
              }
              function eatSumExpression() {
                var expr = eatProductExpression();
                while (peekTokenAny(_TokenKind.TokenKind.PLUS, _TokenKind.TokenKind.MINUS, _TokenKind.TokenKind.INC)) {
                  var token2 = nextToken();
                  var rhExpr = eatProductExpression();
                  checkRightOperand(token2, rhExpr);
                  if (token2.getKind() === _TokenKind.TokenKind.PLUS) {
                    expr = _OpPlus.OpPlus.create(toPosToken(token2), expr, rhExpr);
                  } else if (token2.getKind() === _TokenKind.TokenKind.MINUS) {
                    expr = _OpMinus.OpMinus.create(toPosToken(token2), expr, rhExpr);
                  }
                }
                return expr;
              }
              function eatProductExpression() {
                var expr = eatPowerIncDecExpression();
                while (peekTokenAny(_TokenKind.TokenKind.STAR, _TokenKind.TokenKind.DIV, _TokenKind.TokenKind.MOD)) {
                  var token2 = nextToken();
                  var rhExpr = eatPowerIncDecExpression();
                  checkOperands(token2, expr, rhExpr);
                  if (token2.getKind() === _TokenKind.TokenKind.STAR) {
                    expr = _OpMultiply.OpMultiply.create(toPosToken(token2), expr, rhExpr);
                  } else if (token2.getKind() === _TokenKind.TokenKind.DIV) {
                    expr = _OpDivide.OpDivide.create(toPosToken(token2), expr, rhExpr);
                  } else {
                    expr = _OpModulus.OpModulus.create(toPosToken(token2), expr, rhExpr);
                  }
                }
                return expr;
              }
              function eatPowerIncDecExpression() {
                var expr = eatUnaryExpression(), token2;
                if (peekTokenOne(_TokenKind.TokenKind.POWER)) {
                  token2 = nextToken();
                  var rhExpr = eatUnaryExpression();
                  checkRightOperand(token2, rhExpr);
                  return _OpPower.OpPower.create(toPosToken(token2), expr, rhExpr);
                }
                if (expr !== null && peekTokenAny(_TokenKind.TokenKind.INC, _TokenKind.TokenKind.DEC)) {
                  token2 = nextToken();
                  if (token2.getKind() === _TokenKind.TokenKind.INC) {
                    return _OpInc.OpInc.create(toPosToken(token2), true, expr);
                  }
                  return _OpDec.OpDec.create(toPosToken(token2), true, expr);
                }
                return expr;
              }
              function eatUnaryExpression() {
                var token2, expr;
                if (peekTokenAny(_TokenKind.TokenKind.PLUS, _TokenKind.TokenKind.MINUS, _TokenKind.TokenKind.NOT)) {
                  token2 = nextToken();
                  expr = eatUnaryExpression();
                  if (token2.getKind() === _TokenKind.TokenKind.NOT) {
                    return _OpNot.OpNot.create(toPosToken(token2), expr);
                  }
                  if (token2.getKind() === _TokenKind.TokenKind.PLUS) {
                    return _OpPlus.OpPlus.create(toPosToken(token2), expr);
                  }
                  return _OpMinus.OpMinus.create(toPosToken(token2), expr);
                }
                if (peekTokenAny(_TokenKind.TokenKind.INC, _TokenKind.TokenKind.DEC)) {
                  token2 = nextToken();
                  expr = eatUnaryExpression();
                  if (token2.getKind() === _TokenKind.TokenKind.INC) {
                    return _OpInc.OpInc.create(toPosToken(token2), false, expr);
                  }
                  return _OpDec.OpDec.create(toPosToken(token2), false, expr);
                }
                return eatPrimaryExpression();
              }
              function eatPrimaryExpression() {
                var nodes = [];
                var start2 = eatStartNode();
                nodes.push(start2);
                while (maybeEatNode()) {
                  nodes.push(pop());
                }
                if (nodes.length === 1) {
                  return nodes[0];
                }
                return _CompoundExpression.CompoundExpression.create(toPosBounds(start2.getStartPosition(), nodes[nodes.length - 1].getEndPosition()), nodes);
              }
              function maybeEatNode() {
                var expr = null;
                if (peekTokenAny(_TokenKind.TokenKind.DOT, _TokenKind.TokenKind.SAFE_NAVI)) {
                  expr = eatDottedNode();
                } else {
                  expr = maybeEatNonDottedNode();
                }
                if (expr === null) {
                  return false;
                } else {
                  push(expr);
                  return true;
                }
              }
              function maybeEatNonDottedNode() {
                if (peekTokenOne(_TokenKind.TokenKind.LSQUARE)) {
                  if (maybeEatIndexer()) {
                    return pop();
                  }
                }
                return null;
              }
              function eatDottedNode() {
                var token2 = nextToken();
                var nullSafeNavigation = token2.getKind() === _TokenKind.TokenKind.SAFE_NAVI;
                if (maybeEatMethodOrProperty(nullSafeNavigation) || maybeEatFunctionOrVar() || maybeEatProjection(nullSafeNavigation) || maybeEatSelection(nullSafeNavigation)) {
                  return pop();
                }
                if (peekToken() === null) {
                  raiseInternalException(token2.startPos, "OOD");
                } else {
                  raiseInternalException(token2.startPos, "UNEXPECTED_DATA_AFTER_DOT", toString2(peekToken()));
                }
                return null;
              }
              function maybeEatFunctionOrVar() {
                if (!peekTokenOne(_TokenKind.TokenKind.HASH)) {
                  return false;
                }
                var token2 = nextToken();
                var functionOrVariableName = eatToken(_TokenKind.TokenKind.IDENTIFIER);
                var args = maybeEatMethodArgs();
                if (args === null) {
                  push(_VariableReference.VariableReference.create(functionOrVariableName.data, toPosBounds(token2.startPos, functionOrVariableName.endPos)));
                  return true;
                }
                push(_FunctionReference.FunctionReference.create(functionOrVariableName.data, toPosBounds(token2.startPos, functionOrVariableName.endPos), args));
                return true;
              }
              function maybeEatMethodArgs() {
                if (!peekTokenOne(_TokenKind.TokenKind.LPAREN)) {
                  return null;
                }
                var args = [];
                consumeArguments(args);
                eatToken(_TokenKind.TokenKind.RPAREN);
                return args;
              }
              function eatConstructorArgs(accumulatedArguments) {
                if (!peekTokenOne(_TokenKind.TokenKind.LPAREN)) {
                  raiseInternalException(toPosToken(peekToken()), "MISSING_CONSTRUCTOR_ARGS");
                }
                consumeArguments(accumulatedArguments);
                eatToken(_TokenKind.TokenKind.RPAREN);
              }
              function consumeArguments(accumulatedArguments) {
                var pos = peekToken().startPos;
                var next2;
                do {
                  nextToken();
                  var token2 = peekToken();
                  if (token2 === null) {
                    raiseInternalException(pos, "RUN_OUT_OF_ARGUMENTS");
                  }
                  if (token2.getKind() !== _TokenKind.TokenKind.RPAREN) {
                    accumulatedArguments.push(eatExpression());
                  }
                  next2 = peekToken();
                } while (next2 !== null && next2.kind === _TokenKind.TokenKind.COMMA);
                if (next2 === null) {
                  raiseInternalException(pos, "RUN_OUT_OF_ARGUMENTS");
                }
              }
              function eatStartNode() {
                if (maybeEatLiteral()) {
                  return pop();
                } else if (maybeEatParenExpression()) {
                  return pop();
                } else if (maybeEatTypeReference() || maybeEatNullReference() || maybeEatConstructorReference() || maybeEatMethodOrProperty(false) || maybeEatFunctionOrVar()) {
                  return pop();
                } else if (maybeEatBeanReference()) {
                  return pop();
                } else if (maybeEatProjection(false) || maybeEatSelection(false) || maybeEatIndexer()) {
                  return pop();
                } else if (maybeEatInlineListOrMap()) {
                  return pop();
                } else {
                  return null;
                }
              }
              function maybeEatBeanReference() {
                if (peekTokenOne(_TokenKind.TokenKind.BEAN_REF)) {
                  var beanRefToken = nextToken();
                  var beanNameToken = null;
                  var beanName = null;
                  if (peekTokenOne(_TokenKind.TokenKind.IDENTIFIER)) {
                    beanNameToken = eatToken(_TokenKind.TokenKind.IDENTIFIER);
                    beanName = beanNameToken.data;
                  } else if (peekTokenOne(_TokenKind.TokenKind.LITERAL_STRING)) {
                    beanNameToken = eatToken(_TokenKind.TokenKind.LITERAL_STRING);
                    beanName = beanNameToken.stringValue();
                    beanName = beanName.substring(1, beanName.length() - 1);
                  } else {
                    raiseInternalException(beanRefToken.startPos, "INVALID_BEAN_REFERENCE");
                  }
                  var beanReference = _BeanReference.BeanReference.create(toPosToken(beanNameToken), beanName);
                  push(beanReference);
                  return true;
                }
                return false;
              }
              function maybeEatTypeReference() {
                if (peekTokenOne(_TokenKind.TokenKind.IDENTIFIER)) {
                  var typeName = peekToken();
                  if (typeName.stringValue() !== "T") {
                    return false;
                  }
                  var token2 = nextToken();
                  if (peekTokenOne(_TokenKind.TokenKind.RSQUARE)) {
                    push(_PropertyReference.PropertyReference.create(token2.stringValue(), toPosToken(token2)));
                    return true;
                  }
                  eatToken(_TokenKind.TokenKind.LPAREN);
                  var node2 = eatPossiblyQualifiedId();
                  var dims = 0;
                  while (peekTokenConsumeIfMatched(_TokenKind.TokenKind.LSQUARE, true)) {
                    eatToken(_TokenKind.TokenKind.RSQUARE);
                    dims++;
                  }
                  eatToken(_TokenKind.TokenKind.RPAREN);
                  push(_TypeReference.TypeReference.create(toPosToken(typeName), node2, dims));
                  return true;
                }
                return false;
              }
              function maybeEatNullReference() {
                if (peekTokenOne(_TokenKind.TokenKind.IDENTIFIER)) {
                  var nullToken = peekToken();
                  if (nullToken.stringValue().toLowerCase() !== "null") {
                    return false;
                  }
                  nextToken();
                  push(_NullLiteral.NullLiteral.create(toPosToken(nullToken)));
                  return true;
                }
                return false;
              }
              function maybeEatProjection(nullSafeNavigation) {
                var token2 = peekToken();
                if (!peekTokenConsumeIfMatched(_TokenKind.TokenKind.PROJECT, true)) {
                  return false;
                }
                var expr = eatExpression();
                eatToken(_TokenKind.TokenKind.RSQUARE);
                push(_Projection.Projection.create(nullSafeNavigation, toPosToken(token2), expr));
                return true;
              }
              function maybeEatInlineListOrMap() {
                var token2 = peekToken(), listElements = [];
                if (!peekTokenConsumeIfMatched(_TokenKind.TokenKind.LCURLY, true)) {
                  return false;
                }
                var expr = null;
                var closingCurly = peekToken();
                if (peekTokenConsumeIfMatched(_TokenKind.TokenKind.RCURLY, true)) {
                  expr = _InlineList.InlineList.create(toPosBounds(token2.startPos, closingCurly.endPos));
                } else if (peekTokenConsumeIfMatched(_TokenKind.TokenKind.COLON, true)) {
                  closingCurly = eatToken(_TokenKind.TokenKind.RCURLY);
                  expr = _InlineMap.InlineMap.create(toPosBounds(token2.startPos, closingCurly.endPos));
                } else {
                  var firstExpression = eatExpression();
                  if (peekTokenOne(_TokenKind.TokenKind.RCURLY)) {
                    listElements.push(firstExpression);
                    closingCurly = eatToken(_TokenKind.TokenKind.RCURLY);
                    expr = _InlineList.InlineList.create(toPosBounds(token2.startPos, closingCurly.endPos), listElements);
                  } else if (peekTokenConsumeIfMatched(_TokenKind.TokenKind.COMMA, true)) {
                    listElements.push(firstExpression);
                    do {
                      listElements.push(eatExpression());
                    } while (peekTokenConsumeIfMatched(_TokenKind.TokenKind.COMMA, true));
                    closingCurly = eatToken(_TokenKind.TokenKind.RCURLY);
                    expr = _InlineList.InlineList.create(toPosToken(token2.startPos, closingCurly.endPos), listElements);
                  } else if (peekTokenConsumeIfMatched(_TokenKind.TokenKind.COLON, true)) {
                    var mapElements = [];
                    mapElements.push(firstExpression);
                    mapElements.push(eatExpression());
                    while (peekTokenConsumeIfMatched(_TokenKind.TokenKind.COMMA, true)) {
                      mapElements.push(eatExpression());
                      eatToken(_TokenKind.TokenKind.COLON);
                      mapElements.push(eatExpression());
                    }
                    closingCurly = eatToken(_TokenKind.TokenKind.RCURLY);
                    expr = _InlineMap.InlineMap.create(toPosBounds(token2.startPos, closingCurly.endPos), mapElements);
                  } else {
                    raiseInternalException(token2.startPos, "OOD");
                  }
                }
                push(expr);
                return true;
              }
              function maybeEatIndexer() {
                var token2 = peekToken();
                if (!peekTokenConsumeIfMatched(_TokenKind.TokenKind.LSQUARE, true)) {
                  return false;
                }
                var expr = eatExpression();
                eatToken(_TokenKind.TokenKind.RSQUARE);
                push(_Indexer.Indexer.create(toPosToken(token2), expr));
                return true;
              }
              function maybeEatSelection(nullSafeNavigation) {
                var token2 = peekToken();
                if (!peekSelectToken()) {
                  return false;
                }
                nextToken();
                var expr = eatExpression();
                if (expr === null) {
                  raiseInternalException(toPosToken(token2), "MISSING_SELECTION_EXPRESSION");
                }
                eatToken(_TokenKind.TokenKind.RSQUARE);
                if (token2.getKind() === _TokenKind.TokenKind.SELECT_FIRST) {
                  push(_Selection.Selection.create(nullSafeNavigation, _Selection.Selection.FIRST, toPosToken(token2), expr));
                } else if (token2.getKind() === _TokenKind.TokenKind.SELECT_LAST) {
                  push(_Selection.Selection.create(nullSafeNavigation, _Selection.Selection.LAST, toPosToken(token2), expr));
                } else {
                  push(_Selection.Selection.create(nullSafeNavigation, _Selection.Selection.ALL, toPosToken(token2), expr));
                }
                return true;
              }
              function eatPossiblyQualifiedId() {
                var qualifiedIdPieces = [];
                var node2 = peekToken();
                while (isValidQualifiedId(node2)) {
                  nextToken();
                  if (node2.kind !== _TokenKind.TokenKind.DOT) {
                    qualifiedIdPieces.push(_Identifier.Identifier.create(node2.stringValue(), toPosToken(node2)));
                  }
                  node2 = peekToken();
                }
                if (!qualifiedIdPieces.length) {
                  if (node2 === null) {
                    raiseInternalException(expressionString.length(), "OOD");
                  }
                  raiseInternalException(node2.startPos, "NOT_EXPECTED_TOKEN", "qualified ID", node2.getKind().toString().toLowerCase());
                }
                var pos = toPosBounds(qualifiedIdPieces[0].getStartPosition(), qualifiedIdPieces[qualifiedIdPieces.length - 1].getEndPosition());
                return _QualifiedIdentifier.QualifiedIdentifier.create(pos, qualifiedIdPieces);
              }
              function isValidQualifiedId(node2) {
                if (node2 === null || node2.kind === _TokenKind.TokenKind.LITERAL_STRING) {
                  return false;
                }
                if (node2.kind === _TokenKind.TokenKind.DOT || node2.kind === _TokenKind.TokenKind.IDENTIFIER) {
                  return true;
                }
                var value2 = node2.stringValue();
                return value2 && value2.length && VALID_QUALIFIED_ID_PATTERN.test(value2);
              }
              function maybeEatMethodOrProperty(nullSafeNavigation) {
                if (peekTokenOne(_TokenKind.TokenKind.IDENTIFIER)) {
                  var methodOrPropertyName = nextToken();
                  var args = maybeEatMethodArgs();
                  if (args === null) {
                    push(_PropertyReference.PropertyReference.create(nullSafeNavigation, methodOrPropertyName.stringValue(), toPosToken(methodOrPropertyName)));
                    return true;
                  }
                  push(_MethodReference.MethodReference.create(nullSafeNavigation, methodOrPropertyName.stringValue(), toPosToken(methodOrPropertyName), args));
                  return true;
                }
                return false;
              }
              function maybeEatConstructorReference() {
                if (peekIdentifierToken("new")) {
                  var newToken = nextToken();
                  if (peekTokenOne(_TokenKind.TokenKind.RSQUARE)) {
                    push(_PropertyReference.PropertyReference.create(newToken.stringValue(), toPosToken(newToken)));
                    return true;
                  }
                  var possiblyQualifiedConstructorName = eatPossiblyQualifiedId();
                  var nodes = [];
                  nodes.push(possiblyQualifiedConstructorName);
                  if (peekTokenOne(_TokenKind.TokenKind.LSQUARE)) {
                    var dimensions = [];
                    while (peekTokenConsumeIfMatched(_TokenKind.TokenKind.LSQUARE, true)) {
                      if (!peekTokenOne(_TokenKind.TokenKind.RSQUARE)) {
                        dimensions.push(eatExpression());
                      } else {
                        dimensions.push(null);
                      }
                      eatToken(_TokenKind.TokenKind.RSQUARE);
                    }
                    if (maybeEatInlineListOrMap()) {
                      nodes.push(pop());
                    }
                    push(_ConstructorReference.ConstructorReference.create(toPosToken(newToken), dimensions, nodes));
                  } else {
                    eatConstructorArgs(nodes);
                    push(_ConstructorReference.ConstructorReference.create(toPosToken(newToken), nodes));
                  }
                  return true;
                }
                return false;
              }
              function push(newNode) {
                constructedNodes.push(newNode);
              }
              function pop() {
                return constructedNodes.pop();
              }
              function maybeEatLiteral() {
                var token2 = peekToken();
                if (token2 === null) {
                  return false;
                }
                if (token2.getKind() === _TokenKind.TokenKind.LITERAL_INT || token2.getKind() === _TokenKind.TokenKind.LITERAL_LONG) {
                  push(_NumberLiteral.NumberLiteral.create(parseInt(token2.stringValue(), 10), toPosToken(token2)));
                } else if (token2.getKind() === _TokenKind.TokenKind.LITERAL_REAL || token2.getKind() === _TokenKind.TokenKind.LITERAL_REAL_FLOAT) {
                  push(_NumberLiteral.NumberLiteral.create(parseFloat(token2.stringValue()), toPosToken(token2)));
                } else if (token2.getKind() === _TokenKind.TokenKind.LITERAL_HEXINT || token2.getKind() === _TokenKind.TokenKind.LITERAL_HEXLONG) {
                  push(_NumberLiteral.NumberLiteral.create(parseInt(token2.stringValue(), 16), toPosToken(token2)));
                } else if (peekIdentifierToken("true")) {
                  push(_BooleanLiteral.BooleanLiteral.create(true, toPosToken(token2)));
                } else if (peekIdentifierToken("false")) {
                  push(_BooleanLiteral.BooleanLiteral.create(false, toPosToken(token2)));
                } else if (token2.getKind() === _TokenKind.TokenKind.LITERAL_STRING) {
                  push(_StringLiteral.StringLiteral.create(token2.stringValue(), toPosToken(token2)));
                } else {
                  return false;
                }
                nextToken();
                return true;
              }
              function maybeEatParenExpression() {
                if (peekTokenOne(_TokenKind.TokenKind.LPAREN)) {
                  nextToken();
                  var expr = eatExpression();
                  eatToken(_TokenKind.TokenKind.RPAREN);
                  push(expr);
                  return true;
                } else {
                  return false;
                }
              }
              function maybeEatRelationalOperator() {
                var token2 = peekToken();
                if (token2 === null) {
                  return null;
                }
                if (token2.isNumericRelationalOperator()) {
                  return token2;
                }
                if (token2.isIdentifier()) {
                  var idString = token2.stringValue();
                  if (idString.toLowerCase() === "instanceof") {
                    return token2.asInstanceOfToken();
                  }
                  if (idString.toLowerCase() === "matches") {
                    return token2.asMatchesToken();
                  }
                  if (idString.toLowerCase() === "between") {
                    return token2.asBetweenToken();
                  }
                }
                return null;
              }
              function eatToken(expectedKind) {
                var token2 = nextToken();
                if (token2 === null) {
                  raiseInternalException(expressionString.length, "OOD");
                }
                if (token2.getKind() !== expectedKind) {
                  raiseInternalException(token2.startPos, "NOT_EXPECTED_TOKEN", expectedKind.toString().toLowerCase(), token2.getKind().toString().toLowerCase());
                }
                return token2;
              }
              function peekTokenOne(desiredTokenKind) {
                return peekTokenConsumeIfMatched(desiredTokenKind, false);
              }
              function peekTokenConsumeIfMatched(desiredTokenKind, consumeIfMatched) {
                if (!moreTokens()) {
                  return false;
                }
                var token2 = peekToken();
                if (token2.getKind() === desiredTokenKind) {
                  if (consumeIfMatched) {
                    tokenStreamPointer++;
                  }
                  return true;
                }
                if (desiredTokenKind === _TokenKind.TokenKind.IDENTIFIER) {
                  if (token2.getKind().ordinal() >= _TokenKind.TokenKind.DIV.ordinal() && token2.getKind().ordinal() <= _TokenKind.TokenKind.NOT.ordinal() && token2.data !== null) {
                    return true;
                  }
                }
                return false;
              }
              function peekTokenAny() {
                if (!moreTokens()) {
                  return false;
                }
                var token2 = peekToken();
                var args = Array.prototype.slice.call(arguments);
                for (var i = 0, l = args.length; i < l; i += 1) {
                  if (token2.getKind() === args[i]) {
                    return true;
                  }
                }
                return false;
              }
              function peekIdentifierToken(identifierString) {
                if (!moreTokens()) {
                  return false;
                }
                var token2 = peekToken();
                return token2.getKind() === _TokenKind.TokenKind.IDENTIFIER && token2.stringValue().toLowerCase() === identifierString.toLowerCase();
              }
              function peekSelectToken() {
                if (!moreTokens()) {
                  return false;
                }
                var token2 = peekToken();
                return token2.getKind() === _TokenKind.TokenKind.SELECT || token2.getKind() === _TokenKind.TokenKind.SELECT_FIRST || token2.getKind() === _TokenKind.TokenKind.SELECT_LAST;
              }
              function moreTokens() {
                return tokenStreamPointer < tokenStream.length;
              }
              function nextToken() {
                if (tokenStreamPointer >= tokenStreamLength) {
                  return null;
                }
                return tokenStream[tokenStreamPointer++];
              }
              function peekToken() {
                if (tokenStreamPointer >= tokenStreamLength) {
                  return null;
                }
                return tokenStream[tokenStreamPointer];
              }
              function raiseInternalException(pos, message, expected, actual) {
                if (expected) {
                  message += "\nExpected: " + expected;
                }
                if (actual) {
                  message += "\nActual: " + actual;
                }
                throw {
                  name: "InternalParseException",
                  message: "Error occurred while attempting to parse expression '" + expressionString + "' at position " + pos + ". Message: " + message
                };
              }
              function toString2(token2) {
                if (token2.getKind().hasPayload()) {
                  return token2.stringValue();
                }
                return token2.getKind().toString().toLowerCase();
              }
              function checkOperands(token2, left2, right2) {
                checkLeftOperand(token2, left2);
                checkRightOperand(token2, right2);
              }
              function checkLeftOperand(token2, operandExpression) {
                if (operandExpression === null) {
                  raiseInternalException(token2.startPos, "LEFT_OPERAND_PROBLEM");
                }
              }
              function checkRightOperand(token2, operandExpression) {
                if (operandExpression === null) {
                  raiseInternalException(token2.startPos, "RIGHT_OPERAND_PROBLEM");
                }
              }
              function toPosToken(token2) {
                return (token2.startPos << 16) + token2.endPos;
              }
              function toPosBounds(start2, end2) {
                return (start2 << 16) + end2;
              }
              return {
                setConfiguration,
                parse: parse2
              };
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.Tokenizer = void 0;
            var _Token = __webpack_require__(7);
            var _TokenKind = __webpack_require__(2);
            var ALTERNATIVE_OPERATOR_NAMES = ["DIV", "EQ", "GE", "GT", "LE", "LT", "MOD", "NE", "NOT"], FLAGS = [], IS_DIGIT = 1, IS_HEXDIGIT = 2, IS_ALPHA = 4;
            function init() {
              var ch;
              for (ch = "0".charCodeAt(0); ch <= "9".charCodeAt(0); ch += 1) {
                FLAGS[ch] |= IS_DIGIT | IS_HEXDIGIT;
              }
              for (ch = "A".charCodeAt(0); ch <= "F".charCodeAt(0); ch += 1) {
                FLAGS[ch] |= IS_HEXDIGIT;
              }
              for (ch = "a".charCodeAt(0); ch <= "f".charCodeAt(0); ch += 1) {
                FLAGS[ch] |= IS_HEXDIGIT;
              }
              for (ch = "A".charCodeAt(0); ch <= "Z".charCodeAt(0); ch += 1) {
                FLAGS[ch] |= IS_ALPHA;
              }
              for (ch = "a".charCodeAt(0); ch <= "z".charCodeAt(0); ch += 1) {
                FLAGS[ch] |= IS_ALPHA;
              }
            }
            init();
            function tokenize(inputData) {
              var expressionString = inputData, toProcess = inputData + "\0", max2 = toProcess.length, pos = 0, tokens2 = [];
              function process2() {
                var ch;
                while (pos < max2) {
                  ch = toProcess[pos];
                  if (isAlphabetic(ch)) {
                    lexIdentifier();
                  } else {
                    switch (ch) {
                      case "+":
                        if (isTwoCharToken(_TokenKind.TokenKind.INC)) {
                          pushPairToken(_TokenKind.TokenKind.INC);
                        } else {
                          pushCharToken(_TokenKind.TokenKind.PLUS);
                        }
                        break;
                      case "_":
                        lexIdentifier();
                        break;
                      case "-":
                        if (isTwoCharToken(_TokenKind.TokenKind.DEC)) {
                          pushPairToken(_TokenKind.TokenKind.DEC);
                        } else {
                          pushCharToken(_TokenKind.TokenKind.MINUS);
                        }
                        break;
                      case ":":
                        pushCharToken(_TokenKind.TokenKind.COLON);
                        break;
                      case ".":
                        pushCharToken(_TokenKind.TokenKind.DOT);
                        break;
                      case ",":
                        pushCharToken(_TokenKind.TokenKind.COMMA);
                        break;
                      case "*":
                        pushCharToken(_TokenKind.TokenKind.STAR);
                        break;
                      case "/":
                        pushCharToken(_TokenKind.TokenKind.DIV);
                        break;
                      case "%":
                        pushCharToken(_TokenKind.TokenKind.MOD);
                        break;
                      case "(":
                        pushCharToken(_TokenKind.TokenKind.LPAREN);
                        break;
                      case ")":
                        pushCharToken(_TokenKind.TokenKind.RPAREN);
                        break;
                      case "[":
                        pushCharToken(_TokenKind.TokenKind.LSQUARE);
                        break;
                      case "#":
                        pushCharToken(_TokenKind.TokenKind.HASH);
                        break;
                      case "]":
                        pushCharToken(_TokenKind.TokenKind.RSQUARE);
                        break;
                      case "{":
                        pushCharToken(_TokenKind.TokenKind.LCURLY);
                        break;
                      case "}":
                        pushCharToken(_TokenKind.TokenKind.RCURLY);
                        break;
                      case "@":
                        pushCharToken(_TokenKind.TokenKind.BEAN_REF);
                        break;
                      case "^":
                        if (isTwoCharToken(_TokenKind.TokenKind.SELECT_FIRST)) {
                          pushPairToken(_TokenKind.TokenKind.SELECT_FIRST);
                        } else {
                          pushCharToken(_TokenKind.TokenKind.POWER);
                        }
                        break;
                      case "!":
                        if (isTwoCharToken(_TokenKind.TokenKind.NE)) {
                          pushPairToken(_TokenKind.TokenKind.NE);
                        } else if (isTwoCharToken(_TokenKind.TokenKind.PROJECT)) {
                          pushPairToken(_TokenKind.TokenKind.PROJECT);
                        } else {
                          pushCharToken(_TokenKind.TokenKind.NOT);
                        }
                        break;
                      case "=":
                        if (isTwoCharToken(_TokenKind.TokenKind.EQ)) {
                          pushPairToken(_TokenKind.TokenKind.EQ);
                        } else {
                          pushCharToken(_TokenKind.TokenKind.ASSIGN);
                        }
                        break;
                      case "&":
                        if (!isTwoCharToken(_TokenKind.TokenKind.SYMBOLIC_AND)) {
                          throw {
                            name: "SpelParseException",
                            message: "Missing character '&' in expression (" + expressionString + ") at position " + pos
                          };
                        }
                        pushPairToken(_TokenKind.TokenKind.SYMBOLIC_AND);
                        break;
                      case "|":
                        if (!isTwoCharToken(_TokenKind.TokenKind.SYMBOLIC_OR)) {
                          throw {
                            name: "SpelParseException",
                            message: "Missing character '|' in expression (" + expressionString + ") at position " + pos
                          };
                        }
                        pushPairToken(_TokenKind.TokenKind.SYMBOLIC_OR);
                        break;
                      case "?":
                        if (isTwoCharToken(_TokenKind.TokenKind.SELECT)) {
                          pushPairToken(_TokenKind.TokenKind.SELECT);
                        } else if (isTwoCharToken(_TokenKind.TokenKind.ELVIS)) {
                          pushPairToken(_TokenKind.TokenKind.ELVIS);
                        } else if (isTwoCharToken(_TokenKind.TokenKind.SAFE_NAVI)) {
                          pushPairToken(_TokenKind.TokenKind.SAFE_NAVI);
                        } else {
                          pushCharToken(_TokenKind.TokenKind.QMARK);
                        }
                        break;
                      case "$":
                        if (isTwoCharToken(_TokenKind.TokenKind.SELECT_LAST)) {
                          pushPairToken(_TokenKind.TokenKind.SELECT_LAST);
                        } else {
                          lexIdentifier();
                        }
                        break;
                      case ">":
                        if (isTwoCharToken(_TokenKind.TokenKind.GE)) {
                          pushPairToken(_TokenKind.TokenKind.GE);
                        } else {
                          pushCharToken(_TokenKind.TokenKind.GT);
                        }
                        break;
                      case "<":
                        if (isTwoCharToken(_TokenKind.TokenKind.LE)) {
                          pushPairToken(_TokenKind.TokenKind.LE);
                        } else {
                          pushCharToken(_TokenKind.TokenKind.LT);
                        }
                        break;
                      case "0":
                      case "1":
                      case "2":
                      case "3":
                      case "4":
                      case "5":
                      case "6":
                      case "7":
                      case "8":
                      case "9":
                        lexNumericLiteral(ch === "0");
                        break;
                      case " ":
                      case "	":
                      case "\r":
                      case "\n":
                        pos += 1;
                        break;
                      case "'":
                        lexQuotedStringLiteral();
                        break;
                      case '"':
                        lexDoubleQuotedStringLiteral();
                        break;
                      case "\0":
                        pos += 1;
                        break;
                      case "\\":
                        throw {
                          name: "SpelParseException",
                          message: "Unexpected escape character in expression (" + expressionString + ") at position " + pos
                        };
                      default:
                        throw {
                          name: "SpelParseException",
                          message: "Cannot handle character '" + ch + "' in expression (" + expressionString + ") at position " + pos
                        };
                    }
                  }
                }
              }
              function lexQuotedStringLiteral() {
                var start2 = pos, terminated = false, ch;
                while (!terminated) {
                  pos += 1;
                  ch = toProcess[pos];
                  if (ch === "'") {
                    if (toProcess[pos + 1] === "'") {
                      pos += 1;
                    } else {
                      terminated = true;
                    }
                  }
                  if (ch.charCodeAt(0) === 0) {
                    throw {
                      name: "SpelParseException",
                      message: "Non-terminating quoted string in expression (" + expressionString + ") at position " + pos
                    };
                  }
                }
                pos += 1;
                tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_STRING, subarray(start2, pos), start2, pos));
              }
              function lexDoubleQuotedStringLiteral() {
                var start2 = pos, terminated = false, ch;
                while (!terminated) {
                  pos += 1;
                  ch = toProcess[pos];
                  if (ch === '"') {
                    if (toProcess[pos + 1] === '"') {
                      pos += 1;
                    } else {
                      terminated = true;
                    }
                  }
                  if (ch.charCodeAt(0) === 0) {
                    throw {
                      name: "SpelParseException",
                      message: "Non-terminating double-quoted string in expression (" + expressionString + ") at position " + pos
                    };
                  }
                }
                pos += 1;
                tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_STRING, subarray(start2, pos), start2, pos));
              }
              function lexNumericLiteral(firstCharIsZero) {
                var isReal = false, start2 = pos, ch = toProcess[pos + 1], isHex = ch === "x" || ch === "X", dotpos, endOfNumber, possibleSign, isFloat;
                if (firstCharIsZero && isHex) {
                  pos = pos + 1;
                  do {
                    pos += 1;
                  } while (isHexadecimalDigit(toProcess[pos]));
                  if (isChar("L", "l")) {
                    pushHexIntToken(subarray(start2 + 2, pos), true, start2, pos);
                    pos += 1;
                  } else {
                    pushHexIntToken(subarray(start2 + 2, pos), false, start2, pos);
                  }
                  return;
                }
                do {
                  pos += 1;
                } while (isDigit(toProcess[pos]));
                ch = toProcess[pos];
                if (ch === ".") {
                  isReal = true;
                  dotpos = pos;
                  do {
                    pos += 1;
                  } while (isDigit(toProcess[pos]));
                  if (pos === dotpos + 1) {
                    pos = dotpos;
                    pushIntToken(subarray(start2, pos), false, start2, pos);
                    return;
                  }
                }
                endOfNumber = pos;
                if (isChar("L", "l")) {
                  if (isReal) {
                    throw {
                      name: "SpelParseException",
                      message: "Real cannot be long in expression (" + expressionString + ") at position " + pos
                    };
                  }
                  pushIntToken(subarray(start2, endOfNumber), true, start2, endOfNumber);
                  pos += 1;
                } else if (isExponentChar(toProcess[pos])) {
                  isReal = true;
                  pos += 1;
                  possibleSign = toProcess[pos];
                  if (isSign(possibleSign)) {
                    pos += 1;
                  }
                  do {
                    pos += 1;
                  } while (isDigit(toProcess[pos]));
                  isFloat = false;
                  if (isFloatSuffix(toProcess[pos])) {
                    isFloat = true;
                    pos += 1;
                    endOfNumber = pos;
                  } else if (isDoubleSuffix(toProcess[pos])) {
                    pos += 1;
                    endOfNumber = pos;
                  }
                  pushRealToken(subarray(start2, pos), isFloat, start2, pos);
                } else {
                  ch = toProcess[pos];
                  isFloat = false;
                  if (isFloatSuffix(ch)) {
                    isReal = true;
                    isFloat = true;
                    pos += 1;
                    endOfNumber = pos;
                  } else if (isDoubleSuffix(ch)) {
                    isReal = true;
                    pos += 1;
                    endOfNumber = pos;
                  }
                  if (isReal) {
                    pushRealToken(subarray(start2, endOfNumber), isFloat, start2, endOfNumber);
                  } else {
                    pushIntToken(subarray(start2, endOfNumber), false, start2, endOfNumber);
                  }
                }
              }
              function lexIdentifier() {
                var start2 = pos, substring, asString, idx;
                do {
                  pos += 1;
                } while (isIdentifier(toProcess[pos]));
                substring = subarray(start2, pos);
                if (pos - start2 === 2 || pos - start2 === 3) {
                  asString = substring.toUpperCase();
                  idx = ALTERNATIVE_OPERATOR_NAMES.indexOf(asString);
                  if (idx >= 0) {
                    pushOneCharOrTwoCharToken(_TokenKind.TokenKind.valueOf(asString), start2, substring);
                    return;
                  }
                }
                tokens2.push(new _Token.Token(_TokenKind.TokenKind.IDENTIFIER, substring.replace("\0", ""), start2, pos));
              }
              function pushIntToken(data, isLong, start2, end2) {
                if (isLong) {
                  tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_LONG, data, start2, end2));
                } else {
                  tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_INT, data, start2, end2));
                }
              }
              function pushHexIntToken(data, isLong, start2, end2) {
                if (data.length === 0) {
                  if (isLong) {
                    throw {
                      name: "SpelParseException",
                      message: "Not a long in expression (" + expressionString + ") at position " + pos
                    };
                  } else {
                    throw {
                      name: "SpelParseException",
                      message: "Not an int in expression (" + expressionString + ") at position " + pos
                    };
                  }
                }
                if (isLong) {
                  tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_HEXLONG, data, start2, end2));
                } else {
                  tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_HEXINT, data, start2, end2));
                }
              }
              function pushRealToken(data, isFloat, start2, end2) {
                if (isFloat) {
                  tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_REAL_FLOAT, data, start2, end2));
                } else {
                  tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_REAL, data, start2, end2));
                }
              }
              function subarray(start2, end2) {
                return toProcess.substring(start2, end2);
              }
              function isTwoCharToken(kind) {
                if (kind.tokenChars.length === 2 && toProcess[pos] === kind.tokenChars[0]) {
                  return toProcess[pos + 1] === kind.tokenChars[1];
                }
                return false;
              }
              function pushCharToken(kind) {
                tokens2.push(new _Token.Token(kind, null, pos, pos + 1));
                pos += 1;
              }
              function pushPairToken(kind) {
                tokens2.push(new _Token.Token(kind, null, pos, pos + 2));
                pos += 2;
              }
              function pushOneCharOrTwoCharToken(kind, pos2, data) {
                tokens2.push(new _Token.Token(kind, data, pos2, pos2 + kind.getLength()));
              }
              function isIdentifier(ch) {
                return isAlphabetic(ch) || isDigit(ch) || ch === "_" || ch === "$";
              }
              function isChar(a, b) {
                var ch = toProcess[pos];
                return ch === a || ch === b;
              }
              function isExponentChar(ch) {
                return ch === "e" || ch === "E";
              }
              function isFloatSuffix(ch) {
                return ch === "f" || ch === "F";
              }
              function isDoubleSuffix(ch) {
                return ch === "d" || ch === "D";
              }
              function isSign(ch) {
                return ch === "+" || ch === "-";
              }
              function isDigit(ch) {
                if (ch.charCodeAt(0) > 255) {
                  return false;
                }
                return (FLAGS[ch.charCodeAt(0)] & IS_DIGIT) !== 0;
              }
              function isAlphabetic(ch) {
                if (ch.charCodeAt(0) > 255) {
                  return false;
                }
                return (FLAGS[ch.charCodeAt(0)] & IS_ALPHA) !== 0;
              }
              function isHexadecimalDigit(ch) {
                if (ch.charCodeAt(0) > 255) {
                  return false;
                }
                return (FLAGS[ch.charCodeAt(0)] & IS_HEXDIGIT) !== 0;
              }
              process2();
              return tokens2;
            }
            exports3.Tokenizer = {
              tokenize
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.Token = void 0;
            var _TokenKind = __webpack_require__(2);
            function Token(tokenKind, tokenData, startPos, endPos) {
              this.kind = tokenKind;
              this.startPos = startPos;
              this.endPos = endPos;
              if (tokenData) {
                this.data = tokenData;
              }
            }
            Token.prototype.getKind = function() {
              return this.kind;
            };
            Token.prototype.toString = function() {
              var s = "[";
              s += this.kind.toString();
              if (this.kind.hasPayload()) {
                s += ":" + this.data;
              }
              s += "]";
              s += "(" + this.startPos + "," + this.endPos + ")";
              return s;
            };
            Token.prototype.isIdentifier = function() {
              return this.kind === _TokenKind.TokenKind.IDENTIFIER;
            };
            Token.prototype.isNumericRelationalOperator = function() {
              return this.kind === _TokenKind.TokenKind.GT || this.kind === _TokenKind.TokenKind.GE || this.kind === _TokenKind.TokenKind.LT || this.kind === _TokenKind.TokenKind.LE || this.kind === _TokenKind.TokenKind.EQ || this.kind === _TokenKind.TokenKind.NE;
            };
            Token.prototype.stringValue = function() {
              return this.data;
            };
            Token.prototype.asInstanceOfToken = function() {
              return new Token(_TokenKind.TokenKind.INSTANCEOF, this.startPos, this.endPos);
            };
            Token.prototype.asMatchesToken = function() {
              return new Token(_TokenKind.TokenKind.MATCHES, this.startPos, this.endPos);
            };
            Token.prototype.asBetweenToken = function() {
              return new Token(_TokenKind.TokenKind.BETWEEN, this.startPos, this.endPos);
            };
            Token.prototype.getStartPosition = function() {
              return this.startPos;
            };
            Token.prototype.getEndPosition = function() {
              return this.endPos;
            };
            exports3.Token = Token;
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.BooleanLiteral = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(value2, position2) {
              var node2 = _SpelNode.SpelNode.create("boolean", position2);
              node2.getValue = function() {
                return value2;
              };
              node2.setValue = function(newValue) {
                return value2 = newValue;
              };
              return node2;
            }
            exports3.BooleanLiteral = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.NumberLiteral = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(value2, position2) {
              var node2 = _SpelNode.SpelNode.create("number", position2);
              node2.getValue = function() {
                return value2;
              };
              node2.setValue = function(newValue) {
                return value2 = newValue;
              };
              return node2;
            }
            exports3.NumberLiteral = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.StringLiteral = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(value2, position2) {
              var node2 = _SpelNode.SpelNode.create("string", position2);
              function stripQuotes(value3) {
                if (value3[0] === "'" && value3[value3.length - 1] === "'" || value3[0] === '"' && value3[value3.length - 1] === '"') {
                  value3 = value3.substring(1, value3.length - 1);
                }
                return value3.replace(/''/g, "'").replace(/""/g, '"');
              }
              value2 = stripQuotes(value2);
              node2.getValue = function() {
                return value2;
              };
              node2.setValue = function(newValue) {
                return value2 = newValue;
              };
              return node2;
            }
            exports3.StringLiteral = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.NullLiteral = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(value2, position2) {
              var node2 = _SpelNode.SpelNode.create("null", position2);
              node2.getValue = function() {
                return null;
              };
              return node2;
            }
            exports3.NullLiteral = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.FunctionReference = void 0;
            var _SpelNode = __webpack_require__(0);
            var _Stack2 = __webpack_require__(1);
            function createNode(functionName, position2, args) {
              var node2 = _SpelNode.SpelNode.create("function", position2);
              node2.getRaw = function() {
                return {
                  functionName,
                  args
                };
              };
              node2.getValue = function(state) {
                var locals = state.locals || {}, context2 = state.rootContext, compiledArgs = [];
                args.forEach(function(arg) {
                  var currentActiveContext = state.activeContext;
                  state.activeContext = new _Stack2.Stack();
                  state.activeContext.push(state.rootContext);
                  compiledArgs.push(arg.getValue(state));
                  state.activeContext = currentActiveContext;
                });
                if (locals[functionName]) {
                  return locals[functionName].apply(context2, compiledArgs);
                }
                throw {
                  name: "FunctionDoesNotExistException",
                  message: "Function '" + functionName + "' does not exist."
                };
              };
              return node2;
            }
            exports3.FunctionReference = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.MethodReference = void 0;
            var _SpelNode = __webpack_require__(0);
            var _Stack2 = __webpack_require__(1);
            function createNode(nullSafeNavigation, methodName, position2, args) {
              var node2 = _SpelNode.SpelNode.create("method", position2);
              node2.getRaw = function() {
                return {
                  methodName,
                  args
                };
              };
              node2.getValue = function(state) {
                var context2 = state.activeContext.peek(), compiledArgs = [], method;
                if (!context2) {
                  throw {
                    name: "ContextDoesNotExistException",
                    message: "Attempting to look up property '" + methodName + "' for an undefined context."
                  };
                }
                function maybeHandleNullSafeNavigation(member) {
                  if (member === void 0 || member === null) {
                    if (nullSafeNavigation) {
                      return null;
                    }
                    throw {
                      name: "NullPointerException",
                      message: "Method " + methodName + " does not exist."
                    };
                  }
                  return member;
                }
                args.forEach(function(arg) {
                  var currentActiveContext = state.activeContext;
                  state.activeContext = new _Stack2.Stack();
                  state.activeContext.push(state.rootContext);
                  compiledArgs.push(arg.getValue(state));
                  state.activeContext = currentActiveContext;
                });
                if (methodName.substr(0, 3) === "get" && !context2[methodName]) {
                  return maybeHandleNullSafeNavigation(context2[methodName.charAt(3).toLowerCase() + methodName.substring(4)]);
                }
                if (methodName.substr(0, 3) === "set" && !context2[methodName]) {
                  return context2[methodName.charAt(3).toLowerCase() + methodName.substring(4)] = compiledArgs[0];
                }
                if (Array.isArray(context2)) {
                  if (methodName === "size") {
                    return context2.length;
                  }
                  if (methodName === "contains") {
                    return context2.includes(compiledArgs[0]);
                  }
                }
                method = maybeHandleNullSafeNavigation(context2[methodName]);
                if (method) {
                  return method.apply(context2, compiledArgs);
                }
                return null;
              };
              return node2;
            }
            exports3.MethodReference = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.PropertyReference = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(nullSafeNavigation, propertyName, position2) {
              var node2 = _SpelNode.SpelNode.create("property", position2);
              node2.getRaw = function() {
                return propertyName;
              };
              node2.getValue = function(state) {
                var context2 = state.activeContext.peek();
                if (!context2) {
                  if (nullSafeNavigation) {
                    return null;
                  }
                  throw {
                    name: "ContextDoesNotExistException",
                    message: "Attempting to look up property '" + propertyName + "' for an undefined context."
                  };
                }
                if (context2[propertyName] === void 0 || context2[propertyName] === null) {
                  if (nullSafeNavigation) {
                    return null;
                  }
                  if (propertyName === "size" && Array.isArray(context2)) {
                    return context2.length;
                  }
                  throw {
                    name: "NullPointerException",
                    message: "Property '" + propertyName + "' does not exist."
                  };
                }
                return context2[propertyName];
              };
              node2.setValue = function(value2, state) {
                var context2 = state.activeContext.peek();
                if (!context2) {
                  throw {
                    name: "ContextDoesNotExistException",
                    message: "Attempting to assign property '" + propertyName + "' for an undefined context."
                  };
                }
                return context2[propertyName] = value2;
              };
              node2.getName = function() {
                return propertyName;
              };
              return node2;
            }
            exports3.PropertyReference = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.VariableReference = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(variableName, position2) {
              var node2 = _SpelNode.SpelNode.create("variable", position2);
              node2.getRaw = function() {
                return variableName;
              };
              node2.getValue = function(state) {
                var context2 = state.activeContext.peek(), locals = state.locals;
                if (!context2) {
                  throw {
                    name: "ContextDoesNotExistException",
                    message: "Attempting to look up variable '" + variableName + "' for an undefined context."
                  };
                }
                if (variableName === "this") {
                  return context2;
                }
                if (variableName === "root") {
                  return state.rootContext;
                }
                return locals[variableName];
              };
              node2.setValue = function(value2, state) {
                var locals = state.locals;
                return locals[variableName] = value2;
              };
              return node2;
            }
            exports3.VariableReference = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.CompoundExpression = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, expressionComponents) {
              var node2 = _SpelNode.SpelNode.create.apply(null, ["compound", position2].concat(expressionComponents));
              function buildContextStack(state) {
                var childrenCount = node2.getChildren().length, i;
                for (i = 0; i < childrenCount; i += 1) {
                  if (node2.getChildren()[i].getType() === "indexer") {
                    state.activeContext.push(state.activeContext.peek()[node2.getChildren()[i].getValue(state)]);
                  } else {
                    state.activeContext.push(node2.getChildren()[i].getValue(state));
                  }
                }
                return function unbuildContextStack() {
                  for (i = 0; i < childrenCount; i += 1) {
                    state.activeContext.pop();
                  }
                };
              }
              node2.getValue = function(state) {
                var context2 = state.activeContext.peek(), value2;
                if (!context2) {
                  throw {
                    name: "ContextDoesNotExistException",
                    message: "Attempting to evaluate compound expression with an undefined context."
                  };
                }
                var unbuildContextStack = buildContextStack(state);
                value2 = state.activeContext.peek();
                unbuildContextStack();
                return value2;
              };
              node2.setValue = function(value2, state) {
                var unbuildContextStack = buildContextStack(state), childCount = node2.getChildren().length;
                state.activeContext.pop();
                value2 = node2.getChildren()[childCount - 1].setValue(value2, state);
                state.activeContext.push(null);
                unbuildContextStack();
                return value2;
              };
              return node2;
            }
            exports3.CompoundExpression = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.Indexer = void 0;
            var _SpelNode = __webpack_require__(0);
            var _Stack2 = __webpack_require__(1);
            function createNode(position2, expressionComponents) {
              var node2 = _SpelNode.SpelNode.create.apply(null, ["indexer", position2].concat(expressionComponents));
              node2.getValue = function(state) {
                var activeContext = state.activeContext, context2, childrenCount = node2.getChildren().length, i, value2;
                state.activeContext = new _Stack2.Stack();
                state.activeContext.push(state.rootContext);
                context2 = state.activeContext.peek();
                if (!context2) {
                  throw {
                    name: "ContextDoesNotExistException",
                    message: "Attempting to evaluate compound expression with an undefined context."
                  };
                }
                for (i = 0; i < childrenCount; i += 1) {
                  state.activeContext.push(node2.getChildren()[i].getValue(state));
                }
                value2 = state.activeContext.peek();
                for (i = 0; i < childrenCount; i += 1) {
                  state.activeContext.pop();
                }
                state.activeContext = activeContext;
                return value2;
              };
              return node2;
            }
            exports3.Indexer = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.Assign = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, property2, assignedValue) {
              var node2 = _SpelNode.SpelNode.create("assign", position2, property2, assignedValue);
              node2.getValue = function(state) {
                var context2 = state.activeContext.peek();
                if (!context2) {
                  throw {
                    name: "ContextDoesNotExistException",
                    message: "Attempting to assign property '" + property2.getValue(state) + "' for an undefined context."
                  };
                }
                return property2.setValue(assignedValue.getValue(state), state);
              };
              return node2;
            }
            exports3.Assign = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpEQ = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, left2, right2) {
              var node2 = _SpelNode.SpelNode.create("op-eq", position2, left2, right2);
              node2.getValue = function(state) {
                return left2.getValue(state) === right2.getValue(state);
              };
              return node2;
            }
            exports3.OpEQ = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpNE = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, left2, right2) {
              var node2 = _SpelNode.SpelNode.create("op-ne", position2, left2, right2);
              node2.getValue = function(state) {
                return left2.getValue(state) !== right2.getValue(state);
              };
              return node2;
            }
            exports3.OpNE = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpGE = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, left2, right2) {
              var node2 = _SpelNode.SpelNode.create("op-ge", position2, left2, right2);
              node2.getValue = function(state) {
                return left2.getValue(state) >= right2.getValue(state);
              };
              return node2;
            }
            exports3.OpGE = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpGT = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, left2, right2) {
              var node2 = _SpelNode.SpelNode.create("op-gt", position2, left2, right2);
              node2.getValue = function(state) {
                return left2.getValue(state) > right2.getValue(state);
              };
              return node2;
            }
            exports3.OpGT = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpLE = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, left2, right2) {
              var node2 = _SpelNode.SpelNode.create("op-le", position2, left2, right2);
              node2.getValue = function(state) {
                return left2.getValue(state) <= right2.getValue(state);
              };
              return node2;
            }
            exports3.OpLE = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpLT = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, left2, right2) {
              var node2 = _SpelNode.SpelNode.create("op-lt", position2, left2, right2);
              node2.getValue = function(state) {
                return left2.getValue(state) < right2.getValue(state);
              };
              return node2;
            }
            exports3.OpLT = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpPlus = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, left2, right2) {
              var node2 = _SpelNode.SpelNode.create("op-plus", position2, left2, right2);
              node2.getValue = function(state) {
                if (!right2) {
                  return +left2.getValue(state);
                }
                return left2.getValue(state) + right2.getValue(state);
              };
              return node2;
            }
            exports3.OpPlus = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpMinus = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, left2, right2) {
              var node2 = _SpelNode.SpelNode.create("op-minus", position2, left2, right2);
              node2.getValue = function(state) {
                if (!right2) {
                  return -left2.getValue(state);
                }
                return left2.getValue(state) - right2.getValue(state);
              };
              return node2;
            }
            exports3.OpMinus = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpMultiply = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, left2, right2) {
              var node2 = _SpelNode.SpelNode.create("op-multiply", position2, left2, right2);
              node2.getValue = function(state) {
                var leftValue = left2.getValue(state), rightValue = right2.getValue(state);
                if (typeof leftValue === "number" && typeof rightValue === "number") {
                  return leftValue * rightValue;
                }
                if (typeof leftValue === "string" && typeof rightValue === "number") {
                  var s = "", i = 0;
                  for (; i < rightValue; i += 1) {
                    s += leftValue;
                  }
                  return s;
                }
                return null;
              };
              return node2;
            }
            exports3.OpMultiply = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpDivide = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, left2, right2) {
              var node2 = _SpelNode.SpelNode.create("op-divide", position2, left2, right2);
              node2.getValue = function(state) {
                return left2.getValue(state) / right2.getValue(state);
              };
              return node2;
            }
            exports3.OpDivide = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpModulus = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, left2, right2) {
              var node2 = _SpelNode.SpelNode.create("op-modulus", position2, left2, right2);
              node2.getValue = function(state) {
                return left2.getValue(state) % right2.getValue(state);
              };
              return node2;
            }
            exports3.OpModulus = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpPower = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, base, exp) {
              var node2 = _SpelNode.SpelNode.create("op-power", position2, base, exp);
              node2.getValue = function(state) {
                return Math.pow(base.getValue(state), exp.getValue(state));
              };
              return node2;
            }
            exports3.OpPower = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpInc = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, postfix, int) {
              var node2 = _SpelNode.SpelNode.create("op-inc", position2, int);
              node2.getValue = function(state) {
                var cur = int.getValue(state);
                int.setValue(cur + 1, state);
                if (postfix) {
                  return cur;
                }
                return cur + 1;
              };
              return node2;
            }
            exports3.OpInc = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpDec = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, postfix, int) {
              var node2 = _SpelNode.SpelNode.create("op-dec", position2, int);
              node2.getValue = function(state) {
                var cur = int.getValue(state);
                int.setValue(cur - 1, state);
                if (postfix) {
                  return cur;
                }
                return cur - 1;
              };
              return node2;
            }
            exports3.OpDec = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpNot = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, expr) {
              var node2 = _SpelNode.SpelNode.create("op-not", position2, expr);
              node2.getValue = function(state) {
                return !expr.getValue(state);
              };
              return node2;
            }
            exports3.OpNot = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpAnd = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, left2, right2) {
              var node2 = _SpelNode.SpelNode.create("op-and", position2, left2, right2);
              node2.getValue = function(state) {
                return !!left2.getValue(state) && !!right2.getValue(state);
              };
              return node2;
            }
            exports3.OpAnd = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpOr = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, left2, right2) {
              var node2 = _SpelNode.SpelNode.create("op-or", position2, left2, right2);
              node2.getValue = function(state) {
                return !!left2.getValue(state) || !!right2.getValue(state);
              };
              return node2;
            }
            exports3.OpOr = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpMatches = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, left2, right2) {
              var node2 = _SpelNode.SpelNode.create("matches", position2, left2, right2);
              node2.getValue = function(state) {
                var data = left2.getValue(state);
                var regexpString = right2.getValue(state);
                try {
                  var regexp = new RegExp(regexpString);
                  return !!regexp.exec(data);
                } catch (error) {
                  throw {
                    name: "EvaluationException",
                    message: error.toString()
                  };
                }
              };
              return node2;
            }
            exports3.OpMatches = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.Ternary = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, expression, ifTrue, ifFalse) {
              var node2 = _SpelNode.SpelNode.create("ternary", position2, expression, ifTrue, ifFalse);
              node2.getValue = function(state) {
                return expression.getValue(state) ? ifTrue.getValue(state) : ifFalse.getValue(state);
              };
              return node2;
            }
            exports3.Ternary = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.Elvis = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, expression, ifFalse) {
              var node2 = _SpelNode.SpelNode.create("elvis", position2, expression, ifFalse);
              node2.getValue = function(state) {
                return expression.getValue(state) !== null ? expression.getValue(state) : ifFalse.getValue(state);
              };
              return node2;
            }
            exports3.Elvis = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.InlineList = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, elements) {
              var node2 = _SpelNode.SpelNode.create("list", position2), list = [].concat(elements || []);
              node2.getRaw = function() {
                return list;
              };
              node2.getValue = function(state) {
                return list.map(function(element) {
                  return element.getValue(state);
                });
              };
              return node2;
            }
            exports3.InlineList = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.InlineMap = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, elements) {
              var node2 = _SpelNode.SpelNode.create("map", position2), mapPieces = [].concat(elements || []);
              node2.getValue = function(state) {
                var key = true, keyValue = null, map2 = {};
                mapPieces.forEach(function(piece) {
                  if (key) {
                    if (piece.getType() === "property") {
                      keyValue = piece.getName();
                    } else {
                      keyValue = piece.getValue(state);
                    }
                  } else {
                    map2[keyValue] = piece.getValue(state);
                  }
                  key = !key;
                });
                return map2;
              };
              return node2;
            }
            exports3.InlineMap = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.Selection = void 0;
            var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
              return typeof obj;
            } : function(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            var _SpelNode = __webpack_require__(0);
            function matches(element, expr, state) {
              var doesMatch = false;
              state.activeContext.push(element);
              doesMatch = expr.getValue(state);
              state.activeContext.pop();
              return doesMatch;
            }
            function selectFromArray(collection, whichElement, expr, state) {
              var newCollection = collection.filter(function(element) {
                return matches(element, expr, state);
              });
              switch (whichElement) {
                case "ALL":
                  return newCollection;
                case "FIRST":
                  return newCollection[0] || null;
                case "LAST":
                  if (newCollection.length) {
                    return newCollection[newCollection.length - 1];
                  }
                  return null;
              }
            }
            function selectFromMap(collection, whichElement, expr, state) {
              var newCollection = {}, entry, key, entries = [], returnValue = {};
              for (key in collection) {
                if (collection.hasOwnProperty(key)) {
                  entry = {
                    key,
                    value: collection[key]
                  };
                  if (matches(entry, expr, state)) {
                    entries.push(entry);
                  }
                }
              }
              switch (whichElement) {
                case "ALL":
                  entries.forEach(function(entry2) {
                    newCollection[entry2.key] = entry2.value;
                  });
                  return newCollection;
                case "FIRST":
                  if (entries.length) {
                    returnValue[entries[0].key] = entries[0].value;
                    return returnValue;
                  }
                  return null;
                case "LAST":
                  if (entries.length) {
                    returnValue[entries[entries.length - 1].key] = entries[entries.length - 1].value;
                    return returnValue;
                  }
                  return null;
              }
              entries.forEach(function(entry2) {
                newCollection[entry2.key] = entry2.value;
              });
            }
            function createNode(nullSafeNavigation, whichElement, position2, expr) {
              var node2 = _SpelNode.SpelNode.create("selection", position2, expr);
              node2.getValue = function(state) {
                var collection = state.activeContext.peek();
                if (collection) {
                  if (Array.isArray(collection)) {
                    return selectFromArray(collection, whichElement, expr, state);
                  } else if ((typeof collection === "undefined" ? "undefined" : _typeof2(collection)) === "object") {
                    return selectFromMap(collection, whichElement, expr, state);
                  }
                }
                return null;
              };
              return node2;
            }
            exports3.Selection = {
              create: createNode,
              FIRST: "FIRST",
              LAST: "LAST",
              ALL: "ALL"
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.Projection = void 0;
            var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
              return typeof obj;
            } : function(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            var _SpelNode = __webpack_require__(0);
            function projectCollection(collection, expr, state) {
              return collection.map(function(element) {
                var matches;
                state.activeContext.push(element);
                matches = expr.getValue(state);
                state.activeContext.pop();
                return matches;
              });
            }
            function createNode(nullSafeNavigation, position2, expr) {
              var node2 = _SpelNode.SpelNode.create("projection", position2, expr);
              node2.getValue = function(state) {
                var collection = state.activeContext.peek(), entries = [], key;
                if (Array.isArray(collection)) {
                  return projectCollection(collection, expr, state);
                } else if ((typeof collection === "undefined" ? "undefined" : _typeof2(collection)) === "object") {
                  for (key in collection) {
                    if (collection.hasOwnProperty(key)) {
                      entries.push(collection[key]);
                    }
                  }
                  return projectCollection(entries, expr, state);
                }
                return null;
              };
              return node2;
            }
            exports3.Projection = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpInstanceof = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, left2, right2) {
              var node2 = _SpelNode.SpelNode.create("instanceof", position2, left2, right2);
              node2.getValue = function(state) {
                throw {
                  name: "MethodNotImplementedException",
                  message: "OpInstanceOf: Not implemented"
                };
              };
              return node2;
            }
            exports3.OpInstanceof = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpBetween = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, left2, right2) {
              var node2 = _SpelNode.SpelNode.create("between", position2, left2, right2);
              node2.getValue = function(state) {
                throw {
                  name: "MethodNotImplementedException",
                  message: "OpBetween: Not implemented"
                };
              };
              return node2;
            }
            exports3.OpBetween = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.TypeReference = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, node2, _dims) {
              var node2 = _SpelNode.SpelNode.create("typeref", position2, node2);
              node2.getValue = function(state) {
                throw {
                  name: "MethodNotImplementedException",
                  message: "TypeReference: Not implemented"
                };
              };
              return node2;
            }
            exports3.TypeReference = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.BeanReference = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position2, beanName) {
              var node2 = _SpelNode.SpelNode.create("beanref", position2);
              node2.getValue = function(state) {
                throw {
                  name: "MethodNotImplementedException",
                  message: "BeanReference: Not implemented"
                };
              };
              return node2;
            }
            exports3.BeanReference = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.Identifier = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(identifierName, position2) {
              var node2 = _SpelNode.SpelNode.create("identifier", position2);
              node2.getRaw = function() {
                return identifierName;
              };
              node2.getValue = function(state) {
                throw {
                  name: "MethodNotImplementedException",
                  message: "Identifier: Not implemented"
                };
              };
              return node2;
            }
            exports3.Identifier = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.QualifiedIdentifier = void 0;
            var _SpelNode = __webpack_require__(0);
            function _toConsumableArray2(arr) {
              if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              } else {
                return Array.from(arr);
              }
            }
            function createNode(position2, pieces) {
              var node2 = _SpelNode.SpelNode.create.apply(_SpelNode.SpelNode, ["qualifiedidentifier", position2].concat(_toConsumableArray2(pieces)));
              node2.getRaw = function() {
                return pieces.map(function(p) {
                  return p.getRaw();
                });
              };
              node2.getValue = function(state) {
                throw {
                  name: "MethodNotImplementedException",
                  message: "QualifiedIdentifier: Not implemented"
                };
              };
              return node2;
            }
            exports3.QualifiedIdentifier = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.ConstructorReference = void 0;
            var _SpelNode = __webpack_require__(0);
            var _Stack2 = __webpack_require__(1);
            function _toConsumableArray2(arr) {
              if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              } else {
                return Array.from(arr);
              }
            }
            function _toArray2(arr) {
              return Array.isArray(arr) ? arr : Array.from(arr);
            }
            function createNode(position2, dimensions, nodes) {
              var isArray2 = nodes !== void 0;
              var dimension;
              if (isArray2) {
                dimension = dimensions.length && dimensions[0] && dimensions[0].getType() === "number" ? dimensions[0].getValue() : null;
              } else {
                nodes = dimensions;
                dimensions = void 0;
              }
              var _nodes = nodes, _nodes2 = _toArray2(_nodes);
              _nodes2[0];
              var args = _nodes2.slice(1);
              var node2 = _SpelNode.SpelNode.create.apply(_SpelNode.SpelNode, ["constructorref", position2].concat(_toConsumableArray2(nodes)));
              node2.getRaw = function() {
                return dimension;
              };
              node2.getValue = function(state) {
                if (isArray2 && args.length <= 1) {
                  var compiledArgs = [];
                  args.forEach(function(arg) {
                    var currentActiveContext = state.activeContext;
                    state.activeContext = new _Stack2.Stack();
                    state.activeContext.push(state.rootContext);
                    compiledArgs.push(arg.getValue(state));
                    state.activeContext = currentActiveContext;
                  });
                  if (args.length === 1) {
                    return compiledArgs[0];
                  } else {
                    return dimension ? new Array(dimension) : [];
                  }
                }
                throw {
                  name: "MethodNotImplementedException",
                  message: "ConstructorReference: Not implemented"
                };
              };
              return node2;
            }
            exports3.ConstructorReference = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            function create(authentication, principal) {
              var context2 = {};
              context2.authentication = authentication || {};
              context2.principal = principal || {};
              context2.hasRole = function(role) {
                var hasRole = false;
                if (!role) {
                  return false;
                }
                if (!context2.authentication && !Array.isArray(context2.authentication.authorities)) {
                  return false;
                }
                context2.authentication.authorities.forEach(function(grantedAuthority) {
                  if (grantedAuthority.authority.toLowerCase() === role.toLowerCase()) {
                    hasRole = true;
                  }
                });
                return hasRole;
              };
              context2.hasPermission = function() {
                var args = Array.prototype.slice.call(arguments);
                if (args.length === 1) {
                  return context2.hasRole(args[0]);
                }
              };
              return context2;
            }
            exports3.StandardContext = {
              create
            };
          }
        ]);
      });
    })(spel2js);
    function ownKeys$m(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$m(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$m(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$m(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var loadFromSpel = function loadFromSpel2(logicTree, config2) {
      return _loadFromSpel(logicTree, config2, true);
    };
    var _loadFromSpel = function _loadFromSpel2(spelStr, config2) {
      var returnErrors = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var meta = {
        errors: []
      };
      var extendedConfig = extendConfig$1(config2, void 0, false);
      var conv = buildConv(extendedConfig);
      var compiledExpression;
      var convertedObj;
      var jsTree = void 0;
      try {
        var compileRes = spel2js.exports.SpelExpressionEvaluator.compile(spelStr);
        compiledExpression = compileRes._compiledExpression;
      } catch (e) {
        meta.errors.push(e);
      }
      if (compiledExpression) {
        logger$1.debug("compiledExpression:", compiledExpression);
        convertedObj = convertCompiled(compiledExpression, meta);
        logger$1.debug("convertedObj:", convertedObj, meta);
        jsTree = convertToTree(convertedObj, conv, extendedConfig, meta);
        if (jsTree && jsTree.type != "group" && jsTree.type != "switch_group") {
          jsTree = wrapInDefaultConj(jsTree, extendedConfig, convertedObj["not"]);
        }
        logger$1.debug("jsTree:", jsTree);
      }
      var immTree = jsTree ? loadTree$1(jsTree) : void 0;
      if (returnErrors) {
        return [immTree, meta.errors];
      } else {
        if (meta.errors.length)
          console.warn("Errors while importing from SpEL:", meta.errors);
        return immTree;
      }
    };
    var convertCompiled = function convertCompiled2(expr, meta) {
      var parentExpr = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var type = expr.getType();
      var children = expr.getChildren().map(function(child) {
        return convertCompiled2(child, meta, expr);
      });
      if (type == "op-or" || type == "op-and") {
        children = children.reduce(function(acc, child) {
          var canFlatize = child.type == type && !child.not;
          var flat = canFlatize ? child.children : [child];
          return [].concat(_toConsumableArray(acc), _toConsumableArray(flat));
        }, []);
      }
      if (type == "op-not") {
        if (children.length != 1) {
          meta.errors.push("Operator NOT should have 1 child, but got ".concat(children.length, "}"));
        }
        return _objectSpread$m(_objectSpread$m({}, children[0]), {}, {
          not: !(children[0].not || false)
        });
      }
      if (type == "compound") {
        children = children.filter(function(child) {
          var isListFix = child.type == "selection" && child.children.length == 1 && child.children[0].type == "boolean" && child.children[0].val == true;
          return !isListFix;
        });
        var selection = children.find(function(child) {
          return child.type == "selection";
        });
        if (selection && selection.children.length != 1) {
          meta.errors.push("Selection should have 1 child, but got ".concat(selection.children.length));
        }
        var filter = selection ? selection.children[0] : null;
        var lastChild = children[children.length - 1];
        var isSize = lastChild.type == "method" && lastChild.val.methodName == "size" || lastChild.type == "!func" && lastChild.methodName == "size";
        var isLength2 = lastChild.type == "property" && lastChild.val == "length";
        var sourceParts = children.filter(function(child) {
          return child !== selection && child !== lastChild;
        });
        var source = {
          type: "compound",
          children: sourceParts
        };
        if (isSize || isLength2) {
          return {
            type: "!aggr",
            filter,
            source
          };
        }
        children = children.filter(function(child) {
          var isThis = child.type == "variable" && child.val == "this";
          var isRoot = child.type == "variable" && child.val == "root";
          return !(isThis || isRoot);
        });
        children = children.map(function(child) {
          if (child.type == "indexer" && child.children.length == 1) {
            return {
              type: "indexer",
              val: child.children[0].val,
              itype: child.children[0].type
            };
          } else {
            return child;
          }
        });
        if (lastChild.type == "method") {
          var obj = children.filter(function(child) {
            return child !== lastChild;
          });
          return {
            type: "!func",
            obj,
            methodName: lastChild.val.methodName,
            args: lastChild.val.args
          };
        }
        if (lastChild.type == "!func") {
          var _obj = children.filter(function(child) {
            return child !== lastChild;
          });
          return _objectSpread$m(_objectSpread$m({}, lastChild), {}, {
            obj: _obj
          });
        }
      }
      var val;
      try {
        if (expr.getRaw) {
          val = expr.getRaw();
        } else if (expr.getValue.length == 0) {
          val = expr.getValue();
        }
      } catch (e) {
        logger$1.error("[spel2js] Error in getValue()", e);
      }
      if (type == "ternary") {
        val = flatizeTernary(children);
      }
      if (_typeof$1(val) === "object" && val !== null) {
        if (val.methodName || val.functionName) {
          val.args = val.args.map(function(child) {
            return convertCompiled2(child, meta, expr);
          });
        }
      }
      if (type == "list") {
        val = val.map(function(item) {
          return convertCompiled2(item, meta, expr);
        });
        if (!parentExpr && val.length == 1) {
          return val[0];
        }
      }
      if (type == "constructorref") {
        var qid = children.find(function(child) {
          return child.type == "qualifiedidentifier";
        });
        var cls = qid === null || qid === void 0 ? void 0 : qid.val;
        if (!cls) {
          meta.errors.push("Can't find qualifiedidentifier in constructorref children: ".concat(JSON.stringify(children)));
          return void 0;
        }
        var args = children.filter(function(child) {
          return child.type != "qualifiedidentifier";
        });
        return {
          type: "!new",
          cls,
          args
        };
      }
      if (type == "typeref") {
        var _qid = children.find(function(child) {
          return child.type == "qualifiedidentifier";
        });
        var _cls = _qid === null || _qid === void 0 ? void 0 : _qid.val;
        if (!_cls) {
          meta.errors.push("Can't find qualifiedidentifier in typeref children: ".concat(JSON.stringify(children)));
          return void 0;
        }
        children.filter(function(child) {
          return child.type != "qualifiedidentifier";
        });
        return {
          type: "!type",
          cls: _cls
        };
      }
      if (type == "function" || type == "method") {
        var _val = val, functionName = _val.functionName, methodName = _val.methodName, _args2 = _val.args;
        return {
          type: "!func",
          methodName: functionName || methodName,
          isVar: type == "function",
          args: _args2
        };
      }
      return {
        type,
        children,
        val
      };
    };
    var flatizeTernary = function flatizeTernary2(children) {
      var flat = [];
      function _processTernaryChildren(tern) {
        var _tern = _slicedToArray(tern, 3), cond = _tern[0], if_val = _tern[1], else_val = _tern[2];
        flat.push([cond, if_val]);
        if ((else_val === null || else_val === void 0 ? void 0 : else_val.type) == "ternary") {
          _processTernaryChildren(else_val.children);
        } else {
          flat.push([void 0, else_val]);
        }
      }
      _processTernaryChildren(children);
      return flat;
    };
    var buildConv = function buildConv2(config2) {
      var operators2 = {};
      var _loop = function _loop2(opKey2) {
        var opConfig = config2.operators[opKey2];
        if (opConfig.spelOps) {
          opConfig.spelOps.forEach(function(spelOp) {
            var opk2 = spelOp;
            if (!operators2[opk2])
              operators2[opk2] = [];
            operators2[opk2].push(opKey2);
          });
        } else if (opConfig.spelOp) {
          var opk = opConfig.spelOp;
          if (!operators2[opk])
            operators2[opk] = [];
          operators2[opk].push(opKey2);
        } else {
          logger$1.log("[spel] No spelOp for operator ".concat(opKey2));
        }
      };
      for (var opKey in config2.operators) {
        _loop(opKey);
      }
      var conjunctions2 = {};
      for (var conjKey in config2.conjunctions) {
        var conjunctionDefinition = config2.conjunctions[conjKey];
        var ck = conjunctionDefinition.spelConj || conjKey.toLowerCase();
        conjunctions2[ck] = conjKey;
      }
      var funcs = {};
      for (var funcKey in config2.funcs) {
        var funcConfig = config2.funcs[funcKey];
        var fk = void 0;
        if (typeof funcConfig.spelFunc == "string") {
          fk = funcConfig.spelFunc;
        }
        if (fk) {
          if (!funcs[fk])
            funcs[fk] = [];
          funcs[fk].push(funcKey);
        }
      }
      return {
        operators: operators2,
        conjunctions: conjunctions2,
        funcs
      };
    };
    var convertPath = function convertPath2(parts, meta) {
      var isError2 = false;
      var res = parts.map(function(c) {
        if (c.type == "variable" || c.type == "property" || c.type == "indexer" && c.itype == "string") {
          return c.val;
        } else {
          isError2 = true;
          meta.errors.push("Unexpected item in compound: ".concat(JSON.stringify(c)));
        }
      });
      return !isError2 ? res : void 0;
    };
    var convertArg = function convertArg2(spel, conv, config2, meta, parentSpel) {
      if (spel == void 0)
        return void 0;
      var fieldSeparator = config2.settings.fieldSeparator;
      var literalTypes = {
        number: "number",
        string: "text",
        "boolean": "boolean",
        "null": "null"
      };
      var groupFieldParts = parentSpel !== null && parentSpel !== void 0 && parentSpel._groupField ? [parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField] : [];
      if (spel.type == "compound") {
        var _spel$children, _spel$children$;
        var parts = convertPath(spel.children, meta);
        if (!parts) {
          return void 0;
        }
        var fullParts = [].concat(groupFieldParts, _toConsumableArray(parts));
        var isVariable = ((_spel$children = spel.children) === null || _spel$children === void 0 ? void 0 : (_spel$children$ = _spel$children[0]) === null || _spel$children$ === void 0 ? void 0 : _spel$children$.type) == "variable";
        return {
          valueSrc: "field",
          isVariable,
          value: fullParts.join(fieldSeparator)
        };
      } else if (spel.type == "variable" || spel.type == "property") {
        var _fullParts = [].concat(groupFieldParts, [spel.val]);
        var _isVariable = spel.type == "variable";
        return {
          valueSrc: "field",
          isVariable: _isVariable,
          value: _fullParts.join(fieldSeparator)
        };
      } else if (literalTypes[spel.type]) {
        var value2 = spel.val;
        var valueType = literalTypes[spel.type];
        if (parentSpel !== null && parentSpel !== void 0 && parentSpel.isUnary) {
          value2 = -value2;
        }
        return {
          valueSrc: "value",
          valueType,
          value: value2
        };
      } else if (spel.type == "list") {
        var _values$;
        var values2 = spel.val.map(function(v) {
          return convertArg2(v, conv, config2, meta, spel);
        });
        values2.length ? (_values$ = values2[0]) === null || _values$ === void 0 ? void 0 : _values$.valueType : null;
        var _value = values2.map(function(v) {
          return v === null || v === void 0 ? void 0 : v.value;
        });
        var _valueType = "multiselect";
        return {
          valueSrc: "value",
          valueType: _valueType,
          value: _value
        };
      } else if (spel.type == "!func") {
        var _funcToOpMap;
        var obj = spel.obj, methodName = spel.methodName, args = spel.args;
        spel.isVar;
        var funcToOpMap = (_funcToOpMap = {}, _defineProperty$2(_funcToOpMap, ".contains", "like"), _defineProperty$2(_funcToOpMap, ".startsWith", "starts_with"), _defineProperty$2(_funcToOpMap, ".endsWith", "ends_with"), _defineProperty$2(_funcToOpMap, "$contains", "select_any_in"), _defineProperty$2(_funcToOpMap, ".equals", "multiselect_equals"), _defineProperty$2(_funcToOpMap, "CollectionUtils.containsAny()", "multiselect_contains"), _funcToOpMap);
        var convertedArgs = args.map(function(v) {
          return convertArg2(v, conv, config2, meta, _objectSpread$m(_objectSpread$m({}, spel), {}, {
            _groupField: parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField
          }));
        });
        if (methodName == "contains" && obj && obj[0].type == "list") {
          var convertedObj = obj.map(function(v) {
            return convertArg2(v, conv, config2, meta, spel);
          });
          if (!(convertedArgs.length == 1 && convertedArgs[0].valueSrc == "field")) {
            meta.errors.push("Expected arg to method ".concat(methodName, " to be field but got: ").concat(JSON.stringify(convertedArgs)));
            return void 0;
          }
          var field = convertedArgs[0].value;
          if (!(convertedObj.length == 1 && convertedObj[0].valueType == "multiselect")) {
            meta.errors.push("Expected object of method ".concat(methodName, " to be inline list but got: ").concat(JSON.stringify(convertedObj)));
            return void 0;
          }
          var opKey = funcToOpMap["$" + methodName];
          var list = convertedObj[0];
          return buildRule(config2, meta, field, opKey, [list], spel);
        } else if (obj && obj[0].type == "property" && funcToOpMap[obj[0].val + "." + methodName + "()"]) {
          var _opKey = funcToOpMap[obj[0].val + "." + methodName + "()"];
          var _field = convertedArgs[0].value;
          var _args3 = convertedArgs.slice(1);
          return buildRule(config2, meta, _field, _opKey, _args3, spel);
        } else if (funcToOpMap["." + methodName]) {
          var _opKey2 = funcToOpMap["." + methodName];
          var _parts = convertPath(obj, meta);
          if (_parts && convertedArgs.length == 1) {
            var _fullParts2 = [].concat(groupFieldParts, _toConsumableArray(_parts));
            var _field2 = _fullParts2.join(fieldSeparator);
            return buildRule(config2, meta, _field2, _opKey2, convertedArgs, spel);
          }
        } else if (methodName == "parse" && obj && obj[0].type == "!new" && obj[0].cls.at(-1) == "SimpleDateFormat") {
          var _args4 = obj[0].args.map(function(v) {
            return convertArg2(v, conv, config2, meta, _objectSpread$m(_objectSpread$m({}, spel), {}, {
              _groupField: parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField
            }));
          });
          if (!(_args4.length == 1 && _args4[0].valueType == "text")) {
            meta.errors.push("Expected args of ".concat(obj[0].cls.join("."), ".").concat(methodName, " to be 1 string but got: ").concat(JSON.stringify(_args4)));
            return void 0;
          }
          if (!(convertedArgs.length == 1 && convertedArgs[0].valueType == "text")) {
            meta.errors.push("Expected args of ".concat(obj[0].cls.join("."), " to be 1 string but got: ").concat(JSON.stringify(convertedArgs)));
            return void 0;
          }
          var dateFormat = _args4[0].value;
          var dateString = convertedArgs[0].value;
          var _valueType2 = dateFormat.includes(" ") ? "datetime" : "date";
          var _field3 = null;
          var widget = _valueType2;
          var fieldConfig = getFieldConfig$8(config2, _field3);
          var widgetConfig = config2.widgets[widget || (fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.mainWidget)];
          var valueFormat = widgetConfig.valueFormat;
          var dateVal = hooks(dateString, hooks.ISO_8601);
          var _value2 = dateVal.isValid() ? dateVal.format(valueFormat) : void 0;
          return {
            valueSrc: "value",
            valueType: _valueType2,
            value: _value2
          };
        } else if (methodName == "parse" && obj && obj[0].type == "!type" && obj[0].cls.at(-1) == "LocalTime") {
          if (!(convertedArgs.length == 1 && convertedArgs[0].valueType == "text")) {
            meta.errors.push("Expected args of ".concat(obj[0].cls.join("."), " to be 1 string but got: ").concat(JSON.stringify(convertedArgs)));
            return void 0;
          }
          var timeString = convertedArgs[0].value;
          var _valueType3 = "time";
          var _field4 = null;
          var _widget = _valueType3;
          var _fieldConfig = getFieldConfig$8(config2, _field4);
          var _widgetConfig = config2.widgets[_widget || (_fieldConfig === null || _fieldConfig === void 0 ? void 0 : _fieldConfig.mainWidget)];
          var _valueFormat = _widgetConfig.valueFormat;
          var _dateVal = hooks(timeString, "HH:mm:ss");
          var _value3 = _dateVal.isValid() ? _dateVal.format(_valueFormat) : void 0;
          return {
            valueSrc: "value",
            valueType: _valueType3,
            value: _value3
          };
        } else {
          meta.errors.push("Unsupported method ".concat(methodName));
        }
      } else if (spel.type == "op-plus" && (parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel.type) == "ternary") {
        return buildCaseValueConcat(spel, conv, config2, meta);
      } else {
        meta.errors.push("Can't convert arg of type ".concat(spel.type));
      }
      return void 0;
    };
    var buildRule = function buildRule2(config2, meta, field, opKey, convertedArgs, spel) {
      if (convertedArgs.filter(function(v) {
        return v === void 0;
      }).length) {
        return void 0;
      }
      var fieldConfig = getFieldConfig$8(config2, field);
      if (!fieldConfig) {
        meta.errors.push("No config for field ".concat(field));
        return void 0;
      }
      var canRev = true;
      var needWrapReverse = false;
      if (spel !== null && spel !== void 0 && spel.not && canRev) {
        var opConfig = config2.operators[opKey];
        if (opConfig.reversedOp) {
          opKey = opConfig.reversedOp;
          spel.not = false;
        } else {
          needWrapReverse = true;
        }
      }
      var widget = getWidgetForFieldOp$3(config2, field, opKey);
      var widgetConfig = config2.widgets[widget || fieldConfig.mainWidget];
      var asyncListValuesArr = convertedArgs.map(function(v) {
        return v.asyncListValues;
      }).filter(function(v) {
        return v != void 0;
      });
      var asyncListValues = asyncListValuesArr.length ? asyncListValuesArr[0] : void 0;
      var res = {
        type: "rule",
        id: uuid$1(),
        properties: _objectSpread$m({
          field,
          operator: opKey,
          value: convertedArgs.map(function(v) {
            return v.value;
          }),
          valueSrc: convertedArgs.map(function(v) {
            return v.valueSrc;
          }),
          valueType: convertedArgs.map(function(v) {
            if (v.valueSrc == "value") {
              return (widgetConfig === null || widgetConfig === void 0 ? void 0 : widgetConfig.type) || (fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.type) || v.valueType;
            }
            return v.valueType;
          })
        }, asyncListValues ? {
          asyncListValues
        } : {})
      };
      if (needWrapReverse) {
        res = wrapInDefaultConj(res, config2, spel === null || spel === void 0 ? void 0 : spel.not);
        if (spel !== null && spel !== void 0 && spel.not) {
          spel.not = false;
        }
      }
      return res;
    };
    var buildRuleGroup = function buildRuleGroup2(_ref, opKey, convertedArgs, config2, meta) {
      var groupFilter = _ref.groupFilter, groupFieldValue = _ref.groupFieldValue;
      if (groupFieldValue.valueSrc != "field")
        throw "Bad groupFieldValue: ".concat(JSON.stringify(groupFieldValue));
      var groupField = groupFieldValue.value;
      var groupOpRule = buildRule(config2, meta, groupField, opKey, convertedArgs);
      if (!groupOpRule)
        return void 0;
      var fieldConfig = getFieldConfig$8(config2, groupField);
      var mode = fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.mode;
      var res = _objectSpread$m(_objectSpread$m({}, groupFilter || {}), {}, {
        type: "rule_group",
        properties: _objectSpread$m(_objectSpread$m(_objectSpread$m({}, groupOpRule.properties), (groupFilter === null || groupFilter === void 0 ? void 0 : groupFilter.properties) || {}), {}, {
          mode
        })
      });
      if (!res.id)
        res.id = uuid$1();
      return res;
    };
    var compareArgs = function compareArgs2(left2, right2, spel, conv, config2, meta) {
      var parentSpel = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      if (left2.type == right2.type) {
        if (left2.type == "!aggr") {
          var _map = [left2.source, right2.source].map(function(v) {
            return convertArg(v, conv, config2, meta, _objectSpread$m(_objectSpread$m({}, spel), {}, {
              _groupField: parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField
            }));
          }), _map2 = _slicedToArray(_map, 2), leftSource = _map2[0], rightSource = _map2[1];
          return leftSource.value == rightSource.value;
        } else {
          var _map3 = [left2, right2].map(function(v) {
            return convertArg(v, conv, config2, meta, _objectSpread$m(_objectSpread$m({}, spel), {}, {
              _groupField: parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField
            }));
          }), _map4 = _slicedToArray(_map3, 2), leftVal = _map4[0], rightVal = _map4[1];
          return leftVal.value == rightVal.value;
        }
      }
      return false;
    };
    var convertToTree = function convertToTree2(spel, conv, config2, meta) {
      var parentSpel = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      if (!spel)
        return void 0;
      var res;
      if (spel.type.indexOf("op-") == 0) {
        var op = spel.type.slice("op-".length);
        var isUnary = (op == "minus" || op == "plus") && spel.children.length == 1;
        if (isUnary) {
          spel.isUnary = true;
          return convertToTree2(spel.children[0], conv, config2, meta, spel);
        }
        var isBetweenNormal = op == "and" && spel.children.length == 2 && spel.children[0].type == "op-ge" && spel.children[1].type == "op-le";
        var isBetweenRev = op == "or" && spel.children.length == 2 && spel.children[0].type == "op-lt" && spel.children[1].type == "op-gt";
        var isBetween2 = isBetweenNormal || isBetweenRev;
        if (isBetween2) {
          var _spel$children$0$chil = _slicedToArray(spel.children[0].children, 2), left2 = _spel$children$0$chil[0], from2 = _spel$children$0$chil[1];
          var _spel$children$1$chil = _slicedToArray(spel.children[1].children, 2), right2 = _spel$children$1$chil[0], to2 = _spel$children$1$chil[1];
          var isNumbers = from2.type == "number" && to2.type == "number";
          var isSameSource = compareArgs(left2, right2, spel, conv, config2, meta, parentSpel);
          if (isNumbers && isSameSource) {
            from2.val;
            to2.val;
            var oneSpel = {
              type: "op-between",
              children: [left2, from2, to2]
            };
            return convertToTree2(oneSpel, conv, config2, meta, parentSpel);
          }
        }
        var opKeys = conv.operators[op];
        if (op == "eq" && spel.children[1].type == "null") {
          opKeys = ["is_null"];
        } else if (op == "ne" && spel.children[1].type == "null") {
          opKeys = ["is_not_null"];
        } else if (op == "le" && spel.children[1].type == "string" && spel.children[1].val == "") {
          opKeys = ["is_empty"];
        } else if (op == "gt" && spel.children[1].type == "string" && spel.children[1].val == "") {
          opKeys = ["is_not_empty"];
        } else if (op == "between") {
          opKeys = ["between"];
        }
        var convertChildren = function convertChildren2() {
          return spel.children.map(function(child) {
            return convertToTree2(child, conv, config2, meta, _objectSpread$m(_objectSpread$m({}, spel), {}, {
              _groupField: parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField
            }));
          });
        };
        if (op == "and" || op == "or") {
          var children1 = {};
          var vals = convertChildren();
          vals.forEach(function(v) {
            if (v) {
              var id = uuid$1();
              v.id = id;
              if (v.type != void 0) {
                children1[id] = v;
              } else {
                meta.errors.push("Bad item in AND/OR: ".concat(JSON.stringify(v)));
              }
            }
          });
          res = {
            type: "group",
            id: uuid$1(),
            children1,
            properties: {
              conjunction: conv.conjunctions[op],
              not: spel.not
            }
          };
        } else if (opKeys) {
          var _fieldObj$groupFieldV, _convertedArgs;
          var _vals = convertChildren();
          var fieldObj = _vals[0];
          var convertedArgs = _vals.slice(1);
          var groupField = fieldObj === null || fieldObj === void 0 ? void 0 : (_fieldObj$groupFieldV = fieldObj.groupFieldValue) === null || _fieldObj$groupFieldV === void 0 ? void 0 : _fieldObj$groupFieldV.value;
          var opArg = (_convertedArgs = convertedArgs) === null || _convertedArgs === void 0 ? void 0 : _convertedArgs[0];
          var opKey = opKeys[0];
          if (opKeys.length > 1) {
            logger$1.warn("[spel] Spel operator ".concat(op, " can be mapped to ").concat(opKeys));
            var field = fieldObj === null || fieldObj === void 0 ? void 0 : fieldObj.value;
            var widgets2 = opKeys.map(function(op2) {
              return {
                op: op2,
                widget: getWidgetForFieldOp$3(config2, field, op2)
              };
            });
            if (op == "eq" || op == "ne") {
              var ws = widgets2.find(function(_ref2) {
                _ref2.op;
                var widget = _ref2.widget;
                return widget && widget != "field";
              });
              if (ws) {
                opKey = ws.op;
              }
            }
          }
          if (fieldObj !== null && fieldObj !== void 0 && fieldObj.groupFieldValue) {
            if (opArg && opArg.groupFieldValue && opArg.groupFieldValue.valueSrc == "field" && opArg.groupFieldValue.value == groupField) {
              opKey = "all";
              convertedArgs = [];
            } else if (opKey == "equal" && opArg.valueSrc == "value" && opArg.valueType == "number" && opArg.value == 0) {
              opKey = "none";
              convertedArgs = [];
            } else if (opKey == "greater" && opArg.valueSrc == "value" && opArg.valueType == "number" && opArg.value == 0) {
              opKey = "some";
              convertedArgs = [];
            }
          }
          var canRev = true;
          var needWrapReverse = false;
          if (spel.not && canRev) {
            var opConfig = config2.operators[opKey];
            if (opConfig.reversedOp) {
              opKey = opConfig.reversedOp;
              spel.not = false;
            } else {
              needWrapReverse = true;
            }
          }
          if (!fieldObj)
            ;
          else if (fieldObj.groupFieldValue) {
            if (fieldObj.groupFieldValue.valueSrc != "field") {
              meta.errors.push("Expected group field ".concat(JSON.stringify(fieldObj)));
            }
            res = buildRuleGroup(fieldObj, opKey, convertedArgs, config2, meta);
          } else {
            if (fieldObj.valueSrc != "field") {
              meta.errors.push("Expected field ".concat(JSON.stringify(fieldObj)));
            }
            var _field5 = fieldObj.value;
            res = buildRule(config2, meta, _field5, opKey, convertedArgs);
          }
          if (needWrapReverse) {
            if (res.type !== "group") {
              res = wrapInDefaultConj(res, config2, spel.not);
            } else {
              res.properties.not = !res.properties.not;
            }
          }
        } else {
          if (!parentSpel) {
            res = buildSimpleSwitch(spel, conv, config2, meta);
          }
          if (!res) {
            meta.errors.push("Can't convert op ".concat(op));
          }
        }
      } else if (spel.type == "!aggr") {
        var _groupFilter;
        var groupFieldValue = convertToTree2(spel.source, conv, config2, meta, _objectSpread$m(_objectSpread$m({}, spel), {}, {
          _groupField: parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField
        }));
        var groupFilter = convertToTree2(spel.filter, conv, config2, meta, _objectSpread$m(_objectSpread$m({}, spel), {}, {
          _groupField: groupFieldValue === null || groupFieldValue === void 0 ? void 0 : groupFieldValue.value
        }));
        if (((_groupFilter = groupFilter) === null || _groupFilter === void 0 ? void 0 : _groupFilter.type) == "rule") {
          groupFilter = wrapInDefaultConj(groupFilter, config2, spel.filter.not);
        }
        res = {
          groupFilter,
          groupFieldValue
        };
        if (!parentSpel) {
          res = void 0;
          meta.errors.push("Unexpected !aggr in root");
        }
      } else if (spel.type == "ternary") {
        var _children = {};
        spel.val.forEach(function(v) {
          var _v = _slicedToArray(v, 2), cond = _v[0], val = _v[1];
          var caseI = buildCase(cond, val, conv, config2, meta, spel);
          if (caseI) {
            _children[caseI.id] = caseI;
          }
        });
        res = {
          type: "switch_group",
          id: uuid$1(),
          children1: _children,
          properties: {}
        };
      } else {
        res = convertArg(spel, conv, config2, meta, parentSpel);
        if (res && !res.type && !parentSpel) {
          var sw = buildSimpleSwitch(spel, conv, config2, meta);
          if (sw) {
            res = sw;
          } else {
            res = void 0;
            meta.errors.push("Can't convert rule of type ".concat(spel.type, ", it looks like var/literal"));
          }
        }
      }
      return res;
    };
    var buildSimpleSwitch = function buildSimpleSwitch2(val, conv, config2, meta) {
      var children1 = {};
      var cond = null;
      var caseI = buildCase(cond, val, conv, config2, meta);
      if (caseI) {
        children1[caseI.id] = caseI;
      }
      var res = {
        type: "switch_group",
        id: uuid$1(),
        children1,
        properties: {}
      };
      return res;
    };
    var buildCase = function buildCase2(cond, val, conv, config2, meta) {
      var spel = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var valProperties = buildCaseValProperties(config2, meta, conv, val, spel);
      var caseI;
      if (cond) {
        caseI = convertToTree(cond, conv, config2, meta, spel);
        if (caseI && caseI.type) {
          if (caseI.type != "group") {
            caseI = wrapInDefaultConj(caseI, config2);
          }
          caseI.type = "case_group";
        } else {
          meta.errors.push("Unexpected case: ".concat(JSON.stringify(caseI)));
          caseI = void 0;
        }
      } else {
        caseI = {
          id: uuid$1(),
          type: "case_group",
          properties: {}
        };
      }
      if (caseI) {
        caseI.properties = _objectSpread$m(_objectSpread$m({}, caseI.properties), valProperties);
      }
      return caseI;
    };
    var buildCaseValueConcat = function buildCaseValueConcat2(spel, conv, config2, meta) {
      var flat = [];
      function _processConcatChildren(children) {
        children.map(function(child) {
          if (child.type == "op-plus") {
            _processConcatChildren(child.children);
          } else {
            var convertedChild = convertArg(child, conv, config2, meta, spel);
            if (convertedChild) {
              flat.push(convertedChild);
            } else {
              meta.errors.push("Can't convert ".concat(child.type, " in concatenation"));
            }
          }
        });
      }
      _processConcatChildren(spel.children);
      return {
        valueSrc: "value",
        valueType: "case_value",
        value: flat
      };
    };
    var buildCaseValProperties = function buildCaseValProperties2(config2, meta, conv, val) {
      var spel = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var valProperties = {};
      var convVal;
      if ((val === null || val === void 0 ? void 0 : val.type) == "op-plus") {
        convVal = buildCaseValueConcat(val, conv, config2, meta);
      } else {
        convVal = convertArg(val, conv, config2, meta, spel);
      }
      var widgetDef = config2.widgets["case_value"];
      var importCaseValue = widgetDef === null || widgetDef === void 0 ? void 0 : widgetDef.spelImportValue;
      if (importCaseValue) {
        var _importCaseValue = importCaseValue(convVal), _importCaseValue2 = _slicedToArray(_importCaseValue, 2), normVal = _importCaseValue2[0], normErrors = _importCaseValue2[1];
        normErrors.map(function(e) {
          return meta.errors.push(e);
        });
        if (normVal) {
          valProperties = {
            value: [normVal],
            valueSrc: ["value"],
            valueType: ["case_value"]
          };
        }
      } else {
        meta.errors.push("No fucntion to import case value");
      }
      return valProperties;
    };
    var wrapInDefaultConj = function wrapInDefaultConj2(rule2, config2) {
      var not = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      return {
        type: "group",
        id: uuid$1(),
        children1: _defineProperty$2({}, rule2.id, rule2),
        properties: {
          conjunction: defaultConjunction(config2),
          not: not || false
        }
      };
    };
    const Import = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      getTree: getTree$1,
      loadTree: loadTree$1,
      checkTree: checkTree$1,
      isValidTree,
      isImmutableTree,
      isTree,
      isJsonLogic,
      loadFromJsonLogic: loadFromJsonLogic$1,
      _loadFromJsonLogic,
      loadFromSpel,
      _loadFromSpel
    }, Symbol.toStringTag, { value: "Module" }));
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value2 = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve(value2);
      } else {
        Promise.resolve(value2).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn) {
      return function() {
        var self2 = this, args = arguments;
        return new Promise(function(resolve, reject) {
          var gen = fn.apply(self2, args);
          function _next(value2) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value2);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    var regeneratorRuntime$1 = { exports: {} };
    var _typeof = { exports: {} };
    (function(module2) {
      function _typeof2(obj) {
        "@babel/helpers - typeof";
        return module2.exports = _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports, _typeof2(obj);
      }
      module2.exports = _typeof2, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    })(_typeof);
    (function(module2) {
      var _typeof$12 = _typeof.exports["default"];
      function _regeneratorRuntime() {
        module2.exports = _regeneratorRuntime = function _regeneratorRuntime2() {
          return exports2;
        }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
        var exports2 = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty2 = Object.defineProperty || function(obj, key, desc) {
          obj[key] = desc.value;
        }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
        function define(obj, key, value2) {
          return Object.defineProperty(obj, key, {
            value: value2,
            enumerable: true,
            configurable: true,
            writable: true
          }), obj[key];
        }
        try {
          define({}, "");
        } catch (err) {
          define = function define2(obj, key, value2) {
            return obj[key] = value2;
          };
        }
        function wrap(innerFn, outerFn, self2, tryLocsList) {
          var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context2 = new Context(tryLocsList || []);
          return defineProperty2(generator, "_invoke", {
            value: makeInvokeMethod(innerFn, self2, context2)
          }), generator;
        }
        function tryCatch(fn, obj, arg) {
          try {
            return {
              type: "normal",
              arg: fn.call(obj, arg)
            };
          } catch (err) {
            return {
              type: "throw",
              arg: err
            };
          }
        }
        exports2.wrap = wrap;
        var ContinueSentinel = {};
        function Generator() {
        }
        function GeneratorFunction() {
        }
        function GeneratorFunctionPrototype() {
        }
        var IteratorPrototype = {};
        define(IteratorPrototype, iteratorSymbol, function() {
          return this;
        });
        var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values2([])));
        NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
        var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
        function defineIteratorMethods(prototype) {
          ["next", "throw", "return"].forEach(function(method) {
            define(prototype, method, function(arg) {
              return this._invoke(method, arg);
            });
          });
        }
        function AsyncIterator(generator, PromiseImpl) {
          function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if ("throw" !== record.type) {
              var result = record.arg, value2 = result.value;
              return value2 && "object" == _typeof$12(value2) && hasOwn.call(value2, "__await") ? PromiseImpl.resolve(value2.__await).then(function(value3) {
                invoke("next", value3, resolve, reject);
              }, function(err) {
                invoke("throw", err, resolve, reject);
              }) : PromiseImpl.resolve(value2).then(function(unwrapped) {
                result.value = unwrapped, resolve(result);
              }, function(error) {
                return invoke("throw", error, resolve, reject);
              });
            }
            reject(record.arg);
          }
          var previousPromise;
          defineProperty2(this, "_invoke", {
            value: function value2(method, arg) {
              function callInvokeWithMethodAndArg() {
                return new PromiseImpl(function(resolve, reject) {
                  invoke(method, arg, resolve, reject);
                });
              }
              return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
            }
          });
        }
        function makeInvokeMethod(innerFn, self2, context2) {
          var state = "suspendedStart";
          return function(method, arg) {
            if ("executing" === state)
              throw new Error("Generator is already running");
            if ("completed" === state) {
              if ("throw" === method)
                throw arg;
              return doneResult();
            }
            for (context2.method = method, context2.arg = arg; ; ) {
              var delegate = context2.delegate;
              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context2);
                if (delegateResult) {
                  if (delegateResult === ContinueSentinel)
                    continue;
                  return delegateResult;
                }
              }
              if ("next" === context2.method)
                context2.sent = context2._sent = context2.arg;
              else if ("throw" === context2.method) {
                if ("suspendedStart" === state)
                  throw state = "completed", context2.arg;
                context2.dispatchException(context2.arg);
              } else
                "return" === context2.method && context2.abrupt("return", context2.arg);
              state = "executing";
              var record = tryCatch(innerFn, self2, context2);
              if ("normal" === record.type) {
                if (state = context2.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel)
                  continue;
                return {
                  value: record.arg,
                  done: context2.done
                };
              }
              "throw" === record.type && (state = "completed", context2.method = "throw", context2.arg = record.arg);
            }
          };
        }
        function maybeInvokeDelegate(delegate, context2) {
          var methodName = context2.method, method = delegate.iterator[methodName];
          if (void 0 === method)
            return context2.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context2.method = "return", context2.arg = void 0, maybeInvokeDelegate(delegate, context2), "throw" === context2.method) || "return" !== methodName && (context2.method = "throw", context2.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
          var record = tryCatch(method, delegate.iterator, context2.arg);
          if ("throw" === record.type)
            return context2.method = "throw", context2.arg = record.arg, context2.delegate = null, ContinueSentinel;
          var info = record.arg;
          return info ? info.done ? (context2[delegate.resultName] = info.value, context2.next = delegate.nextLoc, "return" !== context2.method && (context2.method = "next", context2.arg = void 0), context2.delegate = null, ContinueSentinel) : info : (context2.method = "throw", context2.arg = new TypeError("iterator result is not an object"), context2.delegate = null, ContinueSentinel);
        }
        function pushTryEntry(locs) {
          var entry = {
            tryLoc: locs[0]
          };
          1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
        }
        function resetTryEntry(entry) {
          var record = entry.completion || {};
          record.type = "normal", delete record.arg, entry.completion = record;
        }
        function Context(tryLocsList) {
          this.tryEntries = [{
            tryLoc: "root"
          }], tryLocsList.forEach(pushTryEntry, this), this.reset(true);
        }
        function values2(iterable) {
          if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod)
              return iteratorMethod.call(iterable);
            if ("function" == typeof iterable.next)
              return iterable;
            if (!isNaN(iterable.length)) {
              var i = -1, next2 = function next3() {
                for (; ++i < iterable.length; )
                  if (hasOwn.call(iterable, i))
                    return next3.value = iterable[i], next3.done = false, next3;
                return next3.value = void 0, next3.done = true, next3;
              };
              return next2.next = next2;
            }
          }
          return {
            next: doneResult
          };
        }
        function doneResult() {
          return {
            value: void 0,
            done: true
          };
        }
        return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty2(Gp, "constructor", {
          value: GeneratorFunctionPrototype,
          configurable: true
        }), defineProperty2(GeneratorFunctionPrototype, "constructor", {
          value: GeneratorFunction,
          configurable: true
        }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports2.isGeneratorFunction = function(genFun) {
          var ctor = "function" == typeof genFun && genFun.constructor;
          return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
        }, exports2.mark = function(genFun) {
          return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
        }, exports2.awrap = function(arg) {
          return {
            __await: arg
          };
        }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
          return this;
        }), exports2.AsyncIterator = AsyncIterator, exports2.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
          void 0 === PromiseImpl && (PromiseImpl = Promise);
          var iter = new AsyncIterator(wrap(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
          return exports2.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
        }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function() {
          return this;
        }), define(Gp, "toString", function() {
          return "[object Generator]";
        }), exports2.keys = function(val) {
          var object = Object(val), keys2 = [];
          for (var key in object)
            keys2.push(key);
          return keys2.reverse(), function next2() {
            for (; keys2.length; ) {
              var key2 = keys2.pop();
              if (key2 in object)
                return next2.value = key2, next2.done = false, next2;
            }
            return next2.done = true, next2;
          };
        }, exports2.values = values2, Context.prototype = {
          constructor: Context,
          reset: function reset(skipTempReset) {
            if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(resetTryEntry), !skipTempReset)
              for (var name in this)
                "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = void 0);
          },
          stop: function stop() {
            this.done = true;
            var rootRecord = this.tryEntries[0].completion;
            if ("throw" === rootRecord.type)
              throw rootRecord.arg;
            return this.rval;
          },
          dispatchException: function dispatchException(exception) {
            if (this.done)
              throw exception;
            var context2 = this;
            function handle(loc, caught) {
              return record.type = "throw", record.arg = exception, context2.next = loc, caught && (context2.method = "next", context2.arg = void 0), !!caught;
            }
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i], record = entry.completion;
              if ("root" === entry.tryLoc)
                return handle("end");
              if (entry.tryLoc <= this.prev) {
                var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc");
                if (hasCatch && hasFinally) {
                  if (this.prev < entry.catchLoc)
                    return handle(entry.catchLoc, true);
                  if (this.prev < entry.finallyLoc)
                    return handle(entry.finallyLoc);
                } else if (hasCatch) {
                  if (this.prev < entry.catchLoc)
                    return handle(entry.catchLoc, true);
                } else {
                  if (!hasFinally)
                    throw new Error("try statement without catch or finally");
                  if (this.prev < entry.finallyLoc)
                    return handle(entry.finallyLoc);
                }
              }
            }
          },
          abrupt: function abrupt(type, arg) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                var finallyEntry = entry;
                break;
              }
            }
            finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
            var record = finallyEntry ? finallyEntry.completion : {};
            return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
          },
          complete: function complete(record, afterLoc) {
            if ("throw" === record.type)
              throw record.arg;
            return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
          },
          finish: function finish(finallyLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.finallyLoc === finallyLoc)
                return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
            }
          },
          "catch": function _catch(tryLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.tryLoc === tryLoc) {
                var record = entry.completion;
                if ("throw" === record.type) {
                  var thrown = record.arg;
                  resetTryEntry(entry);
                }
                return thrown;
              }
            }
            throw new Error("illegal catch attempt");
          },
          delegateYield: function delegateYield(iterable, resultName, nextLoc) {
            return this.delegate = {
              iterator: values2(iterable),
              resultName,
              nextLoc
            }, "next" === this.method && (this.arg = void 0), ContinueSentinel;
          }
        }, exports2;
      }
      module2.exports = _regeneratorRuntime, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    })(regeneratorRuntime$1);
    var runtime = regeneratorRuntime$1.exports();
    var regenerator = runtime;
    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
    function ownKeys$l(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$l(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$l(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$l(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var simulateAsyncFetch$1 = function simulateAsyncFetch2(all) {
      var cPageSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      var delay = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1e3;
      return /* @__PURE__ */ function() {
        var _ref = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee(search, offset2, meta) {
          var pageSize2, filtered, currentOffset, values2, newOffset, hasMore;
          return regenerator.wrap(function _callee$(_context) {
            while (1)
              switch (_context.prev = _context.next) {
                case 0:
                  pageSize2 = (meta === null || meta === void 0 ? void 0 : meta.pageSize) != void 0 ? meta.pageSize : cPageSize;
                  filtered = listValuesToArray$1(all).filter(function(_ref2) {
                    var title = _ref2.title, value2 = _ref2.value;
                    return search == null ? true : title.toUpperCase().indexOf(search.toUpperCase()) != -1 || "".concat(value2).toUpperCase().indexOf(search.toUpperCase()) != -1;
                  });
                  pageSize2 ? Math.ceil(filtered.length / pageSize2) : 0;
                  currentOffset = offset2 || 0;
                  values2 = pageSize2 ? filtered.slice(currentOffset, currentOffset + pageSize2) : filtered;
                  newOffset = pageSize2 ? currentOffset + values2.length : null;
                  hasMore = pageSize2 ? newOffset < filtered.length : false;
                  if (!delay) {
                    _context.next = 12;
                    break;
                  }
                  console.debug("simulateAsyncFetch", {
                    search,
                    offset: offset2,
                    values: values2,
                    hasMore,
                    filtered
                  });
                  _context.next = 12;
                  return sleep$1(delay);
                case 12:
                  return _context.abrupt("return", {
                    values: values2,
                    hasMore
                  });
                case 13:
                case "end":
                  return _context.stop();
              }
          }, _callee);
        }));
        return function(_x, _x2, _x3) {
          return _ref.apply(this, arguments);
        };
      }();
    };
    var mergeListValues$1 = function mergeListValues2(values2, newValues) {
      var toStart = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var hideNewValues = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      if (!newValues)
        return values2;
      var old = values2 || [];
      var newFiltered = newValues.filter(function(v) {
        return old.find(function(av) {
          return "" + av.value == "" + v.value;
        }) == void 0;
      }).map(function(v) {
        return hideNewValues ? _objectSpread$l(_objectSpread$l({}, v), {}, {
          isHidden: true
        }) : v;
      });
      var merged = toStart ? [].concat(_toConsumableArray(newFiltered), _toConsumableArray(old)) : [].concat(_toConsumableArray(old), _toConsumableArray(newFiltered));
      return merged;
    };
    var optionToListValue$1 = function optionToListValue2(val, listValues2, allowCustomValues) {
      var _val$value;
      var v = val == null || val == "" ? void 0 : (_val$value = val === null || val === void 0 ? void 0 : val.value) !== null && _val$value !== void 0 ? _val$value : val;
      var item = getListValue$1(v, listValues2);
      var customItem = allowCustomValues && !item ? makeCustomListValue$1(v) : void 0;
      var listValue = item || customItem;
      var lvs = listValue ? [listValue] : void 0;
      return [v, lvs];
    };
    var optionsToListValues$1 = function optionsToListValues2(vals, listValues2, allowCustomValues) {
      var newSelectedListValues = vals.map(function(val, _i) {
        var _val$value2;
        var v = val == null || val == "" ? void 0 : (_val$value2 = val === null || val === void 0 ? void 0 : val.value) !== null && _val$value2 !== void 0 ? _val$value2 : val;
        var item = getListValue$1(v, listValues2);
        var customItem = allowCustomValues && !item ? makeCustomListValue$1(v) : void 0;
        var listValue = item || customItem;
        return listValue;
      }).filter(function(o) {
        return o != void 0;
      });
      var newSelectedValues = newSelectedListValues.map(function(o) {
        var _o$value;
        return (_o$value = o === null || o === void 0 ? void 0 : o.value) !== null && _o$value !== void 0 ? _o$value : o;
      });
      if (!newSelectedValues.length)
        newSelectedValues = void 0;
      return [newSelectedValues, newSelectedListValues];
    };
    var listValueToOption$1 = function listValueToOption2(lv) {
      if (lv == null)
        return null;
      var title = lv.title, value2 = lv.value, disabled = lv.disabled, groupTitle = lv.groupTitle, renderTitle = lv.renderTitle, children = lv.children, label = lv.label, isCustom = lv.isCustom, isHidden = lv.isHidden;
      var option = {
        value: value2,
        title: title || label || children
      };
      if (disabled)
        option.disabled = disabled;
      if (groupTitle)
        option.groupTitle = groupTitle;
      if (renderTitle)
        option.renderTitle = renderTitle;
      if (isCustom)
        option.isCustom = isCustom;
      if (isHidden)
        option.isHidden = isHidden;
      return option;
    };
    const autocomplete = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      simulateAsyncFetch: simulateAsyncFetch$1,
      mergeListValues: mergeListValues$1,
      optionToListValue: optionToListValue$1,
      optionsToListValues: optionsToListValues$1,
      listValueToOption: listValueToOption$1,
      getListValue: getListValue$1
    }, Symbol.toStringTag, { value: "Module" }));
    const BasicUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      ConfigUtils: configUtils,
      RuleUtils: ruleUtils,
      FuncUtils: funcUtils,
      DefaultUtils: defaultUtils,
      TreeUtils: treeUtils,
      ExportUtils: _export,
      ListUtils: listValues,
      Autocomplete: autocomplete,
      clone: clone$3,
      moment: hooks,
      validateTree,
      validateAndFixTree: validateAndFixTree$1,
      uuid: uuid$1,
      getSwitchValues,
      compressConfig,
      decompressConfig
    }, Symbol.toStringTag, { value: "Module" }));
    var NOW = {
      label: "Now",
      returnType: "datetime",
      jsonLogic: "now",
      jsonLogicCustomOps: {
        now: {}
      },
      spelFunc: "new java.util.Date()",
      sqlFormatFunc: function sqlFormatFunc() {
        return "NOW()";
      },
      mongoFormatFunc: function mongoFormatFunc() {
        return new Date();
      },
      formatFunc: function formatFunc2() {
        return "NOW";
      }
    };
    var RELATIVE_DATETIME = {
      label: "Relative",
      returnType: "datetime",
      renderBrackets: ["", ""],
      renderSeps: ["", "", ""],
      jsonLogic: function jsonLogic(_ref) {
        var date = _ref.date, op = _ref.op, val = _ref.val, dim = _ref.dim;
        return {
          "date_add": [date, val * (op == "minus" ? -1 : 1), dim]
        };
      },
      jsonLogicImport: function jsonLogicImport(v) {
        var date = v["date_add"][0];
        var val = Math.abs(v["date_add"][1]);
        var op = v["date_add"][1] >= 0 ? "plus" : "minus";
        var dim = v["date_add"][2];
        return [date, op, val, dim];
      },
      jsonLogicCustomOps: {
        date_add: {}
      },
      sqlFormatFunc: function sqlFormatFunc(_ref2) {
        var date = _ref2.date, op = _ref2.op, val = _ref2.val, dim = _ref2.dim;
        return "DATE_ADD(".concat(date, ", INTERVAL ").concat(parseInt(val) * (op == "minus" ? -1 : 1), " ").concat(dim.replace(/^'|'$/g, ""), ")");
      },
      mongoFormatFunc: null,
      formatFunc: function formatFunc2(_ref3) {
        var date = _ref3.date, op = _ref3.op, val = _ref3.val, dim = _ref3.dim;
        return !val ? date : "".concat(date, " ").concat(op == "minus" ? "-" : "+", " ").concat(val, " ").concat(dim);
      },
      args: {
        date: {
          label: "Date",
          type: "datetime",
          defaultValue: {
            func: "NOW",
            args: []
          },
          valueSources: ["func", "field"]
        },
        op: {
          label: "Op",
          type: "select",
          defaultValue: "plus",
          valueSources: ["value"],
          mainWidgetProps: {
            customProps: {
              showSearch: false
            }
          },
          fieldSettings: {
            listValues: {
              plus: "+",
              minus: "-"
            }
          }
        },
        val: {
          label: "Value",
          type: "number",
          fieldSettings: {
            min: 0
          },
          defaultValue: 0,
          valueSources: ["value"]
        },
        dim: {
          label: "Dimension",
          type: "select",
          defaultValue: "day",
          valueSources: ["value"],
          mainWidgetProps: {
            customProps: {
              showSearch: false
            }
          },
          fieldSettings: {
            listValues: {
              day: "day",
              week: "week",
              month: "month",
              year: "year"
            }
          }
        }
      }
    };
    var LOWER = {
      label: "Lowercase",
      mongoFunc: "$toLower",
      jsonLogic: "toLowerCase",
      spelFunc: ".toLowerCase",
      jsonLogicCustomOps: {
        toLowerCase: {}
      },
      returnType: "text",
      args: {
        str: {
          label: "String",
          type: "text",
          valueSources: ["value", "field"]
        }
      }
    };
    var UPPER = {
      label: "Uppercase",
      mongoFunc: "$toUpper",
      jsonLogic: "toUpperCase",
      spelFunc: ".toUpperCase",
      jsonLogicCustomOps: {
        toUpperCase: {}
      },
      returnType: "text",
      args: {
        str: {
          label: "String",
          type: "text",
          valueSources: ["value", "field"]
        }
      }
    };
    var LINEAR_REGRESSION = {
      label: "Linear regression",
      returnType: "number",
      formatFunc: function formatFunc2(_ref4, _2) {
        var coef = _ref4.coef, bias = _ref4.bias, val = _ref4.val;
        return "(".concat(coef, " * ").concat(val, " + ").concat(bias, ")");
      },
      sqlFormatFunc: function sqlFormatFunc(_ref5) {
        var coef = _ref5.coef, bias = _ref5.bias, val = _ref5.val;
        return "(".concat(coef, " * ").concat(val, " + ").concat(bias, ")");
      },
      spelFormatFunc: function spelFormatFunc(_ref6) {
        var coef = _ref6.coef, bias = _ref6.bias, val = _ref6.val;
        return "(".concat(coef, " * ").concat(val, " + ").concat(bias, ")");
      },
      mongoFormatFunc: function mongoFormatFunc(_ref7) {
        var coef = _ref7.coef, bias = _ref7.bias, val = _ref7.val;
        return {
          "$sum": [{
            "$multiply": [coef, val]
          }, bias]
        };
      },
      jsonLogic: function jsonLogic(_ref8) {
        var coef = _ref8.coef, bias = _ref8.bias, val = _ref8.val;
        return {
          "+": [{
            "*": [coef, val]
          }, bias]
        };
      },
      jsonLogicImport: function jsonLogicImport(v) {
        var coef = v["+"][0]["*"][0];
        var val = v["+"][0]["*"][1];
        var bias = v["+"][1];
        return [coef, val, bias];
      },
      renderBrackets: ["", ""],
      renderSeps: [" * ", " + "],
      args: {
        coef: {
          label: "Coef",
          type: "number",
          defaultValue: 1,
          valueSources: ["value"]
        },
        val: {
          label: "Value",
          type: "number",
          valueSources: ["value", "field"]
        },
        bias: {
          label: "Bias",
          type: "number",
          defaultValue: 0,
          valueSources: ["value"]
        }
      }
    };
    var mongoFormatOp1 = function mongoFormatOp12(mop, mc, not, field, _op, value2, useExpr, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
      var $field = typeof field == "string" && !field.startsWith("$") ? "$" + field : field;
      var mv = mc(value2, fieldDef);
      if (mv === void 0)
        return void 0;
      if (not) {
        if (!useExpr && (!mop || mop == "$eq"))
          return _defineProperty$2({}, field, {
            "$ne": mv
          });
        return !useExpr ? _defineProperty$2({}, field, {
          "$not": _defineProperty$2({}, mop, mv)
        }) : {
          "$not": _defineProperty$2({}, mop, [$field, mv])
        };
      } else {
        if (!useExpr && (!mop || mop == "$eq"))
          return _defineProperty$2({}, field, mv);
        return !useExpr ? _defineProperty$2({}, field, _defineProperty$2({}, mop, mv)) : _defineProperty$2({}, mop, [$field, mv]);
      }
    };
    var mongoFormatOp2 = function mongoFormatOp22(mops, not, field, _op, values2, useExpr, valueSrcs, valueTypes, opDef, operatorOptions, fieldDef) {
      var $field = typeof field == "string" && !field.startsWith("$") ? "$" + field : field;
      if (not) {
        var _$not3;
        return !useExpr ? _defineProperty$2({}, field, {
          "$not": (_$not3 = {}, _defineProperty$2(_$not3, mops[0], values2[0]), _defineProperty$2(_$not3, mops[1], values2[1]), _$not3)
        }) : {
          "$not": {
            "$and": [_defineProperty$2({}, mops[0], [$field, values2[0]]), _defineProperty$2({}, mops[1], [$field, values2[1]])]
          }
        };
      } else {
        var _field2;
        return !useExpr ? _defineProperty$2({}, field, (_field2 = {}, _defineProperty$2(_field2, mops[0], values2[0]), _defineProperty$2(_field2, mops[1], values2[1]), _field2)) : {
          "$and": [_defineProperty$2({}, mops[0], [$field, values2[0]]), _defineProperty$2({}, mops[1], [$field, values2[1]])]
        };
      }
    };
    var ctx$2 = {
      utils: {
        SqlString,
        moment: hooks,
        mongoFormatOp1,
        mongoFormatOp2,
        mongoEmptyValue,
        escapeRegExp,
        sqlEmptyValue,
        stringifyForDisplay,
        getTitleInListValues: getTitleInListValues$1,
        spelEscape,
        spelFixList
      }
    };
    function _createForOfIteratorHelper$3(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$3(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$3(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$3(o, minLen);
    }
    function _arrayLikeToArray$3(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$k(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$k(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$k(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$k(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var conjunctions$1 = {
      AND: {
        label: "And",
        mongoConj: "$and",
        jsonLogicConj: "and",
        sqlConj: "AND",
        spelConj: "and",
        spelConjs: ["and", "&&"],
        reversedConj: "OR",
        formatConj: function formatConj(children, conj, not, isForDisplay) {
          return children.size > 1 ? (not ? "NOT " : "") + "(" + children.join(" " + (isForDisplay ? "AND" : "&&") + " ") + ")" : (not ? "NOT (" : "") + children.first() + (not ? ")" : "");
        },
        sqlFormatConj: function sqlFormatConj(children, conj, not) {
          return children.size > 1 ? (not ? "NOT " : "") + "(" + children.join(" AND ") + ")" : (not ? "NOT (" : "") + children.first() + (not ? ")" : "");
        },
        spelFormatConj: function spelFormatConj(children, conj, not, omitBrackets) {
          if (not)
            omitBrackets = false;
          return children.size > 1 ? (not ? "!" : "") + (omitBrackets ? "" : "(") + children.join(" && ") + (omitBrackets ? "" : ")") : (not ? "!(" : "") + children.first() + (not ? ")" : "");
        }
      },
      OR: {
        label: "Or",
        mongoConj: "$or",
        jsonLogicConj: "or",
        sqlConj: "OR",
        spelConj: "or",
        spelConjs: ["or", "||"],
        reversedConj: "AND",
        formatConj: function formatConj(children, conj, not, isForDisplay) {
          return children.size > 1 ? (not ? "NOT " : "") + "(" + children.join(" " + (isForDisplay ? "OR" : "||") + " ") + ")" : (not ? "NOT (" : "") + children.first() + (not ? ")" : "");
        },
        sqlFormatConj: function sqlFormatConj(children, conj, not) {
          return children.size > 1 ? (not ? "NOT " : "") + "(" + children.join(" OR ") + ")" : (not ? "NOT (" : "") + children.first() + (not ? ")" : "");
        },
        spelFormatConj: function spelFormatConj(children, conj, not, omitBrackets) {
          if (not)
            omitBrackets = false;
          return children.size > 1 ? (not ? "!" : "") + (omitBrackets ? "" : "(") + children.join(" || ") + (omitBrackets ? "" : ")") : (not ? "!(" : "") + children.first() + (not ? ")" : "");
        }
      }
    };
    var operators$1 = {
      equal: {
        label: "==",
        labelForFormat: "==",
        sqlOp: "=",
        spelOp: "==",
        spelOps: ["==", "eq"],
        reversedOp: "not_equal",
        formatOp: function formatOp(field, op, value2, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay, fieldDef) {
          var opStr = isForDisplay ? "=" : opDef.label;
          if (valueTypes == "boolean" && isForDisplay)
            return value2 == "No" ? "NOT ".concat(field) : "".concat(field);
          else
            return "".concat(field, " ").concat(opStr, " ").concat(value2);
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return (_this$utils = this.utils).mongoFormatOp1.apply(_this$utils, ["$eq", function(v) {
            return v;
          }, false].concat(args));
        },
        jsonLogic: "==",
        elasticSearchQueryType: "term"
      },
      not_equal: {
        isNotOp: true,
        label: "!=",
        labelForFormat: "!=",
        sqlOp: "<>",
        spelOp: "!=",
        spelOps: ["!=", "ne"],
        reversedOp: "equal",
        formatOp: function formatOp(field, op, value2, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay, fieldDef) {
          if (valueTypes == "boolean" && isForDisplay)
            return value2 == "No" ? "".concat(field) : "NOT ".concat(field);
          else
            return "".concat(field, " ").concat(opDef.label, " ").concat(value2);
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils2;
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return (_this$utils2 = this.utils).mongoFormatOp1.apply(_this$utils2, ["$ne", function(v) {
            return v;
          }, false].concat(args));
        },
        jsonLogic: "!="
      },
      less: {
        label: "<",
        labelForFormat: "<",
        sqlOp: "<",
        spelOp: "<",
        spelOps: ["<", "lt"],
        reversedOp: "greater_or_equal",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils3;
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
          return (_this$utils3 = this.utils).mongoFormatOp1.apply(_this$utils3, ["$lt", function(v) {
            return v;
          }, false].concat(args));
        },
        jsonLogic: "<",
        elasticSearchQueryType: "range"
      },
      less_or_equal: {
        label: "<=",
        labelForFormat: "<=",
        sqlOp: "<=",
        spelOp: "<=",
        spelOps: ["<=", "le"],
        reversedOp: "greater",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils4;
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }
          return (_this$utils4 = this.utils).mongoFormatOp1.apply(_this$utils4, ["$lte", function(v) {
            return v;
          }, false].concat(args));
        },
        jsonLogic: "<=",
        elasticSearchQueryType: "range"
      },
      greater: {
        label: ">",
        labelForFormat: ">",
        sqlOp: ">",
        spelOp: ">",
        spelOps: [">", "gt"],
        reversedOp: "less_or_equal",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils5;
          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
          }
          return (_this$utils5 = this.utils).mongoFormatOp1.apply(_this$utils5, ["$gt", function(v) {
            return v;
          }, false].concat(args));
        },
        jsonLogic: ">",
        elasticSearchQueryType: "range"
      },
      greater_or_equal: {
        label: ">=",
        labelForFormat: ">=",
        sqlOp: ">=",
        spelOp: ">=",
        spelOps: [">=", "ge"],
        reversedOp: "less",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils6;
          for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
            args[_key6] = arguments[_key6];
          }
          return (_this$utils6 = this.utils).mongoFormatOp1.apply(_this$utils6, ["$gte", function(v) {
            return v;
          }, false].concat(args));
        },
        jsonLogic: ">=",
        elasticSearchQueryType: "range"
      },
      like: {
        label: "Contains",
        labelForFormat: "Contains",
        reversedOp: "not_like",
        sqlOp: "LIKE",
        spelOp: ".contains",
        spelOps: ["matches", ".contains"],
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils7, _this = this;
          for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
            args[_key7] = arguments[_key7];
          }
          return (_this$utils7 = this.utils).mongoFormatOp1.apply(_this$utils7, ["$regex", function(v) {
            return typeof v == "string" ? _this.utils.escapeRegExp(v) : void 0;
          }, false].concat(args));
        },
        jsonLogic: "in",
        _jsonLogicIsRevArgs: true,
        valueSources: ["value"],
        elasticSearchQueryType: "regexp"
      },
      not_like: {
        isNotOp: true,
        label: "Not contains",
        reversedOp: "like",
        labelForFormat: "Not Contains",
        sqlOp: "NOT LIKE",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils8, _this2 = this;
          for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
            args[_key8] = arguments[_key8];
          }
          return (_this$utils8 = this.utils).mongoFormatOp1.apply(_this$utils8, ["$regex", function(v) {
            return typeof v == "string" ? _this2.utils.escapeRegExp(v) : void 0;
          }, true].concat(args));
        },
        valueSources: ["value"]
      },
      starts_with: {
        label: "Starts with",
        labelForFormat: "Starts with",
        sqlOp: "LIKE",
        spelOp: ".startsWith",
        spelOps: ["matches", ".startsWith"],
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils9, _this3 = this;
          for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
            args[_key9] = arguments[_key9];
          }
          return (_this$utils9 = this.utils).mongoFormatOp1.apply(_this$utils9, ["$regex", function(v) {
            return typeof v == "string" ? "^" + _this3.utils.escapeRegExp(v) : void 0;
          }, false].concat(args));
        },
        jsonLogic: void 0,
        valueSources: ["value"]
      },
      ends_with: {
        label: "Ends with",
        labelForFormat: "Ends with",
        sqlOp: "LIKE",
        spelOp: ".endsWith",
        spelOps: ["matches", ".endsWith"],
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils10, _this4 = this;
          for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
            args[_key10] = arguments[_key10];
          }
          return (_this$utils10 = this.utils).mongoFormatOp1.apply(_this$utils10, ["$regex", function(v) {
            return typeof v == "string" ? _this4.utils.escapeRegExp(v) + "$" : void 0;
          }, false].concat(args));
        },
        jsonLogic: void 0,
        valueSources: ["value"]
      },
      between: {
        label: "Between",
        labelForFormat: "BETWEEN",
        sqlOp: "BETWEEN",
        cardinality: 2,
        formatOp: function formatOp(field, op, values2, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay) {
          var valFrom = values2.first();
          var valTo = values2.get(1);
          if (isForDisplay)
            return "".concat(field, " BETWEEN ").concat(valFrom, " AND ").concat(valTo);
          else
            return "".concat(field, " >= ").concat(valFrom, " && ").concat(field, " <= ").concat(valTo);
        },
        spelFormatOp: function spelFormatOp(field, op, values2, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          var valFrom = values2[0];
          var valTo = values2[1];
          return "".concat(field, " >= ").concat(valFrom, " && ").concat(field, " <= ").concat(valTo);
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils11;
          for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
            args[_key11] = arguments[_key11];
          }
          return (_this$utils11 = this.utils).mongoFormatOp2.apply(_this$utils11, [["$gte", "$lte"], false].concat(args));
        },
        valueLabels: ["Value from", "Value to"],
        textSeparators: [null, "and"],
        reversedOp: "not_between",
        jsonLogic: "<=",
        validateValues: function validateValues(values2) {
          if (values2[0] != void 0 && values2[1] != void 0) {
            return values2[0] <= values2[1] ? null : "Invalid range";
          }
          return null;
        },
        elasticSearchQueryType: function elasticSearchQueryType(type) {
          return type === "time" ? "filter" : "range";
        }
      },
      not_between: {
        isNotOp: true,
        label: "Not between",
        labelForFormat: "NOT BETWEEN",
        sqlOp: "NOT BETWEEN",
        cardinality: 2,
        formatOp: function formatOp(field, op, values2, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay) {
          var valFrom = values2.first();
          var valTo = values2.get(1);
          if (isForDisplay)
            return "".concat(field, " NOT BETWEEN ").concat(valFrom, " AND ").concat(valTo);
          else
            return "(".concat(field, " < ").concat(valFrom, " || ").concat(field, " > ").concat(valTo, ")");
        },
        spelFormatOp: function spelFormatOp(field, op, values2, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          var valFrom = values2[0];
          var valTo = values2[1];
          return "(".concat(field, " < ").concat(valFrom, " || ").concat(field, " > ").concat(valTo, ")");
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils12;
          for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
            args[_key12] = arguments[_key12];
          }
          return (_this$utils12 = this.utils).mongoFormatOp2.apply(_this$utils12, [["$gte", "$lte"], true].concat(args));
        },
        valueLabels: ["Value from", "Value to"],
        textSeparators: [null, "and"],
        reversedOp: "between",
        validateValues: function validateValues(values2) {
          if (values2[0] != void 0 && values2[1] != void 0) {
            return values2[0] <= values2[1] ? null : "Invalid range";
          }
          return null;
        }
      },
      is_empty: {
        label: "Is empty",
        labelForFormat: "IS EMPTY",
        cardinality: 0,
        reversedOp: "is_not_empty",
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return isForDisplay ? "".concat(field, " IS EMPTY") : "!".concat(field);
        },
        sqlFormatOp: function sqlFormatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          var empty = this.utils.sqlEmptyValue(fieldDef);
          return "COALESCE(".concat(field, ", ").concat(empty, ") = ").concat(empty);
        },
        spelFormatOp: function spelFormatOp(field, op, values2, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " <= ''");
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils13, _this5 = this;
          for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
            args[_key13] = arguments[_key13];
          }
          return (_this$utils13 = this.utils).mongoFormatOp1.apply(_this$utils13, ["$in", function(v, fieldDef) {
            return [_this5.utils.mongoEmptyValue(fieldDef), null];
          }, false].concat(args));
        },
        jsonLogic: "!"
      },
      is_not_empty: {
        isNotOp: true,
        label: "Is not empty",
        labelForFormat: "IS NOT EMPTY",
        cardinality: 0,
        reversedOp: "is_empty",
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return isForDisplay ? "".concat(field, " IS NOT EMPTY") : "!!".concat(field);
        },
        sqlFormatOp: function sqlFormatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          var empty = this.utils.sqlEmptyValue(fieldDef);
          return "COALESCE(".concat(field, ", ").concat(empty, ") <> ").concat(empty);
        },
        spelFormatOp: function spelFormatOp(field, op, values2, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " > ''");
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils14, _this6 = this;
          for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
            args[_key14] = arguments[_key14];
          }
          return (_this$utils14 = this.utils).mongoFormatOp1.apply(_this$utils14, ["$nin", function(v, fieldDef) {
            return [_this6.utils.mongoEmptyValue(fieldDef), null];
          }, false].concat(args));
        },
        jsonLogic: "!!",
        elasticSearchQueryType: "exists"
      },
      is_null: {
        label: "Is null",
        labelForFormat: "IS NULL",
        sqlOp: "IS NULL",
        cardinality: 0,
        reversedOp: "is_not_null",
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return isForDisplay ? "".concat(field, " IS NULL") : "!".concat(field);
        },
        spelFormatOp: function spelFormatOp(field, op, values2, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " == null");
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils15;
          for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
            args[_key15] = arguments[_key15];
          }
          return (_this$utils15 = this.utils).mongoFormatOp1.apply(_this$utils15, ["$eq", function(v) {
            return null;
          }, false].concat(args));
        },
        jsonLogic: "=="
      },
      is_not_null: {
        label: "Is not null",
        labelForFormat: "IS NOT NULL",
        sqlOp: "IS NOT NULL",
        cardinality: 0,
        reversedOp: "is_null",
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return isForDisplay ? "".concat(field, " IS NOT NULL") : "!!".concat(field);
        },
        spelFormatOp: function spelFormatOp(field, op, values2, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " != null");
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils16;
          for (var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {
            args[_key16] = arguments[_key16];
          }
          return (_this$utils16 = this.utils).mongoFormatOp1.apply(_this$utils16, ["$ne", function(v) {
            return null;
          }, false].concat(args));
        },
        jsonLogic: "!=",
        elasticSearchQueryType: "exists"
      },
      select_equals: {
        label: "==",
        labelForFormat: "==",
        sqlOp: "=",
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          var opStr = isForDisplay ? "=" : "==";
          return "".concat(field, " ").concat(opStr, " ").concat(value2);
        },
        spelOp: "==",
        spelOps: ["==", "eq"],
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils17;
          for (var _len17 = arguments.length, args = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {
            args[_key17] = arguments[_key17];
          }
          return (_this$utils17 = this.utils).mongoFormatOp1.apply(_this$utils17, ["$eq", function(v) {
            return v;
          }, false].concat(args));
        },
        reversedOp: "select_not_equals",
        jsonLogic: "==",
        elasticSearchQueryType: "term"
      },
      select_not_equals: {
        isNotOp: true,
        label: "!=",
        labelForFormat: "!=",
        sqlOp: "<>",
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return "".concat(field, " != ").concat(value2);
        },
        spelOp: "!=",
        spelOps: ["!=", "ne"],
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils18;
          for (var _len18 = arguments.length, args = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {
            args[_key18] = arguments[_key18];
          }
          return (_this$utils18 = this.utils).mongoFormatOp1.apply(_this$utils18, ["$ne", function(v) {
            return v;
          }, false].concat(args));
        },
        reversedOp: "select_equals",
        jsonLogic: "!="
      },
      select_any_in: {
        label: "Any in",
        labelForFormat: "IN",
        sqlOp: "IN",
        formatOp: function formatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          if (valueSrc == "value")
            return "".concat(field, " IN (").concat(values2.join(", "), ")");
          else
            return "".concat(field, " IN (").concat(values2, ")");
        },
        sqlFormatOp: function sqlFormatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          if (valueSrc == "value") {
            return "".concat(field, " IN (").concat(values2.join(", "), ")");
          } else
            return void 0;
        },
        spelOp: "$contains",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils19;
          for (var _len19 = arguments.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {
            args[_key19] = arguments[_key19];
          }
          return (_this$utils19 = this.utils).mongoFormatOp1.apply(_this$utils19, ["$in", function(v) {
            return v;
          }, false].concat(args));
        },
        reversedOp: "select_not_any_in",
        jsonLogic: "in",
        elasticSearchQueryType: "term"
      },
      select_not_any_in: {
        isNotOp: true,
        label: "Not in",
        labelForFormat: "NOT IN",
        sqlOp: "NOT IN",
        formatOp: function formatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          if (valueSrc == "value")
            return "".concat(field, " NOT IN (").concat(values2.join(", "), ")");
          else
            return "".concat(field, " NOT IN (").concat(values2, ")");
        },
        sqlFormatOp: function sqlFormatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          if (valueSrc == "value") {
            return "".concat(field, " NOT IN (").concat(values2.join(", "), ")");
          } else
            return void 0;
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils20;
          for (var _len20 = arguments.length, args = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {
            args[_key20] = arguments[_key20];
          }
          return (_this$utils20 = this.utils).mongoFormatOp1.apply(_this$utils20, ["$nin", function(v) {
            return v;
          }, false].concat(args));
        },
        reversedOp: "select_any_in"
      },
      multiselect_contains: {
        label: "Contains",
        labelForFormat: "CONTAINS",
        formatOp: function formatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          if (valueSrc == "value")
            return "".concat(field, " CONTAINS [").concat(values2.join(", "), "]");
          else
            return "".concat(field, " CONTAINS ").concat(values2);
        },
        reversedOp: "multiselect_not_contains",
        jsonLogic2: "some-in",
        jsonLogic: function jsonLogic(field, op, vals) {
          return {
            "some": [field, {
              "in": [{
                "var": ""
              }, vals]
            }]
          };
        },
        spelOp: "CollectionUtils.containsAny()",
        elasticSearchQueryType: "term",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils21;
          for (var _len21 = arguments.length, args = new Array(_len21), _key21 = 0; _key21 < _len21; _key21++) {
            args[_key21] = arguments[_key21];
          }
          return (_this$utils21 = this.utils).mongoFormatOp1.apply(_this$utils21, ["$in", function(v) {
            return v;
          }, false].concat(args));
        }
      },
      multiselect_not_contains: {
        isNotOp: true,
        label: "Not contains",
        labelForFormat: "NOT CONTAINS",
        formatOp: function formatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          if (valueSrc == "value")
            return "".concat(field, " NOT CONTAINS [").concat(values2.join(", "), "]");
          else
            return "".concat(field, " NOT CONTAINS ").concat(values2);
        },
        reversedOp: "multiselect_contains"
      },
      multiselect_equals: {
        label: "Equals",
        labelForFormat: "==",
        sqlOp: "=",
        formatOp: function formatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          var opStr = isForDisplay ? "=" : "==";
          if (valueSrc == "value")
            return "".concat(field, " ").concat(opStr, " [").concat(values2.join(", "), "]");
          else
            return "".concat(field, " ").concat(opStr, " ").concat(values2);
        },
        sqlFormatOp: function sqlFormatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          var _this7 = this;
          if (valueSrc == "value")
            return "".concat(field, " = '").concat(values2.map(function(v) {
              return _this7.utils.SqlString.trim(v);
            }).join(","), "'");
          else
            return void 0;
        },
        spelOp: ".equals",
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils22;
          for (var _len22 = arguments.length, args = new Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {
            args[_key22] = arguments[_key22];
          }
          return (_this$utils22 = this.utils).mongoFormatOp1.apply(_this$utils22, ["$eq", function(v) {
            return v;
          }, false].concat(args));
        },
        reversedOp: "multiselect_not_equals",
        jsonLogic2: "all-in",
        jsonLogic: function jsonLogic(field, op, vals) {
          return {
            "all": [field, {
              "in": [{
                "var": ""
              }, vals]
            }]
          };
        },
        elasticSearchQueryType: "term"
      },
      multiselect_not_equals: {
        isNotOp: true,
        label: "Not equals",
        labelForFormat: "!=",
        sqlOp: "<>",
        formatOp: function formatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          if (valueSrc == "value")
            return "".concat(field, " != [").concat(values2.join(", "), "]");
          else
            return "".concat(field, " != ").concat(values2);
        },
        sqlFormatOp: function sqlFormatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          var _this8 = this;
          if (valueSrc == "value")
            return "".concat(field, " != '").concat(values2.map(function(v) {
              return _this8.utils.SqlString.trim(v);
            }).join(","), "'");
          else
            return void 0;
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils23;
          for (var _len23 = arguments.length, args = new Array(_len23), _key23 = 0; _key23 < _len23; _key23++) {
            args[_key23] = arguments[_key23];
          }
          return (_this$utils23 = this.utils).mongoFormatOp1.apply(_this$utils23, ["$ne", function(v) {
            return v;
          }, false].concat(args));
        },
        reversedOp: "multiselect_equals"
      },
      proximity: {
        label: "Proximity search",
        cardinality: 2,
        valueLabels: [{
          label: "Word 1",
          placeholder: "Enter first word"
        }, {
          label: "Word 2",
          placeholder: "Enter second word"
        }],
        textSeparators: [],
        formatOp: function formatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          var val1 = values2.first();
          var val2 = values2.get(1);
          var prox = operatorOptions.get("proximity");
          return "".concat(field, " ").concat(val1, " NEAR/").concat(prox, " ").concat(val2);
        },
        sqlFormatOp: function sqlFormatOp(field, op, values2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          var val1 = values2.first();
          var val2 = values2.get(1);
          var aVal1 = this.utils.SqlString.trim(val1);
          var aVal2 = this.utils.SqlString.trim(val2);
          var prox = operatorOptions.get("proximity");
          return "CONTAINS(".concat(field, ", 'NEAR((").concat(aVal1, ", ").concat(aVal2, "), ").concat(prox, ")')");
        },
        mongoFormatOp: void 0,
        jsonLogic: void 0,
        options: {
          optionLabel: "Near",
          optionTextBefore: "Near",
          optionPlaceholder: "Select words between",
          minProximity: 2,
          maxProximity: 10,
          defaults: {
            proximity: 2
          }
        }
      },
      some: {
        label: "Some",
        labelForFormat: "SOME",
        cardinality: 0,
        jsonLogic: "some",
        spelFormatOp: function spelFormatOp(filteredSize) {
          return "".concat(filteredSize, " > 0");
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils24;
          for (var _len24 = arguments.length, args = new Array(_len24), _key24 = 0; _key24 < _len24; _key24++) {
            args[_key24] = arguments[_key24];
          }
          return (_this$utils24 = this.utils).mongoFormatOp1.apply(_this$utils24, ["$gt", function(v) {
            return 0;
          }, false].concat(args));
        }
      },
      all: {
        label: "All",
        labelForFormat: "ALL",
        cardinality: 0,
        jsonLogic: "all",
        spelFormatOp: function spelFormatOp(filteredSize, op, fullSize) {
          return "".concat(filteredSize, " == ").concat(fullSize);
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils25;
          for (var _len25 = arguments.length, args = new Array(_len25), _key25 = 0; _key25 < _len25; _key25++) {
            args[_key25] = arguments[_key25];
          }
          return (_this$utils25 = this.utils).mongoFormatOp1.apply(_this$utils25, ["$eq", function(v) {
            return v;
          }, false].concat(args));
        }
      },
      none: {
        label: "None",
        labelForFormat: "NONE",
        cardinality: 0,
        jsonLogic: "none",
        spelFormatOp: function spelFormatOp(filteredSize) {
          return "".concat(filteredSize, " == 0");
        },
        mongoFormatOp: function mongoFormatOp() {
          var _this$utils26;
          for (var _len26 = arguments.length, args = new Array(_len26), _key26 = 0; _key26 < _len26; _key26++) {
            args[_key26] = arguments[_key26];
          }
          return (_this$utils26 = this.utils).mongoFormatOp1.apply(_this$utils26, ["$eq", function(v) {
            return 0;
          }, false].concat(args));
        }
      }
    };
    var widgets$2 = {
      text: {
        type: "text",
        jsType: "string",
        valueSrc: "value",
        valueLabel: "String",
        valuePlaceholder: "Enter string",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          return isForDisplay ? this.utils.stringifyForDisplay(val) : JSON.stringify(val);
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          if (opDef.spelOp == "matches" && op != "regex") {
            var regex;
            if (op == "starts_with") {
              regex = "(?s)^".concat(this.utils.escapeRegExp(val), ".*");
            } else if (op == "ends_with") {
              regex = "(?s).*".concat(this.utils.escapeRegExp(val), "$");
            } else {
              regex = "(?s).*".concat(this.utils.escapeRegExp(val), ".*");
            }
            return this.utils.spelEscape(regex);
          } else {
            return this.utils.spelEscape(val);
          }
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          if (opDef.sqlOp == "LIKE" || opDef.sqlOp == "NOT LIKE") {
            return this.utils.SqlString.escapeLike(val, op != "starts_with", op != "ends_with");
          } else {
            return this.utils.SqlString.escape(val);
          }
        },
        toJS: function toJS(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      textarea: {
        type: "text",
        jsType: "string",
        valueSrc: "value",
        valueLabel: "Text",
        valuePlaceholder: "Enter text",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          return isForDisplay ? this.utils.stringifyForDisplay(val) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          if (opDef.sqlOp == "LIKE" || opDef.sqlOp == "NOT LIKE") {
            return this.utils.SqlString.escapeLike(val, op != "starts_with", op != "ends_with");
          } else {
            return this.utils.SqlString.escape(val);
          }
        },
        spelFormatValue: function spelFormatValue(val) {
          return this.utils.spelEscape(val);
        },
        toJS: function toJS(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        },
        fullWidth: true
      },
      number: {
        type: "number",
        jsType: "number",
        valueSrc: "value",
        valueLabel: "Number",
        valuePlaceholder: "Enter number",
        valueLabels: [{
          label: "Number from",
          placeholder: "Enter number from"
        }, {
          label: "Number to",
          placeholder: "Enter number to"
        }],
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          return isForDisplay ? this.utils.stringifyForDisplay(val) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return this.utils.SqlString.escape(val);
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef) {
          var isFloat = wgtDef.step && !Number.isInteger(wgtDef.step);
          return this.utils.spelEscape(val, isFloat);
        },
        toJS: function toJS(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      slider: {
        type: "number",
        jsType: "number",
        valueSrc: "value",
        valueLabel: "Number",
        valuePlaceholder: "Enter number or move slider",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          return isForDisplay ? this.utils.stringifyForDisplay(val) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return this.utils.SqlString.escape(val);
        },
        spelFormatValue: function spelFormatValue(val) {
          return this.utils.spelEscape(val);
        },
        toJS: function toJS(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      select: {
        type: "select",
        jsType: "string",
        valueSrc: "value",
        valueLabel: "Value",
        valuePlaceholder: "Select value",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          var valLabel = this.utils.getTitleInListValues(fieldDef.fieldSettings.listValues || fieldDef.asyncListValues, val);
          return isForDisplay ? this.utils.stringifyForDisplay(valLabel) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return this.utils.SqlString.escape(val);
        },
        spelFormatValue: function spelFormatValue(val) {
          return this.utils.spelEscape(val);
        },
        toJS: function toJS(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      multiselect: {
        type: "multiselect",
        jsType: "array",
        valueSrc: "value",
        valueLabel: "Values",
        valuePlaceholder: "Select values",
        formatValue: function formatValue2(vals, fieldDef, wgtDef, isForDisplay) {
          var _this9 = this;
          var valsLabels = vals.map(function(v) {
            return _this9.utils.getTitleInListValues(fieldDef.fieldSettings.listValues || fieldDef.asyncListValues, v);
          });
          return isForDisplay ? valsLabels.map(this.utils.stringifyForDisplay) : vals.map(JSON.stringify);
        },
        sqlFormatValue: function sqlFormatValue(vals, fieldDef, wgtDef, op, opDef) {
          var _this10 = this;
          return vals.map(function(v) {
            return _this10.utils.SqlString.escape(v);
          });
        },
        spelFormatValue: function spelFormatValue(vals, fieldDef, wgtDef, op, opDef) {
          var isCallable = opDef.spelOp && opDef.spelOp[0] == "$";
          var res = this.utils.spelEscape(vals);
          if (isCallable) {
            res = this.utils.spelFixList(res);
          }
          return res;
        },
        toJS: function toJS(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      date: {
        type: "date",
        jsType: "string",
        valueSrc: "value",
        dateFormat: "DD.MM.YYYY",
        valueFormat: "YYYY-MM-DD",
        valueLabel: "Date",
        valuePlaceholder: "Enter date",
        valueLabels: [{
          label: "Date from",
          placeholder: "Enter date from"
        }, {
          label: "Date to",
          placeholder: "Enter date to"
        }],
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return isForDisplay ? dateVal.format(wgtDef.dateFormat) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return this.utils.SqlString.escape(dateVal.format("YYYY-MM-DD"));
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return "new java.text.SimpleDateFormat('yyyy-MM-dd').parse('".concat(dateVal.format("YYYY-MM-DD"), "')");
        },
        jsonLogic: function jsonLogic(val, fieldDef, wgtDef) {
          return this.utils.moment(val, wgtDef.valueFormat).toDate();
        },
        toJS: function toJS(val, fieldSettings) {
          var dateVal = this.utils.moment(val, fieldSettings.valueFormat);
          return dateVal.isValid() ? dateVal.toDate() : void 0;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return dateVal.isValid() ? dateVal.toDate() : void 0;
        }
      },
      time: {
        type: "time",
        jsType: "string",
        valueSrc: "value",
        timeFormat: "HH:mm",
        valueFormat: "HH:mm:ss",
        use12Hours: false,
        valueLabel: "Time",
        valuePlaceholder: "Enter time",
        valueLabels: [{
          label: "Time from",
          placeholder: "Enter time from"
        }, {
          label: "Time to",
          placeholder: "Enter time to"
        }],
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return isForDisplay ? dateVal.format(wgtDef.timeFormat) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return this.utils.SqlString.escape(dateVal.format("HH:mm:ss"));
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return "T(java.time.LocalTime).parse('".concat(dateVal.format("HH:mm:ss"), "')");
        },
        jsonLogic: function jsonLogic(val, fieldDef, wgtDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return dateVal.get("hour") * 60 * 60 + dateVal.get("minute") * 60 + dateVal.get("second");
        },
        toJS: function toJS(val, fieldSettings) {
          var dateVal = this.utils.moment(val, fieldSettings.valueFormat);
          return dateVal.isValid() ? dateVal.get("hour") * 60 * 60 + dateVal.get("minute") * 60 + dateVal.get("second") : void 0;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return dateVal.get("hour") * 60 * 60 + dateVal.get("minute") * 60 + dateVal.get("second");
        },
        elasticSearchFormatValue: function elasticSearchFormatValue(queryType, value2, operator, fieldName) {
          return {
            script: {
              script: {
                source: "doc[".concat(fieldName, "][0].getHour() >== params.min && doc[").concat(fieldName, "][0].getHour() <== params.max"),
                params: {
                  min: value2[0],
                  max: value2[1]
                }
              }
            }
          };
        }
      },
      datetime: {
        type: "datetime",
        jsType: "string",
        valueSrc: "value",
        timeFormat: "HH:mm",
        dateFormat: "DD.MM.YYYY",
        valueFormat: "YYYY-MM-DD HH:mm:ss",
        use12Hours: false,
        valueLabel: "Datetime",
        valuePlaceholder: "Enter datetime",
        valueLabels: [{
          label: "Datetime from",
          placeholder: "Enter datetime from"
        }, {
          label: "Datetime to",
          placeholder: "Enter datetime to"
        }],
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return isForDisplay ? dateVal.format(wgtDef.dateFormat + " " + wgtDef.timeFormat) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return this.utils.SqlString.escape(dateVal.toDate());
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return "new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss').parse('".concat(dateVal.format("YYYY-MM-DD HH:mm:ss"), "')");
        },
        jsonLogic: function jsonLogic(val, fieldDef, wgtDef) {
          return this.utils.moment(val, wgtDef.valueFormat).toDate();
        },
        toJS: function toJS(val, fieldSettings) {
          var dateVal = this.utils.moment(val, fieldSettings.valueFormat);
          return dateVal.isValid() ? dateVal.toDate() : void 0;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          var dateVal = this.utils.moment(val, wgtDef.valueFormat);
          return dateVal.isValid() ? dateVal.toDate() : void 0;
        }
      },
      "boolean": {
        type: "boolean",
        jsType: "boolean",
        valueSrc: "value",
        labelYes: "Yes",
        labelNo: "No",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          return isForDisplay ? val ? "Yes" : "No" : JSON.stringify(!!val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return this.utils.SqlString.escape(val);
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return this.utils.spelEscape(val);
        },
        defaultValue: false,
        toJS: function toJS(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      field: {
        valueSrc: "field",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay, op, opDef, rightFieldDef) {
          return isForDisplay ? rightFieldDef.label || val : val;
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef, rightFieldDef) {
          return val;
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return val;
        },
        valueLabel: "Field to compare",
        valuePlaceholder: "Select field to compare"
      },
      func: {
        valueSrc: "func",
        valueLabel: "Function",
        valuePlaceholder: "Select function"
      },
      case_value: {
        valueSrc: "value",
        type: "case_value",
        spelFormatValue: function spelFormatValue(val) {
          return this.utils.spelEscape(val === "" ? null : val);
        },
        spelImportValue: function spelImportValue(val) {
          return [val.value, []];
        }
      }
    };
    var types$3 = {
      text: {
        defaultOperator: "equal",
        mainWidget: "text",
        widgets: {
          text: {
            operators: ["equal", "not_equal", "like", "not_like", "starts_with", "ends_with", "proximity", "is_empty", "is_not_empty", "is_null", "is_not_null"],
            widgetProps: {},
            opProps: {}
          },
          textarea: {
            operators: ["equal", "not_equal", "like", "not_like", "starts_with", "ends_with", "is_empty", "is_not_empty", "is_null", "is_not_null"],
            widgetProps: {},
            opProps: {}
          },
          field: {
            operators: [
              "equal",
              "not_equal",
              "proximity"
            ]
          }
        }
      },
      number: {
        defaultOperator: "equal",
        mainWidget: "number",
        widgets: {
          number: {
            operators: [
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              "between",
              "not_between",
              "is_null",
              "is_not_null"
            ]
          },
          slider: {
            operators: [
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      date: {
        defaultOperator: "equal",
        widgets: {
          date: {
            operators: [
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              "between",
              "not_between",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      time: {
        defaultOperator: "equal",
        widgets: {
          time: {
            operators: [
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              "between",
              "not_between",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      datetime: {
        defaultOperator: "equal",
        widgets: {
          datetime: {
            operators: [
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              "between",
              "not_between",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      select: {
        mainWidget: "select",
        defaultOperator: "select_equals",
        widgets: {
          select: {
            operators: [
              "select_equals",
              "select_not_equals",
              "is_null",
              "is_not_null"
            ]
          },
          multiselect: {
            operators: [
              "select_any_in",
              "select_not_any_in",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      multiselect: {
        defaultOperator: "multiselect_equals",
        widgets: {
          multiselect: {
            operators: [
              "multiselect_contains",
              "multiselect_not_contains",
              "multiselect_equals",
              "multiselect_not_equals",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      "boolean": {
        defaultOperator: "equal",
        widgets: {
          "boolean": {
            operators: ["equal", "not_equal", "is_null", "is_not_null"],
            widgetProps: {}
          },
          field: {
            operators: ["equal", "not_equal"]
          }
        }
      },
      "!group": {
        defaultOperator: "some",
        mainWidget: "number",
        widgets: {
          number: {
            widgetProps: {
              min: 0
            },
            operators: [
              "some",
              "all",
              "none",
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              "between",
              "not_between"
            ],
            opProps: {
              equal: {
                label: "Count =="
              },
              not_equal: {
                label: "Count !="
              },
              less: {
                label: "Count <"
              },
              less_or_equal: {
                label: "Count <="
              },
              greater: {
                label: "Count >"
              },
              greater_or_equal: {
                label: "Count >="
              },
              between: {
                label: "Count between"
              },
              not_between: {
                label: "Count not between"
              }
            }
          }
        }
      },
      "case_value": {
        mainWidget: "case_value",
        widgets: {
          case_value: {}
        }
      }
    };
    var settings$2 = _objectSpread$k(_objectSpread$k({}, settings$3), {}, {
      convertableWidgets: {
        "number": ["slider", "rangeslider"],
        "slider": ["number", "rangeslider"],
        "rangeslider": ["number", "slider"],
        "text": ["textarea"],
        "textarea": ["text"]
      },
      formatSpelField: function formatSpelField(field, parentField, parts, partsExt, fieldDefinition, config2) {
        var _this11 = this;
        var fieldName = partsExt.map(function(_ref, ind) {
          var key = _ref.key, parent2 = _ref.parent;
          if (ind == 0) {
            if (parent2 == "[map]")
              return "#this[".concat(_this11.utils.spelEscape(key), "]");
            else if (parent2 == "[class]")
              return key;
            else
              return key;
          } else {
            if (parent2 == "map" || parent2 == "[map]")
              return "[".concat(_this11.utils.spelEscape(key), "]");
            else if (parent2 == "class" || parent2 == "[class]")
              return ".".concat(key);
            else
              return ".".concat(key);
          }
        }).join("");
        if (fieldDefinition.isSpelVariable) {
          fieldName = "#" + fieldName;
        }
        return fieldName;
      },
      sqlFormatReverse: function sqlFormatReverse(q) {
        if (q == void 0)
          return void 0;
        return "NOT(" + q + ")";
      },
      spelFormatReverse: function spelFormatReverse(q) {
        if (q == void 0)
          return void 0;
        return "!(" + q + ")";
      },
      formatReverse: function formatReverse(q, operator, reversedOp, operatorDefinition, revOperatorDefinition, isForDisplay) {
        if (q == void 0)
          return void 0;
        if (isForDisplay)
          return "NOT (" + q + ")";
        else
          return "!(" + q + ")";
      },
      formatAggr: function formatAggr(whereStr, aggrField, operator, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay, aggrFieldDef) {
        var labelForFormat = opDef.labelForFormat, cardinality = opDef.cardinality;
        if (cardinality == 0) {
          var cond = whereStr ? " HAVE ".concat(whereStr) : "";
          return "".concat(labelForFormat, " OF ").concat(aggrField).concat(cond);
        } else if (cardinality == void 0 || cardinality == 1) {
          var _cond = whereStr ? " WHERE ".concat(whereStr) : "";
          return "COUNT OF ".concat(aggrField).concat(_cond, " ").concat(labelForFormat, " ").concat(value2);
        } else if (cardinality == 2) {
          var _cond2 = whereStr ? " WHERE ".concat(whereStr) : "";
          var valFrom = value2.first();
          var valTo = value2.get(1);
          return "COUNT OF ".concat(aggrField).concat(_cond2, " ").concat(labelForFormat, " ").concat(valFrom, " AND ").concat(valTo);
        }
      },
      jsonLogic: {
        groupVarKey: "var",
        altVarKey: "var",
        lockedOp: "locked"
      },
      canCompareFieldWithField: function canCompareFieldWithField(leftField, leftFieldConfig, rightField, rightFieldConfig) {
        return true;
      },
      valueSourcesInfo: {
        value: {
          label: "Value"
        },
        field: {
          label: "Field",
          widget: "field"
        },
        func: {
          label: "Function",
          widget: "func"
        }
      }
    });
    var _addMixins = function _addMixins2(config2, mixins) {
      var doAdd = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var mixinFuncs = {
        rangeslider: mixinWidgetRangeslider,
        treeselect: mixinWidgetTreeselect,
        treemultiselect: mixinWidgetTreemultiselect,
        rangeable__date: mixinRangeableWidget("date", "date")
      };
      var _iterator = _createForOfIteratorHelper$3(mixins), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var mixName = _step.value;
          var mixinFunc = mixinFuncs[mixName];
          if (mixinFunc) {
            config2 = mixinFunc(config2, doAdd);
          } else {
            throw new Error("Can't ".concat(doAdd ? "add" : "remove", " mixin ").concat(mixName));
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return config2;
    };
    var addMixins = function addMixins2(config2, mixins) {
      return _addMixins(config2, mixins, true);
    };
    var removeMixins = function removeMixins2(config2, mixins) {
      return _addMixins(config2, mixins, false);
    };
    var mixinRangeableWidget = function mixinRangeableWidget2(type, widget) {
      return function(config2) {
        var addMixin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
        var types2 = config2.types;
        types2 = _objectSpread$k(_objectSpread$k({}, types2), {}, _defineProperty$2({}, type, _objectSpread$k(_objectSpread$k({}, types2[type]), {}, {
          widgets: _objectSpread$k({}, types2[type].widgets)
        })));
        if (addMixin) {
          types2[type].widgets[widget] = _objectSpread$k({
            opProps: {
              between: {
                isSpecialRange: true,
                textSeparators: [null, null]
              },
              not_between: {
                isSpecialRange: true,
                textSeparators: [null, null]
              }
            }
          }, types2[type].widgets[widget]);
        } else {
          delete types2[type].widgets[widget];
        }
        return _objectSpread$k(_objectSpread$k({}, config2), {}, {
          types: types2
        });
      };
    };
    var mixinWidgetRangeslider = function mixinWidgetRangeslider2(config2) {
      var addMixin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var widgets2 = config2.widgets, types2 = config2.types;
      widgets2 = _objectSpread$k({}, widgets2);
      if (addMixin) {
        widgets2.rangeslider = _objectSpread$k({
          type: "number",
          jsType: "number",
          valueSrc: "value",
          valueLabel: "Range",
          valuePlaceholder: "Select range",
          valueLabels: [{
            label: "Number from",
            placeholder: "Enter number from"
          }, {
            label: "Number to",
            placeholder: "Enter number to"
          }],
          formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
            return isForDisplay ? this.utils.stringifyForDisplay(val) : JSON.stringify(val);
          },
          sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
            return this.utils.SqlString.escape(val);
          },
          spelFormatValue: function spelFormatValue(val) {
            return this.utils.spelEscape(val);
          },
          singleWidget: "slider",
          toJS: function toJS(val, fieldSettings) {
            return val;
          }
        }, widgets2.rangeslider);
      } else {
        delete widgets2.rangeslider;
      }
      types2 = _objectSpread$k(_objectSpread$k({}, types2), {}, {
        number: _objectSpread$k(_objectSpread$k({}, types2.number), {}, {
          widgets: _objectSpread$k({}, types2.number.widgets)
        })
      });
      if (addMixin) {
        types2.number.widgets.rangeslider = _objectSpread$k({
          opProps: {
            between: {
              isSpecialRange: true
            },
            not_between: {
              isSpecialRange: true
            }
          },
          operators: [
            "between",
            "not_between",
            "is_null",
            "is_not_null"
          ]
        }, types2.number.widgets.rangeslider);
      } else {
        delete types2.number.widgets.rangeslider;
      }
      return _objectSpread$k(_objectSpread$k({}, config2), {}, {
        widgets: widgets2,
        types: types2
      });
    };
    var mixinWidgetTreeselect = function mixinWidgetTreeselect2(config2) {
      var addMixin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var widgets2 = config2.widgets, types2 = config2.types;
      widgets2 = _objectSpread$k({}, widgets2);
      if (addMixin) {
        widgets2.treeselect = _objectSpread$k({
          type: "treeselect",
          jsType: "string",
          valueSrc: "value",
          valueLabel: "Value",
          valuePlaceholder: "Select value",
          formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
            var treeData = fieldDef.fieldSettings.treeValues || fieldDef.fieldSettings.listValues || fieldDef.asyncListValues;
            var valLabel = this.utils.getTitleInListValues(treeData, val);
            return isForDisplay ? this.utils.stringifyForDisplay(valLabel) : JSON.stringify(val);
          },
          sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
            return this.utils.SqlString.escape(val);
          },
          spelFormatValue: function spelFormatValue(val) {
            return this.utils.spelEscape(val);
          },
          toJS: function toJS(val, fieldSettings) {
            return val;
          }
        }, widgets2.treeselect);
      } else {
        delete widgets2.treeselect;
      }
      types2 = _objectSpread$k({}, types2);
      if (addMixin) {
        types2.treeselect = _objectSpread$k({
          mainWidget: "treeselect",
          defaultOperator: "select_equals",
          widgets: {
            treeselect: {
              operators: ["select_equals", "select_not_equals"]
            },
            treemultiselect: {
              operators: ["select_any_in", "select_not_any_in"]
            }
          }
        }, types2.treeselect);
      } else {
        delete types2.treeselect;
      }
      return _objectSpread$k(_objectSpread$k({}, config2), {}, {
        widgets: widgets2,
        types: types2
      });
    };
    var mixinWidgetTreemultiselect = function mixinWidgetTreemultiselect2(config2) {
      var addMixin = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var widgets2 = config2.widgets, types2 = config2.types;
      widgets2 = _objectSpread$k({}, widgets2);
      if (addMixin) {
        widgets2.treemultiselect = _objectSpread$k({
          type: "treemultiselect",
          jsType: "array",
          valueSrc: "value",
          valueLabel: "Values",
          valuePlaceholder: "Select values",
          formatValue: function formatValue2(vals, fieldDef, wgtDef, isForDisplay) {
            var _this12 = this;
            var treeData = fieldDef.fieldSettings.treeValues || fieldDef.fieldSettings.listValues || fieldDef.asyncListValues;
            var valsLabels = vals.map(function(v) {
              return _this12.utils.getTitleInListValues(treeData, v);
            });
            return isForDisplay ? valsLabels.map(this.utils.stringifyForDisplay) : vals.map(JSON.stringify);
          },
          sqlFormatValue: function sqlFormatValue(vals, fieldDef, wgtDef, op, opDef) {
            var _this13 = this;
            return vals.map(function(v) {
              return _this13.utils.SqlString.escape(v);
            });
          },
          spelFormatValue: function spelFormatValue(val) {
            return this.utils.spelEscape(val);
          },
          toJS: function toJS(val, fieldSettings) {
            return val;
          }
        }, widgets2.treemultiselect);
      } else {
        delete widgets2.treemultiselect;
      }
      types2 = _objectSpread$k({}, types2);
      if (addMixin) {
        types2.treemultiselect = _objectSpread$k({
          defaultOperator: "multiselect_equals",
          widgets: {
            treemultiselect: {
              operators: ["multiselect_equals", "multiselect_not_equals"]
            }
          }
        }, types2.treemultiselect);
      } else {
        delete types2.treemultiselect;
      }
      return _objectSpread$k(_objectSpread$k({}, config2), {}, {
        widgets: widgets2,
        types: types2
      });
    };
    var ConfigMixins = {
      addMixins,
      removeMixins
    };
    var config$3 = {
      conjunctions: conjunctions$1,
      operators: operators$1,
      widgets: widgets$2,
      types: types$3,
      settings: settings$2,
      ctx: ctx$2
    };
    config$3 = addMixins(config$3, ["rangeslider", "treeselect", "treemultiselect"]);
    const CoreConfig = config$3;
    var ADD_GROUP = "ADD_GROUP";
    var ADD_CASE_GROUP = "ADD_CASE_GROUP";
    var REMOVE_GROUP = "REMOVE_GROUP";
    var SET_CONJUNCTION = "SET_CONJUNCTION";
    var SET_NOT = "SET_NOT";
    var ADD_RULE = "ADD_RULE";
    var REMOVE_RULE = "REMOVE_RULE";
    var SET_FIELD = "SET_FIELD";
    var SET_OPERATOR = "SET_OPERATOR";
    var SET_VALUE = "SET_VALUE";
    var SET_VALUE_SRC = "SET_VALUE_SRC";
    var SET_OPERATOR_OPTION = "SET_OPERATOR_OPTION";
    var SET_LOCK = "SET_LOCK";
    var SET_TREE = "SET_TREE";
    var MOVE_ITEM = "MOVE_ITEM";
    var PLACEMENT_AFTER$1 = "after";
    var PLACEMENT_BEFORE$1 = "before";
    var PLACEMENT_APPEND$1 = "append";
    var PLACEMENT_PREPEND$1 = "prepend";
    var SET_DRAG_PROGRESS$1 = "SET_DRAG_PROGRESS";
    var SET_DRAG_START$1 = "SET_DRAG_START";
    var SET_DRAG_END$1 = "SET_DRAG_END";
    var baseFor = _baseFor, keys$1 = keys_1;
    function baseForOwn$1(object, iteratee) {
      return object && baseFor(object, iteratee, keys$1);
    }
    var _baseForOwn = baseForOwn$1;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd$1(value2) {
      this.__data__.set(value2, HASH_UNDEFINED);
      return this;
    }
    var _setCacheAdd = setCacheAdd$1;
    function setCacheHas$1(value2) {
      return this.__data__.has(value2);
    }
    var _setCacheHas = setCacheHas$1;
    var MapCache = _MapCache, setCacheAdd = _setCacheAdd, setCacheHas = _setCacheHas;
    function SetCache$1(values2) {
      var index = -1, length2 = values2 == null ? 0 : values2.length;
      this.__data__ = new MapCache();
      while (++index < length2) {
        this.add(values2[index]);
      }
    }
    SetCache$1.prototype.add = SetCache$1.prototype.push = setCacheAdd;
    SetCache$1.prototype.has = setCacheHas;
    var _SetCache = SetCache$1;
    function arraySome$1(array, predicate) {
      var index = -1, length2 = array == null ? 0 : array.length;
      while (++index < length2) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    var _arraySome = arraySome$1;
    function cacheHas$1(cache, key) {
      return cache.has(key);
    }
    var _cacheHas = cacheHas$1;
    var SetCache = _SetCache, arraySome = _arraySome, cacheHas = _cacheHas;
    var COMPARE_PARTIAL_FLAG$5 = 1, COMPARE_UNORDERED_FLAG$3 = 2;
    function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    var _equalArrays = equalArrays$2;
    function mapToArray$1(map2) {
      var index = -1, result = Array(map2.size);
      map2.forEach(function(value2, key) {
        result[++index] = [key, value2];
      });
      return result;
    }
    var _mapToArray = mapToArray$1;
    function setToArray$1(set2) {
      var index = -1, result = Array(set2.size);
      set2.forEach(function(value2) {
        result[++index] = value2;
      });
      return result;
    }
    var _setToArray = setToArray$1;
    var Symbol$1 = _Symbol, Uint8Array2 = _Uint8Array, eq = eq_1, equalArrays$1 = _equalArrays, mapToArray = _mapToArray, setToArray = _setToArray;
    var COMPARE_PARTIAL_FLAG$4 = 1, COMPARE_UNORDERED_FLAG$2 = 2;
    var boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]";
    var symbolProto = Symbol$1 ? Symbol$1.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG$2;
          stack.set(object, other);
          var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    var _equalByTag = equalByTag$1;
    var getAllKeys = _getAllKeys;
    var COMPARE_PARTIAL_FLAG$3 = 1;
    var objectProto$1 = Object.prototype;
    var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
    function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty$1.call(other, key))) {
          return false;
        }
      }
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    var _equalObjects = equalObjects$1;
    var Stack$1 = _Stack, equalArrays = _equalArrays, equalByTag = _equalByTag, equalObjects = _equalObjects, getTag = _getTag, isArray$1 = isArray_1, isBuffer = isBuffer$4.exports, isTypedArray = isTypedArray_1;
    var COMPARE_PARTIAL_FLAG$2 = 1;
    var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray$1(object), othIsArr = isArray$1(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack$1());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack$1());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack$1());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    var _baseIsEqualDeep = baseIsEqualDeep$1;
    var baseIsEqualDeep = _baseIsEqualDeep, isObjectLike = isObjectLike_1;
    function baseIsEqual$2(value2, other, bitmask, customizer, stack) {
      if (value2 === other) {
        return true;
      }
      if (value2 == null || other == null || !isObjectLike(value2) && !isObjectLike(other)) {
        return value2 !== value2 && other !== other;
      }
      return baseIsEqualDeep(value2, other, bitmask, customizer, baseIsEqual$2, stack);
    }
    var _baseIsEqual = baseIsEqual$2;
    var Stack = _Stack, baseIsEqual$1 = _baseIsEqual;
    var COMPARE_PARTIAL_FLAG$1 = 1, COMPARE_UNORDERED_FLAG$1 = 2;
    function baseIsMatch$1(object, source, matchData, customizer) {
      var index = matchData.length, length2 = index, noCustomizer = !customizer;
      if (object == null) {
        return !length2;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length2) {
        data = matchData[index];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    var _baseIsMatch = baseIsMatch$1;
    var isObject$3 = isObject_1;
    function isStrictComparable$2(value2) {
      return value2 === value2 && !isObject$3(value2);
    }
    var _isStrictComparable = isStrictComparable$2;
    var isStrictComparable$1 = _isStrictComparable, keys = keys_1;
    function getMatchData$1(object) {
      var result = keys(object), length2 = result.length;
      while (length2--) {
        var key = result[length2], value2 = object[key];
        result[length2] = [key, value2, isStrictComparable$1(value2)];
      }
      return result;
    }
    var _getMatchData = getMatchData$1;
    function matchesStrictComparable$2(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    var _matchesStrictComparable = matchesStrictComparable$2;
    var baseIsMatch = _baseIsMatch, getMatchData = _getMatchData, matchesStrictComparable$1 = _matchesStrictComparable;
    function baseMatches$1(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    var _baseMatches = baseMatches$1;
    var baseGet$1 = _baseGet;
    function get$1(object, path, defaultValue2) {
      var result = object == null ? void 0 : baseGet$1(object, path);
      return result === void 0 ? defaultValue2 : result;
    }
    var get_1 = get$1;
    var baseIsEqual = _baseIsEqual, get = get_1, hasIn = hasIn_1, isKey$1 = _isKey, isStrictComparable = _isStrictComparable, matchesStrictComparable = _matchesStrictComparable, toKey$1 = _toKey;
    var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
    function baseMatchesProperty$1(path, srcValue) {
      if (isKey$1(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey$1(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }
    var _baseMatchesProperty = baseMatchesProperty$1;
    function baseProperty$1(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    var _baseProperty = baseProperty$1;
    var baseGet = _baseGet;
    function basePropertyDeep$1(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }
    var _basePropertyDeep = basePropertyDeep$1;
    var baseProperty = _baseProperty, basePropertyDeep = _basePropertyDeep, isKey = _isKey, toKey = _toKey;
    function property$1(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }
    var property_1 = property$1;
    var baseMatches = _baseMatches, baseMatchesProperty = _baseMatchesProperty, identity = identity_1, isArray = isArray_1, property = property_1;
    function baseIteratee$2(value2) {
      if (typeof value2 == "function") {
        return value2;
      }
      if (value2 == null) {
        return identity;
      }
      if (typeof value2 == "object") {
        return isArray(value2) ? baseMatchesProperty(value2[0], value2[1]) : baseMatches(value2);
      }
      return property(value2);
    }
    var _baseIteratee = baseIteratee$2;
    var baseAssignValue = _baseAssignValue, baseForOwn = _baseForOwn, baseIteratee$1 = _baseIteratee;
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = baseIteratee$1(iteratee);
      baseForOwn(object, function(value2, key, object2) {
        baseAssignValue(result, key, iteratee(value2, key, object2));
      });
      return result;
    }
    var mapValues_1 = mapValues;
    function _createForOfIteratorHelper$2(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$2(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$2(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$2(o, minLen);
    }
    function _arrayLikeToArray$2(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$j(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$j(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$j(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$j(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var addNewGroup = function addNewGroup2(state, path, type, groupUuid, properties2, config2) {
      var children = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      var meta = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : {};
      var shouldCreateEmptyGroup = config2.settings.shouldCreateEmptyGroup;
      var groupPath = path.push(groupUuid);
      var canAddNewRule = !shouldCreateEmptyGroup;
      var isDefaultCase = !!(meta !== null && meta !== void 0 && meta.isDefaultCase);
      var origState = state;
      state = addItem(state, path, type, groupUuid, defaultGroupProperties(config2).merge(properties2 || {}), config2, children);
      if (state !== origState) {
        if (!children && !isDefaultCase) {
          state = state.setIn(expandTreePath(groupPath, "children1"), new Immutable.OrderedMap());
          if (canAddNewRule) {
            state = addItem(state, groupPath, "rule", uuid$1(), defaultRuleProperties(config2), config2);
          }
        }
        state = fixPathsInTree(state);
      }
      return state;
    };
    var removeGroup$1 = function removeGroup2(state, path, config2) {
      state = removeItem(state, path);
      var canLeaveEmptyGroup = config2.settings.canLeaveEmptyGroup;
      var parentPath = path.slice(0, -1);
      var isEmptyParentGroup = !hasChildren(state, parentPath);
      if (isEmptyParentGroup && !canLeaveEmptyGroup) {
        state = fixEmptyGroupsInTree(state);
        if (isEmptyTree(state) && !canLeaveEmptyGroup) {
          state = addItem(state, new Immutable.List(), "rule", uuid$1(), defaultRuleProperties(config2), config2);
        }
      }
      state = fixPathsInTree(state);
      return state;
    };
    var removeRule$1 = function removeRule2(state, path, config2) {
      state = removeItem(state, path);
      var canLeaveEmptyGroup = config2.settings.canLeaveEmptyGroup;
      var parentPath = path.pop();
      var parent2 = state.getIn(expandTreePath(parentPath));
      var parentField = parent2.getIn(["properties", "field"]);
      var parentOperator = parent2.getIn(["properties", "operator"]);
      parent2.getIn(["properties", "value", 0]);
      var parentFieldConfig = parentField ? getFieldConfig$8(config2, parentField) : null;
      var parentOperatorConfig = parentOperator ? getOperatorConfig$4(config2, parentOperator, parentField) : null;
      var hasGroupCountRule = parentField && parentOperator && parentOperatorConfig.cardinality != 0;
      var isParentRuleGroup = parent2.get("type") == "rule_group";
      var isEmptyParentGroup = !hasChildren(state, parentPath);
      var canLeaveEmpty = isParentRuleGroup ? hasGroupCountRule && parentFieldConfig.initialEmptyWhere : canLeaveEmptyGroup;
      if (isEmptyParentGroup && !canLeaveEmpty) {
        if (isParentRuleGroup) {
          state = state.deleteIn(expandTreePath(parentPath));
        }
        state = fixEmptyGroupsInTree(state);
        if (isEmptyTree(state) && !canLeaveEmptyGroup) {
          state = addItem(state, new Immutable.List(), "rule", uuid$1(), defaultRuleProperties(config2), config2);
        }
      }
      state = fixPathsInTree(state);
      return state;
    };
    var setNot$1 = function setNot2(state, path, not) {
      return state.setIn(expandTreePath(path, "properties", "not"), not);
    };
    var setLock$1 = function setLock2(state, path, lock) {
      return removeIsLockedInTree(state.setIn(expandTreePath(path, "properties", "isLocked"), lock));
    };
    var setConjunction$1 = function setConjunction2(state, path, conjunction) {
      return state.setIn(expandTreePath(path, "properties", "conjunction"), conjunction);
    };
    var _addChildren1 = function _addChildren12(config2, item, children) {
      if (children && Array.isArray(children)) {
        item.children1 = new Immutable.OrderedMap(children.reduce(function(map2, it) {
          var id1 = uuid$1();
          var it1 = _objectSpread$j(_objectSpread$j({}, it), {}, {
            properties: defaultItemProperties(config2, it).merge(it.properties || {}),
            id: id1
          });
          _addChildren12(config2, it1, it1.children1);
          return _objectSpread$j(_objectSpread$j({}, map2), {}, _defineProperty$2({}, id1, new Immutable.Map(it1)));
        }, {}));
      }
    };
    var addItem = function addItem2(state, path, type, id, properties2, config2) {
      var children = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      if (type == "switch_group")
        throw new Error("Can't add switch_group programmatically");
      var _config$settings = config2.settings, maxNumberOfCases = _config$settings.maxNumberOfCases, maxNumberOfRules = _config$settings.maxNumberOfRules, maxNesting = _config$settings.maxNesting;
      var rootType = state.get("type");
      var isTernary = rootType == "switch_group";
      var targetItem = state.getIn(expandTreePath(path));
      var caseGroup = isTernary ? state.getIn(expandTreePath(path.take(2))) : null;
      var childrenPath = expandTreePath(path, "children1");
      var targetChildren = state.getIn(childrenPath);
      var hasChildren2 = !!targetChildren && targetChildren.size;
      var targetChildrenSize = hasChildren2 ? targetChildren.size : null;
      var currentNumber, maxNumber;
      if (type == "case_group") {
        currentNumber = targetChildrenSize;
        maxNumber = maxNumberOfCases;
      } else if (type == "group") {
        currentNumber = path.size;
        maxNumber = maxNesting;
      } else if ((targetItem === null || targetItem === void 0 ? void 0 : targetItem.get("type")) == "rule_group")
        ;
      else {
        currentNumber = isTernary ? getTotalRulesCountInTree$2(caseGroup) : getTotalRulesCountInTree$2(state);
        maxNumber = maxNumberOfRules;
      }
      var canAdd = maxNumber && currentNumber ? currentNumber < maxNumber : true;
      var item = {
        type,
        id,
        properties: properties2
      };
      _addChildren1(config2, item, children);
      var isLastDefaultCase = type == "case_group" && hasChildren2 && targetChildren.last().get("children1") == null;
      if (canAdd) {
        var newChildren = new Immutable.OrderedMap(_defineProperty$2({}, id, new Immutable.Map(item)));
        if (!hasChildren2) {
          state = state.setIn(childrenPath, newChildren);
        } else if (isLastDefaultCase) {
          var _Immutable$OrderedMap2;
          var last2 = targetChildren.last();
          var newChildrenWithLast = new Immutable.OrderedMap((_Immutable$OrderedMap2 = {}, _defineProperty$2(_Immutable$OrderedMap2, id, new Immutable.Map(item)), _defineProperty$2(_Immutable$OrderedMap2, last2.get("id"), last2), _Immutable$OrderedMap2));
          state = state.deleteIn(expandTreePath(childrenPath, "children1", last2.get("id")));
          state = state.mergeIn(childrenPath, newChildrenWithLast);
        } else {
          state = state.mergeIn(childrenPath, newChildren);
        }
        state = fixPathsInTree(state);
      }
      return state;
    };
    var removeItem = function removeItem2(state, path) {
      state = state.deleteIn(expandTreePath(path));
      state = fixPathsInTree(state);
      return state;
    };
    var moveItem$1 = function moveItem2(state, fromPath, toPath, placement, config2) {
      var from2 = getItemByPath(state, fromPath);
      var sourcePath = fromPath.pop();
      var source = fromPath.size > 1 ? getItemByPath(state, sourcePath) : null;
      var sourceChildren = source ? source.get("children1") : null;
      var to2 = getItemByPath(state, toPath);
      var targetPath = placement == PLACEMENT_APPEND$1 || placement == PLACEMENT_PREPEND$1 ? toPath : toPath.pop();
      var target = placement == PLACEMENT_APPEND$1 || placement == PLACEMENT_PREPEND$1 ? to2 : toPath.size > 1 ? getItemByPath(state, targetPath) : null;
      var targetChildren = target ? target.get("children1") : null;
      if (!source || !target || !from2)
        return state;
      var isSameParent = source.get("id") == target.get("id");
      var isSourceInsideTarget = targetPath.size < sourcePath.size && deepEqual(targetPath.toArray(), sourcePath.toArray().slice(0, targetPath.size));
      var isTargetInsideSource = targetPath.size > sourcePath.size && deepEqual(sourcePath.toArray(), targetPath.toArray().slice(0, sourcePath.size));
      var sourceSubpathFromTarget = null;
      var targetSubpathFromSource = null;
      if (isSourceInsideTarget) {
        sourceSubpathFromTarget = Immutable.List(sourcePath.toArray().slice(targetPath.size));
      } else if (isTargetInsideSource) {
        targetSubpathFromSource = Immutable.List(targetPath.toArray().slice(sourcePath.size));
      }
      var newTargetChildren = targetChildren, newSourceChildren = sourceChildren;
      if (!isTargetInsideSource)
        newSourceChildren = newSourceChildren["delete"](from2.get("id"));
      if (isSameParent) {
        newTargetChildren = newSourceChildren;
      } else if (isSourceInsideTarget) {
        newTargetChildren = newTargetChildren.updateIn(expandTreeSubpath(sourceSubpathFromTarget, "children1"), function(_oldChildren) {
          return newSourceChildren;
        });
      }
      if (placement == PLACEMENT_BEFORE$1 || placement == PLACEMENT_AFTER$1) {
        newTargetChildren = Immutable.OrderedMap().withMutations(function(r2) {
          var _iterator = _createForOfIteratorHelper$2(newTargetChildren.entries()), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var _step$value = _slicedToArray(_step.value, 2), itemId = _step$value[0], item = _step$value[1];
              if (itemId == to2.get("id") && placement == PLACEMENT_BEFORE$1) {
                r2.set(from2.get("id"), from2);
              }
              r2.set(itemId, item);
              if (itemId == to2.get("id") && placement == PLACEMENT_AFTER$1) {
                r2.set(from2.get("id"), from2);
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        });
      } else if (placement == PLACEMENT_APPEND$1) {
        newTargetChildren = newTargetChildren.merge(_defineProperty$2({}, from2.get("id"), from2));
      } else if (placement == PLACEMENT_PREPEND$1) {
        newTargetChildren = Immutable.OrderedMap(_defineProperty$2({}, from2.get("id"), from2)).merge(newTargetChildren);
      }
      if (isTargetInsideSource) {
        newSourceChildren = newSourceChildren.updateIn(expandTreeSubpath(targetSubpathFromSource, "children1"), function(_oldChildren) {
          return newTargetChildren;
        });
        newSourceChildren = newSourceChildren["delete"](from2.get("id"));
      }
      if (!isSameParent && !isSourceInsideTarget)
        state = state.updateIn(expandTreePath(sourcePath, "children1"), function(_oldChildren) {
          return newSourceChildren;
        });
      if (!isTargetInsideSource)
        state = state.updateIn(expandTreePath(targetPath, "children1"), function(_oldChildren) {
          return newTargetChildren;
        });
      state = fixPathsInTree(state);
      return state;
    };
    var setField$1 = function setField2(state, path, newField, config2) {
      if (!newField)
        return removeItem(state, path);
      var _config$settings2 = config2.settings, fieldSeparator = _config$settings2.fieldSeparator, setOpOnChangeField = _config$settings2.setOpOnChangeField, showErrorMessage = _config$settings2.showErrorMessage;
      if (Array.isArray(newField))
        newField = newField.join(fieldSeparator);
      var currentType = state.getIn(expandTreePath(path, "type"));
      var currentProperties = state.getIn(expandTreePath(path, "properties"));
      var wasRuleGroup = currentType == "rule_group";
      var newFieldConfig = getFieldConfig$8(config2, newField);
      var isRuleGroup = newFieldConfig.type == "!group";
      var isRuleGroupExt = isRuleGroup && newFieldConfig.mode == "array";
      var isChangeToAnotherType = wasRuleGroup != isRuleGroup;
      var currentOperator = currentProperties.get("operator");
      var currentOperatorOptions = currentProperties.get("operatorOptions");
      currentProperties.get("field");
      currentProperties.get("value");
      currentProperties.get("valueSrc", new Immutable.List());
      currentProperties.get("valueType", new Immutable.List());
      var lastOp = newFieldConfig && newFieldConfig.operators.indexOf(currentOperator) !== -1 ? currentOperator : null;
      var newOperator = null;
      var availOps = getOperatorsForField(config2, newField);
      if (availOps && availOps.length == 1)
        newOperator = availOps[0];
      else if (availOps && availOps.length > 1) {
        var _iterator2 = _createForOfIteratorHelper$2(setOpOnChangeField || []), _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var strategy = _step2.value;
            if (strategy == "keep" && !isChangeToAnotherType)
              newOperator = lastOp;
            else if (strategy == "default")
              newOperator = defaultOperator(config2, newField, false);
            else if (strategy == "first")
              newOperator = getFirstOperator(config2, newField);
            if (newOperator)
              break;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      if (!isRuleGroup && !newFieldConfig.operators) {
        console.warn("Type ".concat(newFieldConfig.type, " is not supported"));
        return state;
      }
      if (wasRuleGroup && !isRuleGroup) {
        state = state.setIn(expandTreePath(path, "type"), "rule");
        state = state.deleteIn(expandTreePath(path, "children1"));
        state = state.setIn(expandTreePath(path, "properties"), new Immutable.OrderedMap());
      }
      if (isRuleGroup) {
        state = state.setIn(expandTreePath(path, "type"), "rule_group");
        var _getNewValueForFieldO = getNewValueForFieldOp(config2, config2, currentProperties, newField, newOperator, "field", true);
        _getNewValueForFieldO.canReuseValue;
        var newValue = _getNewValueForFieldO.newValue, newValueSrc = _getNewValueForFieldO.newValueSrc, newValueType = _getNewValueForFieldO.newValueType, operatorCardinality = _getNewValueForFieldO.operatorCardinality;
        var groupProperties = defaultGroupProperties(config2, newFieldConfig).merge({
          field: newField,
          mode: newFieldConfig.mode
        });
        if (isRuleGroupExt) {
          groupProperties = groupProperties.merge({
            operator: newOperator,
            value: newValue,
            valueSrc: newValueSrc,
            valueType: newValueType
          });
        }
        state = state.setIn(expandTreePath(path, "children1"), new Immutable.OrderedMap());
        state = state.setIn(expandTreePath(path, "properties"), groupProperties);
        if (newFieldConfig.initialEmptyWhere && operatorCardinality == 1)
          ;
        else {
          state = addItem(state, path, "rule", uuid$1(), defaultRuleProperties(config2, newField), config2);
        }
        state = fixPathsInTree(state);
        return state;
      }
      return state.updateIn(expandTreePath(path, "properties"), function(map2) {
        return map2.withMutations(function(current) {
          var _getNewValueForFieldO2 = getNewValueForFieldOp(config2, config2, current, newField, newOperator, "field", true), canReuseValue = _getNewValueForFieldO2.canReuseValue, newValue2 = _getNewValueForFieldO2.newValue, newValueSrc2 = _getNewValueForFieldO2.newValueSrc, newValueType2 = _getNewValueForFieldO2.newValueType, newValueError = _getNewValueForFieldO2.newValueError;
          if (showErrorMessage) {
            current = current.set("valueError", newValueError);
          }
          var newOperatorOptions = canReuseValue ? currentOperatorOptions : defaultOperatorOptions(config2, newOperator, newField);
          return current.set("field", newField).set("operator", newOperator).set("operatorOptions", newOperatorOptions).set("value", newValue2).set("valueSrc", newValueSrc2).set("valueType", newValueType2)["delete"]("asyncListValues");
        });
      });
    };
    var setOperator$1 = function setOperator2(state, path, newOperator, config2) {
      var showErrorMessage = config2.settings.showErrorMessage;
      var properties2 = state.getIn(expandTreePath(path, "properties"));
      var children = state.getIn(expandTreePath(path, "children1"));
      var currentField = properties2.get("field");
      var fieldConfig = getFieldConfig$8(config2, currentField);
      var isRuleGroup = fieldConfig.type == "!group";
      var operatorConfig = getOperatorConfig$4(config2, newOperator, currentField);
      var operatorCardinality = operatorConfig ? defaultValue$1(operatorConfig.cardinality, 1) : null;
      state = state.updateIn(expandTreePath(path, "properties"), function(map2) {
        return map2.withMutations(function(current) {
          var currentField2 = current.get("field");
          var currentOperatorOptions = current.get("operatorOptions");
          current.get("value", new Immutable.List());
          current.get("valueSrc", new Immutable.List());
          current.get("operator");
          var _getNewValueForFieldO3 = getNewValueForFieldOp(config2, config2, current, currentField2, newOperator, "operator", true), canReuseValue = _getNewValueForFieldO3.canReuseValue, newValue = _getNewValueForFieldO3.newValue, newValueSrc = _getNewValueForFieldO3.newValueSrc, newValueType = _getNewValueForFieldO3.newValueType, newValueError = _getNewValueForFieldO3.newValueError;
          if (showErrorMessage) {
            current = current.set("valueError", newValueError);
          }
          var newOperatorOptions = canReuseValue ? currentOperatorOptions : defaultOperatorOptions(config2, newOperator, currentField2);
          if (!canReuseValue) {
            current = current["delete"]("asyncListValues");
          }
          return current.set("operator", newOperator).set("operatorOptions", newOperatorOptions).set("value", newValue).set("valueSrc", newValueSrc).set("valueType", newValueType);
        });
      });
      if (isRuleGroup) {
        if (operatorCardinality == 0 && children.size == 0) {
          state = addItem(state, path, "rule", uuid$1(), defaultRuleProperties(config2, currentField), config2);
        }
      }
      return state;
    };
    var setValue$1 = function setValue2(state, path, delta, value2, valueType, config2, asyncListValues, __isInternal) {
      var _config$settings3 = config2.settings, fieldSeparator = _config$settings3.fieldSeparator, showErrorMessage = _config$settings3.showErrorMessage;
      var isInternalValueChange;
      var valueSrc = state.getIn(expandTreePath(path, "properties", "valueSrc", delta + "")) || null;
      if (valueSrc === "field" && Array.isArray(value2))
        value2 = value2.join(fieldSeparator);
      var field = state.getIn(expandTreePath(path, "properties", "field")) || null;
      var operator = state.getIn(expandTreePath(path, "properties", "operator")) || null;
      var operatorConfig = getOperatorConfig$4(config2, operator, field);
      var operatorCardinality = operator ? defaultValue$1(operatorConfig.cardinality, 1) : null;
      var isEndValue = false;
      var calculatedValueType = valueType || calculateValueType(value2, valueSrc, config2);
      var canFix = false;
      var _validateValue = validateValue(config2, field, field, operator, value2, calculatedValueType, valueSrc, asyncListValues, canFix, isEndValue), _validateValue2 = _slicedToArray(_validateValue, 2), validateError = _validateValue2[0], fixedValue = _validateValue2[1];
      var isValid2 = !validateError;
      if (fixedValue !== value2) {
        value2 = fixedValue;
      }
      if (showErrorMessage) {
        var w = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
        var fieldWidgetDefinition = getFieldWidgetConfig$3(config2, field, operator, w, valueSrc);
        var valueSrcs = Array.from({
          length: operatorCardinality
        }, function(_2, i) {
          return state.getIn(expandTreePath(path, "properties", "valueSrc", i + "")) || null;
        });
        if (operatorConfig && operatorConfig.validateValues && valueSrcs.filter(function(vs) {
          return vs == "value" || vs == null;
        }).length == operatorCardinality) {
          var values2 = Array.from({
            length: operatorCardinality
          }, function(_2, i) {
            return i == delta ? value2 : state.getIn(expandTreePath(path, "properties", "value", i + "")) || null;
          });
          var jsValues = fieldWidgetDefinition && fieldWidgetDefinition.toJS ? values2.map(function(v) {
            return fieldWidgetDefinition.toJS.call(config2.ctx, v, fieldWidgetDefinition);
          }) : values2;
          var rangeValidateError = operatorConfig.validateValues(jsValues);
          state = state.setIn(expandTreePath(path, "properties", "valueError", operatorCardinality), rangeValidateError);
        }
      }
      var lastValueArr = state.getIn(expandTreePath(path, "properties", "value"));
      if (!lastValueArr) {
        state = state.setIn(expandTreePath(path, "properties", "value"), new Immutable.List(new Array(operatorCardinality))).setIn(expandTreePath(path, "properties", "valueType"), new Immutable.List(new Array(operatorCardinality))).setIn(expandTreePath(path, "properties", "valueError"), new Immutable.List(new Array(operatorCardinality)));
      }
      var lastValue = state.getIn(expandTreePath(path, "properties", "value", delta + ""));
      var lastError = state.getIn(expandTreePath(path, "properties", "valueError", delta));
      var isLastEmpty = lastValue == void 0;
      var isLastError = !!lastError;
      if (isValid2 || showErrorMessage) {
        state = state.deleteIn(expandTreePath(path, "properties", "asyncListValues"));
        if (typeof value2 === "undefined") {
          state = state.setIn(expandTreePath(path, "properties", "value", delta + ""), void 0);
          state = state.setIn(expandTreePath(path, "properties", "valueType", delta + ""), null);
        } else {
          if (asyncListValues) {
            state = state.setIn(expandTreePath(path, "properties", "asyncListValues"), asyncListValues);
          }
          state = state.setIn(expandTreePath(path, "properties", "value", delta + ""), value2);
          state = state.setIn(expandTreePath(path, "properties", "valueType", delta + ""), calculatedValueType);
          isInternalValueChange = __isInternal && !isLastEmpty && !isLastError;
        }
      }
      if (showErrorMessage) {
        state = state.setIn(expandTreePath(path, "properties", "valueError", delta), validateError);
      }
      if (__isInternal && (isValid2 && isLastError || !isValid2 && !isLastError)) {
        state = state.setIn(expandTreePath(path, "properties", "valueError", delta), validateError);
        isInternalValueChange = false;
      }
      return {
        tree: state,
        isInternalValueChange
      };
    };
    var setValueSrc$1 = function setValueSrc2(state, path, delta, srcKey, config2) {
      var showErrorMessage = config2.settings.showErrorMessage;
      var field = state.getIn(expandTreePath(path, "properties", "field")) || null;
      var operator = state.getIn(expandTreePath(path, "properties", "operator")) || null;
      state = state.setIn(expandTreePath(path, "properties", "value", delta + ""), void 0);
      state = state.setIn(expandTreePath(path, "properties", "valueType", delta + ""), null);
      state = state.deleteIn(expandTreePath(path, "properties", "asyncListValues"));
      if (showErrorMessage) {
        state = state.setIn(expandTreePath(path, "properties", "valueError", delta), null);
        var operatorConfig = getOperatorConfig$4(config2, operator, field);
        var operatorCardinality = operator ? defaultValue$1(operatorConfig.cardinality, 1) : null;
        if (operatorConfig.validateValues) {
          state = state.setIn(expandTreePath(path, "properties", "valueError", operatorCardinality), null);
        }
      }
      if (typeof srcKey === "undefined") {
        state = state.setIn(expandTreePath(path, "properties", "valueSrc", delta + ""), null);
      } else {
        state = state.setIn(expandTreePath(path, "properties", "valueSrc", delta + ""), srcKey);
      }
      if (srcKey) {
        var properties2 = state.getIn(expandTreePath(path, "properties"));
        var _getNewValueForFieldO4 = getNewValueForFieldOp(config2, config2, properties2, field, operator, "valueSrc", true), canReuseValue = _getNewValueForFieldO4.canReuseValue, newValue = _getNewValueForFieldO4.newValue, newValueSrc = _getNewValueForFieldO4.newValueSrc, newValueType = _getNewValueForFieldO4.newValueType;
        _getNewValueForFieldO4.newValueError;
        if (!canReuseValue && newValueSrc.get(delta) == srcKey) {
          state = state.setIn(expandTreePath(path, "properties", "value", delta + ""), newValue.get(delta));
          state = state.setIn(expandTreePath(path, "properties", "valueType", delta + ""), newValueType.get(delta));
        }
      }
      return state;
    };
    var setOperatorOption$1 = function setOperatorOption2(state, path, name, value2) {
      return state.setIn(expandTreePath(path, "properties", "operatorOptions", name), value2);
    };
    var checkEmptyGroups = function checkEmptyGroups2(state, config2) {
      var canLeaveEmptyGroup = config2.settings.canLeaveEmptyGroup;
      if (!canLeaveEmptyGroup) {
        state = fixEmptyGroupsInTree(state);
      }
      return state;
    };
    var calculateValueType = function calculateValueType2(value2, valueSrc, config2) {
      var calculatedValueType = null;
      if (value2) {
        if (valueSrc === "field") {
          var fieldConfig = getFieldConfig$8(config2, value2);
          if (fieldConfig) {
            calculatedValueType = fieldConfig.type;
          }
        } else if (valueSrc === "func") {
          var funcKey = value2.get("func");
          if (funcKey) {
            var funcConfig = getFuncConfig$2(config2, funcKey);
            if (funcConfig) {
              calculatedValueType = funcConfig.returnType;
            }
          }
        }
      }
      return calculatedValueType;
    };
    var getField = function getField2(state, path) {
      var field = state.getIn(expandTreePath(path, "properties", "field")) || null;
      return field;
    };
    var emptyDrag = {
      dragging: {
        id: null,
        x: null,
        y: null,
        w: null,
        h: null
      },
      mousePos: {},
      dragStart: {
        id: null
      }
    };
    var getActionMeta = function getActionMeta2(action, state) {
      if (!action || !action.type)
        return null;
      var actionKeysToOmit = ["config", "asyncListValues", "__isInternal"];
      var actionTypesToIgnore = [SET_TREE, SET_DRAG_START$1, SET_DRAG_PROGRESS$1, SET_DRAG_END$1];
      var meta = mapValues_1(omit_1(action, actionKeysToOmit), applyToJS);
      var affectedField = action.path && getField(state.tree, action.path) || action.field;
      if (affectedField)
        meta.affectedField = affectedField;
      if (actionTypesToIgnore.includes(action.type) || action.type.indexOf("@@redux") == 0)
        meta = null;
      return meta;
    };
    const TreeStore = function(config2, tree2, getMemoizedTree, setLastTree) {
      var emptyTree = defaultRoot$1(config2);
      var initTree2 = tree2 || emptyTree;
      var emptyState = _objectSpread$j({
        tree: initTree2
      }, emptyDrag);
      return function() {
        var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : emptyState;
        var action = arguments.length > 1 ? arguments[1] : void 0;
        var unset = {
          __isInternalValueChange: void 0,
          __lastAction: void 0
        };
        var set2 = {};
        var actionMeta = getActionMeta(action, state);
        switch (action === null || action === void 0 ? void 0 : action.type) {
          case SET_TREE: {
            var validatedTree = getMemoizedTree(action.config, action.tree);
            set2.tree = validatedTree;
            break;
          }
          case ADD_CASE_GROUP: {
            set2.tree = addNewGroup(state.tree, action.path, "case_group", action.id, action.properties, action.config, action.children, action.meta);
            break;
          }
          case ADD_GROUP: {
            set2.tree = addNewGroup(state.tree, action.path, "group", action.id, action.properties, action.config, action.children, action.meta);
            break;
          }
          case REMOVE_GROUP: {
            set2.tree = removeGroup$1(state.tree, action.path, action.config);
            break;
          }
          case ADD_RULE: {
            set2.tree = addItem(state.tree, action.path, action.ruleType, action.id, action.properties, action.config, action.children);
            break;
          }
          case REMOVE_RULE: {
            set2.tree = removeRule$1(state.tree, action.path, action.config);
            break;
          }
          case SET_CONJUNCTION: {
            set2.tree = setConjunction$1(state.tree, action.path, action.conjunction);
            break;
          }
          case SET_NOT: {
            set2.tree = setNot$1(state.tree, action.path, action.not);
            break;
          }
          case SET_FIELD: {
            set2.tree = setField$1(state.tree, action.path, action.field, action.config);
            break;
          }
          case SET_LOCK: {
            set2.tree = setLock$1(state.tree, action.path, action.lock);
            break;
          }
          case SET_OPERATOR: {
            set2.tree = setOperator$1(state.tree, action.path, action.operator, action.config);
            break;
          }
          case SET_VALUE: {
            var _setValue = setValue$1(state.tree, action.path, action.delta, action.value, action.valueType, action.config, action.asyncListValues, action.__isInternal), _tree = _setValue.tree, isInternalValueChange = _setValue.isInternalValueChange;
            set2.__isInternalValueChange = isInternalValueChange;
            set2.tree = _tree;
            break;
          }
          case SET_VALUE_SRC: {
            set2.tree = setValueSrc$1(state.tree, action.path, action.delta, action.srcKey, action.config);
            break;
          }
          case SET_OPERATOR_OPTION: {
            set2.tree = setOperatorOption$1(state.tree, action.path, action.name, action.value);
            break;
          }
          case MOVE_ITEM: {
            set2.tree = moveItem$1(state.tree, action.fromPath, action.toPath, action.placement, action.config);
            break;
          }
          case SET_DRAG_START$1: {
            set2.dragStart = action.dragStart;
            set2.dragging = action.dragging;
            set2.mousePos = action.mousePos;
            break;
          }
          case SET_DRAG_PROGRESS$1: {
            set2.mousePos = action.mousePos;
            set2.dragging = action.dragging;
            break;
          }
          case SET_DRAG_END$1: {
            set2.tree = checkEmptyGroups(state.tree, config2);
            set2 = _objectSpread$j(_objectSpread$j({}, set2), emptyDrag);
            break;
          }
        }
        if (actionMeta) {
          set2.__lastAction = actionMeta;
        }
        if (setLastTree && set2.tree && state.tree) {
          setLastTree(state.tree);
        }
        return _objectSpread$j(_objectSpread$j(_objectSpread$j({}, state), unset), set2);
      };
    };
    var setTree = function setTree2(config2, tree2) {
      return {
        type: SET_TREE,
        tree: tree2,
        config: config2
      };
    };
    var addRule = function addRule2(config2, path, properties2) {
      var ruleType = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "rule";
      var children = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      return {
        type: ADD_RULE,
        ruleType,
        children,
        path: toImmutableList(path),
        id: uuid$1(),
        properties: defaultRuleProperties(config2).merge(properties2 || {}),
        config: config2
      };
    };
    var removeRule = function removeRule2(config2, path) {
      return {
        type: REMOVE_RULE,
        path: toImmutableList(path),
        config: config2
      };
    };
    var addDefaultCaseGroup = function addDefaultCaseGroup2(config2, path, properties2) {
      var children = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      return {
        type: ADD_CASE_GROUP,
        path: toImmutableList(path),
        children,
        id: uuid$1(),
        properties: defaultGroupProperties(config2).merge(properties2 || {}),
        config: config2,
        meta: {
          isDefaultCase: true
        }
      };
    };
    var addCaseGroup = function addCaseGroup2(config2, path, properties2) {
      var children = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      return {
        type: ADD_CASE_GROUP,
        path: toImmutableList(path),
        children,
        id: uuid$1(),
        properties: defaultGroupProperties(config2).merge(properties2 || {}),
        config: config2
      };
    };
    var addGroup = function addGroup2(config2, path, properties2) {
      var children = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      return {
        type: ADD_GROUP,
        path: toImmutableList(path),
        children,
        id: uuid$1(),
        properties: defaultGroupProperties(config2).merge(properties2 || {}),
        config: config2
      };
    };
    var removeGroup = function removeGroup2(config2, path) {
      return {
        type: REMOVE_GROUP,
        path: toImmutableList(path),
        config: config2
      };
    };
    var moveItem = function moveItem2(config2, fromPath, toPath, placement) {
      return {
        type: MOVE_ITEM,
        fromPath: toImmutableList(fromPath),
        toPath: toImmutableList(toPath),
        placement,
        config: config2
      };
    };
    const tree$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      setTree,
      addRule,
      removeRule,
      addDefaultCaseGroup,
      addCaseGroup,
      addGroup,
      removeGroup,
      moveItem
    }, Symbol.toStringTag, { value: "Module" }));
    var setConjunction = function setConjunction2(config2, path, conjunction) {
      return {
        type: SET_CONJUNCTION,
        path: toImmutableList(path),
        conjunction
      };
    };
    var setNot = function setNot2(config2, path, not) {
      return {
        type: SET_NOT,
        path: toImmutableList(path),
        not
      };
    };
    var setLock = function setLock2(config2, path, lock) {
      return {
        type: SET_LOCK,
        path: toImmutableList(path),
        lock
      };
    };
    const group$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      setConjunction,
      setNot,
      setLock
    }, Symbol.toStringTag, { value: "Module" }));
    var setField = function setField2(config2, path, field) {
      return {
        type: SET_FIELD,
        path: toImmutableList(path),
        field,
        config: config2
      };
    };
    var setOperator = function setOperator2(config2, path, operator) {
      return {
        type: SET_OPERATOR,
        path: toImmutableList(path),
        operator,
        config: config2
      };
    };
    var setValue = function setValue2(config2, path, delta, value2, valueType, asyncListValues, __isInternal) {
      return {
        type: SET_VALUE,
        path: toImmutableList(path),
        delta,
        value: value2,
        valueType,
        asyncListValues,
        config: config2,
        __isInternal
      };
    };
    var setValueSrc = function setValueSrc2(config2, path, delta, srcKey) {
      return {
        type: SET_VALUE_SRC,
        path: toImmutableList(path),
        delta,
        srcKey,
        config: config2
      };
    };
    var setOperatorOption = function setOperatorOption2(config2, path, name, value2) {
      return {
        type: SET_OPERATOR_OPTION,
        path: toImmutableList(path),
        name,
        value: value2,
        config: config2
      };
    };
    const rule$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      setField,
      setOperator,
      setValue,
      setValueSrc,
      setOperatorOption
    }, Symbol.toStringTag, { value: "Module" }));
    function ownKeys$i(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$i(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$i(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$i(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var Utils$1 = _objectSpread$i(_objectSpread$i(_objectSpread$i(_objectSpread$i({}, BasicUtils), Export), Import), {}, {
      ConfigMixins
    });
    const context = /* @__PURE__ */ React.createContext();
    var $$observable = function() {
      return typeof Symbol === "function" && Symbol.observable || "@@observable";
    }();
    var randomString = function randomString2() {
      return Math.random().toString(36).substring(7).split("").join(".");
    };
    var ActionTypes = {
      INIT: "@@redux/INIT" + randomString(),
      REPLACE: "@@redux/REPLACE" + randomString(),
      PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
        return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
      }
    };
    function isPlainObject$1(obj) {
      if (typeof obj !== "object" || obj === null)
        return false;
      var proto2 = obj;
      while (Object.getPrototypeOf(proto2) !== null) {
        proto2 = Object.getPrototypeOf(proto2);
      }
      return Object.getPrototypeOf(obj) === proto2;
    }
    function miniKindOf(val) {
      if (val === void 0)
        return "undefined";
      if (val === null)
        return "null";
      var type = typeof val;
      switch (type) {
        case "boolean":
        case "string":
        case "number":
        case "symbol":
        case "function": {
          return type;
        }
      }
      if (Array.isArray(val))
        return "array";
      if (isDate(val))
        return "date";
      if (isError(val))
        return "error";
      var constructorName = ctorName(val);
      switch (constructorName) {
        case "Symbol":
        case "Promise":
        case "WeakMap":
        case "WeakSet":
        case "Map":
        case "Set":
          return constructorName;
      }
      return type.slice(8, -1).toLowerCase().replace(/\s/g, "");
    }
    function ctorName(val) {
      return typeof val.constructor === "function" ? val.constructor.name : null;
    }
    function isError(val) {
      return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
    }
    function isDate(val) {
      if (val instanceof Date)
        return true;
      return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
    }
    function kindOf(val) {
      var typeOfVal = typeof val;
      {
        typeOfVal = miniKindOf(val);
      }
      return typeOfVal;
    }
    function createStore(reducer, preloadedState, enhancer) {
      var _ref2;
      if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
        throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
      }
      if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
        enhancer = preloadedState;
        preloadedState = void 0;
      }
      if (typeof enhancer !== "undefined") {
        if (typeof enhancer !== "function") {
          throw new Error("Expected the enhancer to be a function. Instead, received: '" + kindOf(enhancer) + "'");
        }
        return enhancer(createStore)(reducer, preloadedState);
      }
      if (typeof reducer !== "function") {
        throw new Error("Expected the root reducer to be a function. Instead, received: '" + kindOf(reducer) + "'");
      }
      var currentReducer = reducer;
      var currentState = preloadedState;
      var currentListeners = [];
      var nextListeners = currentListeners;
      var isDispatching = false;
      function ensureCanMutateNextListeners() {
        if (nextListeners === currentListeners) {
          nextListeners = currentListeners.slice();
        }
      }
      function getState() {
        if (isDispatching) {
          throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
        }
        return currentState;
      }
      function subscribe(listener) {
        if (typeof listener !== "function") {
          throw new Error("Expected the listener to be a function. Instead, received: '" + kindOf(listener) + "'");
        }
        if (isDispatching) {
          throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
        }
        var isSubscribed = true;
        ensureCanMutateNextListeners();
        nextListeners.push(listener);
        return function unsubscribe() {
          if (!isSubscribed) {
            return;
          }
          if (isDispatching) {
            throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
          }
          isSubscribed = false;
          ensureCanMutateNextListeners();
          var index = nextListeners.indexOf(listener);
          nextListeners.splice(index, 1);
          currentListeners = null;
        };
      }
      function dispatch(action) {
        if (!isPlainObject$1(action)) {
          throw new Error("Actions must be plain objects. Instead, the actual type was: '" + kindOf(action) + "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");
        }
        if (typeof action.type === "undefined") {
          throw new Error('Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
        }
        if (isDispatching) {
          throw new Error("Reducers may not dispatch actions.");
        }
        try {
          isDispatching = true;
          currentState = currentReducer(currentState, action);
        } finally {
          isDispatching = false;
        }
        var listeners = currentListeners = nextListeners;
        for (var i = 0; i < listeners.length; i++) {
          var listener = listeners[i];
          listener();
        }
        return action;
      }
      function replaceReducer(nextReducer) {
        if (typeof nextReducer !== "function") {
          throw new Error("Expected the nextReducer to be a function. Instead, received: '" + kindOf(nextReducer));
        }
        currentReducer = nextReducer;
        dispatch({
          type: ActionTypes.REPLACE
        });
      }
      function observable() {
        var _ref;
        var outerSubscribe = subscribe;
        return _ref = {
          subscribe: function subscribe2(observer) {
            if (typeof observer !== "object" || observer === null) {
              throw new Error("Expected the observer to be an object. Instead, received: '" + kindOf(observer) + "'");
            }
            function observeState() {
              if (observer.next) {
                observer.next(getState());
              }
            }
            observeState();
            var unsubscribe = outerSubscribe(observeState);
            return {
              unsubscribe
            };
          }
        }, _ref[$$observable] = function() {
          return this;
        }, _ref;
      }
      dispatch({
        type: ActionTypes.INIT
      });
      return _ref2 = {
        dispatch,
        subscribe,
        getState,
        replaceReducer
      }, _ref2[$$observable] = observable, _ref2;
    }
    function warning$1(message) {
      if (typeof console !== "undefined" && typeof console.error === "function") {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (e) {
      }
    }
    function isCrushed() {
    }
    if (typeof isCrushed.name === "string" && isCrushed.name !== "isCrushed") {
      warning$1('You are currently using minified code outside of NODE_ENV === "production". This means that you are running a slower development build of Redux. You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) to ensure you have the correct code for your production build.');
    }
    var ReactReduxContext = /* @__PURE__ */ React.createContext(null);
    {
      ReactReduxContext.displayName = "ReactRedux";
    }
    function defaultNoopBatch(callback) {
      callback();
    }
    var batch = defaultNoopBatch;
    var setBatch = function setBatch2(newBatch) {
      return batch = newBatch;
    };
    var getBatch = function getBatch2() {
      return batch;
    };
    function createListenerCollection() {
      var batch2 = getBatch();
      var first = null;
      var last2 = null;
      return {
        clear: function clear() {
          first = null;
          last2 = null;
        },
        notify: function notify() {
          batch2(function() {
            var listener = first;
            while (listener) {
              listener.callback();
              listener = listener.next;
            }
          });
        },
        get: function get2() {
          var listeners = [];
          var listener = first;
          while (listener) {
            listeners.push(listener);
            listener = listener.next;
          }
          return listeners;
        },
        subscribe: function subscribe(callback) {
          var isSubscribed = true;
          var listener = last2 = {
            callback,
            next: null,
            prev: last2
          };
          if (listener.prev) {
            listener.prev.next = listener;
          } else {
            first = listener;
          }
          return function unsubscribe() {
            if (!isSubscribed || first === null)
              return;
            isSubscribed = false;
            if (listener.next) {
              listener.next.prev = listener.prev;
            } else {
              last2 = listener.prev;
            }
            if (listener.prev) {
              listener.prev.next = listener.next;
            } else {
              first = listener.next;
            }
          };
        }
      };
    }
    var nullListeners = {
      notify: function notify() {
      },
      get: function get2() {
        return [];
      }
    };
    function createSubscription(store, parentSub) {
      var unsubscribe;
      var listeners = nullListeners;
      function addNestedSub(listener) {
        trySubscribe();
        return listeners.subscribe(listener);
      }
      function notifyNestedSubs() {
        listeners.notify();
      }
      function handleChangeWrapper() {
        if (subscription.onStateChange) {
          subscription.onStateChange();
        }
      }
      function isSubscribed() {
        return Boolean(unsubscribe);
      }
      function trySubscribe() {
        if (!unsubscribe) {
          unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);
          listeners = createListenerCollection();
        }
      }
      function tryUnsubscribe() {
        if (unsubscribe) {
          unsubscribe();
          unsubscribe = void 0;
          listeners.clear();
          listeners = nullListeners;
        }
      }
      var subscription = {
        addNestedSub,
        notifyNestedSubs,
        handleChangeWrapper,
        isSubscribed,
        trySubscribe,
        tryUnsubscribe,
        getListeners: function getListeners() {
          return listeners;
        }
      };
      return subscription;
    }
    var useIsomorphicLayoutEffect = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? react.exports.useLayoutEffect : react.exports.useEffect;
    var _jsxFileName$X = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/node_modules/.pnpm/react-redux@7.2.9_sfoxds7t5ydpegc3knd667wn6m/node_modules/react-redux/es/components/Provider.js";
    function Provider(_ref) {
      var store = _ref.store, context2 = _ref.context, children = _ref.children;
      var contextValue = react.exports.useMemo(function() {
        var subscription = createSubscription(store);
        return {
          store,
          subscription
        };
      }, [store]);
      var previousState = react.exports.useMemo(function() {
        return store.getState();
      }, [store]);
      useIsomorphicLayoutEffect(function() {
        var subscription = contextValue.subscription;
        subscription.onStateChange = subscription.notifyNestedSubs;
        subscription.trySubscribe();
        if (previousState !== store.getState()) {
          subscription.notifyNestedSubs();
        }
        return function() {
          subscription.tryUnsubscribe();
          subscription.onStateChange = null;
        };
      }, [contextValue, previousState]);
      var Context = context2 || ReactReduxContext;
      return /* @__PURE__ */ jsxDEV(Context.Provider, {
        value: contextValue,
        children
      }, void 0, false, {
        fileName: _jsxFileName$X,
        lineNumber: 36,
        columnNumber: 23
      }, this);
    }
    {
      Provider.propTypes = {
        store: propTypes.exports.shape({
          subscribe: propTypes.exports.func.isRequired,
          dispatch: propTypes.exports.func.isRequired,
          getState: propTypes.exports.func.isRequired
        }),
        context: propTypes.exports.object,
        children: propTypes.exports.any
      };
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    var reactIs = { exports: {} };
    var reactIs_development = {};
    /** @license React v17.0.2
     * react-is.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    {
      (function() {
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        var REACT_FRAGMENT_TYPE = 60107;
        var REACT_STRICT_MODE_TYPE = 60108;
        var REACT_PROFILER_TYPE = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        var REACT_SUSPENSE_TYPE = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
          REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
          REACT_PROFILER_TYPE = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          symbolFor("react.scope");
          symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var enableScopeAPI = false;
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
              return true;
            }
          }
          return false;
        }
        function typeOf2(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment2 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal2 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        var hasWarnedAboutDeprecatedIsConcurrentMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isConcurrentMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
              hasWarnedAboutDeprecatedIsConcurrentMode = true;
              console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isContextConsumer(object) {
          return typeOf2(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf2(object) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf2(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf2(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf2(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf2(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf2(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf2(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf2(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf2(object) === REACT_SUSPENSE_TYPE;
        }
        reactIs_development.ContextConsumer = ContextConsumer;
        reactIs_development.ContextProvider = ContextProvider;
        reactIs_development.Element = Element2;
        reactIs_development.ForwardRef = ForwardRef;
        reactIs_development.Fragment = Fragment2;
        reactIs_development.Lazy = Lazy;
        reactIs_development.Memo = Memo;
        reactIs_development.Portal = Portal2;
        reactIs_development.Profiler = Profiler;
        reactIs_development.StrictMode = StrictMode;
        reactIs_development.Suspense = Suspense;
        reactIs_development.isAsyncMode = isAsyncMode;
        reactIs_development.isConcurrentMode = isConcurrentMode;
        reactIs_development.isContextConsumer = isContextConsumer;
        reactIs_development.isContextProvider = isContextProvider;
        reactIs_development.isElement = isElement2;
        reactIs_development.isForwardRef = isForwardRef;
        reactIs_development.isFragment = isFragment;
        reactIs_development.isLazy = isLazy;
        reactIs_development.isMemo = isMemo;
        reactIs_development.isPortal = isPortal;
        reactIs_development.isProfiler = isProfiler;
        reactIs_development.isStrictMode = isStrictMode;
        reactIs_development.isSuspense = isSuspense;
        reactIs_development.isValidElementType = isValidElementType;
        reactIs_development.typeOf = typeOf2;
      })();
    }
    (function(module2) {
      {
        module2.exports = reactIs_development;
      }
    })(reactIs);
    var _jsxFileName$W = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/node_modules/.pnpm/react-redux@7.2.9_sfoxds7t5ydpegc3knd667wn6m/node_modules/react-redux/es/components/connectAdvanced.js";
    var _excluded$f = ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef", "forwardRef", "context"], _excluded2 = ["reactReduxForwardedRef"];
    var EMPTY_ARRAY = [];
    var NO_SUBSCRIPTION_ARRAY = [null, null];
    var stringifyComponent = function stringifyComponent2(Comp) {
      try {
        return JSON.stringify(Comp);
      } catch (err) {
        return String(Comp);
      }
    };
    function storeStateUpdatesReducer(state, action) {
      var updateCount = state[1];
      return [action.payload, updateCount + 1];
    }
    function useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {
      useIsomorphicLayoutEffect(function() {
        return effectFunc.apply(void 0, effectArgs);
      }, dependencies);
    }
    function captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs) {
      lastWrapperProps.current = wrapperProps;
      lastChildProps.current = actualChildProps;
      renderIsScheduled.current = false;
      if (childPropsFromStoreUpdate.current) {
        childPropsFromStoreUpdate.current = null;
        notifyNestedSubs();
      }
    }
    function subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch) {
      if (!shouldHandleStateChanges)
        return;
      var didUnsubscribe = false;
      var lastThrownError = null;
      var checkForUpdates = function checkForUpdates2() {
        if (didUnsubscribe) {
          return;
        }
        var latestStoreState = store.getState();
        var newChildProps, error;
        try {
          newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);
        } catch (e) {
          error = e;
          lastThrownError = e;
        }
        if (!error) {
          lastThrownError = null;
        }
        if (newChildProps === lastChildProps.current) {
          if (!renderIsScheduled.current) {
            notifyNestedSubs();
          }
        } else {
          lastChildProps.current = newChildProps;
          childPropsFromStoreUpdate.current = newChildProps;
          renderIsScheduled.current = true;
          forceComponentUpdateDispatch({
            type: "STORE_UPDATED",
            payload: {
              error
            }
          });
        }
      };
      subscription.onStateChange = checkForUpdates;
      subscription.trySubscribe();
      checkForUpdates();
      var unsubscribeWrapper = function unsubscribeWrapper2() {
        didUnsubscribe = true;
        subscription.tryUnsubscribe();
        subscription.onStateChange = null;
        if (lastThrownError) {
          throw lastThrownError;
        }
      };
      return unsubscribeWrapper;
    }
    var initStateUpdates = function initStateUpdates2() {
      return [null, 0];
    };
    function connectAdvanced(selectorFactory, _ref) {
      if (_ref === void 0) {
        _ref = {};
      }
      var _ref2 = _ref, _ref2$getDisplayName = _ref2.getDisplayName, getDisplayName2 = _ref2$getDisplayName === void 0 ? function(name) {
        return "ConnectAdvanced(" + name + ")";
      } : _ref2$getDisplayName, _ref2$methodName = _ref2.methodName, methodName = _ref2$methodName === void 0 ? "connectAdvanced" : _ref2$methodName, _ref2$renderCountProp = _ref2.renderCountProp, renderCountProp = _ref2$renderCountProp === void 0 ? void 0 : _ref2$renderCountProp, _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges, shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta, _ref2$storeKey = _ref2.storeKey, storeKey = _ref2$storeKey === void 0 ? "store" : _ref2$storeKey, _ref2$withRef = _ref2.withRef, withRef = _ref2$withRef === void 0 ? false : _ref2$withRef, _ref2$forwardRef = _ref2.forwardRef, forwardRef = _ref2$forwardRef === void 0 ? false : _ref2$forwardRef, _ref2$context = _ref2.context, context2 = _ref2$context === void 0 ? ReactReduxContext : _ref2$context, connectOptions = _objectWithoutPropertiesLoose(_ref2, _excluded$f);
      {
        if (renderCountProp !== void 0) {
          throw new Error("renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension");
        }
        if (withRef) {
          throw new Error("withRef is removed. To access the wrapped instance, use a ref on the connected component");
        }
        var customStoreWarningMessage = "To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect";
        if (storeKey !== "store") {
          throw new Error("storeKey has been removed and does not do anything. " + customStoreWarningMessage);
        }
      }
      var Context = context2;
      return function wrapWithConnect(WrappedComponent) {
        if (!reactIs.exports.isValidElementType(WrappedComponent)) {
          throw new Error("You must pass a component to the function returned by " + (methodName + ". Instead received " + stringifyComponent(WrappedComponent)));
        }
        var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || "Component";
        var displayName = getDisplayName2(wrappedComponentName);
        var selectorFactoryOptions = _extends({}, connectOptions, {
          getDisplayName: getDisplayName2,
          methodName,
          renderCountProp,
          shouldHandleStateChanges,
          storeKey,
          displayName,
          wrappedComponentName,
          WrappedComponent
        });
        var pure = connectOptions.pure;
        function createChildSelector(store) {
          return selectorFactory(store.dispatch, selectorFactoryOptions);
        }
        var usePureOnlyMemo = pure ? react.exports.useMemo : function(callback) {
          return callback();
        };
        function ConnectFunction(props) {
          var _useMemo = react.exports.useMemo(function() {
            var reactReduxForwardedRef2 = props.reactReduxForwardedRef, wrapperProps2 = _objectWithoutPropertiesLoose(props, _excluded2);
            return [props.context, reactReduxForwardedRef2, wrapperProps2];
          }, [props]), propsContext = _useMemo[0], reactReduxForwardedRef = _useMemo[1], wrapperProps = _useMemo[2];
          var ContextToUse = react.exports.useMemo(function() {
            return propsContext && propsContext.Consumer && reactIs.exports.isContextConsumer(/* @__PURE__ */ React.createElement(propsContext.Consumer, null)) ? propsContext : Context;
          }, [propsContext, Context]);
          var contextValue = react.exports.useContext(ContextToUse);
          var didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);
          var didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);
          if (!didStoreComeFromProps && !didStoreComeFromContext) {
            throw new Error('Could not find "store" in the context of ' + ('"' + displayName + '". Either wrap the root component in a <Provider>, ') + "or pass a custom React context provider to <Provider> and the corresponding " + ("React context consumer to " + displayName + " in connect options."));
          }
          var store = didStoreComeFromProps ? props.store : contextValue.store;
          var childPropsSelector = react.exports.useMemo(function() {
            return createChildSelector(store);
          }, [store]);
          var _useMemo2 = react.exports.useMemo(function() {
            if (!shouldHandleStateChanges)
              return NO_SUBSCRIPTION_ARRAY;
            var subscription2 = createSubscription(store, didStoreComeFromProps ? null : contextValue.subscription);
            var notifyNestedSubs2 = subscription2.notifyNestedSubs.bind(subscription2);
            return [subscription2, notifyNestedSubs2];
          }, [store, didStoreComeFromProps, contextValue]), subscription = _useMemo2[0], notifyNestedSubs = _useMemo2[1];
          var overriddenContextValue = react.exports.useMemo(function() {
            if (didStoreComeFromProps) {
              return contextValue;
            }
            return _extends({}, contextValue, {
              subscription
            });
          }, [didStoreComeFromProps, contextValue, subscription]);
          var _useReducer = react.exports.useReducer(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates), _useReducer$ = _useReducer[0], previousStateUpdateResult = _useReducer$[0], forceComponentUpdateDispatch = _useReducer[1];
          if (previousStateUpdateResult && previousStateUpdateResult.error) {
            throw previousStateUpdateResult.error;
          }
          var lastChildProps = react.exports.useRef();
          var lastWrapperProps = react.exports.useRef(wrapperProps);
          var childPropsFromStoreUpdate = react.exports.useRef();
          var renderIsScheduled = react.exports.useRef(false);
          var actualChildProps = usePureOnlyMemo(function() {
            if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {
              return childPropsFromStoreUpdate.current;
            }
            return childPropsSelector(store.getState(), wrapperProps);
          }, [store, previousStateUpdateResult, wrapperProps]);
          useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs]);
          useIsomorphicLayoutEffectWithArgs(subscribeUpdates, [shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch], [store, subscription, childPropsSelector]);
          var renderedWrappedComponent = react.exports.useMemo(function() {
            return /* @__PURE__ */ jsxDEV(WrappedComponent, {
              ...actualChildProps,
              ref: reactReduxForwardedRef
            }, void 0, false, {
              fileName: _jsxFileName$W,
              lineNumber: 338,
              columnNumber: 29
            }, this);
          }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]);
          var renderedChild = react.exports.useMemo(function() {
            if (shouldHandleStateChanges) {
              return /* @__PURE__ */ jsxDEV(ContextToUse.Provider, {
                value: overriddenContextValue,
                children: renderedWrappedComponent
              }, void 0, false, {
                fileName: _jsxFileName$W,
                lineNumber: 349,
                columnNumber: 31
              }, this);
            }
            return renderedWrappedComponent;
          }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);
          return renderedChild;
        }
        var Connect = pure ? React.memo(ConnectFunction) : ConnectFunction;
        Connect.WrappedComponent = WrappedComponent;
        Connect.displayName = ConnectFunction.displayName = displayName;
        if (forwardRef) {
          var forwarded = React.forwardRef(function forwardConnectRef(props, ref) {
            return /* @__PURE__ */ jsxDEV(Connect, {
              ...props,
              reactReduxForwardedRef: ref
            }, void 0, false, {
              fileName: _jsxFileName$W,
              lineNumber: 366,
              columnNumber: 29
            }, this);
          });
          forwarded.displayName = displayName;
          forwarded.WrappedComponent = WrappedComponent;
          return hoistNonReactStatics_cjs(forwarded, WrappedComponent);
        }
        return hoistNonReactStatics_cjs(Connect, WrappedComponent);
      };
    }
    function is(x, y) {
      if (x === y) {
        return x !== 0 || y !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }
    function shallowEqual$1(objA, objB) {
      if (is(objA, objB))
        return true;
      if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
        return false;
      }
      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);
      if (keysA.length !== keysB.length)
        return false;
      for (var i = 0; i < keysA.length; i++) {
        if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
          return false;
        }
      }
      return true;
    }
    function bindActionCreators$1(actionCreators, dispatch) {
      var boundActionCreators = {};
      var _loop = function _loop2(key2) {
        var actionCreator = actionCreators[key2];
        if (typeof actionCreator === "function") {
          boundActionCreators[key2] = function() {
            return dispatch(actionCreator.apply(void 0, arguments));
          };
        }
      };
      for (var key in actionCreators) {
        _loop(key);
      }
      return boundActionCreators;
    }
    function isPlainObject(obj) {
      if (typeof obj !== "object" || obj === null)
        return false;
      var proto2 = Object.getPrototypeOf(obj);
      if (proto2 === null)
        return true;
      var baseProto = proto2;
      while (Object.getPrototypeOf(baseProto) !== null) {
        baseProto = Object.getPrototypeOf(baseProto);
      }
      return proto2 === baseProto;
    }
    function warning(message) {
      if (typeof console !== "undefined" && typeof console.error === "function") {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (e) {
      }
    }
    function verifyPlainObject(value2, displayName, methodName) {
      if (!isPlainObject(value2)) {
        warning(methodName + "() in " + displayName + " must return a plain object. Instead received " + value2 + ".");
      }
    }
    function wrapMapToPropsConstant(getConstant) {
      return function initConstantSelector(dispatch, options) {
        var constant2 = getConstant(dispatch, options);
        function constantSelector() {
          return constant2;
        }
        constantSelector.dependsOnOwnProps = false;
        return constantSelector;
      };
    }
    function getDependsOnOwnProps(mapToProps) {
      return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== void 0 ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
    }
    function wrapMapToPropsFunc(mapToProps, methodName) {
      return function initProxySelector(dispatch, _ref) {
        var displayName = _ref.displayName;
        var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
          return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
        };
        proxy.dependsOnOwnProps = true;
        proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
          proxy.mapToProps = mapToProps;
          proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
          var props = proxy(stateOrDispatch, ownProps);
          if (typeof props === "function") {
            proxy.mapToProps = props;
            proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
            props = proxy(stateOrDispatch, ownProps);
          }
          verifyPlainObject(props, displayName, methodName);
          return props;
        };
        return proxy;
      };
    }
    function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
      return typeof mapDispatchToProps === "function" ? wrapMapToPropsFunc(mapDispatchToProps, "mapDispatchToProps") : void 0;
    }
    function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
      return !mapDispatchToProps ? wrapMapToPropsConstant(function(dispatch) {
        return {
          dispatch
        };
      }) : void 0;
    }
    function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
      return mapDispatchToProps && typeof mapDispatchToProps === "object" ? wrapMapToPropsConstant(function(dispatch) {
        return bindActionCreators$1(mapDispatchToProps, dispatch);
      }) : void 0;
    }
    const defaultMapDispatchToPropsFactories = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];
    function whenMapStateToPropsIsFunction(mapStateToProps) {
      return typeof mapStateToProps === "function" ? wrapMapToPropsFunc(mapStateToProps, "mapStateToProps") : void 0;
    }
    function whenMapStateToPropsIsMissing(mapStateToProps) {
      return !mapStateToProps ? wrapMapToPropsConstant(function() {
        return {};
      }) : void 0;
    }
    const defaultMapStateToPropsFactories = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];
    function defaultMergeProps(stateProps, dispatchProps, ownProps) {
      return _extends({}, ownProps, stateProps, dispatchProps);
    }
    function wrapMergePropsFunc(mergeProps) {
      return function initMergePropsProxy(dispatch, _ref) {
        var displayName = _ref.displayName, pure = _ref.pure, areMergedPropsEqual = _ref.areMergedPropsEqual;
        var hasRunOnce = false;
        var mergedProps;
        return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
          var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);
          if (hasRunOnce) {
            if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps))
              mergedProps = nextMergedProps;
          } else {
            hasRunOnce = true;
            mergedProps = nextMergedProps;
            verifyPlainObject(mergedProps, displayName, "mergeProps");
          }
          return mergedProps;
        };
      };
    }
    function whenMergePropsIsFunction(mergeProps) {
      return typeof mergeProps === "function" ? wrapMergePropsFunc(mergeProps) : void 0;
    }
    function whenMergePropsIsOmitted(mergeProps) {
      return !mergeProps ? function() {
        return defaultMergeProps;
      } : void 0;
    }
    const defaultMergePropsFactories = [whenMergePropsIsFunction, whenMergePropsIsOmitted];
    function verify(selector, methodName, displayName) {
      if (!selector) {
        throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");
      } else if (methodName === "mapStateToProps" || methodName === "mapDispatchToProps") {
        if (!Object.prototype.hasOwnProperty.call(selector, "dependsOnOwnProps")) {
          warning("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");
        }
      }
    }
    function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
      verify(mapStateToProps, "mapStateToProps", displayName);
      verify(mapDispatchToProps, "mapDispatchToProps", displayName);
      verify(mergeProps, "mergeProps", displayName);
    }
    var _excluded$e = ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"];
    function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
      return function impureFinalPropsSelector(state, ownProps) {
        return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
      };
    }
    function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
      var areStatesEqual = _ref.areStatesEqual, areOwnPropsEqual = _ref.areOwnPropsEqual, areStatePropsEqual = _ref.areStatePropsEqual;
      var hasRunAtLeastOnce = false;
      var state;
      var ownProps;
      var stateProps;
      var dispatchProps;
      var mergedProps;
      function handleFirstCall(firstState, firstOwnProps) {
        state = firstState;
        ownProps = firstOwnProps;
        stateProps = mapStateToProps(state, ownProps);
        dispatchProps = mapDispatchToProps(dispatch, ownProps);
        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        hasRunAtLeastOnce = true;
        return mergedProps;
      }
      function handleNewPropsAndNewState() {
        stateProps = mapStateToProps(state, ownProps);
        if (mapDispatchToProps.dependsOnOwnProps)
          dispatchProps = mapDispatchToProps(dispatch, ownProps);
        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        return mergedProps;
      }
      function handleNewProps() {
        if (mapStateToProps.dependsOnOwnProps)
          stateProps = mapStateToProps(state, ownProps);
        if (mapDispatchToProps.dependsOnOwnProps)
          dispatchProps = mapDispatchToProps(dispatch, ownProps);
        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        return mergedProps;
      }
      function handleNewState() {
        var nextStateProps = mapStateToProps(state, ownProps);
        var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
        stateProps = nextStateProps;
        if (statePropsChanged)
          mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        return mergedProps;
      }
      function handleSubsequentCalls(nextState, nextOwnProps) {
        var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
        var stateChanged = !areStatesEqual(nextState, state, nextOwnProps, ownProps);
        state = nextState;
        ownProps = nextOwnProps;
        if (propsChanged && stateChanged)
          return handleNewPropsAndNewState();
        if (propsChanged)
          return handleNewProps();
        if (stateChanged)
          return handleNewState();
        return mergedProps;
      }
      return function pureFinalPropsSelector(nextState, nextOwnProps) {
        return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
      };
    }
    function finalPropsSelectorFactory(dispatch, _ref2) {
      var initMapStateToProps = _ref2.initMapStateToProps, initMapDispatchToProps = _ref2.initMapDispatchToProps, initMergeProps = _ref2.initMergeProps, options = _objectWithoutPropertiesLoose(_ref2, _excluded$e);
      var mapStateToProps = initMapStateToProps(dispatch, options);
      var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
      var mergeProps = initMergeProps(dispatch, options);
      {
        verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
      }
      var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
      return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
    }
    var _excluded$d = ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"];
    function match(arg, factories, name) {
      for (var i = factories.length - 1; i >= 0; i--) {
        var result = factories[i](arg);
        if (result)
          return result;
      }
      return function(dispatch, options) {
        throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
      };
    }
    function strictEqual(a, b) {
      return a === b;
    }
    function createConnect(_temp) {
      var _ref = _temp === void 0 ? {} : _temp, _ref$connectHOC = _ref.connectHOC, connectHOC = _ref$connectHOC === void 0 ? connectAdvanced : _ref$connectHOC, _ref$mapStateToPropsF = _ref.mapStateToPropsFactories, mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? defaultMapStateToPropsFactories : _ref$mapStateToPropsF, _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories, mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? defaultMapDispatchToPropsFactories : _ref$mapDispatchToPro, _ref$mergePropsFactor = _ref.mergePropsFactories, mergePropsFactories = _ref$mergePropsFactor === void 0 ? defaultMergePropsFactories : _ref$mergePropsFactor, _ref$selectorFactory = _ref.selectorFactory, selectorFactory = _ref$selectorFactory === void 0 ? finalPropsSelectorFactory : _ref$selectorFactory;
      return function connect2(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {
        if (_ref2 === void 0) {
          _ref2 = {};
        }
        var _ref3 = _ref2, _ref3$pure = _ref3.pure, pure = _ref3$pure === void 0 ? true : _ref3$pure, _ref3$areStatesEqual = _ref3.areStatesEqual, areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual, _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual, areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? shallowEqual$1 : _ref3$areOwnPropsEqua, _ref3$areStatePropsEq = _ref3.areStatePropsEqual, areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? shallowEqual$1 : _ref3$areStatePropsEq, _ref3$areMergedPropsE = _ref3.areMergedPropsEqual, areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? shallowEqual$1 : _ref3$areMergedPropsE, extraOptions = _objectWithoutPropertiesLoose(_ref3, _excluded$d);
        var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, "mapStateToProps");
        var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, "mapDispatchToProps");
        var initMergeProps = match(mergeProps, mergePropsFactories, "mergeProps");
        return connectHOC(selectorFactory, _extends({
          methodName: "connect",
          getDisplayName: function getDisplayName2(name) {
            return "Connect(" + name + ")";
          },
          shouldHandleStateChanges: Boolean(mapStateToProps),
          initMapStateToProps,
          initMapDispatchToProps,
          initMergeProps,
          pure,
          areStatesEqual,
          areOwnPropsEqual,
          areStatePropsEqual,
          areMergedPropsEqual
        }, extraOptions));
      };
    }
    const connect = /* @__PURE__ */ createConnect();
    setBatch(reactDom.exports.unstable_batchedUpdates);
    var PLACEMENT_AFTER = "after";
    var PLACEMENT_BEFORE = "before";
    var PLACEMENT_APPEND = "append";
    var PLACEMENT_PREPEND = "prepend";
    var SET_DRAG_PROGRESS = "SET_DRAG_PROGRESS";
    var SET_DRAG_START = "SET_DRAG_START";
    var SET_DRAG_END = "SET_DRAG_END";
    var setDragProgress = function setDragProgress2(mousePos, dragging) {
      return {
        type: SET_DRAG_PROGRESS,
        mousePos,
        dragging
      };
    };
    var setDragStart = function setDragStart2(dragStart, dragging, mousePos) {
      return {
        type: SET_DRAG_START,
        dragStart,
        dragging,
        mousePos
      };
    };
    var setDragEnd = function setDragEnd2() {
      return {
        type: SET_DRAG_END
      };
    };
    var tree = tree$1, group = group$1, rule = rule$1;
    function _createForOfIteratorHelper$1(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$1(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$1(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$1(o, minLen);
    }
    function _arrayLikeToArray$1(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    var _Utils$ConfigUtils$5 = Utils$1.ConfigUtils, extendConfig = _Utils$ConfigUtils$5.extendConfig, configKeys = _Utils$ConfigUtils$5.configKeys;
    var pickConfig = function pickConfig2(props) {
      return pick_1(props, configKeys);
    };
    var createConfigMemo = function createConfigMemo2() {
      var configStore = /* @__PURE__ */ new Map();
      var maxSize = 2;
      var configId = 0;
      var extendAndStore = function extendAndStore2(config2) {
        var extendedConfig = extendConfig(config2, ++configId);
        if (configStore.size + 1 > maxSize) {
          configStore["delete"](configStore.keys()[0]);
        }
        configStore.set(config2, extendedConfig);
        return extendedConfig;
      };
      var findBasic = function findBasic2(findConfig) {
        var _iterator = _createForOfIteratorHelper$1(configStore.keys()), _step;
        try {
          var _loop = function _loop2() {
            var basicConfig = _step.value;
            var extConfig = configStore.get(basicConfig);
            var found = configKeys.map(function(k) {
              return extConfig[k] === findConfig[k];
            }).filter(function(v) {
              return !v;
            }).length === 0;
            if (found) {
              return {
                v: basicConfig
              };
            }
          };
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var _ret = _loop();
            if (_typeof$1(_ret) === "object")
              return _ret.v;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return findConfig;
      };
      var findExtended = function findExtended2(findConfig) {
        var _iterator2 = _createForOfIteratorHelper$1(configStore.keys()), _step2;
        try {
          var _loop2 = function _loop22() {
            var savedConfig = _step2.value;
            var found = configKeys.map(function(k) {
              return savedConfig[k] === findConfig[k];
            }).filter(function(v) {
              return !v;
            }).length === 0;
            if (found) {
              return {
                v: configStore.get(savedConfig)
              };
            }
          };
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var _ret2 = _loop2();
            if (_typeof$1(_ret2) === "object")
              return _ret2.v;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        var _iterator3 = _createForOfIteratorHelper$1(configStore.values()), _step3;
        try {
          var _loop3 = function _loop32() {
            var extendedConfig = _step3.value;
            var found = configKeys.map(function(k) {
              return extendedConfig[k] === findConfig[k];
            }).filter(function(v) {
              return !v;
            }).length === 0;
            if (found) {
              return {
                v: extendedConfig
              };
            }
          };
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
            var _ret3 = _loop3();
            if (_typeof$1(_ret3) === "object")
              return _ret3.v;
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        return null;
      };
      var findOrExtend = function findOrExtend2(config2) {
        return findExtended(config2) || extendAndStore(config2);
      };
      return {
        getExtended: function getExtended(props) {
          return findOrExtend(pickConfig(props));
        },
        getBasic: findBasic
      };
    };
    var defaultValue = function defaultValue2(value2, _default2) {
      return typeof value2 === "undefined" ? _default2 : value2;
    };
    var truncateString = function truncateString2(str, n, useWordBoundary) {
      if (!n || str.length <= n) {
        return str;
      }
      var subString = str.substr(0, n - 1);
      return (useWordBoundary ? subString.substr(0, subString.lastIndexOf(" ")) : subString) + "...";
    };
    var immutableEqual = function immutableEqual2(v1, v2) {
      if (v1 === v2) {
        return true;
      } else {
        return v1.equals(v2);
      }
    };
    var shallowEqual = function shallowEqual2(a, b) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (a === b) {
        return true;
      } else if (Array.isArray(a))
        return shallowEqualArrays(a, b, deep);
      else if (a && typeof a.equals === "function")
        return a.equals(b);
      else if (_typeof$1(a) === "object")
        return shallowEqualObjects(a, b, deep);
      else
        return a === b;
    };
    function shallowEqualArrays(arrA, arrB) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (arrA === arrB) {
        return true;
      }
      if (!arrA || !arrB) {
        return false;
      }
      var len = arrA.length;
      if (arrB.length !== len) {
        return false;
      }
      for (var i = 0; i < len; i++) {
        var isEqual = deep ? shallowEqual(arrA[i], arrB[i], deep) : arrA[i] === arrB[i];
        if (!isEqual) {
          return false;
        }
      }
      return true;
    }
    function shallowEqualObjects(objA, objB) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (objA === objB) {
        return true;
      }
      if (!objA || !objB) {
        return false;
      }
      var aKeys = Object.keys(objA);
      var bKeys = Object.keys(objB);
      var len = aKeys.length;
      if (bKeys.length !== len) {
        return false;
      }
      for (var i = 0; i < len; i++) {
        var key = aKeys[i];
        var isEqual = deep ? shallowEqual(objA[key], objB[key], deep) : objA[key] === objB[key];
        if (!isEqual) {
          return false;
        }
      }
      return true;
    }
    var isDev = function isDev2() {
      return typeof process !== "undefined" && process.env && false;
    };
    var getLogger = function getLogger2() {
      var devMode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      var verbose = devMode != void 0 ? devMode : isDev();
      return verbose ? console : {
        error: function error() {
        },
        log: function log() {
        },
        warn: function warn2() {
        },
        debug: function debug() {
        },
        info: function info() {
        }
      };
    };
    var logger = getLogger();
    var validateAndFixTree = Utils$1.validateAndFixTree;
    var createValidationMemo = function createValidationMemo2() {
      var originalTree;
      var validatedTree;
      var configId;
      return function(config2, tree2) {
        var oldConfig = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;
        var sanitizeTree = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
        if (!tree2) {
          return null;
        }
        if (config2.__configId === configId && (immutableEqual(tree2, originalTree) || immutableEqual(tree2, validatedTree))) {
          return validatedTree;
        } else {
          configId = config2.__configId;
          originalTree = tree2;
          if (sanitizeTree === false) {
            validatedTree = validateAndFixTree(tree2, null, config2, oldConfig || config2, false, false);
          } else {
            validatedTree = validateAndFixTree(tree2, null, config2, oldConfig || config2);
          }
          return validatedTree;
        }
      };
    };
    var getReactContainerType = function getReactContainerType2(el) {
      if (el._reactRootContainer) {
        return "root";
      }
      if (Object.getOwnPropertyNames(el).filter(function(k) {
        return k.startsWith("__reactContainer");
      }).length > 0) {
        return "container";
      }
      return void 0;
    };
    var getReactRootNodeType = function getReactRootNodeType2(node2) {
      if (!node2) {
        return void 0;
      }
      var type = getReactContainerType(node2);
      if (type !== void 0) {
        return type;
      } else {
        return getReactRootNodeType2(node2.parentNode);
      }
    };
    var isUsingLegacyReactDomRender = function isUsingLegacyReactDomRender2(node2) {
      return getReactRootNodeType(node2) === "root";
    };
    var liteShouldComponentUpdate = function liteShouldComponentUpdate2(self2, config2) {
      return function(nextProps, nextState) {
        var prevProps = self2.props;
        var prevState = self2.state;
        var should = nextProps != prevProps || nextState != prevState;
        if (should) {
          if (prevState == nextState && prevProps != nextProps) {
            var chs = [];
            for (var k in nextProps) {
              var changed = nextProps[k] != prevProps[k];
              if (changed) {
                if (config2[k] == "ignore")
                  changed = false;
                else if (config2[k] == "shallow_deep")
                  changed = !shallowEqual(nextProps[k], prevProps[k], true);
                else if (config2[k] == "shallow")
                  changed = !shallowEqual(nextProps[k], prevProps[k]);
                else if (typeof config2[k] == "function")
                  changed = config2[k](nextProps[k], prevProps[k], nextState);
              }
              if (changed)
                chs.push(k);
            }
            if (!chs.length)
              should = false;
          }
        }
        return should;
      };
    };
    var pureShouldComponentUpdate = function pureShouldComponentUpdate2(self2) {
      return function(nextProps, nextState) {
        return !shallowEqual(self2.props, nextProps) || !shallowEqual(self2.state, nextState);
      };
    };
    var canUseOldComponentWillReceiveProps = function canUseOldComponentWillReceiveProps2() {
      var v = React.version.split(".").map(parseInt.bind(null, 10));
      return v[0] == 16 && v[1] < 3 || v[0] < 16;
    };
    var useOnPropsChanged = function useOnPropsChanged2(obj) {
      if (!obj.shouldComponentUpdate) {
        obj.shouldComponentUpdate = pureShouldComponentUpdate(obj);
      }
      if (canUseOldComponentWillReceiveProps()) {
        obj.componentWillReceiveProps = function(nextProps) {
          obj.onPropsChanged(nextProps);
        };
      } else {
        var origShouldComponentUpdate = obj.shouldComponentUpdate;
        var newShouldComponentUpdate = function newShouldComponentUpdate2(nextProps, nextState) {
          var shouldNotify = !shallowEqual(obj.props, nextProps);
          if (shouldNotify) {
            obj.onPropsChanged(nextProps);
          }
          var shouldUpdate = origShouldComponentUpdate.call(obj, nextProps, nextState);
          return shouldUpdate;
        };
        obj.shouldComponentUpdate = newShouldComponentUpdate.bind(obj);
      }
    };
    var bindActionCreators = function bindActionCreators2(actionCreators, config2, dispatch) {
      return mapValues_1(actionCreators, function(actionCreator) {
        return function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return dispatch(actionCreator.apply(void 0, [config2].concat(args)));
        };
      });
    };
    const ReactUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      isUsingLegacyReactDomRender,
      liteShouldComponentUpdate,
      pureShouldComponentUpdate,
      useOnPropsChanged,
      bindActionCreators
    }, Symbol.toStringTag, { value: "Module" }));
    function ownKeys$h(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$h(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$h(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$h(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$r(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$r();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$r() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var Query = /* @__PURE__ */ function(_Component) {
      _inherits(Query2, _Component);
      var _super = _createSuper$r(Query2);
      function Query2(props) {
        var _this;
        _classCallCheck(this, Query2);
        _this = _super.call(this, props);
        _this.shouldComponentUpdate = liteShouldComponentUpdate(_assertThisInitialized(_this), {
          tree: function tree2(nextValue) {
            if (nextValue === _this.oldValidatedTree && _this.oldValidatedTree === _this.validatedTree) {
              return false;
            }
            return true;
          }
        });
        useOnPropsChanged(_assertThisInitialized(_this));
        _this._updateActions(props);
        _this.validatedTree = props.getMemoizedTree(props.config, props.tree, void 0, props.sanitizeTree);
        _this.oldValidatedTree = _this.validatedTree;
        return _this;
      }
      _createClass(Query2, [{
        key: "_updateActions",
        value: function _updateActions(props) {
          var config2 = props.config, dispatch = props.dispatch;
          this.actions = bindActionCreators(_objectSpread$h(_objectSpread$h(_objectSpread$h({}, tree), group), rule), config2, dispatch);
        }
      }, {
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var onChange = nextProps.onChange;
          var oldConfig = this.props.config;
          var newTree = nextProps.tree;
          this.props.tree;
          var newConfig = nextProps.config;
          this.oldValidatedTree = this.validatedTree;
          this.validatedTree = newTree;
          if (oldConfig !== newConfig) {
            this._updateActions(nextProps);
            this.validatedTree = nextProps.getMemoizedTree(newConfig, newTree, oldConfig);
          }
          var validatedTreeChanged = !immutableEqual(this.validatedTree, this.oldValidatedTree);
          if (validatedTreeChanged) {
            var newBasicConfig = nextProps.getBasicConfig(newConfig);
            onChange && onChange(this.validatedTree, newBasicConfig, nextProps.__lastAction);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, renderBuilder = _this$props.renderBuilder, dispatch = _this$props.dispatch, __isInternalValueChange = _this$props.__isInternalValueChange;
          var builderProps = {
            tree: this.validatedTree,
            actions: this.actions,
            config: config2,
            dispatch,
            __isInternalValueChange
          };
          return renderBuilder(builderProps);
        }
      }]);
      return Query2;
    }(react.exports.Component);
    Query.propTypes = {
      config: propTypes.exports.object.isRequired,
      onChange: propTypes.exports.func,
      renderBuilder: propTypes.exports.func,
      tree: propTypes.exports.any
    };
    var ConnectedQuery = connect(function(state) {
      return {
        tree: state.tree,
        __isInternalValueChange: state.__isInternalValueChange,
        __lastAction: state.__lastAction
      };
    }, null, null, {
      context
    })(Query);
    ConnectedQuery.displayName = "ConnectedQuery";
    var _jsxFileName$V = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/QueryContainer.js";
    function _createSuper$q(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$q();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$q() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var defaultRoot = Utils$1.DefaultUtils.defaultRoot;
    var QueryContainer = /* @__PURE__ */ function(_Component) {
      _inherits(QueryContainer2, _Component);
      var _super = _createSuper$q(QueryContainer2);
      function QueryContainer2(props, context2) {
        var _this;
        _classCallCheck(this, QueryContainer2);
        _this = _super.call(this, props, context2);
        _this.setLastTree = function(lastTree) {
          if (_this.prevTree) {
            _this.prevprevTree = _this.prevTree;
          }
          _this.prevTree = lastTree;
        };
        _this.shouldComponentUpdate = liteShouldComponentUpdate(_assertThisInitialized(_this), {
          value: function value2(nextValue, prevValue, state) {
            return false;
          }
        });
        useOnPropsChanged(_assertThisInitialized(_this));
        var _createConfigMemo = createConfigMemo(), getExtended = _createConfigMemo.getExtended, getBasic = _createConfigMemo.getBasic;
        _this.getMemoizedConfig = getExtended;
        _this.getBasicConfig = getBasic;
        _this.getMemoizedTree = createValidationMemo();
        var config2 = _this.getMemoizedConfig(props);
        var tree2 = props.value;
        var validatedTree = _this.getMemoizedTree(config2, tree2);
        var reducer = TreeStore(config2, validatedTree, _this.getMemoizedTree, _this.setLastTree);
        var store = createStore(reducer);
        _this.config = config2;
        _this.state = {
          store
        };
        _this.QueryWrapper = function(pr) {
          return config2.settings.renderProvider(pr, config2.ctx);
        };
        return _this;
      }
      _createClass(QueryContainer2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var oldConfig = this.config;
          var nextConfig = this.getMemoizedConfig(nextProps);
          var isConfigChanged = oldConfig !== nextConfig;
          var storeValue = this.state.store.getState().tree;
          var isTreeChanged = !immutableEqual(nextProps.value, this.props.value) && !immutableEqual(nextProps.value, storeValue);
          var currentTree = isTreeChanged ? nextProps.value || defaultRoot(nextProps) : storeValue;
          var isTreeTrulyChanged = isTreeChanged && !immutableEqual(nextProps.value, this.prevTree) && !immutableEqual(nextProps.value, this.prevprevTree);
          this.sanitizeTree = isTreeTrulyChanged || isConfigChanged;
          if (isConfigChanged) {
            if (prevProps.settings.renderProvider !== nextProps.settings.renderProvider) {
              this.QueryWrapper = function(props) {
                return nextConfig.settings.renderProvider(props, nextConfig.ctx);
              };
            }
            this.config = nextConfig;
          }
          if (isTreeChanged || isConfigChanged) {
            var validatedTree = this.getMemoizedTree(nextConfig, currentTree, oldConfig, this.sanitizeTree);
            this.state.store.dispatch(tree.setTree(nextConfig, validatedTree));
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, renderBuilder = _this$props.renderBuilder, get_children = _this$props.get_children, onChange = _this$props.onChange;
          var store = this.state.store;
          var config2 = this.config;
          var QueryWrapper = this.QueryWrapper;
          return /* @__PURE__ */ jsxDEV(QueryWrapper, {
            config: config2,
            children: /* @__PURE__ */ jsxDEV(Provider, {
              store,
              context,
              children: /* @__PURE__ */ jsxDEV(ConnectedQuery, {
                config: config2,
                getMemoizedTree: this.getMemoizedTree,
                getBasicConfig: this.getBasicConfig,
                sanitizeTree: this.sanitizeTree,
                onChange,
                renderBuilder: renderBuilder || get_children
              }, void 0, false, {
                fileName: _jsxFileName$V,
                lineNumber: 108,
                columnNumber: 23
              }, this)
            }, void 0, false, {
              fileName: _jsxFileName$V,
              lineNumber: 105,
              columnNumber: 23
            }, this)
          }, void 0, false, {
            fileName: _jsxFileName$V,
            lineNumber: 103,
            columnNumber: 27
          }, this);
        }
      }]);
      return QueryContainer2;
    }(react.exports.Component);
    QueryContainer.propTypes = {
      conjunctions: propTypes.exports.object.isRequired,
      fields: propTypes.exports.object.isRequired,
      types: propTypes.exports.object.isRequired,
      operators: propTypes.exports.object.isRequired,
      widgets: propTypes.exports.object.isRequired,
      settings: propTypes.exports.object.isRequired,
      ctx: propTypes.exports.object.isRequired,
      onChange: propTypes.exports.func,
      renderBuilder: propTypes.exports.func,
      value: propTypes.exports.any
    };
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    var classnames = { exports: {} };
    /*!
    	Copyright (c) 2018 Jed Watson.
    	Licensed under the MIT License (MIT), see
    	http://jedwatson.github.io/classnames
    */
    (function(module2) {
      (function() {
        var hasOwn = {}.hasOwnProperty;
        function classNames2() {
          var classes = [];
          for (var i = 0; i < arguments.length; i++) {
            var arg = arguments[i];
            if (!arg)
              continue;
            var argType = typeof arg;
            if (argType === "string" || argType === "number") {
              classes.push(arg);
            } else if (Array.isArray(arg)) {
              if (arg.length) {
                var inner = classNames2.apply(null, arg);
                if (inner) {
                  classes.push(inner);
                }
              }
            } else if (argType === "object") {
              if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
                classes.push(arg.toString());
                continue;
              }
              for (var key in arg) {
                if (hasOwn.call(arg, key) && arg[key]) {
                  classes.push(key);
                }
              }
            }
          }
          return classes.join(" ");
        }
        if (module2.exports) {
          classNames2.default = classNames2;
          module2.exports = classNames2;
        } else {
          window.classNames = classNames2;
        }
      })();
    })(classnames);
    const classNames = classnames.exports;
    var _jsxFileName$U = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/containers/RuleContainer.js";
    function _createSuper$p(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$p();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$p() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var getFieldConfig$7 = Utils$1.ConfigUtils.getFieldConfig;
    var createRuleContainer = function createRuleContainer2(Rule2) {
      var _class;
      return _class = /* @__PURE__ */ function(_Component) {
        _inherits(RuleContainer2, _Component);
        var _super = _createSuper$p(RuleContainer2);
        function RuleContainer2(props) {
          var _this;
          _classCallCheck(this, RuleContainer2);
          _this = _super.call(this, props);
          _this.dummyFn = function() {
          };
          _this.removeSelf = function() {
            _this.props.actions.removeRule(_this.props.path);
          };
          _this.setLock = function() {
            var lock = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
            _this.props.actions.setLock(_this.props.path, lock);
          };
          _this.setField = function(field) {
            _this.props.actions.setField(_this.props.path, field);
          };
          _this.setOperator = function(operator) {
            _this.props.actions.setOperator(_this.props.path, operator);
          };
          _this.setOperatorOption = function(name, value2) {
            _this.props.actions.setOperatorOption(_this.props.path, name, value2);
          };
          _this.setValue = function(delta, value2, type, asyncListValues, __isInternal) {
            _this.props.actions.setValue(_this.props.path, delta, value2, type, asyncListValues, __isInternal);
          };
          _this.setValueSrc = function(delta, srcKey) {
            _this.props.actions.setValueSrc(_this.props.path, delta, srcKey);
          };
          _this.pureShouldComponentUpdate = pureShouldComponentUpdate(_assertThisInitialized(_this));
          _this.dummyFn.isDummyFn = true;
          return _this;
        }
        _createClass(RuleContainer2, [{
          key: "shouldComponentUpdate",
          value: function shouldComponentUpdate(nextProps, nextState) {
            var prevProps = this.props;
            var prevState = this.state;
            var should = this.pureShouldComponentUpdate(nextProps, nextState);
            if (should) {
              if (prevState == nextState && prevProps != nextProps) {
                var draggingId = nextProps.dragging.id || prevProps.dragging.id;
                var isDraggingMe = draggingId == nextProps.id;
                var chs = [];
                for (var k in nextProps) {
                  var changed = nextProps[k] != prevProps[k];
                  if (k == "dragging" && !isDraggingMe) {
                    changed = false;
                  }
                  if (changed) {
                    chs.push(k);
                  }
                }
                if (!chs.length)
                  should = false;
              }
            }
            return should;
          }
        }, {
          key: "render",
          value: function render() {
            var isDraggingMe = this.props.dragging.id == this.props.id;
            var fieldConfig = getFieldConfig$7(this.props.config, this.props.field);
            var showErrorMessage = this.props.config.settings.showErrorMessage;
            fieldConfig && fieldConfig.type == "!struct";
            var isInDraggingTempo = !isDraggingMe && this.props.isDraggingTempo;
            var valueError = this.props.valueError;
            var oneValueError = valueError && valueError.toArray().filter(function(e) {
              return !!e;
            }).shift() || null;
            var hasError = oneValueError != null && showErrorMessage;
            return /* @__PURE__ */ jsxDEV("div", {
              className: classNames("group-or-rule-container", "rule-container", hasError ? "rule-with-error" : null),
              "data-id": this.props.id,
              children: [
                isDraggingMe ? /* @__PURE__ */ jsxDEV(Rule2, {
                  id: this.props.id,
                  groupId: this.props.groupId,
                  isDraggingMe: true,
                  isDraggingTempo: true,
                  dragging: this.props.dragging,
                  setField: this.dummyFn,
                  setOperator: this.dummyFn,
                  setOperatorOption: this.dummyFn,
                  setLock: this.dummyFn,
                  removeSelf: this.dummyFn,
                  setValue: this.dummyFn,
                  setValueSrc: this.dummyFn,
                  selectedField: this.props.field || null,
                  parentField: this.props.parentField || null,
                  selectedOperator: this.props.operator || null,
                  value: this.props.value || null,
                  valueSrc: this.props.valueSrc || null,
                  valueError: this.props.valueError || null,
                  operatorOptions: this.props.operatorOptions,
                  config: this.props.config,
                  reordableNodesCnt: this.props.reordableNodesCnt,
                  totalRulesCnt: this.props.totalRulesCnt,
                  asyncListValues: this.props.asyncListValues,
                  isLocked: this.props.isLocked,
                  isTrueLocked: this.props.isTrueLocked,
                  parentReordableNodesCnt: this.props.parentReordableNodesCnt
                }, "dragging", false, {
                  fileName: _jsxFileName$U,
                  lineNumber: 95,
                  columnNumber: 41
                }, this) : null,
                /* @__PURE__ */ jsxDEV(Rule2, {
                  id: this.props.id,
                  groupId: this.props.groupId,
                  isDraggingMe,
                  isDraggingTempo: isInDraggingTempo,
                  onDragStart: this.props.onDragStart,
                  setLock: isInDraggingTempo ? this.dummyFn : this.setLock,
                  removeSelf: isInDraggingTempo ? this.dummyFn : this.removeSelf,
                  setField: isInDraggingTempo ? this.dummyFn : this.setField,
                  setOperator: isInDraggingTempo ? this.dummyFn : this.setOperator,
                  setOperatorOption: isInDraggingTempo ? this.dummyFn : this.setOperatorOption,
                  setValue: isInDraggingTempo ? this.dummyFn : this.setValue,
                  setValueSrc: isInDraggingTempo ? this.dummyFn : this.setValueSrc,
                  selectedField: this.props.field || null,
                  parentField: this.props.parentField || null,
                  selectedOperator: this.props.operator || null,
                  value: this.props.value || null,
                  valueSrc: this.props.valueSrc || null,
                  valueError: this.props.valueError || null,
                  operatorOptions: this.props.operatorOptions,
                  config: this.props.config,
                  reordableNodesCnt: this.props.reordableNodesCnt,
                  totalRulesCnt: this.props.totalRulesCnt,
                  asyncListValues: this.props.asyncListValues,
                  isLocked: this.props.isLocked,
                  isTrueLocked: this.props.isTrueLocked,
                  parentReordableNodesCnt: this.props.parentReordableNodesCnt
                }, this.props.id, false, {
                  fileName: _jsxFileName$U,
                  lineNumber: 123,
                  columnNumber: 33
                }, this)
              ]
            }, void 0, false, {
              fileName: _jsxFileName$U,
              lineNumber: 92,
              columnNumber: 29
            }, this);
          }
        }]);
        return RuleContainer2;
      }(react.exports.Component), _class.propTypes = {
        id: propTypes.exports.string.isRequired,
        groupId: propTypes.exports.string,
        config: propTypes.exports.object.isRequired,
        path: propTypes.exports.any.isRequired,
        operator: propTypes.exports.string,
        field: propTypes.exports.string,
        actions: propTypes.exports.object.isRequired,
        onDragStart: propTypes.exports.func,
        value: propTypes.exports.any,
        valueSrc: propTypes.exports.any,
        asyncListValues: propTypes.exports.array,
        valueError: propTypes.exports.any,
        operatorOptions: propTypes.exports.object,
        reordableNodesCnt: propTypes.exports.number,
        parentField: propTypes.exports.string,
        isLocked: propTypes.exports.bool,
        isTrueLocked: propTypes.exports.bool,
        dragging: propTypes.exports.object,
        isDraggingTempo: propTypes.exports.bool
      }, _class;
    };
    const RuleContainer = function(Rule2) {
      var ConnectedRuleContainer = connect(function(state) {
        return {
          dragging: state.dragging
        };
      }, null, null, {
        context
      })(createRuleContainer(Rule2));
      ConnectedRuleContainer.displayName = "ConnectedRuleContainer";
      return ConnectedRuleContainer;
    };
    var _jsxFileName$T = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/containers/SortableContainer.js";
    function _createSuper$o(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$o();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$o() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var clone$2 = Utils$1.clone;
    var getFlatTree = Utils$1.TreeUtils.getFlatTree;
    var _isReorderingTree = false;
    var createSortableContainer = function createSortableContainer2(Builder2) {
      var _class;
      var CanMoveFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      return _class = /* @__PURE__ */ function(_Component) {
        _inherits(SortableContainer2, _Component);
        var _super = _createSuper$o(SortableContainer2);
        function SortableContainer2(props) {
          var _this;
          _classCallCheck(this, SortableContainer2);
          _this = _super.call(this, props);
          _this._getEventTarget = function(e, dragStart) {
            return e && e.__mocked_window || document.body || window;
          };
          _this.onDragStart = function(id, dom, e) {
            var treeEl = dom.closest(".query-builder");
            if (_this._isUsingLegacyReactDomRender === void 0) {
              _this._isUsingLegacyReactDomRender = isUsingLegacyReactDomRender(treeEl);
            }
            document.body.classList.add("qb-dragging");
            treeEl.classList.add("qb-dragging");
            var treeElContainer = treeEl.closest(".query-builder-container") || treeEl;
            treeElContainer = _this._getScrollParent(treeElContainer) || document.body;
            var scrollTop = treeElContainer.scrollTop;
            _this._getDraggableNodeEl(treeEl);
            _this._getPlaceholderNodeEl(treeEl);
            var tmpAllGroups = treeEl.querySelectorAll(".group--children");
            var anyGroup = tmpAllGroups.length ? tmpAllGroups[0] : null;
            var groupPadding;
            if (anyGroup) {
              groupPadding = window.getComputedStyle(anyGroup, null).getPropertyValue("padding-left");
              groupPadding = parseInt(groupPadding);
            }
            var dragging = {
              id,
              x: dom.offsetLeft,
              y: dom.offsetTop,
              w: dom.offsetWidth,
              h: dom.offsetHeight,
              itemInfo: _this.tree.items[id],
              paddingLeft: groupPadding
            };
            var dragStart = {
              id,
              x: dom.offsetLeft,
              y: dom.offsetTop,
              scrollTop,
              clientX: e.clientX,
              clientY: e.clientY,
              itemInfo: clone$2(_this.tree.items[id]),
              treeEl,
              treeElContainer
            };
            var mousePos = {
              clientX: e.clientX,
              clientY: e.clientY
            };
            var target = _this._getEventTarget(e, dragStart);
            _this.eventTarget = target;
            target.addEventListener("mousemove", _this.onDrag);
            target.addEventListener("mouseup", _this.onDragEnd);
            _this.props.setDragStart(dragStart, dragging, mousePos);
          };
          _this.onDrag = function(e) {
            var doHandleDrag = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
            var dragging = Object.assign({}, _this.props.dragging);
            var startDragging = _this.props.dragStart;
            var paddingLeft = dragging.paddingLeft;
            var treeElContainer = startDragging.treeElContainer;
            var scrollTop = treeElContainer.scrollTop;
            dragging.itemInfo = _this.tree.items[dragging.id];
            if (!dragging.itemInfo) {
              return;
            }
            var mousePos = {
              clientX: e.clientX,
              clientY: e.clientY
            };
            var startMousePos = {
              clientX: startDragging.clientX,
              clientY: startDragging.clientY
            };
            if (e.__mock_dom) {
              var treeEl = startDragging.treeEl;
              var dragEl = _this._getDraggableNodeEl(treeEl);
              var plhEl = _this._getPlaceholderNodeEl(treeEl);
              e.__mock_dom({
                treeEl,
                dragEl,
                plhEl
              });
            }
            if (!startDragging.plX) {
              var _treeEl = startDragging.treeEl;
              var _plhEl2 = _this._getPlaceholderNodeEl(_treeEl);
              if (_plhEl2) {
                startDragging.plX = _plhEl2.getBoundingClientRect().left + window.scrollX;
                startDragging.plY = _plhEl2.getBoundingClientRect().top + window.scrollY;
              }
            }
            var startX = startDragging.x;
            var startY = startDragging.y;
            var startClientX = startDragging.clientX;
            var startClientY = startDragging.clientY;
            var startScrollTop = startDragging.scrollTop;
            var pos = {
              x: startX + (e.clientX - startClientX),
              y: startY + (e.clientY - startClientY) + (scrollTop - startScrollTop)
            };
            dragging.x = pos.x;
            dragging.y = pos.y;
            dragging.paddingLeft = paddingLeft;
            dragging.mousePos = mousePos;
            dragging.startMousePos = startMousePos;
            _this.props.setDragProgress(mousePos, dragging);
            var moved = doHandleDrag ? _this.handleDrag(dragging, e, CanMoveFn) : false;
            if (!moved) {
              if (e.preventDefault)
                e.preventDefault();
            }
          };
          _this.onDragEnd = function() {
            var treeEl = _this.props.dragStart.treeEl;
            _this.props.setDragEnd();
            treeEl.classList.remove("qb-dragging");
            document.body.classList.remove("qb-dragging");
            _this._cacheEls = {};
            var target = _this.eventTarget || _this._getEventTarget();
            target.removeEventListener("mousemove", _this.onDrag);
            target.removeEventListener("mouseup", _this.onDragEnd);
          };
          _this.pureShouldComponentUpdate = pureShouldComponentUpdate(_assertThisInitialized(_this));
          useOnPropsChanged(_assertThisInitialized(_this));
          _this.onPropsChanged(props);
          return _this;
        }
        _createClass(SortableContainer2, [{
          key: "onPropsChanged",
          value: function onPropsChanged(nextProps) {
            this.tree = getFlatTree(nextProps.tree);
          }
        }, {
          key: "shouldComponentUpdate",
          value: function shouldComponentUpdate(nextProps, nextState) {
            var prevProps = this.props;
            var prevState = this.state;
            var should = this.pureShouldComponentUpdate(nextProps, nextState);
            if (should) {
              if (prevState == nextState && prevProps != nextProps) {
                var chs = [];
                for (var k in nextProps) {
                  var changed = nextProps[k] != prevProps[k];
                  if (changed) {
                    if (k != "dragging" && k != "mousePos")
                      chs.push(k);
                  }
                }
                if (!chs.length)
                  should = false;
              }
            }
            return should;
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(_prevProps, _prevState) {
            var dragging = this.props.dragging;
            var startDragging = this.props.dragStart;
            _isReorderingTree = false;
            if (startDragging && startDragging.id) {
              dragging.itemInfo = this.tree.items[dragging.id];
              if (dragging.itemInfo) {
                if (dragging.itemInfo.index != startDragging.itemInfo.index || dragging.itemInfo.parent != startDragging.itemInfo.parent) {
                  var treeEl = startDragging.treeEl;
                  var treeElContainer = startDragging.treeElContainer;
                  var plhEl = this._getPlaceholderNodeEl(treeEl, true);
                  if (plhEl) {
                    var plX = plhEl.getBoundingClientRect().left + window.scrollX;
                    var plY = plhEl.getBoundingClientRect().top + window.scrollY;
                    var oldPlX = startDragging.plX;
                    var oldPlY = startDragging.plY;
                    var scrollTop = treeElContainer.scrollTop;
                    startDragging.plX = plX;
                    startDragging.plY = plY;
                    startDragging.itemInfo = clone$2(dragging.itemInfo);
                    startDragging.y = plhEl.offsetTop;
                    startDragging.x = plhEl.offsetLeft;
                    startDragging.clientY += plY - oldPlY;
                    startDragging.clientX += plX - oldPlX;
                    if (treeElContainer != document.body)
                      startDragging.scrollTop = scrollTop;
                    this.onDrag(this.props.mousePos, false);
                  }
                }
              }
            }
          }
        }, {
          key: "_getNodeElById",
          value: function _getNodeElById(treeEl, indexId) {
            var ignoreCache = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
            if (indexId == null)
              return null;
            if (!this._cacheEls)
              this._cacheEls = {};
            var el = this._cacheEls[indexId];
            if (el && document.contains(el) && !ignoreCache)
              return el;
            el = treeEl.querySelector('.group-or-rule-container[data-id="' + indexId + '"]');
            this._cacheEls[indexId] = el;
            return el;
          }
        }, {
          key: "_getDraggableNodeEl",
          value: function _getDraggableNodeEl(treeEl) {
            var ignoreCache = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
            if (!this._cacheEls)
              this._cacheEls = {};
            var el = this._cacheEls["draggable"];
            if (el && document.contains(el) && !ignoreCache)
              return el;
            var els = treeEl.getElementsByClassName("qb-draggable");
            el = els.length ? els[0] : null;
            this._cacheEls["draggable"] = el;
            return el;
          }
        }, {
          key: "_getPlaceholderNodeEl",
          value: function _getPlaceholderNodeEl(treeEl) {
            var ignoreCache = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
            if (!this._cacheEls)
              this._cacheEls = {};
            var el = this._cacheEls["placeholder"];
            if (el && document.contains(el) && !ignoreCache)
              return el;
            var els = treeEl.getElementsByClassName("qb-placeholder");
            el = els.length ? els[0] : null;
            this._cacheEls["placeholder"] = el;
            return el;
          }
        }, {
          key: "_isScrollable",
          value: function _isScrollable(node2) {
            var overflowY = window.getComputedStyle(node2)["overflow-y"];
            return (overflowY === "scroll" || overflowY === "auto") && node2.scrollHeight > node2.offsetHeight;
          }
        }, {
          key: "_getScrollParent",
          value: function _getScrollParent(node2) {
            if (node2 == null)
              return null;
            if (node2 === document.body || this._isScrollable(node2)) {
              return node2;
            } else {
              return this._getScrollParent(node2.parentNode);
            }
          }
        }, {
          key: "handleDrag",
          value: function handleDrag(dragInfo, e, canMoveFn) {
            var _this2 = this;
            var canMoveBeforeAfterGroup = true;
            var itemInfo = dragInfo.itemInfo;
            var paddingLeft = dragInfo.paddingLeft;
            var moveInfo = null;
            var treeEl = this.props.dragStart.treeEl;
            var dragId = dragInfo.id;
            var dragEl = this._getDraggableNodeEl(treeEl);
            var plhEl = this._getPlaceholderNodeEl(treeEl);
            var dragRect, plhRect, hovRect, treeRect;
            if (dragEl && plhEl) {
              dragRect = dragEl.getBoundingClientRect();
              plhRect = plhEl.getBoundingClientRect();
              if (!plhRect.width) {
                return;
              }
              var dragDirs = {
                hrz: 0,
                vrt: 0
              };
              if (dragRect.top < plhRect.top)
                dragDirs.vrt = -1;
              else if (dragRect.bottom > plhRect.bottom)
                dragDirs.vrt = 1;
              if (dragRect.left > plhRect.left)
                dragDirs.hrz = 1;
              else if (dragRect.left < plhRect.left)
                dragDirs.hrz = -1;
              treeRect = treeEl.getBoundingClientRect();
              var trgCoord = {
                x: treeRect.left + (treeRect.right - treeRect.left) / 2,
                y: dragDirs.vrt >= 0 ? dragRect.bottom : dragRect.top
              };
              var hovCNodeEl;
              if (e.__mocked_hov_container) {
                hovCNodeEl = e.__mocked_hov_container;
              } else {
                var hovNodeEl = document.elementFromPoint(trgCoord.x, trgCoord.y - 1);
                hovCNodeEl = hovNodeEl ? hovNodeEl.closest(".group-or-rule-container") : null;
                if (!hovCNodeEl && hovNodeEl && hovNodeEl.classList.contains("query-builder-container")) {
                  var _hovNodeEl$firstChild;
                  var rootGroupContainer = hovNodeEl === null || hovNodeEl === void 0 ? void 0 : (_hovNodeEl$firstChild = hovNodeEl.firstChild) === null || _hovNodeEl$firstChild === void 0 ? void 0 : _hovNodeEl$firstChild.firstChild;
                  if (rootGroupContainer && rootGroupContainer.classList.contains("group-or-rule-container")) {
                    hovCNodeEl = rootGroupContainer;
                  }
                }
              }
              if (!hovCNodeEl) {
                logger.log("out of tree bounds!");
              } else {
                var isGroup = hovCNodeEl.classList.contains("group-container");
                var hovNodeId = hovCNodeEl.getAttribute("data-id");
                var hovEl = hovCNodeEl;
                var doAppend = false;
                var doPrepend = false;
                if (hovEl) {
                  hovRect = hovEl.getBoundingClientRect();
                  var hovHeight = hovRect.bottom - hovRect.top;
                  var hovII = this.tree.items[hovNodeId];
                  if (!hovII) {
                    throw new Error("There is an issue with rendering. If you use Next.js, please check getServerSideProps() method.");
                  }
                  var trgRect = null, trgEl = null, trgII = null, altII = null;
                  if (dragDirs.vrt == 0) {
                    trgII = itemInfo;
                    trgEl = plhEl;
                    if (trgEl)
                      trgRect = trgEl.getBoundingClientRect();
                  } else {
                    if (isGroup) {
                      if (dragDirs.vrt > 0) {
                        var hovInnerEl = hovCNodeEl.getElementsByClassName("group--header");
                        var hovEl2 = hovInnerEl.length ? hovInnerEl[0] : null;
                        if (hovEl2) {
                          var hovRect2 = hovEl2.getBoundingClientRect();
                          var hovHeight2 = hovRect2.bottom - hovRect2.top;
                          var isOverHover = dragRect.bottom - hovRect2.top > hovHeight2 * 3 / 4;
                          if (isOverHover && hovII.top > dragInfo.itemInfo.top) {
                            trgII = hovII;
                            trgRect = hovRect2;
                            trgEl = hovEl2;
                            doPrepend = true;
                          }
                        }
                      } else if (dragDirs.vrt < 0) {
                        if (hovII.lev >= itemInfo.lev) {
                          var isClimbToHover = hovRect.bottom - dragRect.top >= 2;
                          if (isClimbToHover && hovII.top < dragInfo.itemInfo.top) {
                            trgII = hovII;
                            trgRect = hovRect;
                            trgEl = hovEl;
                            doAppend = true;
                          }
                        }
                      }
                      if (!doPrepend && !doAppend || canMoveBeforeAfterGroup) {
                        var _isOverHover = dragDirs.vrt < 0 ? hovRect.bottom - dragRect.top > hovHeight - 5 : dragRect.bottom - hovRect.top > hovHeight - 5;
                        if (_isOverHover) {
                          if (!doPrepend && !doAppend) {
                            trgII = hovII;
                            trgRect = hovRect;
                            trgEl = hovEl;
                          }
                          {
                            altII = hovII;
                          }
                        }
                      }
                    } else {
                      var _isOverHover2 = dragDirs.vrt < 0 ? hovRect.bottom - dragRect.top > hovHeight / 2 : dragRect.bottom - hovRect.top > hovHeight / 2;
                      if (_isOverHover2) {
                        trgII = hovII;
                        trgRect = hovRect;
                        trgEl = hovEl;
                      }
                    }
                  }
                  var isSamePos = trgII && trgII.id == dragId;
                  if (trgRect) {
                    var dragLeftOffset = dragRect.left - treeRect.left;
                    trgRect.left - treeRect.left;
                    var dragLev = Math.max(0, Math.round(dragLeftOffset / paddingLeft));
                    var availMoves = [];
                    var altMoves = [];
                    if (isSamePos)
                      ;
                    else {
                      if (isGroup) {
                        if (doAppend) {
                          availMoves.push([PLACEMENT_APPEND, trgII, trgII.lev + 1]);
                        } else if (doPrepend) {
                          availMoves.push([PLACEMENT_PREPEND, trgII, trgII.lev + 1]);
                        }
                        if (altII) {
                          var isToRoot = altII.lev == 0;
                          var isToCase = altII.type == "case_group" && itemInfo.type != "case_group";
                          var prevCaseId = altII.prev && this.tree.items[altII.prev].caseId;
                          var nextCaseId = altII.next && this.tree.items[altII.next].caseId;
                          if (itemInfo.caseId == prevCaseId)
                            prevCaseId = null;
                          if (itemInfo.caseId == nextCaseId)
                            nextCaseId = null;
                          var prevCase = prevCaseId && this.tree.items[prevCaseId];
                          var nextCase = nextCaseId && this.tree.items[nextCaseId];
                          if (dragDirs.vrt > 0) {
                            if (isToRoot) {
                              altMoves.push([PLACEMENT_APPEND, altII, altII.lev + 1]);
                            } else if (isToCase && nextCase) {
                              altMoves.push([PLACEMENT_PREPEND, nextCase, nextCase.lev + 1]);
                            } else {
                              altMoves.push([PLACEMENT_AFTER, altII, altII.lev]);
                            }
                          } else if (dragDirs.vrt < 0) {
                            if (isToRoot) {
                              altMoves.push([PLACEMENT_PREPEND, altII, altII.lev + 1]);
                            } else if (isToCase && prevCase) {
                              altMoves.push([PLACEMENT_APPEND, prevCase, prevCase.lev + 1]);
                            } else {
                              altMoves.push([PLACEMENT_BEFORE, altII, altII.lev]);
                            }
                          }
                        }
                      }
                      if (!doAppend && !doPrepend) {
                        if (dragDirs.vrt < 0) {
                          availMoves.push([PLACEMENT_BEFORE, trgII, trgII.lev]);
                        } else if (dragDirs.vrt > 0) {
                          availMoves.push([PLACEMENT_AFTER, trgII, trgII.lev]);
                        }
                      }
                    }
                    var addCaseII = function addCaseII2(am) {
                      var toII = am[1];
                      var fromCaseII = itemInfo.caseId ? _this2.tree.items[itemInfo.caseId] : null;
                      var toCaseII = toII.caseId ? _this2.tree.items[toII.caseId] : null;
                      return [].concat(_toConsumableArray(am), [fromCaseII, toCaseII]);
                    };
                    availMoves = availMoves.map(addCaseII);
                    altMoves = altMoves.map(addCaseII);
                    availMoves = availMoves.filter(function(am) {
                      var placement = am[0];
                      var trg = am[1];
                      if ((placement == PLACEMENT_BEFORE || placement == PLACEMENT_AFTER) && trg.parent == null)
                        return false;
                      if (trg.collapsed && (placement == PLACEMENT_APPEND || placement == PLACEMENT_PREPEND))
                        return false;
                      var isInside = trg.id == itemInfo.id;
                      if (!isInside) {
                        var tmp = trg;
                        while (tmp.parent) {
                          tmp = _this2.tree.items[tmp.parent];
                          if (tmp.id == itemInfo.id) {
                            isInside = true;
                            break;
                          }
                        }
                      }
                      return !isInside;
                    }).map(function(am) {
                      var placement = am[0], toII = am[1];
                      am[2];
                      am[3];
                      am[4];
                      var toParentII = null;
                      if (placement == PLACEMENT_APPEND || placement == PLACEMENT_PREPEND)
                        toParentII = toII;
                      else
                        toParentII = _this2.tree.items[toII.parent];
                      if (toParentII && toParentII.parent == null)
                        toParentII = null;
                      am[5] = toParentII;
                      return am;
                    });
                    var bestMode = null;
                    var filteredMoves = availMoves.filter(function(am) {
                      return _this2.canMove(itemInfo, am[1], am[0], am[3], am[4], am[5], canMoveFn);
                    });
                    if (filteredMoves.length == 0 && altMoves.length > 0) {
                      filteredMoves = altMoves.filter(function(am) {
                        return _this2.canMove(itemInfo, am[1], am[0], am[3], am[4], am[5], canMoveFn);
                      });
                    }
                    var levs = filteredMoves.map(function(am) {
                      return am[2];
                    });
                    var curLev = itemInfo.lev;
                    var allLevs = levs.concat(curLev);
                    var closestDragLev = null;
                    if (allLevs.indexOf(dragLev) != -1)
                      closestDragLev = dragLev;
                    else if (dragLev > Math.max.apply(Math, _toConsumableArray(allLevs)))
                      closestDragLev = Math.max.apply(Math, _toConsumableArray(allLevs));
                    else if (dragLev < Math.min.apply(Math, _toConsumableArray(allLevs)))
                      closestDragLev = Math.min.apply(Math, _toConsumableArray(allLevs));
                    bestMode = filteredMoves.find(function(am) {
                      return am[2] == closestDragLev;
                    });
                    if (!isSamePos && !bestMode && filteredMoves.length)
                      bestMode = filteredMoves[0];
                    moveInfo = bestMode;
                  }
                }
              }
            }
            if (moveInfo) {
              this.move(itemInfo, moveInfo[1], moveInfo[0], moveInfo[3]);
              return true;
            }
            return false;
          }
        }, {
          key: "canMove",
          value: function canMove(fromII, toII, placement, fromCaseII, toCaseII, toParentII, canMoveFn) {
            if (!fromII || !toII)
              return false;
            if (fromII.id === toII.id)
              return false;
            var _this$props$config$se = this.props.config.settings, canRegroup = _this$props$config$se.canRegroup, canRegroupCases = _this$props$config$se.canRegroupCases, maxNesting = _this$props$config$se.maxNesting, maxNumberOfRules = _this$props$config$se.maxNumberOfRules, canLeaveEmptyCase = _this$props$config$se.canLeaveEmptyCase;
            var newLev = toParentII ? toParentII.lev + 1 : toII.lev;
            var isBeforeAfter = placement == PLACEMENT_BEFORE || placement == PLACEMENT_AFTER;
            var isPend = placement == PLACEMENT_PREPEND || placement == PLACEMENT_APPEND;
            var isLev1 = isBeforeAfter && toII.lev == 1 || isPend && toII.lev == 0;
            var isParentChange = fromII.parent != toII.parent;
            var isStructChange = isPend || isParentChange;
            var isForbiddenStructChange = fromII.type == "case_group" && !isLev1 || fromII.parentType == "rule_group" || toII.type == "rule_group" || toII.parentType == "rule_group" || fromII.type != "case_group" && toII.type == "case_group" && isBeforeAfter || fromII.type != "case_group" && toII.type == "switch_group" || !canRegroupCases && fromII.caseId != toII.caseId;
            var isLockedChange = toII.isLocked || fromII.isLocked || toParentII && toParentII.isLocked;
            if (maxNesting && newLev > maxNesting)
              return false;
            if (isStructChange && (!canRegroup || isForbiddenStructChange || isLockedChange))
              return false;
            if (fromII.type != "case_group" && fromII.caseId != toII.caseId) {
              var isLastFromCase = fromCaseII ? fromCaseII._height == 2 : false;
              var newRulesInTargetCase = toCaseII ? toCaseII.leafsCount + 1 : 0;
              if (maxNumberOfRules && newRulesInTargetCase > maxNumberOfRules)
                return false;
              if (isLastFromCase && !canLeaveEmptyCase)
                return false;
            }
            if (fromII.type == "case_group" && (fromII.isDefaultCase || toII.isDefaultCase || toII.type == "switch_group" && placement == PLACEMENT_APPEND)) {
              return false;
            }
            var res = true;
            if (canMoveFn) {
              res = canMoveFn(fromII.node.toJS(), toII.node.toJS(), placement, toParentII ? toParentII.node.toJS() : null);
            }
            return res;
          }
        }, {
          key: "move",
          value: function move(fromII, toII, placement, toParentII) {
            if (!this._isUsingLegacyReactDomRender) {
              _isReorderingTree = true;
            }
            this.props.actions.moveItem(fromII.path, toII.path, placement);
          }
        }, {
          key: "render",
          value: function render() {
            return /* @__PURE__ */ jsxDEV(Builder2, {
              ...this.props,
              onDragStart: this.onDragStart
            }, void 0, false, {
              fileName: _jsxFileName$T,
              lineNumber: 598,
              columnNumber: 29
            }, this);
          }
        }]);
        return SortableContainer2;
      }(react.exports.Component), _class.propTypes = {
        tree: propTypes.exports.any.isRequired,
        actions: propTypes.exports.object.isRequired
      }, _class;
    };
    const SortableContainer = function(Builder2) {
      var CanMoveFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var ConnectedSortableContainer = connect(function(state) {
        return {
          dragging: state.dragging,
          dragStart: state.dragStart,
          mousePos: state.mousePos
        };
      }, {
        setDragStart,
        setDragProgress,
        setDragEnd
      }, null, {
        context
      })(createSortableContainer(Builder2, CanMoveFn));
      ConnectedSortableContainer.displayName = "ConnectedSortableContainer";
      return ConnectedSortableContainer;
    };
    var _jsxFileName$S = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/containers/Draggable.js";
    var _excluded$c = ["isDraggingTempo", "isDraggingMe", "dragging"];
    function _createSuper$n(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$n();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$n() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    const Draggable = function(className) {
      return function(GroupOrRule) {
        var _class;
        return _class = /* @__PURE__ */ function(_PureComponent) {
          _inherits(Draggable2, _PureComponent);
          var _super = _createSuper$n(Draggable2);
          function Draggable2(props) {
            var _this;
            _classCallCheck(this, Draggable2);
            _this = _super.call(this, props);
            _this.handleDraggerMouseDown = function(e) {
              var nodeId = _this.props.id;
              var dom = _this.wrapper.current;
              if (_this.props.onDragStart) {
                _this.props.onDragStart(nodeId, dom, e);
              }
            };
            _this.wrapper = /* @__PURE__ */ React.createRef();
            return _this;
          }
          _createClass(Draggable2, [{
            key: "render",
            value: function render() {
              var _this$props = this.props, isDraggingTempo = _this$props.isDraggingTempo, isDraggingMe = _this$props.isDraggingMe, dragging = _this$props.dragging, otherProps = _objectWithoutProperties(_this$props, _excluded$c);
              var isTrueLocked = otherProps.isTrueLocked;
              var styles2 = {};
              if (isDraggingMe && isDraggingTempo) {
                if (_isReorderingTree)
                  ;
                else {
                  styles2 = {
                    top: dragging.y,
                    left: dragging.x,
                    width: dragging.w
                  };
                }
              }
              var cn = classNames(className, "group-or-rule", isDraggingMe && isDraggingTempo ? "qb-draggable" : null, isDraggingMe && !isDraggingTempo ? "qb-placeholder" : null, isTrueLocked ? "locked" : null);
              return /* @__PURE__ */ jsxDEV("div", {
                className: cn,
                style: styles2,
                ref: this.wrapper,
                "data-id": this.props.id,
                children: /* @__PURE__ */ jsxDEV(GroupOrRule, {
                  handleDraggerMouseDown: this.handleDraggerMouseDown,
                  isDraggingMe,
                  isDraggingTempo,
                  ...otherProps
                }, void 0, false, {
                  fileName: _jsxFileName$S,
                  lineNumber: 62,
                  columnNumber: 27
                }, this)
              }, void 0, false, {
                fileName: _jsxFileName$S,
                lineNumber: 57,
                columnNumber: 31
              }, this);
            }
          }]);
          return Draggable2;
        }(react.exports.PureComponent), _class.propTypes = {
          isDraggingTempo: propTypes.exports.bool,
          isDraggingMe: propTypes.exports.bool,
          onDragStart: propTypes.exports.func,
          dragging: propTypes.exports.object,
          isLocked: propTypes.exports.bool,
          isTrueLocked: propTypes.exports.bool
        }, _class;
      };
    };
    var arrayMap = _arrayMap, baseIteratee = _baseIteratee, basePickBy = _basePickBy, getAllKeysIn = _getAllKeysIn;
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = baseIteratee(predicate);
      return basePickBy(object, props, function(value2, path) {
        return predicate(value2, path[0]);
      });
    }
    var pickBy_1 = pickBy;
    function ownKeys$g(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$g(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$g(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$g(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$m(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$m();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$m() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var _Utils$ConfigUtils$4 = Utils$1.ConfigUtils, getFieldConfig$6 = _Utils$ConfigUtils$4.getFieldConfig, getOperatorConfig$3 = _Utils$ConfigUtils$4.getOperatorConfig;
    var Operator = /* @__PURE__ */ function(_Component) {
      _inherits(Operator2, _Component);
      var _super = _createSuper$m(Operator2);
      function Operator2(props) {
        var _this;
        _classCallCheck(this, Operator2);
        _this = _super.call(this, props);
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(Operator2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForMeta = ["config", "selectedField", "selectedOperator"];
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k) {
            return nextProps[k] !== prevProps[k];
          }).filter(function(ch) {
            return ch;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref) {
          var config2 = _ref.config, selectedField = _ref.selectedField, selectedOperator = _ref.selectedOperator;
          var fieldConfig = getFieldConfig$6(config2, selectedField);
          var operators2 = fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.operators;
          var operatorOptions = mapValues_1(pickBy_1(config2.operators, function(item, key) {
            return (operators2 === null || operators2 === void 0 ? void 0 : operators2.indexOf(key)) !== -1;
          }), function(_opts, op) {
            return getOperatorConfig$3(config2, op, selectedField);
          });
          var items = this.buildOptions(config2, operatorOptions, operators2);
          var isOpSelected = !!selectedOperator;
          var currOp = isOpSelected ? operatorOptions[selectedOperator] : null;
          var selectedOpts = currOp || {};
          var placeholder = this.props.config.settings.operatorPlaceholder;
          var selectedKey = selectedOperator;
          var selectedKeys = isOpSelected ? [selectedKey] : null;
          var selectedPath = selectedKeys;
          var selectedLabel = selectedOpts.label;
          return {
            placeholder,
            items,
            selectedKey,
            selectedKeys,
            selectedPath,
            selectedLabel,
            selectedOpts,
            fieldConfig
          };
        }
      }, {
        key: "buildOptions",
        value: function buildOptions2(config2, fields, ops) {
          if (!fields || !ops)
            return null;
          return keys_1(fields).sort(function(a, b) {
            return ops.indexOf(a) - ops.indexOf(b);
          }).map(function(fieldKey) {
            var field = fields[fieldKey];
            var label = field.label;
            return {
              key: fieldKey,
              path: fieldKey,
              label
            };
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, customProps = _this$props.customProps, setOperator2 = _this$props.setOperator, readonly = _this$props.readonly, id = _this$props.id, groupId = _this$props.groupId;
          var renderOperator = config2.settings.renderOperator;
          var renderProps = _objectSpread$g({
            id,
            groupId,
            config: config2,
            customProps,
            readonly,
            setField: setOperator2
          }, this.meta);
          if (!renderProps.items)
            return null;
          return renderOperator(renderProps, config2.ctx);
        }
      }]);
      return Operator2;
    }(react.exports.Component);
    Operator.propTypes = {
      id: propTypes.exports.string,
      groupId: propTypes.exports.string,
      config: propTypes.exports.object.isRequired,
      selectedField: propTypes.exports.string,
      selectedOperator: propTypes.exports.string,
      readonly: propTypes.exports.bool,
      setOperator: propTypes.exports.func.isRequired
    };
    var _jsxFileName$R = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/utils.js";
    var _excluded$b = ["children"];
    var Col = function Col2(_ref) {
      var children = _ref.children, props = _objectWithoutProperties(_ref, _excluded$b);
      return /* @__PURE__ */ jsxDEV("div", {
        ...props,
        children
      }, void 0, false, {
        fileName: _jsxFileName$R,
        lineNumber: 8,
        columnNumber: 23
      }, this);
    };
    var dummyFn = function dummyFn2() {
    };
    var DragIcon = function DragIcon2() {
      return /* @__PURE__ */ jsxDEV("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        fill: "gray",
        width: "18px",
        height: "18px",
        children: [/* @__PURE__ */ jsxDEV("path", {
          d: "M0 0h24v24H0V0z",
          fill: "none"
        }, void 0, false, {
          fileName: _jsxFileName$R,
          lineNumber: 18,
          columnNumber: 19
        }, this), /* @__PURE__ */ jsxDEV("path", {
          d: "M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
        }, void 0, false, {
          fileName: _jsxFileName$R,
          lineNumber: 21,
          columnNumber: 20
        }, this)]
      }, void 0, true, {
        fileName: _jsxFileName$R,
        lineNumber: 12,
        columnNumber: 23
      }, this);
    };
    var WithConfirmFn = function WithConfirmFn2(Cmp) {
      return function(props) {
        var useConfirm2 = props.config.settings.useConfirm;
        var confirmFn = useConfirm2 ? useConfirm2.call(props.config.ctx, props.config.ctx) : null;
        return /* @__PURE__ */ jsxDEV(Cmp, {
          ...props,
          confirmFn
        }, void 0, false, {
          fileName: _jsxFileName$R,
          lineNumber: 29,
          columnNumber: 25
        }, this);
      };
    };
    var _jsxFileName$Q = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/rule/OperatorWrapper.js";
    function _createSuper$l(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$l();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$l() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var OperatorWrapper = /* @__PURE__ */ function(_PureComponent) {
      _inherits(OperatorWrapper2, _PureComponent);
      var _super = _createSuper$l(OperatorWrapper2);
      function OperatorWrapper2() {
        _classCallCheck(this, OperatorWrapper2);
        return _super.apply(this, arguments);
      }
      _createClass(OperatorWrapper2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, selectedField = _this$props.selectedField, selectedOperator = _this$props.selectedOperator, setOperator2 = _this$props.setOperator, selectedFieldPartsLabels = _this$props.selectedFieldPartsLabels, showOperator = _this$props.showOperator, showOperatorLabel = _this$props.showOperatorLabel, selectedFieldWidgetConfig = _this$props.selectedFieldWidgetConfig, readonly = _this$props.readonly, id = _this$props.id, groupId = _this$props.groupId;
          var operator = showOperator && /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--operator",
            children: [config2.settings.showLabels && /* @__PURE__ */ jsxDEV("label", {
              className: "rule--label",
              children: config2.settings.operatorLabel
            }, void 0, false, {
              fileName: _jsxFileName$Q,
              lineNumber: 36,
              columnNumber: 53
            }, this), /* @__PURE__ */ jsxDEV(Operator, {
              config: config2,
              selectedField,
              selectedOperator,
              setOperator: setOperator2,
              readonly,
              id,
              groupId
            }, "operator", false, {
              fileName: _jsxFileName$Q,
              lineNumber: 38,
              columnNumber: 55
            }, this)]
          }, "operators-for-" + (selectedFieldPartsLabels || []).join("_"), true, {
            fileName: _jsxFileName$Q,
            lineNumber: 33,
            columnNumber: 51
          }, this);
          var hiddenOperator = showOperatorLabel && /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--operator",
            children: /* @__PURE__ */ jsxDEV("div", {
              className: "rule--operator-wrapper",
              children: [config2.settings.showLabels ? /* @__PURE__ */ jsxDEV("label", {
                className: "rule--label",
                children: "\xA0"
              }, void 0, false, {
                fileName: _jsxFileName$Q,
                lineNumber: 53,
                columnNumber: 52
              }, this) : null, /* @__PURE__ */ jsxDEV("div", {
                className: "rule--operator-text-wrapper",
                children: /* @__PURE__ */ jsxDEV("span", {
                  className: "rule--operator-text",
                  children: selectedFieldWidgetConfig.operatorInlineLabel
                }, void 0, false, {
                  fileName: _jsxFileName$Q,
                  lineNumber: 57,
                  columnNumber: 23
                }, this)
              }, void 0, false, {
                fileName: _jsxFileName$Q,
                lineNumber: 55,
                columnNumber: 39
              }, this)]
            }, void 0, true, {
              fileName: _jsxFileName$Q,
              lineNumber: 51,
              columnNumber: 23
            }, this)
          }, "operators-for-" + (selectedFieldPartsLabels || []).join("_"), false, {
            fileName: _jsxFileName$Q,
            lineNumber: 48,
            columnNumber: 62
          }, this);
          return [operator, hiddenOperator];
        }
      }]);
      return OperatorWrapper2;
    }(react.exports.PureComponent);
    function ownKeys$f(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$f(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$f(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$f(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$k(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$k();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$k() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var _Utils$RuleUtils$3 = Utils$1.RuleUtils, getFieldPath$2 = _Utils$RuleUtils$3.getFieldPath, getFieldPathLabels$2 = _Utils$RuleUtils$3.getFieldPathLabels;
    var getFieldConfig$5 = Utils$1.ConfigUtils.getFieldConfig;
    var Field = /* @__PURE__ */ function(_Component) {
      _inherits(Field2, _Component);
      var _super = _createSuper$k(Field2);
      function Field2(props) {
        var _this;
        _classCallCheck(this, Field2);
        _this = _super.call(this, props);
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(Field2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForMeta = ["selectedField", "config", "parentField"];
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k) {
            return nextProps[k] !== prevProps[k];
          }).filter(function(ch) {
            return ch;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref) {
          var selectedField = _ref.selectedField, config2 = _ref.config, parentField = _ref.parentField;
          var selectedKey = selectedField;
          var _config$settings = config2.settings, maxLabelsLength = _config$settings.maxLabelsLength, fieldSeparatorDisplay = _config$settings.fieldSeparatorDisplay, fieldPlaceholder = _config$settings.fieldPlaceholder, fieldSeparator = _config$settings.fieldSeparator;
          var isFieldSelected = !!selectedField;
          var placeholder = !isFieldSelected ? truncateString(fieldPlaceholder, maxLabelsLength) : null;
          var currField = isFieldSelected ? getFieldConfig$5(config2, selectedKey) : null;
          var selectedOpts = currField || {};
          var selectedKeys = getFieldPath$2(selectedKey, config2);
          var selectedPath = getFieldPath$2(selectedKey, config2, true);
          var selectedLabel = this.getFieldLabel(currField, selectedKey, config2);
          var partsLabels = getFieldPathLabels$2(selectedKey, config2);
          var selectedFullLabel = partsLabels ? partsLabels.join(fieldSeparatorDisplay) : null;
          if (selectedFullLabel == selectedLabel || parentField)
            selectedFullLabel = null;
          var selectedAltLabel = selectedOpts.label2;
          var parentFieldPath = typeof parentField == "string" ? parentField.split(fieldSeparator) : parentField;
          var parentFieldConfig = parentField ? getFieldConfig$5(config2, parentField) : null;
          var sourceFields = parentField ? parentFieldConfig && parentFieldConfig.subfields : config2.fields;
          var items = this.buildOptions(parentFieldPath, config2, sourceFields, parentFieldPath);
          return {
            placeholder,
            items,
            parentField,
            selectedKey,
            selectedKeys,
            selectedPath,
            selectedLabel,
            selectedOpts,
            selectedAltLabel,
            selectedFullLabel
          };
        }
      }, {
        key: "getFieldLabel",
        value: function getFieldLabel(fieldOpts, fieldKey, config2) {
          if (!fieldKey)
            return null;
          var fieldSeparator = config2.settings.fieldSeparator;
          var maxLabelsLength = config2.settings.maxLabelsLength;
          var fieldParts = Array.isArray(fieldKey) ? fieldKey : fieldKey.split(fieldSeparator);
          var label = fieldOpts && fieldOpts.label || last_1(fieldParts);
          label = truncateString(label, maxLabelsLength);
          return label;
        }
      }, {
        key: "buildOptions",
        value: function buildOptions2(parentFieldPath, config2, fields) {
          var _this2 = this;
          var path = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          var optGroupLabel = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
          if (!fields)
            return null;
          var _config$settings2 = config2.settings, fieldSeparator = _config$settings2.fieldSeparator, fieldSeparatorDisplay = _config$settings2.fieldSeparatorDisplay;
          var prefix2 = path ? path.join(fieldSeparator) + fieldSeparator : "";
          return keys_1(fields).map(function(fieldKey) {
            var field = fields[fieldKey];
            var label = _this2.getFieldLabel(field, fieldKey, config2);
            var partsLabels = getFieldPathLabels$2(prefix2 + fieldKey, config2);
            var fullLabel = partsLabels.join(fieldSeparatorDisplay);
            if (fullLabel == label || parentFieldPath)
              fullLabel = null;
            var altLabel = field.label2;
            var tooltip = field.tooltip;
            var subpath = (path ? path : []).concat(fieldKey);
            var disabled = field.disabled;
            if (field.hideForSelect)
              return void 0;
            if (field.type == "!struct") {
              return {
                disabled,
                key: fieldKey,
                path: prefix2 + fieldKey,
                label,
                fullLabel,
                altLabel,
                tooltip,
                items: _this2.buildOptions(parentFieldPath, config2, field.subfields, subpath, label)
              };
            } else {
              return {
                disabled,
                key: fieldKey,
                path: prefix2 + fieldKey,
                label,
                fullLabel,
                altLabel,
                tooltip,
                grouplabel: optGroupLabel
              };
            }
          }).filter(function(o) {
            return !!o;
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, customProps = _this$props.customProps, setField2 = _this$props.setField, readonly = _this$props.readonly, id = _this$props.id, groupId = _this$props.groupId;
          var renderField = config2.settings.renderField;
          var renderProps = _objectSpread$f({
            id,
            groupId,
            config: config2,
            customProps,
            readonly,
            setField: setField2
          }, this.meta);
          return renderField(renderProps, config2.ctx);
        }
      }]);
      return Field2;
    }(react.exports.Component);
    Field.propTypes = {
      id: propTypes.exports.string,
      groupId: propTypes.exports.string,
      config: propTypes.exports.object.isRequired,
      selectedField: propTypes.exports.string,
      parentField: propTypes.exports.string,
      customProps: propTypes.exports.object,
      readonly: propTypes.exports.bool,
      setField: propTypes.exports.func.isRequired
    };
    var _jsxFileName$P = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/rule/FieldWrapper.js";
    function _createSuper$j(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$j();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$j() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var FieldWrapper = /* @__PURE__ */ function(_PureComponent) {
      _inherits(FieldWrapper2, _PureComponent);
      var _super = _createSuper$j(FieldWrapper2);
      function FieldWrapper2() {
        _classCallCheck(this, FieldWrapper2);
        return _super.apply(this, arguments);
      }
      _createClass(FieldWrapper2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, selectedField = _this$props.selectedField, setField2 = _this$props.setField, parentField = _this$props.parentField, classname = _this$props.classname, readonly = _this$props.readonly, id = _this$props.id, groupId = _this$props.groupId;
          return /* @__PURE__ */ jsxDEV(Col, {
            className: classname,
            children: [config2.settings.showLabels && /* @__PURE__ */ jsxDEV("label", {
              className: "rule--label",
              children: config2.settings.fieldLabel
            }, void 0, false, {
              fileName: _jsxFileName$P,
              lineNumber: 32,
              columnNumber: 53
            }, this), /* @__PURE__ */ jsxDEV(Field, {
              config: config2,
              selectedField,
              parentField,
              setField: setField2,
              customProps: config2.settings.customFieldSelectProps,
              readonly,
              id,
              groupId
            }, void 0, false, {
              fileName: _jsxFileName$P,
              lineNumber: 34,
              columnNumber: 52
            }, this)]
          }, void 0, true, {
            fileName: _jsxFileName$P,
            lineNumber: 30,
            columnNumber: 27
          }, this);
        }
      }]);
      return FieldWrapper2;
    }(react.exports.PureComponent);
    var nativeCeil = Math.ceil, nativeMax$1 = Math.max;
    function baseRange$1(start2, end2, step, fromRight) {
      var index = -1, length2 = nativeMax$1(nativeCeil((end2 - start2) / (step || 1)), 0), result = Array(length2);
      while (length2--) {
        result[fromRight ? length2 : ++index] = start2;
        start2 += step;
      }
      return result;
    }
    var _baseRange = baseRange$1;
    var reWhitespace = /\s/;
    function trimmedEndIndex$1(string) {
      var index = string.length;
      while (index-- && reWhitespace.test(string.charAt(index))) {
      }
      return index;
    }
    var _trimmedEndIndex = trimmedEndIndex$1;
    var trimmedEndIndex = _trimmedEndIndex;
    var reTrimStart = /^\s+/;
    function baseTrim$1(string) {
      return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
    }
    var _baseTrim = baseTrim$1;
    var baseTrim = _baseTrim, isObject$2 = isObject_1, isSymbol = isSymbol_1;
    var NAN = 0 / 0;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    function toNumber$2(value2) {
      if (typeof value2 == "number") {
        return value2;
      }
      if (isSymbol(value2)) {
        return NAN;
      }
      if (isObject$2(value2)) {
        var other = typeof value2.valueOf == "function" ? value2.valueOf() : value2;
        value2 = isObject$2(other) ? other + "" : other;
      }
      if (typeof value2 != "string") {
        return value2 === 0 ? value2 : +value2;
      }
      value2 = baseTrim(value2);
      var isBinary = reIsBinary.test(value2);
      return isBinary || reIsOctal.test(value2) ? freeParseInt(value2.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value2) ? NAN : +value2;
    }
    var toNumber_1 = toNumber$2;
    var toNumber$1 = toNumber_1;
    var INFINITY = 1 / 0, MAX_INTEGER = 17976931348623157e292;
    function toFinite$2(value2) {
      if (!value2) {
        return value2 === 0 ? value2 : 0;
      }
      value2 = toNumber$1(value2);
      if (value2 === INFINITY || value2 === -INFINITY) {
        var sign2 = value2 < 0 ? -1 : 1;
        return sign2 * MAX_INTEGER;
      }
      return value2 === value2 ? value2 : 0;
    }
    var toFinite_1 = toFinite$2;
    var baseRange = _baseRange, isIterateeCall = _isIterateeCall, toFinite$1 = toFinite_1;
    function createRange$1(fromRight) {
      return function(start2, end2, step) {
        if (step && typeof step != "number" && isIterateeCall(start2, end2, step)) {
          end2 = step = void 0;
        }
        start2 = toFinite$1(start2);
        if (end2 === void 0) {
          end2 = start2;
          start2 = 0;
        } else {
          end2 = toFinite$1(end2);
        }
        step = step === void 0 ? start2 < end2 ? 1 : -1 : toFinite$1(step);
        return baseRange(start2, end2, step, fromRight);
      };
    }
    var _createRange = createRange$1;
    var createRange = _createRange;
    var range = createRange();
    var range_1 = range;
    var _excluded$a = ["factory"];
    var getTitleInListValues = Utils$1.ListUtils.getTitleInListValues;
    const WidgetFactory = function(_ref) {
      var delta = _ref.delta, isFuncArg = _ref.isFuncArg;
      _ref.valueSrc;
      var immValue = _ref.value, immValueError = _ref.valueError, asyncListValues = _ref.asyncListValues, isSpecialRange = _ref.isSpecialRange, fieldDefinition = _ref.fieldDefinition;
      _ref.widget;
      var widgetDefinition = _ref.widgetDefinition, widgetValueLabel = _ref.widgetValueLabel, valueLabels = _ref.valueLabels, textSeparators = _ref.textSeparators, setValueHandler = _ref.setValueHandler, config2 = _ref.config, field = _ref.field, operator = _ref.operator, readonly = _ref.readonly, parentField = _ref.parentField, parentFuncs = _ref.parentFuncs, id = _ref.id, groupId = _ref.groupId;
      var widgetFactory = widgetDefinition.factory, fieldWidgetProps = _objectWithoutProperties(widgetDefinition, _excluded$a);
      var isConst = isFuncArg && fieldDefinition.valueSources && fieldDefinition.valueSources.length == 1 && fieldDefinition.valueSources[0] == "const";
      var defaultValue2 = fieldDefinition.defaultValue;
      if (!widgetFactory) {
        return "?";
      }
      var value2 = isSpecialRange ? [immValue.get(0), immValue.get(1)] : immValue ? immValue.get(delta) : void 0;
      var valueError = immValueError && (isSpecialRange ? [immValueError.get(0), immValueError.get(1)] : immValueError.get(delta)) || null;
      if (isSpecialRange && value2[0] === void 0 && value2[1] === void 0)
        value2 = void 0;
      var _ref2 = fieldDefinition || {}, fieldSettings = _ref2.fieldSettings;
      var widgetProps = Object.assign({}, fieldWidgetProps, fieldSettings, {
        config: config2,
        field,
        parentField,
        parentFuncs,
        fieldDefinition,
        operator,
        delta,
        isSpecialRange,
        isFuncArg,
        value: value2,
        valueError,
        label: widgetValueLabel.label,
        placeholder: widgetValueLabel.placeholder,
        placeholders: valueLabels ? valueLabels.placeholder : null,
        textSeparators,
        setValue: setValueHandler,
        readonly,
        asyncListValues,
        id,
        groupId
      });
      if (isConst && defaultValue2) {
        var listValues2 = fieldSettings.treeValues || fieldSettings.listValues;
        if (typeof defaultValue2 == "boolean") {
          return defaultValue2 ? widgetProps.labelYes || "YES" : widgetProps.labelNo || "NO";
        } else if (listValues2) {
          if (Array.isArray(defaultValue2))
            return defaultValue2.map(function(v) {
              return getTitleInListValues(listValues2, v) || v;
            }).join(", ");
          else
            return getTitleInListValues(listValues2, defaultValue2) || defaultValue2;
        }
        return "" + defaultValue2;
      }
      return widgetFactory(widgetProps, config2.ctx);
    };
    var _jsxFileName$O = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/rule/Widget.js";
    function _createSuper$i(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$i();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$i() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var _Utils$ConfigUtils$3 = Utils$1.ConfigUtils, getFieldConfig$4 = _Utils$ConfigUtils$3.getFieldConfig, getOperatorConfig$2 = _Utils$ConfigUtils$3.getOperatorConfig, getFieldWidgetConfig$2 = _Utils$ConfigUtils$3.getFieldWidgetConfig;
    var _Utils$RuleUtils$2 = Utils$1.RuleUtils, getValueSourcesForFieldOp = _Utils$RuleUtils$2.getValueSourcesForFieldOp, getWidgetsForFieldOp = _Utils$RuleUtils$2.getWidgetsForFieldOp, getWidgetForFieldOp$2 = _Utils$RuleUtils$2.getWidgetForFieldOp, getValueLabel = _Utils$RuleUtils$2.getValueLabel;
    var createListFromArray$1 = Utils$1.DefaultUtils.createListFromArray;
    var funcArgDummyOpDef = {
      cardinality: 1
    };
    var Widget = /* @__PURE__ */ function(_Component) {
      _inherits(Widget2, _Component);
      var _super = _createSuper$i(Widget2);
      function Widget2(_props) {
        var _this;
        _classCallCheck(this, Widget2);
        _this = _super.call(this, _props);
        _this._setValue = function(isSpecialRange, delta, widgetType, value2, asyncListValues, __isInternal) {
          if (isSpecialRange && Array.isArray(value2)) {
            var oldRange = [_this.props.value.get(0), _this.props.value.get(1)];
            if (oldRange[0] != value2[0])
              _this.props.setValue(0, value2[0], widgetType, asyncListValues, __isInternal);
            if (oldRange[1] != value2[1])
              _this.props.setValue(1, value2[1], widgetType, asyncListValues, __isInternal);
          } else {
            _this.props.setValue(delta, value2, widgetType, asyncListValues, __isInternal);
          }
        };
        _this._onChangeValueSrc = function(delta, srcKey) {
          _this.props.setValueSrc(delta, srcKey);
        };
        _this.renderWidget = function(delta, meta, props) {
          var config2 = props.config, isFuncArg = props.isFuncArg, leftField = props.leftField, operator = props.operator, values2 = props.value, valueError = props.valueError, readonly = props.readonly, parentField = props.parentField, parentFuncs = props.parentFuncs, id = props.id, groupId = props.groupId;
          var settings2 = config2.settings;
          var widgets2 = meta.widgets, iValues = meta.iValues, aField = meta.aField;
          var value2 = isFuncArg ? iValues : values2;
          var field = isFuncArg ? leftField : aField;
          var _widgets$delta = widgets2[delta], valueSrc = _widgets$delta.valueSrc, valueLabel = _widgets$delta.valueLabel;
          var widgetLabel = settings2.showLabels ? /* @__PURE__ */ jsxDEV("label", {
            className: "rule--label",
            children: valueLabel.label
          }, void 0, false, {
            fileName: _jsxFileName$O,
            lineNumber: 72,
            columnNumber: 60
          }, this) : null;
          return /* @__PURE__ */ jsxDEV("div", {
            className: "widget--widget",
            children: [valueSrc == "func" ? null : widgetLabel, /* @__PURE__ */ jsxDEV(WidgetFactory, {
              id,
              groupId,
              valueSrc,
              delta,
              value: value2,
              valueError,
              isFuncArg,
              ...pick_1(meta, ["isSpecialRange", "fieldDefinition", "asyncListValues"]),
              ...pick_1(widgets2[delta], ["widget", "widgetDefinition", "widgetValueLabel", "valueLabels", "textSeparators", "setValueHandler"]),
              config: config2,
              field,
              parentField,
              parentFuncs,
              operator,
              readonly
            }, void 0, false, {
              fileName: _jsxFileName$O,
              lineNumber: 78,
              columnNumber: 64
            }, this)]
          }, "widget-" + field + "-" + delta, true, {
            fileName: _jsxFileName$O,
            lineNumber: 75,
            columnNumber: 27
          }, this);
        };
        _this.renderValueSources = function(delta, meta, props) {
          var config2 = props.config, isFuncArg = props.isFuncArg, leftField = props.leftField, operator = props.operator, readonly = props.readonly;
          var settings2 = config2.settings;
          var valueSources = meta.valueSources, widgets2 = meta.widgets, aField = meta.aField;
          var field = isFuncArg ? leftField : aField;
          var _widgets$delta2 = widgets2[delta], valueSrc = _widgets$delta2.valueSrc, setValueSrcHandler = _widgets$delta2.setValueSrcHandler;
          var valueSourcesInfo = settings2.valueSourcesInfo, renderValueSources = settings2.renderValueSources;
          var valueSourcesOptions = valueSources.map(function(srcKey) {
            return [srcKey, {
              label: valueSourcesInfo[srcKey].label
            }];
          });
          var ValueSources = function ValueSources2(pr) {
            return renderValueSources(pr, config2.ctx);
          };
          var sourceLabel = settings2.showLabels ? /* @__PURE__ */ jsxDEV("label", {
            className: "rule--label",
            children: "\xA0"
          }, void 0, false, {
            fileName: _jsxFileName$O,
            lineNumber: 119,
            columnNumber: 60
          }, this) : null;
          return valueSources.length > 1 && !readonly && /* @__PURE__ */ jsxDEV("div", {
            className: "widget--valuesrc",
            children: [sourceLabel, /* @__PURE__ */ jsxDEV(ValueSources, {
              delta,
              valueSources: valueSourcesOptions,
              valueSrc,
              config: config2,
              field,
              operator,
              setValueSrc: setValueSrcHandler,
              readonly,
              title: settings2.valueSourcesPopupTitle
            }, "valuesrc-" + delta, false, {
              fileName: _jsxFileName$O,
              lineNumber: 125,
              columnNumber: 36
            }, this)]
          }, "valuesrc-" + field + "-" + delta, true, {
            fileName: _jsxFileName$O,
            lineNumber: 122,
            columnNumber: 67
          }, this);
        };
        _this.renderSep = function(delta, meta, props) {
          var config2 = props.config;
          var widgets2 = meta.widgets;
          var settings2 = config2.settings;
          var sepText = widgets2[delta].sepText;
          var sepLabel = settings2.showLabels ? /* @__PURE__ */ jsxDEV("label", {
            className: "rule--label",
            children: "\xA0"
          }, void 0, false, {
            fileName: _jsxFileName$O,
            lineNumber: 143,
            columnNumber: 57
          }, this) : null;
          return sepText && /* @__PURE__ */ jsxDEV("div", {
            className: "widget--sep",
            children: [sepLabel, /* @__PURE__ */ jsxDEV("span", {
              children: sepText
            }, void 0, false, {
              fileName: _jsxFileName$O,
              lineNumber: 149,
              columnNumber: 33
            }, this)]
          }, "widget-separators-" + delta, true, {
            fileName: _jsxFileName$O,
            lineNumber: 146,
            columnNumber: 38
          }, this);
        };
        _this.renderWidgetDelta = function(delta) {
          var sep = _this.renderSep(delta, _this.meta, _this.props);
          var sources = _this.renderValueSources(delta, _this.meta, _this.props);
          var widgetCmp = _this.renderWidget(delta, _this.meta, _this.props);
          return [sep, sources, widgetCmp];
        };
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(_props);
        return _this;
      }
      _createClass(Widget2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForMeta = ["config", "field", "fieldFunc", "fieldArg", "leftField", "operator", "valueSrc", "isFuncArg", "asyncListValues"];
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k) {
            return nextProps[k] !== prevProps[k] || k == "isFuncArg" && nextProps["isFuncArg"] && nextProps["value"] !== prevProps["value"];
          }).filter(function(ch) {
            return ch;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref) {
          var _this2 = this;
          var config2 = _ref.config, simpleField = _ref.field, fieldFunc = _ref.fieldFunc, fieldArg = _ref.fieldArg, operator = _ref.operator, valueSrcs = _ref.valueSrc, values2 = _ref.value, isForRuleGruop = _ref.isForRuleGruop, isCaseValue = _ref.isCaseValue, isFuncArg = _ref.isFuncArg, leftField = _ref.leftField, asyncListValues = _ref.asyncListValues;
          var field = isFuncArg ? {
            func: fieldFunc,
            arg: fieldArg
          } : simpleField;
          var iValueSrcs = valueSrcs;
          var iValues = values2;
          if (isFuncArg || isForRuleGruop || isCaseValue) {
            iValueSrcs = createListFromArray$1([valueSrcs]);
            iValues = createListFromArray$1([values2]);
          }
          var fieldDefinition = getFieldConfig$4(config2, field);
          var defaultWidget = getWidgetForFieldOp$2(config2, field, operator);
          getWidgetsForFieldOp(config2, field, operator);
          var operatorDefinition = isFuncArg ? funcArgDummyOpDef : getOperatorConfig$2(config2, operator, field);
          if ((fieldDefinition == null || operatorDefinition == null) && !isCaseValue) {
            return null;
          }
          var isSpecialRange = operatorDefinition === null || operatorDefinition === void 0 ? void 0 : operatorDefinition.isSpecialRange;
          var isSpecialRangeForSrcField = isSpecialRange && (iValueSrcs.get(0) == "field" || iValueSrcs.get(1) == "field");
          var isTrueSpecialRange = isSpecialRange && !isSpecialRangeForSrcField;
          var cardinality = isTrueSpecialRange ? 1 : defaultValue(operatorDefinition === null || operatorDefinition === void 0 ? void 0 : operatorDefinition.cardinality, 1);
          if (cardinality === 0) {
            return null;
          }
          var valueSources = getValueSourcesForFieldOp(config2, field, operator, fieldDefinition, isFuncArg ? leftField : null);
          var widgets2 = range_1(0, cardinality).map(function(delta) {
            var _widgetDefinition;
            var valueSrc = iValueSrcs.get(delta) || null;
            var widget = getWidgetForFieldOp$2(config2, field, operator, valueSrc);
            var widgetDefinition = getFieldWidgetConfig$2(config2, field, operator, widget, valueSrc);
            if (isSpecialRangeForSrcField) {
              widget = widgetDefinition.singleWidget;
              widgetDefinition = getFieldWidgetConfig$2(config2, field, operator, widget, valueSrc);
            }
            var widgetType = (_widgetDefinition = widgetDefinition) === null || _widgetDefinition === void 0 ? void 0 : _widgetDefinition.type;
            var valueLabel = getValueLabel(config2, field, operator, delta, valueSrc, isTrueSpecialRange);
            var widgetValueLabel = getValueLabel(config2, field, operator, delta, null, isTrueSpecialRange);
            var sepText = operatorDefinition !== null && operatorDefinition !== void 0 && operatorDefinition.textSeparators ? operatorDefinition === null || operatorDefinition === void 0 ? void 0 : operatorDefinition.textSeparators[delta] : null;
            var setValueSrcHandler = _this2._onChangeValueSrc.bind(_this2, delta);
            var valueLabels = null;
            var textSeparators = null;
            if (isSpecialRange) {
              valueLabels = [getValueLabel(config2, field, operator, 0), getValueLabel(config2, field, operator, 1)];
              valueLabels = {
                placeholder: [valueLabels[0].placeholder, valueLabels[1].placeholder],
                label: [valueLabels[0].label, valueLabels[1].label]
              };
              textSeparators = operatorDefinition === null || operatorDefinition === void 0 ? void 0 : operatorDefinition.textSeparators;
            }
            var setValueHandler = _this2._setValue.bind(_this2, isSpecialRange, delta, widgetType);
            return {
              valueSrc,
              valueLabel,
              widget,
              sepText,
              setValueSrcHandler,
              widgetDefinition,
              widgetValueLabel,
              valueLabels,
              textSeparators,
              setValueHandler
            };
          });
          return {
            defaultWidget,
            fieldDefinition,
            operatorDefinition,
            isSpecialRange: isTrueSpecialRange,
            cardinality,
            valueSources,
            widgets: widgets2,
            iValues,
            aField: field,
            asyncListValues
          };
        }
      }, {
        key: "render",
        value: function render() {
          if (!this.meta)
            return null;
          var _this$meta = this.meta, defaultWidget = _this$meta.defaultWidget, cardinality = _this$meta.cardinality;
          if (!defaultWidget)
            return null;
          var name = defaultWidget;
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--widget rule--widget--".concat(name.toUpperCase()),
            children: range_1(0, cardinality).map(this.renderWidgetDelta)
          }, "widget-col-" + name, false, {
            fileName: _jsxFileName$O,
            lineNumber: 280,
            columnNumber: 27
          }, this);
        }
      }]);
      return Widget2;
    }(react.exports.Component);
    Widget.propTypes = {
      config: propTypes.exports.object.isRequired,
      value: propTypes.exports.any,
      valueSrc: propTypes.exports.any,
      valueError: propTypes.exports.any,
      field: propTypes.exports.string,
      operator: propTypes.exports.string,
      readonly: propTypes.exports.bool,
      asyncListValues: propTypes.exports.array,
      id: propTypes.exports.string,
      groupId: propTypes.exports.string,
      setValue: propTypes.exports.func,
      setValueSrc: propTypes.exports.func,
      isFuncArg: propTypes.exports.bool,
      fieldFunc: propTypes.exports.string,
      fieldArg: propTypes.exports.string,
      leftField: propTypes.exports.string,
      isForRuleGruop: propTypes.exports.bool,
      parentField: propTypes.exports.string,
      parentFuncs: propTypes.exports.array,
      isCaseValue: propTypes.exports.bool
    };
    var _jsxFileName$N = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/rule/OperatorOptions.js";
    var _excluded$9 = ["factory"];
    function _createSuper$h(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$h();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$h() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var getOperatorConfig$1 = Utils$1.ConfigUtils.getOperatorConfig;
    var OperatorOptions = /* @__PURE__ */ function(_PureComponent) {
      _inherits(OperatorOptions2, _PureComponent);
      var _super = _createSuper$h(OperatorOptions2);
      function OperatorOptions2() {
        _classCallCheck(this, OperatorOptions2);
        return _super.apply(this, arguments);
      }
      _createClass(OperatorOptions2, [{
        key: "render",
        value: function render() {
          if (!this.props.selectedOperator)
            return null;
          var operatorDefinitions = getOperatorConfig$1(this.props.config, this.props.selectedOperator, this.props.selectedField);
          if (typeof operatorDefinitions.options === "undefined") {
            return null;
          }
          var _operatorDefinitions$ = operatorDefinitions.options, optionsFactory = _operatorDefinitions$.factory, basicOptionsProps = _objectWithoutProperties(_operatorDefinitions$, _excluded$9);
          var optionsProps = Object.assign({}, basicOptionsProps, {
            config: this.props.config,
            field: this.props.selectedField,
            operator: this.props.selectedOperator,
            options: this.props.operatorOptions,
            setOption: this.props.setOperatorOption,
            readonly: this.props.readonly
          });
          var optionsCmp = optionsFactory(optionsProps, this.props.config.ctx);
          var name = this.props.selectedOperator;
          return /* @__PURE__ */ jsxDEV("div", {
            className: "rule--operator rule--operator--".concat(name.toUpperCase()),
            children: optionsCmp
          }, void 0, false, {
            fileName: _jsxFileName$N,
            lineNumber: 42,
            columnNumber: 27
          }, this);
        }
      }]);
      return OperatorOptions2;
    }(react.exports.PureComponent);
    OperatorOptions.propTypes = {
      config: propTypes.exports.object.isRequired,
      operatorOptions: propTypes.exports.any.isRequired,
      selectedField: propTypes.exports.string.isRequired,
      selectedOperator: propTypes.exports.string.isRequired,
      readonly: propTypes.exports.bool,
      setOperatorOption: propTypes.exports.func.isRequired
    };
    var _jsxFileName$M = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/item/Rule.js";
    function ownKeys$e(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$e(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$e(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$e(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$g(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$g();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$g() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var _Utils$ConfigUtils$2 = Utils$1.ConfigUtils, getFieldConfig$3 = _Utils$ConfigUtils$2.getFieldConfig, getOperatorConfig = _Utils$ConfigUtils$2.getOperatorConfig, getFieldWidgetConfig$1 = _Utils$ConfigUtils$2.getFieldWidgetConfig;
    var getFieldPathLabels$1 = Utils$1.RuleUtils.getFieldPathLabels;
    var Rule = /* @__PURE__ */ function(_Component) {
      _inherits(Rule2, _Component);
      var _super = _createSuper$g(Rule2);
      function Rule2(props) {
        var _this;
        _classCallCheck(this, Rule2);
        _this = _super.call(this, props);
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.removeSelf = _this.removeSelf.bind(_assertThisInitialized(_this));
        _this.setLock = _this.setLock.bind(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(Rule2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForMeta = ["selectedField", "selectedOperator", "config", "reordableNodesCnt", "isLocked"];
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k) {
            return nextProps[k] !== prevProps[k];
          }).filter(function(ch) {
            return ch;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref) {
          var selectedField = _ref.selectedField, selectedOperator = _ref.selectedOperator, config2 = _ref.config, reordableNodesCnt = _ref.reordableNodesCnt, isLocked = _ref.isLocked;
          var selectedFieldPartsLabels = getFieldPathLabels$1(selectedField, config2);
          var selectedFieldConfig = getFieldConfig$3(config2, selectedField);
          var isSelectedGroup = selectedFieldConfig && selectedFieldConfig.type == "!struct";
          var isFieldAndOpSelected = selectedField && selectedOperator && !isSelectedGroup;
          var selectedOperatorConfig = getOperatorConfig(config2, selectedOperator, selectedField);
          var selectedOperatorHasOptions = selectedOperatorConfig && selectedOperatorConfig.options != null;
          var selectedFieldWidgetConfig = getFieldWidgetConfig$1(config2, selectedField, selectedOperator) || {};
          var hideOperator = selectedFieldWidgetConfig.hideOperator;
          var showDragIcon = config2.settings.canReorder && reordableNodesCnt > 1 && !isLocked;
          var showOperator = selectedField && !hideOperator;
          var showOperatorLabel = selectedField && hideOperator && selectedFieldWidgetConfig.operatorInlineLabel;
          var showWidget = isFieldAndOpSelected;
          var showOperatorOptions = isFieldAndOpSelected && selectedOperatorHasOptions;
          return {
            selectedFieldPartsLabels,
            selectedFieldWidgetConfig,
            showDragIcon,
            showOperator,
            showOperatorLabel,
            showWidget,
            showOperatorOptions
          };
        }
      }, {
        key: "setLock",
        value: function setLock2(lock) {
          this.props.setLock(lock);
        }
      }, {
        key: "removeSelf",
        value: function removeSelf() {
          var _this2 = this;
          var _this$props = this.props, confirmFn = _this$props.confirmFn, config2 = _this$props.config;
          var _config$settings = config2.settings, renderConfirm = _config$settings.renderConfirm, confirmOptions = _config$settings.removeRuleConfirmOptions;
          var doRemove = function doRemove2() {
            _this2.props.removeSelf();
          };
          if (confirmOptions && !this.isEmptyCurrentRule()) {
            renderConfirm.call(config2.ctx, _objectSpread$e(_objectSpread$e({}, confirmOptions), {}, {
              onOk: doRemove,
              onCancel: null,
              confirmFn
            }), config2.ctx);
          } else {
            doRemove();
          }
        }
      }, {
        key: "isEmptyCurrentRule",
        value: function isEmptyCurrentRule() {
          return !(this.props.selectedField !== null && this.props.selectedOperator !== null && this.props.value.filter(function(val) {
            return val !== void 0;
          }).size > 0);
        }
      }, {
        key: "renderField",
        value: function renderField() {
          var _this$props2 = this.props, config2 = _this$props2.config, isLocked = _this$props2.isLocked;
          var immutableFieldsMode = config2.settings.immutableFieldsMode;
          return /* @__PURE__ */ jsxDEV(FieldWrapper, {
            classname: "rule--field",
            config: config2,
            selectedField: this.props.selectedField,
            setField: !immutableFieldsMode ? this.props.setField : dummyFn,
            parentField: this.props.parentField,
            readonly: immutableFieldsMode || isLocked,
            id: this.props.id,
            groupId: this.props.groupId
          }, "field", false, {
            fileName: _jsxFileName$M,
            lineNumber: 129,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderOperator",
        value: function renderOperator() {
          var _this$props3 = this.props, config2 = _this$props3.config, isLocked = _this$props3.isLocked;
          var _this$meta = this.meta, selectedFieldPartsLabels = _this$meta.selectedFieldPartsLabels, selectedFieldWidgetConfig = _this$meta.selectedFieldWidgetConfig, showOperator = _this$meta.showOperator, showOperatorLabel = _this$meta.showOperatorLabel;
          var immutableOpsMode = config2.settings.immutableOpsMode;
          return /* @__PURE__ */ jsxDEV(OperatorWrapper, {
            config: config2,
            selectedField: this.props.selectedField,
            selectedOperator: this.props.selectedOperator,
            setOperator: !immutableOpsMode ? this.props.setOperator : dummyFn,
            selectedFieldPartsLabels,
            showOperator,
            showOperatorLabel,
            selectedFieldWidgetConfig,
            readonly: immutableOpsMode || isLocked,
            id: this.props.id,
            groupId: this.props.groupId
          }, "operator", false, {
            fileName: _jsxFileName$M,
            lineNumber: 153,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderWidget",
        value: function renderWidget() {
          var _this$props4 = this.props, config2 = _this$props4.config, valueError = _this$props4.valueError, isLocked = _this$props4.isLocked;
          var showWidget = this.meta.showWidget;
          var immutableValuesMode = config2.settings.immutableValuesMode;
          if (!showWidget)
            return null;
          var widget = /* @__PURE__ */ jsxDEV(Widget, {
            field: this.props.selectedField,
            parentField: this.props.parentField,
            operator: this.props.selectedOperator,
            value: this.props.value,
            valueSrc: this.props.valueSrc,
            asyncListValues: this.props.asyncListValues,
            valueError,
            config: config2,
            setValue: !immutableValuesMode ? this.props.setValue : dummyFn,
            setValueSrc: !immutableValuesMode ? this.props.setValueSrc : dummyFn,
            readonly: immutableValuesMode || isLocked,
            id: this.props.id,
            groupId: this.props.groupId
          }, "values", false, {
            fileName: _jsxFileName$M,
            lineNumber: 178,
            columnNumber: 33
          }, this);
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--value",
            children: widget
          }, "widget-for-" + this.props.selectedOperator, false, {
            fileName: _jsxFileName$M,
            lineNumber: 194,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderOperatorOptions",
        value: function renderOperatorOptions() {
          var config2 = this.props.config;
          var showOperatorOptions = this.meta.showOperatorOptions;
          var _config$settings2 = config2.settings, immutableOpsMode = _config$settings2.immutableOpsMode, immutableValuesMode = _config$settings2.immutableValuesMode;
          if (!showOperatorOptions)
            return null;
          var opOpts = /* @__PURE__ */ jsxDEV(OperatorOptions, {
            selectedField: this.props.selectedField,
            selectedOperator: this.props.selectedOperator,
            operatorOptions: this.props.operatorOptions,
            setOperatorOption: !immutableOpsMode ? this.props.setOperatorOption : dummyFn,
            config: config2,
            readonly: immutableValuesMode
          }, "operatorOptions", false, {
            fileName: _jsxFileName$M,
            lineNumber: 208,
            columnNumber: 33
          }, this);
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--operator-options",
            children: opOpts
          }, "op-options-for-" + this.props.selectedOperator, false, {
            fileName: _jsxFileName$M,
            lineNumber: 217,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderBeforeWidget",
        value: function renderBeforeWidget() {
          var config2 = this.props.config;
          var renderBeforeWidget2 = config2.settings.renderBeforeWidget;
          return renderBeforeWidget2 && /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--before-widget",
            children: typeof renderBeforeWidget2 === "function" ? renderBeforeWidget2(this.props, config2.ctx) : renderBeforeWidget2
          }, "before-widget-for-" + this.props.selectedOperator, false, {
            fileName: _jsxFileName$M,
            lineNumber: 227,
            columnNumber: 49
          }, this);
        }
      }, {
        key: "renderAfterWidget",
        value: function renderAfterWidget() {
          var config2 = this.props.config;
          var renderAfterWidget2 = config2.settings.renderAfterWidget;
          return renderAfterWidget2 && /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--after-widget",
            children: typeof renderAfterWidget2 === "function" ? renderAfterWidget2(this.props, config2.ctx) : renderAfterWidget2
          }, "after-widget-for-" + this.props.selectedOperator, false, {
            fileName: _jsxFileName$M,
            lineNumber: 237,
            columnNumber: 48
          }, this);
        }
      }, {
        key: "renderError",
        value: function renderError() {
          var _this$props5 = this.props, config2 = _this$props5.config, valueError = _this$props5.valueError;
          var _config$settings3 = config2.settings, renderRuleError = _config$settings3.renderRuleError, showErrorMessage = _config$settings3.showErrorMessage;
          var oneValueError = valueError && valueError.toArray().filter(function(e) {
            return !!e;
          }).shift() || null;
          return showErrorMessage && oneValueError && /* @__PURE__ */ jsxDEV("div", {
            className: "rule--error",
            children: renderRuleError ? renderRuleError({
              error: oneValueError
            }, config2.ctx) : oneValueError
          }, void 0, false, {
            fileName: _jsxFileName$M,
            lineNumber: 254,
            columnNumber: 64
          }, this);
        }
      }, {
        key: "renderDrag",
        value: function renderDrag() {
          var showDragIcon = this.meta.showDragIcon;
          return showDragIcon && /* @__PURE__ */ jsxDEV("span", {
            className: "qb-drag-handler rule--drag-handler",
            onMouseDown: this.props.handleDraggerMouseDown,
            children: [/* @__PURE__ */ jsxDEV(DragIcon, {}, void 0, false, {
              fileName: _jsxFileName$M,
              lineNumber: 268,
              columnNumber: 23
            }, this), " "]
          }, "rule-drag-icon", true, {
            fileName: _jsxFileName$M,
            lineNumber: 264,
            columnNumber: 43
          }, this);
        }
      }, {
        key: "renderDel",
        value: function renderDel() {
          var _this$props6 = this.props, config2 = _this$props6.config, isLocked = _this$props6.isLocked;
          var _config$settings4 = config2.settings, deleteLabel = _config$settings4.deleteLabel, immutableGroupsMode = _config$settings4.immutableGroupsMode, renderButton = _config$settings4.renderButton, canDeleteLocked = _config$settings4.canDeleteLocked;
          var Btn = function Btn2(pr) {
            return renderButton(pr, config2.ctx);
          };
          return !immutableGroupsMode && (!isLocked || isLocked && canDeleteLocked) && /* @__PURE__ */ jsxDEV(Btn, {
            type: "delRule",
            onClick: this.removeSelf,
            label: deleteLabel,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$M,
            lineNumber: 284,
            columnNumber: 97
          }, this);
        }
      }, {
        key: "renderLock",
        value: function renderLock() {
          var _this$props7 = this.props, config2 = _this$props7.config, isLocked = _this$props7.isLocked, isTrueLocked = _this$props7.isTrueLocked, id = _this$props7.id;
          var _config$settings5 = config2.settings, lockLabel = _config$settings5.lockLabel, lockedLabel = _config$settings5.lockedLabel, showLock = _config$settings5.showLock, renderSwitch = _config$settings5.renderSwitch;
          var Switch2 = function Switch3(pr) {
            return renderSwitch(pr, config2.ctx);
          };
          return showLock && !(isLocked && !isTrueLocked) && /* @__PURE__ */ jsxDEV(Switch2, {
            type: "lock",
            id,
            value: isLocked,
            setValue: this.setLock,
            label: lockLabel,
            checkedLabel: lockedLabel,
            hideLabel: true,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$M,
            lineNumber: 307,
            columnNumber: 71
          }, this);
        }
      }, {
        key: "render",
        value: function render() {
          var _this$meta2 = this.meta, showOperatorOptions = _this$meta2.showOperatorOptions, selectedFieldWidgetConfig = _this$meta2.selectedFieldWidgetConfig;
          var _this$props8 = this.props, valueSrc = _this$props8.valueSrc, value2 = _this$props8.value, config2 = _this$props8.config;
          var canShrinkValue = valueSrc.first() == "value" && !showOperatorOptions && value2.size == 1 && selectedFieldWidgetConfig.fullWidth;
          var renderButtonGroup = config2.settings.renderButtonGroup;
          var BtnGrp = function BtnGrp2(pr) {
            return renderButtonGroup(pr, config2.ctx);
          };
          var parts = [this.renderField(), this.renderOperator(), this.renderBeforeWidget(), this.renderWidget(), this.renderAfterWidget(), this.renderOperatorOptions()];
          var body = /* @__PURE__ */ jsxDEV("div", {
            className: classNames("rule--body", canShrinkValue && "can--shrink--value"),
            children: parts
          }, "rule-body", false, {
            fileName: _jsxFileName$M,
            lineNumber: 334,
            columnNumber: 31
          }, this);
          var error = this.renderError();
          var drag = this.renderDrag();
          var lock = this.renderLock();
          var del = this.renderDel();
          return /* @__PURE__ */ jsxDEV(Fragment, {
            children: [drag, /* @__PURE__ */ jsxDEV("div", {
              className: "rule--body--wrapper",
              children: [body, error]
            }, void 0, true, {
              fileName: _jsxFileName$M,
              lineNumber: 342,
              columnNumber: 88
            }, this), /* @__PURE__ */ jsxDEV("div", {
              className: "rule--header",
              children: /* @__PURE__ */ jsxDEV(BtnGrp, {
                config: config2,
                children: [lock, del]
              }, void 0, true, {
                fileName: _jsxFileName$M,
                lineNumber: 346,
                columnNumber: 23
              }, this)
            }, void 0, false, {
              fileName: _jsxFileName$M,
              lineNumber: 344,
              columnNumber: 37
            }, this)]
          }, void 0, true);
        }
      }]);
      return Rule2;
    }(react.exports.Component);
    Rule.propTypes = {
      id: propTypes.exports.string.isRequired,
      groupId: propTypes.exports.string,
      selectedField: propTypes.exports.string,
      selectedOperator: propTypes.exports.string,
      operatorOptions: propTypes.exports.object,
      config: propTypes.exports.object.isRequired,
      value: propTypes.exports.any,
      valueSrc: propTypes.exports.any,
      asyncListValues: propTypes.exports.array,
      isDraggingMe: propTypes.exports.bool,
      isDraggingTempo: propTypes.exports.bool,
      parentField: propTypes.exports.string,
      valueError: propTypes.exports.any,
      isLocked: propTypes.exports.bool,
      isTrueLocked: propTypes.exports.bool,
      handleDraggerMouseDown: propTypes.exports.func,
      setField: propTypes.exports.func,
      setOperator: propTypes.exports.func,
      setOperatorOption: propTypes.exports.func,
      setLock: propTypes.exports.func,
      removeSelf: propTypes.exports.func,
      setValue: propTypes.exports.func,
      setValueSrc: propTypes.exports.func,
      reordableNodesCnt: propTypes.exports.number,
      totalRulesCnt: propTypes.exports.number,
      parentReordableNodesCnt: propTypes.exports.number
    };
    const Rule$1 = RuleContainer(Draggable("rule")(WithConfirmFn(Rule)));
    function baseClamp$1(number, lower, upper) {
      if (number === number) {
        if (upper !== void 0) {
          number = number <= upper ? number : upper;
        }
        if (lower !== void 0) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }
    var _baseClamp = baseClamp$1;
    var toFinite = toFinite_1;
    function toInteger$1(value2) {
      var result = toFinite(value2), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    var toInteger_1 = toInteger$1;
    var baseClamp = _baseClamp, baseToString = _baseToString, toInteger = toInteger_1, toString = toString_1;
    function startsWith(string, target, position2) {
      string = toString(string);
      position2 = position2 == null ? 0 : baseClamp(toInteger(position2), 0, string.length);
      target = baseToString(target);
      return string.slice(position2, position2 + target.length) == target;
    }
    var startsWith_1 = startsWith;
    var _jsxFileName$L = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/containers/GroupContainer.js";
    function _createSuper$f(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$f();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$f() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var defaultGroupConjunction = Utils$1.DefaultUtils.defaultGroupConjunction;
    var createGroupContainer = function createGroupContainer2(Group2) {
      var _class;
      return _class = /* @__PURE__ */ function(_Component) {
        _inherits(GroupContainer2, _Component);
        var _super = _createSuper$f(GroupContainer2);
        function GroupContainer2(_props) {
          var _this;
          _classCallCheck(this, GroupContainer2);
          _this = _super.call(this, _props);
          _this._selectedConjunction = function(props) {
            props = props || _this.props;
            return props.conjunction || defaultGroupConjunction(props.config, props.field);
          };
          _this.setConjunction = function() {
            var conj = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
            _this.props.actions.setConjunction(_this.props.path, conj);
          };
          _this.setNot = function() {
            var not = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
            _this.props.actions.setNot(_this.props.path, not);
          };
          _this.setLock = function() {
            var lock = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
            _this.props.actions.setLock(_this.props.path, lock);
          };
          _this.dummyFn = function() {
          };
          _this.removeSelf = function() {
            _this.props.actions.removeGroup(_this.props.path);
          };
          _this.addGroup = function() {
            _this.props.actions.addGroup(_this.props.path);
          };
          _this.addCaseGroup = function() {
            _this.props.actions.addCaseGroup(_this.props.path);
          };
          _this.addDefaultCaseGroup = function() {
            _this.props.actions.addDefaultCaseGroup(_this.props.path);
          };
          _this.addRule = function() {
            _this.props.actions.addRule(_this.props.path);
          };
          _this.setField = function(field) {
            _this.props.actions.setField(_this.props.path, field);
          };
          _this.setOperator = function(operator) {
            _this.props.actions.setOperator(_this.props.path, operator);
          };
          _this.setValue = function(delta, value2, type) {
            _this.props.actions.setValue(_this.props.path, delta, value2, type);
          };
          _this.pureShouldComponentUpdate = pureShouldComponentUpdate(_assertThisInitialized(_this));
          useOnPropsChanged(_assertThisInitialized(_this));
          _this.selectedConjunction = _this._selectedConjunction(_props);
          _this.conjunctionOptions = _this._getConjunctionOptions(_props);
          _this.dummyFn.isDummyFn = true;
          return _this;
        }
        _createClass(GroupContainer2, [{
          key: "shouldComponentUpdate",
          value: function shouldComponentUpdate(nextProps, nextState) {
            var prevProps = this.props;
            var prevState = this.state;
            var should = this.pureShouldComponentUpdate(nextProps, nextState);
            if (should) {
              if (prevState == nextState && prevProps != nextProps) {
                var draggingId = nextProps.dragging.id || prevProps.dragging.id;
                var isDraggingMe = draggingId == nextProps.id;
                var chs = [];
                for (var k in nextProps) {
                  var changed = nextProps[k] != prevProps[k];
                  if (k == "dragging" && !isDraggingMe) {
                    changed = false;
                  }
                  if (changed) {
                    chs.push(k);
                  }
                }
                if (!chs.length)
                  should = false;
              }
            }
            return should;
          }
        }, {
          key: "onPropsChanged",
          value: function onPropsChanged(nextProps) {
            var config2 = nextProps.config;
            nextProps.id;
            var conjunction = nextProps.conjunction;
            var oldConfig = this.props.config;
            var oldConjunction = this.props.conjunction;
            if (oldConfig != config2 || oldConjunction != conjunction) {
              this.selectedConjunction = this._selectedConjunction(nextProps);
              this.conjunctionOptions = this._getConjunctionOptions(nextProps);
            }
          }
        }, {
          key: "_getConjunctionOptions",
          value: function _getConjunctionOptions(props) {
            var _this2 = this;
            return mapValues_1(props.config.conjunctions, function(item, index) {
              return {
                id: "conjunction-".concat(props.id, "-").concat(index),
                name: "conjunction[".concat(props.id, "]"),
                key: index,
                label: item.label,
                checked: index === _this2._selectedConjunction(props)
              };
            });
          }
        }, {
          key: "render",
          value: function render() {
            var isDraggingMe = this.props.dragging.id == this.props.id;
            var currentNesting = this.props.path.size;
            var maxNesting = this.props.config.settings.maxNesting;
            var isInDraggingTempo = !isDraggingMe && this.props.isDraggingTempo;
            var allowFurtherNesting = typeof maxNesting === "undefined" || currentNesting < maxNesting;
            var isRoot = currentNesting == 1;
            return /* @__PURE__ */ jsxDEV("div", {
              className: "group-or-rule-container group-container",
              "data-id": this.props.id,
              children: [
                isDraggingMe ? /* @__PURE__ */ jsxDEV(Group2, {
                  id: this.props.id,
                  groupId: this.props.groupId,
                  isDraggingMe: true,
                  isDraggingTempo: true,
                  dragging: this.props.dragging,
                  isRoot,
                  allowFurtherNesting,
                  conjunctionOptions: this.conjunctionOptions,
                  not: this.props.not,
                  selectedConjunction: this.selectedConjunction,
                  setConjunction: this.dummyFn,
                  setNot: this.dummyFn,
                  setLock: this.dummyFn,
                  removeSelf: this.dummyFn,
                  addGroup: this.dummyFn,
                  addCaseGroup: this.dummyFn,
                  addDefaultCaseGroup: this.dummyFn,
                  addRule: this.dummyFn,
                  setField: this.dummyFn,
                  setOperator: this.dummyFn,
                  setValue: this.dummyFn,
                  value: this.props.value || null,
                  config: this.props.config,
                  children1: this.props.children1,
                  actions: this.props.actions,
                  reordableNodesCnt: this.props.reordableNodesCnt,
                  totalRulesCnt: this.props.totalRulesCnt,
                  selectedField: this.props.field || null,
                  parentField: this.props.parentField || null,
                  selectedOperator: this.props.operator || null,
                  isLocked: this.props.isLocked,
                  isTrueLocked: this.props.isTrueLocked,
                  parentReordableNodesCnt: this.props.parentReordableNodesCnt
                }, "dragging", false, {
                  fileName: _jsxFileName$L,
                  lineNumber: 142,
                  columnNumber: 41
                }, this) : null,
                /* @__PURE__ */ jsxDEV(Group2, {
                  id: this.props.id,
                  groupId: this.props.groupId,
                  isDraggingMe,
                  isDraggingTempo: isInDraggingTempo,
                  onDragStart: this.props.onDragStart,
                  isRoot,
                  allowFurtherNesting,
                  conjunctionOptions: this.conjunctionOptions,
                  not: this.props.not,
                  selectedConjunction: this.selectedConjunction,
                  setConjunction: isInDraggingTempo ? this.dummyFn : this.setConjunction,
                  setNot: isInDraggingTempo ? this.dummyFn : this.setNot,
                  setLock: isInDraggingTempo ? this.dummyFn : this.setLock,
                  removeSelf: isInDraggingTempo ? this.dummyFn : this.removeSelf,
                  addGroup: isInDraggingTempo ? this.dummyFn : this.addGroup,
                  addCaseGroup: isInDraggingTempo ? this.dummyFn : this.addCaseGroup,
                  addDefaultCaseGroup: isInDraggingTempo ? this.dummyFn : this.addDefaultCaseGroup,
                  addRule: isInDraggingTempo ? this.dummyFn : this.addRule,
                  setField: isInDraggingTempo ? this.dummyFn : this.setField,
                  setOperator: isInDraggingTempo ? this.dummyFn : this.setOperator,
                  setValue: isInDraggingTempo ? this.dummyFn : this.setValue,
                  value: this.props.value || null,
                  config: this.props.config,
                  children1: this.props.children1,
                  actions: this.props.actions,
                  reordableNodesCnt: this.props.reordableNodesCnt,
                  totalRulesCnt: this.props.totalRulesCnt,
                  selectedField: this.props.field || null,
                  parentField: this.props.parentField || null,
                  selectedOperator: this.props.operator || null,
                  isLocked: this.props.isLocked,
                  isTrueLocked: this.props.isTrueLocked,
                  parentReordableNodesCnt: this.props.parentReordableNodesCnt
                }, this.props.id, false, {
                  fileName: _jsxFileName$L,
                  lineNumber: 179,
                  columnNumber: 33
                }, this)
              ]
            }, void 0, false, {
              fileName: _jsxFileName$L,
              lineNumber: 139,
              columnNumber: 29
            }, this);
          }
        }]);
        return GroupContainer2;
      }(react.exports.Component), _class.propTypes = {
        config: propTypes.exports.object.isRequired,
        actions: propTypes.exports.object.isRequired,
        path: propTypes.exports.any.isRequired,
        id: propTypes.exports.string.isRequired,
        groupId: propTypes.exports.string,
        not: propTypes.exports.bool,
        conjunction: propTypes.exports.string,
        children1: propTypes.exports.any,
        onDragStart: propTypes.exports.func,
        reordableNodesCnt: propTypes.exports.number,
        field: propTypes.exports.string,
        parentField: propTypes.exports.string,
        isLocked: propTypes.exports.bool,
        isTrueLocked: propTypes.exports.bool,
        dragging: propTypes.exports.object,
        isDraggingTempo: propTypes.exports.bool
      }, _class;
    };
    const GroupContainer = function(Group2) {
      var ConnectedGroupContainer = connect(function(state) {
        return {
          dragging: state.dragging
        };
      }, null, null, {
        context
      })(createGroupContainer(Group2));
      ConnectedGroupContainer.displayName = "ConnectedGroupContainer";
      return ConnectedGroupContainer;
    };
    var _jsxFileName$K = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/item/GroupActions.js";
    function _createSuper$e(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$e();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$e() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var groupActionsPositionList$1 = {
      topLeft: "group--actions--tl",
      topCenter: "group--actions--tc",
      topRight: "group--actions--tr",
      bottomLeft: "group--actions--bl",
      bottomCenter: "group--actions--bc",
      bottomRight: "group--actions--br"
    };
    var defaultPosition$2 = "topRight";
    var GroupActions = /* @__PURE__ */ function(_PureComponent) {
      _inherits(GroupActions2, _PureComponent);
      var _super = _createSuper$e(GroupActions2);
      function GroupActions2() {
        _classCallCheck(this, GroupActions2);
        return _super.apply(this, arguments);
      }
      _createClass(GroupActions2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, addRule2 = _this$props.addRule, addGroup2 = _this$props.addGroup, removeSelf = _this$props.removeSelf, setLock2 = _this$props.setLock, isLocked = _this$props.isLocked, isTrueLocked = _this$props.isTrueLocked, id = _this$props.id, canAddGroup = _this$props.canAddGroup, canAddRule = _this$props.canAddRule, canDeleteGroup = _this$props.canDeleteGroup;
          var _config$settings = config2.settings, immutableGroupsMode = _config$settings.immutableGroupsMode, addRuleLabel = _config$settings.addRuleLabel, addGroupLabel = _config$settings.addGroupLabel, delGroupLabel = _config$settings.delGroupLabel, groupActionsPosition = _config$settings.groupActionsPosition, renderButton = _config$settings.renderButton, renderSwitch = _config$settings.renderSwitch, renderButtonGroup = _config$settings.renderButtonGroup, lockLabel = _config$settings.lockLabel, lockedLabel = _config$settings.lockedLabel, showLock = _config$settings.showLock, canDeleteLocked = _config$settings.canDeleteLocked;
          var Btn = function Btn2(pr) {
            return renderButton(pr, config2.ctx);
          };
          var Switch2 = function Switch3(pr) {
            return renderSwitch(pr, config2.ctx);
          };
          var BtnGrp = function BtnGrp2(pr) {
            return renderButtonGroup(pr, config2.ctx);
          };
          var position2 = groupActionsPositionList$1[groupActionsPosition || defaultPosition$2];
          var setLockSwitch = showLock && !(isLocked && !isTrueLocked) && /* @__PURE__ */ jsxDEV(Switch2, {
            type: "lock",
            id,
            value: isLocked,
            setValue: setLock2,
            label: lockLabel,
            checkedLabel: lockedLabel,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$K,
            lineNumber: 63,
            columnNumber: 84
          }, this);
          var addRuleBtn = !immutableGroupsMode && canAddRule && !isLocked && /* @__PURE__ */ jsxDEV(Btn, {
            type: "addRule",
            onClick: addRule2,
            label: addRuleLabel,
            readonly: isLocked,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$K,
            lineNumber: 72,
            columnNumber: 88
          }, this);
          var addGroupBtn = !immutableGroupsMode && canAddGroup && !isLocked && /* @__PURE__ */ jsxDEV(Btn, {
            type: "addGroup",
            onClick: addGroup2,
            label: addGroupLabel,
            readonly: isLocked,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$K,
            lineNumber: 79,
            columnNumber: 90
          }, this);
          var delGroupBtn = !immutableGroupsMode && canDeleteGroup && (!isLocked || isLocked && canDeleteLocked) && /* @__PURE__ */ jsxDEV(Btn, {
            type: "delGroup",
            onClick: removeSelf,
            label: delGroupLabel,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$K,
            lineNumber: 86,
            columnNumber: 126
          }, this);
          return /* @__PURE__ */ jsxDEV("div", {
            className: "group--actions ".concat(position2),
            children: /* @__PURE__ */ jsxDEV(BtnGrp, {
              config: config2,
              children: [setLockSwitch, addRuleBtn, addGroupBtn, delGroupBtn]
            }, void 0, true, {
              fileName: _jsxFileName$K,
              lineNumber: 94,
              columnNumber: 23
            }, this)
          }, void 0, false, {
            fileName: _jsxFileName$K,
            lineNumber: 92,
            columnNumber: 27
          }, this);
        }
      }]);
      return GroupActions2;
    }(react.exports.PureComponent);
    var _jsxFileName$J = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/item/Group.js";
    function ownKeys$d(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$d(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$d(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$d(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$d(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$d();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$d() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var defaultPosition$1 = "topRight";
    var BasicGroup = /* @__PURE__ */ function(_Component) {
      _inherits(BasicGroup2, _Component);
      var _super = _createSuper$d(BasicGroup2);
      function BasicGroup2(props) {
        var _this;
        _classCallCheck(this, BasicGroup2);
        _this = _super.call(this, props);
        _this.childrenClassName = function() {
          return "";
        };
        _this.renderBeforeActions = function() {
          var BeforeActions = _this.props.config.settings.renderBeforeActions;
          if (BeforeActions == void 0)
            return null;
          return typeof BeforeActions === "function" ? BeforeActions(_this.props, _this.props.config.ctx) : BeforeActions;
        };
        _this.renderAfterActions = function() {
          var AfterActions = _this.props.config.settings.renderAfterActions;
          if (AfterActions == void 0)
            return null;
          return typeof AfterActions === "function" ? AfterActions(_this.props, _this.props.config.ctx) : AfterActions;
        };
        _this.removeSelf = _this.removeSelf.bind(_assertThisInitialized(_this));
        _this.setLock = _this.setLock.bind(_assertThisInitialized(_this));
        _this.renderItem = _this.renderItem.bind(_assertThisInitialized(_this));
        return _this;
      }
      _createClass(BasicGroup2, [{
        key: "isGroupTopPosition",
        value: function isGroupTopPosition() {
          return startsWith_1(this.props.config.settings.groupActionsPosition || defaultPosition$1, "top");
        }
      }, {
        key: "setLock",
        value: function setLock2(lock) {
          this.props.setLock(lock);
        }
      }, {
        key: "removeSelf",
        value: function removeSelf() {
          var _this2 = this;
          var _this$props = this.props, confirmFn = _this$props.confirmFn, config2 = _this$props.config;
          var _config$settings = config2.settings, renderConfirm = _config$settings.renderConfirm, confirmOptions = _config$settings.removeGroupConfirmOptions;
          var doRemove = function doRemove2() {
            _this2.props.removeSelf();
          };
          if (confirmOptions && !this.isEmptyCurrentGroup()) {
            renderConfirm.call(config2.ctx, _objectSpread$d(_objectSpread$d({}, confirmOptions), {}, {
              onOk: doRemove,
              onCancel: null,
              confirmFn
            }), config2.ctx);
          } else {
            doRemove();
          }
        }
      }, {
        key: "isEmptyCurrentGroup",
        value: function isEmptyCurrentGroup() {
          var children = this.props.children1;
          return !children || children.size == 0 || children.size == 1 && this.isEmpty(children.first());
        }
      }, {
        key: "isEmpty",
        value: function isEmpty2(item) {
          var isGroup = item.get("type") == "group" || item.get("type") == "rule_group";
          return isGroup ? this.isEmptyGroup(item) : this.isEmptyRule(item);
        }
      }, {
        key: "isEmptyGroup",
        value: function isEmptyGroup(group2) {
          var children = group2.get("children1");
          return !children || children.size == 0 || children.size == 1 && this.isEmpty(children.first());
        }
      }, {
        key: "isEmptyRule",
        value: function isEmptyRule(rule2) {
          var properties2 = rule2.get("properties");
          return !(properties2.get("field") !== null && properties2.get("operator") !== null && properties2.get("value").filter(function(val) {
            return val !== void 0;
          }).size > 0);
        }
      }, {
        key: "render",
        value: function render() {
          return /* @__PURE__ */ jsxDEV(Fragment, {
            children: [this.renderHeaderWrapper(), this.renderChildrenWrapper(), this.renderFooterWrapper()]
          }, void 0, true);
        }
      }, {
        key: "showNot",
        value: function showNot() {
          var config2 = this.props.config;
          return config2.settings.showNot;
        }
      }, {
        key: "showConjs",
        value: function showConjs() {
          var _this$props2 = this.props, conjunctionOptions = _this$props2.conjunctionOptions;
          _this$props2.children1;
          _this$props2.config;
          var conjunctionCount = Object.keys(conjunctionOptions).length;
          return conjunctionCount > 1 || this.showNot();
        }
      }, {
        key: "isNoChildren",
        value: function isNoChildren() {
          var children1 = this.props.children1;
          return children1 ? children1.size == 0 : true;
        }
      }, {
        key: "isOneChild",
        value: function isOneChild() {
          var children1 = this.props.children1;
          return children1 ? children1.size < 2 : true;
        }
      }, {
        key: "renderChildrenWrapper",
        value: function renderChildrenWrapper() {
          var children1 = this.props.children1;
          return children1 && /* @__PURE__ */ jsxDEV("div", {
            className: classNames("group--children", !this.showConjs() ? "hide--conjs" : "", this.isOneChild() ? "hide--line" : "", this.isOneChild() ? "one--child" : "", this.childrenClassName()),
            children: this.renderChildren()
          }, "group-children", false, {
            fileName: _jsxFileName$J,
            lineNumber: 146,
            columnNumber: 40
          }, this);
        }
      }, {
        key: "renderHeaderWrapper",
        value: function renderHeaderWrapper() {
          var isGroupTopPosition = this.isGroupTopPosition();
          return /* @__PURE__ */ jsxDEV("div", {
            className: classNames("group--header", this.isOneChild() ? "one--child" : "", !this.showConjs() ? "hide--conjs" : "", this.isOneChild() ? "hide--line" : "", this.isNoChildren() ? "no--children" : ""),
            children: [this.renderHeader(), isGroupTopPosition && this.renderBeforeActions(), isGroupTopPosition && this.renderActions(), isGroupTopPosition && this.renderAfterActions()]
          }, "group-header", true, {
            fileName: _jsxFileName$J,
            lineNumber: 155,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderFooterWrapper",
        value: function renderFooterWrapper() {
          var isGroupTopPosition = this.isGroupTopPosition();
          return !isGroupTopPosition && /* @__PURE__ */ jsxDEV("div", {
            className: "group--footer",
            children: [this.renderBeforeActions(), this.renderActions(), this.renderAfterActions()]
          }, "group-footer", true, {
            fileName: _jsxFileName$J,
            lineNumber: 164,
            columnNumber: 50
          }, this);
        }
      }, {
        key: "renderActions",
        value: function renderActions() {
          var _this$props3 = this.props, config2 = _this$props3.config, addRule2 = _this$props3.addRule, addGroup2 = _this$props3.addGroup, isLocked = _this$props3.isLocked, isTrueLocked = _this$props3.isTrueLocked, id = _this$props3.id;
          return /* @__PURE__ */ jsxDEV(GroupActions, {
            config: config2,
            addRule: addRule2,
            addGroup: addGroup2,
            canAddGroup: this.canAddGroup(),
            canAddRule: this.canAddRule(),
            canDeleteGroup: this.canDeleteGroup(),
            removeSelf: this.removeSelf,
            setLock: this.setLock,
            isLocked,
            isTrueLocked,
            id
          }, void 0, false, {
            fileName: _jsxFileName$J,
            lineNumber: 179,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "canAddGroup",
        value: function canAddGroup() {
          return this.props.allowFurtherNesting;
        }
      }, {
        key: "canAddRule",
        value: function canAddRule() {
          var maxNumberOfRules = this.props.config.settings.maxNumberOfRules;
          var totalRulesCnt = this.props.totalRulesCnt;
          if (maxNumberOfRules) {
            return totalRulesCnt < maxNumberOfRules;
          }
          return true;
        }
      }, {
        key: "canDeleteGroup",
        value: function canDeleteGroup() {
          return !this.props.isRoot;
        }
      }, {
        key: "renderChildren",
        value: function renderChildren() {
          var children1 = this.props.children1;
          return children1 ? children1.map(this.renderItem).toList() : null;
        }
      }, {
        key: "renderItem",
        value: function renderItem(item) {
          var props = this.props;
          var config2 = props.config, actions = props.actions, onDragStart = props.onDragStart, isLocked = props.isLocked;
          var isRuleGroup = item.get("type") == "group" && item.getIn(["properties", "field"]) != null;
          var type = isRuleGroup ? "rule_group" : item.get("type");
          return /* @__PURE__ */ react.exports.createElement(Item, {
            ...this.extraPropsForItem(item),
            key: item.get("id"),
            id: item.get("id"),
            groupId: props.id,
            path: item.get("path"),
            type,
            properties: item.get("properties"),
            config: config2,
            actions,
            children1: item.get("children1"),
            reordableNodesCnt: this.reordableNodesCntForItem(item),
            totalRulesCnt: this.totalRulesCntForItem(item),
            parentReordableNodesCnt: this.reordableNodesCnt(),
            onDragStart,
            isDraggingTempo: this.props.isDraggingTempo,
            isParentLocked: isLocked,
            __self: this,
            __source: {
              fileName: _jsxFileName$J,
              lineNumber: 229,
              columnNumber: 27
            }
          });
        }
      }, {
        key: "extraPropsForItem",
        value: function extraPropsForItem(_item) {
          return {};
        }
      }, {
        key: "reordableNodesCnt",
        value: function reordableNodesCnt() {
          if (this.props.isLocked)
            return 0;
          return this.props.reordableNodesCnt;
        }
      }, {
        key: "totalRulesCntForItem",
        value: function totalRulesCntForItem(_item) {
          return this.props.totalRulesCnt;
        }
      }, {
        key: "reordableNodesCntForItem",
        value: function reordableNodesCntForItem(_item) {
          if (this.props.isLocked)
            return 0;
          return this.reordableNodesCnt();
        }
      }, {
        key: "showDragIcon",
        value: function showDragIcon() {
          var _this$props4 = this.props, config2 = _this$props4.config, isRoot = _this$props4.isRoot, isLocked = _this$props4.isLocked;
          var reordableNodesCnt = this.reordableNodesCnt();
          return config2.settings.canReorder && !isRoot && reordableNodesCnt > 1 && !isLocked;
        }
      }, {
        key: "renderDrag",
        value: function renderDrag() {
          var handleDraggerMouseDown = this.props.handleDraggerMouseDown;
          var drag = this.showDragIcon() && /* @__PURE__ */ jsxDEV("span", {
            className: "qb-drag-handler group--drag-handler",
            onMouseDown: handleDraggerMouseDown,
            children: [/* @__PURE__ */ jsxDEV(DragIcon, {}, void 0, false, {
              fileName: _jsxFileName$J,
              lineNumber: 291,
              columnNumber: 23
            }, this), " "]
          }, "group-drag-icon", true, {
            fileName: _jsxFileName$J,
            lineNumber: 287,
            columnNumber: 54
          }, this);
          return drag;
        }
      }, {
        key: "conjunctionOptions",
        value: function conjunctionOptions() {
          var conjunctionOptions2 = this.props.conjunctionOptions;
          return conjunctionOptions2;
        }
      }, {
        key: "renderConjs",
        value: function renderConjs() {
          var _this$props5 = this.props, config2 = _this$props5.config, children1 = _this$props5.children1, id = _this$props5.id, selectedConjunction = _this$props5.selectedConjunction, setConjunction2 = _this$props5.setConjunction, not = _this$props5.not, setNot2 = _this$props5.setNot, isLocked = _this$props5.isLocked;
          var _config$settings2 = config2.settings, immutableGroupsMode = _config$settings2.immutableGroupsMode, renderConjs2 = _config$settings2.renderConjs;
          _config$settings2.showNot;
          var notLabel = _config$settings2.notLabel;
          var conjunctionOptions = this.conjunctionOptions();
          if (!this.showConjs())
            return null;
          if (!children1 || !children1.size)
            return null;
          var renderProps = {
            disabled: this.isOneChild(),
            readonly: immutableGroupsMode || isLocked,
            selectedConjunction,
            setConjunction: immutableGroupsMode ? dummyFn : setConjunction2,
            conjunctionOptions,
            config: config2,
            not: not || false,
            id,
            setNot: immutableGroupsMode ? dummyFn : setNot2,
            notLabel,
            showNot: this.showNot(),
            isLocked
          };
          return renderConjs2(renderProps, config2.ctx);
        }
      }, {
        key: "renderHeader",
        value: function renderHeader() {
          return /* @__PURE__ */ jsxDEV("div", {
            className: "group--conjunctions",
            children: [this.renderConjs(), this.renderDrag()]
          }, void 0, true, {
            fileName: _jsxFileName$J,
            lineNumber: 339,
            columnNumber: 27
          }, this);
        }
      }]);
      return BasicGroup2;
    }(react.exports.Component);
    BasicGroup.propTypes = {
      reordableNodesCnt: propTypes.exports.number,
      conjunctionOptions: propTypes.exports.object.isRequired,
      allowFurtherNesting: propTypes.exports.bool.isRequired,
      isRoot: propTypes.exports.bool.isRequired,
      not: propTypes.exports.bool,
      selectedConjunction: propTypes.exports.string,
      config: propTypes.exports.object.isRequired,
      id: propTypes.exports.string.isRequired,
      groupId: propTypes.exports.string,
      path: propTypes.exports.any,
      children1: propTypes.exports.any,
      isDraggingMe: propTypes.exports.bool,
      isDraggingTempo: propTypes.exports.bool,
      isLocked: propTypes.exports.bool,
      isTrueLocked: propTypes.exports.bool,
      handleDraggerMouseDown: propTypes.exports.func,
      onDragStart: propTypes.exports.func,
      addRule: propTypes.exports.func.isRequired,
      addGroup: propTypes.exports.func.isRequired,
      removeSelf: propTypes.exports.func.isRequired,
      setConjunction: propTypes.exports.func.isRequired,
      setNot: propTypes.exports.func.isRequired,
      setLock: propTypes.exports.func.isRequired,
      actions: propTypes.exports.object.isRequired
    };
    const Group = GroupContainer(Draggable("group")(WithConfirmFn(BasicGroup)));
    function _superPropBase(object, property2) {
      while (!Object.prototype.hasOwnProperty.call(object, property2)) {
        object = _getPrototypeOf(object);
        if (object === null)
          break;
      }
      return object;
    }
    function _get() {
      if (typeof Reflect !== "undefined" && Reflect.get) {
        _get = Reflect.get.bind();
      } else {
        _get = function _get2(target, property2, receiver) {
          var base = _superPropBase(target, property2);
          if (!base)
            return;
          var desc = Object.getOwnPropertyDescriptor(base, property2);
          if (desc.get) {
            return desc.get.call(arguments.length < 3 ? target : receiver);
          }
          return desc.value;
        };
      }
      return _get.apply(this, arguments);
    }
    var _jsxFileName$I = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/item/RuleGroupActions.js";
    function _createSuper$c(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$c();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$c() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var RuleGroupActions = /* @__PURE__ */ function(_PureComponent) {
      _inherits(RuleGroupActions2, _PureComponent);
      var _super = _createSuper$c(RuleGroupActions2);
      function RuleGroupActions2() {
        _classCallCheck(this, RuleGroupActions2);
        return _super.apply(this, arguments);
      }
      _createClass(RuleGroupActions2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, addRule2 = _this$props.addRule, canAddRule = _this$props.canAddRule, canDeleteGroup = _this$props.canDeleteGroup, removeSelf = _this$props.removeSelf, setLock2 = _this$props.setLock, isLocked = _this$props.isLocked, isTrueLocked = _this$props.isTrueLocked, id = _this$props.id;
          var _config$settings = config2.settings, immutableGroupsMode = _config$settings.immutableGroupsMode, addRuleLabel = _config$settings.addRuleLabel, delGroupLabel = _config$settings.delGroupLabel, renderButton = _config$settings.renderButton, renderSwitch = _config$settings.renderSwitch, renderButtonGroup = _config$settings.renderButtonGroup, lockLabel = _config$settings.lockLabel, lockedLabel = _config$settings.lockedLabel, showLock = _config$settings.showLock, canDeleteLocked = _config$settings.canDeleteLocked;
          var Btn = function Btn2(pr) {
            return renderButton(pr, config2.ctx);
          };
          var Switch2 = function Switch3(pr) {
            return renderSwitch(pr, config2.ctx);
          };
          var BtnGrp = function BtnGrp2(pr) {
            return renderButtonGroup(pr, config2.ctx);
          };
          var setLockSwitch = showLock && !(isLocked && !isTrueLocked) && /* @__PURE__ */ jsxDEV(Switch2, {
            type: "lock",
            id,
            value: isLocked,
            setValue: setLock2,
            label: lockLabel,
            checkedLabel: lockedLabel,
            hideLabel: true,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$I,
            lineNumber: 49,
            columnNumber: 84
          }, this);
          var addRuleBtn = !immutableGroupsMode && canAddRule && !isLocked && /* @__PURE__ */ jsxDEV(Btn, {
            type: "addRuleGroup",
            onClick: addRule2,
            label: addRuleLabel,
            readonly: isLocked,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$I,
            lineNumber: 59,
            columnNumber: 88
          }, this);
          var delGroupBtn = !immutableGroupsMode && canDeleteGroup && (!isLocked || isLocked && canDeleteLocked) && /* @__PURE__ */ jsxDEV(Btn, {
            type: "delRuleGroup",
            onClick: removeSelf,
            label: delGroupLabel,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$I,
            lineNumber: 66,
            columnNumber: 126
          }, this);
          return /* @__PURE__ */ jsxDEV("div", {
            className: "group--actions",
            children: /* @__PURE__ */ jsxDEV(BtnGrp, {
              config: config2,
              children: [setLockSwitch, addRuleBtn, delGroupBtn]
            }, void 0, true, {
              fileName: _jsxFileName$I,
              lineNumber: 74,
              columnNumber: 23
            }, this)
          }, void 0, false, {
            fileName: _jsxFileName$I,
            lineNumber: 72,
            columnNumber: 27
          }, this);
        }
      }]);
      return RuleGroupActions2;
    }(react.exports.PureComponent);
    var _jsxFileName$H = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/item/RuleGroup.js";
    function ownKeys$c(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$c(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$c(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$c(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$b(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$b();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$b() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var RuleGroup = /* @__PURE__ */ function(_BasicGroup) {
      _inherits(RuleGroup2, _BasicGroup);
      var _super = _createSuper$b(RuleGroup2);
      function RuleGroup2(props) {
        var _this;
        _classCallCheck(this, RuleGroup2);
        _this = _super.call(this, props);
        _this.childrenClassName = function() {
          return "rule_group--children";
        };
        _this.renderHeaderWrapper = function() {
          return null;
        };
        _this.renderFooterWrapper = function() {
          return null;
        };
        _this.renderConjs = function() {
          return null;
        };
        _this.canAddGroup = function() {
          return false;
        };
        _this.canAddRule = function() {
          return true;
        };
        _this.canDeleteGroup = function() {
          return false;
        };
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(RuleGroup2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
        }
      }, {
        key: "reordableNodesCntForItem",
        value: function reordableNodesCntForItem(_item) {
          if (this.props.isLocked)
            return 0;
          var children1 = this.props.children1;
          return (children1 === null || children1 === void 0 ? void 0 : children1.size) || 0;
        }
      }, {
        key: "renderChildrenWrapper",
        value: function renderChildrenWrapper() {
          return /* @__PURE__ */ jsxDEV(Fragment, {
            children: [this.renderDrag(), this.renderField(), this.renderActions(), _get(_getPrototypeOf(RuleGroup2.prototype), "renderChildrenWrapper", this).call(this)]
          }, void 0, true);
        }
      }, {
        key: "renderField",
        value: function renderField() {
          var _this$props = this.props, config2 = _this$props.config, selectedField = _this$props.selectedField, setField2 = _this$props.setField, parentField = _this$props.parentField, id = _this$props.id, groupId = _this$props.groupId, isLocked = _this$props.isLocked;
          var immutableFieldsMode = config2.settings.immutableFieldsMode;
          return /* @__PURE__ */ jsxDEV(FieldWrapper, {
            classname: "group--field",
            config: config2,
            selectedField,
            setField: setField2,
            parentField,
            readonly: immutableFieldsMode || isLocked,
            id,
            groupId
          }, "field", false, {
            fileName: _jsxFileName$H,
            lineNumber: 81,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderActions",
        value: function renderActions() {
          var _this$props2 = this.props, config2 = _this$props2.config, addRule2 = _this$props2.addRule, isLocked = _this$props2.isLocked, isTrueLocked = _this$props2.isTrueLocked, id = _this$props2.id;
          return /* @__PURE__ */ jsxDEV(RuleGroupActions, {
            config: config2,
            addRule: addRule2,
            canAddRule: this.canAddRule(),
            canDeleteGroup: this.canDeleteGroup(),
            removeSelf: this.removeSelf,
            setLock: this.setLock,
            isLocked,
            isTrueLocked,
            id
          }, void 0, false, {
            fileName: _jsxFileName$H,
            lineNumber: 102,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "extraPropsForItem",
        value: function extraPropsForItem(_item) {
          return {
            parentField: this.props.selectedField
          };
        }
      }]);
      return RuleGroup2;
    }(BasicGroup);
    RuleGroup.propTypes = _objectSpread$c(_objectSpread$c({}, BasicGroup.propTypes), {}, {
      selectedField: propTypes.exports.string,
      parentField: propTypes.exports.string,
      setField: propTypes.exports.func
    });
    const RuleGroup$1 = GroupContainer(Draggable("group rule_group")(WithConfirmFn(RuleGroup)));
    var _jsxFileName$G = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/item/RuleGroupExtActions.js";
    function _createSuper$a(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$a();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$a() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var RuleGroupExtActions = /* @__PURE__ */ function(_PureComponent) {
      _inherits(RuleGroupExtActions2, _PureComponent);
      var _super = _createSuper$a(RuleGroupExtActions2);
      function RuleGroupExtActions2() {
        _classCallCheck(this, RuleGroupExtActions2);
        return _super.apply(this, arguments);
      }
      _createClass(RuleGroupExtActions2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, addRule2 = _this$props.addRule, canAddRule = _this$props.canAddRule, canDeleteGroup = _this$props.canDeleteGroup, removeSelf = _this$props.removeSelf, setLock2 = _this$props.setLock, isLocked = _this$props.isLocked, isTrueLocked = _this$props.isTrueLocked, id = _this$props.id;
          var _config$settings = config2.settings, immutableGroupsMode = _config$settings.immutableGroupsMode, addSubRuleLabel = _config$settings.addSubRuleLabel, delGroupLabel = _config$settings.delGroupLabel, renderButton = _config$settings.renderButton, renderSwitch = _config$settings.renderSwitch, renderButtonGroup = _config$settings.renderButtonGroup, lockLabel = _config$settings.lockLabel, lockedLabel = _config$settings.lockedLabel, showLock = _config$settings.showLock, canDeleteLocked = _config$settings.canDeleteLocked;
          var Btn = function Btn2(pr) {
            return renderButton(pr, config2.ctx);
          };
          var Switch2 = function Switch3(pr) {
            return renderSwitch(pr, config2.ctx);
          };
          var BtnGrp = function BtnGrp2(pr) {
            return renderButtonGroup(pr, config2.ctx);
          };
          var setLockSwitch = showLock && !(isLocked && !isTrueLocked) && /* @__PURE__ */ jsxDEV(Switch2, {
            type: "lock",
            id,
            value: isLocked,
            setValue: setLock2,
            label: lockLabel,
            checkedLabel: lockedLabel,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$G,
            lineNumber: 49,
            columnNumber: 84
          }, this);
          var addRuleBtn = !immutableGroupsMode && canAddRule && !isLocked && /* @__PURE__ */ jsxDEV(Btn, {
            type: "addRuleGroupExt",
            onClick: addRule2,
            label: addSubRuleLabel,
            readonly: isLocked,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$G,
            lineNumber: 58,
            columnNumber: 88
          }, this);
          var delGroupBtn = !immutableGroupsMode && canDeleteGroup && (!isLocked || isLocked && canDeleteLocked) && /* @__PURE__ */ jsxDEV(Btn, {
            type: "delRuleGroup",
            onClick: removeSelf,
            label: delGroupLabel,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$G,
            lineNumber: 65,
            columnNumber: 126
          }, this);
          return /* @__PURE__ */ jsxDEV("div", {
            className: "group--actions group--actions--tr",
            children: /* @__PURE__ */ jsxDEV(BtnGrp, {
              config: config2,
              children: [setLockSwitch, addRuleBtn, delGroupBtn]
            }, void 0, true, {
              fileName: _jsxFileName$G,
              lineNumber: 73,
              columnNumber: 23
            }, this)
          }, void 0, false, {
            fileName: _jsxFileName$G,
            lineNumber: 71,
            columnNumber: 27
          }, this);
        }
      }]);
      return RuleGroupExtActions2;
    }(react.exports.PureComponent);
    var _jsxFileName$F = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/item/RuleGroupExt.js";
    function ownKeys$b(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$b(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$b(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$b(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F = function F2() {
          };
          return {
            s: F,
            n: function n() {
              if (i >= o.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it["return"] != null)
              it["return"]();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function _createSuper$9(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$9();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$9() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var _Utils$ConfigUtils$1 = Utils$1.ConfigUtils, getFieldConfig$2 = _Utils$ConfigUtils$1.getFieldConfig, getFieldWidgetConfig = _Utils$ConfigUtils$1.getFieldWidgetConfig;
    var RuleGroupExt = /* @__PURE__ */ function(_BasicGroup) {
      _inherits(RuleGroupExt2, _BasicGroup);
      var _super = _createSuper$9(RuleGroupExt2);
      function RuleGroupExt2(props) {
        var _this;
        _classCallCheck(this, RuleGroupExt2);
        _this = _super.call(this, props);
        _this.childrenClassName = function() {
          return "rule_group_ext--children";
        };
        _this.renderFooterWrapper = function() {
          return null;
        };
        _this.canAddGroup = function() {
          return false;
        };
        _this.canAddRule = function() {
          return true;
        };
        _this.canDeleteGroup = function() {
          return true;
        };
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(RuleGroupExt2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
        }
      }, {
        key: "renderHeaderWrapper",
        value: function renderHeaderWrapper() {
          return /* @__PURE__ */ jsxDEV("div", {
            className: classNames("group--header", this.isOneChild() ? "one--child" : "", this.isOneChild() ? "hide--line" : "", this.isNoChildren() ? "no--children" : "", this.showDragIcon() ? "with--drag" : "hide--drag", this.showConjs() && (!this.isOneChild() || this.showNot()) ? "with--conjs" : "hide--conjs"),
            children: [this.renderHeader(), this.renderGroupField(), this.renderActions()]
          }, "group-header", true, {
            fileName: _jsxFileName$F,
            lineNumber: 64,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderHeader",
        value: function renderHeader() {
          return /* @__PURE__ */ jsxDEV("div", {
            className: "group--conjunctions",
            children: [this.renderConjs(), this.renderDrag()]
          }, void 0, true, {
            fileName: _jsxFileName$F,
            lineNumber: 72,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderGroupField",
        value: function renderGroupField() {
          return /* @__PURE__ */ jsxDEV("div", {
            className: "group--field--count--rule",
            children: [this.renderField(), this.renderOperator(), this.renderWidget()]
          }, void 0, true, {
            fileName: _jsxFileName$F,
            lineNumber: 79,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "showNot",
        value: function showNot() {
          var _this$props = this.props, config2 = _this$props.config, selectedField = _this$props.selectedField;
          _this$props.selectedOperator;
          var selectedFieldConfig = getFieldConfig$2(config2, selectedField) || {};
          return selectedFieldConfig.showNot != void 0 ? selectedFieldConfig.showNot : config2.settings.showNot;
        }
      }, {
        key: "conjunctionOptions",
        value: function conjunctionOptions() {
          var _this$props2 = this.props, config2 = _this$props2.config, selectedField = _this$props2.selectedField;
          _this$props2.selectedOperator;
          var selectedFieldConfig = getFieldConfig$2(config2, selectedField) || {};
          var conjunctionOptions2 = _get(_getPrototypeOf(RuleGroupExt2.prototype), "conjunctionOptions", this).call(this);
          if (selectedFieldConfig.conjunctions) {
            var filtered = {};
            var _iterator = _createForOfIteratorHelper(selectedFieldConfig.conjunctions), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var k = _step.value;
                filtered[k] = conjunctionOptions2[k];
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            conjunctionOptions2 = filtered;
          }
          return conjunctionOptions2;
        }
      }, {
        key: "renderField",
        value: function renderField() {
          var _this$props3 = this.props, config2 = _this$props3.config, selectedField = _this$props3.selectedField, setField2 = _this$props3.setField, parentField = _this$props3.parentField, id = _this$props3.id, groupId = _this$props3.groupId, isLocked = _this$props3.isLocked;
          var immutableFieldsMode = config2.settings.immutableFieldsMode;
          return /* @__PURE__ */ jsxDEV(FieldWrapper, {
            classname: "rule--field",
            config: config2,
            selectedField,
            setField: setField2,
            parentField,
            readonly: immutableFieldsMode || isLocked,
            id,
            groupId
          }, "field", false, {
            fileName: _jsxFileName$F,
            lineNumber: 132,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderOperator",
        value: function renderOperator() {
          var _this$props4 = this.props, config2 = _this$props4.config, selectedField = _this$props4.selectedField, selectedOperator = _this$props4.selectedOperator, setField2 = _this$props4.setField, setOperator2 = _this$props4.setOperator, isLocked = _this$props4.isLocked;
          var immutableFieldsMode = config2.settings.immutableFieldsMode;
          var selectedFieldWidgetConfig = getFieldWidgetConfig(config2, selectedField, selectedOperator) || {};
          var hideOperator = selectedFieldWidgetConfig.hideOperator;
          var showOperatorLabel = selectedField && hideOperator && selectedFieldWidgetConfig.operatorInlineLabel;
          var showOperator = selectedField && !hideOperator;
          return /* @__PURE__ */ jsxDEV(OperatorWrapper, {
            classname: "group--operator",
            config: config2,
            selectedField,
            selectedOperator,
            setField: setField2,
            setOperator: setOperator2,
            selectedFieldPartsLabels: ["group"],
            showOperator,
            showOperatorLabel,
            selectedFieldWidgetConfig,
            readonly: immutableFieldsMode || isLocked,
            id: this.props.id,
            groupId: this.props.groupId
          }, "operator", false, {
            fileName: _jsxFileName$F,
            lineNumber: 159,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderWidget",
        value: function renderWidget() {
          var _this$props5 = this.props, config2 = _this$props5.config, selectedField = _this$props5.selectedField, selectedOperator = _this$props5.selectedOperator, isLocked = _this$props5.isLocked;
          var immutableValuesMode = config2.settings.immutableValuesMode;
          var isFieldAndOpSelected = selectedField && selectedOperator;
          var showWidget = isFieldAndOpSelected;
          if (!showWidget)
            return null;
          var widget = /* @__PURE__ */ jsxDEV(Widget, {
            isForRuleGruop: true,
            field: this.props.selectedField,
            operator: this.props.selectedOperator,
            value: this.props.value,
            valueSrc: "value",
            valueError: null,
            config: config2,
            setValue: !immutableValuesMode ? this.props.setValue : dummyFn,
            setValueSrc: dummyFn,
            readonly: immutableValuesMode || isLocked,
            id: this.props.id,
            groupId: this.props.groupId
          }, "values", false, {
            fileName: _jsxFileName$F,
            lineNumber: 188,
            columnNumber: 33
          }, this);
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--value",
            children: widget
          }, "widget-for-" + this.props.selectedOperator, false, {
            fileName: _jsxFileName$F,
            lineNumber: 203,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderActions",
        value: function renderActions() {
          var _this$props6 = this.props, config2 = _this$props6.config, addRule2 = _this$props6.addRule, isLocked = _this$props6.isLocked, isTrueLocked = _this$props6.isTrueLocked, id = _this$props6.id;
          return /* @__PURE__ */ jsxDEV(RuleGroupExtActions, {
            config: config2,
            addRule: addRule2,
            canAddRule: this.canAddRule(),
            canDeleteGroup: this.canDeleteGroup(),
            removeSelf: this.removeSelf,
            setLock: this.setLock,
            isLocked,
            isTrueLocked,
            id
          }, void 0, false, {
            fileName: _jsxFileName$F,
            lineNumber: 217,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "reordableNodesCntForItem",
        value: function reordableNodesCntForItem(_item) {
          if (this.props.isLocked)
            return 0;
          var children1 = this.props.children1;
          return (children1 === null || children1 === void 0 ? void 0 : children1.size) || 0;
        }
      }, {
        key: "extraPropsForItem",
        value: function extraPropsForItem(_item) {
          return {
            parentField: this.props.selectedField
          };
        }
      }]);
      return RuleGroupExt2;
    }(BasicGroup);
    RuleGroupExt.propTypes = _objectSpread$b(_objectSpread$b({}, BasicGroup.propTypes), {}, {
      selectedField: propTypes.exports.string,
      selectedOperator: propTypes.exports.string,
      value: propTypes.exports.any,
      parentField: propTypes.exports.string,
      setField: propTypes.exports.func,
      setOperator: propTypes.exports.func,
      setValue: propTypes.exports.func
    });
    const RuleGroupExt$1 = GroupContainer(Draggable("group rule_group_ext")(WithConfirmFn(RuleGroupExt)));
    var _jsxFileName$E = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/item/SwitchGroupActions.js";
    function _createSuper$8(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$8();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$8() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var groupActionsPositionList = {
      topLeft: "group--actions--tl",
      topCenter: "group--actions--tc",
      topRight: "group--actions--tr",
      bottomLeft: "group--actions--bl",
      bottomCenter: "group--actions--bc",
      bottomRight: "group--actions--br"
    };
    var defaultPosition = "topRight";
    var SwitchGroupActions = /* @__PURE__ */ function(_PureComponent) {
      _inherits(SwitchGroupActions2, _PureComponent);
      var _super = _createSuper$8(SwitchGroupActions2);
      function SwitchGroupActions2() {
        _classCallCheck(this, SwitchGroupActions2);
        return _super.apply(this, arguments);
      }
      _createClass(SwitchGroupActions2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, addCaseGroup2 = _this$props.addCaseGroup, addDefaultCaseGroup2 = _this$props.addDefaultCaseGroup, setLock2 = _this$props.setLock, isLocked = _this$props.isLocked, isTrueLocked = _this$props.isTrueLocked, id = _this$props.id, canAddGroup = _this$props.canAddGroup, canAddDefault = _this$props.canAddDefault;
          var _config$settings = config2.settings, immutableGroupsMode = _config$settings.immutableGroupsMode, addCaseLabel = _config$settings.addCaseLabel, addDefaultCaseLabel = _config$settings.addDefaultCaseLabel, groupActionsPosition = _config$settings.groupActionsPosition, renderButton = _config$settings.renderButton, renderSwitch = _config$settings.renderSwitch, renderButtonGroup = _config$settings.renderButtonGroup, lockLabel = _config$settings.lockLabel, lockedLabel = _config$settings.lockedLabel, showLock = _config$settings.showLock;
          var Btn = function Btn2(pr) {
            return renderButton(pr, config2.ctx);
          };
          var Switch2 = function Switch3(pr) {
            return renderSwitch(pr, config2.ctx);
          };
          var BtnGrp = function BtnGrp2(pr) {
            return renderButtonGroup(pr, config2.ctx);
          };
          var position2 = groupActionsPositionList[groupActionsPosition || defaultPosition];
          var setLockSwitch = showLock && !(isLocked && !isTrueLocked) && /* @__PURE__ */ jsxDEV(Switch2, {
            type: "lock",
            id,
            value: isLocked,
            setValue: setLock2,
            label: lockLabel,
            checkedLabel: lockedLabel,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$E,
            lineNumber: 59,
            columnNumber: 84
          }, this);
          var addCaseGroupBtn = !immutableGroupsMode && canAddGroup && !isLocked && /* @__PURE__ */ jsxDEV(Btn, {
            type: "addCaseGroup",
            onClick: addCaseGroup2,
            label: addCaseLabel,
            readonly: isLocked,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$E,
            lineNumber: 68,
            columnNumber: 94
          }, this);
          var addDefaultCaseGroupBtn = !immutableGroupsMode && canAddDefault && !isLocked && /* @__PURE__ */ jsxDEV(Btn, {
            type: "addDefaultCaseGroup",
            onClick: addDefaultCaseGroup2,
            label: addDefaultCaseLabel,
            readonly: isLocked,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$E,
            lineNumber: 75,
            columnNumber: 103
          }, this);
          return /* @__PURE__ */ jsxDEV("div", {
            className: "group--actions ".concat(position2),
            children: /* @__PURE__ */ jsxDEV(BtnGrp, {
              config: config2,
              children: [setLockSwitch, addCaseGroupBtn, addDefaultCaseGroupBtn]
            }, void 0, true, {
              fileName: _jsxFileName$E,
              lineNumber: 84,
              columnNumber: 23
            }, this)
          }, void 0, false, {
            fileName: _jsxFileName$E,
            lineNumber: 82,
            columnNumber: 27
          }, this);
        }
      }]);
      return SwitchGroupActions2;
    }(react.exports.PureComponent);
    var _jsxFileName$D = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/item/SwitchGroup.js";
    function ownKeys$a(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$a(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$a(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$a(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$7(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$7();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$7() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var _Utils$TreeUtils$1 = Utils$1.TreeUtils, getTotalReordableNodesCountInTree$1 = _Utils$TreeUtils$1.getTotalReordableNodesCountInTree, getTotalRulesCountInTree$1 = _Utils$TreeUtils$1.getTotalRulesCountInTree;
    var SwitchGroup = /* @__PURE__ */ function(_BasicGroup) {
      _inherits(SwitchGroup2, _BasicGroup);
      var _super = _createSuper$7(SwitchGroup2);
      function SwitchGroup2(props) {
        var _this;
        _classCallCheck(this, SwitchGroup2);
        _this = _super.call(this, props);
        _this.childrenClassName = function() {
          return "switch_group--children";
        };
        _this.renderFooterWrapper = function() {
          return null;
        };
        _this.hasDefaultCase = function() {
          var _this$props$children;
          return ((_this$props$children = _this.props.children1) === null || _this$props$children === void 0 ? void 0 : _this$props$children.size) && _this.props.children1.filter(function(c) {
            return c.get("children1") == null;
          }).size > 0;
        };
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(SwitchGroup2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
        }
      }, {
        key: "canAddGroup",
        value: function canAddGroup() {
          var _this$props$children2;
          var maxNumberOfCases = this.props.config.settings.maxNumberOfCases;
          var totalCasesCnt = ((_this$props$children2 = this.props.children1) === null || _this$props$children2 === void 0 ? void 0 : _this$props$children2.size) || 0;
          if (maxNumberOfCases) {
            return totalCasesCnt < maxNumberOfCases;
          }
          return true;
        }
      }, {
        key: "canAddRule",
        value: function canAddRule() {
          return false;
        }
      }, {
        key: "reordableNodesCnt",
        value: function reordableNodesCnt() {
          var _this$props$children3;
          var totalCasesCnt = ((_this$props$children3 = this.props.children1) === null || _this$props$children3 === void 0 ? void 0 : _this$props$children3.size) || 0;
          var casesToReorder = totalCasesCnt;
          if (this.hasDefaultCase()) {
            casesToReorder--;
          }
          return casesToReorder;
        }
      }, {
        key: "totalRulesCntForItem",
        value: function totalRulesCntForItem(item) {
          return getTotalRulesCountInTree$1(item);
        }
      }, {
        key: "reordableNodesCntForItem",
        value: function reordableNodesCntForItem(item) {
          var _this$props$children4;
          if (this.props.isLocked)
            return 0;
          var _this$props$config$se = this.props.config.settings, canLeaveEmptyCase = _this$props$config$se.canLeaveEmptyCase, canRegroupCases = _this$props$config$se.canRegroupCases;
          var totalCasesCnt = ((_this$props$children4 = this.props.children1) === null || _this$props$children4 === void 0 ? void 0 : _this$props$children4.size) || 0;
          var casesToReorder = totalCasesCnt;
          if (this.hasDefaultCase()) {
            casesToReorder--;
          }
          var nodesInCase = getTotalReordableNodesCountInTree$1(item);
          var cnt = nodesInCase;
          if (cnt == 1 && canRegroupCases && canLeaveEmptyCase && casesToReorder > 1)
            cnt = 111;
          return cnt;
        }
      }, {
        key: "renderHeaderWrapper",
        value: function renderHeaderWrapper() {
          return /* @__PURE__ */ jsxDEV("div", {
            className: classNames(
              "group--header",
              this.isOneChild() ? "one--child" : "",
              this.isOneChild() ? "hide--line" : "",
              this.isNoChildren() ? "no--children" : "",
              this.showDragIcon() ? "with--drag" : "hide--drag"
            ),
            children: [this.renderHeader(), this.renderActions()]
          }, "group-header", true, {
            fileName: _jsxFileName$D,
            lineNumber: 105,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderHeader",
        value: function renderHeader() {
          return /* @__PURE__ */ jsxDEV("div", {
            className: "group--conjunctions",
            children: [this.renderConjs(), this.renderDrag()]
          }, void 0, true, {
            fileName: _jsxFileName$D,
            lineNumber: 115,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderConjs",
        value: function renderConjs() {
          var config2 = this.props.config;
          var renderSwitchPrefix = config2.settings.renderSwitchPrefix;
          return renderSwitchPrefix || null;
        }
      }, {
        key: "showNot",
        value: function showNot() {
          return false;
        }
      }, {
        key: "renderActions",
        value: function renderActions() {
          var _this$props = this.props, config2 = _this$props.config, addCaseGroup2 = _this$props.addCaseGroup, addDefaultCaseGroup2 = _this$props.addDefaultCaseGroup, isLocked = _this$props.isLocked, isTrueLocked = _this$props.isTrueLocked, id = _this$props.id;
          return /* @__PURE__ */ jsxDEV(SwitchGroupActions, {
            config: config2,
            addCaseGroup: addCaseGroup2,
            addDefaultCaseGroup: addDefaultCaseGroup2,
            canAddDefault: !this.hasDefaultCase(),
            canAddGroup: this.canAddGroup(),
            setLock: this.setLock,
            isLocked,
            isTrueLocked,
            id
          }, void 0, false, {
            fileName: _jsxFileName$D,
            lineNumber: 141,
            columnNumber: 27
          }, this);
        }
      }]);
      return SwitchGroup2;
    }(BasicGroup);
    SwitchGroup.propTypes = _objectSpread$a({}, BasicGroup.propTypes);
    const SwitchGroup$1 = GroupContainer(Draggable("group switch_group")(WithConfirmFn(SwitchGroup)));
    var _jsxFileName$C = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/item/CaseGroup.js";
    function ownKeys$9(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$9(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$9(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$9(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$6(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$6();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$6() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var CaseGroup = /* @__PURE__ */ function(_BasicGroup) {
      _inherits(CaseGroup2, _BasicGroup);
      var _super = _createSuper$6(CaseGroup2);
      function CaseGroup2(props) {
        var _this;
        _classCallCheck(this, CaseGroup2);
        _this = _super.call(this, props);
        _this.childrenClassName = function() {
          return "case_group--children";
        };
        _this.renderFooterWrapper = function() {
          return null;
        };
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(CaseGroup2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
        }
      }, {
        key: "isDefaultCase",
        value: function isDefaultCase() {
          return this.props.children1 == void 0;
        }
      }, {
        key: "reordableNodesCnt",
        value: function reordableNodesCnt() {
          return this.props.parentReordableNodesCnt;
        }
      }, {
        key: "reordableNodesCntForItem",
        value: function reordableNodesCntForItem(_item) {
          if (this.props.isLocked)
            return 0;
          return this.props.reordableNodesCnt;
        }
      }, {
        key: "totalRulesCntForItem",
        value: function totalRulesCntForItem(_item) {
          return this.props.totalRulesCnt;
        }
      }, {
        key: "showDragIcon",
        value: function showDragIcon() {
          if (this.isDefaultCase())
            return false;
          return _get(_getPrototypeOf(CaseGroup2.prototype), "showDragIcon", this).call(this);
        }
      }, {
        key: "renderHeaderWrapper",
        value: function renderHeaderWrapper() {
          return /* @__PURE__ */ jsxDEV("div", {
            className: classNames("group--header", this.isOneChild() ? "one--child" : "", this.isOneChild() ? "hide--line" : "", this.isNoChildren() ? "no--children" : "", this.showDragIcon() ? "with--drag" : "hide--drag", this.showConjs() && (!this.isOneChild() || this.showNot()) ? "with--conjs" : "hide--conjs"),
            children: [this.renderHeaderLeft(), this.renderHeaderCenter(), this.renderActions()]
          }, "group-header", true, {
            fileName: _jsxFileName$C,
            lineNumber: 77,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderChildrenWrapper",
        value: function renderChildrenWrapper() {
          if (this.isDefaultCase())
            return null;
          return /* @__PURE__ */ jsxDEV("div", {
            className: "case_group--body",
            children: [this.renderCondition(), this.renderValue()]
          }, void 0, true, {
            fileName: _jsxFileName$C,
            lineNumber: 87,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderHeaderLeft",
        value: function renderHeaderLeft() {
          if (this.isDefaultCase()) {
            var defaultCaseLabel = this.props.config.settings.defaultCaseLabel;
            return defaultCaseLabel || "";
          }
          return /* @__PURE__ */ jsxDEV("div", {
            className: "group--conjunctions",
            children: [this.renderConjs(), this.renderDrag()]
          }, void 0, true, {
            fileName: _jsxFileName$C,
            lineNumber: 99,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderCondition",
        value: function renderCondition() {
          if (this.isDefaultCase())
            return null;
          return _get(_getPrototypeOf(CaseGroup2.prototype), "renderChildrenWrapper", this).call(this);
        }
      }, {
        key: "renderHeaderCenter",
        value: function renderHeaderCenter() {
          if (this.isDefaultCase())
            return this.renderValue();
          else
            return null;
        }
      }, {
        key: "canAddGroup",
        value: function canAddGroup() {
          if (this.isDefaultCase())
            return false;
          return _get(_getPrototypeOf(CaseGroup2.prototype), "canAddGroup", this).call(this);
        }
      }, {
        key: "canAddRule",
        value: function canAddRule() {
          if (this.isDefaultCase())
            return false;
          return _get(_getPrototypeOf(CaseGroup2.prototype), "canAddRule", this).call(this);
        }
      }, {
        key: "renderValue",
        value: function renderValue() {
          var _this$props = this.props, config2 = _this$props.config, isLocked = _this$props.isLocked, value2 = _this$props.value, setValue2 = _this$props.setValue, id = _this$props.id;
          var immutableValuesMode = config2.settings.immutableValuesMode;
          var widget = /* @__PURE__ */ jsxDEV(Widget, {
            isCaseValue: true,
            field: "!case_value",
            operator: null,
            value: value2,
            valueSrc: "value",
            valueError: null,
            config: config2,
            setValue: !immutableValuesMode ? setValue2 : dummyFn,
            setValueSrc: dummyFn,
            readonly: immutableValuesMode || isLocked,
            id,
            groupId: null
          }, "values", false, {
            fileName: _jsxFileName$C,
            lineNumber: 136,
            columnNumber: 33
          }, this);
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "case_group--value",
            children: widget
          }, void 0, false, {
            fileName: _jsxFileName$C,
            lineNumber: 151,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderActions",
        value: function renderActions() {
          var _this$props2 = this.props, config2 = _this$props2.config, addGroup2 = _this$props2.addGroup, addRule2 = _this$props2.addRule, isLocked = _this$props2.isLocked, isTrueLocked = _this$props2.isTrueLocked, id = _this$props2.id;
          return /* @__PURE__ */ jsxDEV(GroupActions, {
            config: config2,
            addGroup: addGroup2,
            addRule: addRule2,
            canAddRule: this.canAddRule(),
            canAddGroup: this.canAddGroup(),
            canDeleteGroup: this.canDeleteGroup(),
            removeSelf: this.removeSelf,
            setLock: this.setLock,
            isLocked,
            isTrueLocked,
            id
          }, void 0, false, {
            fileName: _jsxFileName$C,
            lineNumber: 165,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "isEmptyCurrentGroup",
        value: function isEmptyCurrentGroup() {
          var value2 = this.props.value;
          var oneValue = value2 && value2.size ? value2.get(0) : null;
          var hasValue2 = oneValue != null && (Array.isArray(oneValue) ? oneValue.length > 0 : true);
          return _get(_getPrototypeOf(CaseGroup2.prototype), "isEmptyCurrentGroup", this).call(this) && !hasValue2;
        }
      }]);
      return CaseGroup2;
    }(BasicGroup);
    CaseGroup.propTypes = _objectSpread$9(_objectSpread$9({}, BasicGroup.propTypes), {}, {
      parentReordableNodesCnt: propTypes.exports.number,
      value: propTypes.exports.any,
      setValue: propTypes.exports.func
    });
    const CaseGroup$1 = GroupContainer(Draggable("group case_group")(WithConfirmFn(CaseGroup)));
    var _jsxFileName$B = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/item/Item.js";
    var _excluded$8 = ["type"];
    function _createSuper$5(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$5();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$5() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function ownKeys$8(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$8(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$8(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$8(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var types$2 = ["rule", "group", "rule_group", "switch_group", "case_group"];
    var getProperties = function getProperties2(props) {
      var _props$properties;
      var properties2 = ((_props$properties = props.properties) === null || _props$properties === void 0 ? void 0 : _props$properties.toObject()) || {};
      var result = _objectSpread$8({}, properties2);
      if (props.isParentLocked) {
        result.isLocked = true;
      }
      if (properties2.isLocked) {
        result.isTrueLocked = true;
      }
      return result;
    };
    var typeMap = {
      rule: function rule2(props) {
        return /* @__PURE__ */ jsxDEV(Rule$1, {
          ...getProperties(props),
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          config: props.config,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          parentField: props.parentField,
          parentReordableNodesCnt: props.parentReordableNodesCnt
        }, void 0, false, {
          fileName: _jsxFileName$B,
          lineNumber: 37,
          columnNumber: 25
        }, this);
      },
      group: function group2(props) {
        return /* @__PURE__ */ jsxDEV(Group, {
          ...getProperties(props),
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          config: props.config,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          children1: props.children1,
          parentField: null,
          parentReordableNodesCnt: props.parentReordableNodesCnt
        }, void 0, false, {
          fileName: _jsxFileName$B,
          lineNumber: 52,
          columnNumber: 25
        }, this);
      },
      rule_group: function rule_group(props) {
        return /* @__PURE__ */ jsxDEV(RuleGroup$1, {
          ...getProperties(props),
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          config: props.config,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          children1: props.children1,
          parentField: props.parentField,
          parentReordableNodesCnt: props.parentReordableNodesCnt
        }, void 0, false, {
          fileName: _jsxFileName$B,
          lineNumber: 70,
          columnNumber: 25
        }, this);
      },
      rule_group_ext: function rule_group_ext(props) {
        return /* @__PURE__ */ jsxDEV(RuleGroupExt$1, {
          ...getProperties(props),
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          config: props.config,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          children1: props.children1,
          parentField: props.parentField,
          parentReordableNodesCnt: props.parentReordableNodesCnt
        }, void 0, false, {
          fileName: _jsxFileName$B,
          lineNumber: 88,
          columnNumber: 25
        }, this);
      },
      switch_group: function switch_group(props) {
        return /* @__PURE__ */ jsxDEV(SwitchGroup$1, {
          ...getProperties(props),
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          config: props.config,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          children1: props.children1,
          parentField: null,
          parentReordableNodesCnt: props.parentReordableNodesCnt
        }, void 0, false, {
          fileName: _jsxFileName$B,
          lineNumber: 106,
          columnNumber: 25
        }, this);
      },
      case_group: function case_group(props) {
        return /* @__PURE__ */ jsxDEV(CaseGroup$1, {
          ...getProperties(props),
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          config: props.config,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          children1: props.children1,
          parentField: null,
          parentReordableNodesCnt: props.parentReordableNodesCnt
        }, void 0, false, {
          fileName: _jsxFileName$B,
          lineNumber: 124,
          columnNumber: 25
        }, this);
      }
    };
    var Item = /* @__PURE__ */ function(_PureComponent) {
      _inherits(Item2, _PureComponent);
      var _super = _createSuper$5(Item2);
      function Item2() {
        _classCallCheck(this, Item2);
        return _super.apply(this, arguments);
      }
      _createClass(Item2, [{
        key: "render",
        value: function render() {
          var _props$properties2;
          var _this$props = this.props, type = _this$props.type, props = _objectWithoutProperties(_this$props, _excluded$8);
          var mode = (_props$properties2 = props.properties) === null || _props$properties2 === void 0 ? void 0 : _props$properties2.get("mode");
          var postfix = mode == "array" ? "_ext" : "";
          var renderItem = props.config.settings.renderItem;
          var Cmp = typeMap[type + postfix];
          if (renderItem) {
            return renderItem(_objectSpread$8(_objectSpread$8({}, props), {}, {
              type,
              itemComponent: Cmp
            }), props.config.ctx);
          }
          if (!Cmp)
            return null;
          return Cmp(props);
        }
      }]);
      return Item2;
    }(react.exports.PureComponent);
    Item.propTypes = {
      config: propTypes.exports.object.isRequired,
      id: propTypes.exports.string.isRequired,
      groupId: propTypes.exports.string,
      type: propTypes.exports.oneOf(types$2).isRequired,
      path: propTypes.exports.any.isRequired,
      properties: propTypes.exports.any.isRequired,
      children1: propTypes.exports.any,
      actions: propTypes.exports.object.isRequired,
      reordableNodesCnt: propTypes.exports.number,
      onDragStart: propTypes.exports.func,
      parentField: propTypes.exports.string,
      isDraggingTempo: propTypes.exports.bool,
      isParentLocked: propTypes.exports.bool
    };
    var _jsxFileName$A = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/Builder.js";
    function _createSuper$4(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$4();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$4() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var _Utils$TreeUtils = Utils$1.TreeUtils, getTotalReordableNodesCountInTree = _Utils$TreeUtils.getTotalReordableNodesCountInTree, getTotalRulesCountInTree = _Utils$TreeUtils.getTotalRulesCountInTree;
    var _Utils$DefaultUtils = Utils$1.DefaultUtils, createListFromArray = _Utils$DefaultUtils.createListFromArray, emptyProperies = _Utils$DefaultUtils.emptyProperies;
    var Builder = /* @__PURE__ */ function(_Component) {
      _inherits(Builder2, _Component);
      var _super = _createSuper$4(Builder2);
      function Builder2(props) {
        var _this;
        _classCallCheck(this, Builder2);
        _this = _super.call(this, props);
        _this.pureShouldComponentUpdate = pureShouldComponentUpdate(_assertThisInitialized(_this));
        _this._updPath(props);
        return _this;
      }
      _createClass(Builder2, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState) {
          var prevProps = this.props;
          var should = this.pureShouldComponentUpdate(nextProps, nextState);
          if (should) {
            var chs = [];
            for (var k in nextProps) {
              var changed = nextProps[k] !== prevProps[k];
              if (changed && k != "__isInternalValueChange") {
                chs.push(k);
              }
            }
            if (!chs.length)
              should = false;
            if (chs.length == 1 && chs[0] == "tree" && nextProps.__isInternalValueChange)
              should = false;
          }
          return should;
        }
      }, {
        key: "_updPath",
        value: function _updPath(props) {
          var id = props.tree.get("id");
          this.path = createListFromArray([id]);
        }
      }, {
        key: "render",
        value: function render() {
          var tree2 = this.props.tree;
          var rootType = tree2.get("type");
          var isTernary = rootType == "switch_group";
          var reordableNodesCnt = isTernary ? null : getTotalReordableNodesCountInTree(tree2);
          var totalRulesCnt = isTernary ? null : getTotalRulesCountInTree(tree2);
          var id = tree2.get("id");
          return /* @__PURE__ */ jsxDEV(Item, {
            id,
            path: this.path,
            type: rootType,
            properties: tree2.get("properties") || emptyProperies(),
            config: this.props.config,
            actions: this.props.actions,
            children1: tree2.get("children1") || emptyProperies(),
            reordableNodesCnt,
            totalRulesCnt,
            parentReordableNodesCnt: 0,
            onDragStart: this.props.onDragStart
          }, id, false, {
            fileName: _jsxFileName$A,
            lineNumber: 66,
            columnNumber: 27
          }, this);
        }
      }]);
      return Builder2;
    }(react.exports.Component);
    Builder.propTypes = {
      tree: propTypes.exports.any.isRequired,
      config: propTypes.exports.object.isRequired,
      actions: propTypes.exports.object.isRequired,
      onDragStart: propTypes.exports.func
    };
    const Builder$1 = SortableContainer(Builder);
    function ownKeys$7(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$7(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$7(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$7(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$3(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$3();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$3() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var clone$1 = Utils$1.clone;
    var getFieldConfig$1 = Utils$1.ConfigUtils.getFieldConfig;
    var _Utils$RuleUtils$1 = Utils$1.RuleUtils, getFieldPath$1 = _Utils$RuleUtils$1.getFieldPath, getFieldPathLabels = _Utils$RuleUtils$1.getFieldPathLabels, getWidgetForFieldOp$1 = _Utils$RuleUtils$1.getWidgetForFieldOp;
    var ValueField = /* @__PURE__ */ function(_Component) {
      _inherits(ValueField2, _Component);
      var _super = _createSuper$3(ValueField2);
      function ValueField2(props) {
        var _this;
        _classCallCheck(this, ValueField2);
        _this = _super.call(this, props);
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(ValueField2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForItems = ["config", "field", "operator", "isFuncArg", "parentField"];
          var keysForMeta = ["config", "field", "operator", "value", "placeholder", "isFuncArg", "parentField"];
          var needUpdateItems = !this.items || keysForItems.map(function(k) {
            return nextProps[k] !== prevProps[k];
          }).filter(function(ch) {
            return ch;
          }).length > 0;
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k) {
            return nextProps[k] !== prevProps[k];
          }).filter(function(ch) {
            return ch;
          }).length > 0;
          if (needUpdateItems) {
            this.items = this.getItems(nextProps);
          }
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getItems",
        value: function getItems(_ref) {
          var config2 = _ref.config, field = _ref.field, operator = _ref.operator, parentField = _ref.parentField, isFuncArg = _ref.isFuncArg, fieldDefinition = _ref.fieldDefinition;
          var canCompareFieldWithField = config2.settings.canCompareFieldWithField;
          var fieldSeparator = config2.settings.fieldSeparator;
          var parentFieldPath = typeof parentField == "string" ? parentField.split(fieldSeparator) : parentField;
          var parentFieldConfig = parentField ? getFieldConfig$1(config2, parentField) : null;
          var sourceFields = parentField ? parentFieldConfig && parentFieldConfig.subfields : config2.fields;
          var filteredFields = this.filterFields(config2, sourceFields, field, parentField, parentFieldPath, operator, canCompareFieldWithField, isFuncArg, fieldDefinition);
          var items = this.buildOptions(parentFieldPath, config2, filteredFields, parentFieldPath);
          return items;
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref2) {
          var config2 = _ref2.config, field = _ref2.field;
          _ref2.operator;
          var value2 = _ref2.value, customPlaceholder = _ref2.placeholder, isFuncArg = _ref2.isFuncArg, parentField = _ref2.parentField;
          var _config$settings = config2.settings, fieldPlaceholder = _config$settings.fieldPlaceholder, fieldSeparatorDisplay = _config$settings.fieldSeparatorDisplay;
          var selectedKey = value2;
          var isFieldSelected = !!value2;
          var leftFieldConfig = getFieldConfig$1(config2, field);
          var leftFieldWidgetField = leftFieldConfig.widgets.field;
          var leftFieldWidgetFieldProps = leftFieldWidgetField && leftFieldWidgetField.widgetProps || {};
          var placeholder = isFieldSelected ? null : isFuncArg && customPlaceholder || leftFieldWidgetFieldProps.valuePlaceholder || fieldPlaceholder;
          var currField = isFieldSelected ? getFieldConfig$1(config2, selectedKey) : null;
          var selectedOpts = currField || {};
          var selectedKeys = getFieldPath$1(selectedKey, config2);
          var selectedPath = getFieldPath$1(selectedKey, config2, true);
          var selectedLabel = this.getFieldLabel(currField, selectedKey, config2);
          var partsLabels = getFieldPathLabels(selectedKey, config2);
          var selectedFullLabel = partsLabels ? partsLabels.join(fieldSeparatorDisplay) : null;
          if (selectedFullLabel == selectedLabel || parentField)
            selectedFullLabel = null;
          var selectedAltLabel = selectedOpts.label2;
          return {
            placeholder,
            selectedKey,
            selectedKeys,
            selectedPath,
            selectedLabel,
            selectedOpts,
            selectedAltLabel,
            selectedFullLabel
          };
        }
      }, {
        key: "filterFields",
        value: function filterFields(config2, fields, leftFieldFullkey, parentField, parentFieldPath, operator, canCompareFieldWithField, isFuncArg, fieldDefinition) {
          fields = clone$1(fields);
          var fieldSeparator = config2.settings.fieldSeparator;
          var leftFieldConfig = getFieldConfig$1(config2, leftFieldFullkey);
          var widget = getWidgetForFieldOp$1(config2, leftFieldFullkey, operator, "value");
          config2.widgets[widget];
          var expectedType;
          if (isFuncArg && fieldDefinition) {
            expectedType = fieldDefinition.type;
          } else {
            expectedType = leftFieldConfig.type;
          }
          function _filter(list, path) {
            for (var rightFieldKey in list) {
              var subfields = list[rightFieldKey].subfields;
              var subpath = (path ? path : []).concat(rightFieldKey);
              var rightFieldFullkey = subpath.join(fieldSeparator);
              var rightFieldConfig = getFieldConfig$1(config2, rightFieldFullkey);
              if (!rightFieldConfig) {
                delete list[rightFieldKey];
              } else if (rightFieldConfig.type == "!struct" || rightFieldConfig.type == "!group") {
                if (_filter(subfields, subpath) == 0)
                  delete list[rightFieldKey];
              } else {
                var canUse = rightFieldConfig.type == expectedType && (isFuncArg ? true : rightFieldFullkey != leftFieldFullkey);
                var fn = canCompareFieldWithField || config2.settings.canCompareFieldWithField;
                if (fn)
                  canUse = canUse && fn(leftFieldFullkey, leftFieldConfig, rightFieldFullkey, rightFieldConfig, operator);
                if (!canUse)
                  delete list[rightFieldKey];
              }
            }
            return keys_1(list).length;
          }
          _filter(fields, parentFieldPath || []);
          return fields;
        }
      }, {
        key: "buildOptions",
        value: function buildOptions2(parentFieldPath, config2, fields) {
          var _this2 = this;
          var path = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          var optGroupLabel = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
          if (!fields)
            return null;
          var _config$settings2 = config2.settings, fieldSeparator = _config$settings2.fieldSeparator, fieldSeparatorDisplay = _config$settings2.fieldSeparatorDisplay;
          var prefix2 = path ? path.join(fieldSeparator) + fieldSeparator : "";
          return keys_1(fields).map(function(fieldKey) {
            var field = fields[fieldKey];
            var label = _this2.getFieldLabel(field, fieldKey, config2);
            var partsLabels = getFieldPathLabels(fieldKey, config2);
            var fullLabel = partsLabels.join(fieldSeparatorDisplay);
            if (fullLabel == label || parentFieldPath)
              fullLabel = null;
            var altLabel = field.label2;
            var tooltip = field.tooltip;
            var subpath = (path ? path : []).concat(fieldKey);
            if (field.hideForCompare)
              return void 0;
            if (field.type == "!struct" || field.type == "!group") {
              return {
                key: fieldKey,
                path: prefix2 + fieldKey,
                label,
                fullLabel,
                altLabel,
                tooltip,
                items: _this2.buildOptions(parentFieldPath, config2, field.subfields, subpath, label)
              };
            } else {
              return {
                key: fieldKey,
                path: prefix2 + fieldKey,
                label,
                fullLabel,
                altLabel,
                tooltip,
                grouplabel: optGroupLabel
              };
            }
          }).filter(function(o) {
            return !!o;
          });
        }
      }, {
        key: "getFieldLabel",
        value: function getFieldLabel(fieldOpts, fieldKey, config2) {
          if (!fieldKey)
            return null;
          var fieldSeparator = config2.settings.fieldSeparator;
          var maxLabelsLength = config2.settings.maxLabelsLength;
          var fieldParts = Array.isArray(fieldKey) ? fieldKey : fieldKey.split(fieldSeparator);
          var label = fieldOpts.label || last_1(fieldParts);
          label = truncateString(label, maxLabelsLength);
          return label;
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, customProps = _this$props.customProps, setValue2 = _this$props.setValue, readonly = _this$props.readonly, id = _this$props.id, groupId = _this$props.groupId;
          var renderField = config2.settings.renderField;
          var renderProps = _objectSpread$7({
            config: config2,
            customProps,
            setField: setValue2,
            readonly,
            items: this.items,
            id,
            groupId
          }, this.meta);
          return renderField(renderProps, config2.ctx);
        }
      }]);
      return ValueField2;
    }(react.exports.Component);
    ValueField.propTypes = {
      id: propTypes.exports.string,
      groupId: propTypes.exports.string,
      setValue: propTypes.exports.func.isRequired,
      config: propTypes.exports.object.isRequired,
      field: propTypes.exports.string.isRequired,
      value: propTypes.exports.string,
      operator: propTypes.exports.string,
      customProps: propTypes.exports.object,
      readonly: propTypes.exports.bool,
      parentField: propTypes.exports.string,
      fieldDefinition: propTypes.exports.object,
      isFuncArg: propTypes.exports.bool
    };
    function ownKeys$6(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$6(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$6(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$2() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var clone = Utils$1.clone;
    var _Utils$ConfigUtils = Utils$1.ConfigUtils, getFieldConfig = _Utils$ConfigUtils.getFieldConfig, getFuncConfig$1 = _Utils$ConfigUtils.getFuncConfig;
    var _Utils$RuleUtils = Utils$1.RuleUtils, getFieldPath = _Utils$RuleUtils.getFieldPath, getFuncPathLabels = _Utils$RuleUtils.getFuncPathLabels, getWidgetForFieldOp = _Utils$RuleUtils.getWidgetForFieldOp;
    var FuncSelect = /* @__PURE__ */ function(_Component) {
      _inherits(FuncSelect2, _Component);
      var _super = _createSuper$2(FuncSelect2);
      function FuncSelect2(props) {
        var _this;
        _classCallCheck(this, FuncSelect2);
        _this = _super.call(this, props);
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(FuncSelect2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForItems = ["config", "field", "operator", "isFuncArg"];
          var keysForMeta = ["config", "field", "value"];
          var needUpdateItems = !this.items || keysForItems.map(function(k) {
            return nextProps[k] !== prevProps[k];
          }).filter(function(ch) {
            return ch;
          }).length > 0;
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k) {
            return nextProps[k] !== prevProps[k];
          }).filter(function(ch) {
            return ch;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
          if (needUpdateItems) {
            this.items = this.getItems(nextProps);
          }
        }
      }, {
        key: "getItems",
        value: function getItems(_ref) {
          var config2 = _ref.config, field = _ref.field, operator = _ref.operator, parentFuncs = _ref.parentFuncs, fieldDefinition = _ref.fieldDefinition, isFuncArg = _ref.isFuncArg;
          var canUseFuncForField = config2.settings.canUseFuncForField;
          var filteredFuncs = this.filterFuncs(config2, config2.funcs, field, operator, canUseFuncForField, parentFuncs, isFuncArg, fieldDefinition);
          var items = this.buildOptions(config2, filteredFuncs);
          return items;
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref2) {
          var config2 = _ref2.config, field = _ref2.field, value2 = _ref2.value;
          var _config$settings = config2.settings, funcPlaceholder = _config$settings.funcPlaceholder, fieldSeparatorDisplay = _config$settings.fieldSeparatorDisplay;
          var selectedFuncKey = value2;
          var isFuncSelected = !!value2;
          var leftFieldConfig = getFieldConfig(config2, field);
          var leftFieldWidgetField = leftFieldConfig.widgets.field;
          leftFieldWidgetField && leftFieldWidgetField.widgetProps || {};
          var placeholder = !isFuncSelected ? funcPlaceholder : null;
          var currFunc = isFuncSelected ? getFuncConfig$1(config2, selectedFuncKey) : null;
          var selectedOpts = currFunc || {};
          var selectedKeys = getFieldPath(selectedFuncKey, config2);
          var selectedPath = getFieldPath(selectedFuncKey, config2, true);
          var selectedLabel = this.getFuncLabel(currFunc, selectedFuncKey, config2);
          var partsLabels = getFuncPathLabels(selectedFuncKey, config2);
          var selectedFullLabel = partsLabels ? partsLabels.join(fieldSeparatorDisplay) : null;
          if (selectedFullLabel == selectedLabel)
            selectedFullLabel = null;
          return {
            placeholder,
            selectedKey: selectedFuncKey,
            selectedKeys,
            selectedPath,
            selectedLabel,
            selectedOpts,
            selectedFullLabel
          };
        }
      }, {
        key: "filterFuncs",
        value: function filterFuncs(config2, funcs, leftFieldFullkey, operator, canUseFuncForField, parentFuncs, isFuncArg, fieldDefinition) {
          funcs = clone(funcs);
          var fieldSeparator = config2.settings.fieldSeparator;
          var leftFieldConfig = getFieldConfig(config2, leftFieldFullkey);
          var expectedType;
          var targetDefinition = leftFieldConfig;
          var widget = getWidgetForFieldOp(config2, leftFieldFullkey, operator, "value");
          if (isFuncArg && fieldDefinition) {
            targetDefinition = fieldDefinition;
            expectedType = fieldDefinition.type;
          } else if (widget) {
            var widgetConfig = config2.widgets[widget];
            var widgetType = widgetConfig.type;
            expectedType = widgetType;
          } else {
            expectedType = leftFieldConfig.type;
          }
          function _filter(list, path) {
            for (var funcKey in list) {
              var subfields = list[funcKey].subfields;
              var subpath = (path ? path : []).concat(funcKey);
              var funcFullkey = subpath.join(fieldSeparator);
              var funcConfig = getFuncConfig$1(config2, funcFullkey);
              if (funcConfig.type == "!struct") {
                if (_filter(subfields, subpath) == 0)
                  delete list[funcKey];
              } else {
                var canUse = funcConfig.returnType == expectedType;
                if (targetDefinition.funcs)
                  canUse = canUse && targetDefinition.funcs.includes(funcFullkey);
                if (canUseFuncForField)
                  canUse = canUse && canUseFuncForField(leftFieldFullkey, leftFieldConfig, funcFullkey, funcConfig, operator);
                if (!funcConfig.allowSelfNesting && parentFuncs && parentFuncs.map(function(_ref3) {
                  var _ref4 = _slicedToArray(_ref3, 2), func = _ref4[0];
                  _ref4[1];
                  return func;
                }).includes(funcFullkey))
                  canUse = false;
                if (!canUse)
                  delete list[funcKey];
              }
            }
            return keys_1(list).length;
          }
          _filter(funcs, []);
          return funcs;
        }
      }, {
        key: "buildOptions",
        value: function buildOptions2(config2, funcs) {
          var _this2 = this;
          var path = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          var optGroupLabel = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          if (!funcs)
            return null;
          var _config$settings2 = config2.settings, fieldSeparator = _config$settings2.fieldSeparator, fieldSeparatorDisplay = _config$settings2.fieldSeparatorDisplay;
          var prefix2 = path ? path.join(fieldSeparator) + fieldSeparator : "";
          return keys_1(funcs).map(function(funcKey) {
            var func = funcs[funcKey];
            var label = _this2.getFuncLabel(func, funcKey, config2);
            var partsLabels = getFuncPathLabels(funcKey, config2);
            var fullLabel = partsLabels.join(fieldSeparatorDisplay);
            if (fullLabel == label)
              fullLabel = null;
            var tooltip = func.tooltip;
            var subpath = (path ? path : []).concat(funcKey);
            if (func.type == "!struct") {
              return {
                key: funcKey,
                path: prefix2 + funcKey,
                label,
                fullLabel,
                tooltip,
                items: _this2.buildOptions(config2, func.subfields, subpath, label)
              };
            } else {
              return {
                key: funcKey,
                path: prefix2 + funcKey,
                label,
                fullLabel,
                tooltip,
                grouplabel: optGroupLabel
              };
            }
          });
        }
      }, {
        key: "getFuncLabel",
        value: function getFuncLabel(funcOpts, funcKey, config2) {
          if (!funcKey)
            return null;
          var fieldSeparator = config2.settings.fieldSeparator;
          var maxLabelsLength = config2.settings.maxLabelsLength;
          var funcParts = Array.isArray(funcKey) ? funcKey : funcKey.split(fieldSeparator);
          var label = funcOpts.label || last_1(funcParts);
          label = truncateString(label, maxLabelsLength);
          return label;
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, customProps = _this$props.customProps, setValue2 = _this$props.setValue, readonly = _this$props.readonly, id = _this$props.id, groupId = _this$props.groupId;
          var renderFunc = config2.settings.renderFunc;
          var renderProps = _objectSpread$6({
            config: config2,
            customProps,
            readonly,
            setField: setValue2,
            items: this.items,
            id,
            groupId
          }, this.meta);
          return renderFunc(renderProps, config2.ctx);
        }
      }]);
      return FuncSelect2;
    }(react.exports.Component);
    FuncSelect.propTypes = {
      id: propTypes.exports.string,
      groupId: propTypes.exports.string,
      config: propTypes.exports.object.isRequired,
      field: propTypes.exports.string.isRequired,
      operator: propTypes.exports.string,
      customProps: propTypes.exports.object,
      value: propTypes.exports.string,
      setValue: propTypes.exports.func.isRequired,
      readonly: propTypes.exports.bool,
      parentFuncs: propTypes.exports.array,
      fieldDefinition: propTypes.exports.object,
      isFuncArg: propTypes.exports.bool
    };
    var _jsxFileName$z = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/rule/FuncWidget.js";
    function _createSuper$1(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$1() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var getFuncConfig = Utils$1.ConfigUtils.getFuncConfig;
    var _Utils$FuncUtils = Utils$1.FuncUtils, setFunc = _Utils$FuncUtils.setFunc, setArgValue = _Utils$FuncUtils.setArgValue, setArgValueSrc = _Utils$FuncUtils.setArgValueSrc;
    var FuncWidget = /* @__PURE__ */ function(_Component) {
      _inherits(FuncWidget2, _Component);
      var _super = _createSuper$1(FuncWidget2);
      function FuncWidget2(props) {
        var _this;
        _classCallCheck(this, FuncWidget2);
        _this = _super.call(this, props);
        _this.setFunc = function(funcKey) {
          _this.props.setValue(setFunc(_this.props.value, funcKey, _this.props.config));
        };
        _this.setArgValue = function(argKey, argVal) {
          var config2 = _this.props.config;
          var funcDefinition = _this.meta.funcDefinition;
          var args = funcDefinition.args;
          var argDefinition = args[argKey];
          _this.props.setValue(setArgValue(_this.props.value, argKey, argVal, argDefinition, config2));
        };
        _this.setArgValueSrc = function(argKey, argValSrc) {
          var config2 = _this.props.config;
          var funcDefinition = _this.meta.funcDefinition;
          var args = funcDefinition.args;
          var argDefinition = args[argKey];
          _this.props.setValue(setArgValueSrc(_this.props.value, argKey, argValSrc, argDefinition, config2));
        };
        _this.renderFuncSelect = function() {
          var _this$props = _this.props, config2 = _this$props.config, field = _this$props.field, operator = _this$props.operator, customProps = _this$props.customProps, value2 = _this$props.value, readonly = _this$props.readonly, parentFuncs = _this$props.parentFuncs, id = _this$props.id, groupId = _this$props.groupId, isFuncArg = _this$props.isFuncArg, fieldDefinition = _this$props.fieldDefinition;
          var funcKey = value2 ? value2.get("func") : null;
          var selectProps = {
            value: funcKey,
            setValue: _this.setFunc,
            config: config2,
            field,
            operator,
            customProps,
            readonly,
            parentFuncs,
            isFuncArg,
            fieldDefinition,
            id,
            groupId
          };
          var _config$settings = config2.settings, showLabels = _config$settings.showLabels, funcLabel = _config$settings.funcLabel;
          var widgetLabel = showLabels ? /* @__PURE__ */ jsxDEV("label", {
            className: "rule--label",
            children: funcLabel
          }, void 0, false, {
            fileName: _jsxFileName$z,
            lineNumber: 78,
            columnNumber: 51
          }, this) : null;
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--func",
            children: [widgetLabel, /* @__PURE__ */ jsxDEV(FuncSelect, {
              ...selectProps
            }, void 0, false, {
              fileName: _jsxFileName$z,
              lineNumber: 84,
              columnNumber: 36
            }, this)]
          }, "func", true, {
            fileName: _jsxFileName$z,
            lineNumber: 81,
            columnNumber: 27
          }, this);
        };
        _this.renderArgLabel = function(argKey, argDefinition) {
          var valueSources = argDefinition.valueSources, type = argDefinition.type, showPrefix = argDefinition.showPrefix, label = argDefinition.label;
          var config2 = _this.props.config;
          var isConst = valueSources && valueSources.length == 1 && valueSources[0] == "const";
          var forceShow = !config2.settings.showLabels && (type == "boolean" || isConst) && showPrefix;
          if (!forceShow)
            return null;
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--func--arg-label",
            children: label || argKey
          }, void 0, false, {
            fileName: _jsxFileName$z,
            lineNumber: 95,
            columnNumber: 27
          }, this);
        };
        _this.renderArgLabelSep = function(argKey, argDefinition) {
          var valueSources = argDefinition.valueSources, type = argDefinition.type, showPrefix = argDefinition.showPrefix;
          var config2 = _this.props.config;
          var isConst = valueSources && valueSources.length == 1 && valueSources[0] == "const";
          var forceShow = !config2.settings.showLabels && (type == "boolean" || isConst) && showPrefix;
          if (!forceShow)
            return null;
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--func--arg-label-sep",
            children: ":"
          }, void 0, false, {
            fileName: _jsxFileName$z,
            lineNumber: 107,
            columnNumber: 27
          }, this);
        };
        _this.renderArgVal = function(funcKey, argKey, argDefinition) {
          var _this$props2 = _this.props, config2 = _this$props2.config, field = _this$props2.field;
          _this$props2.operator;
          var value2 = _this$props2.value, readonly = _this$props2.readonly, parentFuncs = _this$props2.parentFuncs, id = _this$props2.id, groupId = _this$props2.groupId;
          var arg = value2 ? value2.getIn(["args", argKey]) : null;
          var argVal = arg ? arg.get("value") : void 0;
          var defaultValueSource = argDefinition.valueSources.length == 1 ? argDefinition.valueSources[0] : void 0;
          var argValSrc = arg ? arg.get("valueSrc") || defaultValueSource || "value" : defaultValueSource;
          var widgetProps = {
            config: config2,
            fieldFunc: funcKey,
            fieldArg: argKey,
            leftField: field,
            operator: null,
            value: argVal,
            valueSrc: argValSrc,
            setValue: _this.setArgValue,
            setValueSrc: _this.setArgValueSrc,
            funcKey,
            argKey,
            argDefinition,
            readonly,
            parentFuncs,
            id,
            groupId
          };
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--func--arg-value",
            children: /* @__PURE__ */ jsxDEV(ArgWidget, {
              ...widgetProps
            }, void 0, false, {
              fileName: _jsxFileName$z,
              lineNumber: 147,
              columnNumber: 23
            }, this)
          }, void 0, false, {
            fileName: _jsxFileName$z,
            lineNumber: 145,
            columnNumber: 27
          }, this);
        };
        _this.renderArgSep = function(argKey, argDefinition, argIndex, _ref) {
          var renderSeps = _ref.renderSeps;
          if (!argIndex)
            return null;
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--func--arg-sep",
            children: renderSeps ? renderSeps[argIndex - 1] : ", "
          }, void 0, false, {
            fileName: _jsxFileName$z,
            lineNumber: 152,
            columnNumber: 27
          }, this);
        };
        _this.renderBracketBefore = function(_ref2) {
          var renderBrackets = _ref2.renderBrackets;
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--func--bracket-before",
            children: renderBrackets ? renderBrackets[0] : "("
          }, "before_args", false, {
            fileName: _jsxFileName$z,
            lineNumber: 158,
            columnNumber: 27
          }, this);
        };
        _this.renderBracketAfter = function(_ref3) {
          var renderBrackets = _ref3.renderBrackets;
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--func--bracket-after",
            children: renderBrackets ? renderBrackets[1] : ")"
          }, "after_args", false, {
            fileName: _jsxFileName$z,
            lineNumber: 165,
            columnNumber: 27
          }, this);
        };
        _this.renderFuncArgs = function() {
          var _this$meta = _this.meta, funcDefinition = _this$meta.funcDefinition, funcKey = _this$meta.funcKey;
          if (!funcKey)
            return null;
          var args = funcDefinition.args;
          if (!args)
            return null;
          return /* @__PURE__ */ jsxDEV(Fragment, {
            children: [_this.renderBracketBefore(funcDefinition), /* @__PURE__ */ jsxDEV(Col, {
              className: "rule--func--args",
              children: Object.keys(args).map(function(argKey, argIndex) {
                return /* @__PURE__ */ jsxDEV(Col, {
                  className: "rule--func--arg",
                  children: [_this.renderArgSep(argKey, args[argKey], argIndex, funcDefinition), _this.renderArgLabel(argKey, args[argKey]), _this.renderArgLabelSep(argKey, args[argKey]), _this.renderArgVal(funcKey, argKey, args[argKey])]
                }, "arg-".concat(argKey, "-").concat(argIndex), true, {
                  fileName: _jsxFileName$z,
                  lineNumber: 181,
                  columnNumber: 29
                }, this);
              })
            }, "args", false, {
              fileName: _jsxFileName$z,
              lineNumber: 177,
              columnNumber: 125
            }, this), _this.renderBracketAfter(funcDefinition)]
          }, void 0, true);
        };
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(FuncWidget2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForMeta = ["config", "field", "operator", "value"];
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k) {
            return nextProps[k] !== prevProps[k];
          }).filter(function(ch) {
            return ch;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref4) {
          var config2 = _ref4.config;
          _ref4.field;
          _ref4.operator;
          var value2 = _ref4.value;
          var funcKey = value2 ? value2.get("func") : null;
          var funcDefinition = funcKey ? getFuncConfig(config2, funcKey) : null;
          return {
            funcDefinition,
            funcKey
          };
        }
      }, {
        key: "render",
        value: function render() {
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--func--wrapper",
            children: [this.renderFuncSelect(), this.renderFuncArgs()]
          }, void 0, true, {
            fileName: _jsxFileName$z,
            lineNumber: 222,
            columnNumber: 27
          }, this);
        }
      }]);
      return FuncWidget2;
    }(react.exports.Component);
    FuncWidget.propTypes = {
      id: propTypes.exports.string,
      groupId: propTypes.exports.string,
      config: propTypes.exports.object.isRequired,
      field: propTypes.exports.string.isRequired,
      operator: propTypes.exports.string,
      customProps: propTypes.exports.object,
      value: propTypes.exports.object,
      setValue: propTypes.exports.func.isRequired,
      readonly: propTypes.exports.bool,
      parentFuncs: propTypes.exports.array,
      fieldDefinition: propTypes.exports.object,
      isFuncArg: propTypes.exports.bool
    };
    var ArgWidget = /* @__PURE__ */ function(_PureComponent) {
      _inherits(ArgWidget2, _PureComponent);
      var _super2 = _createSuper$1(ArgWidget2);
      function ArgWidget2() {
        var _this2;
        _classCallCheck(this, ArgWidget2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this2 = _super2.call.apply(_super2, [this].concat(args));
        _this2.setValue = function(_delta, value2, _widgetType) {
          var _this2$props = _this2.props, setValue2 = _this2$props.setValue, argKey = _this2$props.argKey;
          setValue2(argKey, value2);
        };
        _this2.setValueSrc = function(_delta, valueSrc, _widgetType) {
          var _this2$props2 = _this2.props, setValueSrc2 = _this2$props2.setValueSrc, argKey = _this2$props2.argKey;
          setValueSrc2(argKey, valueSrc);
        };
        return _this2;
      }
      _createClass(ArgWidget2, [{
        key: "render",
        value: function render() {
          var _this$props3 = this.props, funcKey = _this$props3.funcKey, argKey = _this$props3.argKey, parentFuncs = _this$props3.parentFuncs;
          return /* @__PURE__ */ jsxDEV(Widget, {
            ...this.props,
            setValue: this.setValue,
            setValueSrc: this.setValueSrc,
            isFuncArg: true,
            parentFuncs: [].concat(_toConsumableArray(parentFuncs || []), [[funcKey, argKey]])
          }, void 0, false, {
            fileName: _jsxFileName$z,
            lineNumber: 276,
            columnNumber: 27
          }, this);
        }
      }]);
      return ArgWidget2;
    }(react.exports.PureComponent);
    ArgWidget.propTypes = {
      funcKey: propTypes.exports.string.isRequired,
      argKey: propTypes.exports.string.isRequired,
      setValue: propTypes.exports.func.isRequired,
      setValueSrc: propTypes.exports.func.isRequired,
      readonly: propTypes.exports.bool,
      parentFuncs: propTypes.exports.array,
      id: propTypes.exports.string,
      groupId: propTypes.exports.string
    };
    var _jsxFileName$y = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/value/VanillaBoolean.js";
    const VanillaBoolean = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var labelYes = props.labelYes, labelNo = props.labelNo, readonly = props.readonly, _props$customProps = props.customProps, customProps = _props$customProps === void 0 ? {} : _props$customProps;
      var customRadioYesProps = customProps.radioYes || {};
      var customRadioNoProps = customProps.radioNo || {};
      var onRadioChange = function onRadioChange2(e) {
        return setValue2(e.target.value == "true");
      };
      return /* @__PURE__ */ jsxDEV(Fragment, {
        children: [/* @__PURE__ */ jsxDEV("input", {
          type: "radio",
          value: true,
          checked: !!value2,
          disabled: readonly,
          onChange: onRadioChange,
          ...customRadioYesProps
        }, void 0, false, {
          fileName: _jsxFileName$y,
          lineNumber: 26,
          columnNumber: 78
        }, this), " ", labelYes, /* @__PURE__ */ jsxDEV("input", {
          type: "radio",
          value: false,
          checked: !value2,
          disabled: readonly,
          onChange: onRadioChange,
          ...customRadioNoProps
        }, void 0, false, {
          fileName: _jsxFileName$y,
          lineNumber: 32,
          columnNumber: 57
        }, this), " ", labelNo]
      }, void 0, true);
    };
    var _jsxFileName$x = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/value/VanillaText.js";
    const VanillaText = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var readonly = props.readonly, placeholder = props.placeholder, maxLength = props.maxLength, customProps = props.customProps;
      var onChange = function onChange2(e) {
        var val = e.target.value;
        if (val === "")
          val = void 0;
        setValue2(val);
      };
      var textValue = value2 || "";
      return /* @__PURE__ */ jsxDEV("input", {
        type: "text",
        value: textValue,
        placeholder,
        disabled: readonly,
        onChange,
        maxLength,
        ...customProps
      }, void 0, false, {
        fileName: _jsxFileName$x,
        lineNumber: 17,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$w = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/value/VanillaTextArea.js";
    const VanillaTextArea = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var readonly = props.readonly, placeholder = props.placeholder, maxLength = props.maxLength;
      props.maxRows;
      var fullWidth = props.fullWidth, customProps = props.customProps;
      var onChange = function onChange2(e) {
        var val = e.target.value;
        if (val === "")
          val = void 0;
        setValue2(val);
      };
      var textValue = value2 || "";
      return /* @__PURE__ */ jsxDEV("textarea", {
        value: textValue,
        placeholder,
        disabled: readonly,
        onChange,
        maxLength,
        style: {
          width: fullWidth ? "100%" : void 0
        },
        ...customProps
      }, void 0, false, {
        fileName: _jsxFileName$w,
        lineNumber: 19,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$v = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/value/VanillaDate.js";
    Utils$1.moment;
    const VanillaDate = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      props.valueFormat;
      var readonly = props.readonly, customProps = props.customProps;
      var onChange = function onChange2(e) {
        var value3 = e.target.value;
        if (value3 == "")
          value3 = void 0;
        setValue2(value3);
      };
      return /* @__PURE__ */ jsxDEV("input", {
        type: "date",
        value: value2 || "",
        disabled: readonly,
        onChange,
        ...customProps
      }, void 0, false, {
        fileName: _jsxFileName$v,
        lineNumber: 17,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$u = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/value/VanillaTime.js";
    const VanillaTime = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      props.valueFormat;
      props.use12Hours;
      var readonly = props.readonly, customProps = props.customProps;
      var onChange = function onChange2(e) {
        var value3 = e.target.value;
        if (value3 == "")
          value3 = void 0;
        setValue2(value3);
      };
      return /* @__PURE__ */ jsxDEV("input", {
        type: "time",
        value: value2 || "",
        disabled: readonly,
        onChange,
        ...customProps
      }, void 0, false, {
        fileName: _jsxFileName$u,
        lineNumber: 16,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$t = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/value/VanillaDateTime.js";
    var moment$1 = Utils$1.moment;
    const VanillaDateTime = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var valueFormat = props.valueFormat;
      props.use12Hours;
      var readonly = props.readonly, customProps = props.customProps;
      var onChange = function onChange2(e) {
        var value3 = e.target.value;
        if (value3 == "")
          value3 = void 0;
        else
          value3 = moment$1(new Date(value3)).format(valueFormat);
        setValue2(value3);
      };
      var dtValue = value2;
      if (!value2)
        dtValue = "";
      else
        dtValue = moment$1(value2).format("YYYY-MM-DDTHH:mm");
      return /* @__PURE__ */ jsxDEV("input", {
        type: "datetime-local",
        value: dtValue,
        disabled: readonly,
        onChange,
        ...customProps
      }, void 0, false, {
        fileName: _jsxFileName$t,
        lineNumber: 20,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$s = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/value/VanillaMultiSelect.js";
    var mapListValues$4 = Utils$1.ListUtils.mapListValues;
    const VanillaMultiSelect = function(_ref) {
      var listValues2 = _ref.listValues, value2 = _ref.value, setValue2 = _ref.setValue;
      _ref.allowCustomValues;
      var readonly = _ref.readonly, customProps = _ref.customProps;
      var renderOptions = function renderOptions2() {
        return mapListValues$4(listValues2, function(_ref2) {
          var title = _ref2.title, value3 = _ref2.value;
          return /* @__PURE__ */ jsxDEV("option", {
            value: value3,
            children: title
          }, value3, false, {
            fileName: _jsxFileName$s,
            lineNumber: 17,
            columnNumber: 27
          }, this);
        });
      };
      var getMultiSelectValues = function getMultiSelectValues2(multiselect) {
        var values2 = [];
        var options = multiselect.options;
        for (var i = 0; i < options.length; i++) {
          var opt = options[i];
          if (opt.selected) {
            values2.push(opt.value);
          }
        }
        if (!values2.length)
          values2 = void 0;
        return values2;
      };
      var onChange = function onChange2(e) {
        return setValue2(getMultiSelectValues(e.target));
      };
      return /* @__PURE__ */ jsxDEV("select", {
        multiple: true,
        onChange,
        value: value2,
        disabled: readonly,
        ...omit_1(customProps, ["showSearch", "input", "showCheckboxes"]),
        children: renderOptions()
      }, void 0, false, {
        fileName: _jsxFileName$s,
        lineNumber: 38,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$r = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/value/VanillaSelect.js";
    var mapListValues$3 = Utils$1.ListUtils.mapListValues;
    const VanillaSelect = function(_ref) {
      var listValues2 = _ref.listValues, value2 = _ref.value, setValue2 = _ref.setValue;
      _ref.allowCustomValues;
      var readonly = _ref.readonly, customProps = _ref.customProps;
      var renderOptions = function renderOptions2() {
        return mapListValues$3(listValues2, function(_ref2) {
          var title = _ref2.title, value3 = _ref2.value;
          return /* @__PURE__ */ jsxDEV("option", {
            value: value3,
            children: title
          }, value3, false, {
            fileName: _jsxFileName$r,
            lineNumber: 17,
            columnNumber: 27
          }, this);
        });
      };
      var onChange = function onChange2(e) {
        return setValue2(e.target.value);
      };
      var hasValue2 = value2 != null;
      return /* @__PURE__ */ jsxDEV("select", {
        onChange,
        value: hasValue2 ? value2 : "",
        disabled: readonly,
        ...omit_1(customProps, ["showSearch", "input"]),
        children: [!hasValue2 && /* @__PURE__ */ jsxDEV("option", {
          disabled: true,
          value: ""
        }, void 0, false, {
          fileName: _jsxFileName$r,
          lineNumber: 31,
          columnNumber: 77
        }, this), renderOptions()]
      }, void 0, true, {
        fileName: _jsxFileName$r,
        lineNumber: 27,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$q = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/value/VanillaNumber.js";
    const VanillaNumber = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var readonly = props.readonly, min2 = props.min, max2 = props.max, step = props.step, placeholder = props.placeholder, customProps = props.customProps;
      var onChange = function onChange2(e) {
        var val = e.target.value;
        if (val === "" || val === null)
          val = void 0;
        else
          val = Number(val);
        setValue2(val);
      };
      var numberValue = value2 == void 0 ? "" : value2;
      return /* @__PURE__ */ jsxDEV("input", {
        type: "number",
        value: numberValue,
        placeholder,
        disabled: readonly,
        min: min2,
        max: max2,
        step,
        onChange,
        ...customProps
      }, void 0, false, {
        fileName: _jsxFileName$q,
        lineNumber: 19,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$p = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/value/VanillaSlider.js";
    const VanillaSlider = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var readonly = props.readonly, min2 = props.min, max2 = props.max, step = props.step, placeholder = props.placeholder, _props$customProps = props.customProps, customProps = _props$customProps === void 0 ? {} : _props$customProps;
      var customInputProps = customProps.input || {};
      var customSliderProps = customProps.slider || customProps;
      var onChange = function onChange2(e) {
        var val = e.target.value;
        if (val === "" || val === null)
          val = void 0;
        else
          val = Number(val);
        setValue2(val);
      };
      var numberValue = value2 == void 0 ? "" : value2;
      return /* @__PURE__ */ jsxDEV("div", {
        style: {
          display: "inline-flex"
        },
        children: [/* @__PURE__ */ jsxDEV("input", {
          type: "number",
          value: numberValue,
          placeholder,
          disabled: readonly,
          min: min2,
          max: max2,
          step,
          onChange,
          ...customInputProps
        }, "number", false, {
          fileName: _jsxFileName$p,
          lineNumber: 26,
          columnNumber: 19
        }, this), /* @__PURE__ */ jsxDEV("input", {
          type: "range",
          value: numberValue,
          disabled: readonly,
          min: min2,
          max: max2,
          step,
          onChange,
          ...customSliderProps
        }, "range", false, {
          fileName: _jsxFileName$p,
          lineNumber: 36,
          columnNumber: 39
        }, this)]
      }, void 0, true, {
        fileName: _jsxFileName$p,
        lineNumber: 22,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$o = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/core/VanillaFieldSelect.js";
    const VanillaFieldSelect = function(_ref) {
      var items = _ref.items, setField2 = _ref.setField, selectedKey = _ref.selectedKey, readonly = _ref.readonly;
      var renderOptions = function renderOptions2(fields) {
        return fields.map(function(field) {
          var items2 = field.items, path = field.path, label = field.label, disabled = field.disabled;
          if (items2) {
            return /* @__PURE__ */ jsxDEV("optgroup", {
              disabled,
              label,
              children: renderOptions2(items2)
            }, path, false, {
              fileName: _jsxFileName$o,
              lineNumber: 14,
              columnNumber: 29
            }, this);
          } else {
            return /* @__PURE__ */ jsxDEV("option", {
              disabled,
              value: path,
              children: label
            }, path, false, {
              fileName: _jsxFileName$o,
              lineNumber: 20,
              columnNumber: 29
            }, this);
          }
        });
      };
      var onChange = function onChange2(e) {
        return setField2(e.target.value);
      };
      var hasValue2 = selectedKey != null;
      return /* @__PURE__ */ jsxDEV("select", {
        onChange,
        value: hasValue2 ? selectedKey : "",
        disabled: readonly,
        children: [!hasValue2 && /* @__PURE__ */ jsxDEV("option", {
          disabled: true,
          value: ""
        }, void 0, false, {
          fileName: _jsxFileName$o,
          lineNumber: 36,
          columnNumber: 32
        }, this), renderOptions(items)]
      }, void 0, true, {
        fileName: _jsxFileName$o,
        lineNumber: 32,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$n = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/core/VanillaConjs.js";
    const VanillaConjs = function(_ref) {
      var id = _ref.id, not = _ref.not, setNot2 = _ref.setNot, conjunctionOptions = _ref.conjunctionOptions, setConjunction2 = _ref.setConjunction, disabled = _ref.disabled, readonly = _ref.readonly, config2 = _ref.config, showNot = _ref.showNot, notLabel = _ref.notLabel;
      var conjsCount = Object.keys(conjunctionOptions).length;
      var lessThenTwo = disabled;
      var forceShowConj = config2.settings.forceShowConj;
      var showConj = forceShowConj || conjsCount > 1 && !lessThenTwo;
      var renderOptions = function renderOptions2() {
        return Object.keys(conjunctionOptions).map(function(key) {
          var _conjunctionOptions$k = conjunctionOptions[key], id2 = _conjunctionOptions$k.id, name = _conjunctionOptions$k.name, label = _conjunctionOptions$k.label, checked = _conjunctionOptions$k.checked;
          var postfix = setConjunction2.isDummyFn ? "__dummy" : "";
          if ((readonly || disabled) && !checked)
            return null;
          return [
            /* @__PURE__ */ jsxDEV("input", {
              type: "radio",
              id: id2 + postfix,
              name: name + postfix,
              checked,
              disabled: readonly || disabled,
              value: key,
              onChange
            }, id2 + postfix, false, {
              fileName: _jsxFileName$n,
              lineNumber: 26,
              columnNumber: 28
            }, this),
            /* @__PURE__ */ jsxDEV("label", {
              htmlFor: id2 + postfix,
              children: label
            }, id2 + postfix + "label", false, {
              fileName: _jsxFileName$n,
              lineNumber: 35,
              columnNumber: 24
            }, this)
          ];
        });
      };
      var renderNot = function renderNot2() {
        var postfix = "not";
        return [
          /* @__PURE__ */ jsxDEV("input", {
            type: "checkbox",
            id: id + postfix,
            checked: not,
            disabled: readonly,
            onChange: onNotChange
          }, id + postfix, false, {
            fileName: _jsxFileName$n,
            lineNumber: 43,
            columnNumber: 26
          }, this),
          /* @__PURE__ */ jsxDEV("label", {
            htmlFor: id + postfix,
            children: notLabel || "NOT"
          }, id + postfix + "label", false, {
            fileName: _jsxFileName$n,
            lineNumber: 50,
            columnNumber: 22
          }, this)
        ];
      };
      var onChange = function onChange2(e) {
        return setConjunction2(e.target.value);
      };
      var onNotChange = function onNotChange2(e) {
        return setNot2(e.target.checked);
      };
      return [showNot && renderNot(), showConj && renderOptions()];
    };
    var _jsxFileName$m = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/core/VanillaButton.js";
    const VanillaButton = function(_ref) {
      var type = _ref.type, label = _ref.label, onClick = _ref.onClick, readonly = _ref.readonly;
      _ref.config;
      var typeToLabel = {
        "addRuleGroup": "+",
        "addRuleGroupExt": "+",
        "delGroup": "x",
        "delRuleGroup": "x",
        "delRule": "x"
      };
      var btnLabel = label || typeToLabel[type];
      return /* @__PURE__ */ jsxDEV("button", {
        onClick,
        type: "button",
        disabled: readonly,
        children: btnLabel
      }, void 0, false, {
        fileName: _jsxFileName$m,
        lineNumber: 16,
        columnNumber: 23
      }, this);
    };
    const VanillaButtonGroup = function(_ref) {
      var children = _ref.children;
      _ref.config;
      return /* @__PURE__ */ jsxDEV(Fragment, {
        children
      }, void 0, false);
    };
    var _jsxFileName$l = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/core/VanillaValueSources.js";
    const VanillaValueSources = function(_ref) {
      _ref.config;
      var valueSources = _ref.valueSources, valueSrc = _ref.valueSrc;
      _ref.title;
      var setValueSrc2 = _ref.setValueSrc, readonly = _ref.readonly;
      var renderOptions = function renderOptions2(valueSources2) {
        return valueSources2.map(function(_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2), srcKey = _ref3[0], info = _ref3[1];
          return /* @__PURE__ */ jsxDEV("option", {
            value: srcKey,
            children: info.label
          }, srcKey, false, {
            fileName: _jsxFileName$l,
            lineNumber: 15,
            columnNumber: 27
          }, this);
        });
      };
      var onChange = function onChange2(e) {
        return setValueSrc2(e.target.value);
      };
      return /* @__PURE__ */ jsxDEV("select", {
        onChange,
        value: valueSrc,
        disabled: readonly,
        children: renderOptions(valueSources)
      }, void 0, false, {
        fileName: _jsxFileName$l,
        lineNumber: 24,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$k = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/core/VanillaSwitch.js";
    const VanillaSwitch = function(_ref) {
      var value2 = _ref.value, setValue2 = _ref.setValue, label = _ref.label, id = _ref.id;
      _ref.config;
      var type = _ref.type;
      var onChange = function onChange2(e) {
        return setValue2(e.target.checked);
      };
      var postfix = type;
      return [
        /* @__PURE__ */ jsxDEV("input", {
          type: "checkbox",
          id: id + postfix,
          checked: !!value2,
          onChange
        }, id + postfix, false, {
          fileName: _jsxFileName$k,
          lineNumber: 13,
          columnNumber: 24
        }, this),
        /* @__PURE__ */ jsxDEV("label", {
          htmlFor: id + postfix,
          children: label
        }, id + postfix + "label", false, {
          fileName: _jsxFileName$k,
          lineNumber: 19,
          columnNumber: 20
        }, this)
      ];
    };
    const vanillaConfirm = function(_ref) {
      var onOk = _ref.onOk;
      _ref.okText;
      _ref.cancelText;
      var title = _ref.title;
      if (confirm(title)) {
        onOk();
      }
    };
    var VanillaProvider = function VanillaProvider2(_ref) {
      _ref.config;
      var children = _ref.children;
      return children;
    };
    const Widgets = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      ValueFieldWidget: ValueField,
      FuncWidget,
      VanillaBooleanWidget: VanillaBoolean,
      VanillaTextWidget: VanillaText,
      VanillaTextAreaWidget: VanillaTextArea,
      VanillaDateWidget: VanillaDate,
      VanillaTimeWidget: VanillaTime,
      VanillaDateTimeWidget: VanillaDateTime,
      VanillaMultiSelectWidget: VanillaMultiSelect,
      VanillaSelectWidget: VanillaSelect,
      VanillaNumberWidget: VanillaNumber,
      VanillaSliderWidget: VanillaSlider,
      VanillaFieldSelect,
      VanillaConjs,
      VanillaButton,
      VanillaButtonGroup,
      VanillaValueSources,
      VanillaSwitch,
      vanillaConfirm,
      VanillaProvider
    }, Symbol.toStringTag, { value: "Module" }));
    var _jsxFileName$j = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/operators/Proximity.js";
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var Proximity = /* @__PURE__ */ function(_PureComponent) {
      _inherits(Proximity2, _PureComponent);
      var _super = _createSuper(Proximity2);
      function Proximity2() {
        var _this;
        _classCallCheck(this, Proximity2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _this.handleChange = function(value2) {
          _this.props.setOption("proximity", parseInt(value2));
        };
        return _this;
      }
      _createClass(Proximity2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, defaults2 = _this$props.defaults, options = _this$props.options, config2 = _this$props.config, optionLabel = _this$props.optionLabel, optionPlaceholder = _this$props.optionPlaceholder, customProps = _this$props.customProps, minProximity = _this$props.minProximity, maxProximity = _this$props.maxProximity, optionTextBefore = _this$props.optionTextBefore, readonly = _this$props.readonly;
          var settings2 = config2.settings, widgets2 = config2.widgets, ctx2 = config2.ctx;
          var defaultProximity = defaults2 ? defaults2.proximity : void 0;
          var showLabels = settings2.showLabels;
          var selectedProximity = options.get("proximity", defaultProximity);
          var proxValues = range_1(minProximity, maxProximity + 1).map(function(item) {
            return {
              title: item,
              value: item
            };
          });
          var factory = widgets2.select.factory;
          var Select2 = function Select3(props) {
            return factory(props, ctx2);
          };
          return /* @__PURE__ */ jsxDEV("div", {
            className: "operator--PROXIMITY",
            children: [/* @__PURE__ */ jsxDEV("div", {
              className: "operator--options",
              children: [showLabels && /* @__PURE__ */ jsxDEV("label", {
                className: "rule--label",
                children: optionLabel
              }, void 0, false, {
                fileName: _jsxFileName$j,
                lineNumber: 61,
                columnNumber: 37
              }, this), !showLabels && optionTextBefore && /* @__PURE__ */ jsxDEV("div", {
                className: "operator--options--sep",
                children: /* @__PURE__ */ jsxDEV("span", {
                  children: optionTextBefore
                }, void 0, false, {
                  fileName: _jsxFileName$j,
                  lineNumber: 65,
                  columnNumber: 23
                }, this)
              }, void 0, false, {
                fileName: _jsxFileName$j,
                lineNumber: 63,
                columnNumber: 72
              }, this), /* @__PURE__ */ jsxDEV(Select2, {
                config: config2,
                value: selectedProximity,
                listValues: proxValues,
                setValue: this.handleChange,
                readonly,
                placeholder: optionPlaceholder,
                ...customProps
              }, void 0, false, {
                fileName: _jsxFileName$j,
                lineNumber: 65,
                columnNumber: 90
              }, this)]
            }, void 0, true, {
              fileName: _jsxFileName$j,
              lineNumber: 59,
              columnNumber: 23
            }, this), /* @__PURE__ */ jsxDEV("div", {
              className: "operator--widgets",
              children: this.props.children
            }, void 0, false, {
              fileName: _jsxFileName$j,
              lineNumber: 72,
              columnNumber: 39
            }, this)]
          }, void 0, true, {
            fileName: _jsxFileName$j,
            lineNumber: 57,
            columnNumber: 27
          }, this);
        }
      }]);
      return Proximity2;
    }(react.exports.PureComponent);
    Proximity.propTypes = {
      config: propTypes.exports.object.isRequired,
      setOption: propTypes.exports.func.isRequired,
      options: propTypes.exports.any.isRequired,
      minProximity: propTypes.exports.number,
      maxProximity: propTypes.exports.number,
      optionPlaceholder: propTypes.exports.string,
      optionTextBefore: propTypes.exports.string,
      optionLabel: propTypes.exports.string,
      customProps: propTypes.exports.object,
      readonly: propTypes.exports.bool
    };
    Proximity.defaultProps = {
      customProps: {},
      minProximity: 2,
      maxProximity: 10,
      optionPlaceholder: "Select words between",
      optionLabel: "Words between",
      optionTextBefore: null
    };
    const CustomOperators = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      ProximityOperator: Proximity
    }, Symbol.toStringTag, { value: "Module" }));
    var _jsxFileName$i = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/config/index.js";
    function ownKeys$5(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$5(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$5(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var conjunctions = _objectSpread$5({}, CoreConfig.conjunctions);
    var operators = _objectSpread$5(_objectSpread$5({}, CoreConfig.operators), {}, {
      proximity: _objectSpread$5(_objectSpread$5({}, CoreConfig.operators.proximity), {}, {
        options: _objectSpread$5(_objectSpread$5({}, CoreConfig.operators.proximity.options), {}, {
          factory: function factory(props, _ref) {
            var RCE = _ref.RCE, ProximityOperator = _ref.O.ProximityOperator;
            return RCE(ProximityOperator, props);
          }
        })
      })
    });
    var widgets$1 = {
      text: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.text), {}, {
        factory: function factory(props, _ref2) {
          var RCE = _ref2.RCE, VanillaTextWidget = _ref2.W.VanillaTextWidget;
          return RCE(VanillaTextWidget, props);
        }
      }),
      textarea: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.textarea), {}, {
        factory: function factory(props, _ref3) {
          var RCE = _ref3.RCE, VanillaTextAreaWidget = _ref3.W.VanillaTextAreaWidget;
          return RCE(VanillaTextAreaWidget, props);
        }
      }),
      number: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.number), {}, {
        factory: function factory(props, _ref4) {
          var RCE = _ref4.RCE, VanillaNumberWidget = _ref4.W.VanillaNumberWidget;
          return RCE(VanillaNumberWidget, props);
        }
      }),
      slider: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.slider), {}, {
        factory: function factory(props, _ref5) {
          var RCE = _ref5.RCE, VanillaSliderWidget = _ref5.W.VanillaSliderWidget;
          return RCE(VanillaSliderWidget, props);
        }
      }),
      select: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.select), {}, {
        factory: function factory(props, _ref6) {
          var RCE = _ref6.RCE, VanillaSelectWidget = _ref6.W.VanillaSelectWidget;
          return RCE(VanillaSelectWidget, props);
        }
      }),
      multiselect: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.multiselect), {}, {
        factory: function factory(props, _ref7) {
          var RCE = _ref7.RCE, VanillaMultiSelectWidget = _ref7.W.VanillaMultiSelectWidget;
          return RCE(VanillaMultiSelectWidget, props);
        }
      }),
      date: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.date), {}, {
        factory: function factory(props, _ref8) {
          var RCE = _ref8.RCE, VanillaDateWidget = _ref8.W.VanillaDateWidget;
          return RCE(VanillaDateWidget, props);
        }
      }),
      time: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.time), {}, {
        factory: function factory(props, _ref9) {
          var RCE = _ref9.RCE, VanillaTimeWidget = _ref9.W.VanillaTimeWidget;
          return RCE(VanillaTimeWidget, props);
        }
      }),
      datetime: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.datetime), {}, {
        factory: function factory(props, _ref10) {
          var RCE = _ref10.RCE, VanillaDateTimeWidget = _ref10.W.VanillaDateTimeWidget;
          return RCE(VanillaDateTimeWidget, props);
        }
      }),
      "boolean": _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets["boolean"]), {}, {
        factory: function factory(props, _ref11) {
          var RCE = _ref11.RCE, VanillaBooleanWidget = _ref11.W.VanillaBooleanWidget;
          return RCE(VanillaBooleanWidget, props);
        }
      }),
      field: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.field), {}, {
        factory: function factory(props, _ref12) {
          var RCE = _ref12.RCE, ValueFieldWidget = _ref12.W.ValueFieldWidget;
          return RCE(ValueFieldWidget, props);
        },
        customProps: {
          showSearch: true
        }
      }),
      func: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.func), {}, {
        factory: function factory(props, _ref13) {
          var RCE = _ref13.RCE, FuncWidget2 = _ref13.W.FuncWidget;
          return RCE(FuncWidget2, props);
        },
        customProps: {}
      }),
      case_value: _objectSpread$5(_objectSpread$5({}, CoreConfig.widgets.case_value), {}, {
        factory: function factory(props, _ref14) {
          var RCE = _ref14.RCE, VanillaTextWidget = _ref14.W.VanillaTextWidget;
          return RCE(VanillaTextWidget, props);
        }
      })
    };
    var types$1 = _objectSpread$5(_objectSpread$5({}, CoreConfig.types), {}, {
      select: _objectSpread$5(_objectSpread$5({}, CoreConfig.types.select), {}, {
        widgets: _objectSpread$5(_objectSpread$5({}, CoreConfig.types.select.widgets), {}, {
          select: _objectSpread$5(_objectSpread$5({}, CoreConfig.types.select.widgets.select), {}, {
            widgetProps: {
              customProps: {
                showSearch: true
              }
            }
          })
        })
      })
    });
    var settings$1 = _objectSpread$5(_objectSpread$5({}, CoreConfig.settings), {}, {
      renderField: function renderField(props, _ref15) {
        var RCE = _ref15.RCE, VanillaFieldSelect2 = _ref15.W.VanillaFieldSelect;
        return RCE(VanillaFieldSelect2, props);
      },
      renderOperator: function renderOperator(props, _ref16) {
        var RCE = _ref16.RCE, VanillaFieldSelect2 = _ref16.W.VanillaFieldSelect;
        return RCE(VanillaFieldSelect2, props);
      },
      renderFunc: function renderFunc(props, _ref17) {
        var RCE = _ref17.RCE, VanillaFieldSelect2 = _ref17.W.VanillaFieldSelect;
        return RCE(VanillaFieldSelect2, props);
      },
      renderConjs: function renderConjs(props, _ref18) {
        var RCE = _ref18.RCE, VanillaConjs2 = _ref18.W.VanillaConjs;
        return RCE(VanillaConjs2, props);
      },
      renderSwitch: function renderSwitch(props, _ref19) {
        var RCE = _ref19.RCE, VanillaSwitch2 = _ref19.W.VanillaSwitch;
        return RCE(VanillaSwitch2, props);
      },
      renderButton: function renderButton(props, _ref20) {
        var RCE = _ref20.RCE, VanillaButton2 = _ref20.W.VanillaButton;
        return RCE(VanillaButton2, props);
      },
      renderButtonGroup: function renderButtonGroup(props, _ref21) {
        var RCE = _ref21.RCE, VanillaButtonGroup2 = _ref21.W.VanillaButtonGroup;
        return RCE(VanillaButtonGroup2, props);
      },
      renderProvider: function renderProvider(props, _ref22) {
        var RCE = _ref22.RCE, VanillaProvider2 = _ref22.W.VanillaProvider;
        return RCE(VanillaProvider2, props);
      },
      renderValueSources: function renderValueSources(props, _ref23) {
        var RCE = _ref23.RCE, VanillaValueSources2 = _ref23.W.VanillaValueSources;
        return RCE(VanillaValueSources2, props);
      },
      renderConfirm: function renderConfirm(props, _ref24) {
        var vanillaConfirm2 = _ref24.W.vanillaConfirm;
        return vanillaConfirm2(props);
      },
      renderSwitchPrefix: "Conditions",
      customFieldSelectProps: {
        showSearch: true
      },
      defaultSliderWidth: "200px",
      defaultSelectWidth: "200px",
      defaultSearchWidth: "100px",
      defaultMaxRows: 5,
      renderSize: "small",
      maxLabelsLength: 100,
      showLock: false,
      showNot: true,
      forceShowConj: false,
      groupActionsPosition: "topRight"
    });
    var ctx$1 = _objectSpread$5(_objectSpread$5({}, CoreConfig.ctx), {}, {
      W: _objectSpread$5({}, Widgets),
      O: _objectSpread$5({}, CustomOperators),
      RCE: function RCE(C, P) {
        return /* @__PURE__ */ jsxDEV(C, {
          ...P
        }, void 0, false, {
          fileName: _jsxFileName$i,
          lineNumber: 220,
          columnNumber: 25
        }, this);
      }
    });
    var config$2 = {
      conjunctions,
      operators,
      widgets: widgets$1,
      types: types$1,
      settings: settings$1,
      ctx: ctx$1
    };
    config$2 = Utils$1.ConfigMixins.removeMixins(config$2, ["rangeslider", "treeselect", "treemultiselect"]);
    const BasicConfig = config$2;
    var root = _root;
    var now$1 = function() {
      return root.Date.now();
    };
    var now_1 = now$1;
    var isObject$1 = isObject_1, now = now_1, toNumber = toNumber_1;
    var FUNC_ERROR_TEXT$1 = "Expected a function";
    var nativeMax = Math.max, nativeMin = Math.min;
    function debounce$1(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT$1);
      }
      wait = toNumber(wait) || 0;
      if (isObject$1(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    var debounce_1 = debounce$1;
    function ownKeys$4(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$4(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var _Utils$Autocomplete = Utils$1.Autocomplete, mergeListValues = _Utils$Autocomplete.mergeListValues, listValueToOption = _Utils$Autocomplete.listValueToOption, optionToListValue = _Utils$Autocomplete.optionToListValue, optionsToListValues = _Utils$Autocomplete.optionsToListValues;
    var _Utils$ListUtils = Utils$1.ListUtils, mapListValues$2 = _Utils$ListUtils.mapListValues, listValuesToArray = _Utils$ListUtils.listValuesToArray, getListValue = _Utils$ListUtils.getListValue, makeCustomListValue = _Utils$ListUtils.makeCustomListValue, searchListValue = _Utils$ListUtils.searchListValue;
    _Utils$ListUtils.getItemInListValues;
    function sleep(delay) {
      return new Promise(function(resolve) {
        setTimeout(resolve, delay);
      });
    }
    var useListValuesAutocomplete$1 = function useListValuesAutocomplete2(_ref, _ref2) {
      var asyncFetch = _ref.asyncFetch, useLoadMore = _ref.useLoadMore, useAsyncSearch = _ref.useAsyncSearch, forceAsyncSearch = _ref.forceAsyncSearch, selectedAsyncListValues = _ref.asyncListValues, staticListValues = _ref.listValues, allowCustomValues = _ref.allowCustomValues, selectedValue = _ref.value, setValue2 = _ref.setValue, placeholder = _ref.placeholder, config2 = _ref.config;
      var debounceTimeout = _ref2.debounceTimeout, multiple = _ref2.multiple, uif = _ref2.uif;
      var knownSpecialValues = ["LOAD_MORE", "LOADING_MORE"];
      var loadMoreTitle = "Load more...";
      var loadingMoreTitle = "Loading more...";
      var aPlaceholder = forceAsyncSearch ? "Type to search" : placeholder;
      var _React$useState = React.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), open = _React$useState2[0], setOpen = _React$useState2[1];
      var _React$useState3 = React.useState(void 0), _React$useState4 = _slicedToArray(_React$useState3, 2), asyncFetchMeta = _React$useState4[0], setAsyncFetchMeta = _React$useState4[1];
      var _React$useState5 = React.useState(0), _React$useState6 = _slicedToArray(_React$useState5, 2), loadingCnt = _React$useState6[0], setLoadingCnt = _React$useState6[1];
      var _React$useState7 = React.useState(false), _React$useState8 = _slicedToArray(_React$useState7, 2), isLoadingMore = _React$useState8[0], setIsLoadingMore = _React$useState8[1];
      var _React$useState9 = React.useState(""), _React$useState10 = _slicedToArray(_React$useState9, 2), inputValue = _React$useState10[0], setInputValue = _React$useState10[1];
      var _React$useState11 = React.useState(void 0), _React$useState12 = _slicedToArray(_React$useState11, 2), asyncListValues = _React$useState12[0], setAsyncListValues = _React$useState12[1];
      var asyncFectchCnt = React.useRef(0);
      var componentIsMounted = React.useRef(0);
      var isSelectedLoadMore = React.useRef(false);
      var nSelectedAsyncListValues = listValuesToArray(selectedAsyncListValues);
      var listValues2 = asyncFetch ? selectedAsyncListValues ? mergeListValues(asyncListValues, nSelectedAsyncListValues, true) : asyncListValues : staticListValues;
      var listValuesToDisplay = asyncFetch ? asyncListValues : staticListValues;
      if (allowCustomValues && inputValue && !searchListValue(inputValue, asyncListValues)) {
        listValuesToDisplay = mergeListValues(listValuesToDisplay, [makeCustomListValue(inputValue)], true);
      }
      if (asyncFetch && !asyncListValues && selectedAsyncListValues && !inputValue && !open && uif === "antd") {
        listValuesToDisplay = listValues2;
      }
      if (asyncFetch && !allowCustomValues && selectedAsyncListValues && uif === "mui") {
        listValuesToDisplay = mergeListValues(listValuesToDisplay, nSelectedAsyncListValues, true, true);
      }
      var isLoading = loadingCnt > 0;
      var canInitialLoad = open && asyncFetch && asyncListValues === void 0 && (forceAsyncSearch ? inputValue : true);
      var isInitialLoading = canInitialLoad && isLoading;
      var canLoadMore = !isInitialLoading && listValues2 && listValues2.length > 0 && asyncFetchMeta && asyncFetchMeta.hasMore && (asyncFetchMeta.filter || "") === inputValue;
      var canShowLoadMore = !isLoading && canLoadMore;
      var options = mapListValues$2(listValuesToDisplay, listValueToOption);
      var hasValue2 = selectedValue != null;
      var selectedListValue = !multiple && hasValue2 ? getListValue(selectedValue, listValues2) : null;
      var fetchListValues = /* @__PURE__ */ function() {
        var _ref3 = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee() {
          var filter, isLoadMore, offset2, meta, newAsyncFetchCnt, res, isFetchCancelled, _ref4, values2, hasMore, newMeta, nValues, assumeHasMore, newValues, realNewMeta, _args = arguments;
          return regenerator.wrap(function _callee$(_context) {
            while (1)
              switch (_context.prev = _context.next) {
                case 0:
                  filter = _args.length > 0 && _args[0] !== void 0 ? _args[0] : null;
                  isLoadMore = _args.length > 1 && _args[1] !== void 0 ? _args[1] : false;
                  if (!isLoadMore && asyncFetchMeta) {
                    setAsyncFetchMeta(void 0);
                  }
                  offset2 = isLoadMore && asyncListValues ? asyncListValues.length : 0;
                  meta = isLoadMore && asyncFetchMeta || !useLoadMore && {
                    pageSize: 0
                  };
                  newAsyncFetchCnt = ++asyncFectchCnt.current;
                  _context.next = 8;
                  return asyncFetch.call(config2 === null || config2 === void 0 ? void 0 : config2.ctx, filter, offset2, meta);
                case 8:
                  res = _context.sent;
                  isFetchCancelled = asyncFectchCnt.current != newAsyncFetchCnt;
                  if (!(isFetchCancelled || !componentIsMounted.current)) {
                    _context.next = 12;
                    break;
                  }
                  return _context.abrupt("return", null);
                case 12:
                  _ref4 = res && res.values ? res : {
                    values: res
                  }, values2 = _ref4.values, hasMore = _ref4.hasMore, newMeta = _ref4.meta;
                  nValues = listValuesToArray(values2);
                  if (isLoadMore) {
                    newValues = mergeListValues(asyncListValues, nValues, false);
                    assumeHasMore = newValues.length > asyncListValues.length;
                  } else {
                    newValues = nValues;
                    if (useLoadMore) {
                      assumeHasMore = newValues.length > 0;
                    }
                  }
                  realNewMeta = hasMore != null || newMeta != null || assumeHasMore != null ? _objectSpread$4(_objectSpread$4(_objectSpread$4(_objectSpread$4({}, assumeHasMore != null ? {
                    hasMore: assumeHasMore
                  } : {}), hasMore != null ? {
                    hasMore
                  } : {}), newMeta != null ? newMeta : {}), {}, {
                    filter
                  }) : void 0;
                  if (realNewMeta) {
                    setAsyncFetchMeta(realNewMeta);
                  }
                  return _context.abrupt("return", newValues);
                case 18:
                case "end":
                  return _context.stop();
              }
          }, _callee);
        }));
        return function fetchListValues2() {
          return _ref3.apply(this, arguments);
        };
      }();
      var loadListValues = /* @__PURE__ */ function() {
        var _ref5 = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee2() {
          var filter, isLoadMore, list, _args2 = arguments;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1)
              switch (_context2.prev = _context2.next) {
                case 0:
                  filter = _args2.length > 0 && _args2[0] !== void 0 ? _args2[0] : null;
                  isLoadMore = _args2.length > 1 && _args2[1] !== void 0 ? _args2[1] : false;
                  setLoadingCnt(function(x) {
                    return x + 1;
                  });
                  setIsLoadingMore(isLoadMore);
                  _context2.next = 6;
                  return fetchListValues(filter, isLoadMore);
                case 6:
                  list = _context2.sent;
                  if (componentIsMounted.current) {
                    _context2.next = 9;
                    break;
                  }
                  return _context2.abrupt("return");
                case 9:
                  if (list != null) {
                    setAsyncListValues(list);
                  }
                  setLoadingCnt(function(x) {
                    return x - 1;
                  });
                  setIsLoadingMore(false);
                case 12:
                case "end":
                  return _context2.stop();
              }
          }, _callee2);
        }));
        return function loadListValues2() {
          return _ref5.apply(this, arguments);
        };
      }();
      var loadListValuesDebounced = React.useCallback(debounce_1(loadListValues, debounceTimeout), []);
      React.useEffect(function() {
        componentIsMounted.current++;
        if (canInitialLoad && loadingCnt == 0 && asyncFectchCnt.current == 0) {
          _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee3() {
            return regenerator.wrap(function _callee3$(_context3) {
              while (1)
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _context3.next = 2;
                    return loadListValues();
                  case 2:
                  case "end":
                    return _context3.stop();
                }
            }, _callee3);
          }))();
        }
        return function() {
          componentIsMounted.current--;
        };
      }, [canInitialLoad]);
      var onOpen = function onOpen2() {
        setOpen(true);
      };
      var onClose = /* @__PURE__ */ function() {
        var _ref7 = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee4(_e) {
          var isLoadMoreClick, resetValue;
          return regenerator.wrap(function _callee4$(_context4) {
            while (1)
              switch (_context4.prev = _context4.next) {
                case 0:
                  isLoadMoreClick = isSelectedLoadMore.current;
                  if (isLoadMoreClick) {
                    isSelectedLoadMore.current = false;
                    if (multiple) {
                      setOpen(false);
                    }
                  } else {
                    setOpen(false);
                  }
                  if (!(uif === "mui" && !isLoadMoreClick)) {
                    _context4.next = 6;
                    break;
                  }
                  resetValue = "";
                  _context4.next = 6;
                  return onInputChange(null, resetValue, "my-reset");
                case 6:
                case "end":
                  return _context4.stop();
              }
          }, _callee4);
        }));
        return function onClose2(_x) {
          return _ref7.apply(this, arguments);
        };
      }();
      var onDropdownVisibleChange = function onDropdownVisibleChange2(open2) {
        if (open2) {
          onOpen();
        } else {
          onClose();
        }
      };
      var isSpecialValue = function isSpecialValue2(option) {
        var specialValue = (option === null || option === void 0 ? void 0 : option.specialValue) || (option === null || option === void 0 ? void 0 : option.value);
        return knownSpecialValues.includes(specialValue);
      };
      var onChange = /* @__PURE__ */ function() {
        var _ref8 = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee5(e, val, option) {
          var _option2;
          var isClearingAll, isClearingInput, _option$value, _option, specialValue, shouldIgnore, isAddingCustomOptionFromSearch, _optionsToListValues, _optionsToListValues2, newSelectedValues, newSelectedListValues, _optionToListValue, _optionToListValue2, v, lvs;
          return regenerator.wrap(function _callee5$(_context5) {
            while (1)
              switch (_context5.prev = _context5.next) {
                case 0:
                  isClearingAll = multiple && uif === "mui" && option === "clear";
                  isClearingInput = !multiple && uif === "mui" && option === "clear" && (e === null || e === void 0 ? void 0 : e.type) === "change";
                  if (uif === "mui") {
                    option = val;
                    if (multiple) {
                      val = option.map(function(o) {
                        var _o$value;
                        return (_o$value = o === null || o === void 0 ? void 0 : o.value) !== null && _o$value !== void 0 ? _o$value : o;
                      });
                    } else {
                      val = (_option$value = (_option = option) === null || _option === void 0 ? void 0 : _option.value) !== null && _option$value !== void 0 ? _option$value : option;
                    }
                  }
                  specialValue = multiple && Array.isArray(option) && option.map(function(opt) {
                    return opt === null || opt === void 0 ? void 0 : opt.specialValue;
                  }).find(function(v2) {
                    return !!v2;
                  }) || ((_option2 = option) === null || _option2 === void 0 ? void 0 : _option2.specialValue);
                  if (multiple && val && !Array.isArray(val)) {
                    val = [].concat(_toConsumableArray(selectedValue || []), [val]);
                    option = null;
                  }
                  shouldIgnore = isClearingAll && val.length === 0 && inputValue && open || isClearingInput;
                  if (!shouldIgnore) {
                    _context5.next = 8;
                    break;
                  }
                  return _context5.abrupt("return");
                case 8:
                  isAddingCustomOptionFromSearch = multiple && val.length && val.length > (selectedValue || []).length && val[val.length - 1] == inputValue && !getListValue(inputValue, asyncListValues);
                  if (!(specialValue == "LOAD_MORE")) {
                    _context5.next = 16;
                    break;
                  }
                  setInputValue(inputValue);
                  isSelectedLoadMore.current = true;
                  _context5.next = 14;
                  return loadListValues(inputValue, true);
                case 14:
                  _context5.next = 32;
                  break;
                case 16:
                  if (!(specialValue == "LOADING_MORE")) {
                    _context5.next = 20;
                    break;
                  }
                  isSelectedLoadMore.current = true;
                  _context5.next = 32;
                  break;
                case 20:
                  if (!multiple) {
                    _context5.next = 30;
                    break;
                  }
                  _optionsToListValues = optionsToListValues(val, listValues2, allowCustomValues), _optionsToListValues2 = _slicedToArray(_optionsToListValues, 2), newSelectedValues = _optionsToListValues2[0], newSelectedListValues = _optionsToListValues2[1];
                  setValue2(newSelectedValues, asyncFetch ? newSelectedListValues : void 0);
                  if (!isAddingCustomOptionFromSearch) {
                    _context5.next = 28;
                    break;
                  }
                  _context5.next = 26;
                  return sleep(0);
                case 26:
                  _context5.next = 28;
                  return onInputChange(null, "", "my-reset");
                case 28:
                  _context5.next = 32;
                  break;
                case 30:
                  _optionToListValue = optionToListValue(val, listValues2, allowCustomValues), _optionToListValue2 = _slicedToArray(_optionToListValue, 2), v = _optionToListValue2[0], lvs = _optionToListValue2[1];
                  setValue2(v, asyncFetch ? lvs : void 0);
                case 32:
                case "end":
                  return _context5.stop();
              }
          }, _callee5);
        }));
        return function onChange2(_x2, _x3, _x4) {
          return _ref8.apply(this, arguments);
        };
      }();
      var onInputChange = /* @__PURE__ */ function() {
        var _ref9 = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee6(e, newInputValue, eventType) {
          var shouldIgnore, val, canSearchAsync;
          return regenerator.wrap(function _callee6$(_context6) {
            while (1)
              switch (_context6.prev = _context6.next) {
                case 0:
                  shouldIgnore = uif === "mui" && eventType === "reset";
                  val = newInputValue;
                  if (!(val === loadMoreTitle || val === loadingMoreTitle || shouldIgnore)) {
                    _context6.next = 4;
                    break;
                  }
                  return _context6.abrupt("return");
                case 4:
                  if (!(newInputValue != inputValue)) {
                    _context6.next = 13;
                    break;
                  }
                  setInputValue(val);
                  canSearchAsync = useAsyncSearch && (forceAsyncSearch ? !!val : true);
                  if (!canSearchAsync) {
                    _context6.next = 12;
                    break;
                  }
                  _context6.next = 10;
                  return loadListValuesDebounced(val);
                case 10:
                  _context6.next = 13;
                  break;
                case 12:
                  if (useAsyncSearch && forceAsyncSearch) {
                    setAsyncListValues([]);
                  }
                case 13:
                case "end":
                  return _context6.stop();
              }
          }, _callee6);
        }));
        return function onInputChange2(_x5, _x6, _x7) {
          return _ref9.apply(this, arguments);
        };
      }();
      var extendOptions = function extendOptions2(options2) {
        var filtered = _toConsumableArray(options2);
        if (useLoadMore) {
          if (canShowLoadMore) {
            filtered.push({
              specialValue: "LOAD_MORE",
              title: loadMoreTitle
            });
          } else if (isLoadingMore) {
            filtered.push({
              specialValue: "LOADING_MORE",
              title: loadingMoreTitle,
              disabled: true
            });
          }
        }
        return filtered;
      };
      var getOptionSelected = function getOptionSelected2(option, valueOrOption) {
        if (valueOrOption == null)
          return null;
        var selectedValue2 = valueOrOption.value != void 0 ? valueOrOption.value : valueOrOption;
        return option.value === selectedValue2;
      };
      var getOptionDisabled = function getOptionDisabled2(valueOrOption) {
        return valueOrOption && valueOrOption.disabled;
      };
      var getOptionIsCustom = function getOptionIsCustom2(valueOrOption) {
        var _valueOrOption$value;
        if (valueOrOption !== null && valueOrOption !== void 0 && valueOrOption.isCustom)
          return true;
        var val = (_valueOrOption$value = valueOrOption === null || valueOrOption === void 0 ? void 0 : valueOrOption.value) !== null && _valueOrOption$value !== void 0 ? _valueOrOption$value : valueOrOption;
        var lv = getListValue(val, listValues2);
        return (lv === null || lv === void 0 ? void 0 : lv.isCustom) || false;
      };
      var getOptionLabel = function getOptionLabel2(valueOrOption) {
        if (valueOrOption == null)
          return null;
        var option = valueOrOption.value != void 0 ? valueOrOption : listValueToOption(getListValue(valueOrOption, listValues2));
        if (!option && valueOrOption.specialValue) {
          return valueOrOption.title;
        }
        if (!option && allowCustomValues) {
          return valueOrOption;
        }
        if (!option) {
          return valueOrOption;
        }
        return option.title || option.label;
      };
      return {
        options,
        listValues: listValues2,
        hasValue: hasValue2,
        selectedListValue,
        open,
        onOpen,
        onClose,
        onDropdownVisibleChange,
        onChange,
        inputValue,
        onInputChange,
        canShowLoadMore,
        isInitialLoading,
        isLoading,
        isLoadingMore,
        isSpecialValue,
        extendOptions,
        getOptionSelected,
        getOptionDisabled,
        getOptionIsCustom,
        getOptionLabel,
        aPlaceholder
      };
    };
    function ownKeys$3(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$3(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$3(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    const Utils = _objectSpread$3(_objectSpread$3({}, Utils$1), {}, {
      ReactUtils
    });
    function useTimePickerDefaultizedProps(props, name) {
      var _themeProps$ampm;
      const themeProps = useThemeProps({
        props,
        name
      });
      const utils2 = useUtils();
      const ampm = (_themeProps$ampm = themeProps.ampm) != null ? _themeProps$ampm : utils2.is12HourCycleInCurrentLocale();
      const localeText = useLocaleText();
      const getOpenDialogAriaText = localeText.openTimePickerDialogue;
      return _extends$1({
        ampm,
        openTo: "hours",
        views: ["hours", "minutes"],
        acceptRegex: ampm ? /[\dapAP]/gi : /\d/gi,
        disableMaskedInput: false,
        getOpenDialogAriaText,
        inputFormat: ampm ? utils2.formats.fullTime12h : utils2.formats.fullTime24h
      }, themeProps, {
        components: _extends$1({
          OpenPickerIcon: Clock$1
        }, themeProps.components)
      });
    }
    const timePickerValueManager = {
      emptyValue: null,
      parseInput: parsePickerInputValue,
      getTodayValue: (utils2) => utils2.date(),
      areValuesEqual: (utils2, a, b) => utils2.isEqual(a, b),
      valueReducer: (utils2, lastValidValue, newValue) => {
        if (!lastValidValue || !utils2.isValid(newValue)) {
          return newValue;
        }
        return utils2.mergeDateAndTime(lastValidValue, newValue);
      }
    };
    function getTimePickerToolbarUtilityClass(slot) {
      return generateUtilityClass("MuiTimePickerToolbar", slot);
    }
    const timePickerToolbarClasses = generateUtilityClasses("MuiTimePickerToolbar", ["root", "separator", "hourMinuteLabel", "hourMinuteLabelLandscape", "hourMinuteLabelReverse", "ampmSelection", "ampmLandscape", "ampmLabel"]);
    const _excluded$7 = ["ampm", "ampmInClock", "parsedValue", "isLandscape", "isMobileKeyboardViewOpen", "onChange", "openView", "setOpenView", "toggleMobileKeyboardView", "toolbarTitle", "views", "disabled", "readOnly"];
    const useUtilityClasses = (ownerState) => {
      const {
        theme,
        isLandscape,
        classes
      } = ownerState;
      const slots = {
        root: ["root"],
        separator: ["separator"],
        hourMinuteLabel: ["hourMinuteLabel", isLandscape && "hourMinuteLabelLandscape", theme.direction === "rtl" && "hourMinuteLabelReverse"],
        ampmSelection: ["ampmSelection", isLandscape && "ampmLandscape"],
        ampmLabel: ["ampmLabel"]
      };
      return composeClasses(slots, getTimePickerToolbarUtilityClass, classes);
    };
    const TimePickerToolbarRoot = styled$1(PickersToolbar, {
      name: "MuiTimePickerToolbar",
      slot: "Root",
      overridesResolver: (props, styles2) => styles2.root
    })({
      [`& .${pickersToolbarClasses.penIconButtonLandscape}`]: {
        marginTop: "auto"
      }
    });
    const TimePickerToolbarSeparator = styled$1(PickersToolbarText, {
      name: "MuiTimePickerToolbar",
      slot: "Separator",
      overridesResolver: (props, styles2) => styles2.separator
    })({
      outline: 0,
      margin: "0 4px 0 2px",
      cursor: "default"
    });
    const TimePickerToolbarHourMinuteLabel = styled$1("div", {
      name: "MuiTimePickerToolbar",
      slot: "HourMinuteLabel",
      overridesResolver: (props, styles2) => [{
        [`&.${timePickerToolbarClasses.hourMinuteLabelLandscape}`]: styles2.hourMinuteLabelLandscape,
        [`&.${timePickerToolbarClasses.hourMinuteLabelReverse}`]: styles2.hourMinuteLabelReverse
      }, styles2.hourMinuteLabel]
    })(({
      theme,
      ownerState
    }) => _extends$1({
      display: "flex",
      justifyContent: "flex-end",
      alignItems: "flex-end"
    }, ownerState.isLandscape && {
      marginTop: "auto"
    }, theme.direction === "rtl" && {
      flexDirection: "row-reverse"
    }));
    const TimePickerToolbarAmPmSelection = styled$1("div", {
      name: "MuiTimePickerToolbar",
      slot: "AmPmSelection",
      overridesResolver: (props, styles2) => [{
        [`.${timePickerToolbarClasses.ampmLabel}`]: styles2.ampmLabel
      }, {
        [`&.${timePickerToolbarClasses.ampmLandscape}`]: styles2.ampmLandscape
      }, styles2.ampmSelection]
    })(({
      ownerState
    }) => _extends$1({
      display: "flex",
      flexDirection: "column",
      marginRight: "auto",
      marginLeft: 12
    }, ownerState.isLandscape && {
      margin: "4px 0 auto",
      flexDirection: "row",
      justifyContent: "space-around",
      flexBasis: "100%"
    }, {
      [`& .${timePickerToolbarClasses.ampmLabel}`]: {
        fontSize: 17
      }
    }));
    function TimePickerToolbar(inProps) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiTimePickerToolbar"
      });
      const {
        ampm,
        ampmInClock,
        parsedValue,
        isLandscape,
        isMobileKeyboardViewOpen,
        onChange,
        openView,
        setOpenView,
        toggleMobileKeyboardView,
        toolbarTitle: toolbarTitleProp,
        views,
        disabled,
        readOnly
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$7);
      const utils2 = useUtils();
      const localeText = useLocaleText();
      const toolbarTitle = toolbarTitleProp != null ? toolbarTitleProp : localeText.timePickerDefaultToolbarTitle;
      const theme = useTheme();
      const showAmPmControl = Boolean(ampm && !ampmInClock);
      const {
        meridiemMode,
        handleMeridiemChange
      } = useMeridiemMode(parsedValue, ampm, onChange);
      const formatHours = (time) => ampm ? utils2.format(time, "hours12h") : utils2.format(time, "hours24h");
      const ownerState = props;
      const classes = useUtilityClasses(_extends$1({}, ownerState, {
        theme
      }));
      const separator = /* @__PURE__ */ jsx(TimePickerToolbarSeparator, {
        tabIndex: -1,
        value: ":",
        variant: "h3",
        selected: false,
        className: classes.separator
      });
      return /* @__PURE__ */ jsxs(TimePickerToolbarRoot, _extends$1({
        viewType: "clock",
        landscapeDirection: "row",
        toolbarTitle,
        isLandscape,
        isMobileKeyboardViewOpen,
        toggleMobileKeyboardView,
        ownerState,
        className: classes.root
      }, other, {
        children: [/* @__PURE__ */ jsxs(TimePickerToolbarHourMinuteLabel, {
          className: classes.hourMinuteLabel,
          ownerState,
          children: [arrayIncludes(views, "hours") && /* @__PURE__ */ jsx(PickersToolbarButton, {
            tabIndex: -1,
            variant: "h3",
            onClick: () => setOpenView("hours"),
            selected: openView === "hours",
            value: parsedValue ? formatHours(parsedValue) : "--"
          }), arrayIncludes(views, ["hours", "minutes"]) && separator, arrayIncludes(views, "minutes") && /* @__PURE__ */ jsx(PickersToolbarButton, {
            tabIndex: -1,
            variant: "h3",
            onClick: () => setOpenView("minutes"),
            selected: openView === "minutes",
            value: parsedValue ? utils2.format(parsedValue, "minutes") : "--"
          }), arrayIncludes(views, ["minutes", "seconds"]) && separator, arrayIncludes(views, "seconds") && /* @__PURE__ */ jsx(PickersToolbarButton, {
            variant: "h3",
            onClick: () => setOpenView("seconds"),
            selected: openView === "seconds",
            value: parsedValue ? utils2.format(parsedValue, "seconds") : "--"
          })]
        }), showAmPmControl && /* @__PURE__ */ jsxs(TimePickerToolbarAmPmSelection, {
          className: classes.ampmSelection,
          ownerState,
          children: [/* @__PURE__ */ jsx(PickersToolbarButton, {
            disableRipple: true,
            variant: "subtitle2",
            selected: meridiemMode === "am",
            typographyClassName: classes.ampmLabel,
            value: utils2.getMeridiemText("am"),
            onClick: readOnly ? void 0 : () => handleMeridiemChange("am"),
            disabled
          }), /* @__PURE__ */ jsx(PickersToolbarButton, {
            disableRipple: true,
            variant: "subtitle2",
            selected: meridiemMode === "pm",
            typographyClassName: classes.ampmLabel,
            value: utils2.getMeridiemText("pm"),
            onClick: readOnly ? void 0 : () => handleMeridiemChange("pm"),
            disabled
          })]
        })]
      }));
    }
    const _excluded$6 = ["onChange", "PaperProps", "PopperProps", "ToolbarComponent", "TransitionComponent", "value", "components", "componentsProps"];
    const DesktopTimePicker = /* @__PURE__ */ react.exports.forwardRef(function DesktopTimePicker2(inProps, ref) {
      const props = useTimePickerDefaultizedProps(inProps, "MuiDesktopTimePicker");
      const validationError = useTimeValidation(props) !== null;
      const {
        pickerProps,
        inputProps,
        wrapperProps
      } = usePickerState(props, timePickerValueManager);
      const {
        PaperProps,
        PopperProps,
        ToolbarComponent = TimePickerToolbar,
        TransitionComponent,
        components,
        componentsProps
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$6);
      const DateInputProps = _extends$1({}, inputProps, other, {
        components,
        componentsProps,
        ref,
        validationError
      });
      return /* @__PURE__ */ jsx(DesktopWrapper, _extends$1({}, wrapperProps, {
        DateInputProps,
        KeyboardDateInputComponent: KeyboardDateInput,
        PopperProps,
        PaperProps,
        TransitionComponent,
        components,
        componentsProps,
        children: /* @__PURE__ */ jsx(CalendarOrClockPicker, _extends$1({}, pickerProps, {
          autoFocus: true,
          toolbarTitle: props.label || props.toolbarTitle,
          ToolbarComponent,
          DateInputProps,
          components,
          componentsProps
        }, other))
      }));
    });
    DesktopTimePicker.propTypes = {
      acceptRegex: propTypes.exports.instanceOf(RegExp),
      ampm: propTypes.exports.bool,
      ampmInClock: propTypes.exports.bool,
      children: propTypes.exports.node,
      className: propTypes.exports.string,
      closeOnSelect: propTypes.exports.bool,
      components: propTypes.exports.object,
      componentsProps: propTypes.exports.object,
      disabled: propTypes.exports.bool,
      disableIgnoringDatePartForTimeValidation: propTypes.exports.bool,
      disableMaskedInput: propTypes.exports.bool,
      disableOpenPicker: propTypes.exports.bool,
      getClockLabelText: propTypes.exports.func,
      getOpenDialogAriaText: propTypes.exports.func,
      ignoreInvalidInputs: propTypes.exports.bool,
      InputAdornmentProps: propTypes.exports.object,
      inputFormat: propTypes.exports.string,
      InputProps: propTypes.exports.object,
      inputRef: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.shape({
        current: propTypes.exports.object
      })]),
      label: propTypes.exports.node,
      mask: propTypes.exports.string,
      maxTime: propTypes.exports.any,
      minTime: propTypes.exports.any,
      minutesStep: propTypes.exports.number,
      onAccept: propTypes.exports.func,
      onChange: propTypes.exports.func.isRequired,
      onClose: propTypes.exports.func,
      onError: propTypes.exports.func,
      onOpen: propTypes.exports.func,
      onViewChange: propTypes.exports.func,
      open: propTypes.exports.bool,
      OpenPickerButtonProps: propTypes.exports.object,
      openTo: propTypes.exports.oneOf(["hours", "minutes", "seconds"]),
      orientation: propTypes.exports.oneOf(["landscape", "portrait"]),
      PaperProps: propTypes.exports.object,
      PopperProps: propTypes.exports.object,
      readOnly: propTypes.exports.bool,
      renderInput: propTypes.exports.func.isRequired,
      rifmFormatter: propTypes.exports.func,
      shouldDisableTime: propTypes.exports.func,
      showToolbar: propTypes.exports.bool,
      ToolbarComponent: propTypes.exports.elementType,
      toolbarTitle: propTypes.exports.node,
      TransitionComponent: propTypes.exports.elementType,
      value: propTypes.exports.any,
      views: propTypes.exports.arrayOf(propTypes.exports.oneOf(["hours", "minutes", "seconds"]).isRequired)
    };
    const _excluded$5 = ["ToolbarComponent", "value", "onChange", "components", "componentsProps"];
    const MobileTimePicker = /* @__PURE__ */ react.exports.forwardRef(function MobileTimePicker2(inProps, ref) {
      const props = useTimePickerDefaultizedProps(inProps, "MuiMobileTimePicker");
      const validationError = useTimeValidation(props) !== null;
      const {
        pickerProps,
        inputProps,
        wrapperProps
      } = usePickerState(props, timePickerValueManager);
      const {
        ToolbarComponent = TimePickerToolbar,
        components,
        componentsProps
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$5);
      const DateInputProps = _extends$1({}, inputProps, other, {
        components,
        componentsProps,
        ref,
        validationError
      });
      return /* @__PURE__ */ jsx(MobileWrapper, _extends$1({}, other, wrapperProps, {
        DateInputProps,
        PureDateInputComponent: PureDateInput,
        components,
        componentsProps,
        children: /* @__PURE__ */ jsx(CalendarOrClockPicker, _extends$1({}, pickerProps, {
          autoFocus: true,
          toolbarTitle: props.label || props.toolbarTitle,
          ToolbarComponent,
          DateInputProps,
          components,
          componentsProps
        }, other))
      }));
    });
    MobileTimePicker.propTypes = {
      acceptRegex: propTypes.exports.instanceOf(RegExp),
      ampm: propTypes.exports.bool,
      ampmInClock: propTypes.exports.bool,
      children: propTypes.exports.node,
      className: propTypes.exports.string,
      closeOnSelect: propTypes.exports.bool,
      components: propTypes.exports.object,
      componentsProps: propTypes.exports.object,
      DialogProps: propTypes.exports.object,
      disabled: propTypes.exports.bool,
      disableIgnoringDatePartForTimeValidation: propTypes.exports.bool,
      disableMaskedInput: propTypes.exports.bool,
      disableOpenPicker: propTypes.exports.bool,
      getClockLabelText: propTypes.exports.func,
      getOpenDialogAriaText: propTypes.exports.func,
      ignoreInvalidInputs: propTypes.exports.bool,
      InputAdornmentProps: propTypes.exports.object,
      inputFormat: propTypes.exports.string,
      InputProps: propTypes.exports.object,
      inputRef: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.shape({
        current: propTypes.exports.object
      })]),
      label: propTypes.exports.node,
      mask: propTypes.exports.string,
      maxTime: propTypes.exports.any,
      minTime: propTypes.exports.any,
      minutesStep: propTypes.exports.number,
      onAccept: propTypes.exports.func,
      onChange: propTypes.exports.func.isRequired,
      onClose: propTypes.exports.func,
      onError: propTypes.exports.func,
      onOpen: propTypes.exports.func,
      onViewChange: propTypes.exports.func,
      open: propTypes.exports.bool,
      OpenPickerButtonProps: propTypes.exports.object,
      openTo: propTypes.exports.oneOf(["hours", "minutes", "seconds"]),
      orientation: propTypes.exports.oneOf(["landscape", "portrait"]),
      readOnly: propTypes.exports.bool,
      renderInput: propTypes.exports.func.isRequired,
      rifmFormatter: propTypes.exports.func,
      shouldDisableTime: propTypes.exports.func,
      showToolbar: propTypes.exports.bool,
      ToolbarComponent: propTypes.exports.elementType,
      toolbarTitle: propTypes.exports.node,
      value: propTypes.exports.any,
      views: propTypes.exports.arrayOf(propTypes.exports.oneOf(["hours", "minutes", "seconds"]).isRequired)
    };
    const _excluded$4 = ["desktopModeMediaQuery", "DialogProps", "PopperProps", "TransitionComponent"];
    const TimePicker = /* @__PURE__ */ react.exports.forwardRef(function TimePicker2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiTimePicker"
      });
      const {
        desktopModeMediaQuery = "@media (pointer: fine)",
        DialogProps,
        PopperProps,
        TransitionComponent
      } = props, other = _objectWithoutPropertiesLoose$1(props, _excluded$4);
      const isDesktop = useMediaQuery(desktopModeMediaQuery, {
        defaultMatches: true
      });
      if (isDesktop) {
        return /* @__PURE__ */ jsx(DesktopTimePicker, _extends$1({
          ref,
          PopperProps,
          TransitionComponent
        }, other));
      }
      return /* @__PURE__ */ jsx(MobileTimePicker, _extends$1({
        ref,
        DialogProps
      }, other));
    });
    TimePicker.propTypes = {
      acceptRegex: propTypes.exports.instanceOf(RegExp),
      ampm: propTypes.exports.bool,
      ampmInClock: propTypes.exports.bool,
      children: propTypes.exports.node,
      className: propTypes.exports.string,
      closeOnSelect: propTypes.exports.bool,
      components: propTypes.exports.object,
      componentsProps: propTypes.exports.object,
      desktopModeMediaQuery: propTypes.exports.string,
      DialogProps: propTypes.exports.object,
      disabled: propTypes.exports.bool,
      disableIgnoringDatePartForTimeValidation: propTypes.exports.bool,
      disableMaskedInput: propTypes.exports.bool,
      disableOpenPicker: propTypes.exports.bool,
      getClockLabelText: propTypes.exports.func,
      getOpenDialogAriaText: propTypes.exports.func,
      ignoreInvalidInputs: propTypes.exports.bool,
      InputAdornmentProps: propTypes.exports.object,
      inputFormat: propTypes.exports.string,
      InputProps: propTypes.exports.object,
      inputRef: propTypes.exports.oneOfType([propTypes.exports.func, propTypes.exports.shape({
        current: propTypes.exports.object
      })]),
      label: propTypes.exports.node,
      mask: propTypes.exports.string,
      maxTime: propTypes.exports.any,
      minTime: propTypes.exports.any,
      minutesStep: propTypes.exports.number,
      onAccept: propTypes.exports.func,
      onChange: propTypes.exports.func.isRequired,
      onClose: propTypes.exports.func,
      onError: propTypes.exports.func,
      onOpen: propTypes.exports.func,
      onViewChange: propTypes.exports.func,
      open: propTypes.exports.bool,
      OpenPickerButtonProps: propTypes.exports.object,
      openTo: propTypes.exports.oneOf(["hours", "minutes", "seconds"]),
      orientation: propTypes.exports.oneOf(["landscape", "portrait"]),
      PaperProps: propTypes.exports.object,
      PopperProps: propTypes.exports.object,
      readOnly: propTypes.exports.bool,
      renderInput: propTypes.exports.func.isRequired,
      rifmFormatter: propTypes.exports.func,
      shouldDisableTime: propTypes.exports.func,
      showToolbar: propTypes.exports.bool,
      ToolbarComponent: propTypes.exports.elementType,
      toolbarTitle: propTypes.exports.node,
      TransitionComponent: propTypes.exports.elementType,
      value: propTypes.exports.any,
      views: propTypes.exports.arrayOf(propTypes.exports.oneOf(["hours", "minutes", "seconds"]).isRequired)
    };
    var _jsxFileName$h = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/mui/esm/widgets/value/MuiTime.js";
    var moment = Utils.moment;
    const MuiTimeWidget = function(props) {
      var value2 = props.value, setValue2 = props.setValue, use12Hours = props.use12Hours, readonly = props.readonly, placeholder = props.placeholder, timeFormat = props.timeFormat, valueFormat = props.valueFormat, customProps = props.customProps;
      var formatSingleValue = function formatSingleValue2(value3) {
        return value3 && value3.isValid() ? value3.format(valueFormat) : void 0;
      };
      var handleChange = function handleChange2(value3) {
        setValue2(formatSingleValue(value3));
      };
      var hasSeconds = timeFormat.indexOf(":ss") != -1;
      var timeValue = value2 ? moment(value2, timeFormat) : null;
      var renderInput = function renderInput2(params) {
        return /* @__PURE__ */ jsxDEV(TextField$1, {
          size: "small",
          variant: "standard",
          ...params
        }, void 0, false, {
          fileName: _jsxFileName$h,
          lineNumber: 26,
          columnNumber: 25
        }, this);
      };
      var desktopModeMediaQuery = "@media (pointer: fine), (pointer: none)";
      return /* @__PURE__ */ jsxDEV(FormControl$1, {
        children: /* @__PURE__ */ jsxDEV(TimePicker, {
          desktopModeMediaQuery,
          readOnly: readonly,
          disabled: readonly,
          ampm: !!use12Hours,
          toolbarPlaceholder: !readonly ? placeholder : "",
          inputFormat: timeFormat,
          value: timeValue || null,
          onChange: handleChange,
          views: hasSeconds ? ["hours", "minutes", "seconds"] : ["hours", "minutes"],
          renderInput,
          ...customProps
        }, void 0, false, {
          fileName: _jsxFileName$h,
          lineNumber: 32,
          columnNumber: 75
        }, this)
      }, void 0, false, {
        fileName: _jsxFileName$h,
        lineNumber: 32,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$g = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/mui/esm/widgets/value/MuiSelect.js";
    var mapListValues$1 = Utils.ListUtils.mapListValues;
    const MuiSelectWidget = function(_ref) {
      var listValues2 = _ref.listValues, value2 = _ref.value, setValue2 = _ref.setValue;
      _ref.allowCustomValues;
      var readonly = _ref.readonly, placeholder = _ref.placeholder, customProps = _ref.customProps;
      var renderOptions = function renderOptions2() {
        return mapListValues$1(listValues2, function(_ref2) {
          var title = _ref2.title, value3 = _ref2.value;
          return /* @__PURE__ */ jsxDEV(MenuItem$1, {
            value: value3,
            children: title
          }, value3, false, {
            fileName: _jsxFileName$g,
            lineNumber: 21,
            columnNumber: 27
          }, this);
        });
      };
      var onChange = function onChange2(e) {
        if (e.target.value === void 0)
          return;
        setValue2(e.target.value);
      };
      var renderValue = function renderValue2(selectedValue) {
        if (!readonly && selectedValue == null)
          return placeholder;
        return getListValueTitle(selectedValue);
      };
      var getListValueTitle = function getListValueTitle2(selectedValue) {
        return mapListValues$1(listValues2, function(_ref3) {
          var title = _ref3.title, value3 = _ref3.value;
          return value3 === selectedValue ? title : null;
        }).filter(function(v) {
          return v !== null;
        }).shift();
      };
      var hasValue2 = value2 != null;
      return /* @__PURE__ */ jsxDEV(FormControl$1, {
        children: /* @__PURE__ */ jsxDEV(Select$1, {
          variant: "standard",
          autoWidth: true,
          displayEmpty: true,
          placeholder: !readonly ? placeholder : "",
          onChange,
          value: hasValue2 ? value2 : "",
          disabled: readonly,
          readOnly: readonly,
          renderValue,
          size: "small",
          ...omit_1(customProps, ["showSearch", "input"]),
          children: renderOptions()
        }, void 0, false, {
          fileName: _jsxFileName$g,
          lineNumber: 45,
          columnNumber: 75
        }, this)
      }, void 0, false, {
        fileName: _jsxFileName$g,
        lineNumber: 45,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$f = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/mui/esm/widgets/value/MuiNumber.js";
    const MuiNumberWidget = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var readonly = props.readonly, min2 = props.min, max2 = props.max, step = props.step, placeholder = props.placeholder, customProps = props.customProps;
      var onChange = function onChange2(e) {
        var val = e.target.value;
        if (val === "" || val === null)
          val = void 0;
        else
          val = Number(val);
        setValue2(val);
      };
      var numberValue = value2 == void 0 ? "" : value2;
      return /* @__PURE__ */ jsxDEV(FormControl$1, {
        children: /* @__PURE__ */ jsxDEV(TextField$1, {
          variant: "standard",
          type: "number",
          value: numberValue,
          placeholder: !readonly ? placeholder : "",
          InputProps: {
            readOnly: readonly
          },
          inputProps: {
            min: min2,
            max: max2,
            step
          },
          disabled: readonly,
          onChange,
          size: "small",
          ...customProps
        }, void 0, false, {
          fileName: _jsxFileName$f,
          lineNumber: 21,
          columnNumber: 75
        }, this)
      }, void 0, false, {
        fileName: _jsxFileName$f,
        lineNumber: 21,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$e = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/mui/esm/widgets/value/MuiSlider.js";
    var _excluded$3 = ["width"];
    const MuiSliderWidget = function(props) {
      var config2 = props.config, placeholder = props.placeholder, customProps = props.customProps, value2 = props.value, setValue2 = props.setValue, min2 = props.min, max2 = props.max, step = props.step, marks = props.marks, readonly = props.readonly;
      var defaultSliderWidth = config2.settings.defaultSliderWidth;
      var handleSliderChange = react.exports.useCallback(function(_e, newValue) {
        setValue2(newValue);
      }, []);
      var handleInputChange = function handleInputChange2(e) {
        var val = e.target.value;
        if (val === "" || val === null)
          val = void 0;
        else
          val = Number(val);
        setValue2(val);
      };
      var handleInputBlur = function handleInputBlur2() {
        if (value2 < min2) {
          setValue2(min2);
        } else if (value2 > max2) {
          setValue2(max2);
        }
      };
      var _ref = customProps || {}, width2 = _ref.width, rest = _objectWithoutProperties(_ref, _excluded$3);
      var customInputProps = rest.input || {};
      var customSliderProps = rest.slider || rest;
      var inputValue = typeof value2 === "number" ? value2 : "";
      var sliderValue = typeof value2 === "number" ? value2 : null;
      var muiMarks = react.exports.useMemo(function() {
        return marks ? Object.keys(marks).map(function(v) {
          return {
            value: Number(v),
            label: _typeof$1(marks[v]) === "object" || typeof marks[v] === "undefined" ? marks[v] : /* @__PURE__ */ jsxDEV("p", {
              children: marks[v]
            }, void 0, false, {
              fileName: _jsxFileName$e,
              lineNumber: 53,
              columnNumber: 108
            }, this)
          };
        }) : false;
      }, [marks]);
      var InputCmp = /* @__PURE__ */ jsxDEV(TextField$1, {
        variant: "standard",
        type: "number",
        value: inputValue,
        placeholder,
        InputProps: {
          readOnly: readonly
        },
        inputProps: {
          min: min2,
          max: max2,
          step
        },
        disabled: readonly,
        onChange: handleInputChange,
        onBlur: handleInputBlur,
        size: "small",
        ...customInputProps
      }, void 0, false, {
        fileName: _jsxFileName$e,
        lineNumber: 57,
        columnNumber: 31
      }, this);
      var SliderCmp = /* @__PURE__ */ jsxDEV(Slider$1, {
        value: sliderValue,
        onChange: handleSliderChange,
        disabled: readonly,
        min: min2,
        max: max2,
        step,
        marks: muiMarks,
        valueLabelDisplay: "auto",
        size: "small",
        ...customSliderProps
      }, void 0, false, {
        fileName: _jsxFileName$e,
        lineNumber: 75,
        columnNumber: 32
      }, this);
      var stylesWrapper = {
        display: "inline-flex",
        alignItems: "center",
        flexWrap: "wrap"
      };
      var stylesInputWrapper = {
        marginLeft: "5px"
      };
      var stylesSliderWrapper = {
        marginLeft: "5px",
        paddingLeft: "12px",
        marginBottom: muiMarks && "-16px",
        width: width2 || defaultSliderWidth
      };
      return /* @__PURE__ */ jsxDEV(FormControl$1, {
        children: /* @__PURE__ */ jsxDEV("div", {
          style: stylesWrapper,
          children: [/* @__PURE__ */ jsxDEV("div", {
            style: stylesInputWrapper,
            children: InputCmp
          }, void 0, false, {
            fileName: _jsxFileName$e,
            lineNumber: 102,
            columnNumber: 19
          }, this), /* @__PURE__ */ jsxDEV("div", {
            style: stylesSliderWrapper,
            children: SliderCmp
          }, void 0, false, {
            fileName: _jsxFileName$e,
            lineNumber: 104,
            columnNumber: 30
          }, this)]
        }, void 0, true, {
          fileName: _jsxFileName$e,
          lineNumber: 100,
          columnNumber: 75
        }, this)
      }, void 0, false, {
        fileName: _jsxFileName$e,
        lineNumber: 100,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$d = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/mui/esm/widgets/value/MuiRange.js";
    var _excluded$2 = ["width"];
    const MuiRangeWidget = function(props) {
      var config2 = props.config, placeholders = props.placeholders, customProps = props.customProps, value2 = props.value, setValue2 = props.setValue, min2 = props.min, max2 = props.max, step = props.step, marks = props.marks, readonly = props.readonly, textSeparators = props.textSeparators;
      var defaultSliderWidth = config2.settings.defaultSliderWidth;
      react.exports.useEffect(function() {
        var _ref = props.value || [void 0, void 0], _ref2 = _slicedToArray(_ref, 2), valueFrom2 = _ref2[0], valueTo2 = _ref2[1];
        if (props.value && (valueFrom2 == void 0 || valueTo2 == void 0)) {
          setTimeout(function() {
            var oneValue = valueFrom2 || valueTo2;
            var value3 = [oneValue, oneValue];
            setValue2(value3);
          }, 1);
        }
      }, []);
      var handleSliderChange = function handleSliderChange2(_e, newValues) {
        setValue2(newValues);
      };
      var handleInputChangeFrom = function handleInputChangeFrom2(e) {
        var valueFrom2 = e.target.value;
        if (valueFrom2 === "" || valueFrom2 == null)
          valueFrom2 = void 0;
        else
          valueFrom2 = Number(valueFrom2);
        var value3 = props.value ? _toConsumableArray(props.value) : [void 0, void 0];
        value3[0] = valueFrom2;
        setValue2(value3);
      };
      var handleInputChangeTo = function handleInputChangeTo2(e) {
        var valueTo2 = e.target.value;
        if (valueTo2 === "" || valueTo2 == null)
          valueTo2 = void 0;
        else
          valueTo2 = Number(valueTo2);
        var value3 = props.value ? _toConsumableArray(props.value) : [void 0, void 0];
        value3[1] = valueTo2;
        setValue2(value3);
      };
      var handleInputBlur = function handleInputBlur2() {
        if (!value2)
          return;
        if (value2[0] < min2) {
          setValue2([min2, value2[1]]);
        } else if (value2[1] > max2) {
          setValue2([value2[0], max2]);
        }
      };
      var _ref3 = customProps || {}, width2 = _ref3.width, rest = _objectWithoutProperties(_ref3, _excluded$2);
      var customInputProps = rest.input || {};
      var customSliderProps = rest.slider || rest;
      var muiMarks = marks ? Object.keys(marks).map(function(v) {
        return {
          value: Number(v),
          label: _typeof$1(marks[v]) === "object" || typeof marks[v] === "undefined" ? marks[v] : /* @__PURE__ */ jsxDEV("p", {
            children: marks[v]
          }, void 0, false, {
            fileName: _jsxFileName$d,
            lineNumber: 76,
            columnNumber: 106
          }, this)
        };
      }) : false;
      var sliderValue = value2 ? _toConsumableArray(value2) : [void 0, void 0];
      var _sliderValue = _slicedToArray(sliderValue, 2), valueFrom = _sliderValue[0], valueTo = _sliderValue[1];
      if (valueFrom == void 0) {
        valueFrom = "";
        sliderValue[0] = 0;
      }
      if (valueTo == void 0) {
        valueTo = "";
        sliderValue[1] = 0;
      }
      var FromInputCmp = /* @__PURE__ */ jsxDEV(TextField$1, {
        variant: "standard",
        type: "number",
        value: valueFrom,
        placeholder: placeholders[0],
        InputProps: {
          readOnly: readonly
        },
        inputProps: {
          min: min2,
          max: max2,
          step
        },
        disabled: readonly,
        onChange: handleInputChangeFrom,
        onBlur: handleInputBlur,
        size: "small",
        ...customInputProps
      }, void 0, false, {
        fileName: _jsxFileName$d,
        lineNumber: 94,
        columnNumber: 35
      }, this);
      var ToInputCmp = /* @__PURE__ */ jsxDEV(TextField$1, {
        variant: "standard",
        type: "number",
        value: valueTo,
        placeholder: placeholders[1],
        InputProps: {
          readOnly: readonly
        },
        inputProps: {
          min: min2,
          max: max2,
          step
        },
        disabled: readonly,
        onChange: handleInputChangeTo,
        onBlur: handleInputBlur,
        size: "small",
        ...customInputProps
      }, void 0, false, {
        fileName: _jsxFileName$d,
        lineNumber: 112,
        columnNumber: 33
      }, this);
      var SliderCmp = /* @__PURE__ */ jsxDEV(Slider$1, {
        value: sliderValue,
        onChange: handleSliderChange,
        disabled: readonly,
        min: min2,
        max: max2,
        step,
        marks: muiMarks,
        valueLabelDisplay: "auto",
        size: "small",
        ...customSliderProps
      }, void 0, false, {
        fileName: _jsxFileName$d,
        lineNumber: 130,
        columnNumber: 32
      }, this);
      var stylesWrapper = {
        display: "inline-flex",
        flexWrap: "wrap"
      };
      var stylesInputWrapper = {
        marginLeft: "5px"
      };
      var stylesSliderWrapper = {
        marginLeft: "5px",
        paddingLeft: "12px",
        marginBottom: muiMarks && "-16px",
        width: width2 || defaultSliderWidth
      };
      return /* @__PURE__ */ jsxDEV(FormControl$1, {
        children: /* @__PURE__ */ jsxDEV("div", {
          style: stylesWrapper,
          children: [/* @__PURE__ */ jsxDEV("div", {
            style: stylesInputWrapper,
            children: FromInputCmp
          }, void 0, false, {
            fileName: _jsxFileName$d,
            lineNumber: 156,
            columnNumber: 19
          }, this), /* @__PURE__ */ jsxDEV("div", {
            className: "widget--sep",
            children: /* @__PURE__ */ jsxDEV("span", {
              children: textSeparators[1]
            }, void 0, false, {
              fileName: _jsxFileName$d,
              lineNumber: 160,
              columnNumber: 19
            }, this)
          }, void 0, false, {
            fileName: _jsxFileName$d,
            lineNumber: 158,
            columnNumber: 34
          }, this), /* @__PURE__ */ jsxDEV("div", {
            style: stylesInputWrapper,
            children: ToInputCmp
          }, void 0, false, {
            fileName: _jsxFileName$d,
            lineNumber: 160,
            columnNumber: 87
          }, this), /* @__PURE__ */ jsxDEV("div", {
            style: stylesSliderWrapper,
            children: SliderCmp
          }, void 0, false, {
            fileName: _jsxFileName$d,
            lineNumber: 162,
            columnNumber: 32
          }, this)]
        }, void 0, true, {
          fileName: _jsxFileName$d,
          lineNumber: 154,
          columnNumber: 75
        }, this)
      }, void 0, false, {
        fileName: _jsxFileName$d,
        lineNumber: 154,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$c = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/mui/esm/widgets/value/MuiBoolean.js";
    const MuiBooleanWidget = function(props) {
      var customProps = props.customProps, value2 = props.value, setValue2 = props.setValue, labelYes = props.labelYes, labelNo = props.labelNo, readonly = props.readonly;
      var onChange = function onChange2() {
        setValue2(!value2);
      };
      return /* @__PURE__ */ jsxDEV(FormControl$1, {
        children: /* @__PURE__ */ jsxDEV(Typography$1, {
          component: "div",
          children: /* @__PURE__ */ jsxDEV(Grid$1, {
            component: "label",
            container: true,
            alignItems: "center",
            spacing: 0,
            children: [/* @__PURE__ */ jsxDEV(Grid$1, {
              item: true,
              component: "span",
              children: labelNo
            }, void 0, false, {
              fileName: _jsxFileName$c,
              lineNumber: 24,
              columnNumber: 19
            }, this), /* @__PURE__ */ jsxDEV(Grid$1, {
              item: true,
              component: "span",
              children: /* @__PURE__ */ jsxDEV(Switch$1, {
                checked: !!value2,
                onChange,
                disabled: readonly,
                ...customProps
              }, void 0, false, {
                fileName: _jsxFileName$c,
                lineNumber: 30,
                columnNumber: 19
              }, this)
            }, void 0, false, {
              fileName: _jsxFileName$c,
              lineNumber: 27,
              columnNumber: 29
            }, this), /* @__PURE__ */ jsxDEV(Grid$1, {
              item: true,
              component: "span",
              children: labelYes
            }, void 0, false, {
              fileName: _jsxFileName$c,
              lineNumber: 34,
              columnNumber: 35
            }, this)]
          }, void 0, true, {
            fileName: _jsxFileName$c,
            lineNumber: 19,
            columnNumber: 19
          }, this)
        }, void 0, false, {
          fileName: _jsxFileName$c,
          lineNumber: 17,
          columnNumber: 75
        }, this)
      }, void 0, false, {
        fileName: _jsxFileName$c,
        lineNumber: 17,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$b = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/mui/esm/widgets/value/MuiMultiSelect.js";
    var mapListValues = Utils.ListUtils.mapListValues;
    const MuiMultiSelectWidget = function(_ref) {
      var listValues2 = _ref.listValues, value2 = _ref.value, setValue2 = _ref.setValue;
      _ref.allowCustomValues;
      var readonly = _ref.readonly, placeholder = _ref.placeholder, customProps = _ref.customProps;
      var renderOptions = function renderOptions2(selectedValues) {
        return mapListValues(listValues2, function(_ref2) {
          var title = _ref2.title, value3 = _ref2.value;
          return /* @__PURE__ */ jsxDEV(MenuItem$1, {
            value: value3,
            children: [/* @__PURE__ */ jsxDEV(Checkbox$1, {
              checked: selectedValues.indexOf(value3) > -1
            }, void 0, false, {
              fileName: _jsxFileName$b,
              lineNumber: 26,
              columnNumber: 23
            }, this), /* @__PURE__ */ jsxDEV(ListItemText$1, {
              primary: title
            }, void 0, false, {
              fileName: _jsxFileName$b,
              lineNumber: 28,
              columnNumber: 24
            }, this)]
          }, value3, true, {
            fileName: _jsxFileName$b,
            lineNumber: 23,
            columnNumber: 27
          }, this);
        });
      };
      var renderValue = function renderValue2(selectedValues) {
        if (!readonly && !selectedValues.length)
          return placeholder;
        var selectedTitles = mapListValues(listValues2, function(_ref3) {
          var title = _ref3.title, value3 = _ref3.value;
          return selectedValues.indexOf(value3) > -1 ? title : null;
        }).filter(function(v) {
          return v !== null;
        });
        return selectedTitles.join(", ");
      };
      var hasValue2 = value2 != null && value2.length > 0;
      var onChange = function onChange2(e) {
        if (e.target.value === void 0)
          return;
        setValue2(e.target.value);
      };
      return /* @__PURE__ */ jsxDEV(FormControl$1, {
        children: /* @__PURE__ */ jsxDEV(Select$1, {
          multiple: true,
          variant: "standard",
          autoWidth: true,
          displayEmpty: true,
          label: !readonly ? placeholder : "",
          onChange,
          value: hasValue2 ? value2 : [],
          disabled: readonly,
          readOnly: readonly,
          renderValue,
          size: "small",
          ...omit_1(customProps, ["showSearch", "input", "showCheckboxes"]),
          children: renderOptions(hasValue2 ? value2 : [])
        }, void 0, false, {
          fileName: _jsxFileName$b,
          lineNumber: 49,
          columnNumber: 75
        }, this)
      }, void 0, false, {
        fileName: _jsxFileName$b,
        lineNumber: 49,
        columnNumber: 23
      }, this);
    };
    var Check = {};
    var interopRequireDefault = { exports: {} };
    (function(module2) {
      function _interopRequireDefault2(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      module2.exports = _interopRequireDefault2, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    })(interopRequireDefault);
    var createSvgIcon = {};
    const require$$0 = /* @__PURE__ */ getAugmentedNamespace(utils);
    var hasRequiredCreateSvgIcon;
    function requireCreateSvgIcon() {
      if (hasRequiredCreateSvgIcon)
        return createSvgIcon;
      hasRequiredCreateSvgIcon = 1;
      (function(exports2) {
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        Object.defineProperty(exports2, "default", {
          enumerable: true,
          get: function() {
            return _utils.createSvgIcon;
          }
        });
        var _utils = require$$0;
      })(createSvgIcon);
      return createSvgIcon;
    }
    const require$$2 = /* @__PURE__ */ getAugmentedNamespace(jsxRuntime);
    var _interopRequireDefault$5 = interopRequireDefault.exports;
    Object.defineProperty(Check, "__esModule", {
      value: true
    });
    var default_1$5 = Check.default = void 0;
    var _createSvgIcon$5 = _interopRequireDefault$5(requireCreateSvgIcon());
    var _jsxRuntime$5 = require$$2;
    var _default$5 = (0, _createSvgIcon$5.default)(/* @__PURE__ */ (0, _jsxRuntime$5.jsx)("path", {
      d: "M9 16.17 4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"
    }), "Check");
    default_1$5 = Check.default = _default$5;
    var _jsxFileName$a = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/mui/esm/widgets/value/MuiAutocomplete.js";
    var _excluded$1 = ["width"];
    function ownKeys$2(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$2(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var useListValuesAutocomplete = useListValuesAutocomplete$1;
    var defaultFilterOptions = createFilterOptions();
    var emptyArray = [];
    const MuiAutocompleteWidget = function(props) {
      var allowCustomValues = props.allowCustomValues, multiple = props.multiple, selectedValue = props.value, customProps = props.customProps, readonly = props.readonly, config2 = props.config, groupBy = props.groupBy, filterOptionsConfig2 = props.filterOptionsConfig;
      var filterOptionsFn = filterOptionsConfig2 ? createFilterOptions(filterOptionsConfig2) : defaultFilterOptions;
      var _useListValuesAutocom = useListValuesAutocomplete(props, {
        debounceTimeout: 100,
        multiple,
        uif: "mui"
      }), open = _useListValuesAutocom.open, onOpen = _useListValuesAutocom.onOpen, onClose = _useListValuesAutocom.onClose, onChange = _useListValuesAutocom.onChange, onInputChange = _useListValuesAutocom.onInputChange, inputValue = _useListValuesAutocom.inputValue, options = _useListValuesAutocom.options, isInitialLoading = _useListValuesAutocom.isInitialLoading, isLoading = _useListValuesAutocom.isLoading, aPlaceholder = _useListValuesAutocom.aPlaceholder, extendOptions = _useListValuesAutocom.extendOptions, getOptionDisabled = _useListValuesAutocom.getOptionDisabled, getOptionIsCustom = _useListValuesAutocom.getOptionIsCustom, getOptionLabel = _useListValuesAutocom.getOptionLabel, selectedListValue = _useListValuesAutocom.selectedListValue;
      var _config$settings = config2.settings, defaultSelectWidth = _config$settings.defaultSelectWidth, defaultSearchWidth = _config$settings.defaultSearchWidth;
      var _ref = customProps || {}, width2 = _ref.width, rest = _objectWithoutProperties(_ref, _excluded$1);
      var customInputProps = rest.input || {};
      customInputProps.width || defaultSearchWidth;
      customInputProps = omit_1(customInputProps, ["width"]);
      var customAutocompleteProps = omit_1(rest, ["showSearch", "showCheckboxes"]);
      var fullWidth = true;
      var minWidth2 = width2 || defaultSelectWidth;
      var style2 = {
        width: multiple ? void 0 : minWidth2,
        minWidth: minWidth2
      };
      var placeholder = !readonly ? aPlaceholder : "";
      var hasValue2 = selectedValue != null;
      var value2 = hasValue2 ? selectedValue : multiple ? emptyArray : null;
      var filterOptions = function filterOptions2(options2, params) {
        var filtered = filterOptionsFn(options2, params);
        var extended = extendOptions(filtered);
        return extended;
      };
      var renderInput = function renderInput2(params) {
        var _selectedListValue$ti;
        var shouldRenderSelected = !multiple && !open;
        var selectedTitle = (_selectedListValue$ti = selectedListValue === null || selectedListValue === void 0 ? void 0 : selectedListValue.title) !== null && _selectedListValue$ti !== void 0 ? _selectedListValue$ti : "";
        var shouldHide = multiple && !open;
        var value3 = shouldRenderSelected ? selectedTitle : shouldHide ? "" : inputValue !== null && inputValue !== void 0 ? inputValue : "";
        return /* @__PURE__ */ jsxDEV(TextField$1, {
          variant: "standard",
          ...params,
          inputProps: _objectSpread$2(_objectSpread$2({}, params.inputProps), {}, {
            value: value3
          }),
          InputProps: _objectSpread$2(_objectSpread$2({}, params.InputProps), {}, {
            readOnly: readonly,
            endAdornment: /* @__PURE__ */ jsxDEV(Fragment, {
              children: [isLoading ? /* @__PURE__ */ jsxDEV(CircularProgress$1, {
                color: "inherit",
                size: 20
              }, void 0, false, {
                fileName: _jsxFileName$a,
                lineNumber: 99,
                columnNumber: 103
              }, this) : null, params.InputProps.endAdornment]
            }, void 0, true)
          }),
          disabled: readonly,
          placeholder,
          ...customInputProps
        }, void 0, false, {
          fileName: _jsxFileName$a,
          lineNumber: 91,
          columnNumber: 25
        }, this);
      };
      var renderTags = function renderTags2(value3, getTagProps) {
        return value3.map(function(option, index) {
          return /* @__PURE__ */ jsxDEV(Chip$1, {
            label: getOptionLabel(option),
            size: "small",
            variant: getOptionIsCustom(option) ? "outlined" : "filled",
            ...getTagProps({
              index
            })
          }, option.value, false, {
            fileName: _jsxFileName$a,
            lineNumber: 111,
            columnNumber: 27
          }, this);
        });
      };
      var isOptionEqualToValue = function isOptionEqualToValue2(option, value3) {
        return (option === null || option === void 0 ? void 0 : option.value) == value3;
      };
      var renderOption = function renderOption2(props2, option) {
        var title = option.title, renderTitle = option.renderTitle, value3 = option.value, isHidden = option.isHidden;
        var isSelected = multiple ? (selectedValue || []).includes(value3) : selectedValue == value3;
        var className = getOptionIsCustom(option) ? "customSelectOption" : void 0;
        var titleSpan = /* @__PURE__ */ jsxDEV("span", {
          className,
          children: renderTitle || title
        }, void 0, false, {
          fileName: _jsxFileName$a,
          lineNumber: 131,
          columnNumber: 34
        }, this);
        if (isHidden)
          return null;
        if (option.specialValue) {
          return /* @__PURE__ */ jsxDEV("div", {
            ...props2,
            children: renderTitle || title
          }, void 0, false, {
            fileName: _jsxFileName$a,
            lineNumber: 136,
            columnNumber: 27
          }, this);
        } else if (multiple) {
          return /* @__PURE__ */ jsxDEV(MenuItem$1, {
            ...props2,
            size: "small",
            selected: isSelected,
            children: [!isSelected && /* @__PURE__ */ jsxDEV(ListItemText$1, {
              inset: true,
              children: titleSpan
            }, void 0, false, {
              fileName: _jsxFileName$a,
              lineNumber: 141,
              columnNumber: 39
            }, this), isSelected && /* @__PURE__ */ jsxDEV(Fragment, {
              children: [/* @__PURE__ */ jsxDEV(ListItemIcon$1, {
                children: /* @__PURE__ */ jsxDEV(default_1$5, {}, void 0, false, {
                  fileName: _jsxFileName$a,
                  lineNumber: 143,
                  columnNumber: 157
                }, this)
              }, void 0, false, {
                fileName: _jsxFileName$a,
                lineNumber: 143,
                columnNumber: 104
              }, this), titleSpan]
            }, void 0, true)]
          }, void 0, true, {
            fileName: _jsxFileName$a,
            lineNumber: 138,
            columnNumber: 27
          }, this);
        } else {
          return /* @__PURE__ */ jsxDEV("div", {
            ...props2,
            children: titleSpan
          }, void 0, false, {
            fileName: _jsxFileName$a,
            lineNumber: 145,
            columnNumber: 27
          }, this);
        }
      };
      return /* @__PURE__ */ jsxDEV(FormControl$1, {
        fullWidth,
        children: /* @__PURE__ */ jsxDEV(Autocomplete$1, {
          disableCloseOnSelect: multiple,
          fullWidth,
          multiple,
          style: style2,
          freeSolo: allowCustomValues,
          loading: isInitialLoading,
          open,
          onOpen,
          onClose,
          inputValue,
          onInputChange,
          label: placeholder,
          onChange,
          value: value2,
          disabled: readonly,
          readOnly: readonly,
          options,
          groupBy,
          getOptionLabel,
          getOptionDisabled,
          renderInput,
          renderTags,
          renderOption,
          filterOptions,
          isOptionEqualToValue,
          size: "small",
          ...customAutocompleteProps
        }, void 0, false, {
          fileName: _jsxFileName$a,
          lineNumber: 150,
          columnNumber: 19
        }, this)
      }, void 0, false, {
        fileName: _jsxFileName$a,
        lineNumber: 148,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$9 = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/mui/esm/widgets/core/MuiFieldSelect.js";
    const MuiFieldSelect = function(_ref) {
      var items = _ref.items, setField2 = _ref.setField, selectedKey = _ref.selectedKey, readonly = _ref.readonly, placeholder = _ref.placeholder;
      var renderOptions = function renderOptions2(fields) {
        var level = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
        return Object.keys(fields).map(function(fieldKey) {
          var field = fields[fieldKey];
          var items2 = field.items, path = field.path, label = field.label, disabled = field.disabled;
          var prefix2 = "\xA0\xA0".repeat(level);
          if (items2) {
            return [
              /* @__PURE__ */ jsxDEV(ListSubheader$1, {
                disabled,
                disableSticky: true,
                children: [prefix2 && /* @__PURE__ */ jsxDEV("span", {
                  children: prefix2
                }, void 0, false, {
                  fileName: _jsxFileName$9,
                  lineNumber: 26,
                  columnNumber: 35
                }, this), label]
              }, path, true, {
                fileName: _jsxFileName$9,
                lineNumber: 22,
                columnNumber: 30
              }, this),
              renderOptions2(items2, level + 1)
            ];
          } else {
            return /* @__PURE__ */ jsxDEV(MenuItem$1, {
              disabled,
              value: path,
              children: [prefix2 && /* @__PURE__ */ jsxDEV("span", {
                children: prefix2
              }, void 0, false, {
                fileName: _jsxFileName$9,
                lineNumber: 32,
                columnNumber: 35
              }, this), label]
            }, path, true, {
              fileName: _jsxFileName$9,
              lineNumber: 28,
              columnNumber: 29
            }, this);
          }
        });
      };
      var onChange = function onChange2(e) {
        if (e.target.value === void 0)
          return;
        setField2(e.target.value);
      };
      var renderValue = function renderValue2(selectedValue) {
        if (!readonly && !selectedValue)
          return placeholder;
        var findLabel = function findLabel2(fields) {
          return fields.map(function(field) {
            if (!field.items)
              return field.path === selectedValue ? field.label : null;
            return findLabel2(field.items);
          });
        };
        return findLabel(items).filter(function(v) {
          if (Array.isArray(v)) {
            return v.some(function(value2) {
              return value2 !== null;
            });
          } else {
            return v !== null;
          }
        }).pop();
      };
      var hasValue2 = selectedKey != null;
      return /* @__PURE__ */ jsxDEV(FormControl$1, {
        children: /* @__PURE__ */ jsxDEV(Select$1, {
          variant: "standard",
          autoWidth: true,
          displayEmpty: true,
          placeholder,
          onChange,
          value: hasValue2 ? selectedKey : "",
          disabled: readonly,
          renderValue,
          size: "small",
          children: renderOptions(items)
        }, void 0, false, {
          fileName: _jsxFileName$9,
          lineNumber: 59,
          columnNumber: 75
        }, this)
      }, void 0, false, {
        fileName: _jsxFileName$9,
        lineNumber: 59,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$8 = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/mui/esm/widgets/core/MuiFieldAutocomplete.js";
    var _excluded = ["items", "selectedKey", "setField"];
    function ownKeys$1(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$1(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$1(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var itemsToListValues = function itemsToListValues2(items) {
      var level = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      return items.map(function(item) {
        var items2 = item.items, path = item.path, label = item.label, disabled = item.disabled, grouplabel = item.grouplabel;
        var prefix2 = "\xA0\xA0".repeat(level);
        if (items2) {
          return itemsToListValues2(items2, level + 1);
        } else {
          return {
            title: label,
            renderTitle: prefix2 + label,
            value: path,
            disabled,
            groupTitle: level > 0 ? prefix2 + grouplabel : null
          };
        }
      }).flat(Infinity);
    };
    var filterOptionsConfig = {
      stringify: function stringify2(option) {
        var keysForFilter = ["title", "value", "grouplabel", "label"];
        var valueForFilter = keysForFilter.map(function(k) {
          return typeof option[k] == "string" ? option[k] : "";
        }).join("\0");
        return valueForFilter;
      }
    };
    var fieldAdapter = function fieldAdapter2(_ref) {
      var items = _ref.items, selectedKey = _ref.selectedKey, setField2 = _ref.setField, rest = _objectWithoutProperties(_ref, _excluded);
      var listValues2 = itemsToListValues(items);
      var groupBy = function groupBy2(option) {
        return option.groupTitle;
      };
      var value2 = selectedKey;
      var setValue2 = function setValue3(value3, _asyncValues) {
        if (!value3)
          return void 0;
        return setField2(value3);
      };
      return _objectSpread$1(_objectSpread$1({}, rest), {}, {
        listValues: listValues2,
        setValue: setValue2,
        groupBy,
        filterOptionsConfig,
        allowCustomValues: false,
        multiple: false,
        value: value2
      });
    };
    const MuiFieldAutocomplete = function(props) {
      return /* @__PURE__ */ jsxDEV(MuiAutocompleteWidget, {
        ...fieldAdapter(props)
      }, void 0, false, {
        fileName: _jsxFileName$8,
        lineNumber: 64,
        columnNumber: 23
      }, this);
    };
    var Delete = {};
    var _interopRequireDefault$4 = interopRequireDefault.exports;
    Object.defineProperty(Delete, "__esModule", {
      value: true
    });
    var default_1$4 = Delete.default = void 0;
    var _createSvgIcon$4 = _interopRequireDefault$4(requireCreateSvgIcon());
    var _jsxRuntime$4 = require$$2;
    var _default$4 = (0, _createSvgIcon$4.default)(/* @__PURE__ */ (0, _jsxRuntime$4.jsx)("path", {
      d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
    }), "Delete");
    default_1$4 = Delete.default = _default$4;
    var Add = {};
    var _interopRequireDefault$3 = interopRequireDefault.exports;
    Object.defineProperty(Add, "__esModule", {
      value: true
    });
    var default_1$3 = Add.default = void 0;
    var _createSvgIcon$3 = _interopRequireDefault$3(requireCreateSvgIcon());
    var _jsxRuntime$3 = require$$2;
    var _default$3 = (0, _createSvgIcon$3.default)(/* @__PURE__ */ (0, _jsxRuntime$3.jsx)("path", {
      d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
    }), "Add");
    default_1$3 = Add.default = _default$3;
    var _jsxFileName$7 = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/mui/esm/widgets/core/MuiButton.js";
    const MuiButton = function(_ref) {
      var type = _ref.type, label = _ref.label, onClick = _ref.onClick, readonly = _ref.readonly;
      _ref.config;
      var hideLabelsFor = {
        "addRuleGroup": true,
        "addRuleGroupExt": true
      };
      var typeToIcon = {
        "delGroup": /* @__PURE__ */ jsxDEV(default_1$4, {}, void 0, false, {
          fileName: _jsxFileName$7,
          lineNumber: 17,
          columnNumber: 30
        }, this),
        "delRuleGroup": /* @__PURE__ */ jsxDEV(default_1$4, {}, void 0, false, {
          fileName: _jsxFileName$7,
          lineNumber: 18,
          columnNumber: 34
        }, this),
        "delRule": /* @__PURE__ */ jsxDEV(default_1$4, {}, void 0, false, {
          fileName: _jsxFileName$7,
          lineNumber: 19,
          columnNumber: 29
        }, this),
        "addRule": /* @__PURE__ */ jsxDEV(default_1$3, {}, void 0, false, {
          fileName: _jsxFileName$7,
          lineNumber: 20,
          columnNumber: 29
        }, this),
        "addGroup": /* @__PURE__ */ jsxDEV(default_1$3, {}, void 0, false, {
          fileName: _jsxFileName$7,
          lineNumber: 21,
          columnNumber: 30
        }, this),
        "addRuleGroupExt": /* @__PURE__ */ jsxDEV(default_1$3, {}, void 0, false, {
          fileName: _jsxFileName$7,
          lineNumber: 22,
          columnNumber: 37
        }, this),
        "addRuleGroup": /* @__PURE__ */ jsxDEV(default_1$3, {}, void 0, false, {
          fileName: _jsxFileName$7,
          lineNumber: 23,
          columnNumber: 34
        }, this)
      };
      var typeToColor = {
        "addRule": "neutral",
        "addGroup": "primary",
        "delGroup": "secondary",
        "delRuleGroup": "secondary",
        "delRule": "secondary"
      };
      if (!label || hideLabelsFor[type]) {
        return /* @__PURE__ */ jsxDEV(IconButton$1, {
          size: "small",
          disabled: readonly,
          onClick,
          color: typeToColor[type],
          children: typeToIcon[type]
        }, void 0, false, {
          fileName: _jsxFileName$7,
          lineNumber: 33,
          columnNumber: 25
        }, this);
      } else {
        return /* @__PURE__ */ jsxDEV(Button$1, {
          size: "small",
          disabled: readonly,
          onClick,
          color: typeToColor[type],
          startIcon: typeToIcon[type],
          children: label
        }, void 0, false, {
          fileName: _jsxFileName$7,
          lineNumber: 40,
          columnNumber: 25
        }, this);
      }
    };
    const MuiButtonGroup = function(_ref) {
      var children = _ref.children;
      _ref.config;
      return /* @__PURE__ */ jsxDEV(Fragment, {
        children
      }, void 0, false);
    };
    var _jsxFileName$6 = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/mui/esm/widgets/core/MuiConjs.js";
    const MuiConjs = function(_ref) {
      var id = _ref.id, not = _ref.not, setNot2 = _ref.setNot, conjunctionOptions = _ref.conjunctionOptions, setConjunction2 = _ref.setConjunction, disabled = _ref.disabled, readonly = _ref.readonly, config2 = _ref.config, showNot = _ref.showNot, notLabel = _ref.notLabel;
      var conjsCount = Object.keys(conjunctionOptions).length;
      var lessThenTwo = disabled;
      var forceShowConj = config2.settings.forceShowConj;
      var showConj = forceShowConj || conjsCount > 1 && !lessThenTwo;
      var renderOptions = function renderOptions2() {
        return Object.keys(conjunctionOptions).map(function(key) {
          var _conjunctionOptions$k = conjunctionOptions[key], id2 = _conjunctionOptions$k.id;
          _conjunctionOptions$k.name;
          var label = _conjunctionOptions$k.label, checked = _conjunctionOptions$k.checked;
          var postfix = setConjunction2.isDummyFn ? "__dummy" : "";
          if ((readonly || disabled) && !checked)
            return null;
          return /* @__PURE__ */ jsxDEV(Button$1, {
            id: id2 + postfix,
            color: checked ? "primary" : "neutral",
            value: key,
            onClick: onClick.bind(null, key),
            disabled: readonly || disabled,
            children: label
          }, id2 + postfix, false, {
            fileName: _jsxFileName$6,
            lineNumber: 30,
            columnNumber: 27
          }, this);
        });
      };
      var renderNot = function renderNot2() {
        if (readonly && !not)
          return null;
        return /* @__PURE__ */ jsxDEV(Button$1, {
          id: id + "__not",
          color: not ? "secondary" : "neutral",
          onClick: onNotClick.bind(null, !not),
          disabled: readonly,
          children: notLabel || "NOT"
        }, id, false, {
          fileName: _jsxFileName$6,
          lineNumber: 42,
          columnNumber: 25
        }, this);
      };
      var onClick = function onClick2(value2) {
        return setConjunction2(value2);
      };
      var onNotClick = function onNotClick2(checked) {
        return setNot2(checked);
      };
      return /* @__PURE__ */ jsxDEV(FormControl$1, {
        children: /* @__PURE__ */ jsxDEV(ButtonGroup$1, {
          disableElevation: true,
          variant: "contained",
          size: "small",
          disabled: readonly,
          children: [showNot && renderNot(), showConj && renderOptions()]
        }, void 0, true, {
          fileName: _jsxFileName$6,
          lineNumber: 56,
          columnNumber: 75
        }, this)
      }, void 0, false, {
        fileName: _jsxFileName$6,
        lineNumber: 56,
        columnNumber: 23
      }, this);
    };
    var LockOpen = {};
    var _interopRequireDefault$2 = interopRequireDefault.exports;
    Object.defineProperty(LockOpen, "__esModule", {
      value: true
    });
    var default_1$2 = LockOpen.default = void 0;
    var _createSvgIcon$2 = _interopRequireDefault$2(requireCreateSvgIcon());
    var _jsxRuntime$2 = require$$2;
    var _default$2 = (0, _createSvgIcon$2.default)(/* @__PURE__ */ (0, _jsxRuntime$2.jsx)("path", {
      d: "M12 17c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm6-9h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6h1.9c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm0 12H6V10h12v10z"
    }), "LockOpen");
    default_1$2 = LockOpen.default = _default$2;
    var Lock = {};
    var _interopRequireDefault$1 = interopRequireDefault.exports;
    Object.defineProperty(Lock, "__esModule", {
      value: true
    });
    var default_1$1 = Lock.default = void 0;
    var _createSvgIcon$1 = _interopRequireDefault$1(requireCreateSvgIcon());
    var _jsxRuntime$1 = require$$2;
    var _default$1 = (0, _createSvgIcon$1.default)(/* @__PURE__ */ (0, _jsxRuntime$1.jsx)("path", {
      d: "M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z"
    }), "Lock");
    default_1$1 = Lock.default = _default$1;
    var _jsxFileName$5 = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/mui/esm/widgets/core/MuiSwitch.js";
    const MuiSwitch = function(_ref) {
      var value2 = _ref.value, setValue2 = _ref.setValue, label = _ref.label, checkedLabel = _ref.checkedLabel, hideLabel = _ref.hideLabel, id = _ref.id, config2 = _ref.config, type = _ref.type;
      config2.settings.renderSize;
      var onChange = function onChange2(e) {
        return setValue2(e.target.checked);
      };
      var onClick = function onClick2() {
        return setValue2(!value2);
      };
      var postfix = type;
      var showLabel = value2 ? checkedLabel || label : label;
      var icon = value2 ? /* @__PURE__ */ jsxDEV(default_1$1, {}, void 0, false, {
        fileName: _jsxFileName$5,
        lineNumber: 26,
        columnNumber: 35
      }, this) : /* @__PURE__ */ jsxDEV(default_1$2, {}, void 0, false, {
        fileName: _jsxFileName$5,
        lineNumber: 26,
        columnNumber: 86
      }, this);
      if (type == "lock") {
        if (hideLabel) {
          return /* @__PURE__ */ jsxDEV(IconButton$1, {
            onClick,
            size: "small",
            children: icon
          }, id + postfix, false, {
            fileName: _jsxFileName$5,
            lineNumber: 29,
            columnNumber: 27
          }, this);
        } else {
          return /* @__PURE__ */ jsxDEV(Button$1, {
            onClick,
            size: "small",
            startIcon: icon,
            children: showLabel
          }, id + postfix, false, {
            fileName: _jsxFileName$5,
            lineNumber: 35,
            columnNumber: 27
          }, this);
        }
      }
      return /* @__PURE__ */ jsxDEV(FormControlLabel$1, {
        control: /* @__PURE__ */ jsxDEV(Switch$1, {
          checked: !!value2,
          size: "small",
          onChange
        }, void 0, false, {
          fileName: _jsxFileName$5,
          lineNumber: 44,
          columnNumber: 27
        }, this),
        label: showLabel
      }, void 0, false, {
        fileName: _jsxFileName$5,
        lineNumber: 43,
        columnNumber: 23
      }, this);
    };
    var ExpandMoreSharp = {};
    var _interopRequireDefault = interopRequireDefault.exports;
    Object.defineProperty(ExpandMoreSharp, "__esModule", {
      value: true
    });
    var default_1 = ExpandMoreSharp.default = void 0;
    var _createSvgIcon = _interopRequireDefault(requireCreateSvgIcon());
    var _jsxRuntime = require$$2;
    var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
      d: "M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6-1.41-1.41z"
    }), "ExpandMoreSharp");
    default_1 = ExpandMoreSharp.default = _default;
    var _jsxFileName$4 = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/mui/esm/widgets/core/MuiValueSources.js";
    const MuiValueSources = function(_ref) {
      var valueSources = _ref.valueSources, valueSrc = _ref.valueSrc, title = _ref.title, setValueSrc2 = _ref.setValueSrc;
      _ref.readonly;
      var _React$useState = React.useState(null), _React$useState2 = _slicedToArray(_React$useState, 2), anchorEl = _React$useState2[0], setAnchorEl = _React$useState2[1];
      var handleOpen = function handleOpen2(event) {
        setAnchorEl(event.currentTarget);
      };
      var handleClose = function handleClose2() {
        setAnchorEl(null);
      };
      var toggleOpenClose = function toggleOpenClose2(event) {
        anchorEl ? handleClose() : handleOpen(event);
      };
      var handleChange = function handleChange2(e) {
        if (e.target.value === void 0)
          return;
        setValueSrc2(e.target.value);
        handleClose();
      };
      var renderOptions = function renderOptions2(valueSources2) {
        return valueSources2.map(function(_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2), srcKey = _ref3[0], info = _ref3[1];
          return /* @__PURE__ */ jsxDEV(FormControlLabel$1, {
            value: srcKey,
            checked: valueSrc == srcKey || !valueSrc && srcKey == "value",
            control: /* @__PURE__ */ jsxDEV(Radio$1, {}, void 0, false, {
              fileName: _jsxFileName$4,
              lineNumber: 44,
              columnNumber: 31
            }, this),
            label: info.label
          }, srcKey, false, {
            fileName: _jsxFileName$4,
            lineNumber: 40,
            columnNumber: 27
          }, this);
        });
      };
      var open = Boolean(anchorEl);
      return /* @__PURE__ */ jsxDEV("div", {
        children: [/* @__PURE__ */ jsxDEV(IconButton$1, {
          size: "small",
          onClick: toggleOpenClose,
          children: /* @__PURE__ */ jsxDEV(default_1, {}, void 0, false, {
            fileName: _jsxFileName$4,
            lineNumber: 53,
            columnNumber: 19
          }, this)
        }, void 0, false, {
          fileName: _jsxFileName$4,
          lineNumber: 50,
          columnNumber: 69
        }, this), /* @__PURE__ */ jsxDEV(Popover$1, {
          open,
          anchorEl,
          anchorOrigin: {
            vertical: "bottom",
            horizontal: "left"
          },
          transformOrigin: {
            vertical: "top",
            horizontal: "left"
          },
          onClose: handleClose,
          sx: {
            padding: function padding2(theme) {
              return theme.spacing(1);
            }
          },
          disablePortal: true,
          children: /* @__PURE__ */ jsxDEV(FormControl$1, {
            component: "fieldset",
            sx: {
              p: 2
            },
            children: [/* @__PURE__ */ jsxDEV(FormLabel$1, {
              component: "legend",
              children: title
            }, void 0, false, {
              fileName: _jsxFileName$4,
              lineNumber: 76,
              columnNumber: 19
            }, this), /* @__PURE__ */ jsxDEV(RadioGroup$1, {
              value: valueSrc || "value",
              onChange: handleChange,
              children: renderOptions(valueSources)
            }, void 0, false, {
              fileName: _jsxFileName$4,
              lineNumber: 78,
              columnNumber: 27
            }, this)]
          }, void 0, true, {
            fileName: _jsxFileName$4,
            lineNumber: 71,
            columnNumber: 19
          }, this)
        }, void 0, false, {
          fileName: _jsxFileName$4,
          lineNumber: 53,
          columnNumber: 81
        }, this)]
      }, void 0, true, {
        fileName: _jsxFileName$4,
        lineNumber: 50,
        columnNumber: 23
      }, this);
    };
    const MuiConfirm = function(_ref) {
      var onOk = _ref.onOk, okText = _ref.okText, cancelText = _ref.cancelText, title = _ref.title, confirmFn = _ref.confirmFn;
      confirmFn({
        description: title || "Are you sure?",
        title: null,
        confirmationText: okText || "Ok",
        cancellationText: cancelText || "Cancel"
      }).then(onOk)["catch"](function() {
      });
    };
    var _jsxFileName$3 = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/mui/esm/widgets/index.js";
    var MuiProvider = function MuiProvider2(_ref) {
      var config2 = _ref.config, children = _ref.children;
      var settingsTheme = config2.settings.theme || {};
      var settingsLocale = config2.settings.locale || {};
      var themeConfig = settingsTheme.mui;
      var locale2 = settingsLocale.mui;
      var theme = createTheme(themeConfig, locale2, {
        palette: {
          neutral: {
            main: "#64748B",
            contrastText: "#fff"
          }
        }
      });
      var base = /* @__PURE__ */ jsxDEV("div", {
        className: "mui",
        children
      }, void 0, false, {
        fileName: _jsxFileName$3,
        lineNumber: 49,
        columnNumber: 27
      }, this);
      var withProviders = /* @__PURE__ */ jsxDEV(LocalizationProvider, {
        dateAdapter: MomentUtils,
        children: /* @__PURE__ */ jsxDEV(ConfirmProvider, {
          children: base
        }, void 0, false, {
          fileName: _jsxFileName$3,
          lineNumber: 54,
          columnNumber: 19
        }, this)
      }, void 0, false, {
        fileName: _jsxFileName$3,
        lineNumber: 52,
        columnNumber: 36
      }, this);
      var withTheme = theme ? /* @__PURE__ */ jsxDEV(ThemeProvider, {
        theme,
        children: withProviders
      }, void 0, false, {
        fileName: _jsxFileName$3,
        lineNumber: 55,
        columnNumber: 40
      }, this) : withProviders;
      return withTheme;
    };
    const MuiWidgets = {
      MuiTextWidget,
      MuiTextAreaWidget,
      MuiDateWidget,
      MuiDateTimeWidget,
      MuiTimeWidget,
      MuiSelectWidget,
      MuiNumberWidget,
      MuiSliderWidget,
      MuiRangeWidget,
      MuiBooleanWidget,
      MuiMultiSelectWidget,
      MuiAutocompleteWidget,
      MuiFieldSelect,
      MuiFieldAutocomplete,
      MuiButton,
      MuiButtonGroup,
      MuiConjs,
      MuiSwitch,
      MuiValueSources,
      MuiConfirm,
      MuiUseConfirm: useConfirm,
      MuiProvider
    };
    function ownKeys(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty$2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var settings = _objectSpread(_objectSpread({}, BasicConfig.settings), {}, {
      renderField: function renderField(props, _ref) {
        var _props$customProps;
        var RCE = _ref.RCE, _ref$W = _ref.W, MuiFieldAutocomplete2 = _ref$W.MuiFieldAutocomplete, MuiFieldSelect2 = _ref$W.MuiFieldSelect;
        return props !== null && props !== void 0 && (_props$customProps = props.customProps) !== null && _props$customProps !== void 0 && _props$customProps.showSearch ? RCE(MuiFieldAutocomplete2, props) : RCE(MuiFieldSelect2, props);
      },
      renderOperator: function renderOperator(props, _ref2) {
        var RCE = _ref2.RCE, MuiFieldSelect2 = _ref2.W.MuiFieldSelect;
        return RCE(MuiFieldSelect2, props);
      },
      renderFunc: function renderFunc(props, _ref3) {
        var RCE = _ref3.RCE, MuiFieldSelect2 = _ref3.W.MuiFieldSelect;
        return RCE(MuiFieldSelect2, props);
      },
      renderConjs: function renderConjs(props, _ref4) {
        var RCE = _ref4.RCE, MuiConjs2 = _ref4.W.MuiConjs;
        return RCE(MuiConjs2, props);
      },
      renderSwitch: function renderSwitch(props, _ref5) {
        var RCE = _ref5.RCE, MuiSwitch2 = _ref5.W.MuiSwitch;
        return RCE(MuiSwitch2, props);
      },
      renderButton: function renderButton(props, _ref6) {
        var RCE = _ref6.RCE, MuiButton2 = _ref6.W.MuiButton;
        return RCE(MuiButton2, props);
      },
      renderButtonGroup: function renderButtonGroup(props, _ref7) {
        var RCE = _ref7.RCE, MuiButtonGroup2 = _ref7.W.MuiButtonGroup;
        return RCE(MuiButtonGroup2, props);
      },
      renderValueSources: function renderValueSources(props, _ref8) {
        var RCE = _ref8.RCE, MuiValueSources2 = _ref8.W.MuiValueSources;
        return RCE(MuiValueSources2, props);
      },
      renderProvider: function renderProvider(props, _ref9) {
        var RCE = _ref9.RCE, MuiProvider2 = _ref9.W.MuiProvider;
        return RCE(MuiProvider2, props);
      },
      renderConfirm: function renderConfirm(props, _ref10) {
        var MuiConfirm2 = _ref10.W.MuiConfirm;
        return MuiConfirm2(props);
      },
      useConfirm: function useConfirm2(_ref11) {
        var MuiUseConfirm = _ref11.W.MuiUseConfirm;
        return MuiUseConfirm();
      }
    });
    var widgets = _objectSpread(_objectSpread({}, BasicConfig.widgets), {}, {
      text: _objectSpread(_objectSpread({}, BasicConfig.widgets.text), {}, {
        factory: function factory(props, _ref12) {
          var RCE = _ref12.RCE, MuiTextWidget2 = _ref12.W.MuiTextWidget;
          return RCE(MuiTextWidget2, props);
        }
      }),
      textarea: _objectSpread(_objectSpread({}, BasicConfig.widgets.textarea), {}, {
        factory: function factory(props, _ref13) {
          var RCE = _ref13.RCE, MuiTextAreaWidget2 = _ref13.W.MuiTextAreaWidget;
          return RCE(MuiTextAreaWidget2, props);
        }
      }),
      number: _objectSpread(_objectSpread({}, BasicConfig.widgets.number), {}, {
        factory: function factory(props, _ref14) {
          var RCE = _ref14.RCE, MuiNumberWidget2 = _ref14.W.MuiNumberWidget;
          return RCE(MuiNumberWidget2, props);
        }
      }),
      multiselect: _objectSpread(_objectSpread({}, BasicConfig.widgets.multiselect), {}, {
        factory: function factory(props, _ref15) {
          var RCE = _ref15.RCE, _ref15$W = _ref15.W, MuiAutocompleteWidget2 = _ref15$W.MuiAutocompleteWidget, MuiMultiSelectWidget2 = _ref15$W.MuiMultiSelectWidget;
          return props.asyncFetch || props.showSearch ? RCE(MuiAutocompleteWidget2, _objectSpread(_objectSpread({}, props), {}, {
            multiple: true
          })) : RCE(MuiMultiSelectWidget2, props);
        }
      }),
      select: _objectSpread(_objectSpread({}, BasicConfig.widgets.select), {}, {
        factory: function factory(props, _ref16) {
          var RCE = _ref16.RCE, _ref16$W = _ref16.W, MuiAutocompleteWidget2 = _ref16$W.MuiAutocompleteWidget, MuiSelectWidget2 = _ref16$W.MuiSelectWidget;
          return props.asyncFetch || props.showSearch ? RCE(MuiAutocompleteWidget2, props) : RCE(MuiSelectWidget2, props);
        }
      }),
      slider: _objectSpread(_objectSpread({}, BasicConfig.widgets.slider), {}, {
        factory: function factory(props, _ref17) {
          var RCE = _ref17.RCE, MuiSliderWidget2 = _ref17.W.MuiSliderWidget;
          return RCE(MuiSliderWidget2, props);
        }
      }),
      "boolean": _objectSpread(_objectSpread({}, BasicConfig.widgets["boolean"]), {}, {
        factory: function factory(props, _ref18) {
          var RCE = _ref18.RCE, MuiBooleanWidget2 = _ref18.W.MuiBooleanWidget;
          return RCE(MuiBooleanWidget2, props);
        }
      }),
      date: _objectSpread(_objectSpread({}, BasicConfig.widgets.date), {}, {
        factory: function factory(props, _ref19) {
          var RCE = _ref19.RCE, MuiDateWidget2 = _ref19.W.MuiDateWidget;
          return RCE(MuiDateWidget2, props);
        }
      }),
      time: _objectSpread(_objectSpread({}, BasicConfig.widgets.time), {}, {
        factory: function factory(props, _ref20) {
          var RCE = _ref20.RCE, MuiTimeWidget2 = _ref20.W.MuiTimeWidget;
          return RCE(MuiTimeWidget2, props);
        }
      }),
      datetime: _objectSpread(_objectSpread({}, BasicConfig.widgets.datetime), {}, {
        factory: function factory(props, _ref21) {
          var RCE = _ref21.RCE, MuiDateTimeWidget2 = _ref21.W.MuiDateTimeWidget;
          return RCE(MuiDateTimeWidget2, props);
        }
      }),
      rangeslider: _objectSpread(_objectSpread({}, BasicConfig.widgets.rangeslider), {}, {
        factory: function factory(props, _ref22) {
          var RCE = _ref22.RCE, MuiRangeWidget2 = _ref22.W.MuiRangeWidget;
          return RCE(MuiRangeWidget2, props);
        }
      })
    });
    var types = _objectSpread({}, BasicConfig.types);
    var ctx = _objectSpread(_objectSpread({}, BasicConfig.ctx), {}, {
      W: _objectSpread(_objectSpread({}, BasicConfig.ctx.W), MuiWidgets)
    });
    var config$1 = _objectSpread(_objectSpread({}, BasicConfig), {}, {
      ctx,
      types,
      widgets,
      settings
    });
    config$1 = Utils.ConfigMixins.addMixins(config$1, ["rangeslider"]);
    const MuiConfig = config$1;
    var debounce = debounce_1, isObject = isObject_1;
    var FUNC_ERROR_TEXT = "Expected a function";
    function throttle(func, wait, options) {
      var leading = true, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = "leading" in options ? !!options.leading : leading;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
      });
    }
    var throttle_1 = throttle;
    var _jsxFileName$2 = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/sandbox/src/demo/config.tsx";
    const {
      simulateAsyncFetch
    } = Utils.Autocomplete;
    function createConfig(InitialConfig) {
      const demoListValues = [{
        title: "A",
        value: "a"
      }, {
        title: "AA",
        value: "aa"
      }, {
        title: "AAA1",
        value: "aaa1"
      }, {
        title: "AAA2",
        value: "aaa2"
      }, {
        title: "B",
        value: "b"
      }, {
        title: "C",
        value: "c"
      }, {
        title: "D",
        value: "d"
      }, {
        title: "E",
        value: "e"
      }, {
        title: "F",
        value: "f"
      }, {
        title: "G",
        value: "g"
      }, {
        title: "H",
        value: "h"
      }, {
        title: "I",
        value: "i"
      }, {
        title: "J",
        value: "j"
      }];
      const simulatedAsyncFetch = simulateAsyncFetch(demoListValues, 3);
      const fields = {
        user: {
          label: "User",
          tooltip: "Group of fields",
          type: "!struct",
          subfields: {
            firstName: {
              label2: "Username",
              type: "text",
              excludeOperators: ["proximity"],
              fieldSettings: {
                validateValue: (val, fieldSettings) => {
                  return val.length < 10;
                }
              },
              mainWidgetProps: {
                valueLabel: "Name",
                valuePlaceholder: "Enter name"
              }
            },
            login: {
              type: "text",
              tableName: "t1",
              excludeOperators: ["proximity"],
              fieldSettings: {
                validateValue: (val, fieldSettings) => {
                  return val.length < 10 && (val === "" || val.match(/^[A-Za-z0-9_-]+$/) !== null);
                }
              },
              mainWidgetProps: {
                valueLabel: "Login",
                valuePlaceholder: "Enter login"
              }
            }
          }
        },
        prox1: {
          label: "prox",
          tooltip: "Proximity search",
          type: "text",
          operators: ["proximity"]
        },
        num: {
          label: "Number",
          type: "number",
          preferWidgets: ["number"],
          fieldSettings: {
            min: -1,
            max: 5
          },
          funcs: ["LINEAR_REGRESSION"]
        },
        slider: {
          label: "Slider",
          type: "number",
          preferWidgets: ["slider", "rangeslider"],
          valueSources: ["value", "field"],
          fieldSettings: {
            min: 0,
            max: 100,
            step: 1,
            marks: {
              0: /* @__PURE__ */ jsxDEV("strong", {
                children: "0%"
              }, void 0, false, {
                fileName: _jsxFileName$2,
                lineNumber: 92,
                columnNumber: 14
              }, this),
              100: /* @__PURE__ */ jsxDEV("strong", {
                children: "100%"
              }, void 0, false, {
                fileName: _jsxFileName$2,
                lineNumber: 93,
                columnNumber: 16
              }, this)
            }
          },
          widgets: {
            slider: {
              widgetProps: {
                valuePlaceholder: "..Slider"
              }
            }
          }
        },
        date: {
          label: "Date",
          type: "date",
          valueSources: ["value"]
        },
        time: {
          label: "Time",
          type: "time",
          valueSources: ["value"],
          operators: ["greater_or_equal", "less_or_equal", "between"],
          defaultOperator: "between"
        },
        datetime: {
          label: "DateTime",
          type: "datetime",
          valueSources: ["value"]
        },
        datetime2: {
          label: "DateTime2",
          type: "datetime",
          valueSources: ["field"]
        },
        color: {
          label: "Color",
          type: "select",
          valueSources: ["value"],
          fieldSettings: {
            listValues: [{
              value: "yellow",
              title: "Yellow"
            }, {
              value: "green",
              title: "Green"
            }, {
              value: "orange",
              title: "Orange"
            }]
          }
        },
        color2: {
          label: "Color2",
          type: "select",
          fieldSettings: {
            listValues: {
              yellow: "Yellow",
              green: "Green",
              orange: "Orange",
              purple: "Purple"
            }
          }
        },
        multicolor: {
          label: "Colors",
          type: "multiselect",
          fieldSettings: {
            listValues: {
              yellow: "Yellow",
              green: "Green",
              orange: "Orange"
            },
            allowCustomValues: true
          }
        },
        selecttree: {
          label: "Color (tree)",
          type: "treeselect",
          fieldSettings: {
            treeExpandAll: true,
            treeValues: [{
              value: "1",
              title: "Warm colors"
            }, {
              value: "2",
              title: "Red",
              parent: "1"
            }, {
              value: "3",
              title: "Orange",
              parent: "1"
            }, {
              value: "4",
              title: "Cool colors"
            }, {
              value: "5",
              title: "Green",
              parent: "4"
            }, {
              value: "6",
              title: "Blue",
              parent: "4"
            }, {
              value: "7",
              title: "Sub blue",
              parent: "6"
            }, {
              value: "8",
              title: "Sub sub blue and a long text",
              parent: "7"
            }]
          }
        },
        multiselecttree: {
          label: "Colors (tree)",
          type: "treemultiselect",
          fieldSettings: {
            treeExpandAll: true,
            treeValues: [{
              value: "1",
              title: "Warm colors",
              children: [{
                value: "2",
                title: "Red"
              }, {
                value: "3",
                title: "Orange"
              }]
            }, {
              value: "4",
              title: "Cool colors",
              children: [{
                value: "5",
                title: "Green"
              }, {
                value: "6",
                title: "Blue",
                children: [{
                  value: "7",
                  title: "Sub blue",
                  children: [{
                    value: "8",
                    title: "Sub sub blue and a long text"
                  }]
                }]
              }]
            }]
          }
        },
        stock: {
          label: "In stock",
          type: "boolean",
          defaultValue: true,
          mainWidgetProps: {
            labelYes: "+",
            labelNo: "-"
          }
        },
        autocomplete: {
          label: "Autocomplete",
          type: "select",
          valueSources: ["value"],
          fieldSettings: {
            asyncFetch: simulatedAsyncFetch,
            useAsyncSearch: true,
            useLoadMore: true,
            forceAsyncSearch: false,
            allowCustomValues: false
          }
        },
        autocompleteMultiple: {
          label: "AutocompleteMultiple",
          type: "multiselect",
          valueSources: ["value"],
          fieldSettings: {
            asyncFetch: simulatedAsyncFetch,
            useAsyncSearch: true,
            useLoadMore: true,
            forceAsyncSearch: false,
            allowCustomValues: false
          }
        }
      };
      const conjunctions2 = {
        AND: InitialConfig.conjunctions.AND,
        OR: InitialConfig.conjunctions.OR
      };
      const proximity = {
        ...InitialConfig.operators.proximity,
        valueLabels: [{
          label: "Word 1",
          placeholder: "Enter first word"
        }, {
          label: "Word 2",
          placeholder: "Enter second word"
        }],
        textSeparators: [],
        options: {
          ...InitialConfig.operators.proximity.options,
          optionLabel: "Near",
          optionTextBefore: "Near",
          optionPlaceholder: "Select words between",
          minProximity: 2,
          maxProximity: 10,
          defaults: {
            proximity: 2
          },
          customProps: {}
        }
      };
      const operators2 = {
        ...InitialConfig.operators,
        between: {
          ...InitialConfig.operators.between,
          valueLabels: ["Value from", "Value to"],
          textSeparators: ["from", "to"]
        },
        proximity
      };
      const widgets2 = {
        ...InitialConfig.widgets,
        text: {
          ...InitialConfig.widgets.text
        },
        slider: {
          ...InitialConfig.widgets.slider,
          customProps: {
            width: "300px"
          }
        },
        rangeslider: {
          ...InitialConfig.widgets.rangeslider,
          customProps: {
            width: "300px"
          }
        },
        date: {
          ...InitialConfig.widgets.date,
          dateFormat: "DD.MM.YYYY",
          valueFormat: "YYYY-MM-DD"
        },
        time: {
          ...InitialConfig.widgets.time,
          timeFormat: "HH:mm",
          valueFormat: "HH:mm:ss"
        },
        datetime: {
          ...InitialConfig.widgets.datetime,
          timeFormat: "HH:mm",
          dateFormat: "DD.MM.YYYY",
          valueFormat: "YYYY-MM-DD HH:mm:ss"
        },
        func: {
          ...InitialConfig.widgets.func,
          customProps: {
            showSearch: true
          }
        },
        treeselect: {
          ...InitialConfig.widgets.treeselect,
          customProps: {
            showSearch: true
          }
        }
      };
      const types2 = {
        ...InitialConfig.types,
        boolean: merge_1({}, InitialConfig.types.boolean, {
          widgets: {
            boolean: {
              widgetProps: {
                hideOperator: true,
                operatorInlineLabel: "is"
              }
            }
          }
        })
      };
      const localeSettings = {
        locale: {
          moment: "ru"
        },
        valueLabel: "Value",
        valuePlaceholder: "Value",
        fieldLabel: "Field",
        operatorLabel: "Operator",
        fieldPlaceholder: "Select field",
        operatorPlaceholder: "Select operator",
        deleteLabel: void 0,
        addGroupLabel: "Add group",
        addRuleLabel: "Add rule",
        addSubRuleLabel: "Add sub rule",
        delGroupLabel: void 0,
        notLabel: "Not",
        valueSourcesPopupTitle: "Select value source",
        removeRuleConfirmOptions: {
          title: "Are you sure delete this rule?",
          okText: "Yes",
          okType: "danger"
        },
        removeGroupConfirmOptions: {
          title: "Are you sure delete this group?",
          okText: "Yes",
          okType: "danger"
        }
      };
      const settings2 = {
        ...InitialConfig.settings,
        ...localeSettings,
        valueSourcesInfo: {
          value: {
            label: "Value"
          },
          field: {
            label: "Field",
            widget: "field"
          },
          func: {
            label: "Function",
            widget: "func"
          }
        },
        maxNesting: 3,
        canLeaveEmptyGroup: true
      };
      const funcs = {
        LINEAR_REGRESSION,
        LOWER
      };
      const ctx2 = InitialConfig.ctx;
      const config2 = {
        ctx: ctx2,
        conjunctions: conjunctions2,
        operators: operators2,
        widgets: widgets2,
        types: types2,
        settings: settings2,
        fields,
        funcs
      };
      return config2;
    }
    const ruRU = {
      components: {
        MuiBreadcrumbs: {
          defaultProps: {
            expandText: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u043F\u043E\u043B\u043D\u044B\u0439 \u043F\u0443\u0442\u044C"
          }
        },
        MuiTablePagination: {
          defaultProps: {
            getItemAriaLabel: (type) => {
              if (type === "first") {
                return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u043F\u0435\u0440\u0432\u0443\u044E \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443";
              }
              if (type === "last") {
                return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u044E\u044E \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443";
              }
              if (type === "next") {
                return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0443\u044E \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443";
              }
              return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u043F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0443\u044E \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443";
            },
            labelRowsPerPage: "\u0421\u0442\u0440\u043E\u043A \u043D\u0430 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435:",
            labelDisplayedRows: ({
              from: from2,
              to: to2,
              count
            }) => `${from2}\u2013${to2} \u0438\u0437 ${count !== -1 ? count : `\u0431\u043E\u043B\u0435\u0435 \u0447\u0435\u043C ${to2}`}`
          }
        },
        MuiRating: {
          defaultProps: {
            getLabelText: (value2) => {
              let pluralForm = "\u0417\u0432\u0451\u0437\u0434";
              const lastDigit = value2 % 10;
              if (lastDigit > 1 && lastDigit < 5) {
                pluralForm = "\u0417\u0432\u0435\u0437\u0434\u044B";
              } else if (lastDigit === 1) {
                pluralForm = "\u0417\u0432\u0435\u0437\u0434\u0430";
              }
              return `${value2} ${pluralForm}`;
            },
            emptyLabelText: "\u0420\u0435\u0439\u0442\u0438\u043D\u0433 \u043E\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442"
          }
        },
        MuiAutocomplete: {
          defaultProps: {
            clearText: "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u044C",
            closeText: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C",
            loadingText: "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430\u2026",
            noOptionsText: "\u041D\u0435\u0442 \u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B\u0445 \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u043E\u0432",
            openText: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C"
          }
        },
        MuiAlert: {
          defaultProps: {
            closeText: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C"
          }
        },
        MuiPagination: {
          defaultProps: {
            "aria-label": "\u041D\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044F \u043F\u043E \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430\u043C",
            getItemAriaLabel: (type, page, selected) => {
              if (type === "page") {
                if (selected) {
                  return `${page} \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430`;
                }
                return `\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 ${page} \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443`;
              }
              if (type === "first") {
                return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u043F\u0435\u0440\u0432\u0443\u044E \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443";
              }
              if (type === "last") {
                return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u044E\u044E \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443";
              }
              if (type === "next") {
                return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0443\u044E \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443";
              }
              return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u043F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0443\u044E \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443";
            }
          }
        }
      }
    };
    const styles = "";
    const configMixin = {
      settings: {
        locale: {
          mui: ruRU
        }
      }
    };
    const config = merge_1({}, createConfig(MuiConfig), configMixin);
    const value = {
      "type": "group",
      "id": "9a99988a-0123-4456-b89a-b1607f326fd8",
      "children1": {
        "a98ab9b9-cdef-4012-b456-71607f326fd9": {
          "type": "rule",
          "properties": {
            "field": "user.login",
            "operator": "equal",
            "value": [
              "batman"
            ],
            "valueSrc": [
              "value"
            ],
            "valueType": [
              "text"
            ]
          }
        },
        "98a8a9ba-0123-4456-b89a-b16e721c8cd0": {
          "type": "rule",
          "properties": {
            "field": "stock",
            "operator": "equal",
            "value": [
              false
            ],
            "valueSrc": [
              "value"
            ],
            "valueType": [
              "boolean"
            ]
          }
        },
        "aabbab8a-cdef-4012-b456-716e85c65e9c": {
          "type": "rule",
          "properties": {
            "field": "slider",
            "operator": "equal",
            "value": [
              35
            ],
            "valueSrc": [
              "value"
            ],
            "valueType": [
              "number"
            ]
          }
        }
      },
      "properties": {
        "conjunction": "AND",
        "not": false
      }
    };
    var _jsxFileName$1 = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/sandbox/src/demo/demo.tsx";
    const stringify = JSON.stringify;
    const {
      queryBuilderFormat,
      jsonLogicFormat,
      queryString,
      mongodbFormat,
      sqlFormat,
      getTree,
      checkTree,
      loadTree,
      uuid,
      loadFromJsonLogic
    } = Utils;
    const preStyle = {
      backgroundColor: "darkgrey",
      margin: "10px",
      padding: "10px"
    };
    const preErrorStyle = {
      backgroundColor: "lightpink",
      margin: "10px",
      padding: "10px"
    };
    const emptyInitValue = {
      "id": uuid(),
      "type": "group"
    };
    const initValue = value && Object.keys(value).length > 0 ? value : emptyInitValue;
    const initTree = checkTree(loadTree(initValue), config);
    class DemoQueryBuilder extends react.exports.Component {
      constructor() {
        super(...arguments);
        __publicField(this, "immutableTree");
        __publicField(this, "config");
        __publicField(this, "state", {
          tree: initTree,
          config
        });
        __publicField(this, "render", () => /* @__PURE__ */ jsxDEV("div", {
          children: [/* @__PURE__ */ jsxDEV(QueryContainer, {
            ...config,
            value: this.state.tree,
            onChange: this.onChange,
            renderBuilder: this.renderBuilder
          }, void 0, false, {
            fileName: _jsxFileName$1,
            lineNumber: 44,
            columnNumber: 7
          }, this), /* @__PURE__ */ jsxDEV("button", {
            onClick: this.resetValue,
            children: "reset"
          }, void 0, false, {
            fileName: _jsxFileName$1,
            lineNumber: 51,
            columnNumber: 7
          }, this), /* @__PURE__ */ jsxDEV("button", {
            onClick: this.clearValue,
            children: "clear"
          }, void 0, false, {
            fileName: _jsxFileName$1,
            lineNumber: 52,
            columnNumber: 7
          }, this), /* @__PURE__ */ jsxDEV("div", {
            className: "query-builder-result",
            children: this.renderResult(this.state)
          }, void 0, false, {
            fileName: _jsxFileName$1,
            lineNumber: 54,
            columnNumber: 7
          }, this)]
        }, void 0, true, {
          fileName: _jsxFileName$1,
          lineNumber: 43,
          columnNumber: 5
        }, this));
        __publicField(this, "resetValue", () => {
          this.setState({
            tree: initTree
          });
        });
        __publicField(this, "clearValue", () => {
          this.setState({
            tree: loadTree(emptyInitValue)
          });
        });
        __publicField(this, "renderBuilder", (props) => /* @__PURE__ */ jsxDEV("div", {
          className: "query-builder-container",
          style: {
            padding: "10px"
          },
          children: /* @__PURE__ */ jsxDEV("div", {
            className: "query-builder qb-lite",
            children: /* @__PURE__ */ jsxDEV(Builder$1, {
              ...props
            }, void 0, false, {
              fileName: _jsxFileName$1,
              lineNumber: 75,
              columnNumber: 9
            }, this)
          }, void 0, false, {
            fileName: _jsxFileName$1,
            lineNumber: 74,
            columnNumber: 7
          }, this)
        }, void 0, false, {
          fileName: _jsxFileName$1,
          lineNumber: 73,
          columnNumber: 5
        }, this));
        __publicField(this, "onChange", (immutableTree, config2) => {
          this.immutableTree = immutableTree;
          this.config = config2;
          this.updateResult();
          getTree(immutableTree);
          jsonLogicFormat(immutableTree, config2);
        });
        __publicField(this, "updateResult", throttle_1(() => {
          this.setState({
            tree: this.immutableTree,
            config: this.config
          });
        }, 100));
        __publicField(this, "renderResult", ({
          tree: immutableTree,
          config: config2
        }) => {
          const {
            logic: logic2,
            data,
            errors
          } = jsonLogicFormat(immutableTree, config2);
          return /* @__PURE__ */ jsxDEV("div", {
            children: [/* @__PURE__ */ jsxDEV("br", {}, void 0, false, {
              fileName: _jsxFileName$1,
              lineNumber: 99,
              columnNumber: 9
            }, this), /* @__PURE__ */ jsxDEV("div", {
              children: ["stringFormat:", /* @__PURE__ */ jsxDEV("pre", {
                style: preStyle,
                children: stringify(queryString(immutableTree, config2), void 0, 2)
              }, void 0, false, {
                fileName: _jsxFileName$1,
                lineNumber: 102,
                columnNumber: 11
              }, this)]
            }, void 0, true, {
              fileName: _jsxFileName$1,
              lineNumber: 100,
              columnNumber: 9
            }, this), /* @__PURE__ */ jsxDEV("hr", {}, void 0, false, {
              fileName: _jsxFileName$1,
              lineNumber: 106,
              columnNumber: 9
            }, this), /* @__PURE__ */ jsxDEV("div", {
              children: ["humanStringFormat:", /* @__PURE__ */ jsxDEV("pre", {
                style: preStyle,
                children: stringify(queryString(immutableTree, config2, true), void 0, 2)
              }, void 0, false, {
                fileName: _jsxFileName$1,
                lineNumber: 109,
                columnNumber: 11
              }, this)]
            }, void 0, true, {
              fileName: _jsxFileName$1,
              lineNumber: 107,
              columnNumber: 9
            }, this), /* @__PURE__ */ jsxDEV("hr", {}, void 0, false, {
              fileName: _jsxFileName$1,
              lineNumber: 113,
              columnNumber: 9
            }, this), /* @__PURE__ */ jsxDEV("div", {
              children: ["sqlFormat:", /* @__PURE__ */ jsxDEV("pre", {
                style: preStyle,
                children: stringify(sqlFormat(immutableTree, config2), void 0, 2)
              }, void 0, false, {
                fileName: _jsxFileName$1,
                lineNumber: 116,
                columnNumber: 11
              }, this)]
            }, void 0, true, {
              fileName: _jsxFileName$1,
              lineNumber: 114,
              columnNumber: 9
            }, this), /* @__PURE__ */ jsxDEV("hr", {}, void 0, false, {
              fileName: _jsxFileName$1,
              lineNumber: 120,
              columnNumber: 9
            }, this), /* @__PURE__ */ jsxDEV("div", {
              children: ["mongodbFormat:", /* @__PURE__ */ jsxDEV("pre", {
                style: preStyle,
                children: stringify(mongodbFormat(immutableTree, config2), void 0, 2)
              }, void 0, false, {
                fileName: _jsxFileName$1,
                lineNumber: 123,
                columnNumber: 11
              }, this)]
            }, void 0, true, {
              fileName: _jsxFileName$1,
              lineNumber: 121,
              columnNumber: 9
            }, this), /* @__PURE__ */ jsxDEV("hr", {}, void 0, false, {
              fileName: _jsxFileName$1,
              lineNumber: 127,
              columnNumber: 9
            }, this), /* @__PURE__ */ jsxDEV("div", {
              children: [/* @__PURE__ */ jsxDEV("a", {
                href: "http://jsonlogic.com/play.html",
                target: "_blank",
                rel: "noopener noreferrer",
                children: "jsonLogicFormat"
              }, void 0, false, {
                fileName: _jsxFileName$1,
                lineNumber: 129,
                columnNumber: 11
              }, this), ":", ((errors == null ? void 0 : errors.length) || 0) > 0 && /* @__PURE__ */ jsxDEV("pre", {
                style: preErrorStyle,
                children: stringify(errors, void 0, 2)
              }, void 0, false, {
                fileName: _jsxFileName$1,
                lineNumber: 131,
                columnNumber: 18
              }, this), !!logic2 && /* @__PURE__ */ jsxDEV("pre", {
                style: preStyle,
                children: ["// Rule", ":", /* @__PURE__ */ jsxDEV("br", {}, void 0, false, {
                  fileName: _jsxFileName$1,
                  lineNumber: 137,
                  columnNumber: 29
                }, this), stringify(logic2, void 0, 2), /* @__PURE__ */ jsxDEV("br", {}, void 0, false, {
                  fileName: _jsxFileName$1,
                  lineNumber: 139,
                  columnNumber: 17
                }, this), /* @__PURE__ */ jsxDEV("hr", {}, void 0, false, {
                  fileName: _jsxFileName$1,
                  lineNumber: 140,
                  columnNumber: 17
                }, this), "// Data", ":", /* @__PURE__ */ jsxDEV("br", {}, void 0, false, {
                  fileName: _jsxFileName$1,
                  lineNumber: 141,
                  columnNumber: 29
                }, this), stringify(data, void 0, 2)]
              }, void 0, true, {
                fileName: _jsxFileName$1,
                lineNumber: 136,
                columnNumber: 18
              }, this)]
            }, void 0, true, {
              fileName: _jsxFileName$1,
              lineNumber: 128,
              columnNumber: 9
            }, this), /* @__PURE__ */ jsxDEV("hr", {}, void 0, false, {
              fileName: _jsxFileName$1,
              lineNumber: 146,
              columnNumber: 9
            }, this), /* @__PURE__ */ jsxDEV("div", {
              children: ["Tree:", /* @__PURE__ */ jsxDEV("pre", {
                style: preStyle,
                children: stringify(getTree(immutableTree), void 0, 2)
              }, void 0, false, {
                fileName: _jsxFileName$1,
                lineNumber: 149,
                columnNumber: 11
              }, this)]
            }, void 0, true, {
              fileName: _jsxFileName$1,
              lineNumber: 147,
              columnNumber: 9
            }, this)]
          }, void 0, true, {
            fileName: _jsxFileName$1,
            lineNumber: 98,
            columnNumber: 7
          }, this);
        });
      }
    }
    var _jsxFileName = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/sandbox/src/index.tsx";
    function App() {
      return /* @__PURE__ */ jsxDEV("div", {
        className: "App",
        children: /* @__PURE__ */ jsxDEV(DemoQueryBuilder, {}, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 8,
          columnNumber: 7
        }, this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 7,
        columnNumber: 5
      }, this);
    }
    const rootElement = document.getElementById("root");
    ReactDOM.render(/* @__PURE__ */ jsxDEV(App, {}, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 14,
      columnNumber: 17
    }, globalThis), rootElement);
  }
});
export default require_index_d9d43443();
//# sourceMappingURL=index.d9d43443.js.map
