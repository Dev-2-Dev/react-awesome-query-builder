var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var require_index_ee03ee27 = __commonJS({
  "assets/index.ee03ee27.js"(exports, module) {
    (function polyfill() {
      const relList = document.createElement("link").relList;
      if (relList && relList.supports && relList.supports("modulepreload")) {
        return;
      }
      for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
        processPreload(link);
      }
      new MutationObserver((mutations) => {
        for (const mutation of mutations) {
          if (mutation.type !== "childList") {
            continue;
          }
          for (const node of mutation.addedNodes) {
            if (node.tagName === "LINK" && node.rel === "modulepreload")
              processPreload(node);
          }
        }
      }).observe(document, { childList: true, subtree: true });
      function getFetchOpts(script) {
        const fetchOpts = {};
        if (script.integrity)
          fetchOpts.integrity = script.integrity;
        if (script.referrerpolicy)
          fetchOpts.referrerPolicy = script.referrerpolicy;
        if (script.crossorigin === "use-credentials")
          fetchOpts.credentials = "include";
        else if (script.crossorigin === "anonymous")
          fetchOpts.credentials = "omit";
        else
          fetchOpts.credentials = "same-origin";
        return fetchOpts;
      }
      function processPreload(link) {
        if (link.ep)
          return;
        link.ep = true;
        const fetchOpts = getFetchOpts(link);
        fetch(link.href, fetchOpts);
      }
    })();
    var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
    function getDefaultExportFromCjs(x) {
      return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
    }
    var react = { exports: {} };
    var react_development = {};
    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */
    var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
    var hasOwnProperty$d = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject$1(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    var objectAssign = shouldUseNative() ? Object.assign : function(target, source) {
      var from2;
      var to2 = toObject$1(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from2 = Object(arguments[s]);
        for (var key in from2) {
          if (hasOwnProperty$d.call(from2, key)) {
            to2[key] = from2[key];
          }
        }
        if (getOwnPropertySymbols$1) {
          symbols = getOwnPropertySymbols$1(from2);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from2, symbols[i])) {
              to2[symbols[i]] = from2[symbols[i]];
            }
          }
        }
      }
      return to2;
    };
    var ReactPropTypesSecret$2 = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    var ReactPropTypesSecret_1 = ReactPropTypesSecret$2;
    var has$2 = Function.call.bind(Object.prototype.hasOwnProperty);
    var printWarning$1 = function() {
    };
    {
      var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
      var loggedTypeFailures = {};
      var has$1 = has$2;
      printWarning$1 = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function checkPropTypes$1(typeSpecs, values, location, componentName, getStack) {
      {
        for (var typeSpecName in typeSpecs) {
          if (has$1(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning$1(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning$1(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes$1.resetWarningCache = function() {
      {
        loggedTypeFailures = {};
      }
    };
    var checkPropTypes_1 = checkPropTypes$1;
    /** @license React v16.14.0
     * react.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    {
      (function() {
        var _assign = objectAssign;
        var checkPropTypes2 = checkPropTypes_1;
        var ReactVersion = "16.14.0";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          current: null
        };
        var ReactCurrentBatchConfig = {
          suspense: null
        };
        var ReactCurrentOwner = {
          current: null
        };
        var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
        function describeComponentFrame(name, source, ownerName) {
          var sourceInfo = "";
          if (source) {
            var path = source.fileName;
            var fileName = path.replace(BEFORE_SLASH_RE, "");
            {
              if (/^index\./.test(fileName)) {
                var match5 = path.match(BEFORE_SLASH_RE);
                if (match5) {
                  var pathBeforeSlash = match5[1];
                  if (pathBeforeSlash) {
                    var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, "");
                    fileName = folderName + "/" + fileName;
                  }
                }
              }
            }
            sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
          } else if (ownerName) {
            sourceInfo = " (created by " + ownerName + ")";
          }
          return "\n    in " + (name || "Unknown") + sourceInfo;
        }
        var Resolved = 1;
        function refineResolvedLazyComponent(lazyComponent) {
          return lazyComponent._status === Resolved ? lazyComponent._result : null;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                return "Context.Consumer";
              case REACT_PROVIDER_TYPE:
                return "Context.Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type.render);
              case REACT_LAZY_TYPE: {
                var thenable = type;
                var resolvedThenable = refineResolvedLazyComponent(thenable);
                if (resolvedThenable) {
                  return getComponentName(resolvedThenable);
                }
                break;
              }
            }
          }
          return null;
        }
        var ReactDebugCurrentFrame = {};
        var currentlyValidatingElement = null;
        function setCurrentlyValidatingElement(element) {
          {
            currentlyValidatingElement = element;
          }
        }
        {
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentlyValidatingElement) {
              var name = getComponentName(currentlyValidatingElement.type);
              var owner = currentlyValidatingElement._owner;
              stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var IsSomeRendererActing = {
          current: false
        };
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner,
          IsSomeRendererActing,
          assign: _assign
        };
        {
          _assign(ReactSharedInternals, {
            ReactDebugCurrentFrame,
            ReactComponentTreeHook: {}
          });
        }
        function warn2(format2) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning2("warn", format2, args);
          }
        }
        function error(format2) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning2("error", format2, args);
          }
        }
        function printWarning2(level, format2, args) {
          {
            var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === "string" && args[args.length - 1].indexOf("\n    in") === 0;
            if (!hasExistingStack) {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format2);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
            try {
              var argIndex = 0;
              var message = "Warning: " + format2.replace(/%s/g, function() {
                return args[argIndex++];
              });
              throw new Error(message);
            } catch (x) {
            }
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          isMounted: function(publicInstance) {
            return false;
          },
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context2, updater) {
          this.props = props;
          this.context = context2;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback) {
          if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
            {
              throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn2("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context2, updater) {
          this.props = props;
          this.context = context2;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        _assign(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config2) {
          {
            if (hasOwnProperty2.call(config2, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config2.ref !== void 0;
        }
        function hasValidKey(config2) {
          {
            if (hasOwnProperty2.call(config2, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config2.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://fb.me/react-special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config2) {
          {
            if (typeof config2.ref === "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
              var componentName = getComponentName(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config2.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement(type, config2, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self2 = null;
          var source = null;
          if (config2 != null) {
            if (hasValidRef(config2)) {
              ref = config2.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config2);
              }
            }
            if (hasValidKey(config2)) {
              key = "" + config2.key;
            }
            self2 = config2.__self === void 0 ? null : config2.__self;
            source = config2.__source === void 0 ? null : config2.__source;
            for (propName in config2) {
              if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config2[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement(element, config2, children) {
          if (!!(element === null || element === void 0)) {
            {
              throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
          }
          var propName;
          var props = _assign({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config2 != null) {
            if (hasValidRef(config2)) {
              ref = config2.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config2)) {
              key = "" + config2.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config2) {
              if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config2[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config2[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self2, source, owner, props);
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = ("" + key).replace(escapeRegex, function(match5) {
            return escaperLookup[match5];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return ("" + text).replace(userProvidedKeyEscapeRegex, "$&/");
        }
        var POOL_SIZE = 10;
        var traverseContextPool = [];
        function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
          if (traverseContextPool.length) {
            var traverseContext = traverseContextPool.pop();
            traverseContext.result = mapResult;
            traverseContext.keyPrefix = keyPrefix;
            traverseContext.func = mapFunction;
            traverseContext.context = mapContext;
            traverseContext.count = 0;
            return traverseContext;
          } else {
            return {
              result: mapResult,
              keyPrefix,
              func: mapFunction,
              context: mapContext,
              count: 0
            };
          }
        }
        function releaseTraverseContext(traverseContext) {
          traverseContext.result = null;
          traverseContext.keyPrefix = null;
          traverseContext.func = null;
          traverseContext.context = null;
          traverseContext.count = 0;
          if (traverseContextPool.length < POOL_SIZE) {
            traverseContextPool.push(traverseContext);
          }
        }
        function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            callback(
              traverseContext,
              children,
              nameSoFar === "" ? SEPARATOR + getComponentKey(children, 0) : nameSoFar
            );
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (Array.isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              child = children[i];
              nextName = nextNamePrefix + getComponentKey(child, i);
              subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              {
                if (iteratorFn === children.entries) {
                  if (!didWarnAboutMaps) {
                    warn2("Using Maps as children is deprecated and will be removed in a future major release. Consider converting children to an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(children);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getComponentKey(child, ii++);
                subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
              }
            } else if (type === "object") {
              var addendum = "";
              {
                addendum = " If you meant to render a collection of children, use an array instead." + ReactDebugCurrentFrame.getStackAddendum();
              }
              var childrenString = "" + children;
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + ")." + addendum);
                }
              }
            }
          }
          return subtreeCount;
        }
        function traverseAllChildren(children, callback, traverseContext) {
          if (children == null) {
            return 0;
          }
          return traverseAllChildrenImpl(children, "", callback, traverseContext);
        }
        function getComponentKey(component, index) {
          if (typeof component === "object" && component !== null && component.key != null) {
            return escape(component.key);
          }
          return index.toString(36);
        }
        function forEachSingleChild(bookKeeping, child, name) {
          var func = bookKeeping.func, context2 = bookKeeping.context;
          func.call(context2, child, bookKeeping.count++);
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          if (children == null) {
            return children;
          }
          var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
          traverseAllChildren(children, forEachSingleChild, traverseContext);
          releaseTraverseContext(traverseContext);
        }
        function mapSingleChildIntoContext(bookKeeping, child, childKey) {
          var result = bookKeeping.result, keyPrefix = bookKeeping.keyPrefix, func = bookKeeping.func, context2 = bookKeeping.context;
          var mappedChild = func.call(context2, child, bookKeeping.count++);
          if (Array.isArray(mappedChild)) {
            mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function(c) {
              return c;
            });
          } else if (mappedChild != null) {
            if (isValidElement(mappedChild)) {
              mappedChild = cloneAndReplaceKey(
                mappedChild,
                keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + "/" : "") + childKey
              );
            }
            result.push(mappedChild);
          }
        }
        function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context2) {
          var escapedPrefix = "";
          if (prefix != null) {
            escapedPrefix = escapeUserProvidedKey(prefix) + "/";
          }
          var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context2);
          traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
          releaseTraverseContext(traverseContext);
        }
        function mapChildren(children, func, context2) {
          if (children == null) {
            return children;
          }
          var result = [];
          mapIntoWithKeyPrefixInternal(children, result, null, func, context2);
          return result;
        }
        function countChildren(children) {
          return traverseAllChildren(children, function() {
            return null;
          }, null);
        }
        function toArray2(children) {
          var result = [];
          mapIntoWithKeyPrefixInternal(children, result, null, function(child) {
            return child;
          });
          return result;
        }
        function onlyChild(children) {
          if (!isValidElement(children)) {
            {
              throw Error("React.Children.only expected to receive a single React element child.");
            }
          }
          return children;
        }
        function createContext(defaultValue2, calculateChangedBits) {
          if (calculateChangedBits === void 0) {
            calculateChangedBits = null;
          } else {
            {
              if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
              }
            }
          }
          var context2 = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            _currentValue: defaultValue2,
            _currentValue2: defaultValue2,
            _threadCount: 0,
            Provider: null,
            Consumer: null
          };
          context2.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context2
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context2,
              _calculateChangedBits: context2._calculateChangedBits
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context2.Provider;
                },
                set: function(_Provider) {
                  context2.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context2._currentValue;
                },
                set: function(_currentValue) {
                  context2._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context2._currentValue2;
                },
                set: function(_currentValue2) {
                  context2._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context2._threadCount;
                },
                set: function(_threadCount) {
                  context2._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context2.Consumer;
                }
              }
            });
            context2.Consumer = Consumer;
          }
          {
            context2._currentRenderer = null;
            context2._currentRenderer2 = null;
          }
          return context2;
        }
        function lazy(ctor) {
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _ctor: ctor,
            _status: -1,
            _result: null
          };
          {
            var defaultProps;
            var propTypes2;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes2;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes2 = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          return {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render
          };
        }
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function memo(type, compare) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          return {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          if (!(dispatcher !== null)) {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext(Context, unstable_observedBits) {
          var dispatcher = resolveDispatcher();
          {
            if (unstable_observedBits !== void 0) {
              error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://fb.me/rules-of-hooks" : "");
            }
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context, unstable_observedBits);
        }
        function useState(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useLayoutEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle(ref, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }
        function useDebugValue(value2, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value2, formatterFn);
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
          }
          setCurrentlyValidatingElement(element);
          {
            error('Each child in a list should have a unique "key" prop.%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
          }
          setCurrentlyValidatingElement(null);
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (Array.isArray(node)) {
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var name = getComponentName(type);
            var propTypes2;
            if (typeof type === "function") {
              propTypes2 = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes2 = type.propTypes;
            } else {
              return;
            }
            if (propTypes2) {
              setCurrentlyValidatingElement(element);
              checkPropTypes2(propTypes2, element.props, "prop", name, ReactDebugCurrentFrame.getStackAddendum);
              setCurrentlyValidatingElement(null);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            setCurrentlyValidatingElement(fragment);
            var keys2 = Object.keys(fragment.props);
            for (var i = 0; i < keys2.length; i++) {
              var key = keys2[i];
              if (key !== "children" && key !== "key") {
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                break;
              }
            }
            if (fragment.ref !== null) {
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
            }
            setCurrentlyValidatingElement(null);
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (Array.isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn2("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn2("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement.apply(this, arguments);
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        {
          try {
            var frozenObject = Object.freeze({});
            var testMap = /* @__PURE__ */ new Map([[frozenObject, null]]);
            var testSet = /* @__PURE__ */ new Set([frozenObject]);
            testMap.set(0, 0);
            testSet.add(0);
          } catch (e) {
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray: toArray2,
          only: onlyChild
        };
        react_development.Children = Children;
        react_development.Component = Component;
        react_development.Fragment = REACT_FRAGMENT_TYPE;
        react_development.Profiler = REACT_PROFILER_TYPE;
        react_development.PureComponent = PureComponent;
        react_development.StrictMode = REACT_STRICT_MODE_TYPE;
        react_development.Suspense = REACT_SUSPENSE_TYPE;
        react_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        react_development.cloneElement = cloneElement$1;
        react_development.createContext = createContext;
        react_development.createElement = createElement$1;
        react_development.createFactory = createFactory;
        react_development.createRef = createRef;
        react_development.forwardRef = forwardRef;
        react_development.isValidElement = isValidElement;
        react_development.lazy = lazy;
        react_development.memo = memo;
        react_development.useCallback = useCallback;
        react_development.useContext = useContext;
        react_development.useDebugValue = useDebugValue;
        react_development.useEffect = useEffect;
        react_development.useImperativeHandle = useImperativeHandle;
        react_development.useLayoutEffect = useLayoutEffect;
        react_development.useMemo = useMemo;
        react_development.useReducer = useReducer;
        react_development.useRef = useRef;
        react_development.useState = useState;
        react_development.version = ReactVersion;
      })();
    }
    (function(module2) {
      {
        module2.exports = react_development;
      }
    })(react);
    const React = /* @__PURE__ */ getDefaultExportFromCjs(react.exports);
    var reactDom = { exports: {} };
    var reactDom_development = {};
    var scheduler = { exports: {} };
    var scheduler_development = {};
    /** @license React v0.19.1
     * scheduler.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    (function(exports2) {
      {
        (function() {
          var enableSchedulerDebugging = false;
          var enableProfiling = true;
          var requestHostCallback;
          var requestHostTimeout;
          var cancelHostTimeout;
          var shouldYieldToHost;
          var requestPaint;
          if (typeof window === "undefined" || typeof MessageChannel !== "function") {
            var _callback = null;
            var _timeoutID = null;
            var _flushCallback = function() {
              if (_callback !== null) {
                try {
                  var currentTime = exports2.unstable_now();
                  var hasRemainingTime = true;
                  _callback(hasRemainingTime, currentTime);
                  _callback = null;
                } catch (e) {
                  setTimeout(_flushCallback, 0);
                  throw e;
                }
              }
            };
            var initialTime = Date.now();
            exports2.unstable_now = function() {
              return Date.now() - initialTime;
            };
            requestHostCallback = function(cb) {
              if (_callback !== null) {
                setTimeout(requestHostCallback, 0, cb);
              } else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
              }
            };
            requestHostTimeout = function(cb, ms) {
              _timeoutID = setTimeout(cb, ms);
            };
            cancelHostTimeout = function() {
              clearTimeout(_timeoutID);
            };
            shouldYieldToHost = function() {
              return false;
            };
            requestPaint = exports2.unstable_forceFrameRate = function() {
            };
          } else {
            var performance2 = window.performance;
            var _Date = window.Date;
            var _setTimeout = window.setTimeout;
            var _clearTimeout = window.clearTimeout;
            if (typeof console !== "undefined") {
              var requestAnimationFrame = window.requestAnimationFrame;
              var cancelAnimationFrame = window.cancelAnimationFrame;
              if (typeof requestAnimationFrame !== "function") {
                console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
              }
              if (typeof cancelAnimationFrame !== "function") {
                console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
              }
            }
            if (typeof performance2 === "object" && typeof performance2.now === "function") {
              exports2.unstable_now = function() {
                return performance2.now();
              };
            } else {
              var _initialTime = _Date.now();
              exports2.unstable_now = function() {
                return _Date.now() - _initialTime;
              };
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var yieldInterval = 5;
            var deadline = 0;
            {
              shouldYieldToHost = function() {
                return exports2.unstable_now() >= deadline;
              };
              requestPaint = function() {
              };
            }
            exports2.unstable_forceFrameRate = function(fps) {
              if (fps < 0 || fps > 125) {
                console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported");
                return;
              }
              if (fps > 0) {
                yieldInterval = Math.floor(1e3 / fps);
              } else {
                yieldInterval = 5;
              }
            };
            var performWorkUntilDeadline = function() {
              if (scheduledHostCallback !== null) {
                var currentTime = exports2.unstable_now();
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                  var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                  if (!hasMoreWork) {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                  } else {
                    port.postMessage(null);
                  }
                } catch (error) {
                  port.postMessage(null);
                  throw error;
                }
              } else {
                isMessageLoopRunning = false;
              }
            };
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            requestHostCallback = function(callback) {
              scheduledHostCallback = callback;
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
              }
            };
            requestHostTimeout = function(callback, ms) {
              taskTimeoutID = _setTimeout(function() {
                callback(exports2.unstable_now());
              }, ms);
            };
            cancelHostTimeout = function() {
              _clearTimeout(taskTimeoutID);
              taskTimeoutID = -1;
            };
          }
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            var first = heap[0];
            return first === void 0 ? null : first;
          }
          function pop(heap) {
            var first = heap[0];
            if (first !== void 0) {
              var last2 = heap.pop();
              if (last2 !== first) {
                heap[0] = last2;
                siftDown(heap, last2, 0);
              }
              return first;
            } else {
              return null;
            }
          }
          function siftUp(heap, node, i) {
            var index = i;
            while (true) {
              var parentIndex = index - 1 >>> 1;
              var parent2 = heap[parentIndex];
              if (parent2 !== void 0 && compare(parent2, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent2;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i) {
            var index = i;
            var length = heap.length;
            while (index < length) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (left !== void 0 && compare(left, node) < 0) {
                if (right !== void 0 && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (right !== void 0 && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff2 = a.sortIndex - b.sortIndex;
            return diff2 !== 0 ? diff2 : a.id - b.id;
          }
          var NoPriority = 0;
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          var runIdCounter = 0;
          var mainThreadIdCounter = 0;
          var profilingStateSize = 4;
          var sharedProfilingBuffer = typeof SharedArrayBuffer === "function" ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : typeof ArrayBuffer === "function" ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null;
          var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : [];
          var PRIORITY = 0;
          var CURRENT_TASK_ID = 1;
          var CURRENT_RUN_ID = 2;
          var QUEUE_SIZE = 3;
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[QUEUE_SIZE] = 0;
            profilingState[CURRENT_TASK_ID] = 0;
          }
          var INITIAL_EVENT_LOG_SIZE = 131072;
          var MAX_EVENT_LOG_SIZE = 524288;
          var eventLogSize = 0;
          var eventLogBuffer = null;
          var eventLog = null;
          var eventLogIndex = 0;
          var TaskStartEvent = 1;
          var TaskCompleteEvent = 2;
          var TaskErrorEvent = 3;
          var TaskCancelEvent = 4;
          var TaskRunEvent = 5;
          var TaskYieldEvent = 6;
          var SchedulerSuspendEvent = 7;
          var SchedulerResumeEvent = 8;
          function logEvent(entries) {
            if (eventLog !== null) {
              var offset2 = eventLogIndex;
              eventLogIndex += entries.length;
              if (eventLogIndex + 1 > eventLogSize) {
                eventLogSize *= 2;
                if (eventLogSize > MAX_EVENT_LOG_SIZE) {
                  console["error"]("Scheduler Profiling: Event log exceeded maximum size. Don't forget to call `stopLoggingProfilingEvents()`.");
                  stopLoggingProfilingEvents();
                  return;
                }
                var newEventLog = new Int32Array(eventLogSize * 4);
                newEventLog.set(eventLog);
                eventLogBuffer = newEventLog.buffer;
                eventLog = newEventLog;
              }
              eventLog.set(entries, offset2);
            }
          }
          function startLoggingProfilingEvents() {
            eventLogSize = INITIAL_EVENT_LOG_SIZE;
            eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
            eventLog = new Int32Array(eventLogBuffer);
            eventLogIndex = 0;
          }
          function stopLoggingProfilingEvents() {
            var buffer = eventLogBuffer;
            eventLogSize = 0;
            eventLogBuffer = null;
            eventLog = null;
            eventLogIndex = 0;
            return buffer;
          }
          function markTaskStart(task, ms) {
            {
              profilingState[QUEUE_SIZE]++;
              if (eventLog !== null) {
                logEvent([TaskStartEvent, ms * 1e3, task.id, task.priorityLevel]);
              }
            }
          }
          function markTaskCompleted(task, ms) {
            {
              profilingState[PRIORITY] = NoPriority;
              profilingState[CURRENT_TASK_ID] = 0;
              profilingState[QUEUE_SIZE]--;
              if (eventLog !== null) {
                logEvent([TaskCompleteEvent, ms * 1e3, task.id]);
              }
            }
          }
          function markTaskCanceled(task, ms) {
            {
              profilingState[QUEUE_SIZE]--;
              if (eventLog !== null) {
                logEvent([TaskCancelEvent, ms * 1e3, task.id]);
              }
            }
          }
          function markTaskErrored(task, ms) {
            {
              profilingState[PRIORITY] = NoPriority;
              profilingState[CURRENT_TASK_ID] = 0;
              profilingState[QUEUE_SIZE]--;
              if (eventLog !== null) {
                logEvent([TaskErrorEvent, ms * 1e3, task.id]);
              }
            }
          }
          function markTaskRun(task, ms) {
            {
              runIdCounter++;
              profilingState[PRIORITY] = task.priorityLevel;
              profilingState[CURRENT_TASK_ID] = task.id;
              profilingState[CURRENT_RUN_ID] = runIdCounter;
              if (eventLog !== null) {
                logEvent([TaskRunEvent, ms * 1e3, task.id, runIdCounter]);
              }
            }
          }
          function markTaskYield(task, ms) {
            {
              profilingState[PRIORITY] = NoPriority;
              profilingState[CURRENT_TASK_ID] = 0;
              profilingState[CURRENT_RUN_ID] = 0;
              if (eventLog !== null) {
                logEvent([TaskYieldEvent, ms * 1e3, task.id, runIdCounter]);
              }
            }
          }
          function markSchedulerSuspended(ms) {
            {
              mainThreadIdCounter++;
              if (eventLog !== null) {
                logEvent([SchedulerSuspendEvent, ms * 1e3, mainThreadIdCounter]);
              }
            }
          }
          function markSchedulerUnsuspended(ms) {
            {
              if (eventLog !== null) {
                logEvent([SchedulerResumeEvent, ms * 1e3, mainThreadIdCounter]);
              }
            }
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
                {
                  markTaskStart(timer, currentTime);
                  timer.isQueued = true;
                }
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            {
              markSchedulerUnsuspended(initialTime2);
            }
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports2.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
              {
                var _currentTime = exports2.unstable_now();
                markSchedulerSuspended(_currentTime);
              }
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (callback !== null) {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                markTaskRun(currentTask, currentTime);
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports2.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                  markTaskYield(currentTask, currentTime);
                } else {
                  {
                    markTaskCompleted(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function timeoutForPriorityLevel(priorityLevel) {
            switch (priorityLevel) {
              case ImmediatePriority:
                return IMMEDIATE_PRIORITY_TIMEOUT;
              case UserBlockingPriority:
                return USER_BLOCKING_PRIORITY;
              case IdlePriority:
                return IDLE_PRIORITY;
              case LowPriority:
                return LOW_PRIORITY_TIMEOUT;
              case NormalPriority:
              default:
                return NORMAL_PRIORITY_TIMEOUT;
            }
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports2.unstable_now();
            var startTime;
            var timeout;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime = currentTime + delay;
              } else {
                startTime = currentTime;
              }
              timeout = typeof options.timeout === "number" ? options.timeout : timeoutForPriorityLevel(priorityLevel);
            } else {
              timeout = timeoutForPriorityLevel(priorityLevel);
              startTime = currentTime;
            }
            var expirationTime = startTime + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime,
              expirationTime,
              sortIndex: -1
            };
            {
              newTask.isQueued = false;
            }
            if (startTime > currentTime) {
              newTask.sortIndex = startTime;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              {
                markTaskStart(newTask, currentTime);
                newTask.isQueued = true;
              }
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            {
              if (task.isQueued) {
                var currentTime = exports2.unstable_now();
                markTaskCanceled(task, currentTime);
                task.isQueued = false;
              }
            }
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          function unstable_shouldYield() {
            var currentTime = exports2.unstable_now();
            advanceTimers(currentTime);
            var firstTask = peek(taskQueue);
            return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = {
            startLoggingProfilingEvents,
            stopLoggingProfilingEvents,
            sharedProfilingBuffer
          };
          exports2.unstable_IdlePriority = IdlePriority;
          exports2.unstable_ImmediatePriority = ImmediatePriority;
          exports2.unstable_LowPriority = LowPriority;
          exports2.unstable_NormalPriority = NormalPriority;
          exports2.unstable_Profiling = unstable_Profiling;
          exports2.unstable_UserBlockingPriority = UserBlockingPriority;
          exports2.unstable_cancelCallback = unstable_cancelCallback;
          exports2.unstable_continueExecution = unstable_continueExecution;
          exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports2.unstable_next = unstable_next;
          exports2.unstable_pauseExecution = unstable_pauseExecution;
          exports2.unstable_requestPaint = unstable_requestPaint;
          exports2.unstable_runWithPriority = unstable_runWithPriority;
          exports2.unstable_scheduleCallback = unstable_scheduleCallback;
          exports2.unstable_shouldYield = unstable_shouldYield;
          exports2.unstable_wrapCallback = unstable_wrapCallback;
        })();
      }
    })(scheduler_development);
    (function(module2) {
      {
        module2.exports = scheduler_development;
      }
    })(scheduler);
    var tracing = { exports: {} };
    var schedulerTracing_development = {};
    /** @license React v0.19.1
     * scheduler-tracing.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    (function(exports2) {
      {
        (function() {
          var DEFAULT_THREAD_ID = 0;
          var interactionIDCounter = 0;
          var threadIDCounter = 0;
          exports2.__interactionsRef = null;
          exports2.__subscriberRef = null;
          {
            exports2.__interactionsRef = {
              current: /* @__PURE__ */ new Set()
            };
            exports2.__subscriberRef = {
              current: null
            };
          }
          function unstable_clear(callback) {
            var prevInteractions = exports2.__interactionsRef.current;
            exports2.__interactionsRef.current = /* @__PURE__ */ new Set();
            try {
              return callback();
            } finally {
              exports2.__interactionsRef.current = prevInteractions;
            }
          }
          function unstable_getCurrent() {
            {
              return exports2.__interactionsRef.current;
            }
          }
          function unstable_getThreadID() {
            return ++threadIDCounter;
          }
          function unstable_trace(name, timestamp, callback) {
            var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
            var interaction = {
              __count: 1,
              id: interactionIDCounter++,
              name,
              timestamp
            };
            var prevInteractions = exports2.__interactionsRef.current;
            var interactions = new Set(prevInteractions);
            interactions.add(interaction);
            exports2.__interactionsRef.current = interactions;
            var subscriber = exports2.__subscriberRef.current;
            var returnValue;
            try {
              if (subscriber !== null) {
                subscriber.onInteractionTraced(interaction);
              }
            } finally {
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(interactions, threadID);
                }
              } finally {
                try {
                  returnValue = callback();
                } finally {
                  exports2.__interactionsRef.current = prevInteractions;
                  try {
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(interactions, threadID);
                    }
                  } finally {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  }
                }
              }
            }
            return returnValue;
          }
          function unstable_wrap(callback) {
            var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
            var wrappedInteractions = exports2.__interactionsRef.current;
            var subscriber = exports2.__subscriberRef.current;
            if (subscriber !== null) {
              subscriber.onWorkScheduled(wrappedInteractions, threadID);
            }
            wrappedInteractions.forEach(function(interaction) {
              interaction.__count++;
            });
            var hasRun = false;
            function wrapped() {
              var prevInteractions = exports2.__interactionsRef.current;
              exports2.__interactionsRef.current = wrappedInteractions;
              subscriber = exports2.__subscriberRef.current;
              try {
                var returnValue;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStarted(wrappedInteractions, threadID);
                  }
                } finally {
                  try {
                    returnValue = callback.apply(void 0, arguments);
                  } finally {
                    exports2.__interactionsRef.current = prevInteractions;
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                  }
                }
                return returnValue;
              } finally {
                if (!hasRun) {
                  hasRun = true;
                  wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  });
                }
              }
            }
            wrapped.cancel = function cancel() {
              subscriber = exports2.__subscriberRef.current;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkCanceled(wrappedInteractions, threadID);
                }
              } finally {
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            };
            return wrapped;
          }
          var subscribers = null;
          {
            subscribers = /* @__PURE__ */ new Set();
          }
          function unstable_subscribe(subscriber) {
            {
              subscribers.add(subscriber);
              if (subscribers.size === 1) {
                exports2.__subscriberRef.current = {
                  onInteractionScheduledWorkCompleted,
                  onInteractionTraced,
                  onWorkCanceled,
                  onWorkScheduled,
                  onWorkStarted,
                  onWorkStopped
                };
              }
            }
          }
          function unstable_unsubscribe(subscriber) {
            {
              subscribers.delete(subscriber);
              if (subscribers.size === 0) {
                exports2.__subscriberRef.current = null;
              }
            }
          }
          function onInteractionTraced(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionTraced(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onInteractionScheduledWorkCompleted(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkScheduled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkScheduled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStarted(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStopped(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStopped(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkCanceled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkCanceled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          exports2.unstable_clear = unstable_clear;
          exports2.unstable_getCurrent = unstable_getCurrent;
          exports2.unstable_getThreadID = unstable_getThreadID;
          exports2.unstable_subscribe = unstable_subscribe;
          exports2.unstable_trace = unstable_trace;
          exports2.unstable_unsubscribe = unstable_unsubscribe;
          exports2.unstable_wrap = unstable_wrap;
        })();
      }
    })(schedulerTracing_development);
    (function(module2) {
      {
        module2.exports = schedulerTracing_development;
      }
    })(tracing);
    /** @license React v16.14.0
     * react-dom.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    {
      (function() {
        var React2 = react.exports;
        var _assign = objectAssign;
        var Scheduler = scheduler.exports;
        var checkPropTypes2 = checkPropTypes_1;
        var tracing$1 = tracing.exports;
        var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        if (!ReactSharedInternals.hasOwnProperty("ReactCurrentDispatcher")) {
          ReactSharedInternals.ReactCurrentDispatcher = {
            current: null
          };
        }
        if (!ReactSharedInternals.hasOwnProperty("ReactCurrentBatchConfig")) {
          ReactSharedInternals.ReactCurrentBatchConfig = {
            suspense: null
          };
        }
        function warn2(format2) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning2("warn", format2, args);
          }
        }
        function error(format2) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning2("error", format2, args);
          }
        }
        function printWarning2(level, format2, args) {
          {
            var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === "string" && args[args.length - 1].indexOf("\n    in") === 0;
            if (!hasExistingStack) {
              var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format2);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
            try {
              var argIndex = 0;
              var message = "Warning: " + format2.replace(/%s/g, function() {
                return args[argIndex++];
              });
              throw new Error(message);
            } catch (x) {
            }
          }
        }
        if (!React2) {
          {
            throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
          }
        }
        var invokeGuardedCallbackImpl = function(name, func, context2, a, b, c, d, e, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context2, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        };
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            var invokeGuardedCallbackDev = function(name, func, context2, a, b, c, d, e, f) {
              if (!(typeof document !== "undefined")) {
                {
                  throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
              }
              var evt = document.createEvent("Event");
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
                func.apply(context2, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://fb.me/react-crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
            };
            invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name, func, context2, a, b, c, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name, func, context2, a, b, c, d, e, f) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            {
              {
                throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        var getFiberCurrentPropsFromNode = null;
        var getInstanceFromNode = null;
        var getNodeFromInstance = null;
        function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
          getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
          getInstanceFromNode = getInstanceFromNodeImpl;
          getNodeFromInstance = getNodeFromInstanceImpl;
          {
            if (!getNodeFromInstance || !getInstanceFromNode) {
              error("EventPluginUtils.setComponentTree(...): Injected module is missing getNodeFromInstance or getInstanceFromNode.");
            }
          }
        }
        var validateEventDispatches;
        {
          validateEventDispatches = function(event) {
            var dispatchListeners = event._dispatchListeners;
            var dispatchInstances = event._dispatchInstances;
            var listenersIsArr = Array.isArray(dispatchListeners);
            var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
            var instancesIsArr = Array.isArray(dispatchInstances);
            var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
            if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {
              error("EventPluginUtils: Invalid `event`.");
            }
          };
        }
        function executeDispatch(event, listener, inst) {
          var type = event.type || "unknown-event";
          event.currentTarget = getNodeFromInstance(inst);
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function executeDispatchesInOrder(event) {
          var dispatchListeners = event._dispatchListeners;
          var dispatchInstances = event._dispatchInstances;
          {
            validateEventDispatches(event);
          }
          if (Array.isArray(dispatchListeners)) {
            for (var i = 0; i < dispatchListeners.length; i++) {
              if (event.isPropagationStopped()) {
                break;
              }
              executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
            }
          } else if (dispatchListeners) {
            executeDispatch(event, dispatchListeners, dispatchInstances);
          }
          event._dispatchListeners = null;
          event._dispatchInstances = null;
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment2 = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var FundamentalComponent = 20;
        var ScopeComponent = 21;
        var Block = 22;
        var eventPluginOrder = null;
        var namesToPlugins = {};
        function recomputePluginOrdering() {
          if (!eventPluginOrder) {
            return;
          }
          for (var pluginName in namesToPlugins) {
            var pluginModule = namesToPlugins[pluginName];
            var pluginIndex = eventPluginOrder.indexOf(pluginName);
            if (!(pluginIndex > -1)) {
              {
                throw Error("EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`.");
              }
            }
            if (plugins[pluginIndex]) {
              continue;
            }
            if (!pluginModule.extractEvents) {
              {
                throw Error("EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not.");
              }
            }
            plugins[pluginIndex] = pluginModule;
            var publishedEvents = pluginModule.eventTypes;
            for (var eventName in publishedEvents) {
              if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
                {
                  throw Error("EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`.");
                }
              }
            }
          }
        }
        function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
          if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
            {
              throw Error("EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + eventName + "`.");
            }
          }
          eventNameDispatchConfigs[eventName] = dispatchConfig;
          var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
          if (phasedRegistrationNames) {
            for (var phaseName in phasedRegistrationNames) {
              if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                var phasedRegistrationName = phasedRegistrationNames[phaseName];
                publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
              }
            }
            return true;
          } else if (dispatchConfig.registrationName) {
            publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
            return true;
          }
          return false;
        }
        function publishRegistrationName(registrationName, pluginModule, eventName) {
          if (!!registrationNameModules[registrationName]) {
            {
              throw Error("EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + registrationName + "`.");
            }
          }
          registrationNameModules[registrationName] = pluginModule;
          registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
        }
        var plugins = [];
        var eventNameDispatchConfigs = {};
        var registrationNameModules = {};
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function injectEventPluginOrder(injectedEventPluginOrder) {
          if (!!eventPluginOrder) {
            {
              throw Error("EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.");
            }
          }
          eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
          recomputePluginOrdering();
        }
        function injectEventPluginsByName(injectedNamesToPlugins) {
          var isOrderingDirty = false;
          for (var pluginName in injectedNamesToPlugins) {
            if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
              continue;
            }
            var pluginModule = injectedNamesToPlugins[pluginName];
            if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
              if (!!namesToPlugins[pluginName]) {
                {
                  throw Error("EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`.");
                }
              }
              namesToPlugins[pluginName] = pluginModule;
              isOrderingDirty = true;
            }
          }
          if (isOrderingDirty) {
            recomputePluginOrdering();
          }
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var PLUGIN_EVENT_SYSTEM = 1;
        var IS_REPLAYED = 1 << 5;
        var IS_FIRST_ANCESTOR = 1 << 6;
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (!(typeof restoreImpl === "function")) {
            {
              throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i = 0; i < queuedTargets.length; i++) {
              restoreStateOfTarget(queuedTargets[i]);
            }
          }
        }
        var enableProfilerTimer = true;
        var enableDeprecatedFlareAPI = false;
        var enableFundamentalAPI = false;
        var warnAboutStringRefs = false;
        var batchedUpdatesImpl = function(fn, bookkeeping) {
          return fn(bookkeeping);
        };
        var discreteUpdatesImpl = function(fn, a, b, c, d) {
          return fn(a, b, c, d);
        };
        var flushDiscreteUpdatesImpl = function() {
        };
        var batchedEventUpdatesImpl = batchedUpdatesImpl;
        var isInsideEventHandler = false;
        var isBatchingEventUpdates = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushDiscreteUpdatesImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, bookkeeping) {
          if (isInsideEventHandler) {
            return fn(bookkeeping);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn, bookkeeping);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function batchedEventUpdates(fn, a, b) {
          if (isBatchingEventUpdates) {
            return fn(a, b);
          }
          isBatchingEventUpdates = true;
          try {
            return batchedEventUpdatesImpl(fn, a, b);
          } finally {
            isBatchingEventUpdates = false;
            finishEventHandler();
          }
        }
        function discreteUpdates(fn, a, b, c, d) {
          var prevIsInsideEventHandler = isInsideEventHandler;
          isInsideEventHandler = true;
          try {
            return discreteUpdatesImpl(fn, a, b, c, d);
          } finally {
            isInsideEventHandler = prevIsInsideEventHandler;
            if (!isInsideEventHandler) {
              finishEventHandler();
            }
          }
        }
        function flushDiscreteUpdatesIfNeeded(timeStamp) {
          if (!isInsideEventHandler && !enableDeprecatedFlareAPI) {
            flushDiscreteUpdatesImpl();
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          discreteUpdatesImpl = _discreteUpdatesImpl;
          flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
          batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
        }
        var DiscreteEvent = 0;
        var UserBlockingEvent = 1;
        var ContinuousEvent = 2;
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var ROOT_ATTRIBUTE_NAME = "data-reactroot";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value2, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value2) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix = name.toLowerCase().slice(0, 5);
                return prefix !== "data-" && prefix !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name, value2, propertyInfo, isCustomComponentTag) {
          if (value2 === null || typeof value2 === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value2, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value2;
              case OVERLOADED_BOOLEAN:
                return value2 === false;
              case NUMERIC:
                return isNaN(value2);
              case POSITIVE_NUMERIC:
                return isNaN(value2) || value2 < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            RESERVED,
            false,
            name,
            null,
            false
          );
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            attributeName,
            null,
            false
          );
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            name.toLowerCase(),
            null,
            false
          );
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            name,
            null,
            false
          );
        });
        [
          "allowFullScreen",
          "async",
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          "itemScope"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            false,
            name.toLowerCase(),
            null,
            false
          );
        });
        [
          "checked",
          "multiple",
          "muted",
          "selected"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            true,
            name,
            null,
            false
          );
        });
        [
          "capture",
          "download"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            OVERLOADED_BOOLEAN,
            false,
            name,
            null,
            false
          );
        });
        [
          "cols",
          "rows",
          "size",
          "span"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            POSITIVE_NUMERIC,
            false,
            name,
            null,
            false
          );
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            NUMERIC,
            false,
            name.toLowerCase(),
            null,
            false
          );
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token2) {
          return token2[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            attributeName,
            null,
            false
          );
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            attributeName,
            "http://www.w3.org/1999/xlink",
            false
          );
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            attributeName,
            "http://www.w3.org/XML/1998/namespace",
            false
          );
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            attributeName.toLowerCase(),
            null,
            false
          );
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord(
          "xlinkHref",
          STRING,
          false,
          "xlink:href",
          "http://www.w3.org/1999/xlink",
          true
        );
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            attributeName.toLowerCase(),
            null,
            true
          );
        });
        {
          ReactSharedInternals.ReactDebugCurrentFrame;
        }
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node, name, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value2 = node.getAttribute(attributeName);
                  if (value2 === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return value2;
                  }
                  if (value2 === "" + expected) {
                    return expected;
                  }
                  return value2;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node, name, expected) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (!node.hasAttribute(name)) {
              return expected === void 0 ? void 0 : null;
            }
            var value2 = node.getAttribute(name);
            if (value2 === "" + expected) {
              return expected;
            }
            return value2;
          }
        }
        function setValueForProperty(node, name, value2, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name);
          if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name, value2, propertyInfo, isCustomComponentTag)) {
            value2 = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              if (value2 === null) {
                node.removeAttribute(_attributeName);
              } else {
                node.setAttribute(_attributeName, "" + value2);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value2 === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node[propertyName] = value2;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value2 === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value2 === true) {
              attributeValue = "";
            } else {
              {
                attributeValue = "" + value2;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
        function describeComponentFrame(name, source, ownerName) {
          var sourceInfo = "";
          if (source) {
            var path = source.fileName;
            var fileName = path.replace(BEFORE_SLASH_RE, "");
            {
              if (/^index\./.test(fileName)) {
                var match5 = path.match(BEFORE_SLASH_RE);
                if (match5) {
                  var pathBeforeSlash = match5[1];
                  if (pathBeforeSlash) {
                    var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, "");
                    fileName = folderName + "/" + fileName;
                  }
                }
              }
            }
            sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
          } else if (ownerName) {
            sourceInfo = " (created by " + ownerName + ")";
          }
          return "\n    in " + (name || "Unknown") + sourceInfo;
        }
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function refineResolvedLazyComponent(lazyComponent) {
          return lazyComponent._status === Resolved ? lazyComponent._result : null;
        }
        function initializeLazyComponentType(lazyComponent) {
          if (lazyComponent._status === Uninitialized) {
            lazyComponent._status = Pending;
            var ctor = lazyComponent._ctor;
            var thenable = ctor();
            lazyComponent._result = thenable;
            thenable.then(function(moduleObject) {
              if (lazyComponent._status === Pending) {
                var defaultExport = moduleObject.default;
                {
                  if (defaultExport === void 0) {
                    error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                  }
                }
                lazyComponent._status = Resolved;
                lazyComponent._result = defaultExport;
              }
            }, function(error2) {
              if (lazyComponent._status === Pending) {
                lazyComponent._status = Rejected;
                lazyComponent._result = error2;
              }
            });
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                return "Context.Consumer";
              case REACT_PROVIDER_TYPE:
                return "Context.Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type.render);
              case REACT_LAZY_TYPE: {
                var thenable = type;
                var resolvedThenable = refineResolvedLazyComponent(thenable);
                if (resolvedThenable) {
                  return getComponentName(resolvedThenable);
                }
                break;
              }
            }
          }
          return null;
        }
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function describeFiber(fiber) {
          switch (fiber.tag) {
            case HostRoot:
            case HostPortal:
            case HostText:
            case Fragment2:
            case ContextProvider:
            case ContextConsumer:
              return "";
            default:
              var owner = fiber._debugOwner;
              var source = fiber._debugSource;
              var name = getComponentName(fiber.type);
              var ownerName = null;
              if (owner) {
                ownerName = getComponentName(owner.type);
              }
              return describeComponentFrame(name, source, ownerName);
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          var info = "";
          var node = workInProgress2;
          do {
            info += describeFiber(node);
            node = node.return;
          } while (node);
          return info;
        }
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentName(owner.type);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame$1.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function toString2(value2) {
          return "" + value2;
        }
        function getToStringValue(value2) {
          switch (typeof value2) {
            case "boolean":
            case "number":
            case "object":
            case "string":
            case "undefined":
              return value2;
            default:
              return "";
          }
        }
        var ReactDebugCurrentFrame$2 = null;
        var ReactControlledValuePropTypes = {
          checkPropTypes: null
        };
        {
          ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          var propTypes2 = {
            value: function(props, propName, componentName) {
              if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI) {
                return null;
              }
              return new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            },
            checked: function(props, propName, componentName) {
              if (props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI) {
                return null;
              }
              return new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          };
          ReactControlledValuePropTypes.checkPropTypes = function(tagName, props) {
            checkPropTypes2(propTypes2, props, "prop", tagName, ReactDebugCurrentFrame$2.getStackAddendum);
          };
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value2 = "";
          if (!node) {
            return value2;
          }
          if (isCheckable(node)) {
            value2 = node.checked ? "true" : "false";
          } else {
            value2 = node.value;
          }
          return value2;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get3 = descriptor.get, set3 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get3.call(this);
            },
            set: function(value2) {
              currentValue = "" + value2;
              set3.call(this, value2);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value2) {
              currentValue = "" + value2;
            },
            stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        function track(node) {
          if (getTracker(node)) {
            return;
          }
          node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node = element;
          var checked = props.checked;
          var hostProps = _assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            ReactControlledValuePropTypes.checkPropTypes("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node = element;
          var defaultValue2 = props.defaultValue == null ? "" : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue2),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node, "checked", checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);
            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error("A component is changing an uncontrolled input of type %s to be controlled. Input elements should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components", props.type);
              didWarnUncontrolledToControlled = true;
            }
            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error("A component is changing a controlled input of type %s to be uncontrolled. Input elements should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://fb.me/react-controlled-components", props.type);
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value2 = getToStringValue(props.value);
          var type = props.type;
          if (value2 != null) {
            if (type === "number") {
              if (value2 === 0 && node.value === "" || node.value != value2) {
                node.value = toString2(value2);
              }
            } else if (node.value !== toString2(value2)) {
              node.value = toString2(value2);
            }
          } else if (type === "submit" || type === "reset") {
            node.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node, props.type, value2);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString2(node._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var name = node.name;
          if (name !== "") {
            node.name = "";
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }
          if (name !== "") {
            node.name = name;
          }
        }
        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name = props.name;
          if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            var group2 = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for (var i = 0; i < group2.length; i++) {
              var otherNode = group2[i];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
              if (!otherProps) {
                {
                  throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node, type, value2) {
          if (type !== "number" || node.ownerDocument.activeElement !== node) {
            if (value2 == null) {
              node.defaultValue = toString2(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString2(value2)) {
              node.defaultValue = toString2(value2);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        function flattenChildren(children) {
          var content = "";
          React2.Children.forEach(children, function(child) {
            if (child == null) {
              return;
            }
            content += child;
          });
          return content;
        }
        function validateProps(element, props) {
          {
            if (typeof props.children === "object" && props.children !== null) {
              React2.Children.forEach(props.children, function(child) {
                if (child == null) {
                  return;
                }
                if (typeof child === "string" || typeof child === "number") {
                  return;
                }
                if (typeof child.type !== "string") {
                  return;
                }
                if (!didWarnInvalidChild) {
                  didWarnInvalidChild = true;
                  error("Only strings and numbers are supported as <option> children.");
                }
              });
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute("value", toString2(getToStringValue(props.value)));
          }
        }
        function getHostProps$1(element, props) {
          var hostProps = _assign({
            children: void 0
          }, props);
          var content = flattenChildren(props.children);
          if (content) {
            hostProps.children = content;
          }
          return hostProps;
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            ReactControlledValuePropTypes.checkPropTypes("select", props);
            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i];
              if (props[propName] == null) {
                continue;
              }
              var isArray3 = Array.isArray(props[propName]);
              if (props.multiple && !isArray3) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && isArray3) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i = 0; i < selectedValues.length; i++) {
              selectedValue["$" + selectedValues[i]] = true;
            }
            for (var _i = 0; _i < options.length; _i++) {
              var selected = selectedValue.hasOwnProperty("$" + options[_i].value);
              if (options[_i].selected !== selected) {
                options[_i].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString2(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options.length; _i2++) {
              if (options[_i2].value === _selectedValue) {
                options[_i2].selected = true;
                if (setDefaultSelected) {
                  options[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options[_i2].disabled) {
                defaultSelected = options[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$2(element, props) {
          return _assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node = element;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://fb.me/react-controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value2 = props.value;
          if (value2 != null) {
            updateOptions(node, !!props.multiple, value2, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node = element;
          var wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value2 = props.value;
          if (value2 != null) {
            updateOptions(node, !!props.multiple, value2, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node = element;
          var value2 = props.value;
          if (value2 != null) {
            updateOptions(node, !!props.multiple, value2, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$3(element, props) {
          var node = element;
          if (!(props.dangerouslySetInnerHTML == null)) {
            {
              throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
          }
          var hostProps = _assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString2(node._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node = element;
          {
            ReactControlledValuePropTypes.checkPropTypes("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://fb.me/react-controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children, defaultValue2 = props.defaultValue;
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (!(defaultValue2 == null)) {
                  {
                    throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                }
                if (Array.isArray(children)) {
                  if (!(children.length <= 1)) {
                    {
                      throw Error("<textarea> can only have at most one child.");
                    }
                  }
                  children = children[0];
                }
                defaultValue2 = children;
              }
            }
            if (defaultValue2 == null) {
              defaultValue2 = "";
            }
            initialValue = defaultValue2;
          }
          node._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node = element;
          var value2 = getToStringValue(props.value);
          var defaultValue2 = getToStringValue(props.defaultValue);
          if (value2 != null) {
            var newValue = toString2(value2);
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }
          if (defaultValue2 != null) {
            node.defaultValue = toString2(defaultValue2);
          }
        }
        function postMountWrapper$3(element, props) {
          var node = element;
          var textContent = node.textContent;
          if (textContent === node._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        var Namespaces = {
          html: HTML_NAMESPACE,
          mathml: MATH_NAMESPACE,
          svg: SVG_NAMESPACE
        };
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
          if (node.namespaceURI === Namespaces.svg) {
            if (!("innerHTML" in node)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }
              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node.innerHTML = html;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        };
        function unsafeCastStringToDOMTopLevelType(topLevelType) {
          return topLevelType;
        }
        function unsafeCastDOMTopLevelTypeToString(topLevelType) {
          return topLevelType;
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style = {};
        if (canUseDOM) {
          style = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var TOP_ABORT = unsafeCastStringToDOMTopLevelType("abort");
        var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("animationend"));
        var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("animationiteration"));
        var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("animationstart"));
        var TOP_BLUR = unsafeCastStringToDOMTopLevelType("blur");
        var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType("canplay");
        var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType("canplaythrough");
        var TOP_CANCEL = unsafeCastStringToDOMTopLevelType("cancel");
        var TOP_CHANGE = unsafeCastStringToDOMTopLevelType("change");
        var TOP_CLICK = unsafeCastStringToDOMTopLevelType("click");
        var TOP_CLOSE = unsafeCastStringToDOMTopLevelType("close");
        var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType("compositionend");
        var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType("compositionstart");
        var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType("compositionupdate");
        var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType("contextmenu");
        var TOP_COPY = unsafeCastStringToDOMTopLevelType("copy");
        var TOP_CUT = unsafeCastStringToDOMTopLevelType("cut");
        var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType("dblclick");
        var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType("auxclick");
        var TOP_DRAG = unsafeCastStringToDOMTopLevelType("drag");
        var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType("dragend");
        var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType("dragenter");
        var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType("dragexit");
        var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType("dragleave");
        var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType("dragover");
        var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType("dragstart");
        var TOP_DROP = unsafeCastStringToDOMTopLevelType("drop");
        var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType("durationchange");
        var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType("emptied");
        var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType("encrypted");
        var TOP_ENDED = unsafeCastStringToDOMTopLevelType("ended");
        var TOP_ERROR = unsafeCastStringToDOMTopLevelType("error");
        var TOP_FOCUS = unsafeCastStringToDOMTopLevelType("focus");
        var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType("gotpointercapture");
        var TOP_INPUT = unsafeCastStringToDOMTopLevelType("input");
        var TOP_INVALID = unsafeCastStringToDOMTopLevelType("invalid");
        var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType("keydown");
        var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType("keypress");
        var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType("keyup");
        var TOP_LOAD = unsafeCastStringToDOMTopLevelType("load");
        var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType("loadstart");
        var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType("loadeddata");
        var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType("loadedmetadata");
        var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType("lostpointercapture");
        var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType("mousedown");
        var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType("mousemove");
        var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType("mouseout");
        var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType("mouseover");
        var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType("mouseup");
        var TOP_PASTE = unsafeCastStringToDOMTopLevelType("paste");
        var TOP_PAUSE = unsafeCastStringToDOMTopLevelType("pause");
        var TOP_PLAY = unsafeCastStringToDOMTopLevelType("play");
        var TOP_PLAYING = unsafeCastStringToDOMTopLevelType("playing");
        var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType("pointercancel");
        var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType("pointerdown");
        var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType("pointermove");
        var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType("pointerout");
        var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType("pointerover");
        var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType("pointerup");
        var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType("progress");
        var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType("ratechange");
        var TOP_RESET = unsafeCastStringToDOMTopLevelType("reset");
        var TOP_SCROLL = unsafeCastStringToDOMTopLevelType("scroll");
        var TOP_SEEKED = unsafeCastStringToDOMTopLevelType("seeked");
        var TOP_SEEKING = unsafeCastStringToDOMTopLevelType("seeking");
        var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType("selectionchange");
        var TOP_STALLED = unsafeCastStringToDOMTopLevelType("stalled");
        var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType("submit");
        var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType("suspend");
        var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType("textInput");
        var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType("timeupdate");
        var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType("toggle");
        var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType("touchcancel");
        var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType("touchend");
        var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType("touchmove");
        var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType("touchstart");
        var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName("transitionend"));
        var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType("volumechange");
        var TOP_WAITING = unsafeCastStringToDOMTopLevelType("waiting");
        var TOP_WHEEL = unsafeCastStringToDOMTopLevelType("wheel");
        var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];
        function getRawEventName(topLevelType) {
          return unsafeCastDOMTopLevelTypeToString(topLevelType);
        }
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        var elementListenerMap = new PossiblyWeakMap();
        function getListenerMapForElement(element) {
          var listenerMap = elementListenerMap.get(element);
          if (listenerMap === void 0) {
            listenerMap = /* @__PURE__ */ new Map();
            elementListenerMap.set(element, listenerMap);
          }
          return listenerMap;
        }
        function get2(key) {
          return key._reactInternalFiber;
        }
        function has2(key) {
          return key._reactInternalFiber !== void 0;
        }
        function set2(key, value2) {
          key._reactInternalFiber = value2;
        }
        var NoEffect = 0;
        var PerformedWork = 1;
        var Placement = 2;
        var Update = 4;
        var PlacementAndUpdate = 6;
        var Deletion = 8;
        var ContentReset = 16;
        var Callback = 32;
        var DidCapture = 64;
        var Ref = 128;
        var Snapshot = 256;
        var Passive = 512;
        var Hydrating = 1024;
        var HydratingAndUpdate = 1028;
        var LifecycleEffectMask = 932;
        var HostEffectMask = 2047;
        var Incomplete = 2048;
        var ShouldCapture = 4096;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get2(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (!(getNearestMountedFiber(fiber) === fiber)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (!(nearestMounted !== null)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a = fiber;
          var b = alternate;
          while (true) {
            var parentA = a.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a = b = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
            }
            if (a.return !== b.return) {
              a = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  {
                    throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
            }
            if (!(a.alternate === b)) {
              {
                throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if (!(a.tag === HostRoot)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
          if (a.stateNode.current === a) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent2) {
          var currentParent = findCurrentFiberUsingSlowPath(parent2);
          if (!currentParent) {
            return null;
          }
          var node = currentParent;
          while (true) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            } else if (node.child) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === currentParent) {
              return null;
            }
            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent2) {
          var currentParent = findCurrentFiberUsingSlowPath(parent2);
          if (!currentParent) {
            return null;
          }
          var node = currentParent;
          while (true) {
            if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
              return node;
            } else if (node.child && node.tag !== HostPortal) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === currentParent) {
              return null;
            }
            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function accumulateInto(current2, next) {
          if (!(next != null)) {
            {
              throw Error("accumulateInto(...): Accumulated items must not be null or undefined.");
            }
          }
          if (current2 == null) {
            return next;
          }
          if (Array.isArray(current2)) {
            if (Array.isArray(next)) {
              current2.push.apply(current2, next);
              return current2;
            }
            current2.push(next);
            return current2;
          }
          if (Array.isArray(next)) {
            return [current2].concat(next);
          }
          return [current2, next];
        }
        function forEachAccumulated(arr, cb, scope) {
          if (Array.isArray(arr)) {
            arr.forEach(cb, scope);
          } else if (arr) {
            cb.call(scope, arr);
          }
        }
        var eventQueue = null;
        var executeDispatchesAndRelease = function(event) {
          if (event) {
            executeDispatchesInOrder(event);
            if (!event.isPersistent()) {
              event.constructor.release(event);
            }
          }
        };
        var executeDispatchesAndReleaseTopLevel = function(e) {
          return executeDispatchesAndRelease(e);
        };
        function runEventsInBatch(events) {
          if (events !== null) {
            eventQueue = accumulateInto(eventQueue, events);
          }
          var processingEventQueue = eventQueue;
          eventQueue = null;
          if (!processingEventQueue) {
            return;
          }
          forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
          if (!!eventQueue) {
            {
              throw Error("processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.");
            }
          }
          rethrowCaughtError();
        }
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        /**
         * Checks if an event is supported in the current execution environment.
         *
         * NOTE: This will not work correctly for non-generic events such as `change`,
         * `reset`, `load`, `error`, and `select`.
         *
         * Borrows from Modernizr.
         *
         * @param {string} eventNameSuffix Event name, e.g. "click".
         * @return {boolean} True if the event is supported.
         * @internal
         * @license Modernizr 3.0.0pre (Custom Build) | MIT
         */
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          return isSupported;
        }
        var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
        var callbackBookkeepingPool = [];
        function releaseTopLevelCallbackBookKeeping(instance) {
          instance.topLevelType = null;
          instance.nativeEvent = null;
          instance.targetInst = null;
          instance.ancestors.length = 0;
          if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
            callbackBookkeepingPool.push(instance);
          }
        }
        function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags) {
          if (callbackBookkeepingPool.length) {
            var instance = callbackBookkeepingPool.pop();
            instance.topLevelType = topLevelType;
            instance.eventSystemFlags = eventSystemFlags;
            instance.nativeEvent = nativeEvent;
            instance.targetInst = targetInst;
            return instance;
          }
          return {
            topLevelType,
            eventSystemFlags,
            nativeEvent,
            targetInst,
            ancestors: []
          };
        }
        function findRootContainerNode(inst) {
          if (inst.tag === HostRoot) {
            return inst.stateNode.containerInfo;
          }
          while (inst.return) {
            inst = inst.return;
          }
          if (inst.tag !== HostRoot) {
            return null;
          }
          return inst.stateNode.containerInfo;
        }
        function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
          var events = null;
          for (var i = 0; i < plugins.length; i++) {
            var possiblePlugin = plugins[i];
            if (possiblePlugin) {
              var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
              if (extractedEvents) {
                events = accumulateInto(events, extractedEvents);
              }
            }
          }
          return events;
        }
        function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
          var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          runEventsInBatch(events);
        }
        function handleTopLevel(bookKeeping) {
          var targetInst = bookKeeping.targetInst;
          var ancestor = targetInst;
          do {
            if (!ancestor) {
              var ancestors = bookKeeping.ancestors;
              ancestors.push(ancestor);
              break;
            }
            var root3 = findRootContainerNode(ancestor);
            if (!root3) {
              break;
            }
            var tag = ancestor.tag;
            if (tag === HostComponent || tag === HostText) {
              bookKeeping.ancestors.push(ancestor);
            }
            ancestor = getClosestInstanceFromNode(root3);
          } while (ancestor);
          for (var i = 0; i < bookKeeping.ancestors.length; i++) {
            targetInst = bookKeeping.ancestors[i];
            var eventTarget = getEventTarget(bookKeeping.nativeEvent);
            var topLevelType = bookKeeping.topLevelType;
            var nativeEvent = bookKeeping.nativeEvent;
            var eventSystemFlags = bookKeeping.eventSystemFlags;
            if (i === 0) {
              eventSystemFlags |= IS_FIRST_ANCESTOR;
            }
            runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, eventTarget, eventSystemFlags);
          }
        }
        function dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst) {
          var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags);
          try {
            batchedEventUpdates(handleTopLevel, bookKeeping);
          } finally {
            releaseTopLevelCallbackBookKeeping(bookKeeping);
          }
        }
        function legacyListenToEvent(registrationName, mountAt) {
          var listenerMap = getListenerMapForElement(mountAt);
          var dependencies = registrationNameDependencies[registrationName];
          for (var i = 0; i < dependencies.length; i++) {
            var dependency = dependencies[i];
            legacyListenToTopLevelEvent(dependency, mountAt, listenerMap);
          }
        }
        function legacyListenToTopLevelEvent(topLevelType, mountAt, listenerMap) {
          if (!listenerMap.has(topLevelType)) {
            switch (topLevelType) {
              case TOP_SCROLL:
                trapCapturedEvent(TOP_SCROLL, mountAt);
                break;
              case TOP_FOCUS:
              case TOP_BLUR:
                trapCapturedEvent(TOP_FOCUS, mountAt);
                trapCapturedEvent(TOP_BLUR, mountAt);
                listenerMap.set(TOP_BLUR, null);
                listenerMap.set(TOP_FOCUS, null);
                break;
              case TOP_CANCEL:
              case TOP_CLOSE:
                if (isEventSupported(getRawEventName(topLevelType))) {
                  trapCapturedEvent(topLevelType, mountAt);
                }
                break;
              case TOP_INVALID:
              case TOP_SUBMIT:
              case TOP_RESET:
                break;
              default:
                var isMediaEvent = mediaEventTypes.indexOf(topLevelType) !== -1;
                if (!isMediaEvent) {
                  trapBubbledEvent(topLevelType, mountAt);
                }
                break;
            }
            listenerMap.set(topLevelType, null);
          }
        }
        function isListeningToAllDependencies(registrationName, mountAt) {
          var listenerMap = getListenerMapForElement(mountAt);
          var dependencies = registrationNameDependencies[registrationName];
          for (var i = 0; i < dependencies.length; i++) {
            var dependency = dependencies[i];
            if (!listenerMap.has(dependency)) {
              return false;
            }
          }
          return true;
        }
        var attemptUserBlockingHydration;
        function setAttemptUserBlockingHydration(fn) {
          attemptUserBlockingHydration = fn;
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = /* @__PURE__ */ new Map();
        var queuedPointerCaptures = /* @__PURE__ */ new Map();
        var queuedExplicitHydrationTargets = [];
        function hasQueuedDiscreteEvents() {
          return queuedDiscreteEvents.length > 0;
        }
        var discreteReplayableEvents = [TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_TOUCH_CANCEL, TOP_TOUCH_END, TOP_TOUCH_START, TOP_AUX_CLICK, TOP_DOUBLE_CLICK, TOP_POINTER_CANCEL, TOP_POINTER_DOWN, TOP_POINTER_UP, TOP_DRAG_END, TOP_DRAG_START, TOP_DROP, TOP_COMPOSITION_END, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_INPUT, TOP_TEXT_INPUT, TOP_CLOSE, TOP_CANCEL, TOP_COPY, TOP_CUT, TOP_PASTE, TOP_CLICK, TOP_CHANGE, TOP_CONTEXT_MENU, TOP_RESET, TOP_SUBMIT];
        var continuousReplayableEvents = [TOP_FOCUS, TOP_BLUR, TOP_DRAG_ENTER, TOP_DRAG_LEAVE, TOP_MOUSE_OVER, TOP_MOUSE_OUT, TOP_POINTER_OVER, TOP_POINTER_OUT, TOP_GOT_POINTER_CAPTURE, TOP_LOST_POINTER_CAPTURE];
        function isReplayableDiscreteEvent(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function trapReplayableEventForDocument(topLevelType, document2, listenerMap) {
          legacyListenToTopLevelEvent(topLevelType, document2, listenerMap);
        }
        function eagerlyTrapReplayableEvents(container, document2) {
          var listenerMapForDoc = getListenerMapForElement(document2);
          discreteReplayableEvents.forEach(function(topLevelType) {
            trapReplayableEventForDocument(topLevelType, document2, listenerMapForDoc);
          });
          continuousReplayableEvents.forEach(function(topLevelType) {
            trapReplayableEventForDocument(topLevelType, document2, listenerMapForDoc);
          });
        }
        function createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
          return {
            blockedOn,
            topLevelType,
            eventSystemFlags: eventSystemFlags | IS_REPLAYED,
            nativeEvent,
            container
          };
        }
        function queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
          queuedDiscreteEvents.push(queuedEvent);
        }
        function clearIfContinuousEvent(topLevelType, nativeEvent) {
          switch (topLevelType) {
            case TOP_FOCUS:
            case TOP_BLUR:
              queuedFocus = null;
              break;
            case TOP_DRAG_ENTER:
            case TOP_DRAG_LEAVE:
              queuedDrag = null;
              break;
            case TOP_MOUSE_OVER:
            case TOP_MOUSE_OUT:
              queuedMouse = null;
              break;
            case TOP_POINTER_OVER:
            case TOP_POINTER_OUT: {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case TOP_GOT_POINTER_CAPTURE:
            case TOP_LOST_POINTER_CAPTURE: {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode$1(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
          switch (topLevelType) {
            case TOP_FOCUS: {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, topLevelType, eventSystemFlags, container, focusEvent);
              return true;
            }
            case TOP_DRAG_ENTER: {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, topLevelType, eventSystemFlags, container, dragEvent);
              return true;
            }
            case TOP_MOUSE_OVER: {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, topLevelType, eventSystemFlags, container, mouseEvent);
              return true;
            }
            case TOP_POINTER_OVER: {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, topLevelType, eventSystemFlags, container, pointerEvent));
              return true;
            }
            case TOP_GOT_POINTER_CAPTURE: {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, topLevelType, eventSystemFlags, container, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root3 = nearestMounted.stateNode;
                if (root3.hydrate) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var nextBlockedOn = attemptToDispatchEvent(queuedEvent.topLevelType, queuedEvent.eventSystemFlags, queuedEvent.container, queuedEvent.nativeEvent);
          if (nextBlockedOn !== null) {
            var _fiber3 = getInstanceFromNode$1(nextBlockedOn);
            if (_fiber3 !== null) {
              attemptContinuousHydration(_fiber3);
            }
            queuedEvent.blockedOn = nextBlockedOn;
            return false;
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map2) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map2.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          while (queuedDiscreteEvents.length > 0) {
            var nextDiscreteEvent = queuedDiscreteEvents[0];
            if (nextDiscreteEvent.blockedOn !== null) {
              var _fiber4 = getInstanceFromNode$1(nextDiscreteEvent.blockedOn);
              if (_fiber4 !== null) {
                attemptUserBlockingHydration(_fiber4);
              }
              break;
            }
            var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.topLevelType, nextDiscreteEvent.eventSystemFlags, nextDiscreteEvent.container, nextDiscreteEvent.nativeEvent);
            if (nextBlockedOn !== null) {
              nextDiscreteEvent.blockedOn = nextBlockedOn;
            } else {
              queuedDiscreteEvents.shift();
            }
          }
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i = 1; i < queuedDiscreteEvents.length; i++) {
              var queuedEvent = queuedDiscreteEvents[i];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        function addEventBubbleListener(element, eventType, listener) {
          element.addEventListener(eventType, listener, false);
        }
        function addEventCaptureListener(element, eventType, listener) {
          element.addEventListener(eventType, listener, true);
        }
        var simpleEventPluginEventTypes = {};
        var topLevelEventsToDispatchConfig = /* @__PURE__ */ new Map();
        var eventPriorities = /* @__PURE__ */ new Map();
        var discreteEventPairsForSimpleEventPlugin = [TOP_BLUR, "blur", TOP_CANCEL, "cancel", TOP_CLICK, "click", TOP_CLOSE, "close", TOP_CONTEXT_MENU, "contextMenu", TOP_COPY, "copy", TOP_CUT, "cut", TOP_AUX_CLICK, "auxClick", TOP_DOUBLE_CLICK, "doubleClick", TOP_DRAG_END, "dragEnd", TOP_DRAG_START, "dragStart", TOP_DROP, "drop", TOP_FOCUS, "focus", TOP_INPUT, "input", TOP_INVALID, "invalid", TOP_KEY_DOWN, "keyDown", TOP_KEY_PRESS, "keyPress", TOP_KEY_UP, "keyUp", TOP_MOUSE_DOWN, "mouseDown", TOP_MOUSE_UP, "mouseUp", TOP_PASTE, "paste", TOP_PAUSE, "pause", TOP_PLAY, "play", TOP_POINTER_CANCEL, "pointerCancel", TOP_POINTER_DOWN, "pointerDown", TOP_POINTER_UP, "pointerUp", TOP_RATE_CHANGE, "rateChange", TOP_RESET, "reset", TOP_SEEKED, "seeked", TOP_SUBMIT, "submit", TOP_TOUCH_CANCEL, "touchCancel", TOP_TOUCH_END, "touchEnd", TOP_TOUCH_START, "touchStart", TOP_VOLUME_CHANGE, "volumeChange"];
        var otherDiscreteEvents = [TOP_CHANGE, TOP_SELECTION_CHANGE, TOP_TEXT_INPUT, TOP_COMPOSITION_START, TOP_COMPOSITION_END, TOP_COMPOSITION_UPDATE];
        var userBlockingPairsForSimpleEventPlugin = [TOP_DRAG, "drag", TOP_DRAG_ENTER, "dragEnter", TOP_DRAG_EXIT, "dragExit", TOP_DRAG_LEAVE, "dragLeave", TOP_DRAG_OVER, "dragOver", TOP_MOUSE_MOVE, "mouseMove", TOP_MOUSE_OUT, "mouseOut", TOP_MOUSE_OVER, "mouseOver", TOP_POINTER_MOVE, "pointerMove", TOP_POINTER_OUT, "pointerOut", TOP_POINTER_OVER, "pointerOver", TOP_SCROLL, "scroll", TOP_TOGGLE, "toggle", TOP_TOUCH_MOVE, "touchMove", TOP_WHEEL, "wheel"];
        var continuousPairsForSimpleEventPlugin = [TOP_ABORT, "abort", TOP_ANIMATION_END, "animationEnd", TOP_ANIMATION_ITERATION, "animationIteration", TOP_ANIMATION_START, "animationStart", TOP_CAN_PLAY, "canPlay", TOP_CAN_PLAY_THROUGH, "canPlayThrough", TOP_DURATION_CHANGE, "durationChange", TOP_EMPTIED, "emptied", TOP_ENCRYPTED, "encrypted", TOP_ENDED, "ended", TOP_ERROR, "error", TOP_GOT_POINTER_CAPTURE, "gotPointerCapture", TOP_LOAD, "load", TOP_LOADED_DATA, "loadedData", TOP_LOADED_METADATA, "loadedMetadata", TOP_LOAD_START, "loadStart", TOP_LOST_POINTER_CAPTURE, "lostPointerCapture", TOP_PLAYING, "playing", TOP_PROGRESS, "progress", TOP_SEEKING, "seeking", TOP_STALLED, "stalled", TOP_SUSPEND, "suspend", TOP_TIME_UPDATE, "timeUpdate", TOP_TRANSITION_END, "transitionEnd", TOP_WAITING, "waiting"];
        function processSimpleEventPluginPairsByPriority(eventTypes2, priority) {
          for (var i = 0; i < eventTypes2.length; i += 2) {
            var topEvent = eventTypes2[i];
            var event = eventTypes2[i + 1];
            var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
            var onEvent = "on" + capitalizedEvent;
            var config2 = {
              phasedRegistrationNames: {
                bubbled: onEvent,
                captured: onEvent + "Capture"
              },
              dependencies: [topEvent],
              eventPriority: priority
            };
            eventPriorities.set(topEvent, priority);
            topLevelEventsToDispatchConfig.set(topEvent, config2);
            simpleEventPluginEventTypes[event] = config2;
          }
        }
        function processTopEventPairsByPriority(eventTypes2, priority) {
          for (var i = 0; i < eventTypes2.length; i++) {
            eventPriorities.set(eventTypes2[i], priority);
          }
        }
        processSimpleEventPluginPairsByPriority(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
        processSimpleEventPluginPairsByPriority(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
        processSimpleEventPluginPairsByPriority(continuousPairsForSimpleEventPlugin, ContinuousEvent);
        processTopEventPairsByPriority(otherDiscreteEvents, DiscreteEvent);
        function getEventPriorityForPluginSystem(topLevelType) {
          var priority = eventPriorities.get(topLevelType);
          return priority === void 0 ? ContinuousEvent : priority;
        }
        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function trapBubbledEvent(topLevelType, element) {
          trapEventForPluginEventSystem(element, topLevelType, false);
        }
        function trapCapturedEvent(topLevelType, element) {
          trapEventForPluginEventSystem(element, topLevelType, true);
        }
        function trapEventForPluginEventSystem(container, topLevelType, capture) {
          var listener;
          switch (getEventPriorityForPluginSystem(topLevelType)) {
            case DiscreteEvent:
              listener = dispatchDiscreteEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
              break;
            case UserBlockingEvent:
              listener = dispatchUserBlockingUpdate.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
              break;
            case ContinuousEvent:
            default:
              listener = dispatchEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
              break;
          }
          var rawEventName = getRawEventName(topLevelType);
          if (capture) {
            addEventCaptureListener(container, rawEventName, listener);
          } else {
            addEventBubbleListener(container, rawEventName, listener);
          }
        }
        function dispatchDiscreteEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
          flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
          discreteUpdates(dispatchEvent, topLevelType, eventSystemFlags, container, nativeEvent);
        }
        function dispatchUserBlockingUpdate(topLevelType, eventSystemFlags, container, nativeEvent) {
          runWithPriority(UserBlockingPriority, dispatchEvent.bind(null, topLevelType, eventSystemFlags, container, nativeEvent));
        }
        function dispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
          if (!_enabled) {
            return;
          }
          if (hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(topLevelType)) {
            queueDiscreteEvent(
              null,
              topLevelType,
              eventSystemFlags,
              container,
              nativeEvent
            );
            return;
          }
          var blockedOn = attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent);
          if (blockedOn === null) {
            clearIfContinuousEvent(topLevelType, nativeEvent);
            return;
          }
          if (isReplayableDiscreteEvent(topLevelType)) {
            queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
            return;
          }
          if (queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent)) {
            return;
          }
          clearIfContinuousEvent(topLevelType, nativeEvent);
          {
            dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, null);
          }
        }
        function attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root3 = nearestMounted.stateNode;
                if (root3.hydrate) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          {
            dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst);
          }
          return null;
        }
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix, key) {
          return prefix + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix) {
            isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name, value2, isCustomProperty) {
          var isEmpty = value2 == null || typeof value2 === "boolean" || value2 === "";
          if (isEmpty) {
            return "";
          }
          if (!isCustomProperty && typeof value2 === "number" && value2 !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
            return value2 + "px";
          }
          return ("" + value2).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern, function(_, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error(
              "Unsupported style property %s. Did you mean %s?",
              name,
              camelize(name.replace(msPattern$1, "ms-"))
            );
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value2) {
            if (warnedStyleValues.hasOwnProperty(value2) && warnedStyleValues[value2]) {
              return;
            }
            warnedStyleValues[value2] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value2.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value2) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value2) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value2) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value2)) {
              warnStyleValueWithSemicolon(name, value2);
            }
            if (typeof value2 === "number") {
              if (isNaN(value2)) {
                warnStyleValueIsNaN(name, value2);
              } else if (!isFinite(value2)) {
                warnStyleValueIsInfinity(name, value2);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles2) {
          {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles2) {
              if (!styles2.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles2[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles2) {
          var style2 = node.style;
          for (var styleName in styles2) {
            if (!styles2.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles2[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles2[styleName], isCustomProperty);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty) {
              style2.setProperty(styleName, styleValue);
            } else {
              style2[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value2) {
          return value2 == null || typeof value2 === "boolean" || value2 === "";
        }
        function expandShorthandMap(styles2) {
          var expanded = {};
          for (var key in styles2) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i = 0; i < longhands.length; i++) {
              expanded[longhands[i]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
        };
        var voidElementTags = _assign({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        var ReactDebugCurrentFrame$3 = null;
        {
          ReactDebugCurrentFrame$3 = ReactSharedInternals.ReactDebugCurrentFrame;
        }
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
              {
                throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." + ReactDebugCurrentFrame$3.getStackAddendum());
              }
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (!(props.children == null)) {
              {
                throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
            }
            if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
              {
                throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.");
              }
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (!(props.style == null || typeof props.style === "object")) {
            {
              throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." + ReactDebugCurrentFrame$3.getStackAddendum());
            }
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var hasOwnProperty$12 = Object.prototype.hasOwnProperty;
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty$12.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid2 = validateProperty(type, key);
              if (!isValid2) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://fb.me/invalid-aria-prop", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var _hasOwnProperty = Object.prototype.hasOwnProperty;
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value2, canUseEventSystem) {
            if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (canUseEventSystem) {
              if (registrationNameModules.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value2 !== null && value2 !== void 0 && typeof value2 !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value2);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value2 === "number" && isNaN(value2)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value2 === "boolean" && shouldRemoveAttributeWithWarning(name, value2, propertyInfo, false)) {
              if (value2) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value2, name, name, value2, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value2, name, name, value2, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value2, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value2 === "false" || value2 === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value2, name, value2 === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value2);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, canUseEventSystem) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid2 = validateProperty$1(type, key, props[key], canUseEventSystem);
              if (!isValid2) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://fb.me/react-attribute-behavior", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://fb.me/react-attribute-behavior", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, canUseEventSystem) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, canUseEventSystem);
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var HTML_NAMESPACE$1 = Namespaces.html;
        var warnedUnknownTags;
        var suppressHydrationWarning;
        var validatePropertiesInDevelopment;
        var warnForTextDifference;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeMarkupForTextOrAttribute;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            time: true,
            dialog: true,
            webview: true
          };
          validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(
              type,
              props,
              true
            );
          };
          canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          normalizeMarkupForTextOrAttribute = function(markup) {
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          };
          warnForTextDifference = function(serverText, clientText) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
          };
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function(name) {
              names.push(name);
            });
            error("Extra attributes from the server: %s", names);
          };
          warnForInvalidEventListener = function(registrationName, listener) {
            if (listener === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function(parent2, html) {
            var testElement = parent2.namespaceURI === HTML_NAMESPACE$1 ? parent2.ownerDocument.createElement(parent2.tagName) : parent2.ownerDocument.createElementNS(parent2.namespaceURI, parent2.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }
        function ensureListeningTo(rootContainerElement, registrationName) {
          var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
          var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
          legacyListenToEvent(registrationName, doc);
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop() {
        }
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameModules.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                ensureListeningTo(rootContainerElement, propKey);
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i = 0; i < updatePayload.length; i += 2) {
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE$1) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE$1) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div = ownerDocument.createElement("div");
              div.innerHTML = "<script><\/script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument.createElement(type);
              if (type === "select") {
                var node = domElement;
                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE$1) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "iframe":
            case "object":
            case "embed":
              trapBubbledEvent(TOP_LOAD, domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                trapBubbledEvent(mediaEventTypes[i], domElement);
              }
              props = rawProps;
              break;
            case "source":
              trapBubbledEvent(TOP_ERROR, domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              trapBubbledEvent(TOP_ERROR, domElement);
              trapBubbledEvent(TOP_LOAD, domElement);
              props = rawProps;
              break;
            case "form":
              trapBubbledEvent(TOP_RESET, domElement);
              trapBubbledEvent(TOP_SUBMIT, domElement);
              props = rawProps;
              break;
            case "details":
              trapBubbledEvent(TOP_TOGGLE, domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$3(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "option":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$3(domElement, lastRawProps);
              nextProps = getHostProps$3(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameModules.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (lastProp !== nextProp && (typeof nextProp === "string" || typeof nextProp === "number")) {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (registrationNameModules.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                ensureListeningTo(rootContainerElement, propKey);
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "iframe":
            case "object":
            case "embed":
              trapBubbledEvent(TOP_LOAD, domElement);
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                trapBubbledEvent(mediaEventTypes[i], domElement);
              }
              break;
            case "source":
              trapBubbledEvent(TOP_ERROR, domElement);
              break;
            case "img":
            case "image":
            case "link":
              trapBubbledEvent(TOP_ERROR, domElement);
              trapBubbledEvent(TOP_LOAD, domElement);
              break;
            case "form":
              trapBubbledEvent(TOP_RESET, domElement);
              trapBubbledEvent(TOP_SUBMIT, domElement);
              break;
            case "details":
              trapBubbledEvent(TOP_TOGGLE, domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              trapBubbledEvent(TOP_INVALID, domElement);
              ensureListeningTo(rootContainerElement, "onChange");
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = /* @__PURE__ */ new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name = attributes[_i].name.toLowerCase();
              switch (name) {
                case "data-reactroot":
                  break;
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameModules.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                ensureListeningTo(rootContainerElement, propKey);
              }
            } else if (typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = getPropertyInfo(propKey);
              if (suppressHydrationWarning)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : "");
                if (expectedHTML !== serverHTML) {
                  warnForPropDifference(propKey, serverHTML, expectedHTML);
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE$1) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE$1) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
              warnForExtraAttributes(extraAttributeNames);
            }
          }
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForUnmatchedText(textNode, text) {
          {
            warnForTextDifference(textNode.nodeValue, text);
          }
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root3, offset2) {
          var node = getLeafNode(root3);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset2 && nodeEnd >= offset2) {
                return {
                  node,
                  offset: offset2 - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win = ownerDocument && ownerDocument.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start = -1;
          var end = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer:
            while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
          if (start === -1 || end === -1) {
            return null;
          }
          return {
            start,
            end
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length = node.textContent.length;
          var start = Math.min(offsets.start, length);
          var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start);
          var endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range2 = doc.createRange();
            range2.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
              selection.addRange(range2);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range2.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range2);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            activeElementDetached: null,
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i = 0; i < ancestors.length; i++) {
              var info = ancestors[i];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection(input) {
          var selection;
          if ("selectionStart" in input) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection = getOffsets(input);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input, offsets) {
          var start = offsets.start, end = offsets.end;
          if (end === void 0) {
            end = start;
          }
          if ("selectionStart" in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag) {
            var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              case "option":
                return tag === "#text";
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              case "colgroup":
                return tag === "col" || tag === "template";
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var addendum = getCurrentFiberStackInDev();
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag + "|" + addendum;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1;
        {
          SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        }
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function shouldAutoFocusHostComponent(type, props) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
          }
          return false;
        }
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root3 = rootContainerInstance.documentElement;
              namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container.namespaceURI || null;
              type = container.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          setEnabled(false);
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          return shouldAutoFocusHostComponent(type, props);
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function shouldDeprioritizeSubtree(type, props) {
          return !!props.hidden;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          if (shouldAutoFocusHostComponent(type, newProps)) {
            domElement.focus();
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateFiberProps(domElement, newProps);
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container, child) {
          var parentNode;
          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }
        function hideInstance(instance) {
          instance = instance;
          var style2 = instance.style;
          if (typeof style2.setProperty === "function") {
            style2.setProperty("display", "none", "important");
          } else {
            style2.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          return diffHydratedText(textInstance, text);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
          {
            warnForUnmatchedText(textInstance, text);
          }
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForUnmatchedText(textInstance, text);
          }
        }
        function didNotHydrateContainerInstance(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentInstance, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentInstance, instance);
            }
          }
        }
        function didNotFindHydratableContainerInstance(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableContainerTextInstance(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedElement(parentInstance, type);
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedText(parentInstance, text);
          }
        }
        function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
            ;
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactInternalInstance$" + randomKey;
        var internalEventHandlersKey = "__reactEventHandlers$" + randomKey;
        var internalContainerInstanceKey = "__reactContainere$" + randomKey;
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode$1(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance$1(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          {
            {
              throw Error("getNodeFromInstance: Invalid argument.");
            }
          }
        }
        function getFiberCurrentPropsFromNode$1(node) {
          return node[internalEventHandlersKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalEventHandlersKey] = props;
        }
        function getParent(inst) {
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var depthA = 0;
          for (var tempA = instA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = instB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            instA = getParent(instA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            instB = getParent(instB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (instA === instB || instA === instB.alternate) {
              return instA;
            }
            instA = getParent(instA);
            instB = getParent(instB);
          }
          return null;
        }
        function traverseTwoPhase(inst, fn, arg) {
          var path = [];
          while (inst) {
            path.push(inst);
            inst = getParent(inst);
          }
          var i;
          for (i = path.length; i-- > 0; ) {
            fn(path[i], "captured", arg);
          }
          for (i = 0; i < path.length; i++) {
            fn(path[i], "bubbled", arg);
          }
        }
        function traverseEnterLeave(from2, to2, fn, argFrom, argTo) {
          var common = from2 && to2 ? getLowestCommonAncestor(from2, to2) : null;
          var pathFrom = [];
          while (true) {
            if (!from2) {
              break;
            }
            if (from2 === common) {
              break;
            }
            var alternate = from2.alternate;
            if (alternate !== null && alternate === common) {
              break;
            }
            pathFrom.push(from2);
            from2 = getParent(from2);
          }
          var pathTo = [];
          while (true) {
            if (!to2) {
              break;
            }
            if (to2 === common) {
              break;
            }
            var _alternate = to2.alternate;
            if (_alternate !== null && _alternate === common) {
              break;
            }
            pathTo.push(to2);
            to2 = getParent(to2);
          }
          for (var i = 0; i < pathFrom.length; i++) {
            fn(pathFrom[i], "bubbled", argFrom);
          }
          for (var _i = pathTo.length; _i-- > 0; ) {
            fn(pathTo[_i], "captured", argTo);
          }
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var listener;
          var stateNode = inst.stateNode;
          if (!stateNode) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (!props) {
            return null;
          }
          listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (!(!listener || typeof listener === "function")) {
            {
              throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
          }
          return listener;
        }
        function listenerAtPhase(inst, event, propagationPhase) {
          var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
          return getListener(inst, registrationName);
        }
        function accumulateDirectionalDispatches(inst, phase, event) {
          {
            if (!inst) {
              error("Dispatching inst must not be null");
            }
          }
          var listener = listenerAtPhase(inst, event, phase);
          if (listener) {
            event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
            event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
          }
        }
        function accumulateTwoPhaseDispatchesSingle(event) {
          if (event && event.dispatchConfig.phasedRegistrationNames) {
            traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
          }
        }
        function accumulateDispatches(inst, ignoredDirection, event) {
          if (inst && event && event.dispatchConfig.registrationName) {
            var registrationName = event.dispatchConfig.registrationName;
            var listener = getListener(inst, registrationName);
            if (listener) {
              event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
              event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
            }
          }
        }
        function accumulateDirectDispatchesSingle(event) {
          if (event && event.dispatchConfig.registrationName) {
            accumulateDispatches(event._targetInst, null, event);
          }
        }
        function accumulateTwoPhaseDispatches(events) {
          forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
        }
        function accumulateEnterLeaveDispatches(leave, enter, from2, to2) {
          traverseEnterLeave(from2, to2, accumulateDispatches, leave, enter);
        }
        function accumulateDirectDispatches(events) {
          forEachAccumulated(events, accumulateDirectDispatchesSingle);
        }
        var root2 = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root2 = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset() {
          root2 = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start;
          var startValue = startText;
          var startLength = startValue.length;
          var end;
          var endValue = getText();
          var endLength = endValue.length;
          for (start = 0; start < startLength; start++) {
            if (startValue[start] !== endValue[start]) {
              break;
            }
          }
          var minEnd = startLength - start;
          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }
          var sliceTail = end > 1 ? 1 - end : void 0;
          fallbackText = endValue.slice(start, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root2) {
            return root2.value;
          }
          return root2.textContent;
        }
        var EVENT_POOL_SIZE = 10;
        var EventInterface = {
          type: null,
          target: null,
          currentTarget: function() {
            return null;
          },
          eventPhase: null,
          bubbles: null,
          cancelable: null,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: null,
          isTrusted: null
        };
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
          {
            delete this.nativeEvent;
            delete this.preventDefault;
            delete this.stopPropagation;
            delete this.isDefaultPrevented;
            delete this.isPropagationStopped;
          }
          this.dispatchConfig = dispatchConfig;
          this._targetInst = targetInst;
          this.nativeEvent = nativeEvent;
          var Interface = this.constructor.Interface;
          for (var propName in Interface) {
            if (!Interface.hasOwnProperty(propName)) {
              continue;
            }
            {
              delete this[propName];
            }
            var normalize = Interface[propName];
            if (normalize) {
              this[propName] = normalize(nativeEvent);
            } else {
              if (propName === "target") {
                this.target = nativeEventTarget;
              } else {
                this[propName] = nativeEvent[propName];
              }
            }
          }
          var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
          if (defaultPrevented) {
            this.isDefaultPrevented = functionThatReturnsTrue;
          } else {
            this.isDefaultPrevented = functionThatReturnsFalse;
          }
          this.isPropagationStopped = functionThatReturnsFalse;
          return this;
        }
        _assign(SyntheticEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = true;
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.preventDefault) {
              event.preventDefault();
            } else if (typeof event.returnValue !== "unknown") {
              event.returnValue = false;
            }
            this.isDefaultPrevented = functionThatReturnsTrue;
          },
          stopPropagation: function() {
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.stopPropagation) {
              event.stopPropagation();
            } else if (typeof event.cancelBubble !== "unknown") {
              event.cancelBubble = true;
            }
            this.isPropagationStopped = functionThatReturnsTrue;
          },
          persist: function() {
            this.isPersistent = functionThatReturnsTrue;
          },
          isPersistent: functionThatReturnsFalse,
          destructor: function() {
            var Interface = this.constructor.Interface;
            for (var propName in Interface) {
              {
                Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
              }
            }
            this.dispatchConfig = null;
            this._targetInst = null;
            this.nativeEvent = null;
            this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            this._dispatchListeners = null;
            this._dispatchInstances = null;
            {
              Object.defineProperty(this, "nativeEvent", getPooledWarningPropertyDefinition("nativeEvent", null));
              Object.defineProperty(this, "isDefaultPrevented", getPooledWarningPropertyDefinition("isDefaultPrevented", functionThatReturnsFalse));
              Object.defineProperty(this, "isPropagationStopped", getPooledWarningPropertyDefinition("isPropagationStopped", functionThatReturnsFalse));
              Object.defineProperty(this, "preventDefault", getPooledWarningPropertyDefinition("preventDefault", function() {
              }));
              Object.defineProperty(this, "stopPropagation", getPooledWarningPropertyDefinition("stopPropagation", function() {
              }));
            }
          }
        });
        SyntheticEvent.Interface = EventInterface;
        SyntheticEvent.extend = function(Interface) {
          var Super = this;
          var E = function() {
          };
          E.prototype = Super.prototype;
          var prototype = new E();
          function Class() {
            return Super.apply(this, arguments);
          }
          _assign(prototype, Class.prototype);
          Class.prototype = prototype;
          Class.prototype.constructor = Class;
          Class.Interface = _assign({}, Super.Interface, Interface);
          Class.extend = Super.extend;
          addEventPoolingTo(Class);
          return Class;
        };
        addEventPoolingTo(SyntheticEvent);
        function getPooledWarningPropertyDefinition(propName, getVal) {
          var isFunction2 = typeof getVal === "function";
          return {
            configurable: true,
            set: set3,
            get: get3
          };
          function set3(val) {
            var action = isFunction2 ? "setting the method" : "setting the property";
            warn3(action, "This is effectively a no-op");
            return val;
          }
          function get3() {
            var action = isFunction2 ? "accessing the method" : "accessing the property";
            var result = isFunction2 ? "This is a no-op function" : "This is set to null";
            warn3(action, result);
            return getVal;
          }
          function warn3(action, result) {
            {
              error("This synthetic event is reused for performance reasons. If you're seeing this, you're %s `%s` on a released/nullified synthetic event. %s. If you must keep the original synthetic event around, use event.persist(). See https://fb.me/react-event-pooling for more information.", action, propName, result);
            }
          }
        }
        function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
          var EventConstructor = this;
          if (EventConstructor.eventPool.length) {
            var instance = EventConstructor.eventPool.pop();
            EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
            return instance;
          }
          return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
        }
        function releasePooledEvent(event) {
          var EventConstructor = this;
          if (!(event instanceof EventConstructor)) {
            {
              throw Error("Trying to release an event instance into a pool of a different type.");
            }
          }
          event.destructor();
          if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
            EventConstructor.eventPool.push(event);
          }
        }
        function addEventPoolingTo(EventConstructor) {
          EventConstructor.eventPool = [];
          EventConstructor.getPooled = getPooledEvent;
          EventConstructor.release = releasePooledEvent;
        }
        var SyntheticCompositionEvent = SyntheticEvent.extend({
          data: null
        });
        var SyntheticInputEvent = SyntheticEvent.extend({
          data: null
        });
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        var eventTypes = {
          beforeInput: {
            phasedRegistrationNames: {
              bubbled: "onBeforeInput",
              captured: "onBeforeInputCapture"
            },
            dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
          },
          compositionEnd: {
            phasedRegistrationNames: {
              bubbled: "onCompositionEnd",
              captured: "onCompositionEndCapture"
            },
            dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
          },
          compositionStart: {
            phasedRegistrationNames: {
              bubbled: "onCompositionStart",
              captured: "onCompositionStartCapture"
            },
            dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
          },
          compositionUpdate: {
            phasedRegistrationNames: {
              bubbled: "onCompositionUpdate",
              captured: "onCompositionUpdateCapture"
            },
            dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
          }
        };
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(topLevelType) {
          switch (topLevelType) {
            case TOP_COMPOSITION_START:
              return eventTypes.compositionStart;
            case TOP_COMPOSITION_END:
              return eventTypes.compositionEnd;
            case TOP_COMPOSITION_UPDATE:
              return eventTypes.compositionUpdate;
          }
        }
        function isFallbackCompositionStart(topLevelType, nativeEvent) {
          return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(topLevelType, nativeEvent) {
          switch (topLevelType) {
            case TOP_KEY_UP:
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case TOP_KEY_DOWN:
              return nativeEvent.keyCode !== START_KEYCODE;
            case TOP_KEY_PRESS:
            case TOP_MOUSE_DOWN:
            case TOP_BLUR:
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(topLevelType);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
              eventType = eventTypes.compositionStart;
            }
          } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
            eventType = eventTypes.compositionEnd;
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === eventTypes.compositionStart) {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === eventTypes.compositionEnd) {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
          if (fallbackData) {
            event.data = fallbackData;
          } else {
            var customData = getDataFromCustomEvent(nativeEvent);
            if (customData !== null) {
              event.data = customData;
            }
          }
          accumulateTwoPhaseDispatches(event);
          return event;
        }
        function getNativeBeforeInputChars(topLevelType, nativeEvent) {
          switch (topLevelType) {
            case TOP_COMPOSITION_END:
              return getDataFromCustomEvent(nativeEvent);
            case TOP_KEY_PRESS:
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case TOP_TEXT_INPUT:
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
          if (isComposing) {
            if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (topLevelType) {
            case TOP_PASTE:
              return null;
            case TOP_KEY_PRESS:
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case TOP_COMPOSITION_END:
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
          event.data = chars;
          accumulateTwoPhaseDispatches(event);
          return event;
        }
        var BeforeInputEventPlugin = {
          eventTypes,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
            var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
            if (composition === null) {
              return beforeInput;
            }
            if (beforeInput === null) {
              return composition;
            }
            return [composition, beforeInput];
          }
        };
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        var eventTypes$1 = {
          change: {
            phasedRegistrationNames: {
              bubbled: "onChange",
              captured: "onChangeCapture"
            },
            dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
          }
        };
        function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
          var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
          event.type = "change";
          enqueueStateRestore(target);
          accumulateTwoPhaseDispatches(event);
          return event;
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, event);
        }
        function runEventInBatch(event) {
          runEventsInBatch(event);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance$1(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(topLevelType, targetInst) {
          if (topLevelType === TOP_CHANGE) {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
          if (topLevelType === TOP_FOCUS) {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (topLevelType === TOP_BLUR) {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
          if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(topLevelType, targetInst) {
          if (topLevelType === TOP_CLICK) {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
          if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node) {
          var state = node._wrapperState;
          if (!state || !state.controlled || node.type !== "number") {
            return;
          }
          {
            setDefaultValue(node, "number", node.value);
          }
        }
        var ChangeEventPlugin = {
          eventTypes: eventTypes$1,
          _isInputEventSupported: isInputEventSupported,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(topLevelType, targetInst);
              if (inst) {
                var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
                return event;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(topLevelType, targetNode, targetInst);
            }
            if (topLevelType === TOP_BLUR) {
              handleControlledInputBlur(targetNode);
            }
          }
        };
        var SyntheticUIEvent = SyntheticEvent.extend({
          view: null,
          detail: null
        });
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var previousScreenX = 0;
        var previousScreenY = 0;
        var isMovementXSet = false;
        var isMovementYSet = false;
        var SyntheticMouseEvent = SyntheticUIEvent.extend({
          screenX: null,
          screenY: null,
          clientX: null,
          clientY: null,
          pageX: null,
          pageY: null,
          ctrlKey: null,
          shiftKey: null,
          altKey: null,
          metaKey: null,
          getModifierState: getEventModifierState,
          button: null,
          buttons: null,
          relatedTarget: function(event) {
            return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            var screenX = previousScreenX;
            previousScreenX = event.screenX;
            if (!isMovementXSet) {
              isMovementXSet = true;
              return 0;
            }
            return event.type === "mousemove" ? event.screenX - screenX : 0;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            var screenY = previousScreenY;
            previousScreenY = event.screenY;
            if (!isMovementYSet) {
              isMovementYSet = true;
              return 0;
            }
            return event.type === "mousemove" ? event.screenY - screenY : 0;
          }
        });
        var SyntheticPointerEvent = SyntheticMouseEvent.extend({
          pointerId: null,
          width: null,
          height: null,
          pressure: null,
          tangentialPressure: null,
          tiltX: null,
          tiltY: null,
          twist: null,
          pointerType: null,
          isPrimary: null
        });
        var eventTypes$2 = {
          mouseEnter: {
            registrationName: "onMouseEnter",
            dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
          },
          mouseLeave: {
            registrationName: "onMouseLeave",
            dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
          },
          pointerEnter: {
            registrationName: "onPointerEnter",
            dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
          },
          pointerLeave: {
            registrationName: "onPointerLeave",
            dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
          }
        };
        var EnterLeaveEventPlugin = {
          eventTypes: eventTypes$2,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
            var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;
            if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0 && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
              return null;
            }
            if (!isOutEvent && !isOverEvent) {
              return null;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from2;
            var to2;
            if (isOutEvent) {
              from2 = targetInst;
              var related = nativeEvent.relatedTarget || nativeEvent.toElement;
              to2 = related ? getClosestInstanceFromNode(related) : null;
              if (to2 !== null) {
                var nearestMounted = getNearestMountedFiber(to2);
                if (to2 !== nearestMounted || to2.tag !== HostComponent && to2.tag !== HostText) {
                  to2 = null;
                }
              }
            } else {
              from2 = null;
              to2 = targetInst;
            }
            if (from2 === to2) {
              return null;
            }
            var eventInterface, leaveEventType, enterEventType, eventTypePrefix;
            if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
              eventInterface = SyntheticMouseEvent;
              leaveEventType = eventTypes$2.mouseLeave;
              enterEventType = eventTypes$2.mouseEnter;
              eventTypePrefix = "mouse";
            } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
              eventInterface = SyntheticPointerEvent;
              leaveEventType = eventTypes$2.pointerLeave;
              enterEventType = eventTypes$2.pointerEnter;
              eventTypePrefix = "pointer";
            }
            var fromNode = from2 == null ? win : getNodeFromInstance$1(from2);
            var toNode = to2 == null ? win : getNodeFromInstance$1(to2);
            var leave = eventInterface.getPooled(leaveEventType, from2, nativeEvent, nativeEventTarget);
            leave.type = eventTypePrefix + "leave";
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = eventInterface.getPooled(enterEventType, to2, nativeEvent, nativeEventTarget);
            enter.type = eventTypePrefix + "enter";
            enter.target = toNode;
            enter.relatedTarget = fromNode;
            accumulateEnterLeaveDispatches(leave, enter, from2, to2);
            if ((eventSystemFlags & IS_FIRST_ANCESTOR) === 0) {
              return [leave];
            }
            return [leave, enter];
          }
        };
        function is2(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is2;
        var hasOwnProperty$22 = Object.prototype.hasOwnProperty;
        function shallowEqual2(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i = 0; i < keysA.length; i++) {
            if (!hasOwnProperty$22.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
              return false;
            }
          }
          return true;
        }
        var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
        var eventTypes$3 = {
          select: {
            phasedRegistrationNames: {
              bubbled: "onSelect",
              captured: "onSelectCapture"
            },
            dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
          }
        };
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node) {
          if ("selectionStart" in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return null;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual2(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
            syntheticEvent.type = "select";
            syntheticEvent.target = activeElement$1;
            accumulateTwoPhaseDispatches(syntheticEvent);
            return syntheticEvent;
          }
          return null;
        }
        var SelectEventPlugin = {
          eventTypes: eventTypes$3,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, container) {
            var containerOrDoc = container || getEventTargetDocument(nativeEventTarget);
            if (!containerOrDoc || !isListeningToAllDependencies("onSelect", containerOrDoc)) {
              return null;
            }
            var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
            switch (topLevelType) {
              case TOP_FOCUS:
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case TOP_BLUR:
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case TOP_MOUSE_DOWN:
                mouseDown = true;
                break;
              case TOP_CONTEXT_MENU:
              case TOP_MOUSE_UP:
              case TOP_DRAG_END:
                mouseDown = false;
                return constructSelectEvent(nativeEvent, nativeEventTarget);
              case TOP_SELECTION_CHANGE:
                if (skipSelectionChangeEvent) {
                  break;
                }
              case TOP_KEY_DOWN:
              case TOP_KEY_UP:
                return constructSelectEvent(nativeEvent, nativeEventTarget);
            }
            return null;
          }
        };
        var SyntheticAnimationEvent = SyntheticEvent.extend({
          animationName: null,
          elapsedTime: null,
          pseudoElement: null
        });
        var SyntheticClipboardEvent = SyntheticEvent.extend({
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticFocusEvent = SyntheticUIEvent.extend({
          relatedTarget: null
        });
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
          key: getEventKey,
          location: null,
          ctrlKey: null,
          shiftKey: null,
          altKey: null,
          metaKey: null,
          repeat: null,
          locale: null,
          getModifierState: getEventModifierState,
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticDragEvent = SyntheticMouseEvent.extend({
          dataTransfer: null
        });
        var SyntheticTouchEvent = SyntheticUIEvent.extend({
          touches: null,
          targetTouches: null,
          changedTouches: null,
          altKey: null,
          metaKey: null,
          ctrlKey: null,
          shiftKey: null,
          getModifierState: getEventModifierState
        });
        var SyntheticTransitionEvent = SyntheticEvent.extend({
          propertyName: null,
          elapsedTime: null,
          pseudoElement: null
        });
        var SyntheticWheelEvent = SyntheticMouseEvent.extend({
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
          },
          deltaZ: null,
          deltaMode: null
        });
        var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
        var SimpleEventPlugin = {
          eventTypes: simpleEventPluginEventTypes,
          extractEvents: function(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
            var dispatchConfig = topLevelEventsToDispatchConfig.get(topLevelType);
            if (!dispatchConfig) {
              return null;
            }
            var EventConstructor;
            switch (topLevelType) {
              case TOP_KEY_PRESS:
                if (getEventCharCode(nativeEvent) === 0) {
                  return null;
                }
              case TOP_KEY_DOWN:
              case TOP_KEY_UP:
                EventConstructor = SyntheticKeyboardEvent;
                break;
              case TOP_BLUR:
              case TOP_FOCUS:
                EventConstructor = SyntheticFocusEvent;
                break;
              case TOP_CLICK:
                if (nativeEvent.button === 2) {
                  return null;
                }
              case TOP_AUX_CLICK:
              case TOP_DOUBLE_CLICK:
              case TOP_MOUSE_DOWN:
              case TOP_MOUSE_MOVE:
              case TOP_MOUSE_UP:
              case TOP_MOUSE_OUT:
              case TOP_MOUSE_OVER:
              case TOP_CONTEXT_MENU:
                EventConstructor = SyntheticMouseEvent;
                break;
              case TOP_DRAG:
              case TOP_DRAG_END:
              case TOP_DRAG_ENTER:
              case TOP_DRAG_EXIT:
              case TOP_DRAG_LEAVE:
              case TOP_DRAG_OVER:
              case TOP_DRAG_START:
              case TOP_DROP:
                EventConstructor = SyntheticDragEvent;
                break;
              case TOP_TOUCH_CANCEL:
              case TOP_TOUCH_END:
              case TOP_TOUCH_MOVE:
              case TOP_TOUCH_START:
                EventConstructor = SyntheticTouchEvent;
                break;
              case TOP_ANIMATION_END:
              case TOP_ANIMATION_ITERATION:
              case TOP_ANIMATION_START:
                EventConstructor = SyntheticAnimationEvent;
                break;
              case TOP_TRANSITION_END:
                EventConstructor = SyntheticTransitionEvent;
                break;
              case TOP_SCROLL:
                EventConstructor = SyntheticUIEvent;
                break;
              case TOP_WHEEL:
                EventConstructor = SyntheticWheelEvent;
                break;
              case TOP_COPY:
              case TOP_CUT:
              case TOP_PASTE:
                EventConstructor = SyntheticClipboardEvent;
                break;
              case TOP_GOT_POINTER_CAPTURE:
              case TOP_LOST_POINTER_CAPTURE:
              case TOP_POINTER_CANCEL:
              case TOP_POINTER_DOWN:
              case TOP_POINTER_MOVE:
              case TOP_POINTER_OUT:
              case TOP_POINTER_OVER:
              case TOP_POINTER_UP:
                EventConstructor = SyntheticPointerEvent;
                break;
              default:
                {
                  if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
                    error("SimpleEventPlugin: Unhandled event type, `%s`. This warning is likely caused by a bug in React. Please file an issue.", topLevelType);
                  }
                }
                EventConstructor = SyntheticEvent;
                break;
            }
            var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
            accumulateTwoPhaseDispatches(event);
            return event;
          }
        };
        var DOMEventPluginOrder = ["ResponderEventPlugin", "SimpleEventPlugin", "EnterLeaveEventPlugin", "ChangeEventPlugin", "SelectEventPlugin", "BeforeInputEventPlugin"];
        injectEventPluginOrder(DOMEventPluginOrder);
        setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
        injectEventPluginsByName({
          SimpleEventPlugin,
          EnterLeaveEventPlugin,
          ChangeEventPlugin,
          SelectEventPlugin,
          BeforeInputEventPlugin
        });
        var reactEmoji = "\u269B";
        var warningEmoji = "\u26D4";
        var supportsUserTiming = typeof performance !== "undefined" && typeof performance.mark === "function" && typeof performance.clearMarks === "function" && typeof performance.measure === "function" && typeof performance.clearMeasures === "function";
        var currentFiber = null;
        var currentPhase = null;
        var currentPhaseFiber = null;
        var isCommitting = false;
        var hasScheduledUpdateInCurrentCommit = false;
        var hasScheduledUpdateInCurrentPhase = false;
        var commitCountInCurrentWorkLoop = 0;
        var effectCountInCurrentCommit = 0;
        var labelsInCurrentCommit = /* @__PURE__ */ new Set();
        var formatMarkName = function(markName) {
          return reactEmoji + " " + markName;
        };
        var formatLabel = function(label, warning2) {
          var prefix = warning2 ? warningEmoji + " " : reactEmoji + " ";
          var suffix = warning2 ? " Warning: " + warning2 : "";
          return "" + prefix + label + suffix;
        };
        var beginMark = function(markName) {
          performance.mark(formatMarkName(markName));
        };
        var clearMark = function(markName) {
          performance.clearMarks(formatMarkName(markName));
        };
        var endMark = function(label, markName, warning2) {
          var formattedMarkName = formatMarkName(markName);
          var formattedLabel = formatLabel(label, warning2);
          try {
            performance.measure(formattedLabel, formattedMarkName);
          } catch (err) {
          }
          performance.clearMarks(formattedMarkName);
          performance.clearMeasures(formattedLabel);
        };
        var getFiberMarkName = function(label, debugID) {
          return label + " (#" + debugID + ")";
        };
        var getFiberLabel = function(componentName, isMounted2, phase) {
          if (phase === null) {
            return componentName + " [" + (isMounted2 ? "update" : "mount") + "]";
          } else {
            return componentName + "." + phase;
          }
        };
        var beginFiberMark = function(fiber, phase) {
          var componentName = getComponentName(fiber.type) || "Unknown";
          var debugID = fiber._debugID;
          var isMounted2 = fiber.alternate !== null;
          var label = getFiberLabel(componentName, isMounted2, phase);
          if (isCommitting && labelsInCurrentCommit.has(label)) {
            return false;
          }
          labelsInCurrentCommit.add(label);
          var markName = getFiberMarkName(label, debugID);
          beginMark(markName);
          return true;
        };
        var clearFiberMark = function(fiber, phase) {
          var componentName = getComponentName(fiber.type) || "Unknown";
          var debugID = fiber._debugID;
          var isMounted2 = fiber.alternate !== null;
          var label = getFiberLabel(componentName, isMounted2, phase);
          var markName = getFiberMarkName(label, debugID);
          clearMark(markName);
        };
        var endFiberMark = function(fiber, phase, warning2) {
          var componentName = getComponentName(fiber.type) || "Unknown";
          var debugID = fiber._debugID;
          var isMounted2 = fiber.alternate !== null;
          var label = getFiberLabel(componentName, isMounted2, phase);
          var markName = getFiberMarkName(label, debugID);
          endMark(label, markName, warning2);
        };
        var shouldIgnoreFiber = function(fiber) {
          switch (fiber.tag) {
            case HostRoot:
            case HostComponent:
            case HostText:
            case HostPortal:
            case Fragment2:
            case ContextProvider:
            case ContextConsumer:
            case Mode:
              return true;
            default:
              return false;
          }
        };
        var clearPendingPhaseMeasurement = function() {
          if (currentPhase !== null && currentPhaseFiber !== null) {
            clearFiberMark(currentPhaseFiber, currentPhase);
          }
          currentPhaseFiber = null;
          currentPhase = null;
          hasScheduledUpdateInCurrentPhase = false;
        };
        var pauseTimers = function() {
          var fiber = currentFiber;
          while (fiber) {
            if (fiber._debugIsCurrentlyTiming) {
              endFiberMark(fiber, null, null);
            }
            fiber = fiber.return;
          }
        };
        var resumeTimersRecursively = function(fiber) {
          if (fiber.return !== null) {
            resumeTimersRecursively(fiber.return);
          }
          if (fiber._debugIsCurrentlyTiming) {
            beginFiberMark(fiber, null);
          }
        };
        var resumeTimers = function() {
          if (currentFiber !== null) {
            resumeTimersRecursively(currentFiber);
          }
        };
        function recordEffect() {
          {
            effectCountInCurrentCommit++;
          }
        }
        function recordScheduleUpdate() {
          {
            if (isCommitting) {
              hasScheduledUpdateInCurrentCommit = true;
            }
            if (currentPhase !== null && currentPhase !== "componentWillMount" && currentPhase !== "componentWillReceiveProps") {
              hasScheduledUpdateInCurrentPhase = true;
            }
          }
        }
        function startWorkTimer(fiber) {
          {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            currentFiber = fiber;
            if (!beginFiberMark(fiber, null)) {
              return;
            }
            fiber._debugIsCurrentlyTiming = true;
          }
        }
        function cancelWorkTimer(fiber) {
          {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            fiber._debugIsCurrentlyTiming = false;
            clearFiberMark(fiber, null);
          }
        }
        function stopWorkTimer(fiber) {
          {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            currentFiber = fiber.return;
            if (!fiber._debugIsCurrentlyTiming) {
              return;
            }
            fiber._debugIsCurrentlyTiming = false;
            endFiberMark(fiber, null, null);
          }
        }
        function stopFailedWorkTimer(fiber) {
          {
            if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
              return;
            }
            currentFiber = fiber.return;
            if (!fiber._debugIsCurrentlyTiming) {
              return;
            }
            fiber._debugIsCurrentlyTiming = false;
            var warning2 = fiber.tag === SuspenseComponent ? "Rendering was suspended" : "An error was thrown inside this error boundary";
            endFiberMark(fiber, null, warning2);
          }
        }
        function startPhaseTimer(fiber, phase) {
          {
            if (!supportsUserTiming) {
              return;
            }
            clearPendingPhaseMeasurement();
            if (!beginFiberMark(fiber, phase)) {
              return;
            }
            currentPhaseFiber = fiber;
            currentPhase = phase;
          }
        }
        function stopPhaseTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            if (currentPhase !== null && currentPhaseFiber !== null) {
              var warning2 = hasScheduledUpdateInCurrentPhase ? "Scheduled a cascading update" : null;
              endFiberMark(currentPhaseFiber, currentPhase, warning2);
            }
            currentPhase = null;
            currentPhaseFiber = null;
          }
        }
        function startWorkLoopTimer(nextUnitOfWork) {
          {
            currentFiber = nextUnitOfWork;
            if (!supportsUserTiming) {
              return;
            }
            commitCountInCurrentWorkLoop = 0;
            beginMark("(React Tree Reconciliation)");
            resumeTimers();
          }
        }
        function stopWorkLoopTimer(interruptedBy2, didCompleteRoot) {
          {
            if (!supportsUserTiming) {
              return;
            }
            var warning2 = null;
            if (interruptedBy2 !== null) {
              if (interruptedBy2.tag === HostRoot) {
                warning2 = "A top-level update interrupted the previous render";
              } else {
                var componentName = getComponentName(interruptedBy2.type) || "Unknown";
                warning2 = "An update to " + componentName + " interrupted the previous render";
              }
            } else if (commitCountInCurrentWorkLoop > 1) {
              warning2 = "There were cascading updates";
            }
            commitCountInCurrentWorkLoop = 0;
            var label = didCompleteRoot ? "(React Tree Reconciliation: Completed Root)" : "(React Tree Reconciliation: Yielded)";
            pauseTimers();
            endMark(label, "(React Tree Reconciliation)", warning2);
          }
        }
        function startCommitTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            isCommitting = true;
            hasScheduledUpdateInCurrentCommit = false;
            labelsInCurrentCommit.clear();
            beginMark("(Committing Changes)");
          }
        }
        function stopCommitTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            var warning2 = null;
            if (hasScheduledUpdateInCurrentCommit) {
              warning2 = "Lifecycle hook scheduled a cascading update";
            } else if (commitCountInCurrentWorkLoop > 0) {
              warning2 = "Caused by a cascading update in earlier commit";
            }
            hasScheduledUpdateInCurrentCommit = false;
            commitCountInCurrentWorkLoop++;
            isCommitting = false;
            labelsInCurrentCommit.clear();
            endMark("(Committing Changes)", "(Committing Changes)", warning2);
          }
        }
        function startCommitSnapshotEffectsTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            effectCountInCurrentCommit = 0;
            beginMark("(Committing Snapshot Effects)");
          }
        }
        function stopCommitSnapshotEffectsTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark("(Committing Snapshot Effects: " + count + " Total)", "(Committing Snapshot Effects)", null);
          }
        }
        function startCommitHostEffectsTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            effectCountInCurrentCommit = 0;
            beginMark("(Committing Host Effects)");
          }
        }
        function stopCommitHostEffectsTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark("(Committing Host Effects: " + count + " Total)", "(Committing Host Effects)", null);
          }
        }
        function startCommitLifeCyclesTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            effectCountInCurrentCommit = 0;
            beginMark("(Calling Lifecycle Methods)");
          }
        }
        function stopCommitLifeCyclesTimer() {
          {
            if (!supportsUserTiming) {
              return;
            }
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0;
            endMark("(Calling Lifecycle Methods: " + count + " Total)", "(Calling Lifecycle Methods)", null);
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue2) {
          return {
            current: defaultValue2
          };
        }
        function pop(cursor, fiber) {
          if (index < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
        function push(cursor, value2, fiber) {
          index++;
          valueStack[index] = cursor.current;
          {
            fiberStack[index] = fiber;
          }
          cursor.current = value2;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context2 = {};
            for (var key in contextTypes) {
              context2[key] = unmaskedContext[key];
            }
            {
              var name = getComponentName(type) || "Unknown";
              checkPropTypes2(contextTypes, context2, "context", name, getCurrentFiberStackInDev);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context2);
            }
            return context2;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context2, didChange) {
          {
            if (!(contextStackCursor.current === emptyContextObject)) {
              {
                throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            push(contextStackCursor, context2, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentName(type) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext;
            startPhaseTimer(fiber, "getChildContext");
            childContext = instance.getChildContext();
            stopPhaseTimer();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                {
                  throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
            }
            {
              var name = getComponentName(type) || "Unknown";
              checkPropTypes2(
                childContextTypes,
                childContext,
                "child context",
                name,
                getCurrentFiberStackInDev
              );
            }
            return _assign({}, parentContext, {}, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              {
                throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
              {
                throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component = node.type;
                  if (isContextProvider(Component)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            {
              {
                throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        var LegacyRoot = 0;
        var BlockingRoot = 1;
        var ConcurrentRoot = 2;
        var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
        {
          if (!(tracing$1.__interactionsRef != null && tracing$1.__interactionsRef.current != null)) {
            {
              throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling");
            }
          }
        }
        var fakeCallbackNode = {};
        var ImmediatePriority = 99;
        var UserBlockingPriority$1 = 98;
        var NormalPriority = 97;
        var LowPriority = 96;
        var IdlePriority = 95;
        var NoPriority = 90;
        var shouldYield = Scheduler_shouldYield;
        var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
        };
        var syncQueue = null;
        var immediateQueueCallbackNode = null;
        var isFlushingSyncQueue = false;
        var initialTimeMs = Scheduler_now();
        var now2 = initialTimeMs < 1e4 ? Scheduler_now : function() {
          return Scheduler_now() - initialTimeMs;
        };
        function getCurrentPriorityLevel() {
          switch (Scheduler_getCurrentPriorityLevel()) {
            case Scheduler_ImmediatePriority:
              return ImmediatePriority;
            case Scheduler_UserBlockingPriority:
              return UserBlockingPriority$1;
            case Scheduler_NormalPriority:
              return NormalPriority;
            case Scheduler_LowPriority:
              return LowPriority;
            case Scheduler_IdlePriority:
              return IdlePriority;
            default: {
              {
                throw Error("Unknown priority level.");
              }
            }
          }
        }
        function reactPriorityToSchedulerPriority(reactPriorityLevel) {
          switch (reactPriorityLevel) {
            case ImmediatePriority:
              return Scheduler_ImmediatePriority;
            case UserBlockingPriority$1:
              return Scheduler_UserBlockingPriority;
            case NormalPriority:
              return Scheduler_NormalPriority;
            case LowPriority:
              return Scheduler_LowPriority;
            case IdlePriority:
              return Scheduler_IdlePriority;
            default: {
              {
                throw Error("Unknown priority level.");
              }
            }
          }
        }
        function runWithPriority$1(reactPriorityLevel, fn) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_runWithPriority(priorityLevel, fn);
        }
        function scheduleCallback(reactPriorityLevel, callback, options) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_scheduleCallback(priorityLevel, callback, options);
        }
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
          } else {
            syncQueue.push(callback);
          }
          return fakeCallbackNode;
        }
        function cancelCallback(callbackNode) {
          if (callbackNode !== fakeCallbackNode) {
            Scheduler_cancelCallback(callbackNode);
          }
        }
        function flushSyncCallbackQueue() {
          if (immediateQueueCallbackNode !== null) {
            var node = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node);
          }
          flushSyncCallbackQueueImpl();
        }
        function flushSyncCallbackQueueImpl() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i = 0;
            try {
              var _isSync = true;
              var queue = syncQueue;
              runWithPriority$1(ImmediatePriority, function() {
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(_isSync);
                  } while (callback !== null);
                }
              });
              syncQueue = null;
            } catch (error2) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i + 1);
              }
              Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
              throw error2;
            } finally {
              isFlushingSyncQueue = false;
            }
          }
        }
        var NoMode = 0;
        var StrictMode = 1;
        var BlockingMode = 2;
        var ConcurrentMode = 4;
        var ProfileMode = 8;
        var MAX_SIGNED_31_BIT_INT = 1073741823;
        var NoWork = 0;
        var Never = 1;
        var Idle = 2;
        var ContinuousHydration = 3;
        var Sync = MAX_SIGNED_31_BIT_INT;
        var Batched = Sync - 1;
        var UNIT_SIZE = 10;
        var MAGIC_NUMBER_OFFSET = Batched - 1;
        function msToExpirationTime(ms) {
          return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
        }
        function expirationTimeToMs(expirationTime) {
          return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
        }
        function ceiling(num, precision) {
          return ((num / precision | 0) + 1) * precision;
        }
        function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
          return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
        }
        var LOW_PRIORITY_EXPIRATION = 5e3;
        var LOW_PRIORITY_BATCH_SIZE = 250;
        function computeAsyncExpiration(currentTime) {
          return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
        }
        function computeSuspenseExpiration(currentTime, timeoutMs) {
          return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
        }
        var HIGH_PRIORITY_EXPIRATION = 500;
        var HIGH_PRIORITY_BATCH_SIZE = 100;
        function computeInteractiveExpiration(currentTime) {
          return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
        }
        function inferPriorityFromExpirationTime(currentTime, expirationTime) {
          if (expirationTime === Sync) {
            return ImmediatePriority;
          }
          if (expirationTime === Never || expirationTime === Idle) {
            return IdlePriority;
          }
          var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);
          if (msUntil <= 0) {
            return ImmediatePriority;
          }
          if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
            return UserBlockingPriority$1;
          }
          if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
            return NormalPriority;
          }
          return IdlePriority;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set3) {
            var array = [];
            set3.forEach(function(value2) {
              array.push(value2);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn2("componentWillMount has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn2("componentWillReceiveProps has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn2("componentWillUpdate has been renamed, and is not recommended for use. See https://fb.me/react-unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              var firstComponentStack = getStackByFiberInDevAndProd(firstFiber);
              error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://fb.me/react-legacy-context%s", sortedNames, firstComponentStack);
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          };
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = /* @__PURE__ */ new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root3, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync(function() {
              scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root3, element) {
          {
            if (root3.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            syncUpdates(function() {
              updateContainer(element, root3, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              scheduleWork(fiber, Sync);
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root3, families) {
          {
            var hostInstances = /* @__PURE__ */ new Set();
            var types2 = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root3.current, types2, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types2, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types2.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types2, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types2, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = _assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        function readLazyComponentType(lazyComponent) {
          initializeLazyComponentType(lazyComponent);
          if (lazyComponent._status !== Resolved) {
            throw lazyComponent._result;
          }
          return lazyComponent._result;
        }
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastContextWithAllBitsObserved = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, nextValue) {
          var context2 = providerFiber.type._context;
          {
            push(valueCursor, context2._currentValue, providerFiber);
            context2._currentValue = nextValue;
            {
              if (context2._currentRenderer !== void 0 && context2._currentRenderer !== null && context2._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context2._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          var context2 = providerFiber.type._context;
          {
            context2._currentValue = currentValue;
          }
        }
        function calculateChangedBits(context2, newValue, oldValue) {
          if (objectIs(oldValue, newValue)) {
            return 0;
          } else {
            var changedBits = typeof context2._calculateChangedBits === "function" ? context2._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            {
              if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
              }
            }
            return changedBits | 0;
          }
        }
        function scheduleWorkOnParentPath(parent2, renderExpirationTime2) {
          var node = parent2;
          while (node !== null) {
            var alternate = node.alternate;
            if (node.childExpirationTime < renderExpirationTime2) {
              node.childExpirationTime = renderExpirationTime2;
              if (alternate !== null && alternate.childExpirationTime < renderExpirationTime2) {
                alternate.childExpirationTime = renderExpirationTime2;
              }
            } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime2) {
              alternate.childExpirationTime = renderExpirationTime2;
            } else {
              break;
            }
            node = node.return;
          }
        }
        function propagateContextChange(workInProgress2, context2, changedBits, renderExpirationTime2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context2 && (dependency.observedBits & changedBits) !== 0) {
                  if (fiber.tag === ClassComponent) {
                    var update = createUpdate(renderExpirationTime2, null);
                    update.tag = ForceUpdate;
                    enqueueUpdate(fiber, update);
                  }
                  if (fiber.expirationTime < renderExpirationTime2) {
                    fiber.expirationTime = renderExpirationTime2;
                  }
                  var alternate = fiber.alternate;
                  if (alternate !== null && alternate.expirationTime < renderExpirationTime2) {
                    alternate.expirationTime = renderExpirationTime2;
                  }
                  scheduleWorkOnParentPath(fiber.return, renderExpirationTime2);
                  if (list.expirationTime < renderExpirationTime2) {
                    list.expirationTime = renderExpirationTime2;
                  }
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderExpirationTime2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
              if (dependencies.expirationTime >= renderExpirationTime2) {
                markWorkInProgressReceivedUpdate();
              }
              dependencies.firstContext = null;
            }
          }
        }
        function readContext(context2, observedBits) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          if (lastContextWithAllBitsObserved === context2)
            ;
          else if (observedBits === false || observedBits === 0)
            ;
          else {
            var resolvedObservedBits;
            if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
              lastContextWithAllBitsObserved = context2;
              resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
            } else {
              resolvedObservedBits = observedBits;
            }
            var contextItem = {
              context: context2,
              observedBits: resolvedObservedBits,
              next: null
            };
            if (lastContextDependency === null) {
              if (!(currentlyRenderingFiber !== null)) {
                {
                  throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                expirationTime: NoWork,
                firstContext: contextItem,
                responders: null
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return context2._currentValue;
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            baseQueue: null,
            shared: {
              pending: null
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone2 = {
              baseState: currentQueue.baseState,
              baseQueue: currentQueue.baseQueue,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone2;
          }
        }
        function createUpdate(expirationTime, suspenseConfig) {
          var update = {
            expirationTime,
            suspenseConfig,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          update.next = update;
          {
            update.priority = getCurrentPriorityLevel();
          }
          return update;
        }
        function enqueueUpdate(fiber, update) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          var pending = sharedQueue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          sharedQueue.pending = update;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
        }
        function enqueueCapturedUpdate(workInProgress2, update) {
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            cloneUpdateQueue(current2, workInProgress2);
          }
          var queue = workInProgress2.updateQueue;
          var last2 = queue.baseQueue;
          if (last2 === null) {
            queue.baseQueue = update.next = update;
            update.next = update;
          } else {
            update.next = last2.next;
            last2.next = update;
          }
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                  if (workInProgress2.mode & StrictMode) {
                    payload.call(instance, prevState, nextProps);
                  }
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.effectTag = workInProgress2.effectTag & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                  if (workInProgress2.mode & StrictMode) {
                    _payload.call(instance, prevState, nextProps);
                  }
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return _assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderExpirationTime2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var baseQueue = queue.baseQueue;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            baseQueue = pendingQueue;
            queue.shared.pending = null;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (currentQueue !== null) {
                currentQueue.baseQueue = pendingQueue;
              }
            }
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = queue.baseState;
            var newExpirationTime = NoWork;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            if (first !== null) {
              var update = first;
              do {
                var updateExpirationTime = update.expirationTime;
                if (updateExpirationTime < renderExpirationTime2) {
                  var clone2 = {
                    expirationTime: update.expirationTime,
                    suspenseConfig: update.suspenseConfig,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone2;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone2;
                  }
                  if (updateExpirationTime > newExpirationTime) {
                    newExpirationTime = updateExpirationTime;
                  }
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      expirationTime: Sync,
                      suspenseConfig: update.suspenseConfig,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig);
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null) {
                    workInProgress2.effectTag |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null || update === first) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    update = baseQueue.next = pendingQueue.next;
                    pendingQueue.next = first;
                    queue.baseQueue = baseQueue = pendingQueue;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
            }
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            queue.baseState = newBaseState;
            queue.baseQueue = newBaseQueueLast;
            markUnprocessedUpdateTime(newExpirationTime);
            workInProgress2.expirationTime = newExpirationTime;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context2) {
          if (!(typeof callback === "function")) {
            {
              throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
            }
          }
          callback.call(context2);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i = 0; i < effects.length; i++) {
              var effect = effects[i];
              var callback = effect.callback;
              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        function requestCurrentSuspenseConfig() {
          return ReactCurrentBatchConfig.suspense;
        }
        var fakeInternalInstance = {};
        var isArray2 = Array.isArray;
        var emptyRefsObject = new React2.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentName(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              {
                {
                  throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                }
              }
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          {
            if (workInProgress2.mode & StrictMode) {
              getDerivedStateFromProps(nextProps, prevState);
            }
          }
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.expirationTime === NoWork) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get2(inst);
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var update = createUpdate(expirationTime, suspenseConfig);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleWork(fiber, expirationTime);
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get2(inst);
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var update = createUpdate(expirationTime, suspenseConfig);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleWork(fiber, expirationTime);
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get2(inst);
            var currentTime = requestCurrentTimeForUpdate();
            var suspenseConfig = requestCurrentSuspenseConfig();
            var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
            var update = createUpdate(expirationTime, suspenseConfig);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleWork(fiber, expirationTime);
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            {
              if (workInProgress2.mode & StrictMode) {
                instance.shouldComponentUpdate(newProps, newState, nextContext);
              }
            }
            startPhaseTimer(workInProgress2, "shouldComponentUpdate");
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            stopPhaseTimer();
            {
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual2(oldProps, newProps) || !shallowEqual2(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentName(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray2(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set2(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context2 = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid2 = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context2 = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context2 = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          {
            if (workInProgress2.mode & StrictMode) {
              new ctor(props, context2);
            }
          }
          var instance = new ctor(props, context2);
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context2);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          startPhaseTimer(workInProgress2, "componentWillMount");
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          stopPhaseTimer();
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          startPhaseTimer(workInProgress2, "componentWillReceiveProps");
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          stopPhaseTimer();
          if (instance.state !== oldState) {
            {
              var componentName = getComponentName(workInProgress2.type) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderExpirationTime2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = emptyRefsObject;
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            workInProgress2.effectTag |= Update;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderExpirationTime2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.effectTag |= Update;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              startPhaseTimer(workInProgress2, "componentWillMount");
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
              stopPhaseTimer();
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.effectTag |= Update;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.effectTag |= Update;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderExpirationTime2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var oldProps = workInProgress2.memoizedProps;
          instance.props = workInProgress2.type === workInProgress2.elementType ? oldProps : resolveDefaultProps(workInProgress2.type, oldProps);
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderExpirationTime2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              startPhaseTimer(workInProgress2, "componentWillUpdate");
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
              stopPhaseTimer();
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.effectTag |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.effectTag |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (oldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.effectTag |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (!(typeof child._store === "object")) {
              {
                throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            child._store.validated = true;
            var currentComponentErrorInfo = 'Each child in a list should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.' + getCurrentFiberStackInDev();
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            error('Each child in a list should have a unique "key" prop. See https://fb.me/react-warning-keys for more information.');
          };
        }
        var isArray$12 = Array.isArray;
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentName(returnFiber.type) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref%s', mixedRef, getStackByFiberInDevAndProd(returnFiber));
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (!(ownerFiber.tag === ClassComponent)) {
                  {
                    throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref");
                  }
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                {
                  throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function(value2) {
                var refs = inst.refs;
                if (refs === emptyRefsObject) {
                  refs = inst.refs = {};
                }
                if (value2 === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value2;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (!(typeof mixedRef === "string")) {
                {
                  throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
              }
              if (!element._owner) {
                {
                  throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.");
                }
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          if (returnFiber.type !== "textarea") {
            var addendum = "";
            {
              addendum = " If you meant to render a collection of children, use an array instead." + getCurrentFiberStackInDev();
            }
            {
              {
                throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + ")." + addendum);
              }
            }
          }
        }
        function warnOnFunctionType() {
          {
            var currentComponentErrorInfo = "Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it." + getCurrentFiberStackInDev();
            if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var last2 = returnFiber.lastEffect;
            if (last2 !== null) {
              last2.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
            childToDelete.nextEffect = null;
            childToDelete.effectTag = Deletion;
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = /* @__PURE__ */ new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone2 = createWorkInProgress(fiber, pendingProps);
            clone2.index = 0;
            clone2.sibling = null;
            return clone2;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.effectTag = Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.effectTag = Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.effectTag = Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, expirationTime) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, expirationTime) {
            if (current2 !== null) {
              if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, expirationTime) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, expirationTime, key) {
            if (current2 === null || current2.tag !== Fragment2) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, expirationTime) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, expirationTime);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);
                  _created2.return = returnFiber;
                  return _created2;
                }
              }
              if (isArray$12(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, expirationTime);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                    }
                    return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                  } else {
                    return null;
                  }
                }
              }
              if (isArray$12(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, expirationTime, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, expirationTime);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                  }
                  return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
                }
              }
              if (isArray$12(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, expirationTime, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = /* @__PURE__ */ new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
            {
              var knownKeys = null;
              for (var i = 0; i < newChildren.length; i++) {
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (!(typeof iteratorFn === "function")) {
              {
                throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            {
              if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is unsupported and will likely yield unexpected results. Convert it to a sequence/iterable of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (!(newChildren != null)) {
              {
                throw Error("An iterable object provided no iterator.");
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                switch (child.tag) {
                  case Fragment2: {
                    if (element.type === REACT_FRAGMENT_TYPE) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                    break;
                  }
                  case Block:
                  default: {
                    if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing3 = useFiber(child, element.props);
                      _existing3.ref = coerceRef(returnFiber, child, element);
                      _existing3.return = returnFiber;
                      {
                        _existing3._debugSource = element._source;
                        _existing3._debugOwner = element._owner;
                      }
                      return _existing3;
                    }
                    break;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, expirationTime) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            var isObject2 = typeof newChild === "object" && newChild !== null;
            if (isObject2) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
              }
            }
            if (typeof newChild === "string" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, expirationTime));
            }
            if (isArray$12(newChild)) {
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
            }
            if (getIteratorFn(newChild)) {
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
            }
            if (isObject2) {
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType();
              }
            }
            if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
              switch (returnFiber.tag) {
                case ClassComponent: {
                  {
                    var instance = returnFiber.stateNode;
                    if (instance.render._isMockFunction) {
                      break;
                    }
                  }
                }
                case FunctionComponent: {
                  var Component = returnFiber.type;
                  {
                    {
                      throw Error((Component.displayName || Component.name || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                    }
                  }
                }
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (!(current2 === null || workInProgress2.child === current2.child)) {
            {
              throw Error("Resuming work not yet implemented.");
            }
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, renderExpirationTime2) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, renderExpirationTime2);
            child = child.sibling;
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c) {
          if (!(c !== NO_CONTEXT)) {
            {
              throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return c;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context2 = requiredContext(contextStackCursor$1.current);
          return context2;
        }
        function pushHostContext(fiber) {
          requiredContext(rootInstanceStackCursor.current);
          var context2 = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context2, fiber.type);
          if (context2 === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          if (props.fallback === void 0) {
            return false;
          }
          if (props.unstable_avoidThisFallback !== true) {
            return true;
          }
          if (hasInvisibleParent) {
            return false;
          }
          return true;
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.effectTag & DidCapture) !== NoEffect;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function createDeprecatedResponderListener(responder, props) {
          var eventResponderListener = {
            responder,
            props
          };
          {
            Object.freeze(eventResponderListener);
          }
          return eventResponderListener;
        }
        var HasEffect = 1;
        var Layout = 2;
        var Passive$1 = 4;
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        {
          didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
        }
        var renderExpirationTime = NoWork;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentName(currentlyRenderingFiber$1.type);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                  var oldHookName = hookTypesDev[i];
                  var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderExpirationTime) {
          renderExpirationTime = nextRenderExpirationTime;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.expirationTime = NoWork;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component(props, secondArg);
          if (workInProgress2.expirationTime === renderExpirationTime) {
            var numberOfReRenders = 0;
            do {
              workInProgress2.expirationTime = NoWork;
              if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                {
                  throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher.current = HooksDispatcherOnRerenderInDEV;
              children = Component(props, secondArg);
            } while (workInProgress2.expirationTime === renderExpirationTime);
          }
          ReactCurrentDispatcher.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderExpirationTime = NoWork;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
          }
          didScheduleRenderPhaseUpdate = false;
          if (!!didRenderTooFewHooks) {
            {
              throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
          }
          return children;
        }
        function bailoutHooks(current2, workInProgress2, expirationTime) {
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.effectTag &= ~(Passive | Update);
          if (current2.expirationTime <= expirationTime) {
            current2.expirationTime = NoWork;
          }
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
          }
          renderExpirationTime = NoWork;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (!(nextCurrentHook !== null)) {
              {
                throw Error("Rendered more hooks than during the previous render.");
              }
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (!(queue !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }
          queue.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateExpirationTime = update.expirationTime;
              if (updateExpirationTime < renderExpirationTime) {
                var clone2 = {
                  expirationTime: update.expirationTime,
                  suspenseConfig: update.suspenseConfig,
                  action: update.action,
                  eagerReducer: update.eagerReducer,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone2;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone2;
                }
                if (updateExpirationTime > currentlyRenderingFiber$1.expirationTime) {
                  currentlyRenderingFiber$1.expirationTime = updateExpirationTime;
                  markUnprocessedUpdateTime(updateExpirationTime);
                }
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    expirationTime: Sync,
                    suspenseConfig: update.suspenseConfig,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig);
                if (update.eagerReducer === reducer) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (!(queue !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create, destroy, deps) {
          var effect = {
            tag,
            create,
            destroy,
            deps,
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          var ref = {
            current: initialValue
          };
          {
            Object.seal(ref);
          }
          hook.memoizedState = ref;
          return ref;
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
          hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, void 0, nextDeps);
        }
        function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                pushEffect(hookEffectTag, create, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
          hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, destroy, nextDeps);
        }
        function mountEffect(create, deps) {
          {
            if ("undefined" !== typeof jest) {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return mountEffectImpl(Update | Passive, Passive$1, create, deps);
        }
        function updateEffect(create, deps) {
          {
            if ("undefined" !== typeof jest) {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return updateEffectImpl(Update | Passive, Passive$1, create, deps);
        }
        function mountLayoutEffect(create, deps) {
          return mountEffectImpl(Update, Layout, create, deps);
        }
        function updateLayoutEffect(create, deps) {
          return updateEffectImpl(Update, Layout, create, deps);
        }
        function imperativeHandleEffect(create, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function mountDebugValue(value2, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value2, config2) {
          var _mountState = mountState(value2), prevValue = _mountState[0], setValue2 = _mountState[1];
          mountEffect(function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config2 === void 0 ? null : config2;
            try {
              setValue2(value2);
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          }, [value2, config2]);
          return prevValue;
        }
        function updateDeferredValue(value2, config2) {
          var _updateState = updateState(), prevValue = _updateState[0], setValue2 = _updateState[1];
          updateEffect(function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config2 === void 0 ? null : config2;
            try {
              setValue2(value2);
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          }, [value2, config2]);
          return prevValue;
        }
        function rerenderDeferredValue(value2, config2) {
          var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue2 = _rerenderState[1];
          updateEffect(function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config2 === void 0 ? null : config2;
            try {
              setValue2(value2);
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          }, [value2, config2]);
          return prevValue;
        }
        function startTransition(setPending, config2, callback) {
          var priorityLevel = getCurrentPriorityLevel();
          runWithPriority$1(priorityLevel < UserBlockingPriority$1 ? UserBlockingPriority$1 : priorityLevel, function() {
            setPending(true);
          });
          runWithPriority$1(priorityLevel > NormalPriority ? NormalPriority : priorityLevel, function() {
            var previousConfig = ReactCurrentBatchConfig$1.suspense;
            ReactCurrentBatchConfig$1.suspense = config2 === void 0 ? null : config2;
            try {
              setPending(false);
              callback();
            } finally {
              ReactCurrentBatchConfig$1.suspense = previousConfig;
            }
          });
        }
        function mountTransition(config2) {
          var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
          var start = mountCallback(startTransition.bind(null, setPending, config2), [setPending, config2]);
          return [start, isPending];
        }
        function updateTransition(config2) {
          var _updateState2 = updateState(), isPending = _updateState2[0], setPending = _updateState2[1];
          var start = updateCallback(startTransition.bind(null, setPending, config2), [setPending, config2]);
          return [start, isPending];
        }
        function rerenderTransition(config2) {
          var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0], setPending = _rerenderState2[1];
          var start = updateCallback(startTransition.bind(null, setPending, config2), [setPending, config2]);
          return [start, isPending];
        }
        function dispatchAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var currentTime = requestCurrentTimeForUpdate();
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
          var update = {
            expirationTime,
            suspenseConfig,
            action,
            eagerReducer: null,
            eagerState: null,
            next: null
          };
          {
            update.priority = getCurrentPriorityLevel();
          }
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
          var alternate = fiber.alternate;
          if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
            didScheduleRenderPhaseUpdate = true;
            update.expirationTime = renderExpirationTime;
            currentlyRenderingFiber$1.expirationTime = renderExpirationTime;
          } else {
            if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher.current;
                  ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.eagerReducer = lastRenderedReducer;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher.current = prevDispatcher;
                  }
                }
              }
            }
            {
              if ("undefined" !== typeof jest) {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
              }
            }
            scheduleWork(fiber, expirationTime);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useResponder: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://fb.me/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context2, observedBits) {
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value2, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              mountHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value2, config2) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value2, config2);
            },
            useTransition: function(config2) {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition(config2);
            }
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context2, observedBits) {
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value2, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value2, config2) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value2, config2);
            },
            useTransition: function(config2) {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition(config2);
            }
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context2, observedBits) {
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value2, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value2, config2) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value2, config2);
            },
            useTransition: function(config2) {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition(config2);
            }
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context2, observedBits) {
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value2, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value2, config2) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value2, config2);
            },
            useTransition: function(config2) {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition(config2);
            }
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context2, observedBits) {
              warnInvalidContextAccess();
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value2, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value2, config2) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value2, config2);
            },
            useTransition: function(config2) {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition(config2);
            }
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context2, observedBits) {
              warnInvalidContextAccess();
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value2, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value2, config2) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value2, config2);
            },
            useTransition: function(config2) {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition(config2);
            }
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context2, observedBits) {
              warnInvalidContextAccess();
              return readContext(context2, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context2, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context2, observedBits);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }
            },
            useDebugValue: function(value2, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useResponder: function(responder, props) {
              currentHookNameInDev = "useResponder";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return createDeprecatedResponderListener(responder, props);
            },
            useDeferredValue: function(value2, config2) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value2, config2);
            },
            useTransition: function(config2) {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition(config2);
            }
          };
        }
        var now$12 = Scheduler.unstable_now;
        var commitTime = 0;
        var profilerStartTime = -1;
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$12();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$12();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$12();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$12() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChild(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          return true;
        }
        function deleteHydratableInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;
              case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
            }
          }
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          childToDelete.effectTag = Deletion;
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.effectTag = fiber.effectTag & ~Hydrating | Placement;
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    fiber.pendingProps;
                    didNotFindHydratableContainerInstance(parentContainer, type);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableContainerTextInstance(parentContainer, text);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent:
                    var _type = fiber.type;
                    fiber.pendingProps;
                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                    break;
                  case HostText:
                    var _text = fiber.pendingProps;
                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                    break;
                  case SuspenseComponent:
                    didNotFindHydratableSuspenseInstance(parentType, parentProps);
                    break;
                }
                break;
              }
              default:
                return;
            }
          }
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              return false;
            }
            default:
              return false;
          }
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
          }
          hydrationParentFiber = fiber;
          nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          {
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
                  }
                }
              }
            }
          }
          return shouldUpdate;
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            {
              throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent2 = fiber.return;
          while (parent2 !== null && parent2.tag !== HostComponent && parent2.tag !== HostRoot && parent2.tag !== SuspenseComponent) {
            parent2 = parent2.return;
          }
          hydrationParentFiber = parent2;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          var type = fiber.type;
          if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              deleteHydratableInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderExpirationTime2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderExpirationTime2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderExpirationTime2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
        }
        function updateForwardRef(current2, workInProgress2, Component, nextProps, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes2(
                  innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentName(Component),
                  getCurrentFiberStackInDev
                );
              }
            }
          }
          var render2 = Component.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderExpirationTime2);
            if (workInProgress2.mode & StrictMode) {
              if (workInProgress2.memoizedState !== null) {
                nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderExpirationTime2);
              }
            }
            setIsRendering(false);
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderExpirationTime2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
          }
          workInProgress2.effectTag |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component, nextProps, updateExpirationTime, renderExpirationTime2) {
          if (current2 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateExpirationTime, renderExpirationTime2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes2(
                  innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentName(type),
                  getCurrentFiberStackInDev
                );
              }
            }
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress2.mode, renderExpirationTime2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes2(
                _innerPropTypes,
                nextProps,
                "prop",
                getComponentName(_type),
                getCurrentFiberStackInDev
              );
            }
          }
          var currentChild = current2.child;
          if (updateExpirationTime < renderExpirationTime2) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual2;
            if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
            }
          }
          workInProgress2.effectTag |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, updateExpirationTime, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                outerMemoType = refineResolvedLazyComponent(outerMemoType);
              }
              var outerPropTypes = outerMemoType && outerMemoType.propTypes;
              if (outerPropTypes) {
                checkPropTypes2(
                  outerPropTypes,
                  nextProps,
                  "prop",
                  getComponentName(outerMemoType),
                  getCurrentFiberStackInDev
                );
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual2(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              if (updateExpirationTime < renderExpirationTime2) {
                workInProgress2.expirationTime = current2.expirationTime;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderExpirationTime2);
        }
        function updateFragment(current2, workInProgress2, renderExpirationTime2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderExpirationTime2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderExpirationTime2) {
          {
            workInProgress2.effectTag |= Update;
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.effectTag |= Ref;
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes2(
                  innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentName(Component),
                  getCurrentFiberStackInDev
                );
              }
            }
          }
          var context2;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
            context2 = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context2, renderExpirationTime2);
            if (workInProgress2.mode & StrictMode) {
              if (workInProgress2.memoizedState !== null) {
                nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context2, renderExpirationTime2);
              }
            }
            setIsRendering(false);
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderExpirationTime2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
          }
          workInProgress2.effectTag |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component, nextProps, renderExpirationTime2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes2(
                  innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentName(Component),
                  getCurrentFiberStackInDev
                );
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.effectTag |= Placement;
            }
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderExpirationTime2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderExpirationTime2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderExpirationTime2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderExpirationTime2);
          {
            var inst = workInProgress2.stateNode;
            if (inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderExpirationTime2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.effectTag & DidCapture) !== NoEffect;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictMode) {
                instance.render();
              }
              setIsRendering(false);
            }
          }
          workInProgress2.effectTag |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderExpirationTime2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root3 = workInProgress2.stateNode;
          if (root3.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
          } else if (root3.context) {
            pushTopLevelContextObject(workInProgress2, root3.context, false);
          }
          pushHostContainer(workInProgress2, root3.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderExpirationTime2) {
          pushHostRootContext(workInProgress2);
          var updateQueue = workInProgress2.updateQueue;
          if (!(current2 !== null && updateQueue !== null)) {
            {
              throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState !== null ? prevState.element : null;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderExpirationTime2);
          var nextState = workInProgress2.memoizedState;
          var nextChildren = nextState.element;
          if (nextChildren === prevChildren) {
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
          }
          var root3 = workInProgress2.stateNode;
          if (root3.hydrate && enterHydrationState(workInProgress2)) {
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
            workInProgress2.child = child;
            var node = child;
            while (node) {
              node.effectTag = node.effectTag & ~Placement | Hydrating;
              node = node.sibling;
            }
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
            resetHydrationState();
          }
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderExpirationTime2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.effectTag |= ContentReset;
          }
          markRef(current2, workInProgress2);
          if (workInProgress2.mode & ConcurrentMode && renderExpirationTime2 !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
            {
              markSpawnedWork(Never);
            }
            workInProgress2.expirationTime = workInProgress2.childExpirationTime = Never;
            return null;
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, updateExpirationTime, renderExpirationTime2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.effectTag |= Placement;
          }
          var props = workInProgress2.pendingProps;
          cancelWorkTimer(workInProgress2);
          var Component = readLazyComponentType(elementType);
          workInProgress2.type = Component;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
          startWorkTimer(workInProgress2);
          var resolvedProps = resolveDefaultProps(Component, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component);
                workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderExpirationTime2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component = resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderExpirationTime2);
              return child;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderExpirationTime2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes2(
                      outerPropTypes,
                      resolvedProps,
                      "prop",
                      getComponentName(Component),
                      getCurrentFiberStackInDev
                    );
                  }
                }
              }
              child = updateMemoComponent(
                null,
                workInProgress2,
                Component,
                resolveDefaultProps(Component.type, resolvedProps),
                updateExpirationTime,
                renderExpirationTime2
              );
              return child;
            }
          }
          var hint = "";
          {
            if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          {
            {
              throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
            }
          }
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderExpirationTime2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.effectTag |= Placement;
          }
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(workInProgress2, Component, nextProps, renderExpirationTime2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderExpirationTime2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component, renderExpirationTime2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.effectTag |= Placement;
          }
          var props = workInProgress2.pendingProps;
          var context2;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
            context2 = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          var value2;
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentName(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value2 = renderWithHooks(null, workInProgress2, Component, props, context2, renderExpirationTime2);
            setIsRendering(false);
          }
          workInProgress2.effectTag |= PerformedWork;
          if (typeof value2 === "object" && value2 !== null && typeof value2.render === "function" && value2.$$typeof === void 0) {
            {
              var _componentName = getComponentName(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value2.state !== null && value2.state !== void 0 ? value2.state : null;
            initializeUpdateQueue(workInProgress2);
            var getDerivedStateFromProps = Component.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, Component, getDerivedStateFromProps, props);
            }
            adoptClassInstance(workInProgress2, value2);
            mountClassInstance(workInProgress2, Component, props, renderExpirationTime2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderExpirationTime2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictMode) {
                if (workInProgress2.memoizedState !== null) {
                  value2 = renderWithHooks(null, workInProgress2, Component, props, context2, renderExpirationTime2);
                }
              }
            }
            reconcileChildren(null, workInProgress2, value2, renderExpirationTime2);
            {
              validateFunctionComponentInDev(workInProgress2, Component);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || workInProgress2._debugID || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName2 = getComponentName(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName2);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName3 = getComponentName(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support contextType.", _componentName3);
                didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          retryTime: NoWork
        };
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2) {
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current2 === null || current2.memoizedState !== null);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderExpirationTime2) {
          var mode = workInProgress2.mode;
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.effectTag |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var nextDidTimeout = false;
          var didSuspend = (workInProgress2.effectTag & DidCapture) !== NoEffect;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            nextDidTimeout = true;
            workInProgress2.effectTag &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            if (nextProps.fallback !== void 0) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            if (nextDidTimeout) {
              var nextFallbackChildren = nextProps.fallback;
              var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
              primaryChildFragment.return = workInProgress2;
              if ((workInProgress2.mode & BlockingMode) === NoMode) {
                var progressedState = workInProgress2.memoizedState;
                var progressedPrimaryChild = progressedState !== null ? workInProgress2.child.child : workInProgress2.child;
                primaryChildFragment.child = progressedPrimaryChild;
                var progressedChild = progressedPrimaryChild;
                while (progressedChild !== null) {
                  progressedChild.return = primaryChildFragment;
                  progressedChild = progressedChild.sibling;
                }
              }
              var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime2, null);
              fallbackChildFragment.return = workInProgress2;
              primaryChildFragment.sibling = fallbackChildFragment;
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              workInProgress2.child = primaryChildFragment;
              return fallbackChildFragment;
            } else {
              var nextPrimaryChildren = nextProps.children;
              workInProgress2.memoizedState = null;
              return workInProgress2.child = mountChildFibers(workInProgress2, null, nextPrimaryChildren, renderExpirationTime2);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var currentPrimaryChildFragment = current2.child;
              var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
              if (nextDidTimeout) {
                var _nextFallbackChildren2 = nextProps.fallback;
                var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps);
                _primaryChildFragment2.return = workInProgress2;
                if ((workInProgress2.mode & BlockingMode) === NoMode) {
                  var _progressedState = workInProgress2.memoizedState;
                  var _progressedPrimaryChild = _progressedState !== null ? workInProgress2.child.child : workInProgress2.child;
                  if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
                    _primaryChildFragment2.child = _progressedPrimaryChild;
                    var _progressedChild2 = _progressedPrimaryChild;
                    while (_progressedChild2 !== null) {
                      _progressedChild2.return = _primaryChildFragment2;
                      _progressedChild2 = _progressedChild2.sibling;
                    }
                  }
                }
                if (workInProgress2.mode & ProfileMode) {
                  var _treeBaseDuration = 0;
                  var _hiddenChild = _primaryChildFragment2.child;
                  while (_hiddenChild !== null) {
                    _treeBaseDuration += _hiddenChild.treeBaseDuration;
                    _hiddenChild = _hiddenChild.sibling;
                  }
                  _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
                }
                var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2);
                _fallbackChildFragment2.return = workInProgress2;
                _primaryChildFragment2.sibling = _fallbackChildFragment2;
                _primaryChildFragment2.childExpirationTime = NoWork;
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.child = _primaryChildFragment2;
                return _fallbackChildFragment2;
              } else {
                var _nextPrimaryChildren = nextProps.children;
                var currentPrimaryChild = currentPrimaryChildFragment.child;
                var primaryChild = reconcileChildFibers(workInProgress2, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime2);
                workInProgress2.memoizedState = null;
                return workInProgress2.child = primaryChild;
              }
            } else {
              var _currentPrimaryChild = current2.child;
              if (nextDidTimeout) {
                var _nextFallbackChildren3 = nextProps.fallback;
                var _primaryChildFragment3 = createFiberFromFragment(
                  null,
                  mode,
                  NoWork,
                  null
                );
                _primaryChildFragment3.return = workInProgress2;
                _primaryChildFragment3.child = _currentPrimaryChild;
                if (_currentPrimaryChild !== null) {
                  _currentPrimaryChild.return = _primaryChildFragment3;
                }
                if ((workInProgress2.mode & BlockingMode) === NoMode) {
                  var _progressedState2 = workInProgress2.memoizedState;
                  var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress2.child.child : workInProgress2.child;
                  _primaryChildFragment3.child = _progressedPrimaryChild2;
                  var _progressedChild3 = _progressedPrimaryChild2;
                  while (_progressedChild3 !== null) {
                    _progressedChild3.return = _primaryChildFragment3;
                    _progressedChild3 = _progressedChild3.sibling;
                  }
                }
                if (workInProgress2.mode & ProfileMode) {
                  var _treeBaseDuration2 = 0;
                  var _hiddenChild2 = _primaryChildFragment3.child;
                  while (_hiddenChild2 !== null) {
                    _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
                    _hiddenChild2 = _hiddenChild2.sibling;
                  }
                  _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
                }
                var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime2, null);
                _fallbackChildFragment3.return = workInProgress2;
                _primaryChildFragment3.sibling = _fallbackChildFragment3;
                _fallbackChildFragment3.effectTag |= Placement;
                _primaryChildFragment3.childExpirationTime = NoWork;
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.child = _primaryChildFragment3;
                return _fallbackChildFragment3;
              } else {
                workInProgress2.memoizedState = null;
                var _nextPrimaryChildren2 = nextProps.children;
                return workInProgress2.child = reconcileChildFibers(workInProgress2, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime2);
              }
            }
          }
        }
        function scheduleWorkOnFiber(fiber, renderExpirationTime2) {
          if (fiber.expirationTime < renderExpirationTime2) {
            fiber.expirationTime = renderExpirationTime2;
          }
          var alternate = fiber.alternate;
          if (alternate !== null && alternate.expirationTime < renderExpirationTime2) {
            alternate.expirationTime = renderExpirationTime2;
          }
          scheduleWorkOnParentPath(fiber.return, renderExpirationTime2);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderExpirationTime2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleWorkOnFiber(node, renderExpirationTime2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleWorkOnFiber(node, renderExpirationTime2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index2) {
          {
            var isArray3 = Array.isArray(childSlot);
            var isIterable = !isArray3 && typeof getIteratorFn(childSlot) === "function";
            if (isArray3 || isIterable) {
              var type = isArray3 ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (Array.isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  if (!validateSuspenseListNestedChild(children[i], i)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailExpiration: 0,
              tailMode,
              lastEffect: lastEffectBeforeRendering
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailExpiration = 0;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderExpirationTime2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderExpirationTime2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.effectTag |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.effectTag & DidCapture) !== NoEffect;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderExpirationTime2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & BlockingMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  tail,
                  lastContentRow,
                  tailMode,
                  workInProgress2.lastEffect
                );
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  true,
                  _tail,
                  null,
                  tailMode,
                  workInProgress2.lastEffect
                );
                break;
              }
              case "together": {
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  null,
                  null,
                  void 0,
                  workInProgress2.lastEffect
                );
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderExpirationTime2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderExpirationTime2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderExpirationTime2);
          }
          return workInProgress2.child;
        }
        function updateContextProvider(current2, workInProgress2, renderExpirationTime2) {
          var providerType = workInProgress2.type;
          var context2 = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes2(providerPropTypes, newProps, "prop", "Context.Provider", getCurrentFiberStackInDev);
            }
          }
          pushProvider(workInProgress2, newValue);
          if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context2, newValue, oldValue);
            if (changedBits === 0) {
              if (oldProps.children === newProps.children && !hasContextChanged()) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
              }
            } else {
              propagateContextChange(workInProgress2, context2, changedBits, renderExpirationTime2);
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderExpirationTime2) {
          var context2 = workInProgress2.type;
          {
            if (context2._context === void 0) {
              if (context2 !== context2.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context2 = context2._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderExpirationTime2);
          var newValue = readContext(context2, newProps.unstable_observedBits);
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          workInProgress2.effectTag |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderExpirationTime2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2) {
          cancelWorkTimer(workInProgress2);
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          var updateExpirationTime = workInProgress2.expirationTime;
          if (updateExpirationTime !== NoWork) {
            markUnprocessedUpdateTime(updateExpirationTime);
          }
          var childExpirationTime = workInProgress2.childExpirationTime;
          if (childExpirationTime < renderExpirationTime2) {
            return null;
          } else {
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var last2 = returnFiber.lastEffect;
            if (last2 !== null) {
              last2.nextEffect = current2;
              returnFiber.lastEffect = current2;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = current2;
            }
            current2.nextEffect = null;
            current2.effectTag = Deletion;
            newWorkInProgress.effectTag |= Placement;
            return newWorkInProgress;
          }
        }
        function beginWork(current2, workInProgress2, renderExpirationTime2) {
          var updateExpirationTime = workInProgress2.expirationTime;
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.expirationTime));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else if (updateExpirationTime < renderExpirationTime2) {
              didReceiveUpdate = false;
              switch (workInProgress2.tag) {
                case HostRoot:
                  pushHostRootContext(workInProgress2);
                  resetHydrationState();
                  break;
                case HostComponent:
                  pushHostContext(workInProgress2);
                  if (workInProgress2.mode & ConcurrentMode && renderExpirationTime2 !== Never && shouldDeprioritizeSubtree(workInProgress2.type, newProps)) {
                    {
                      markSpawnedWork(Never);
                    }
                    workInProgress2.expirationTime = workInProgress2.childExpirationTime = Never;
                    return null;
                  }
                  break;
                case ClassComponent: {
                  var Component = workInProgress2.type;
                  if (isContextProvider(Component)) {
                    pushContextProvider(workInProgress2);
                  }
                  break;
                }
                case HostPortal:
                  pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                  break;
                case ContextProvider: {
                  var newValue = workInProgress2.memoizedProps.value;
                  pushProvider(workInProgress2, newValue);
                  break;
                }
                case Profiler:
                  {
                    var hasChildWork = workInProgress2.childExpirationTime >= renderExpirationTime2;
                    if (hasChildWork) {
                      workInProgress2.effectTag |= Update;
                    }
                  }
                  break;
                case SuspenseComponent: {
                  var state = workInProgress2.memoizedState;
                  if (state !== null) {
                    var primaryChildFragment = workInProgress2.child;
                    var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;
                    if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime2) {
                      return updateSuspenseComponent(current2, workInProgress2, renderExpirationTime2);
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                      var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
                      if (child !== null) {
                        return child.sibling;
                      } else {
                        return null;
                      }
                    }
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  }
                  break;
                }
                case SuspenseListComponent: {
                  var didSuspendBefore = (current2.effectTag & DidCapture) !== NoEffect;
                  var _hasChildWork = workInProgress2.childExpirationTime >= renderExpirationTime2;
                  if (didSuspendBefore) {
                    if (_hasChildWork) {
                      return updateSuspenseListComponent(current2, workInProgress2, renderExpirationTime2);
                    }
                    workInProgress2.effectTag |= DidCapture;
                  }
                  var renderState = workInProgress2.memoizedState;
                  if (renderState !== null) {
                    renderState.rendering = null;
                    renderState.tail = null;
                  }
                  pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                  if (_hasChildWork) {
                    break;
                  } else {
                    return null;
                  }
                }
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderExpirationTime2);
            } else {
              didReceiveUpdate = false;
            }
          } else {
            didReceiveUpdate = false;
          }
          workInProgress2.expirationTime = NoWork;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderExpirationTime2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, updateExpirationTime, renderExpirationTime2);
            }
            case FunctionComponent: {
              var _Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderExpirationTime2);
            }
            case ClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderExpirationTime2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderExpirationTime2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderExpirationTime2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderExpirationTime2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderExpirationTime2);
            case ForwardRef: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderExpirationTime2);
            }
            case Fragment2:
              return updateFragment(current2, workInProgress2, renderExpirationTime2);
            case Mode:
              return updateMode(current2, workInProgress2, renderExpirationTime2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderExpirationTime2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderExpirationTime2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderExpirationTime2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes2(
                      outerPropTypes,
                      _resolvedProps3,
                      "prop",
                      getComponentName(_type2),
                      getCurrentFiberStackInDev
                    );
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateExpirationTime, renderExpirationTime2);
            }
            case IncompleteClassComponent: {
              var _Component3 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderExpirationTime2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderExpirationTime2);
            }
          }
          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function markUpdate(workInProgress2) {
          workInProgress2.effectTag |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.effectTag |= Ref;
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function(parent2, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent2, node.stateNode);
              } else if (node.tag === HostPortal)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function completeWork(current2, workInProgress2, renderExpirationTime2) {
          var newProps = workInProgress2.pendingProps;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment2:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              return null;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              return null;
            }
            case HostRoot: {
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              var fiberRoot = workInProgress2.stateNode;
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                }
              }
              updateHostContainer(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (!(workInProgress2.stateNode !== null)) {
                    {
                      throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (!(workInProgress2.stateNode !== null)) {
                    {
                      throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if ((workInProgress2.effectTag & DidCapture) !== NoEffect) {
                workInProgress2.expirationTime = renderExpirationTime2;
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = false;
              if (current2 === null) {
                if (workInProgress2.memoizedProps.fallback !== void 0) {
                  popHydrationState(workInProgress2);
                }
              } else {
                var prevState = current2.memoizedState;
                prevDidTimeout = prevState !== null;
                if (!nextDidTimeout && prevState !== null) {
                  var currentFallbackChild = current2.child.sibling;
                  if (currentFallbackChild !== null) {
                    var first = workInProgress2.firstEffect;
                    if (first !== null) {
                      workInProgress2.firstEffect = currentFallbackChild;
                      currentFallbackChild.nextEffect = first;
                    } else {
                      workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChild;
                      currentFallbackChild.nextEffect = null;
                    }
                    currentFallbackChild.effectTag = Deletion;
                  }
                }
              }
              if (nextDidTimeout && !prevDidTimeout) {
                if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                  var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                    renderDidSuspend();
                  } else {
                    renderDidSuspendDelayIfPossible();
                  }
                }
              }
              {
                if (nextDidTimeout || prevDidTimeout) {
                  workInProgress2.effectTag |= Update;
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              popProvider(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                return null;
              }
              var didSuspendAlready = (workInProgress2.effectTag & DidCapture) !== NoEffect;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.effectTag & DidCapture) === NoEffect);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.effectTag |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThennables = suspended.updateQueue;
                        if (newThennables !== null) {
                          workInProgress2.updateQueue = newThennables;
                          workInProgress2.effectTag |= Update;
                        }
                        if (renderState.lastEffect === null) {
                          workInProgress2.firstEffect = null;
                        }
                        workInProgress2.lastEffect = renderState.lastEffect;
                        resetChildFibers(workInProgress2, renderExpirationTime2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.effectTag |= DidCapture;
                    didSuspendAlready = true;
                    var _newThennables = _suspended.updateQueue;
                    if (_newThennables !== null) {
                      workInProgress2.updateQueue = _newThennables;
                      workInProgress2.effectTag |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate) {
                      var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                      if (lastEffect !== null) {
                        lastEffect.nextEffect = null;
                      }
                      return null;
                    }
                  } else if (now2() * 2 - renderState.renderingStartTime > renderState.tailExpiration && renderExpirationTime2 > Never) {
                    workInProgress2.effectTag |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    var nextPriority = renderExpirationTime2 - 1;
                    workInProgress2.expirationTime = workInProgress2.childExpirationTime = nextPriority;
                    {
                      markSpawnedWork(nextPriority);
                    }
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                if (renderState.tailExpiration === 0) {
                  var TAIL_EXPIRATION_TIMEOUT_MS = 500;
                  renderState.tailExpiration = now2() + TAIL_EXPIRATION_TIMEOUT_MS;
                }
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.lastEffect = workInProgress2.lastEffect;
                renderState.renderingStartTime = now2();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              return null;
            }
          }
          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function unwindWork(workInProgress2, renderExpirationTime2) {
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              var effectTag = workInProgress2.effectTag;
              if (effectTag & ShouldCapture) {
                workInProgress2.effectTag = effectTag & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              var _effectTag = workInProgress2.effectTag;
              if (!((_effectTag & DidCapture) === NoEffect)) {
                {
                  throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                }
              }
              workInProgress2.effectTag = _effectTag & ~ShouldCapture | DidCapture;
              return workInProgress2;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var _effectTag2 = workInProgress2.effectTag;
              if (_effectTag2 & ShouldCapture) {
                workInProgress2.effectTag = _effectTag2 & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              popProvider(workInProgress2);
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(interruptedWork) {
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              popProvider(interruptedWork);
              break;
          }
        }
        function createCapturedValue(value2, source) {
          return {
            value: value2,
            source,
            stack: getStackByFiberInDevAndProd(source)
          };
        }
        function logCapturedError(capturedError) {
          var error2 = capturedError.error;
          {
            var componentName = capturedError.componentName, componentStack = capturedError.componentStack, errorBoundaryName = capturedError.errorBoundaryName, errorBoundaryFound = capturedError.errorBoundaryFound, willRetry = capturedError.willRetry;
            if (error2 != null && error2._suppressLogging) {
              if (errorBoundaryFound && willRetry) {
                return;
              }
              console["error"](error2);
            }
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
            var errorBoundaryMessage;
            if (errorBoundaryFound && errorBoundaryName) {
              if (willRetry) {
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              } else {
                errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\nRecreating the tree from scratch failed so React will unmount the tree.";
              }
            } else {
              errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://fb.me/react-error-boundaries to learn more about error boundaries.";
            }
            var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage);
            console["error"](combinedMessage);
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
        }
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        function logError(boundary, errorInfo) {
          var source = errorInfo.source;
          var stack = errorInfo.stack;
          if (stack === null && source !== null) {
            stack = getStackByFiberInDevAndProd(source);
          }
          var capturedError = {
            componentName: source !== null ? getComponentName(source.type) : null,
            componentStack: stack !== null ? stack : "",
            error: errorInfo.value,
            errorBoundary: null,
            errorBoundaryName: null,
            errorBoundaryFound: false,
            willRetry: false
          };
          if (boundary !== null && boundary.tag === ClassComponent) {
            capturedError.errorBoundary = boundary.stateNode;
            capturedError.errorBoundaryName = getComponentName(boundary.type);
            capturedError.errorBoundaryFound = true;
            capturedError.willRetry = true;
          }
          try {
            logCapturedError(capturedError);
          } catch (e) {
            setTimeout(function() {
              throw e;
            });
          }
        }
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          startPhaseTimer(current2, "componentWillUnmount");
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          instance.componentWillUnmount();
          stopPhaseTimer();
        };
        function safelyCallComponentWillUnmount(current2, instance) {
          {
            invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
            if (hasCaughtError()) {
              var unmountError = clearCaughtError();
              captureCommitPhaseError(current2, unmountError);
            }
          }
        }
        function safelyDetachRef(current2) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              {
                invokeGuardedCallback(null, ref, null, null);
                if (hasCaughtError()) {
                  var refError = clearCaughtError();
                  captureCommitPhaseError(current2, refError);
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, destroy) {
          {
            invokeGuardedCallback(null, destroy, null);
            if (hasCaughtError()) {
              var error2 = clearCaughtError();
              captureCommitPhaseError(current2, error2);
            }
          }
        }
        function commitBeforeMutationLifeCycles(current2, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block: {
              return;
            }
            case ClassComponent: {
              if (finishedWork.effectTag & Snapshot) {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  startPhaseTimer(finishedWork, "getSnapshotBeforeUpdate");
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  stopPhaseTimer();
                }
              }
              return;
            }
            case HostRoot:
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              return;
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function commitHookEffectListUnmount(tag, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & tag) === tag) {
                var destroy = effect.destroy;
                effect.destroy = void 0;
                if (destroy !== void 0) {
                  destroy();
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(tag, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & tag) === tag) {
                var create = effect.create;
                effect.destroy = create();
                {
                  var destroy = effect.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("An effect function must not return anything besides a function, which is used for clean-up.%s%s", addendum, getStackByFiberInDevAndProd(finishedWork));
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitPassiveHookEffects(finishedWork) {
          if ((finishedWork.effectTag & Passive) !== NoEffect) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork);
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                break;
              }
            }
          }
        }
        function commitLifeCycles(finishedRoot, current2, finishedWork, committedExpirationTime) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block: {
              commitHookEffectListMount(Layout | HasEffect, finishedWork);
              return;
            }
            case ClassComponent: {
              var instance = finishedWork.stateNode;
              if (finishedWork.effectTag & Update) {
                if (current2 === null) {
                  startPhaseTimer(finishedWork, "componentDidMount");
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  instance.componentDidMount();
                  stopPhaseTimer();
                } else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                  var prevState = current2.memoizedState;
                  startPhaseTimer(finishedWork, "componentDidUpdate");
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                  stopPhaseTimer();
                }
              }
              var updateQueue = finishedWork.updateQueue;
              if (updateQueue !== null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                  }
                }
                commitUpdateQueue(finishedWork, updateQueue, instance);
              }
              return;
            }
            case HostRoot: {
              var _updateQueue = finishedWork.updateQueue;
              if (_updateQueue !== null) {
                var _instance = null;
                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;
                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                }
                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }
              return;
            }
            case HostComponent: {
              var _instance2 = finishedWork.stateNode;
              if (current2 === null && finishedWork.effectTag & Update) {
                var type = finishedWork.type;
                var props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props);
              }
              return;
            }
            case HostText: {
              return;
            }
            case HostPortal: {
              return;
            }
            case Profiler: {
              {
                var onRender = finishedWork.memoizedProps.onRender;
                if (typeof onRender === "function") {
                  {
                    onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
                  }
                }
              }
              return;
            }
            case SuspenseComponent: {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              return;
            }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
              return;
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (isHidden) {
                  hideInstance(instance);
                } else {
                  unhideInstance(node.stateNode, node.memoizedProps);
                }
              } else if (node.tag === HostText) {
                var _instance3 = node.stateNode;
                if (isHidden) {
                  hideTextInstance(_instance3);
                } else {
                  unhideTextInstance(_instance3, node.memoizedProps);
                }
              } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
                var fallbackChildFragment = node.child.sibling;
                fallbackChildFragment.return = node;
                node = fallbackChildFragment;
                continue;
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              ref(instanceToUse);
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().%s", getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function commitDetachRef(current2) {
          var currentRef = current2.ref;
          if (currentRef !== null) {
            if (typeof currentRef === "function") {
              currentRef(null);
            } else {
              currentRef.current = null;
            }
          }
        }
        function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
          onCommitUnmount(current2);
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block: {
              var updateQueue = current2.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next;
                  {
                    var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
                    runWithPriority$1(priorityLevel, function() {
                      var effect = firstEffect;
                      do {
                        var _destroy = effect.destroy;
                        if (_destroy !== void 0) {
                          safelyCallDestroy(current2, _destroy);
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    });
                  }
                }
              }
              return;
            }
            case ClassComponent: {
              safelyDetachRef(current2);
              var instance = current2.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(current2, instance);
              }
              return;
            }
            case HostComponent: {
              safelyDetachRef(current2);
              return;
            }
            case HostPortal: {
              {
                unmountHostComponents(finishedRoot, current2, renderPriorityLevel);
              }
              return;
            }
            case FundamentalComponent: {
              return;
            }
            case DehydratedFragment: {
              return;
            }
            case ScopeComponent: {
              return;
            }
          }
        }
        function commitNestedUnmounts(finishedRoot, root3, renderPriorityLevel) {
          var node = root3;
          while (true) {
            commitUnmount(finishedRoot, node, renderPriorityLevel);
            if (node.child !== null && node.tag !== HostPortal) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === root3) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === root3) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function detachFiber(current2) {
          var alternate = current2.alternate;
          current2.return = null;
          current2.child = null;
          current2.memoizedState = null;
          current2.updateQueue = null;
          current2.dependencies = null;
          current2.alternate = null;
          current2.firstEffect = null;
          current2.lastEffect = null;
          current2.pendingProps = null;
          current2.memoizedProps = null;
          current2.stateNode = null;
          if (alternate !== null) {
            detachFiber(alternate);
          }
        }
        function getHostParentFiber(fiber) {
          var parent2 = fiber.return;
          while (parent2 !== null) {
            if (isHostParent(parent2)) {
              return parent2;
            }
            parent2 = parent2.return;
          }
          {
            {
              throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings:
            while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.effectTag & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.effectTag & Placement)) {
                return node.stateNode;
              }
            }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          var parent2;
          var isContainer;
          var parentStateNode = parentFiber.stateNode;
          switch (parentFiber.tag) {
            case HostComponent:
              parent2 = parentStateNode;
              isContainer = false;
              break;
            case HostRoot:
              parent2 = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case HostPortal:
              parent2 = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case FundamentalComponent:
            default: {
              {
                throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if (parentFiber.effectTag & ContentReset) {
            resetTextContent(parent2);
            parentFiber.effectTag &= ~ContentReset;
          }
          var before = getHostSibling(finishedWork);
          if (isContainer) {
            insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent2);
          } else {
            insertOrAppendPlacementNode(finishedWork, before, parent2);
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent2) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) {
              insertInContainerBefore(parent2, stateNode, before);
            } else {
              appendChildToContainer(parent2, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent2);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent2);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent2) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) {
              insertBefore(parent2, stateNode, before);
            } else {
              appendChild(parent2, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent2);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent2);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
          var node = current2;
          var currentParentIsValid = false;
          var currentParent;
          var currentParentIsContainer;
          while (true) {
            if (!currentParentIsValid) {
              var parent2 = node.return;
              findParent:
                while (true) {
                  if (!(parent2 !== null)) {
                    {
                      throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var parentStateNode = parent2.stateNode;
                  switch (parent2.tag) {
                    case HostComponent:
                      currentParent = parentStateNode;
                      currentParentIsContainer = false;
                      break findParent;
                    case HostRoot:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                    case HostPortal:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                  }
                  parent2 = parent2.return;
                }
              currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
              commitNestedUnmounts(finishedRoot, node, renderPriorityLevel);
              if (currentParentIsContainer) {
                removeChildFromContainer(currentParent, node.stateNode);
              } else {
                removeChild(currentParent, node.stateNode);
              }
            } else if (node.tag === HostPortal) {
              if (node.child !== null) {
                currentParent = node.stateNode.containerInfo;
                currentParentIsContainer = true;
                node.child.return = node;
                node = node.child;
                continue;
              }
            } else {
              commitUnmount(finishedRoot, node, renderPriorityLevel);
              if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
            }
            if (node === current2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === current2) {
                return;
              }
              node = node.return;
              if (node.tag === HostPortal) {
                currentParentIsValid = false;
              }
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
          {
            unmountHostComponents(finishedRoot, current2, renderPriorityLevel);
          }
          detachFiber(current2);
        }
        function commitWork(current2, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block: {
              commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
              return;
            }
            case ClassComponent: {
              return;
            }
            case HostComponent: {
              var instance = finishedWork.stateNode;
              if (instance != null) {
                var newProps = finishedWork.memoizedProps;
                var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                var type = finishedWork.type;
                var updatePayload = finishedWork.updateQueue;
                finishedWork.updateQueue = null;
                if (updatePayload !== null) {
                  commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
              }
              return;
            }
            case HostText: {
              if (!(finishedWork.stateNode !== null)) {
                {
                  throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var textInstance = finishedWork.stateNode;
              var newText = finishedWork.memoizedProps;
              var oldText = current2 !== null ? current2.memoizedProps : newText;
              commitTextUpdate(textInstance, oldText, newText);
              return;
            }
            case HostRoot: {
              {
                var _root2 = finishedWork.stateNode;
                if (_root2.hydrate) {
                  _root2.hydrate = false;
                  commitHydratedContainer(_root2.containerInfo);
                }
              }
              return;
            }
            case Profiler: {
              return;
            }
            case SuspenseComponent: {
              commitSuspenseComponent(finishedWork);
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case SuspenseListComponent: {
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case IncompleteClassComponent: {
              return;
            }
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function commitSuspenseComponent(finishedWork) {
          var newState = finishedWork.memoizedState;
          var newDidTimeout;
          var primaryChildParent = finishedWork;
          if (newState === null) {
            newDidTimeout = false;
          } else {
            newDidTimeout = true;
            primaryChildParent = finishedWork.child;
            markCommitTimeOfFallback();
          }
          if (primaryChildParent !== null) {
            hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
          }
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var thenables = finishedWork.updateQueue;
          if (thenables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            thenables.forEach(function(thenable) {
              var retry = resolveRetryThenable.bind(null, finishedWork, thenable);
              if (!retryCache.has(thenable)) {
                {
                  if (thenable.__reactDoNotTraceInteractions !== true) {
                    retry = tracing$1.unstable_wrap(retry);
                  }
                }
                retryCache.add(thenable);
                thenable.then(retry, retry);
              }
            });
          }
        }
        function commitResetTextContent(current2) {
          resetTextContent(current2.stateNode);
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
          var update = createUpdate(expirationTime, null);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error2);
            logError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
          var update = createUpdate(expirationTime, null);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              logError(fiber, errorInfo);
              return getDerivedStateFromError(error$1);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
                logError(fiber, errorInfo);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (fiber.expirationTime !== Sync) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                  }
                }
              }
            };
          } else {
            update.callback = function() {
              markFailedErrorBoundaryForHotReloading(fiber);
            };
          }
          return update;
        }
        function attachPingListener(root3, renderExpirationTime2, thenable) {
          var pingCache = root3.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root3.pingCache = new PossiblyWeakMap$1();
            threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(thenable, threadIDs);
          } else {
            threadIDs = pingCache.get(thenable);
            if (threadIDs === void 0) {
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(thenable, threadIDs);
            }
          }
          if (!threadIDs.has(renderExpirationTime2)) {
            threadIDs.add(renderExpirationTime2);
            var ping = pingSuspendedRoot.bind(null, root3, thenable, renderExpirationTime2);
            thenable.then(ping, ping);
          }
        }
        function throwException(root3, returnFiber, sourceFiber, value2, renderExpirationTime2) {
          sourceFiber.effectTag |= Incomplete;
          sourceFiber.firstEffect = sourceFiber.lastEffect = null;
          if (value2 !== null && typeof value2 === "object" && typeof value2.then === "function") {
            var thenable = value2;
            if ((sourceFiber.mode & BlockingMode) === NoMode) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.expirationTime = currentSource.expirationTime;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
            var _workInProgress = returnFiber;
            do {
              if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                var thenables = _workInProgress.updateQueue;
                if (thenables === null) {
                  var updateQueue = /* @__PURE__ */ new Set();
                  updateQueue.add(thenable);
                  _workInProgress.updateQueue = updateQueue;
                } else {
                  thenables.add(thenable);
                }
                if ((_workInProgress.mode & BlockingMode) === NoMode) {
                  _workInProgress.effectTag |= DidCapture;
                  sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);
                  if (sourceFiber.tag === ClassComponent) {
                    var currentSourceFiber = sourceFiber.alternate;
                    if (currentSourceFiber === null) {
                      sourceFiber.tag = IncompleteClassComponent;
                    } else {
                      var update = createUpdate(Sync, null);
                      update.tag = ForceUpdate;
                      enqueueUpdate(sourceFiber, update);
                    }
                  }
                  sourceFiber.expirationTime = Sync;
                  return;
                }
                attachPingListener(root3, renderExpirationTime2, thenable);
                _workInProgress.effectTag |= ShouldCapture;
                _workInProgress.expirationTime = renderExpirationTime2;
                return;
              }
              _workInProgress = _workInProgress.return;
            } while (_workInProgress !== null);
            value2 = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display." + getStackByFiberInDevAndProd(sourceFiber));
          }
          renderDidError();
          value2 = createCapturedValue(value2, sourceFiber);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value2;
                workInProgress2.effectTag |= ShouldCapture;
                workInProgress2.expirationTime = renderExpirationTime2;
                var _update = createRootErrorUpdate(workInProgress2, _errorInfo, renderExpirationTime2);
                enqueueCapturedUpdate(workInProgress2, _update);
                return;
              }
              case ClassComponent:
                var errorInfo = value2;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.effectTag |= ShouldCapture;
                  workInProgress2.expirationTime = renderExpirationTime2;
                  var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, renderExpirationTime2);
                  enqueueCapturedUpdate(workInProgress2, _update2);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
        var NoContext = 0;
        var BatchedContext = 1;
        var EventContext = 2;
        var DiscreteEventContext = 4;
        var LegacyUnbatchedContext = 8;
        var RenderContext = 16;
        var CommitContext = 32;
        var RootIncomplete = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var renderExpirationTime$1 = NoWork;
        var workInProgressRootExitStatus = RootIncomplete;
        var workInProgressRootFatalError = null;
        var workInProgressRootLatestProcessedExpirationTime = Sync;
        var workInProgressRootLatestSuspenseTimeout = Sync;
        var workInProgressRootCanSuspendUsingConfig = null;
        var workInProgressRootNextUnprocessedUpdateTime = NoWork;
        var workInProgressRootHasPendingPing = false;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var nextEffect = null;
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsRenderPriority = NoPriority;
        var pendingPassiveEffectsExpirationTime = NoWork;
        var rootsWithPendingDiscreteUpdates = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var interruptedBy = null;
        var spawnedWorkDuringRender = null;
        var currentEventTime = NoWork;
        function requestCurrentTimeForUpdate() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return msToExpirationTime(now2());
          }
          if (currentEventTime !== NoWork) {
            return currentEventTime;
          }
          currentEventTime = msToExpirationTime(now2());
          return currentEventTime;
        }
        function getCurrentTime() {
          return msToExpirationTime(now2());
        }
        function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
          var mode = fiber.mode;
          if ((mode & BlockingMode) === NoMode) {
            return Sync;
          }
          var priorityLevel = getCurrentPriorityLevel();
          if ((mode & ConcurrentMode) === NoMode) {
            return priorityLevel === ImmediatePriority ? Sync : Batched;
          }
          if ((executionContext & RenderContext) !== NoContext) {
            return renderExpirationTime$1;
          }
          var expirationTime;
          if (suspenseConfig !== null) {
            expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
          } else {
            switch (priorityLevel) {
              case ImmediatePriority:
                expirationTime = Sync;
                break;
              case UserBlockingPriority$1:
                expirationTime = computeInteractiveExpiration(currentTime);
                break;
              case NormalPriority:
              case LowPriority:
                expirationTime = computeAsyncExpiration(currentTime);
                break;
              case IdlePriority:
                expirationTime = Idle;
                break;
              default: {
                {
                  throw Error("Expected a valid priority level");
                }
              }
            }
          }
          if (workInProgressRoot !== null && expirationTime === renderExpirationTime$1) {
            expirationTime -= 1;
          }
          return expirationTime;
        }
        function scheduleUpdateOnFiber(fiber, expirationTime) {
          checkForNestedUpdates();
          warnAboutRenderPhaseUpdatesInDEV(fiber);
          var root3 = markUpdateTimeFromFiberToRoot(fiber, expirationTime);
          if (root3 === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return;
          }
          checkForInterruption(fiber, expirationTime);
          recordScheduleUpdate();
          var priorityLevel = getCurrentPriorityLevel();
          if (expirationTime === Sync) {
            if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              schedulePendingInteractions(root3, expirationTime);
              performSyncWorkOnRoot(root3);
            } else {
              ensureRootIsScheduled(root3);
              schedulePendingInteractions(root3, expirationTime);
              if (executionContext === NoContext) {
                flushSyncCallbackQueue();
              }
            }
          } else {
            ensureRootIsScheduled(root3);
            schedulePendingInteractions(root3, expirationTime);
          }
          if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$1 || priorityLevel === ImmediatePriority)) {
            if (rootsWithPendingDiscreteUpdates === null) {
              rootsWithPendingDiscreteUpdates = /* @__PURE__ */ new Map([[root3, expirationTime]]);
            } else {
              var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root3);
              if (lastDiscreteTime === void 0 || lastDiscreteTime > expirationTime) {
                rootsWithPendingDiscreteUpdates.set(root3, expirationTime);
              }
            }
          }
        }
        var scheduleWork = scheduleUpdateOnFiber;
        function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
          if (fiber.expirationTime < expirationTime) {
            fiber.expirationTime = expirationTime;
          }
          var alternate = fiber.alternate;
          if (alternate !== null && alternate.expirationTime < expirationTime) {
            alternate.expirationTime = expirationTime;
          }
          var node = fiber.return;
          var root3 = null;
          if (node === null && fiber.tag === HostRoot) {
            root3 = fiber.stateNode;
          } else {
            while (node !== null) {
              alternate = node.alternate;
              if (node.childExpirationTime < expirationTime) {
                node.childExpirationTime = expirationTime;
                if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                  alternate.childExpirationTime = expirationTime;
                }
              } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
                alternate.childExpirationTime = expirationTime;
              }
              if (node.return === null && node.tag === HostRoot) {
                root3 = node.stateNode;
                break;
              }
              node = node.return;
            }
          }
          if (root3 !== null) {
            if (workInProgressRoot === root3) {
              markUnprocessedUpdateTime(expirationTime);
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspendedAtTime(root3, renderExpirationTime$1);
              }
            }
            markRootUpdatedAtTime(root3, expirationTime);
          }
          return root3;
        }
        function getNextRootExpirationTimeToWorkOn(root3) {
          var lastExpiredTime = root3.lastExpiredTime;
          if (lastExpiredTime !== NoWork) {
            return lastExpiredTime;
          }
          var firstPendingTime = root3.firstPendingTime;
          if (!isRootSuspendedAtTime(root3, firstPendingTime)) {
            return firstPendingTime;
          }
          var lastPingedTime = root3.lastPingedTime;
          var nextKnownPendingLevel = root3.nextKnownPendingLevel;
          var nextLevel = lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;
          if (nextLevel <= Idle && firstPendingTime !== nextLevel) {
            return NoWork;
          }
          return nextLevel;
        }
        function ensureRootIsScheduled(root3) {
          var lastExpiredTime = root3.lastExpiredTime;
          if (lastExpiredTime !== NoWork) {
            root3.callbackExpirationTime = Sync;
            root3.callbackPriority = ImmediatePriority;
            root3.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
            return;
          }
          var expirationTime = getNextRootExpirationTimeToWorkOn(root3);
          var existingCallbackNode = root3.callbackNode;
          if (expirationTime === NoWork) {
            if (existingCallbackNode !== null) {
              root3.callbackNode = null;
              root3.callbackExpirationTime = NoWork;
              root3.callbackPriority = NoPriority;
            }
            return;
          }
          var currentTime = requestCurrentTimeForUpdate();
          var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
          if (existingCallbackNode !== null) {
            var existingCallbackPriority = root3.callbackPriority;
            var existingCallbackExpirationTime = root3.callbackExpirationTime;
            if (existingCallbackExpirationTime === expirationTime && existingCallbackPriority >= priorityLevel) {
              return;
            }
            cancelCallback(existingCallbackNode);
          }
          root3.callbackExpirationTime = expirationTime;
          root3.callbackPriority = priorityLevel;
          var callbackNode;
          if (expirationTime === Sync) {
            callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
          } else {
            callbackNode = scheduleCallback(
              priorityLevel,
              performConcurrentWorkOnRoot.bind(null, root3),
              {
                timeout: expirationTimeToMs(expirationTime) - now2()
              }
            );
          }
          root3.callbackNode = callbackNode;
        }
        function performConcurrentWorkOnRoot(root3, didTimeout) {
          currentEventTime = NoWork;
          if (didTimeout) {
            var currentTime = requestCurrentTimeForUpdate();
            markRootExpiredAtTime(root3, currentTime);
            ensureRootIsScheduled(root3);
            return null;
          }
          var expirationTime = getNextRootExpirationTimeToWorkOn(root3);
          if (expirationTime !== NoWork) {
            var originalCallbackNode = root3.callbackNode;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            if (root3 !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
              prepareFreshStack(root3, expirationTime);
              startWorkOnPendingInteractions(root3, expirationTime);
            }
            if (workInProgress !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= RenderContext;
              var prevDispatcher = pushDispatcher();
              var prevInteractions = pushInteractions(root3);
              startWorkLoopTimer(workInProgress);
              do {
                try {
                  workLoopConcurrent();
                  break;
                } catch (thrownValue) {
                  handleError(root3, thrownValue);
                }
              } while (true);
              resetContextDependencies();
              executionContext = prevExecutionContext;
              popDispatcher(prevDispatcher);
              {
                popInteractions(prevInteractions);
              }
              if (workInProgressRootExitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                stopInterruptedWorkLoopTimer();
                prepareFreshStack(root3, expirationTime);
                markRootSuspendedAtTime(root3, expirationTime);
                ensureRootIsScheduled(root3);
                throw fatalError;
              }
              if (workInProgress !== null) {
                stopInterruptedWorkLoopTimer();
              } else {
                stopFinishedWorkLoopTimer();
                var finishedWork = root3.finishedWork = root3.current.alternate;
                root3.finishedExpirationTime = expirationTime;
                finishConcurrentRender(root3, finishedWork, workInProgressRootExitStatus, expirationTime);
              }
              ensureRootIsScheduled(root3);
              if (root3.callbackNode === originalCallbackNode) {
                return performConcurrentWorkOnRoot.bind(null, root3);
              }
            }
          }
          return null;
        }
        function finishConcurrentRender(root3, finishedWork, exitStatus, expirationTime) {
          workInProgressRoot = null;
          switch (exitStatus) {
            case RootIncomplete:
            case RootFatalErrored: {
              {
                {
                  throw Error("Root did not complete. This is a bug in React.");
                }
              }
            }
            case RootErrored: {
              markRootExpiredAtTime(root3, expirationTime > Idle ? Idle : expirationTime);
              break;
            }
            case RootSuspended: {
              markRootSuspendedAtTime(root3, expirationTime);
              var lastSuspendedTime = root3.lastSuspendedTime;
              if (expirationTime === lastSuspendedTime) {
                root3.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
              }
              var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;
              if (hasNotProcessedNewUpdates && !IsThisRendererActing.current) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now2();
                if (msUntilTimeout > 10) {
                  if (workInProgressRootHasPendingPing) {
                    var lastPingedTime = root3.lastPingedTime;
                    if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
                      root3.lastPingedTime = expirationTime;
                      prepareFreshStack(root3, expirationTime);
                      break;
                    }
                  }
                  var nextTime = getNextRootExpirationTimeToWorkOn(root3);
                  if (nextTime !== NoWork && nextTime !== expirationTime) {
                    break;
                  }
                  if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
                    root3.lastPingedTime = lastSuspendedTime;
                    break;
                  }
                  root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root3);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspendedAtTime(root3, expirationTime);
              var _lastSuspendedTime = root3.lastSuspendedTime;
              if (expirationTime === _lastSuspendedTime) {
                root3.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
              }
              if (!IsThisRendererActing.current) {
                if (workInProgressRootHasPendingPing) {
                  var _lastPingedTime = root3.lastPingedTime;
                  if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
                    root3.lastPingedTime = expirationTime;
                    prepareFreshStack(root3, expirationTime);
                    break;
                  }
                }
                var _nextTime = getNextRootExpirationTimeToWorkOn(root3);
                if (_nextTime !== NoWork && _nextTime !== expirationTime) {
                  break;
                }
                if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
                  root3.lastPingedTime = _lastSuspendedTime;
                  break;
                }
                var _msUntilTimeout;
                if (workInProgressRootLatestSuspenseTimeout !== Sync) {
                  _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now2();
                } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
                  _msUntilTimeout = 0;
                } else {
                  var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
                  var currentTimeMs = now2();
                  var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
                  var timeElapsed = currentTimeMs - eventTimeMs;
                  if (timeElapsed < 0) {
                    timeElapsed = 0;
                  }
                  _msUntilTimeout = jnd(timeElapsed) - timeElapsed;
                  if (timeUntilExpirationMs < _msUntilTimeout) {
                    _msUntilTimeout = timeUntilExpirationMs;
                  }
                }
                if (_msUntilTimeout > 10) {
                  root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root3);
              break;
            }
            case RootCompleted: {
              if (!IsThisRendererActing.current && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
                var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);
                if (_msUntilTimeout2 > 10) {
                  markRootSuspendedAtTime(root3, expirationTime);
                  root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), _msUntilTimeout2);
                  break;
                }
              }
              commitRoot(root3);
              break;
            }
            default: {
              {
                {
                  throw Error("Unknown root exit status.");
                }
              }
            }
          }
        }
        function performSyncWorkOnRoot(root3) {
          var lastExpiredTime = root3.lastExpiredTime;
          var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          flushPassiveEffects();
          if (root3 !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
            prepareFreshStack(root3, expirationTime);
            startWorkOnPendingInteractions(root3, expirationTime);
          }
          if (workInProgress !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            var prevInteractions = pushInteractions(root3);
            startWorkLoopTimer(workInProgress);
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            {
              popInteractions(prevInteractions);
            }
            if (workInProgressRootExitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              stopInterruptedWorkLoopTimer();
              prepareFreshStack(root3, expirationTime);
              markRootSuspendedAtTime(root3, expirationTime);
              ensureRootIsScheduled(root3);
              throw fatalError;
            }
            if (workInProgress !== null) {
              {
                {
                  throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            } else {
              stopFinishedWorkLoopTimer();
              root3.finishedWork = root3.current.alternate;
              root3.finishedExpirationTime = expirationTime;
              finishSyncRender(root3);
            }
            ensureRootIsScheduled(root3);
          }
          return null;
        }
        function finishSyncRender(root3) {
          workInProgressRoot = null;
          commitRoot(root3);
        }
        function flushDiscreteUpdates() {
          if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
              }
            }
            return;
          }
          flushPendingDiscreteUpdates();
          flushPassiveEffects();
        }
        function syncUpdates(fn, a, b, c) {
          return runWithPriority$1(ImmediatePriority, fn.bind(null, a, b, c));
        }
        function flushPendingDiscreteUpdates() {
          if (rootsWithPendingDiscreteUpdates !== null) {
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(function(expirationTime, root3) {
              markRootExpiredAtTime(root3, expirationTime);
              ensureRootIsScheduled(root3);
            });
            flushSyncCallbackQueue();
          }
        }
        function batchedUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function batchedEventUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= EventContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function discreteUpdates$1(fn, a, b, c, d) {
          var prevExecutionContext = executionContext;
          executionContext |= DiscreteEventContext;
          try {
            return runWithPriority$1(UserBlockingPriority$1, fn.bind(null, a, b, c, d));
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function unbatchedUpdates(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext &= ~BatchedContext;
          executionContext |= LegacyUnbatchedContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              flushSyncCallbackQueue();
            }
          }
        }
        function flushSync(fn, a) {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            {
              {
                throw Error("flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.");
              }
            }
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return runWithPriority$1(ImmediatePriority, fn.bind(null, a));
          } finally {
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
          }
        }
        function prepareFreshStack(root3, expirationTime) {
          root3.finishedWork = null;
          root3.finishedExpirationTime = NoWork;
          var timeoutHandle = root3.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root3.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              unwindInterruptedWork(interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root3;
          workInProgress = createWorkInProgress(root3.current, null);
          renderExpirationTime$1 = expirationTime;
          workInProgressRootExitStatus = RootIncomplete;
          workInProgressRootFatalError = null;
          workInProgressRootLatestProcessedExpirationTime = Sync;
          workInProgressRootLatestSuspenseTimeout = Sync;
          workInProgressRootCanSuspendUsingConfig = null;
          workInProgressRootNextUnprocessedUpdateTime = NoWork;
          workInProgressRootHasPendingPing = false;
          {
            spawnedWorkDuringRender = null;
          }
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
        }
        function handleError(root3, thrownValue) {
          do {
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              if (workInProgress === null || workInProgress.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return null;
              }
              if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
              }
              throwException(root3, workInProgress.return, workInProgress, thrownValue, renderExpirationTime$1);
              workInProgress = completeUnitOfWork(workInProgress);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher(root3) {
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$1.current = prevDispatcher;
        }
        function pushInteractions(root3) {
          {
            var prevInteractions = tracing$1.__interactionsRef.current;
            tracing$1.__interactionsRef.current = root3.memoizedInteractions;
            return prevInteractions;
          }
        }
        function popInteractions(prevInteractions) {
          {
            tracing$1.__interactionsRef.current = prevInteractions;
          }
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now2();
        }
        function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
          if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
            workInProgressRootLatestProcessedExpirationTime = expirationTime;
          }
          if (suspenseConfig !== null) {
            if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
              workInProgressRootLatestSuspenseTimeout = expirationTime;
              workInProgressRootCanSuspendUsingConfig = suspenseConfig;
            }
          }
        }
        function markUnprocessedUpdateTime(expirationTime) {
          if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
            workInProgressRootNextUnprocessedUpdateTime = expirationTime;
          }
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
            markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime$1);
            markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
          }
        }
        function renderDidError() {
          if (workInProgressRootExitStatus !== RootCompleted) {
            workInProgressRootExitStatus = RootErrored;
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootIncomplete;
        }
        function inferTimeFromExpirationTime(expirationTime) {
          var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
          return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
        }
        function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
          var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
          return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            workInProgress = performUnitOfWork(workInProgress);
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            workInProgress = performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          startWorkTimer(unitOfWork);
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, renderExpirationTime$1);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, renderExpirationTime$1);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            next = completeUnitOfWork(unitOfWork);
          }
          ReactCurrentOwner$2.current = null;
          return next;
        }
        function completeUnitOfWork(unitOfWork) {
          workInProgress = unitOfWork;
          do {
            var current2 = workInProgress.alternate;
            var returnFiber = workInProgress.return;
            if ((workInProgress.effectTag & Incomplete) === NoEffect) {
              setCurrentFiber(workInProgress);
              var next = void 0;
              if ((workInProgress.mode & ProfileMode) === NoMode) {
                next = completeWork(current2, workInProgress, renderExpirationTime$1);
              } else {
                startProfilerTimer(workInProgress);
                next = completeWork(current2, workInProgress, renderExpirationTime$1);
                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
              }
              stopWorkTimer(workInProgress);
              resetCurrentFiber();
              resetChildExpirationTime(workInProgress);
              if (next !== null) {
                return next;
              }
              if (returnFiber !== null && (returnFiber.effectTag & Incomplete) === NoEffect) {
                if (returnFiber.firstEffect === null) {
                  returnFiber.firstEffect = workInProgress.firstEffect;
                }
                if (workInProgress.lastEffect !== null) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
                  }
                  returnFiber.lastEffect = workInProgress.lastEffect;
                }
                var effectTag = workInProgress.effectTag;
                if (effectTag > PerformedWork) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = workInProgress;
                  } else {
                    returnFiber.firstEffect = workInProgress;
                  }
                  returnFiber.lastEffect = workInProgress;
                }
              }
            } else {
              var _next = unwindWork(workInProgress);
              if ((workInProgress.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
                var actualDuration = workInProgress.actualDuration;
                var child = workInProgress.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                workInProgress.actualDuration = actualDuration;
              }
              if (_next !== null) {
                stopFailedWorkTimer(workInProgress);
                _next.effectTag &= HostEffectMask;
                return _next;
              }
              stopWorkTimer(workInProgress);
              if (returnFiber !== null) {
                returnFiber.firstEffect = returnFiber.lastEffect = null;
                returnFiber.effectTag |= Incomplete;
              }
            }
            var siblingFiber = workInProgress.sibling;
            if (siblingFiber !== null) {
              return siblingFiber;
            }
            workInProgress = returnFiber;
          } while (workInProgress !== null);
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootCompleted;
          }
          return null;
        }
        function getRemainingExpirationTime(fiber) {
          var updateExpirationTime = fiber.expirationTime;
          var childExpirationTime = fiber.childExpirationTime;
          return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
        }
        function resetChildExpirationTime(completedWork) {
          if (renderExpirationTime$1 !== Never && completedWork.childExpirationTime === Never) {
            return;
          }
          var newChildExpirationTime = NoWork;
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration;
            var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            var child = completedWork.child;
            while (child !== null) {
              var childUpdateExpirationTime = child.expirationTime;
              var childChildExpirationTime = child.childExpirationTime;
              if (childUpdateExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = childUpdateExpirationTime;
              }
              if (childChildExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = childChildExpirationTime;
              }
              if (shouldBubbleActualDurations) {
                actualDuration += child.actualDuration;
              }
              treeBaseDuration += child.treeBaseDuration;
              child = child.sibling;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
          } else {
            var _child = completedWork.child;
            while (_child !== null) {
              var _childUpdateExpirationTime = _child.expirationTime;
              var _childChildExpirationTime = _child.childExpirationTime;
              if (_childUpdateExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = _childUpdateExpirationTime;
              }
              if (_childChildExpirationTime > newChildExpirationTime) {
                newChildExpirationTime = _childChildExpirationTime;
              }
              _child = _child.sibling;
            }
          }
          completedWork.childExpirationTime = newChildExpirationTime;
        }
        function commitRoot(root3) {
          var renderPriorityLevel = getCurrentPriorityLevel();
          runWithPriority$1(ImmediatePriority, commitRootImpl.bind(null, root3, renderPriorityLevel));
          return null;
        }
        function commitRootImpl(root3, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          var finishedWork = root3.finishedWork;
          var expirationTime = root3.finishedExpirationTime;
          if (finishedWork === null) {
            return null;
          }
          root3.finishedWork = null;
          root3.finishedExpirationTime = NoWork;
          if (!(finishedWork !== root3.current)) {
            {
              throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          root3.callbackNode = null;
          root3.callbackExpirationTime = NoWork;
          root3.callbackPriority = NoPriority;
          root3.nextKnownPendingLevel = NoWork;
          startCommitTimer();
          var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
          markRootFinishedAtTime(root3, expirationTime, remainingExpirationTimeBeforeCommit);
          if (root3 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            renderExpirationTime$1 = NoWork;
          }
          var firstEffect;
          if (finishedWork.effectTag > PerformedWork) {
            if (finishedWork.lastEffect !== null) {
              finishedWork.lastEffect.nextEffect = finishedWork;
              firstEffect = finishedWork.firstEffect;
            } else {
              firstEffect = finishedWork;
            }
          } else {
            firstEffect = finishedWork.firstEffect;
          }
          if (firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root3);
            ReactCurrentOwner$2.current = null;
            startCommitSnapshotEffectsTimer();
            prepareForCommit(root3.containerInfo);
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var error2 = clearCaughtError();
                  captureCommitPhaseError(nextEffect, error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            stopCommitSnapshotEffectsTimer();
            {
              recordCommitTime();
            }
            startCommitHostEffectsTimer();
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitMutationEffects, null, root3, renderPriorityLevel);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            stopCommitHostEffectsTimer();
            resetAfterCommit(root3.containerInfo);
            root3.current = finishedWork;
            startCommitLifeCyclesTimer();
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitLayoutEffects, null, root3, expirationTime);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error2 = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            stopCommitLifeCyclesTimer();
            nextEffect = null;
            requestPaint();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
          } else {
            root3.current = finishedWork;
            startCommitSnapshotEffectsTimer();
            stopCommitSnapshotEffectsTimer();
            {
              recordCommitTime();
            }
            startCommitHostEffectsTimer();
            stopCommitHostEffectsTimer();
            startCommitLifeCyclesTimer();
            stopCommitLifeCyclesTimer();
          }
          stopCommitTimer();
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root3;
            pendingPassiveEffectsExpirationTime = expirationTime;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
          } else {
            nextEffect = firstEffect;
            while (nextEffect !== null) {
              var nextNextEffect = nextEffect.nextEffect;
              nextEffect.nextEffect = null;
              nextEffect = nextNextEffect;
            }
          }
          var remainingExpirationTime = root3.firstPendingTime;
          if (remainingExpirationTime !== NoWork) {
            {
              if (spawnedWorkDuringRender !== null) {
                var expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;
                for (var i = 0; i < expirationTimes.length; i++) {
                  scheduleInteractions(root3, expirationTimes[i], root3.memoizedInteractions);
                }
              }
              schedulePendingInteractions(root3, remainingExpirationTime);
            }
          } else {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              finishPendingInteractions(root3, expirationTime);
            }
          }
          if (remainingExpirationTime === Sync) {
            if (root3 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root3;
            }
          } else {
            nestedUpdateCount = 0;
          }
          onCommitRoot(finishedWork.stateNode, expirationTime);
          ensureRootIsScheduled(root3);
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
          }
          if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
            return null;
          }
          flushSyncCallbackQueue();
          return null;
        }
        function commitBeforeMutationEffects() {
          while (nextEffect !== null) {
            var effectTag = nextEffect.effectTag;
            if ((effectTag & Snapshot) !== NoEffect) {
              setCurrentFiber(nextEffect);
              recordEffect();
              var current2 = nextEffect.alternate;
              commitBeforeMutationLifeCycles(current2, nextEffect);
              resetCurrentFiber();
            }
            if ((effectTag & Passive) !== NoEffect) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitMutationEffects(root3, renderPriorityLevel) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var effectTag = nextEffect.effectTag;
            if (effectTag & ContentReset) {
              commitResetTextContent(nextEffect);
            }
            if (effectTag & Ref) {
              var current2 = nextEffect.alternate;
              if (current2 !== null) {
                commitDetachRef(current2);
              }
            }
            var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);
            switch (primaryEffectTag) {
              case Placement: {
                commitPlacement(nextEffect);
                nextEffect.effectTag &= ~Placement;
                break;
              }
              case PlacementAndUpdate: {
                commitPlacement(nextEffect);
                nextEffect.effectTag &= ~Placement;
                var _current = nextEffect.alternate;
                commitWork(_current, nextEffect);
                break;
              }
              case Hydrating: {
                nextEffect.effectTag &= ~Hydrating;
                break;
              }
              case HydratingAndUpdate: {
                nextEffect.effectTag &= ~Hydrating;
                var _current2 = nextEffect.alternate;
                commitWork(_current2, nextEffect);
                break;
              }
              case Update: {
                var _current3 = nextEffect.alternate;
                commitWork(_current3, nextEffect);
                break;
              }
              case Deletion: {
                commitDeletion(root3, nextEffect, renderPriorityLevel);
                break;
              }
            }
            recordEffect();
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitLayoutEffects(root3, committedExpirationTime) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var effectTag = nextEffect.effectTag;
            if (effectTag & (Update | Callback)) {
              recordEffect();
              var current2 = nextEffect.alternate;
              commitLifeCycles(root3, current2, nextEffect);
            }
            if (effectTag & Ref) {
              recordEffect();
              commitAttachRef(nextEffect);
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function flushPassiveEffects() {
          if (pendingPassiveEffectsRenderPriority !== NoPriority) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority;
            return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var root3 = rootWithPendingPassiveEffects;
          var expirationTime = pendingPassiveEffectsExpirationTime;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsExpirationTime = NoWork;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Cannot flush passive effects while already rendering.");
            }
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          var prevInteractions = pushInteractions(root3);
          {
            var _effect2 = root3.current.firstEffect;
            while (_effect2 !== null) {
              {
                setCurrentFiber(_effect2);
                invokeGuardedCallback(null, commitPassiveHookEffects, null, _effect2);
                if (hasCaughtError()) {
                  if (!(_effect2 !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error5 = clearCaughtError();
                  captureCommitPhaseError(_effect2, _error5);
                }
                resetCurrentFiber();
              }
              var nextNextEffect = _effect2.nextEffect;
              _effect2.nextEffect = null;
              _effect2 = nextNextEffect;
            }
          }
          {
            popInteractions(prevInteractions);
            finishPendingInteractions(root3, expirationTime);
          }
          executionContext = prevExecutionContext;
          flushSyncCallbackQueue();
          nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValue(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
          enqueueUpdate(rootFiber, update);
          var root3 = markUpdateTimeFromFiberToRoot(rootFiber, Sync);
          if (root3 !== null) {
            ensureRootIsScheduled(root3);
            schedulePendingInteractions(root3, Sync);
          }
        }
        function captureCommitPhaseError(sourceFiber, error2) {
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
            return;
          }
          var fiber = sourceFiber.return;
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValue(error2, sourceFiber);
                var update = createClassErrorUpdate(
                  fiber,
                  errorInfo,
                  Sync
                );
                enqueueUpdate(fiber, update);
                var root3 = markUpdateTimeFromFiberToRoot(fiber, Sync);
                if (root3 !== null) {
                  ensureRootIsScheduled(root3);
                  schedulePendingInteractions(root3, Sync);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
        }
        function pingSuspendedRoot(root3, thenable, suspendedTime) {
          var pingCache = root3.pingCache;
          if (pingCache !== null) {
            pingCache.delete(thenable);
          }
          if (workInProgressRoot === root3 && renderExpirationTime$1 === suspendedTime) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now2() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root3, renderExpirationTime$1);
            } else {
              workInProgressRootHasPendingPing = true;
            }
            return;
          }
          if (!isRootSuspendedAtTime(root3, suspendedTime)) {
            return;
          }
          var lastPingedTime = root3.lastPingedTime;
          if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
            return;
          }
          root3.lastPingedTime = suspendedTime;
          ensureRootIsScheduled(root3);
          schedulePendingInteractions(root3, suspendedTime);
        }
        function retryTimedOutBoundary(boundaryFiber, retryTime) {
          if (retryTime === NoWork) {
            var suspenseConfig = null;
            var currentTime = requestCurrentTimeForUpdate();
            retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
          }
          var root3 = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);
          if (root3 !== null) {
            ensureRootIsScheduled(root3);
            schedulePendingInteractions(root3, retryTime);
          }
        }
        function resolveRetryThenable(boundaryFiber, thenable) {
          var retryTime = NoWork;
          var retryCache;
          {
            retryCache = boundaryFiber.stateNode;
          }
          if (retryCache !== null) {
            retryCache.delete(thenable);
          }
          retryTimedOutBoundary(boundaryFiber, retryTime);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
          var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;
          if (busyMinDurationMs <= 0) {
            return 0;
          }
          var busyDelayMs = suspenseConfig.busyDelayMs | 0;
          var currentTimeMs = now2();
          var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
          var timeElapsed = currentTimeMs - eventTimeMs;
          if (timeElapsed <= busyDelayMs) {
            return 0;
          }
          var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed;
          return msUntilTimeout;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            {
              {
                throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
              }
            }
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        function stopFinishedWorkLoopTimer() {
          var didCompleteRoot = true;
          stopWorkLoopTimer(interruptedBy, didCompleteRoot);
          interruptedBy = null;
        }
        function stopInterruptedWorkLoopTimer() {
          var didCompleteRoot = false;
          stopWorkLoopTimer(interruptedBy, didCompleteRoot);
          interruptedBy = null;
        }
        function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
          if (workInProgressRoot !== null && updateExpirationTime > renderExpirationTime$1) {
            interruptedBy = fiberThatReceivedUpdate;
          }
        }
        var didWarnStateUpdateForUnmountedComponent = null;
        function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
          {
            var tag = fiber.tag;
            if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
              return;
            }
            var componentName = getComponentName(fiber.type) || "ReactComponent";
            if (didWarnStateUpdateForUnmountedComponent !== null) {
              if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForUnmountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForUnmountedComponent = /* @__PURE__ */ new Set([componentName]);
            }
            error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.%s", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function", getStackByFiberInDevAndProd(fiber));
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, expirationTime) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, expirationTime);
            } catch (originalError) {
              if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, expirationTime);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                throw replayError;
              } else {
                throw originalError;
              }
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && (executionContext & RenderContext) !== NoContext) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://fb.me/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        var IsThisRendererActing = {
          current: false
        };
        function warnIfNotScopedWithMatchingAct(fiber) {
          {
            if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
              error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from 'react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);%s", getStackByFiberInDevAndProd(fiber));
            }
          }
        }
        function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
          {
            if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
            }
          }
        }
        function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
          {
            if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://fb.me/react-wrap-tests-with-act%s", getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
            }
          }
        }
        var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
        var didWarnAboutUnmockedScheduler = false;
        function warnIfUnmockedScheduler(fiber) {
          {
            if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
              if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://fb.me/react-mock-scheduler`);
              }
            }
          }
        }
        function computeThreadID(root3, expirationTime) {
          return expirationTime * 1e3 + root3.interactionThreadID;
        }
        function markSpawnedWork(expirationTime) {
          if (spawnedWorkDuringRender === null) {
            spawnedWorkDuringRender = [expirationTime];
          } else {
            spawnedWorkDuringRender.push(expirationTime);
          }
        }
        function scheduleInteractions(root3, expirationTime, interactions) {
          if (interactions.size > 0) {
            var pendingInteractionMap = root3.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(expirationTime);
            if (pendingInteractions != null) {
              interactions.forEach(function(interaction) {
                if (!pendingInteractions.has(interaction)) {
                  interaction.__count++;
                }
                pendingInteractions.add(interaction);
              });
            } else {
              pendingInteractionMap.set(expirationTime, new Set(interactions));
              interactions.forEach(function(interaction) {
                interaction.__count++;
              });
            }
            var subscriber = tracing$1.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root3, expirationTime);
              subscriber.onWorkScheduled(interactions, threadID);
            }
          }
        }
        function schedulePendingInteractions(root3, expirationTime) {
          scheduleInteractions(root3, expirationTime, tracing$1.__interactionsRef.current);
        }
        function startWorkOnPendingInteractions(root3, expirationTime) {
          var interactions = /* @__PURE__ */ new Set();
          root3.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledExpirationTime) {
            if (scheduledExpirationTime >= expirationTime) {
              scheduledInteractions.forEach(function(interaction) {
                return interactions.add(interaction);
              });
            }
          });
          root3.memoizedInteractions = interactions;
          if (interactions.size > 0) {
            var subscriber = tracing$1.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root3, expirationTime);
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error2) {
                scheduleCallback(ImmediatePriority, function() {
                  throw error2;
                });
              }
            }
          }
        }
        function finishPendingInteractions(root3, committedExpirationTime) {
          var earliestRemainingTimeAfterCommit = root3.firstPendingTime;
          var subscriber;
          try {
            subscriber = tracing$1.__subscriberRef.current;
            if (subscriber !== null && root3.memoizedInteractions.size > 0) {
              var threadID = computeThreadID(root3, committedExpirationTime);
              subscriber.onWorkStopped(root3.memoizedInteractions, threadID);
            }
          } catch (error2) {
            scheduleCallback(ImmediatePriority, function() {
              throw error2;
            });
          } finally {
            var pendingInteractionMap = root3.pendingInteractionMap;
            pendingInteractionMap.forEach(function(scheduledInteractions, scheduledExpirationTime) {
              if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
                pendingInteractionMap.delete(scheduledExpirationTime);
                scheduledInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    try {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    } catch (error2) {
                      scheduleCallback(ImmediatePriority, function() {
                        throw error2;
                      });
                    }
                  }
                });
              }
            });
          }
        }
        var onScheduleFiberRoot = null;
        var onCommitFiberRoot = null;
        var onCommitFiberUnmount = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://fb.me/react-devtools");
            }
            return true;
          }
          try {
            var rendererID = hook.inject(internals);
            if (true) {
              if (typeof hook.onScheduleFiberRoot === "function") {
                onScheduleFiberRoot = function(root3, children) {
                  try {
                    hook.onScheduleFiberRoot(rendererID, root3, children);
                  } catch (err) {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                };
              }
            }
            onCommitFiberRoot = function(root3, expirationTime) {
              try {
                var didError = (root3.current.effectTag & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var currentTime = getCurrentTime();
                  var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
                  hook.onCommitFiberRoot(rendererID, root3, priorityLevel, didError);
                }
              } catch (err) {
                if (true) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            };
            onCommitFiberUnmount = function(fiber) {
              try {
                hook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                if (true) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            };
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          return true;
        }
        function onScheduleRoot(root3, children) {
          if (typeof onScheduleFiberRoot === "function") {
            onScheduleFiberRoot(root3, children);
          }
        }
        function onCommitRoot(root3, expirationTime) {
          if (typeof onCommitFiberRoot === "function") {
            onCommitFiberRoot(root3, expirationTime);
          }
        }
        function onCommitUnmount(fiber) {
          if (typeof onCommitFiberUnmount === "function") {
            onCommitFiberUnmount(fiber);
          }
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            var testMap = /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
            var testSet = /* @__PURE__ */ new Set([nonExtensibleObject]);
            testMap.set(0, 0);
            testSet.add(0);
          } catch (e) {
            hasBadMapPolyfill = true;
          }
        }
        var debugCounter = 1;
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.effectTag = NoEffect;
          this.nextEffect = null;
          this.firstEffect = null;
          this.lastEffect = null;
          this.expirationTime = NoWork;
          this.childExpirationTime = NoWork;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugID = debugCounter++;
            this._debugIsCurrentlyTiming = false;
          }
          {
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component) {
          if (typeof Component === "function") {
            return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
          } else if (Component !== void 0 && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              {
                workInProgress2._debugID = current2._debugID;
              }
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.effectTag = NoEffect;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.childExpirationTime = current2.childExpirationTime;
          workInProgress2.expirationTime = current2.expirationTime;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            expirationTime: currentDependencies.expirationTime,
            firstContext: currentDependencies.firstContext,
            responders: currentDependencies.responders
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderExpirationTime2) {
          workInProgress2.effectTag &= Placement;
          workInProgress2.nextEffect = null;
          workInProgress2.firstEffect = null;
          workInProgress2.lastEffect = null;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childExpirationTime = NoWork;
            workInProgress2.expirationTime = renderExpirationTime2;
            workInProgress2.child = null;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childExpirationTime = current2.childExpirationTime;
            workInProgress2.expirationTime = current2.expirationTime;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              expirationTime: currentDependencies.expirationTime,
              firstContext: currentDependencies.firstContext,
              responders: currentDependencies.responders
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode | BlockingMode | StrictMode;
          } else if (tag === BlockingRoot) {
            mode = BlockingMode | StrictMode;
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime) {
          var fiber;
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag:
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);
                case REACT_CONCURRENT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= ConcurrentMode | BlockingMode | StrictMode;
                  break;
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictMode;
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, expirationTime, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, expirationTime, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                      case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentName(owner.type) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  {
                    {
                      throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                    }
                  }
                }
              }
          }
          fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromElement(element, mode, expirationTime) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, expirationTime, key) {
          var fiber = createFiber(Fragment2, elements, key, mode);
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
          {
            if (typeof pendingProps.id !== "string" || typeof pendingProps.onRender !== "function") {
              error('Profiler must specify an "id" string and "onRender" function as props');
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.type = REACT_PROFILER_TYPE;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.type = REACT_SUSPENSE_TYPE;
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          {
            fiber.type = REACT_SUSPENSE_LIST_TYPE;
          }
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromText(content, mode, expirationTime) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.expirationTime = expirationTime;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          fiber.type = "DELETED";
          return fiber;
        }
        function createFiberFromPortal(portal, mode, expirationTime) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.expirationTime = expirationTime;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.effectTag = source.effectTag;
          target.nextEffect = source.nextEffect;
          target.firstEffect = source.firstEffect;
          target.lastEffect = source.lastEffect;
          target.expirationTime = source.expirationTime;
          target.childExpirationTime = source.childExpirationTime;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          {
            target._debugID = source._debugID;
          }
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2) {
          this.tag = tag;
          this.current = null;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.pingCache = null;
          this.finishedExpirationTime = NoWork;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.hydrate = hydrate2;
          this.callbackNode = null;
          this.callbackPriority = NoPriority;
          this.firstPendingTime = NoWork;
          this.firstSuspendedTime = NoWork;
          this.lastSuspendedTime = NoWork;
          this.nextKnownPendingLevel = NoWork;
          this.lastPingedTime = NoWork;
          this.lastExpiredTime = NoWork;
          {
            this.interactionThreadID = tracing$1.unstable_getThreadID();
            this.memoizedInteractions = /* @__PURE__ */ new Set();
            this.pendingInteractionMap = /* @__PURE__ */ new Map();
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
          var root3 = new FiberRootNode(containerInfo, tag, hydrate2);
          var uninitializedFiber = createHostRootFiber(tag);
          root3.current = uninitializedFiber;
          uninitializedFiber.stateNode = root3;
          initializeUpdateQueue(uninitializedFiber);
          return root3;
        }
        function isRootSuspendedAtTime(root3, expirationTime) {
          var firstSuspendedTime = root3.firstSuspendedTime;
          var lastSuspendedTime = root3.lastSuspendedTime;
          return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
        }
        function markRootSuspendedAtTime(root3, expirationTime) {
          var firstSuspendedTime = root3.firstSuspendedTime;
          var lastSuspendedTime = root3.lastSuspendedTime;
          if (firstSuspendedTime < expirationTime) {
            root3.firstSuspendedTime = expirationTime;
          }
          if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
            root3.lastSuspendedTime = expirationTime;
          }
          if (expirationTime <= root3.lastPingedTime) {
            root3.lastPingedTime = NoWork;
          }
          if (expirationTime <= root3.lastExpiredTime) {
            root3.lastExpiredTime = NoWork;
          }
        }
        function markRootUpdatedAtTime(root3, expirationTime) {
          var firstPendingTime = root3.firstPendingTime;
          if (expirationTime > firstPendingTime) {
            root3.firstPendingTime = expirationTime;
          }
          var firstSuspendedTime = root3.firstSuspendedTime;
          if (firstSuspendedTime !== NoWork) {
            if (expirationTime >= firstSuspendedTime) {
              root3.firstSuspendedTime = root3.lastSuspendedTime = root3.nextKnownPendingLevel = NoWork;
            } else if (expirationTime >= root3.lastSuspendedTime) {
              root3.lastSuspendedTime = expirationTime + 1;
            }
            if (expirationTime > root3.nextKnownPendingLevel) {
              root3.nextKnownPendingLevel = expirationTime;
            }
          }
        }
        function markRootFinishedAtTime(root3, finishedExpirationTime, remainingExpirationTime) {
          root3.firstPendingTime = remainingExpirationTime;
          if (finishedExpirationTime <= root3.lastSuspendedTime) {
            root3.firstSuspendedTime = root3.lastSuspendedTime = root3.nextKnownPendingLevel = NoWork;
          } else if (finishedExpirationTime <= root3.firstSuspendedTime) {
            root3.firstSuspendedTime = finishedExpirationTime - 1;
          }
          if (finishedExpirationTime <= root3.lastPingedTime) {
            root3.lastPingedTime = NoWork;
          }
          if (finishedExpirationTime <= root3.lastExpiredTime) {
            root3.lastExpiredTime = NoWork;
          }
        }
        function markRootExpiredAtTime(root3, expirationTime) {
          var lastExpiredTime = root3.lastExpiredTime;
          if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
            root3.lastExpiredTime = expirationTime;
          }
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get2(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) {
              return processChildContext(fiber, Component, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get2(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              } else {
                {
                  {
                    throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                  }
                }
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictMode) {
              var componentName = getComponentName(fiber.type) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                if (fiber.mode & StrictMode) {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
                } else {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://fb.me/react-strict-mode-find-node%s", methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
          return createFiberRoot(containerInfo, tag, hydrate2);
        }
        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var currentTime = requestCurrentTimeForUpdate();
          {
            if ("undefined" !== typeof jest) {
              warnIfUnmockedScheduler(current$1);
              warnIfNotScopedWithMatchingAct(current$1);
            }
          }
          var suspenseConfig = requestCurrentSuspenseConfig();
          var expirationTime = computeExpirationForFiber(currentTime, current$1, suspenseConfig);
          var context2 = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context2;
          } else {
            container.pendingContext = context2;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
            }
          }
          var update = createUpdate(expirationTime, suspenseConfig);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          enqueueUpdate(current$1, update);
          scheduleWork(current$1, expirationTime);
          return expirationTime;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function markRetryTimeImpl(fiber, retryTime) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            if (suspenseState.retryTime < retryTime) {
              suspenseState.retryTime = retryTime;
            }
          }
        }
        function markRetryTimeIfNotHydrated(fiber, retryTime) {
          markRetryTimeImpl(fiber, retryTime);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryTimeImpl(alternate, retryTime);
          }
        }
        function attemptUserBlockingHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
          scheduleWork(fiber, expTime);
          markRetryTimeIfNotHydrated(fiber, expTime);
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          scheduleWork(fiber, ContinuousHydration);
          markRetryTimeIfNotHydrated(fiber, ContinuousHydration);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var currentTime = requestCurrentTimeForUpdate();
          var expTime = computeExpirationForFiber(currentTime, fiber, null);
          scheduleWork(fiber, expTime);
          markRetryTimeIfNotHydrated(fiber, expTime);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.tag === FundamentalComponent) {
            return hostFiber.stateNode.instance;
          }
          return hostFiber.stateNode;
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideProps = null;
        var scheduleUpdate = null;
        var setSuspenseHandler = null;
        {
          var copyWithSetImpl = function(obj, path, idx, value2) {
            if (idx >= path.length) {
              return value2;
            }
            var key = path[idx];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value2);
            return updated;
          };
          var copyWithSet = function(obj, path, value2) {
            return copyWithSetImpl(obj, path, 0, value2);
          };
          overrideHookState = function(fiber, id, path, value2) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            if (currentHook2 !== null) {
              var newState = copyWithSet(currentHook2.memoizedState, path, value2);
              currentHook2.memoizedState = newState;
              currentHook2.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleWork(fiber, Sync);
            }
          };
          overrideProps = function(fiber, path, value2) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value2);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleWork(fiber, Sync);
          };
          scheduleUpdate = function(fiber) {
            scheduleWork(fiber, Sync);
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals(_assign({}, devToolsConfig, {
            overrideHookState,
            overrideProps,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber: function(fiber) {
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              return hostFiber.stateNode;
            },
            findFiberByHostInstance: function(instance) {
              if (!findFiberByHostInstance) {
                return null;
              }
              return findFiberByHostInstance(instance);
            },
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            getCurrentFiber: function() {
              return current;
            }
          }));
        }
        ReactSharedInternals.IsSomeRendererActing;
        function ReactDOMBlockingRoot(container, tag, options) {
          this._internalRoot = createRootImpl(container, tag, options);
        }
        ReactDOMBlockingRoot.prototype.render = function(children) {
          var root3 = this._internalRoot;
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
            var container = root3.containerInfo;
            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root3.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root3, null, null);
        };
        ReactDOMBlockingRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root3 = this._internalRoot;
          var container = root3.containerInfo;
          updateContainer(null, root3, null, function() {
            unmarkContainerAsRoot(container);
          });
        };
        function createRootImpl(container, tag, options) {
          var hydrate2 = options != null && options.hydrate === true;
          options != null && options.hydrationOptions || null;
          var root3 = createContainer(container, tag, hydrate2);
          markContainerAsRoot(root3.current, container);
          if (hydrate2 && tag !== LegacyRoot) {
            var doc = container.nodeType === DOCUMENT_NODE ? container : container.ownerDocument;
            eagerlyTrapReplayableEvents(container, doc);
          }
          return root3;
        }
        function createLegacyRoot(container, options) {
          return new ReactDOMBlockingRoot(container, LegacyRoot, options);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        var warnedAboutHydrateAPI = false;
        {
          topLevelUpdateWarnings = function(container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function shouldHydrateDueToLegacyHeuristic(container) {
          var rootElement2 = getReactRootElementInContainer(container);
          return !!(rootElement2 && rootElement2.nodeType === ELEMENT_NODE && rootElement2.hasAttribute(ROOT_ATTRIBUTE_NAME));
        }
        function legacyCreateRootFromDOMContainer(container, forceHydrate) {
          var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
          if (!shouldHydrate) {
            var warned = false;
            var rootSibling;
            while (rootSibling = container.lastChild) {
              {
                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                  warned = true;
                  error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                }
              }
              container.removeChild(rootSibling);
            }
          }
          {
            if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
              warnedAboutHydrateAPI = true;
              warn2("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v17. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
            }
          }
          return createLegacyRoot(container, shouldHydrate ? {
            hydrate: true
          } : void 0);
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var root3 = container._reactRootContainer;
          var fiberRoot;
          if (!root3) {
            root3 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
            fiberRoot = root3._internalRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(fiberRoot);
                originalCallback.call(instance);
              };
            }
            unbatchedUpdates(function() {
              updateContainer(children, fiberRoot, parentComponent, callback);
            });
          } else {
            fiberRoot = root3._internalRoot;
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(fiberRoot);
                _originalCallback.call(instance);
              };
            }
            updateContainer(children, fiberRoot, parentComponent, callback);
          }
          return getPublicRootInstance(fiberRoot);
        }
        function findDOMNode(componentOrElement) {
          {
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container, callback) {
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        }
        function render(element, container, callback) {
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          if (!isValidContainer(containerNode)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          if (!(parentComponent != null && has2(parentComponent))) {
            {
              throw Error("parentComponent must be a valid React Component");
            }
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        function unmountComponentAtNode(container) {
          if (!isValidContainer(container)) {
            {
              throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            unbatchedUpdates(function() {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                container._reactRootContainer = null;
                unmarkContainerAsRoot(container);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));
              var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        function createPortal(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          return {
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        var ReactVersion = "16.14.0";
        setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        var didWarnAboutUnstableCreatePortal = false;
        {
          if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
        function createPortal$1(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          return createPortal(children, container, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        function unstable_createPortal(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          {
            if (!didWarnAboutUnstableCreatePortal) {
              didWarnAboutUnstableCreatePortal = true;
              warn2('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
            }
          }
          return createPortal$1(children, container, key);
        }
        var Internals = {
          Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch, flushPassiveEffects, IsThisRendererActing]
        };
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://fb.me/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://fb.me/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        reactDom_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        reactDom_development.createPortal = createPortal$1;
        reactDom_development.findDOMNode = findDOMNode;
        reactDom_development.flushSync = flushSync;
        reactDom_development.hydrate = hydrate;
        reactDom_development.render = render;
        reactDom_development.unmountComponentAtNode = unmountComponentAtNode;
        reactDom_development.unstable_batchedUpdates = batchedUpdates$1;
        reactDom_development.unstable_createPortal = unstable_createPortal;
        reactDom_development.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        reactDom_development.version = ReactVersion;
      })();
    }
    (function(module2) {
      {
        module2.exports = reactDom_development;
      }
    })(reactDom);
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _typeof$1(obj) {
      "@babel/helpers - typeof";
      return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof$1(obj);
    }
    function _toPrimitive(input, hint) {
      if (_typeof$1(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof$1(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof$1(key) === "symbol" ? key : String(key);
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperty(subClass, "prototype", {
        writable: false
      });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof$1(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self2);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _defineProperty$1(obj, key, value2) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value2,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value2;
      }
      return obj;
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr))
        return arr;
    }
    function _iterableToArrayLimit(arr, i) {
      var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
      if (null != _i) {
        var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
        try {
          if (_x = (_i = _i.call(arr)).next, 0 === i) {
            if (Object(_i) !== _i)
              return;
            _n = false;
          } else
            for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true)
              ;
        } catch (err) {
          _d = true, _e = err;
        } finally {
          try {
            if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r))
              return;
          } finally {
            if (_d)
              throw _e;
          }
        }
        return _arr;
      }
    }
    function _arrayLikeToArray$6(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function _unsupportedIterableToArray$6(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$6(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$6(o, minLen);
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$6(arr, i) || _nonIterableRest();
    }
    var immutable = { exports: {} };
    (function(module2, exports2) {
      (function(global2, factory) {
        module2.exports = factory();
      })(commonjsGlobal, function() {
        var SLICE$0 = Array.prototype.slice;
        function createClass(ctor, superClass) {
          if (superClass) {
            ctor.prototype = Object.create(superClass.prototype);
          }
          ctor.prototype.constructor = ctor;
        }
        function Iterable(value2) {
          return isIterable(value2) ? value2 : Seq(value2);
        }
        createClass(KeyedIterable, Iterable);
        function KeyedIterable(value2) {
          return isKeyed(value2) ? value2 : KeyedSeq(value2);
        }
        createClass(IndexedIterable, Iterable);
        function IndexedIterable(value2) {
          return isIndexed(value2) ? value2 : IndexedSeq(value2);
        }
        createClass(SetIterable, Iterable);
        function SetIterable(value2) {
          return isIterable(value2) && !isAssociative(value2) ? value2 : SetSeq(value2);
        }
        function isIterable(maybeIterable) {
          return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);
        }
        function isKeyed(maybeKeyed) {
          return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);
        }
        function isIndexed(maybeIndexed) {
          return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);
        }
        function isAssociative(maybeAssociative) {
          return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
        }
        function isOrdered(maybeOrdered) {
          return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);
        }
        Iterable.isIterable = isIterable;
        Iterable.isKeyed = isKeyed;
        Iterable.isIndexed = isIndexed;
        Iterable.isAssociative = isAssociative;
        Iterable.isOrdered = isOrdered;
        Iterable.Keyed = KeyedIterable;
        Iterable.Indexed = IndexedIterable;
        Iterable.Set = SetIterable;
        var IS_ITERABLE_SENTINEL = "@@__IMMUTABLE_ITERABLE__@@";
        var IS_KEYED_SENTINEL = "@@__IMMUTABLE_KEYED__@@";
        var IS_INDEXED_SENTINEL = "@@__IMMUTABLE_INDEXED__@@";
        var IS_ORDERED_SENTINEL = "@@__IMMUTABLE_ORDERED__@@";
        var DELETE = "delete";
        var SHIFT = 5;
        var SIZE = 1 << SHIFT;
        var MASK = SIZE - 1;
        var NOT_SET = {};
        var CHANGE_LENGTH = { value: false };
        var DID_ALTER = { value: false };
        function MakeRef(ref) {
          ref.value = false;
          return ref;
        }
        function SetRef(ref) {
          ref && (ref.value = true);
        }
        function OwnerID() {
        }
        function arrCopy(arr, offset2) {
          offset2 = offset2 || 0;
          var len = Math.max(0, arr.length - offset2);
          var newArr = new Array(len);
          for (var ii = 0; ii < len; ii++) {
            newArr[ii] = arr[ii + offset2];
          }
          return newArr;
        }
        function ensureSize(iter) {
          if (iter.size === void 0) {
            iter.size = iter.__iterate(returnTrue);
          }
          return iter.size;
        }
        function wrapIndex(iter, index) {
          if (typeof index !== "number") {
            var uint32Index = index >>> 0;
            if ("" + uint32Index !== index || uint32Index === 4294967295) {
              return NaN;
            }
            index = uint32Index;
          }
          return index < 0 ? ensureSize(iter) + index : index;
        }
        function returnTrue() {
          return true;
        }
        function wholeSlice(begin, end, size) {
          return (begin === 0 || size !== void 0 && begin <= -size) && (end === void 0 || size !== void 0 && end >= size);
        }
        function resolveBegin(begin, size) {
          return resolveIndex(begin, size, 0);
        }
        function resolveEnd(end, size) {
          return resolveIndex(end, size, size);
        }
        function resolveIndex(index, size, defaultIndex) {
          return index === void 0 ? defaultIndex : index < 0 ? Math.max(0, size + index) : size === void 0 ? index : Math.min(size, index);
        }
        var ITERATE_KEYS = 0;
        var ITERATE_VALUES = 1;
        var ITERATE_ENTRIES = 2;
        var REAL_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;
        function Iterator(next) {
          this.next = next;
        }
        Iterator.prototype.toString = function() {
          return "[Iterator]";
        };
        Iterator.KEYS = ITERATE_KEYS;
        Iterator.VALUES = ITERATE_VALUES;
        Iterator.ENTRIES = ITERATE_ENTRIES;
        Iterator.prototype.inspect = Iterator.prototype.toSource = function() {
          return this.toString();
        };
        Iterator.prototype[ITERATOR_SYMBOL] = function() {
          return this;
        };
        function iteratorValue(type, k, v, iteratorResult) {
          var value2 = type === 0 ? k : type === 1 ? v : [k, v];
          iteratorResult ? iteratorResult.value = value2 : iteratorResult = {
            value: value2,
            done: false
          };
          return iteratorResult;
        }
        function iteratorDone() {
          return { value: void 0, done: true };
        }
        function hasIterator(maybeIterable) {
          return !!getIteratorFn(maybeIterable);
        }
        function isIterator(maybeIterator) {
          return maybeIterator && typeof maybeIterator.next === "function";
        }
        function getIterator(iterable) {
          var iteratorFn = getIteratorFn(iterable);
          return iteratorFn && iteratorFn.call(iterable);
        }
        function getIteratorFn(iterable) {
          var iteratorFn = iterable && (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL] || iterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        function isArrayLike2(value2) {
          return value2 && typeof value2.length === "number";
        }
        createClass(Seq, Iterable);
        function Seq(value2) {
          return value2 === null || value2 === void 0 ? emptySequence() : isIterable(value2) ? value2.toSeq() : seqFromValue(value2);
        }
        Seq.of = function() {
          return Seq(arguments);
        };
        Seq.prototype.toSeq = function() {
          return this;
        };
        Seq.prototype.toString = function() {
          return this.__toString("Seq {", "}");
        };
        Seq.prototype.cacheResult = function() {
          if (!this._cache && this.__iterateUncached) {
            this._cache = this.entrySeq().toArray();
            this.size = this._cache.length;
          }
          return this;
        };
        Seq.prototype.__iterate = function(fn, reverse) {
          return seqIterate(this, fn, reverse, true);
        };
        Seq.prototype.__iterator = function(type, reverse) {
          return seqIterator(this, type, reverse, true);
        };
        createClass(KeyedSeq, Seq);
        function KeyedSeq(value2) {
          return value2 === null || value2 === void 0 ? emptySequence().toKeyedSeq() : isIterable(value2) ? isKeyed(value2) ? value2.toSeq() : value2.fromEntrySeq() : keyedSeqFromValue(value2);
        }
        KeyedSeq.prototype.toKeyedSeq = function() {
          return this;
        };
        createClass(IndexedSeq, Seq);
        function IndexedSeq(value2) {
          return value2 === null || value2 === void 0 ? emptySequence() : !isIterable(value2) ? indexedSeqFromValue(value2) : isKeyed(value2) ? value2.entrySeq() : value2.toIndexedSeq();
        }
        IndexedSeq.of = function() {
          return IndexedSeq(arguments);
        };
        IndexedSeq.prototype.toIndexedSeq = function() {
          return this;
        };
        IndexedSeq.prototype.toString = function() {
          return this.__toString("Seq [", "]");
        };
        IndexedSeq.prototype.__iterate = function(fn, reverse) {
          return seqIterate(this, fn, reverse, false);
        };
        IndexedSeq.prototype.__iterator = function(type, reverse) {
          return seqIterator(this, type, reverse, false);
        };
        createClass(SetSeq, Seq);
        function SetSeq(value2) {
          return (value2 === null || value2 === void 0 ? emptySequence() : !isIterable(value2) ? indexedSeqFromValue(value2) : isKeyed(value2) ? value2.entrySeq() : value2).toSetSeq();
        }
        SetSeq.of = function() {
          return SetSeq(arguments);
        };
        SetSeq.prototype.toSetSeq = function() {
          return this;
        };
        Seq.isSeq = isSeq;
        Seq.Keyed = KeyedSeq;
        Seq.Set = SetSeq;
        Seq.Indexed = IndexedSeq;
        var IS_SEQ_SENTINEL = "@@__IMMUTABLE_SEQ__@@";
        Seq.prototype[IS_SEQ_SENTINEL] = true;
        createClass(ArraySeq, IndexedSeq);
        function ArraySeq(array) {
          this._array = array;
          this.size = array.length;
        }
        ArraySeq.prototype.get = function(index, notSetValue) {
          return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
        };
        ArraySeq.prototype.__iterate = function(fn, reverse) {
          var array = this._array;
          var maxIndex = array.length - 1;
          for (var ii = 0; ii <= maxIndex; ii++) {
            if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {
              return ii + 1;
            }
          }
          return ii;
        };
        ArraySeq.prototype.__iterator = function(type, reverse) {
          var array = this._array;
          var maxIndex = array.length - 1;
          var ii = 0;
          return new Iterator(
            function() {
              return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++]);
            }
          );
        };
        createClass(ObjectSeq, KeyedSeq);
        function ObjectSeq(object) {
          var keys2 = Object.keys(object);
          this._object = object;
          this._keys = keys2;
          this.size = keys2.length;
        }
        ObjectSeq.prototype.get = function(key, notSetValue) {
          if (notSetValue !== void 0 && !this.has(key)) {
            return notSetValue;
          }
          return this._object[key];
        };
        ObjectSeq.prototype.has = function(key) {
          return this._object.hasOwnProperty(key);
        };
        ObjectSeq.prototype.__iterate = function(fn, reverse) {
          var object = this._object;
          var keys2 = this._keys;
          var maxIndex = keys2.length - 1;
          for (var ii = 0; ii <= maxIndex; ii++) {
            var key = keys2[reverse ? maxIndex - ii : ii];
            if (fn(object[key], key, this) === false) {
              return ii + 1;
            }
          }
          return ii;
        };
        ObjectSeq.prototype.__iterator = function(type, reverse) {
          var object = this._object;
          var keys2 = this._keys;
          var maxIndex = keys2.length - 1;
          var ii = 0;
          return new Iterator(function() {
            var key = keys2[reverse ? maxIndex - ii : ii];
            return ii++ > maxIndex ? iteratorDone() : iteratorValue(type, key, object[key]);
          });
        };
        ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;
        createClass(IterableSeq, IndexedSeq);
        function IterableSeq(iterable) {
          this._iterable = iterable;
          this.size = iterable.length || iterable.size;
        }
        IterableSeq.prototype.__iterateUncached = function(fn, reverse) {
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var iterable = this._iterable;
          var iterator = getIterator(iterable);
          var iterations = 0;
          if (isIterator(iterator)) {
            var step;
            while (!(step = iterator.next()).done) {
              if (fn(step.value, iterations++, this) === false) {
                break;
              }
            }
          }
          return iterations;
        };
        IterableSeq.prototype.__iteratorUncached = function(type, reverse) {
          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var iterable = this._iterable;
          var iterator = getIterator(iterable);
          if (!isIterator(iterator)) {
            return new Iterator(iteratorDone);
          }
          var iterations = 0;
          return new Iterator(function() {
            var step = iterator.next();
            return step.done ? step : iteratorValue(type, iterations++, step.value);
          });
        };
        createClass(IteratorSeq, IndexedSeq);
        function IteratorSeq(iterator) {
          this._iterator = iterator;
          this._iteratorCache = [];
        }
        IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {
          if (reverse) {
            return this.cacheResult().__iterate(fn, reverse);
          }
          var iterator = this._iterator;
          var cache = this._iteratorCache;
          var iterations = 0;
          while (iterations < cache.length) {
            if (fn(cache[iterations], iterations++, this) === false) {
              return iterations;
            }
          }
          var step;
          while (!(step = iterator.next()).done) {
            var val = step.value;
            cache[iterations] = val;
            if (fn(val, iterations++, this) === false) {
              break;
            }
          }
          return iterations;
        };
        IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {
          if (reverse) {
            return this.cacheResult().__iterator(type, reverse);
          }
          var iterator = this._iterator;
          var cache = this._iteratorCache;
          var iterations = 0;
          return new Iterator(function() {
            if (iterations >= cache.length) {
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              cache[iterations] = step.value;
            }
            return iteratorValue(type, iterations, cache[iterations++]);
          });
        };
        function isSeq(maybeSeq) {
          return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);
        }
        var EMPTY_SEQ;
        function emptySequence() {
          return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
        }
        function keyedSeqFromValue(value2) {
          var seq = Array.isArray(value2) ? new ArraySeq(value2).fromEntrySeq() : isIterator(value2) ? new IteratorSeq(value2).fromEntrySeq() : hasIterator(value2) ? new IterableSeq(value2).fromEntrySeq() : typeof value2 === "object" ? new ObjectSeq(value2) : void 0;
          if (!seq) {
            throw new TypeError(
              "Expected Array or iterable object of [k, v] entries, or keyed object: " + value2
            );
          }
          return seq;
        }
        function indexedSeqFromValue(value2) {
          var seq = maybeIndexedSeqFromValue(value2);
          if (!seq) {
            throw new TypeError(
              "Expected Array or iterable object of values: " + value2
            );
          }
          return seq;
        }
        function seqFromValue(value2) {
          var seq = maybeIndexedSeqFromValue(value2) || typeof value2 === "object" && new ObjectSeq(value2);
          if (!seq) {
            throw new TypeError(
              "Expected Array or iterable object of values, or keyed object: " + value2
            );
          }
          return seq;
        }
        function maybeIndexedSeqFromValue(value2) {
          return isArrayLike2(value2) ? new ArraySeq(value2) : isIterator(value2) ? new IteratorSeq(value2) : hasIterator(value2) ? new IterableSeq(value2) : void 0;
        }
        function seqIterate(seq, fn, reverse, useKeys) {
          var cache = seq._cache;
          if (cache) {
            var maxIndex = cache.length - 1;
            for (var ii = 0; ii <= maxIndex; ii++) {
              var entry = cache[reverse ? maxIndex - ii : ii];
              if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {
                return ii + 1;
              }
            }
            return ii;
          }
          return seq.__iterateUncached(fn, reverse);
        }
        function seqIterator(seq, type, reverse, useKeys) {
          var cache = seq._cache;
          if (cache) {
            var maxIndex = cache.length - 1;
            var ii = 0;
            return new Iterator(function() {
              var entry = cache[reverse ? maxIndex - ii : ii];
              return ii++ > maxIndex ? iteratorDone() : iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);
            });
          }
          return seq.__iteratorUncached(type, reverse);
        }
        function fromJS(json, converter) {
          return converter ? fromJSWith(converter, json, "", { "": json }) : fromJSDefault(json);
        }
        function fromJSWith(converter, json, key, parentJSON) {
          if (Array.isArray(json)) {
            return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k) {
              return fromJSWith(converter, v, k, json);
            }));
          }
          if (isPlainObj(json)) {
            return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k) {
              return fromJSWith(converter, v, k, json);
            }));
          }
          return json;
        }
        function fromJSDefault(json) {
          if (Array.isArray(json)) {
            return IndexedSeq(json).map(fromJSDefault).toList();
          }
          if (isPlainObj(json)) {
            return KeyedSeq(json).map(fromJSDefault).toMap();
          }
          return json;
        }
        function isPlainObj(value2) {
          return value2 && (value2.constructor === Object || value2.constructor === void 0);
        }
        function is2(valueA, valueB) {
          if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
            return true;
          }
          if (!valueA || !valueB) {
            return false;
          }
          if (typeof valueA.valueOf === "function" && typeof valueB.valueOf === "function") {
            valueA = valueA.valueOf();
            valueB = valueB.valueOf();
            if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
              return true;
            }
            if (!valueA || !valueB) {
              return false;
            }
          }
          if (typeof valueA.equals === "function" && typeof valueB.equals === "function" && valueA.equals(valueB)) {
            return true;
          }
          return false;
        }
        function deepEqual2(a, b) {
          if (a === b) {
            return true;
          }
          if (!isIterable(b) || a.size !== void 0 && b.size !== void 0 && a.size !== b.size || a.__hash !== void 0 && b.__hash !== void 0 && a.__hash !== b.__hash || isKeyed(a) !== isKeyed(b) || isIndexed(a) !== isIndexed(b) || isOrdered(a) !== isOrdered(b)) {
            return false;
          }
          if (a.size === 0 && b.size === 0) {
            return true;
          }
          var notAssociative = !isAssociative(a);
          if (isOrdered(a)) {
            var entries = a.entries();
            return b.every(function(v, k) {
              var entry = entries.next().value;
              return entry && is2(entry[1], v) && (notAssociative || is2(entry[0], k));
            }) && entries.next().done;
          }
          var flipped = false;
          if (a.size === void 0) {
            if (b.size === void 0) {
              if (typeof a.cacheResult === "function") {
                a.cacheResult();
              }
            } else {
              flipped = true;
              var _ = a;
              a = b;
              b = _;
            }
          }
          var allEqual = true;
          var bSize = b.__iterate(function(v, k) {
            if (notAssociative ? !a.has(v) : flipped ? !is2(v, a.get(k, NOT_SET)) : !is2(a.get(k, NOT_SET), v)) {
              allEqual = false;
              return false;
            }
          });
          return allEqual && a.size === bSize;
        }
        createClass(Repeat, IndexedSeq);
        function Repeat(value2, times) {
          if (!(this instanceof Repeat)) {
            return new Repeat(value2, times);
          }
          this._value = value2;
          this.size = times === void 0 ? Infinity : Math.max(0, times);
          if (this.size === 0) {
            if (EMPTY_REPEAT) {
              return EMPTY_REPEAT;
            }
            EMPTY_REPEAT = this;
          }
        }
        Repeat.prototype.toString = function() {
          if (this.size === 0) {
            return "Repeat []";
          }
          return "Repeat [ " + this._value + " " + this.size + " times ]";
        };
        Repeat.prototype.get = function(index, notSetValue) {
          return this.has(index) ? this._value : notSetValue;
        };
        Repeat.prototype.includes = function(searchValue) {
          return is2(this._value, searchValue);
        };
        Repeat.prototype.slice = function(begin, end) {
          var size = this.size;
          return wholeSlice(begin, end, size) ? this : new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));
        };
        Repeat.prototype.reverse = function() {
          return this;
        };
        Repeat.prototype.indexOf = function(searchValue) {
          if (is2(this._value, searchValue)) {
            return 0;
          }
          return -1;
        };
        Repeat.prototype.lastIndexOf = function(searchValue) {
          if (is2(this._value, searchValue)) {
            return this.size;
          }
          return -1;
        };
        Repeat.prototype.__iterate = function(fn, reverse) {
          for (var ii = 0; ii < this.size; ii++) {
            if (fn(this._value, ii, this) === false) {
              return ii + 1;
            }
          }
          return ii;
        };
        Repeat.prototype.__iterator = function(type, reverse) {
          var this$0 = this;
          var ii = 0;
          return new Iterator(
            function() {
              return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone();
            }
          );
        };
        Repeat.prototype.equals = function(other) {
          return other instanceof Repeat ? is2(this._value, other._value) : deepEqual2(other);
        };
        var EMPTY_REPEAT;
        function invariant(condition, error) {
          if (!condition)
            throw new Error(error);
        }
        createClass(Range, IndexedSeq);
        function Range(start, end, step) {
          if (!(this instanceof Range)) {
            return new Range(start, end, step);
          }
          invariant(step !== 0, "Cannot step a Range by 0");
          start = start || 0;
          if (end === void 0) {
            end = Infinity;
          }
          step = step === void 0 ? 1 : Math.abs(step);
          if (end < start) {
            step = -step;
          }
          this._start = start;
          this._end = end;
          this._step = step;
          this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
          if (this.size === 0) {
            if (EMPTY_RANGE) {
              return EMPTY_RANGE;
            }
            EMPTY_RANGE = this;
          }
        }
        Range.prototype.toString = function() {
          if (this.size === 0) {
            return "Range []";
          }
          return "Range [ " + this._start + "..." + this._end + (this._step !== 1 ? " by " + this._step : "") + " ]";
        };
        Range.prototype.get = function(index, notSetValue) {
          return this.has(index) ? this._start + wrapIndex(this, index) * this._step : notSetValue;
        };
        Range.prototype.includes = function(searchValue) {
          var possibleIndex = (searchValue - this._start) / this._step;
          return possibleIndex >= 0 && possibleIndex < this.size && possibleIndex === Math.floor(possibleIndex);
        };
        Range.prototype.slice = function(begin, end) {
          if (wholeSlice(begin, end, this.size)) {
            return this;
          }
          begin = resolveBegin(begin, this.size);
          end = resolveEnd(end, this.size);
          if (end <= begin) {
            return new Range(0, 0);
          }
          return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);
        };
        Range.prototype.indexOf = function(searchValue) {
          var offsetValue = searchValue - this._start;
          if (offsetValue % this._step === 0) {
            var index = offsetValue / this._step;
            if (index >= 0 && index < this.size) {
              return index;
            }
          }
          return -1;
        };
        Range.prototype.lastIndexOf = function(searchValue) {
          return this.indexOf(searchValue);
        };
        Range.prototype.__iterate = function(fn, reverse) {
          var maxIndex = this.size - 1;
          var step = this._step;
          var value2 = reverse ? this._start + maxIndex * step : this._start;
          for (var ii = 0; ii <= maxIndex; ii++) {
            if (fn(value2, ii, this) === false) {
              return ii + 1;
            }
            value2 += reverse ? -step : step;
          }
          return ii;
        };
        Range.prototype.__iterator = function(type, reverse) {
          var maxIndex = this.size - 1;
          var step = this._step;
          var value2 = reverse ? this._start + maxIndex * step : this._start;
          var ii = 0;
          return new Iterator(function() {
            var v = value2;
            value2 += reverse ? -step : step;
            return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);
          });
        };
        Range.prototype.equals = function(other) {
          return other instanceof Range ? this._start === other._start && this._end === other._end && this._step === other._step : deepEqual2(this, other);
        };
        var EMPTY_RANGE;
        createClass(Collection, Iterable);
        function Collection() {
          throw TypeError("Abstract");
        }
        createClass(KeyedCollection, Collection);
        function KeyedCollection() {
        }
        createClass(IndexedCollection, Collection);
        function IndexedCollection() {
        }
        createClass(SetCollection, Collection);
        function SetCollection() {
        }
        Collection.Keyed = KeyedCollection;
        Collection.Indexed = IndexedCollection;
        Collection.Set = SetCollection;
        var imul = typeof Math.imul === "function" && Math.imul(4294967295, 2) === -2 ? Math.imul : function imul2(a, b) {
          a = a | 0;
          b = b | 0;
          var c = a & 65535;
          var d = b & 65535;
          return c * d + ((a >>> 16) * d + c * (b >>> 16) << 16 >>> 0) | 0;
        };
        function smi(i32) {
          return i32 >>> 1 & 1073741824 | i32 & 3221225471;
        }
        function hash(o) {
          if (o === false || o === null || o === void 0) {
            return 0;
          }
          if (typeof o.valueOf === "function") {
            o = o.valueOf();
            if (o === false || o === null || o === void 0) {
              return 0;
            }
          }
          if (o === true) {
            return 1;
          }
          var type = typeof o;
          if (type === "number") {
            if (o !== o || o === Infinity) {
              return 0;
            }
            var h = o | 0;
            if (h !== o) {
              h ^= o * 4294967295;
            }
            while (o > 4294967295) {
              o /= 4294967295;
              h ^= o;
            }
            return smi(h);
          }
          if (type === "string") {
            return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);
          }
          if (typeof o.hashCode === "function") {
            return o.hashCode();
          }
          if (type === "object") {
            return hashJSObj(o);
          }
          if (typeof o.toString === "function") {
            return hashString(o.toString());
          }
          throw new Error("Value type " + type + " cannot be hashed.");
        }
        function cachedHashString(string) {
          var hash2 = stringHashCache[string];
          if (hash2 === void 0) {
            hash2 = hashString(string);
            if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
              STRING_HASH_CACHE_SIZE = 0;
              stringHashCache = {};
            }
            STRING_HASH_CACHE_SIZE++;
            stringHashCache[string] = hash2;
          }
          return hash2;
        }
        function hashString(string) {
          var hash2 = 0;
          for (var ii = 0; ii < string.length; ii++) {
            hash2 = 31 * hash2 + string.charCodeAt(ii) | 0;
          }
          return smi(hash2);
        }
        function hashJSObj(obj) {
          var hash2;
          if (usingWeakMap) {
            hash2 = weakMap.get(obj);
            if (hash2 !== void 0) {
              return hash2;
            }
          }
          hash2 = obj[UID_HASH_KEY];
          if (hash2 !== void 0) {
            return hash2;
          }
          if (!canDefineProperty) {
            hash2 = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
            if (hash2 !== void 0) {
              return hash2;
            }
            hash2 = getIENodeHash(obj);
            if (hash2 !== void 0) {
              return hash2;
            }
          }
          hash2 = ++objHashUID;
          if (objHashUID & 1073741824) {
            objHashUID = 0;
          }
          if (usingWeakMap) {
            weakMap.set(obj, hash2);
          } else if (isExtensible !== void 0 && isExtensible(obj) === false) {
            throw new Error("Non-extensible objects are not allowed as keys.");
          } else if (canDefineProperty) {
            Object.defineProperty(obj, UID_HASH_KEY, {
              "enumerable": false,
              "configurable": false,
              "writable": false,
              "value": hash2
            });
          } else if (obj.propertyIsEnumerable !== void 0 && obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
            obj.propertyIsEnumerable = function() {
              return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);
            };
            obj.propertyIsEnumerable[UID_HASH_KEY] = hash2;
          } else if (obj.nodeType !== void 0) {
            obj[UID_HASH_KEY] = hash2;
          } else {
            throw new Error("Unable to set a non-enumerable property on object.");
          }
          return hash2;
        }
        var isExtensible = Object.isExtensible;
        var canDefineProperty = function() {
          try {
            Object.defineProperty({}, "@", {});
            return true;
          } catch (e) {
            return false;
          }
        }();
        function getIENodeHash(node) {
          if (node && node.nodeType > 0) {
            switch (node.nodeType) {
              case 1:
                return node.uniqueID;
              case 9:
                return node.documentElement && node.documentElement.uniqueID;
            }
          }
        }
        var usingWeakMap = typeof WeakMap === "function";
        var weakMap;
        if (usingWeakMap) {
          weakMap = /* @__PURE__ */ new WeakMap();
        }
        var objHashUID = 0;
        var UID_HASH_KEY = "__immutablehash__";
        if (typeof Symbol === "function") {
          UID_HASH_KEY = Symbol(UID_HASH_KEY);
        }
        var STRING_HASH_CACHE_MIN_STRLEN = 16;
        var STRING_HASH_CACHE_MAX_SIZE = 255;
        var STRING_HASH_CACHE_SIZE = 0;
        var stringHashCache = {};
        function assertNotInfinite(size) {
          invariant(
            size !== Infinity,
            "Cannot perform this action with an infinite size."
          );
        }
        createClass(Map2, KeyedCollection);
        function Map2(value2) {
          return value2 === null || value2 === void 0 ? emptyMap() : isMap2(value2) && !isOrdered(value2) ? value2 : emptyMap().withMutations(function(map2) {
            var iter = KeyedIterable(value2);
            assertNotInfinite(iter.size);
            iter.forEach(function(v, k) {
              return map2.set(k, v);
            });
          });
        }
        Map2.of = function() {
          var keyValues = SLICE$0.call(arguments, 0);
          return emptyMap().withMutations(function(map2) {
            for (var i = 0; i < keyValues.length; i += 2) {
              if (i + 1 >= keyValues.length) {
                throw new Error("Missing value for key: " + keyValues[i]);
              }
              map2.set(keyValues[i], keyValues[i + 1]);
            }
          });
        };
        Map2.prototype.toString = function() {
          return this.__toString("Map {", "}");
        };
        Map2.prototype.get = function(k, notSetValue) {
          return this._root ? this._root.get(0, void 0, k, notSetValue) : notSetValue;
        };
        Map2.prototype.set = function(k, v) {
          return updateMap(this, k, v);
        };
        Map2.prototype.setIn = function(keyPath, v) {
          return this.updateIn(keyPath, NOT_SET, function() {
            return v;
          });
        };
        Map2.prototype.remove = function(k) {
          return updateMap(this, k, NOT_SET);
        };
        Map2.prototype.deleteIn = function(keyPath) {
          return this.updateIn(keyPath, function() {
            return NOT_SET;
          });
        };
        Map2.prototype.update = function(k, notSetValue, updater) {
          return arguments.length === 1 ? k(this) : this.updateIn([k], notSetValue, updater);
        };
        Map2.prototype.updateIn = function(keyPath, notSetValue, updater) {
          if (!updater) {
            updater = notSetValue;
            notSetValue = void 0;
          }
          var updatedValue = updateInDeepMap(
            this,
            forceIterator(keyPath),
            notSetValue,
            updater
          );
          return updatedValue === NOT_SET ? void 0 : updatedValue;
        };
        Map2.prototype.clear = function() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._root = null;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return emptyMap();
        };
        Map2.prototype.merge = function() {
          return mergeIntoMapWith(this, void 0, arguments);
        };
        Map2.prototype.mergeWith = function(merger) {
          var iters = SLICE$0.call(arguments, 1);
          return mergeIntoMapWith(this, merger, iters);
        };
        Map2.prototype.mergeIn = function(keyPath) {
          var iters = SLICE$0.call(arguments, 1);
          return this.updateIn(
            keyPath,
            emptyMap(),
            function(m) {
              return typeof m.merge === "function" ? m.merge.apply(m, iters) : iters[iters.length - 1];
            }
          );
        };
        Map2.prototype.mergeDeep = function() {
          return mergeIntoMapWith(this, deepMerger, arguments);
        };
        Map2.prototype.mergeDeepWith = function(merger) {
          var iters = SLICE$0.call(arguments, 1);
          return mergeIntoMapWith(this, deepMergerWith(merger), iters);
        };
        Map2.prototype.mergeDeepIn = function(keyPath) {
          var iters = SLICE$0.call(arguments, 1);
          return this.updateIn(
            keyPath,
            emptyMap(),
            function(m) {
              return typeof m.mergeDeep === "function" ? m.mergeDeep.apply(m, iters) : iters[iters.length - 1];
            }
          );
        };
        Map2.prototype.sort = function(comparator) {
          return OrderedMap(sortFactory(this, comparator));
        };
        Map2.prototype.sortBy = function(mapper, comparator) {
          return OrderedMap(sortFactory(this, comparator, mapper));
        };
        Map2.prototype.withMutations = function(fn) {
          var mutable = this.asMutable();
          fn(mutable);
          return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
        };
        Map2.prototype.asMutable = function() {
          return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
        };
        Map2.prototype.asImmutable = function() {
          return this.__ensureOwner();
        };
        Map2.prototype.wasAltered = function() {
          return this.__altered;
        };
        Map2.prototype.__iterator = function(type, reverse) {
          return new MapIterator(this, type, reverse);
        };
        Map2.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          var iterations = 0;
          this._root && this._root.iterate(function(entry) {
            iterations++;
            return fn(entry[1], entry[0], this$0);
          }, reverse);
          return iterations;
        };
        Map2.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            this.__ownerID = ownerID;
            this.__altered = false;
            return this;
          }
          return makeMap(this.size, this._root, ownerID, this.__hash);
        };
        function isMap2(maybeMap) {
          return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);
        }
        Map2.isMap = isMap2;
        var IS_MAP_SENTINEL = "@@__IMMUTABLE_MAP__@@";
        var MapPrototype = Map2.prototype;
        MapPrototype[IS_MAP_SENTINEL] = true;
        MapPrototype[DELETE] = MapPrototype.remove;
        MapPrototype.removeIn = MapPrototype.deleteIn;
        function ArrayMapNode(ownerID, entries) {
          this.ownerID = ownerID;
          this.entries = entries;
        }
        ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
          var entries = this.entries;
          for (var ii = 0, len = entries.length; ii < len; ii++) {
            if (is2(key, entries[ii][0])) {
              return entries[ii][1];
            }
          }
          return notSetValue;
        };
        ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
          var removed = value2 === NOT_SET;
          var entries = this.entries;
          var idx = 0;
          for (var len = entries.length; idx < len; idx++) {
            if (is2(key, entries[idx][0])) {
              break;
            }
          }
          var exists = idx < len;
          if (exists ? entries[idx][1] === value2 : removed) {
            return this;
          }
          SetRef(didAlter);
          (removed || !exists) && SetRef(didChangeSize);
          if (removed && entries.length === 1) {
            return;
          }
          if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
            return createNodes(ownerID, entries, key, value2);
          }
          var isEditable = ownerID && ownerID === this.ownerID;
          var newEntries = isEditable ? entries : arrCopy(entries);
          if (exists) {
            if (removed) {
              idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
            } else {
              newEntries[idx] = [key, value2];
            }
          } else {
            newEntries.push([key, value2]);
          }
          if (isEditable) {
            this.entries = newEntries;
            return this;
          }
          return new ArrayMapNode(ownerID, newEntries);
        };
        function BitmapIndexedNode(ownerID, bitmap, nodes) {
          this.ownerID = ownerID;
          this.bitmap = bitmap;
          this.nodes = nodes;
        }
        BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {
          if (keyHash === void 0) {
            keyHash = hash(key);
          }
          var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);
          var bitmap = this.bitmap;
          return (bitmap & bit) === 0 ? notSetValue : this.nodes[popCount(bitmap & bit - 1)].get(shift + SHIFT, keyHash, key, notSetValue);
        };
        BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
          if (keyHash === void 0) {
            keyHash = hash(key);
          }
          var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
          var bit = 1 << keyHashFrag;
          var bitmap = this.bitmap;
          var exists = (bitmap & bit) !== 0;
          if (!exists && value2 === NOT_SET) {
            return this;
          }
          var idx = popCount(bitmap & bit - 1);
          var nodes = this.nodes;
          var node = exists ? nodes[idx] : void 0;
          var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value2, didChangeSize, didAlter);
          if (newNode === node) {
            return this;
          }
          if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
            return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
          }
          if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
            return nodes[idx ^ 1];
          }
          if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
            return newNode;
          }
          var isEditable = ownerID && ownerID === this.ownerID;
          var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
          var newNodes = exists ? newNode ? setIn(nodes, idx, newNode, isEditable) : spliceOut(nodes, idx, isEditable) : spliceIn(nodes, idx, newNode, isEditable);
          if (isEditable) {
            this.bitmap = newBitmap;
            this.nodes = newNodes;
            return this;
          }
          return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
        };
        function HashArrayMapNode(ownerID, count, nodes) {
          this.ownerID = ownerID;
          this.count = count;
          this.nodes = nodes;
        }
        HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
          if (keyHash === void 0) {
            keyHash = hash(key);
          }
          var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
          var node = this.nodes[idx];
          return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
        };
        HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
          if (keyHash === void 0) {
            keyHash = hash(key);
          }
          var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
          var removed = value2 === NOT_SET;
          var nodes = this.nodes;
          var node = nodes[idx];
          if (removed && !node) {
            return this;
          }
          var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value2, didChangeSize, didAlter);
          if (newNode === node) {
            return this;
          }
          var newCount = this.count;
          if (!node) {
            newCount++;
          } else if (!newNode) {
            newCount--;
            if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
              return packNodes(ownerID, nodes, newCount, idx);
            }
          }
          var isEditable = ownerID && ownerID === this.ownerID;
          var newNodes = setIn(nodes, idx, newNode, isEditable);
          if (isEditable) {
            this.count = newCount;
            this.nodes = newNodes;
            return this;
          }
          return new HashArrayMapNode(ownerID, newCount, newNodes);
        };
        function HashCollisionNode(ownerID, keyHash, entries) {
          this.ownerID = ownerID;
          this.keyHash = keyHash;
          this.entries = entries;
        }
        HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {
          var entries = this.entries;
          for (var ii = 0, len = entries.length; ii < len; ii++) {
            if (is2(key, entries[ii][0])) {
              return entries[ii][1];
            }
          }
          return notSetValue;
        };
        HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
          if (keyHash === void 0) {
            keyHash = hash(key);
          }
          var removed = value2 === NOT_SET;
          if (keyHash !== this.keyHash) {
            if (removed) {
              return this;
            }
            SetRef(didAlter);
            SetRef(didChangeSize);
            return mergeIntoNode(this, ownerID, shift, keyHash, [key, value2]);
          }
          var entries = this.entries;
          var idx = 0;
          for (var len = entries.length; idx < len; idx++) {
            if (is2(key, entries[idx][0])) {
              break;
            }
          }
          var exists = idx < len;
          if (exists ? entries[idx][1] === value2 : removed) {
            return this;
          }
          SetRef(didAlter);
          (removed || !exists) && SetRef(didChangeSize);
          if (removed && len === 2) {
            return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
          }
          var isEditable = ownerID && ownerID === this.ownerID;
          var newEntries = isEditable ? entries : arrCopy(entries);
          if (exists) {
            if (removed) {
              idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
            } else {
              newEntries[idx] = [key, value2];
            }
          } else {
            newEntries.push([key, value2]);
          }
          if (isEditable) {
            this.entries = newEntries;
            return this;
          }
          return new HashCollisionNode(ownerID, this.keyHash, newEntries);
        };
        function ValueNode(ownerID, keyHash, entry) {
          this.ownerID = ownerID;
          this.keyHash = keyHash;
          this.entry = entry;
        }
        ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {
          return is2(key, this.entry[0]) ? this.entry[1] : notSetValue;
        };
        ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
          var removed = value2 === NOT_SET;
          var keyMatch = is2(key, this.entry[0]);
          if (keyMatch ? value2 === this.entry[1] : removed) {
            return this;
          }
          SetRef(didAlter);
          if (removed) {
            SetRef(didChangeSize);
            return;
          }
          if (keyMatch) {
            if (ownerID && ownerID === this.ownerID) {
              this.entry[1] = value2;
              return this;
            }
            return new ValueNode(ownerID, this.keyHash, [key, value2]);
          }
          SetRef(didChangeSize);
          return mergeIntoNode(this, ownerID, shift, hash(key), [key, value2]);
        };
        ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function(fn, reverse) {
          var entries = this.entries;
          for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
            if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
              return false;
            }
          }
        };
        BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function(fn, reverse) {
          var nodes = this.nodes;
          for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
            var node = nodes[reverse ? maxIndex - ii : ii];
            if (node && node.iterate(fn, reverse) === false) {
              return false;
            }
          }
        };
        ValueNode.prototype.iterate = function(fn, reverse) {
          return fn(this.entry);
        };
        createClass(MapIterator, Iterator);
        function MapIterator(map2, type, reverse) {
          this._type = type;
          this._reverse = reverse;
          this._stack = map2._root && mapIteratorFrame(map2._root);
        }
        MapIterator.prototype.next = function() {
          var type = this._type;
          var stack = this._stack;
          while (stack) {
            var node = stack.node;
            var index = stack.index++;
            var maxIndex;
            if (node.entry) {
              if (index === 0) {
                return mapIteratorValue(type, node.entry);
              }
            } else if (node.entries) {
              maxIndex = node.entries.length - 1;
              if (index <= maxIndex) {
                return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);
              }
            } else {
              maxIndex = node.nodes.length - 1;
              if (index <= maxIndex) {
                var subNode = node.nodes[this._reverse ? maxIndex - index : index];
                if (subNode) {
                  if (subNode.entry) {
                    return mapIteratorValue(type, subNode.entry);
                  }
                  stack = this._stack = mapIteratorFrame(subNode, stack);
                }
                continue;
              }
            }
            stack = this._stack = this._stack.__prev;
          }
          return iteratorDone();
        };
        function mapIteratorValue(type, entry) {
          return iteratorValue(type, entry[0], entry[1]);
        }
        function mapIteratorFrame(node, prev) {
          return {
            node,
            index: 0,
            __prev: prev
          };
        }
        function makeMap(size, root2, ownerID, hash2) {
          var map2 = Object.create(MapPrototype);
          map2.size = size;
          map2._root = root2;
          map2.__ownerID = ownerID;
          map2.__hash = hash2;
          map2.__altered = false;
          return map2;
        }
        var EMPTY_MAP;
        function emptyMap() {
          return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
        }
        function updateMap(map2, k, v) {
          var newRoot;
          var newSize;
          if (!map2._root) {
            if (v === NOT_SET) {
              return map2;
            }
            newSize = 1;
            newRoot = new ArrayMapNode(map2.__ownerID, [[k, v]]);
          } else {
            var didChangeSize = MakeRef(CHANGE_LENGTH);
            var didAlter = MakeRef(DID_ALTER);
            newRoot = updateNode(map2._root, map2.__ownerID, 0, void 0, k, v, didChangeSize, didAlter);
            if (!didAlter.value) {
              return map2;
            }
            newSize = map2.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);
          }
          if (map2.__ownerID) {
            map2.size = newSize;
            map2._root = newRoot;
            map2.__hash = void 0;
            map2.__altered = true;
            return map2;
          }
          return newRoot ? makeMap(newSize, newRoot) : emptyMap();
        }
        function updateNode(node, ownerID, shift, keyHash, key, value2, didChangeSize, didAlter) {
          if (!node) {
            if (value2 === NOT_SET) {
              return node;
            }
            SetRef(didAlter);
            SetRef(didChangeSize);
            return new ValueNode(ownerID, keyHash, [key, value2]);
          }
          return node.update(ownerID, shift, keyHash, key, value2, didChangeSize, didAlter);
        }
        function isLeafNode(node) {
          return node.constructor === ValueNode || node.constructor === HashCollisionNode;
        }
        function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
          if (node.keyHash === keyHash) {
            return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
          }
          var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
          var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
          var newNode;
          var nodes = idx1 === idx2 ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] : (newNode = new ValueNode(ownerID, keyHash, entry), idx1 < idx2 ? [node, newNode] : [newNode, node]);
          return new BitmapIndexedNode(ownerID, 1 << idx1 | 1 << idx2, nodes);
        }
        function createNodes(ownerID, entries, key, value2) {
          if (!ownerID) {
            ownerID = new OwnerID();
          }
          var node = new ValueNode(ownerID, hash(key), [key, value2]);
          for (var ii = 0; ii < entries.length; ii++) {
            var entry = entries[ii];
            node = node.update(ownerID, 0, void 0, entry[0], entry[1]);
          }
          return node;
        }
        function packNodes(ownerID, nodes, count, excluding) {
          var bitmap = 0;
          var packedII = 0;
          var packedNodes = new Array(count);
          for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
            var node = nodes[ii];
            if (node !== void 0 && ii !== excluding) {
              bitmap |= bit;
              packedNodes[packedII++] = node;
            }
          }
          return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
        }
        function expandNodes(ownerID, nodes, bitmap, including, node) {
          var count = 0;
          var expandedNodes = new Array(SIZE);
          for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
            expandedNodes[ii] = bitmap & 1 ? nodes[count++] : void 0;
          }
          expandedNodes[including] = node;
          return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
        }
        function mergeIntoMapWith(map2, merger, iterables) {
          var iters = [];
          for (var ii = 0; ii < iterables.length; ii++) {
            var value2 = iterables[ii];
            var iter = KeyedIterable(value2);
            if (!isIterable(value2)) {
              iter = iter.map(function(v) {
                return fromJS(v);
              });
            }
            iters.push(iter);
          }
          return mergeIntoCollectionWith(map2, merger, iters);
        }
        function deepMerger(existing, value2, key) {
          return existing && existing.mergeDeep && isIterable(value2) ? existing.mergeDeep(value2) : is2(existing, value2) ? existing : value2;
        }
        function deepMergerWith(merger) {
          return function(existing, value2, key) {
            if (existing && existing.mergeDeepWith && isIterable(value2)) {
              return existing.mergeDeepWith(merger, value2);
            }
            var nextValue = merger(existing, value2, key);
            return is2(existing, nextValue) ? existing : nextValue;
          };
        }
        function mergeIntoCollectionWith(collection, merger, iters) {
          iters = iters.filter(function(x) {
            return x.size !== 0;
          });
          if (iters.length === 0) {
            return collection;
          }
          if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {
            return collection.constructor(iters[0]);
          }
          return collection.withMutations(function(collection2) {
            var mergeIntoMap = merger ? function(value2, key) {
              collection2.update(
                key,
                NOT_SET,
                function(existing) {
                  return existing === NOT_SET ? value2 : merger(existing, value2, key);
                }
              );
            } : function(value2, key) {
              collection2.set(key, value2);
            };
            for (var ii = 0; ii < iters.length; ii++) {
              iters[ii].forEach(mergeIntoMap);
            }
          });
        }
        function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {
          var isNotSet = existing === NOT_SET;
          var step = keyPathIter.next();
          if (step.done) {
            var existingValue = isNotSet ? notSetValue : existing;
            var newValue = updater(existingValue);
            return newValue === existingValue ? existing : newValue;
          }
          invariant(
            isNotSet || existing && existing.set,
            "invalid keyPath"
          );
          var key = step.value;
          var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);
          var nextUpdated = updateInDeepMap(
            nextExisting,
            keyPathIter,
            notSetValue,
            updater
          );
          return nextUpdated === nextExisting ? existing : nextUpdated === NOT_SET ? existing.remove(key) : (isNotSet ? emptyMap() : existing).set(key, nextUpdated);
        }
        function popCount(x) {
          x = x - (x >> 1 & 1431655765);
          x = (x & 858993459) + (x >> 2 & 858993459);
          x = x + (x >> 4) & 252645135;
          x = x + (x >> 8);
          x = x + (x >> 16);
          return x & 127;
        }
        function setIn(array, idx, val, canEdit) {
          var newArray = canEdit ? array : arrCopy(array);
          newArray[idx] = val;
          return newArray;
        }
        function spliceIn(array, idx, val, canEdit) {
          var newLen = array.length + 1;
          if (canEdit && idx + 1 === newLen) {
            array[idx] = val;
            return array;
          }
          var newArray = new Array(newLen);
          var after = 0;
          for (var ii = 0; ii < newLen; ii++) {
            if (ii === idx) {
              newArray[ii] = val;
              after = -1;
            } else {
              newArray[ii] = array[ii + after];
            }
          }
          return newArray;
        }
        function spliceOut(array, idx, canEdit) {
          var newLen = array.length - 1;
          if (canEdit && idx === newLen) {
            array.pop();
            return array;
          }
          var newArray = new Array(newLen);
          var after = 0;
          for (var ii = 0; ii < newLen; ii++) {
            if (ii === idx) {
              after = 1;
            }
            newArray[ii] = array[ii + after];
          }
          return newArray;
        }
        var MAX_ARRAY_MAP_SIZE = SIZE / 4;
        var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
        var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;
        createClass(List, IndexedCollection);
        function List(value2) {
          var empty = emptyList();
          if (value2 === null || value2 === void 0) {
            return empty;
          }
          if (isList(value2)) {
            return value2;
          }
          var iter = IndexedIterable(value2);
          var size = iter.size;
          if (size === 0) {
            return empty;
          }
          assertNotInfinite(size);
          if (size > 0 && size < SIZE) {
            return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
          }
          return empty.withMutations(function(list) {
            list.setSize(size);
            iter.forEach(function(v, i) {
              return list.set(i, v);
            });
          });
        }
        List.of = function() {
          return this(arguments);
        };
        List.prototype.toString = function() {
          return this.__toString("List [", "]");
        };
        List.prototype.get = function(index, notSetValue) {
          index = wrapIndex(this, index);
          if (index >= 0 && index < this.size) {
            index += this._origin;
            var node = listNodeFor(this, index);
            return node && node.array[index & MASK];
          }
          return notSetValue;
        };
        List.prototype.set = function(index, value2) {
          return updateList(this, index, value2);
        };
        List.prototype.remove = function(index) {
          return !this.has(index) ? this : index === 0 ? this.shift() : index === this.size - 1 ? this.pop() : this.splice(index, 1);
        };
        List.prototype.insert = function(index, value2) {
          return this.splice(index, 0, value2);
        };
        List.prototype.clear = function() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = this._origin = this._capacity = 0;
            this._level = SHIFT;
            this._root = this._tail = null;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return emptyList();
        };
        List.prototype.push = function() {
          var values = arguments;
          var oldSize = this.size;
          return this.withMutations(function(list) {
            setListBounds(list, 0, oldSize + values.length);
            for (var ii = 0; ii < values.length; ii++) {
              list.set(oldSize + ii, values[ii]);
            }
          });
        };
        List.prototype.pop = function() {
          return setListBounds(this, 0, -1);
        };
        List.prototype.unshift = function() {
          var values = arguments;
          return this.withMutations(function(list) {
            setListBounds(list, -values.length);
            for (var ii = 0; ii < values.length; ii++) {
              list.set(ii, values[ii]);
            }
          });
        };
        List.prototype.shift = function() {
          return setListBounds(this, 1);
        };
        List.prototype.merge = function() {
          return mergeIntoListWith(this, void 0, arguments);
        };
        List.prototype.mergeWith = function(merger) {
          var iters = SLICE$0.call(arguments, 1);
          return mergeIntoListWith(this, merger, iters);
        };
        List.prototype.mergeDeep = function() {
          return mergeIntoListWith(this, deepMerger, arguments);
        };
        List.prototype.mergeDeepWith = function(merger) {
          var iters = SLICE$0.call(arguments, 1);
          return mergeIntoListWith(this, deepMergerWith(merger), iters);
        };
        List.prototype.setSize = function(size) {
          return setListBounds(this, 0, size);
        };
        List.prototype.slice = function(begin, end) {
          var size = this.size;
          if (wholeSlice(begin, end, size)) {
            return this;
          }
          return setListBounds(
            this,
            resolveBegin(begin, size),
            resolveEnd(end, size)
          );
        };
        List.prototype.__iterator = function(type, reverse) {
          var index = 0;
          var values = iterateList(this, reverse);
          return new Iterator(function() {
            var value2 = values();
            return value2 === DONE ? iteratorDone() : iteratorValue(type, index++, value2);
          });
        };
        List.prototype.__iterate = function(fn, reverse) {
          var index = 0;
          var values = iterateList(this, reverse);
          var value2;
          while ((value2 = values()) !== DONE) {
            if (fn(value2, index++, this) === false) {
              break;
            }
          }
          return index;
        };
        List.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            this.__ownerID = ownerID;
            return this;
          }
          return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);
        };
        function isList(maybeList) {
          return !!(maybeList && maybeList[IS_LIST_SENTINEL]);
        }
        List.isList = isList;
        var IS_LIST_SENTINEL = "@@__IMMUTABLE_LIST__@@";
        var ListPrototype = List.prototype;
        ListPrototype[IS_LIST_SENTINEL] = true;
        ListPrototype[DELETE] = ListPrototype.remove;
        ListPrototype.setIn = MapPrototype.setIn;
        ListPrototype.deleteIn = ListPrototype.removeIn = MapPrototype.removeIn;
        ListPrototype.update = MapPrototype.update;
        ListPrototype.updateIn = MapPrototype.updateIn;
        ListPrototype.mergeIn = MapPrototype.mergeIn;
        ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
        ListPrototype.withMutations = MapPrototype.withMutations;
        ListPrototype.asMutable = MapPrototype.asMutable;
        ListPrototype.asImmutable = MapPrototype.asImmutable;
        ListPrototype.wasAltered = MapPrototype.wasAltered;
        function VNode(array, ownerID) {
          this.array = array;
          this.ownerID = ownerID;
        }
        VNode.prototype.removeBefore = function(ownerID, level, index) {
          if (index === level ? 1 << level : this.array.length === 0) {
            return this;
          }
          var originIndex = index >>> level & MASK;
          if (originIndex >= this.array.length) {
            return new VNode([], ownerID);
          }
          var removingFirst = originIndex === 0;
          var newChild;
          if (level > 0) {
            var oldChild = this.array[originIndex];
            newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
            if (newChild === oldChild && removingFirst) {
              return this;
            }
          }
          if (removingFirst && !newChild) {
            return this;
          }
          var editable = editableVNode(this, ownerID);
          if (!removingFirst) {
            for (var ii = 0; ii < originIndex; ii++) {
              editable.array[ii] = void 0;
            }
          }
          if (newChild) {
            editable.array[originIndex] = newChild;
          }
          return editable;
        };
        VNode.prototype.removeAfter = function(ownerID, level, index) {
          if (index === (level ? 1 << level : 0) || this.array.length === 0) {
            return this;
          }
          var sizeIndex = index - 1 >>> level & MASK;
          if (sizeIndex >= this.array.length) {
            return this;
          }
          var newChild;
          if (level > 0) {
            var oldChild = this.array[sizeIndex];
            newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
            if (newChild === oldChild && sizeIndex === this.array.length - 1) {
              return this;
            }
          }
          var editable = editableVNode(this, ownerID);
          editable.array.splice(sizeIndex + 1);
          if (newChild) {
            editable.array[sizeIndex] = newChild;
          }
          return editable;
        };
        var DONE = {};
        function iterateList(list, reverse) {
          var left = list._origin;
          var right = list._capacity;
          var tailPos = getTailOffset(right);
          var tail = list._tail;
          return iterateNodeOrLeaf(list._root, list._level, 0);
          function iterateNodeOrLeaf(node, level, offset2) {
            return level === 0 ? iterateLeaf(node, offset2) : iterateNode(node, level, offset2);
          }
          function iterateLeaf(node, offset2) {
            var array = offset2 === tailPos ? tail && tail.array : node && node.array;
            var from2 = offset2 > left ? 0 : left - offset2;
            var to2 = right - offset2;
            if (to2 > SIZE) {
              to2 = SIZE;
            }
            return function() {
              if (from2 === to2) {
                return DONE;
              }
              var idx = reverse ? --to2 : from2++;
              return array && array[idx];
            };
          }
          function iterateNode(node, level, offset2) {
            var values;
            var array = node && node.array;
            var from2 = offset2 > left ? 0 : left - offset2 >> level;
            var to2 = (right - offset2 >> level) + 1;
            if (to2 > SIZE) {
              to2 = SIZE;
            }
            return function() {
              do {
                if (values) {
                  var value2 = values();
                  if (value2 !== DONE) {
                    return value2;
                  }
                  values = null;
                }
                if (from2 === to2) {
                  return DONE;
                }
                var idx = reverse ? --to2 : from2++;
                values = iterateNodeOrLeaf(
                  array && array[idx],
                  level - SHIFT,
                  offset2 + (idx << level)
                );
              } while (true);
            };
          }
        }
        function makeList(origin, capacity, level, root2, tail, ownerID, hash2) {
          var list = Object.create(ListPrototype);
          list.size = capacity - origin;
          list._origin = origin;
          list._capacity = capacity;
          list._level = level;
          list._root = root2;
          list._tail = tail;
          list.__ownerID = ownerID;
          list.__hash = hash2;
          list.__altered = false;
          return list;
        }
        var EMPTY_LIST;
        function emptyList() {
          return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
        }
        function updateList(list, index, value2) {
          index = wrapIndex(list, index);
          if (index !== index) {
            return list;
          }
          if (index >= list.size || index < 0) {
            return list.withMutations(function(list2) {
              index < 0 ? setListBounds(list2, index).set(0, value2) : setListBounds(list2, 0, index + 1).set(index, value2);
            });
          }
          index += list._origin;
          var newTail = list._tail;
          var newRoot = list._root;
          var didAlter = MakeRef(DID_ALTER);
          if (index >= getTailOffset(list._capacity)) {
            newTail = updateVNode(newTail, list.__ownerID, 0, index, value2, didAlter);
          } else {
            newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value2, didAlter);
          }
          if (!didAlter.value) {
            return list;
          }
          if (list.__ownerID) {
            list._root = newRoot;
            list._tail = newTail;
            list.__hash = void 0;
            list.__altered = true;
            return list;
          }
          return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
        }
        function updateVNode(node, ownerID, level, index, value2, didAlter) {
          var idx = index >>> level & MASK;
          var nodeHas = node && idx < node.array.length;
          if (!nodeHas && value2 === void 0) {
            return node;
          }
          var newNode;
          if (level > 0) {
            var lowerNode = node && node.array[idx];
            var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value2, didAlter);
            if (newLowerNode === lowerNode) {
              return node;
            }
            newNode = editableVNode(node, ownerID);
            newNode.array[idx] = newLowerNode;
            return newNode;
          }
          if (nodeHas && node.array[idx] === value2) {
            return node;
          }
          SetRef(didAlter);
          newNode = editableVNode(node, ownerID);
          if (value2 === void 0 && idx === newNode.array.length - 1) {
            newNode.array.pop();
          } else {
            newNode.array[idx] = value2;
          }
          return newNode;
        }
        function editableVNode(node, ownerID) {
          if (ownerID && node && ownerID === node.ownerID) {
            return node;
          }
          return new VNode(node ? node.array.slice() : [], ownerID);
        }
        function listNodeFor(list, rawIndex) {
          if (rawIndex >= getTailOffset(list._capacity)) {
            return list._tail;
          }
          if (rawIndex < 1 << list._level + SHIFT) {
            var node = list._root;
            var level = list._level;
            while (node && level > 0) {
              node = node.array[rawIndex >>> level & MASK];
              level -= SHIFT;
            }
            return node;
          }
        }
        function setListBounds(list, begin, end) {
          if (begin !== void 0) {
            begin = begin | 0;
          }
          if (end !== void 0) {
            end = end | 0;
          }
          var owner = list.__ownerID || new OwnerID();
          var oldOrigin = list._origin;
          var oldCapacity = list._capacity;
          var newOrigin = oldOrigin + begin;
          var newCapacity = end === void 0 ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
          if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
            return list;
          }
          if (newOrigin >= newCapacity) {
            return list.clear();
          }
          var newLevel = list._level;
          var newRoot = list._root;
          var offsetShift = 0;
          while (newOrigin + offsetShift < 0) {
            newRoot = new VNode(newRoot && newRoot.array.length ? [void 0, newRoot] : [], owner);
            newLevel += SHIFT;
            offsetShift += 1 << newLevel;
          }
          if (offsetShift) {
            newOrigin += offsetShift;
            oldOrigin += offsetShift;
            newCapacity += offsetShift;
            oldCapacity += offsetShift;
          }
          var oldTailOffset = getTailOffset(oldCapacity);
          var newTailOffset = getTailOffset(newCapacity);
          while (newTailOffset >= 1 << newLevel + SHIFT) {
            newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);
            newLevel += SHIFT;
          }
          var oldTail = list._tail;
          var newTail = newTailOffset < oldTailOffset ? listNodeFor(list, newCapacity - 1) : newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;
          if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
            newRoot = editableVNode(newRoot, owner);
            var node = newRoot;
            for (var level = newLevel; level > SHIFT; level -= SHIFT) {
              var idx = oldTailOffset >>> level & MASK;
              node = node.array[idx] = editableVNode(node.array[idx], owner);
            }
            node.array[oldTailOffset >>> SHIFT & MASK] = oldTail;
          }
          if (newCapacity < oldCapacity) {
            newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
          }
          if (newOrigin >= newTailOffset) {
            newOrigin -= newTailOffset;
            newCapacity -= newTailOffset;
            newLevel = SHIFT;
            newRoot = null;
            newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);
          } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
            offsetShift = 0;
            while (newRoot) {
              var beginIndex = newOrigin >>> newLevel & MASK;
              if (beginIndex !== newTailOffset >>> newLevel & MASK) {
                break;
              }
              if (beginIndex) {
                offsetShift += (1 << newLevel) * beginIndex;
              }
              newLevel -= SHIFT;
              newRoot = newRoot.array[beginIndex];
            }
            if (newRoot && newOrigin > oldOrigin) {
              newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
            }
            if (newRoot && newTailOffset < oldTailOffset) {
              newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);
            }
            if (offsetShift) {
              newOrigin -= offsetShift;
              newCapacity -= offsetShift;
            }
          }
          if (list.__ownerID) {
            list.size = newCapacity - newOrigin;
            list._origin = newOrigin;
            list._capacity = newCapacity;
            list._level = newLevel;
            list._root = newRoot;
            list._tail = newTail;
            list.__hash = void 0;
            list.__altered = true;
            return list;
          }
          return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
        }
        function mergeIntoListWith(list, merger, iterables) {
          var iters = [];
          var maxSize = 0;
          for (var ii = 0; ii < iterables.length; ii++) {
            var value2 = iterables[ii];
            var iter = IndexedIterable(value2);
            if (iter.size > maxSize) {
              maxSize = iter.size;
            }
            if (!isIterable(value2)) {
              iter = iter.map(function(v) {
                return fromJS(v);
              });
            }
            iters.push(iter);
          }
          if (maxSize > list.size) {
            list = list.setSize(maxSize);
          }
          return mergeIntoCollectionWith(list, merger, iters);
        }
        function getTailOffset(size) {
          return size < SIZE ? 0 : size - 1 >>> SHIFT << SHIFT;
        }
        createClass(OrderedMap, Map2);
        function OrderedMap(value2) {
          return value2 === null || value2 === void 0 ? emptyOrderedMap() : isOrderedMap(value2) ? value2 : emptyOrderedMap().withMutations(function(map2) {
            var iter = KeyedIterable(value2);
            assertNotInfinite(iter.size);
            iter.forEach(function(v, k) {
              return map2.set(k, v);
            });
          });
        }
        OrderedMap.of = function() {
          return this(arguments);
        };
        OrderedMap.prototype.toString = function() {
          return this.__toString("OrderedMap {", "}");
        };
        OrderedMap.prototype.get = function(k, notSetValue) {
          var index = this._map.get(k);
          return index !== void 0 ? this._list.get(index)[1] : notSetValue;
        };
        OrderedMap.prototype.clear = function() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._map.clear();
            this._list.clear();
            return this;
          }
          return emptyOrderedMap();
        };
        OrderedMap.prototype.set = function(k, v) {
          return updateOrderedMap(this, k, v);
        };
        OrderedMap.prototype.remove = function(k) {
          return updateOrderedMap(this, k, NOT_SET);
        };
        OrderedMap.prototype.wasAltered = function() {
          return this._map.wasAltered() || this._list.wasAltered();
        };
        OrderedMap.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          return this._list.__iterate(
            function(entry) {
              return entry && fn(entry[1], entry[0], this$0);
            },
            reverse
          );
        };
        OrderedMap.prototype.__iterator = function(type, reverse) {
          return this._list.fromEntrySeq().__iterator(type, reverse);
        };
        OrderedMap.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          var newMap = this._map.__ensureOwner(ownerID);
          var newList = this._list.__ensureOwner(ownerID);
          if (!ownerID) {
            this.__ownerID = ownerID;
            this._map = newMap;
            this._list = newList;
            return this;
          }
          return makeOrderedMap(newMap, newList, ownerID, this.__hash);
        };
        function isOrderedMap(maybeOrderedMap) {
          return isMap2(maybeOrderedMap) && isOrdered(maybeOrderedMap);
        }
        OrderedMap.isOrderedMap = isOrderedMap;
        OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;
        OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;
        function makeOrderedMap(map2, list, ownerID, hash2) {
          var omap = Object.create(OrderedMap.prototype);
          omap.size = map2 ? map2.size : 0;
          omap._map = map2;
          omap._list = list;
          omap.__ownerID = ownerID;
          omap.__hash = hash2;
          return omap;
        }
        var EMPTY_ORDERED_MAP;
        function emptyOrderedMap() {
          return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
        }
        function updateOrderedMap(omap, k, v) {
          var map2 = omap._map;
          var list = omap._list;
          var i = map2.get(k);
          var has2 = i !== void 0;
          var newMap;
          var newList;
          if (v === NOT_SET) {
            if (!has2) {
              return omap;
            }
            if (list.size >= SIZE && list.size >= map2.size * 2) {
              newList = list.filter(function(entry, idx) {
                return entry !== void 0 && i !== idx;
              });
              newMap = newList.toKeyedSeq().map(function(entry) {
                return entry[0];
              }).flip().toMap();
              if (omap.__ownerID) {
                newMap.__ownerID = newList.__ownerID = omap.__ownerID;
              }
            } else {
              newMap = map2.remove(k);
              newList = i === list.size - 1 ? list.pop() : list.set(i, void 0);
            }
          } else {
            if (has2) {
              if (v === list.get(i)[1]) {
                return omap;
              }
              newMap = map2;
              newList = list.set(i, [k, v]);
            } else {
              newMap = map2.set(k, list.size);
              newList = list.set(list.size, [k, v]);
            }
          }
          if (omap.__ownerID) {
            omap.size = newMap.size;
            omap._map = newMap;
            omap._list = newList;
            omap.__hash = void 0;
            return omap;
          }
          return makeOrderedMap(newMap, newList);
        }
        createClass(ToKeyedSequence, KeyedSeq);
        function ToKeyedSequence(indexed, useKeys) {
          this._iter = indexed;
          this._useKeys = useKeys;
          this.size = indexed.size;
        }
        ToKeyedSequence.prototype.get = function(key, notSetValue) {
          return this._iter.get(key, notSetValue);
        };
        ToKeyedSequence.prototype.has = function(key) {
          return this._iter.has(key);
        };
        ToKeyedSequence.prototype.valueSeq = function() {
          return this._iter.valueSeq();
        };
        ToKeyedSequence.prototype.reverse = function() {
          var this$0 = this;
          var reversedSequence = reverseFactory(this, true);
          if (!this._useKeys) {
            reversedSequence.valueSeq = function() {
              return this$0._iter.toSeq().reverse();
            };
          }
          return reversedSequence;
        };
        ToKeyedSequence.prototype.map = function(mapper, context2) {
          var this$0 = this;
          var mappedSequence = mapFactory(this, mapper, context2);
          if (!this._useKeys) {
            mappedSequence.valueSeq = function() {
              return this$0._iter.toSeq().map(mapper, context2);
            };
          }
          return mappedSequence;
        };
        ToKeyedSequence.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          var ii;
          return this._iter.__iterate(
            this._useKeys ? function(v, k) {
              return fn(v, k, this$0);
            } : (ii = reverse ? resolveSize(this) : 0, function(v) {
              return fn(v, reverse ? --ii : ii++, this$0);
            }),
            reverse
          );
        };
        ToKeyedSequence.prototype.__iterator = function(type, reverse) {
          if (this._useKeys) {
            return this._iter.__iterator(type, reverse);
          }
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          var ii = reverse ? resolveSize(this) : 0;
          return new Iterator(function() {
            var step = iterator.next();
            return step.done ? step : iteratorValue(type, reverse ? --ii : ii++, step.value, step);
          });
        };
        ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;
        createClass(ToIndexedSequence, IndexedSeq);
        function ToIndexedSequence(iter) {
          this._iter = iter;
          this.size = iter.size;
        }
        ToIndexedSequence.prototype.includes = function(value2) {
          return this._iter.includes(value2);
        };
        ToIndexedSequence.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          var iterations = 0;
          return this._iter.__iterate(function(v) {
            return fn(v, iterations++, this$0);
          }, reverse);
        };
        ToIndexedSequence.prototype.__iterator = function(type, reverse) {
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          var iterations = 0;
          return new Iterator(function() {
            var step = iterator.next();
            return step.done ? step : iteratorValue(type, iterations++, step.value, step);
          });
        };
        createClass(ToSetSequence, SetSeq);
        function ToSetSequence(iter) {
          this._iter = iter;
          this.size = iter.size;
        }
        ToSetSequence.prototype.has = function(key) {
          return this._iter.includes(key);
        };
        ToSetSequence.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          return this._iter.__iterate(function(v) {
            return fn(v, v, this$0);
          }, reverse);
        };
        ToSetSequence.prototype.__iterator = function(type, reverse) {
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          return new Iterator(function() {
            var step = iterator.next();
            return step.done ? step : iteratorValue(type, step.value, step.value, step);
          });
        };
        createClass(FromEntriesSequence, KeyedSeq);
        function FromEntriesSequence(entries) {
          this._iter = entries;
          this.size = entries.size;
        }
        FromEntriesSequence.prototype.entrySeq = function() {
          return this._iter.toSeq();
        };
        FromEntriesSequence.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          return this._iter.__iterate(function(entry) {
            if (entry) {
              validateEntry(entry);
              var indexedIterable = isIterable(entry);
              return fn(
                indexedIterable ? entry.get(1) : entry[1],
                indexedIterable ? entry.get(0) : entry[0],
                this$0
              );
            }
          }, reverse);
        };
        FromEntriesSequence.prototype.__iterator = function(type, reverse) {
          var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
          return new Iterator(function() {
            while (true) {
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              var entry = step.value;
              if (entry) {
                validateEntry(entry);
                var indexedIterable = isIterable(entry);
                return iteratorValue(
                  type,
                  indexedIterable ? entry.get(0) : entry[0],
                  indexedIterable ? entry.get(1) : entry[1],
                  step
                );
              }
            }
          });
        };
        ToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;
        function flipFactory(iterable) {
          var flipSequence = makeSequence(iterable);
          flipSequence._iter = iterable;
          flipSequence.size = iterable.size;
          flipSequence.flip = function() {
            return iterable;
          };
          flipSequence.reverse = function() {
            var reversedSequence = iterable.reverse.apply(this);
            reversedSequence.flip = function() {
              return iterable.reverse();
            };
            return reversedSequence;
          };
          flipSequence.has = function(key) {
            return iterable.includes(key);
          };
          flipSequence.includes = function(key) {
            return iterable.has(key);
          };
          flipSequence.cacheResult = cacheResultThrough;
          flipSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            return iterable.__iterate(function(v, k) {
              return fn(k, v, this$0) !== false;
            }, reverse);
          };
          flipSequence.__iteratorUncached = function(type, reverse) {
            if (type === ITERATE_ENTRIES) {
              var iterator = iterable.__iterator(type, reverse);
              return new Iterator(function() {
                var step = iterator.next();
                if (!step.done) {
                  var k = step.value[0];
                  step.value[0] = step.value[1];
                  step.value[1] = k;
                }
                return step;
              });
            }
            return iterable.__iterator(
              type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
              reverse
            );
          };
          return flipSequence;
        }
        function mapFactory(iterable, mapper, context2) {
          var mappedSequence = makeSequence(iterable);
          mappedSequence.size = iterable.size;
          mappedSequence.has = function(key) {
            return iterable.has(key);
          };
          mappedSequence.get = function(key, notSetValue) {
            var v = iterable.get(key, NOT_SET);
            return v === NOT_SET ? notSetValue : mapper.call(context2, v, key, iterable);
          };
          mappedSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            return iterable.__iterate(
              function(v, k, c) {
                return fn(mapper.call(context2, v, k, c), k, this$0) !== false;
              },
              reverse
            );
          };
          mappedSequence.__iteratorUncached = function(type, reverse) {
            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
            return new Iterator(function() {
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              var entry = step.value;
              var key = entry[0];
              return iteratorValue(
                type,
                key,
                mapper.call(context2, entry[1], key, iterable),
                step
              );
            });
          };
          return mappedSequence;
        }
        function reverseFactory(iterable, useKeys) {
          var reversedSequence = makeSequence(iterable);
          reversedSequence._iter = iterable;
          reversedSequence.size = iterable.size;
          reversedSequence.reverse = function() {
            return iterable;
          };
          if (iterable.flip) {
            reversedSequence.flip = function() {
              var flipSequence = flipFactory(iterable);
              flipSequence.reverse = function() {
                return iterable.flip();
              };
              return flipSequence;
            };
          }
          reversedSequence.get = function(key, notSetValue) {
            return iterable.get(useKeys ? key : -1 - key, notSetValue);
          };
          reversedSequence.has = function(key) {
            return iterable.has(useKeys ? key : -1 - key);
          };
          reversedSequence.includes = function(value2) {
            return iterable.includes(value2);
          };
          reversedSequence.cacheResult = cacheResultThrough;
          reversedSequence.__iterate = function(fn, reverse) {
            var this$0 = this;
            return iterable.__iterate(function(v, k) {
              return fn(v, k, this$0);
            }, !reverse);
          };
          reversedSequence.__iterator = function(type, reverse) {
            return iterable.__iterator(type, !reverse);
          };
          return reversedSequence;
        }
        function filterFactory(iterable, predicate, context2, useKeys) {
          var filterSequence = makeSequence(iterable);
          if (useKeys) {
            filterSequence.has = function(key) {
              var v = iterable.get(key, NOT_SET);
              return v !== NOT_SET && !!predicate.call(context2, v, key, iterable);
            };
            filterSequence.get = function(key, notSetValue) {
              var v = iterable.get(key, NOT_SET);
              return v !== NOT_SET && predicate.call(context2, v, key, iterable) ? v : notSetValue;
            };
          }
          filterSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            var iterations = 0;
            iterable.__iterate(function(v, k, c) {
              if (predicate.call(context2, v, k, c)) {
                iterations++;
                return fn(v, useKeys ? k : iterations - 1, this$0);
              }
            }, reverse);
            return iterations;
          };
          filterSequence.__iteratorUncached = function(type, reverse) {
            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
            var iterations = 0;
            return new Iterator(function() {
              while (true) {
                var step = iterator.next();
                if (step.done) {
                  return step;
                }
                var entry = step.value;
                var key = entry[0];
                var value2 = entry[1];
                if (predicate.call(context2, value2, key, iterable)) {
                  return iteratorValue(type, useKeys ? key : iterations++, value2, step);
                }
              }
            });
          };
          return filterSequence;
        }
        function countByFactory(iterable, grouper, context2) {
          var groups = Map2().asMutable();
          iterable.__iterate(function(v, k) {
            groups.update(
              grouper.call(context2, v, k, iterable),
              0,
              function(a) {
                return a + 1;
              }
            );
          });
          return groups.asImmutable();
        }
        function groupByFactory(iterable, grouper, context2) {
          var isKeyedIter = isKeyed(iterable);
          var groups = (isOrdered(iterable) ? OrderedMap() : Map2()).asMutable();
          iterable.__iterate(function(v, k) {
            groups.update(
              grouper.call(context2, v, k, iterable),
              function(a) {
                return a = a || [], a.push(isKeyedIter ? [k, v] : v), a;
              }
            );
          });
          var coerce = iterableClass(iterable);
          return groups.map(function(arr) {
            return reify(iterable, coerce(arr));
          });
        }
        function sliceFactory(iterable, begin, end, useKeys) {
          var originalSize = iterable.size;
          if (begin !== void 0) {
            begin = begin | 0;
          }
          if (end !== void 0) {
            if (end === Infinity) {
              end = originalSize;
            } else {
              end = end | 0;
            }
          }
          if (wholeSlice(begin, end, originalSize)) {
            return iterable;
          }
          var resolvedBegin = resolveBegin(begin, originalSize);
          var resolvedEnd = resolveEnd(end, originalSize);
          if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
            return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);
          }
          var resolvedSize = resolvedEnd - resolvedBegin;
          var sliceSize;
          if (resolvedSize === resolvedSize) {
            sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
          }
          var sliceSeq = makeSequence(iterable);
          sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || void 0;
          if (!useKeys && isSeq(iterable) && sliceSize >= 0) {
            sliceSeq.get = function(index, notSetValue) {
              index = wrapIndex(this, index);
              return index >= 0 && index < sliceSize ? iterable.get(index + resolvedBegin, notSetValue) : notSetValue;
            };
          }
          sliceSeq.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            if (sliceSize === 0) {
              return 0;
            }
            if (reverse) {
              return this.cacheResult().__iterate(fn, reverse);
            }
            var skipped = 0;
            var isSkipping = true;
            var iterations = 0;
            iterable.__iterate(function(v, k) {
              if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
                iterations++;
                return fn(v, useKeys ? k : iterations - 1, this$0) !== false && iterations !== sliceSize;
              }
            });
            return iterations;
          };
          sliceSeq.__iteratorUncached = function(type, reverse) {
            if (sliceSize !== 0 && reverse) {
              return this.cacheResult().__iterator(type, reverse);
            }
            var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);
            var skipped = 0;
            var iterations = 0;
            return new Iterator(function() {
              while (skipped++ < resolvedBegin) {
                iterator.next();
              }
              if (++iterations > sliceSize) {
                return iteratorDone();
              }
              var step = iterator.next();
              if (useKeys || type === ITERATE_VALUES) {
                return step;
              } else if (type === ITERATE_KEYS) {
                return iteratorValue(type, iterations - 1, void 0, step);
              } else {
                return iteratorValue(type, iterations - 1, step.value[1], step);
              }
            });
          };
          return sliceSeq;
        }
        function takeWhileFactory(iterable, predicate, context2) {
          var takeSequence = makeSequence(iterable);
          takeSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            if (reverse) {
              return this.cacheResult().__iterate(fn, reverse);
            }
            var iterations = 0;
            iterable.__iterate(
              function(v, k, c) {
                return predicate.call(context2, v, k, c) && ++iterations && fn(v, k, this$0);
              }
            );
            return iterations;
          };
          takeSequence.__iteratorUncached = function(type, reverse) {
            var this$0 = this;
            if (reverse) {
              return this.cacheResult().__iterator(type, reverse);
            }
            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
            var iterating = true;
            return new Iterator(function() {
              if (!iterating) {
                return iteratorDone();
              }
              var step = iterator.next();
              if (step.done) {
                return step;
              }
              var entry = step.value;
              var k = entry[0];
              var v = entry[1];
              if (!predicate.call(context2, v, k, this$0)) {
                iterating = false;
                return iteratorDone();
              }
              return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
            });
          };
          return takeSequence;
        }
        function skipWhileFactory(iterable, predicate, context2, useKeys) {
          var skipSequence = makeSequence(iterable);
          skipSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            if (reverse) {
              return this.cacheResult().__iterate(fn, reverse);
            }
            var isSkipping = true;
            var iterations = 0;
            iterable.__iterate(function(v, k, c) {
              if (!(isSkipping && (isSkipping = predicate.call(context2, v, k, c)))) {
                iterations++;
                return fn(v, useKeys ? k : iterations - 1, this$0);
              }
            });
            return iterations;
          };
          skipSequence.__iteratorUncached = function(type, reverse) {
            var this$0 = this;
            if (reverse) {
              return this.cacheResult().__iterator(type, reverse);
            }
            var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
            var skipping = true;
            var iterations = 0;
            return new Iterator(function() {
              var step, k, v;
              do {
                step = iterator.next();
                if (step.done) {
                  if (useKeys || type === ITERATE_VALUES) {
                    return step;
                  } else if (type === ITERATE_KEYS) {
                    return iteratorValue(type, iterations++, void 0, step);
                  } else {
                    return iteratorValue(type, iterations++, step.value[1], step);
                  }
                }
                var entry = step.value;
                k = entry[0];
                v = entry[1];
                skipping && (skipping = predicate.call(context2, v, k, this$0));
              } while (skipping);
              return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
            });
          };
          return skipSequence;
        }
        function concatFactory(iterable, values) {
          var isKeyedIterable = isKeyed(iterable);
          var iters = [iterable].concat(values).map(function(v) {
            if (!isIterable(v)) {
              v = isKeyedIterable ? keyedSeqFromValue(v) : indexedSeqFromValue(Array.isArray(v) ? v : [v]);
            } else if (isKeyedIterable) {
              v = KeyedIterable(v);
            }
            return v;
          }).filter(function(v) {
            return v.size !== 0;
          });
          if (iters.length === 0) {
            return iterable;
          }
          if (iters.length === 1) {
            var singleton = iters[0];
            if (singleton === iterable || isKeyedIterable && isKeyed(singleton) || isIndexed(iterable) && isIndexed(singleton)) {
              return singleton;
            }
          }
          var concatSeq = new ArraySeq(iters);
          if (isKeyedIterable) {
            concatSeq = concatSeq.toKeyedSeq();
          } else if (!isIndexed(iterable)) {
            concatSeq = concatSeq.toSetSeq();
          }
          concatSeq = concatSeq.flatten(true);
          concatSeq.size = iters.reduce(
            function(sum, seq) {
              if (sum !== void 0) {
                var size = seq.size;
                if (size !== void 0) {
                  return sum + size;
                }
              }
            },
            0
          );
          return concatSeq;
        }
        function flattenFactory(iterable, depth, useKeys) {
          var flatSequence = makeSequence(iterable);
          flatSequence.__iterateUncached = function(fn, reverse) {
            var iterations = 0;
            var stopped = false;
            function flatDeep(iter, currentDepth) {
              var this$0 = this;
              iter.__iterate(function(v, k) {
                if ((!depth || currentDepth < depth) && isIterable(v)) {
                  flatDeep(v, currentDepth + 1);
                } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {
                  stopped = true;
                }
                return !stopped;
              }, reverse);
            }
            flatDeep(iterable, 0);
            return iterations;
          };
          flatSequence.__iteratorUncached = function(type, reverse) {
            var iterator = iterable.__iterator(type, reverse);
            var stack = [];
            var iterations = 0;
            return new Iterator(function() {
              while (iterator) {
                var step = iterator.next();
                if (step.done !== false) {
                  iterator = stack.pop();
                  continue;
                }
                var v = step.value;
                if (type === ITERATE_ENTRIES) {
                  v = v[1];
                }
                if ((!depth || stack.length < depth) && isIterable(v)) {
                  stack.push(iterator);
                  iterator = v.__iterator(type, reverse);
                } else {
                  return useKeys ? step : iteratorValue(type, iterations++, v, step);
                }
              }
              return iteratorDone();
            });
          };
          return flatSequence;
        }
        function flatMapFactory(iterable, mapper, context2) {
          var coerce = iterableClass(iterable);
          return iterable.toSeq().map(
            function(v, k) {
              return coerce(mapper.call(context2, v, k, iterable));
            }
          ).flatten(true);
        }
        function interposeFactory(iterable, separator) {
          var interposedSequence = makeSequence(iterable);
          interposedSequence.size = iterable.size && iterable.size * 2 - 1;
          interposedSequence.__iterateUncached = function(fn, reverse) {
            var this$0 = this;
            var iterations = 0;
            iterable.__iterate(
              function(v, k) {
                return (!iterations || fn(separator, iterations++, this$0) !== false) && fn(v, iterations++, this$0) !== false;
              },
              reverse
            );
            return iterations;
          };
          interposedSequence.__iteratorUncached = function(type, reverse) {
            var iterator = iterable.__iterator(ITERATE_VALUES, reverse);
            var iterations = 0;
            var step;
            return new Iterator(function() {
              if (!step || iterations % 2) {
                step = iterator.next();
                if (step.done) {
                  return step;
                }
              }
              return iterations % 2 ? iteratorValue(type, iterations++, separator) : iteratorValue(type, iterations++, step.value, step);
            });
          };
          return interposedSequence;
        }
        function sortFactory(iterable, comparator, mapper) {
          if (!comparator) {
            comparator = defaultComparator;
          }
          var isKeyedIterable = isKeyed(iterable);
          var index = 0;
          var entries = iterable.toSeq().map(
            function(v, k) {
              return [k, v, index++, mapper ? mapper(v, k, iterable) : v];
            }
          ).toArray();
          entries.sort(function(a, b) {
            return comparator(a[3], b[3]) || a[2] - b[2];
          }).forEach(
            isKeyedIterable ? function(v, i) {
              entries[i].length = 2;
            } : function(v, i) {
              entries[i] = v[1];
            }
          );
          return isKeyedIterable ? KeyedSeq(entries) : isIndexed(iterable) ? IndexedSeq(entries) : SetSeq(entries);
        }
        function maxFactory(iterable, comparator, mapper) {
          if (!comparator) {
            comparator = defaultComparator;
          }
          if (mapper) {
            var entry = iterable.toSeq().map(function(v, k) {
              return [v, mapper(v, k, iterable)];
            }).reduce(function(a, b) {
              return maxCompare(comparator, a[1], b[1]) ? b : a;
            });
            return entry && entry[0];
          } else {
            return iterable.reduce(function(a, b) {
              return maxCompare(comparator, a, b) ? b : a;
            });
          }
        }
        function maxCompare(comparator, a, b) {
          var comp = comparator(b, a);
          return comp === 0 && b !== a && (b === void 0 || b === null || b !== b) || comp > 0;
        }
        function zipWithFactory(keyIter, zipper, iters) {
          var zipSequence = makeSequence(keyIter);
          zipSequence.size = new ArraySeq(iters).map(function(i) {
            return i.size;
          }).min();
          zipSequence.__iterate = function(fn, reverse) {
            var iterator = this.__iterator(ITERATE_VALUES, reverse);
            var step;
            var iterations = 0;
            while (!(step = iterator.next()).done) {
              if (fn(step.value, iterations++, this) === false) {
                break;
              }
            }
            return iterations;
          };
          zipSequence.__iteratorUncached = function(type, reverse) {
            var iterators = iters.map(
              function(i) {
                return i = Iterable(i), getIterator(reverse ? i.reverse() : i);
              }
            );
            var iterations = 0;
            var isDone = false;
            return new Iterator(function() {
              var steps;
              if (!isDone) {
                steps = iterators.map(function(i) {
                  return i.next();
                });
                isDone = steps.some(function(s) {
                  return s.done;
                });
              }
              if (isDone) {
                return iteratorDone();
              }
              return iteratorValue(
                type,
                iterations++,
                zipper.apply(null, steps.map(function(s) {
                  return s.value;
                }))
              );
            });
          };
          return zipSequence;
        }
        function reify(iter, seq) {
          return isSeq(iter) ? seq : iter.constructor(seq);
        }
        function validateEntry(entry) {
          if (entry !== Object(entry)) {
            throw new TypeError("Expected [K, V] tuple: " + entry);
          }
        }
        function resolveSize(iter) {
          assertNotInfinite(iter.size);
          return ensureSize(iter);
        }
        function iterableClass(iterable) {
          return isKeyed(iterable) ? KeyedIterable : isIndexed(iterable) ? IndexedIterable : SetIterable;
        }
        function makeSequence(iterable) {
          return Object.create(
            (isKeyed(iterable) ? KeyedSeq : isIndexed(iterable) ? IndexedSeq : SetSeq).prototype
          );
        }
        function cacheResultThrough() {
          if (this._iter.cacheResult) {
            this._iter.cacheResult();
            this.size = this._iter.size;
            return this;
          } else {
            return Seq.prototype.cacheResult.call(this);
          }
        }
        function defaultComparator(a, b) {
          return a > b ? 1 : a < b ? -1 : 0;
        }
        function forceIterator(keyPath) {
          var iter = getIterator(keyPath);
          if (!iter) {
            if (!isArrayLike2(keyPath)) {
              throw new TypeError("Expected iterable or array-like: " + keyPath);
            }
            iter = getIterator(Iterable(keyPath));
          }
          return iter;
        }
        createClass(Record, KeyedCollection);
        function Record(defaultValues, name) {
          var hasInitialized;
          var RecordType = function Record2(values) {
            if (values instanceof RecordType) {
              return values;
            }
            if (!(this instanceof RecordType)) {
              return new RecordType(values);
            }
            if (!hasInitialized) {
              hasInitialized = true;
              var keys2 = Object.keys(defaultValues);
              setProps(RecordTypePrototype, keys2);
              RecordTypePrototype.size = keys2.length;
              RecordTypePrototype._name = name;
              RecordTypePrototype._keys = keys2;
              RecordTypePrototype._defaultValues = defaultValues;
            }
            this._map = Map2(values);
          };
          var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
          RecordTypePrototype.constructor = RecordType;
          return RecordType;
        }
        Record.prototype.toString = function() {
          return this.__toString(recordName(this) + " {", "}");
        };
        Record.prototype.has = function(k) {
          return this._defaultValues.hasOwnProperty(k);
        };
        Record.prototype.get = function(k, notSetValue) {
          if (!this.has(k)) {
            return notSetValue;
          }
          var defaultVal = this._defaultValues[k];
          return this._map ? this._map.get(k, defaultVal) : defaultVal;
        };
        Record.prototype.clear = function() {
          if (this.__ownerID) {
            this._map && this._map.clear();
            return this;
          }
          var RecordType = this.constructor;
          return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));
        };
        Record.prototype.set = function(k, v) {
          if (!this.has(k)) {
            throw new Error('Cannot set unknown key "' + k + '" on ' + recordName(this));
          }
          if (this._map && !this._map.has(k)) {
            var defaultVal = this._defaultValues[k];
            if (v === defaultVal) {
              return this;
            }
          }
          var newMap = this._map && this._map.set(k, v);
          if (this.__ownerID || newMap === this._map) {
            return this;
          }
          return makeRecord(this, newMap);
        };
        Record.prototype.remove = function(k) {
          if (!this.has(k)) {
            return this;
          }
          var newMap = this._map && this._map.remove(k);
          if (this.__ownerID || newMap === this._map) {
            return this;
          }
          return makeRecord(this, newMap);
        };
        Record.prototype.wasAltered = function() {
          return this._map.wasAltered();
        };
        Record.prototype.__iterator = function(type, reverse) {
          var this$0 = this;
          return KeyedIterable(this._defaultValues).map(function(_, k) {
            return this$0.get(k);
          }).__iterator(type, reverse);
        };
        Record.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          return KeyedIterable(this._defaultValues).map(function(_, k) {
            return this$0.get(k);
          }).__iterate(fn, reverse);
        };
        Record.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          var newMap = this._map && this._map.__ensureOwner(ownerID);
          if (!ownerID) {
            this.__ownerID = ownerID;
            this._map = newMap;
            return this;
          }
          return makeRecord(this, newMap, ownerID);
        };
        var RecordPrototype = Record.prototype;
        RecordPrototype[DELETE] = RecordPrototype.remove;
        RecordPrototype.deleteIn = RecordPrototype.removeIn = MapPrototype.removeIn;
        RecordPrototype.merge = MapPrototype.merge;
        RecordPrototype.mergeWith = MapPrototype.mergeWith;
        RecordPrototype.mergeIn = MapPrototype.mergeIn;
        RecordPrototype.mergeDeep = MapPrototype.mergeDeep;
        RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;
        RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
        RecordPrototype.setIn = MapPrototype.setIn;
        RecordPrototype.update = MapPrototype.update;
        RecordPrototype.updateIn = MapPrototype.updateIn;
        RecordPrototype.withMutations = MapPrototype.withMutations;
        RecordPrototype.asMutable = MapPrototype.asMutable;
        RecordPrototype.asImmutable = MapPrototype.asImmutable;
        function makeRecord(likeRecord, map2, ownerID) {
          var record = Object.create(Object.getPrototypeOf(likeRecord));
          record._map = map2;
          record.__ownerID = ownerID;
          return record;
        }
        function recordName(record) {
          return record._name || record.constructor.name || "Record";
        }
        function setProps(prototype, names) {
          try {
            names.forEach(setProp.bind(void 0, prototype));
          } catch (error) {
          }
        }
        function setProp(prototype, name) {
          Object.defineProperty(prototype, name, {
            get: function() {
              return this.get(name);
            },
            set: function(value2) {
              invariant(this.__ownerID, "Cannot set on an immutable record.");
              this.set(name, value2);
            }
          });
        }
        createClass(Set2, SetCollection);
        function Set2(value2) {
          return value2 === null || value2 === void 0 ? emptySet() : isSet2(value2) && !isOrdered(value2) ? value2 : emptySet().withMutations(function(set2) {
            var iter = SetIterable(value2);
            assertNotInfinite(iter.size);
            iter.forEach(function(v) {
              return set2.add(v);
            });
          });
        }
        Set2.of = function() {
          return this(arguments);
        };
        Set2.fromKeys = function(value2) {
          return this(KeyedIterable(value2).keySeq());
        };
        Set2.prototype.toString = function() {
          return this.__toString("Set {", "}");
        };
        Set2.prototype.has = function(value2) {
          return this._map.has(value2);
        };
        Set2.prototype.add = function(value2) {
          return updateSet(this, this._map.set(value2, true));
        };
        Set2.prototype.remove = function(value2) {
          return updateSet(this, this._map.remove(value2));
        };
        Set2.prototype.clear = function() {
          return updateSet(this, this._map.clear());
        };
        Set2.prototype.union = function() {
          var iters = SLICE$0.call(arguments, 0);
          iters = iters.filter(function(x) {
            return x.size !== 0;
          });
          if (iters.length === 0) {
            return this;
          }
          if (this.size === 0 && !this.__ownerID && iters.length === 1) {
            return this.constructor(iters[0]);
          }
          return this.withMutations(function(set2) {
            for (var ii = 0; ii < iters.length; ii++) {
              SetIterable(iters[ii]).forEach(function(value2) {
                return set2.add(value2);
              });
            }
          });
        };
        Set2.prototype.intersect = function() {
          var iters = SLICE$0.call(arguments, 0);
          if (iters.length === 0) {
            return this;
          }
          iters = iters.map(function(iter) {
            return SetIterable(iter);
          });
          var originalSet = this;
          return this.withMutations(function(set2) {
            originalSet.forEach(function(value2) {
              if (!iters.every(function(iter) {
                return iter.includes(value2);
              })) {
                set2.remove(value2);
              }
            });
          });
        };
        Set2.prototype.subtract = function() {
          var iters = SLICE$0.call(arguments, 0);
          if (iters.length === 0) {
            return this;
          }
          iters = iters.map(function(iter) {
            return SetIterable(iter);
          });
          var originalSet = this;
          return this.withMutations(function(set2) {
            originalSet.forEach(function(value2) {
              if (iters.some(function(iter) {
                return iter.includes(value2);
              })) {
                set2.remove(value2);
              }
            });
          });
        };
        Set2.prototype.merge = function() {
          return this.union.apply(this, arguments);
        };
        Set2.prototype.mergeWith = function(merger) {
          var iters = SLICE$0.call(arguments, 1);
          return this.union.apply(this, iters);
        };
        Set2.prototype.sort = function(comparator) {
          return OrderedSet(sortFactory(this, comparator));
        };
        Set2.prototype.sortBy = function(mapper, comparator) {
          return OrderedSet(sortFactory(this, comparator, mapper));
        };
        Set2.prototype.wasAltered = function() {
          return this._map.wasAltered();
        };
        Set2.prototype.__iterate = function(fn, reverse) {
          var this$0 = this;
          return this._map.__iterate(function(_, k) {
            return fn(k, k, this$0);
          }, reverse);
        };
        Set2.prototype.__iterator = function(type, reverse) {
          return this._map.map(function(_, k) {
            return k;
          }).__iterator(type, reverse);
        };
        Set2.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          var newMap = this._map.__ensureOwner(ownerID);
          if (!ownerID) {
            this.__ownerID = ownerID;
            this._map = newMap;
            return this;
          }
          return this.__make(newMap, ownerID);
        };
        function isSet2(maybeSet) {
          return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);
        }
        Set2.isSet = isSet2;
        var IS_SET_SENTINEL = "@@__IMMUTABLE_SET__@@";
        var SetPrototype = Set2.prototype;
        SetPrototype[IS_SET_SENTINEL] = true;
        SetPrototype[DELETE] = SetPrototype.remove;
        SetPrototype.mergeDeep = SetPrototype.merge;
        SetPrototype.mergeDeepWith = SetPrototype.mergeWith;
        SetPrototype.withMutations = MapPrototype.withMutations;
        SetPrototype.asMutable = MapPrototype.asMutable;
        SetPrototype.asImmutable = MapPrototype.asImmutable;
        SetPrototype.__empty = emptySet;
        SetPrototype.__make = makeSet;
        function updateSet(set2, newMap) {
          if (set2.__ownerID) {
            set2.size = newMap.size;
            set2._map = newMap;
            return set2;
          }
          return newMap === set2._map ? set2 : newMap.size === 0 ? set2.__empty() : set2.__make(newMap);
        }
        function makeSet(map2, ownerID) {
          var set2 = Object.create(SetPrototype);
          set2.size = map2 ? map2.size : 0;
          set2._map = map2;
          set2.__ownerID = ownerID;
          return set2;
        }
        var EMPTY_SET;
        function emptySet() {
          return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
        }
        createClass(OrderedSet, Set2);
        function OrderedSet(value2) {
          return value2 === null || value2 === void 0 ? emptyOrderedSet() : isOrderedSet(value2) ? value2 : emptyOrderedSet().withMutations(function(set2) {
            var iter = SetIterable(value2);
            assertNotInfinite(iter.size);
            iter.forEach(function(v) {
              return set2.add(v);
            });
          });
        }
        OrderedSet.of = function() {
          return this(arguments);
        };
        OrderedSet.fromKeys = function(value2) {
          return this(KeyedIterable(value2).keySeq());
        };
        OrderedSet.prototype.toString = function() {
          return this.__toString("OrderedSet {", "}");
        };
        function isOrderedSet(maybeOrderedSet) {
          return isSet2(maybeOrderedSet) && isOrdered(maybeOrderedSet);
        }
        OrderedSet.isOrderedSet = isOrderedSet;
        var OrderedSetPrototype = OrderedSet.prototype;
        OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;
        OrderedSetPrototype.__empty = emptyOrderedSet;
        OrderedSetPrototype.__make = makeOrderedSet;
        function makeOrderedSet(map2, ownerID) {
          var set2 = Object.create(OrderedSetPrototype);
          set2.size = map2 ? map2.size : 0;
          set2._map = map2;
          set2.__ownerID = ownerID;
          return set2;
        }
        var EMPTY_ORDERED_SET;
        function emptyOrderedSet() {
          return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
        }
        createClass(Stack2, IndexedCollection);
        function Stack2(value2) {
          return value2 === null || value2 === void 0 ? emptyStack() : isStack(value2) ? value2 : emptyStack().unshiftAll(value2);
        }
        Stack2.of = function() {
          return this(arguments);
        };
        Stack2.prototype.toString = function() {
          return this.__toString("Stack [", "]");
        };
        Stack2.prototype.get = function(index, notSetValue) {
          var head = this._head;
          index = wrapIndex(this, index);
          while (head && index--) {
            head = head.next;
          }
          return head ? head.value : notSetValue;
        };
        Stack2.prototype.peek = function() {
          return this._head && this._head.value;
        };
        Stack2.prototype.push = function() {
          if (arguments.length === 0) {
            return this;
          }
          var newSize = this.size + arguments.length;
          var head = this._head;
          for (var ii = arguments.length - 1; ii >= 0; ii--) {
            head = {
              value: arguments[ii],
              next: head
            };
          }
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };
        Stack2.prototype.pushAll = function(iter) {
          iter = IndexedIterable(iter);
          if (iter.size === 0) {
            return this;
          }
          assertNotInfinite(iter.size);
          var newSize = this.size;
          var head = this._head;
          iter.reverse().forEach(function(value2) {
            newSize++;
            head = {
              value: value2,
              next: head
            };
          });
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };
        Stack2.prototype.pop = function() {
          return this.slice(1);
        };
        Stack2.prototype.unshift = function() {
          return this.push.apply(this, arguments);
        };
        Stack2.prototype.unshiftAll = function(iter) {
          return this.pushAll(iter);
        };
        Stack2.prototype.shift = function() {
          return this.pop.apply(this, arguments);
        };
        Stack2.prototype.clear = function() {
          if (this.size === 0) {
            return this;
          }
          if (this.__ownerID) {
            this.size = 0;
            this._head = void 0;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return emptyStack();
        };
        Stack2.prototype.slice = function(begin, end) {
          if (wholeSlice(begin, end, this.size)) {
            return this;
          }
          var resolvedBegin = resolveBegin(begin, this.size);
          var resolvedEnd = resolveEnd(end, this.size);
          if (resolvedEnd !== this.size) {
            return IndexedCollection.prototype.slice.call(this, begin, end);
          }
          var newSize = this.size - resolvedBegin;
          var head = this._head;
          while (resolvedBegin--) {
            head = head.next;
          }
          if (this.__ownerID) {
            this.size = newSize;
            this._head = head;
            this.__hash = void 0;
            this.__altered = true;
            return this;
          }
          return makeStack(newSize, head);
        };
        Stack2.prototype.__ensureOwner = function(ownerID) {
          if (ownerID === this.__ownerID) {
            return this;
          }
          if (!ownerID) {
            this.__ownerID = ownerID;
            this.__altered = false;
            return this;
          }
          return makeStack(this.size, this._head, ownerID, this.__hash);
        };
        Stack2.prototype.__iterate = function(fn, reverse) {
          if (reverse) {
            return this.reverse().__iterate(fn);
          }
          var iterations = 0;
          var node = this._head;
          while (node) {
            if (fn(node.value, iterations++, this) === false) {
              break;
            }
            node = node.next;
          }
          return iterations;
        };
        Stack2.prototype.__iterator = function(type, reverse) {
          if (reverse) {
            return this.reverse().__iterator(type);
          }
          var iterations = 0;
          var node = this._head;
          return new Iterator(function() {
            if (node) {
              var value2 = node.value;
              node = node.next;
              return iteratorValue(type, iterations++, value2);
            }
            return iteratorDone();
          });
        };
        function isStack(maybeStack) {
          return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);
        }
        Stack2.isStack = isStack;
        var IS_STACK_SENTINEL = "@@__IMMUTABLE_STACK__@@";
        var StackPrototype = Stack2.prototype;
        StackPrototype[IS_STACK_SENTINEL] = true;
        StackPrototype.withMutations = MapPrototype.withMutations;
        StackPrototype.asMutable = MapPrototype.asMutable;
        StackPrototype.asImmutable = MapPrototype.asImmutable;
        StackPrototype.wasAltered = MapPrototype.wasAltered;
        function makeStack(size, head, ownerID, hash2) {
          var map2 = Object.create(StackPrototype);
          map2.size = size;
          map2._head = head;
          map2.__ownerID = ownerID;
          map2.__hash = hash2;
          map2.__altered = false;
          return map2;
        }
        var EMPTY_STACK;
        function emptyStack() {
          return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
        }
        function mixin(ctor, methods) {
          var keyCopier = function(key) {
            ctor.prototype[key] = methods[key];
          };
          Object.keys(methods).forEach(keyCopier);
          Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(methods).forEach(keyCopier);
          return ctor;
        }
        Iterable.Iterator = Iterator;
        mixin(Iterable, {
          toArray: function() {
            assertNotInfinite(this.size);
            var array = new Array(this.size || 0);
            this.valueSeq().__iterate(function(v, i) {
              array[i] = v;
            });
            return array;
          },
          toIndexedSeq: function() {
            return new ToIndexedSequence(this);
          },
          toJS: function() {
            return this.toSeq().map(
              function(value2) {
                return value2 && typeof value2.toJS === "function" ? value2.toJS() : value2;
              }
            ).__toJS();
          },
          toJSON: function() {
            return this.toSeq().map(
              function(value2) {
                return value2 && typeof value2.toJSON === "function" ? value2.toJSON() : value2;
              }
            ).__toJS();
          },
          toKeyedSeq: function() {
            return new ToKeyedSequence(this, true);
          },
          toMap: function() {
            return Map2(this.toKeyedSeq());
          },
          toObject: function() {
            assertNotInfinite(this.size);
            var object = {};
            this.__iterate(function(v, k) {
              object[k] = v;
            });
            return object;
          },
          toOrderedMap: function() {
            return OrderedMap(this.toKeyedSeq());
          },
          toOrderedSet: function() {
            return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
          },
          toSet: function() {
            return Set2(isKeyed(this) ? this.valueSeq() : this);
          },
          toSetSeq: function() {
            return new ToSetSequence(this);
          },
          toSeq: function() {
            return isIndexed(this) ? this.toIndexedSeq() : isKeyed(this) ? this.toKeyedSeq() : this.toSetSeq();
          },
          toStack: function() {
            return Stack2(isKeyed(this) ? this.valueSeq() : this);
          },
          toList: function() {
            return List(isKeyed(this) ? this.valueSeq() : this);
          },
          toString: function() {
            return "[Iterable]";
          },
          __toString: function(head, tail) {
            if (this.size === 0) {
              return head + tail;
            }
            return head + " " + this.toSeq().map(this.__toStringMapper).join(", ") + " " + tail;
          },
          concat: function() {
            var values = SLICE$0.call(arguments, 0);
            return reify(this, concatFactory(this, values));
          },
          includes: function(searchValue) {
            return this.some(function(value2) {
              return is2(value2, searchValue);
            });
          },
          entries: function() {
            return this.__iterator(ITERATE_ENTRIES);
          },
          every: function(predicate, context2) {
            assertNotInfinite(this.size);
            var returnValue = true;
            this.__iterate(function(v, k, c) {
              if (!predicate.call(context2, v, k, c)) {
                returnValue = false;
                return false;
              }
            });
            return returnValue;
          },
          filter: function(predicate, context2) {
            return reify(this, filterFactory(this, predicate, context2, true));
          },
          find: function(predicate, context2, notSetValue) {
            var entry = this.findEntry(predicate, context2);
            return entry ? entry[1] : notSetValue;
          },
          forEach: function(sideEffect, context2) {
            assertNotInfinite(this.size);
            return this.__iterate(context2 ? sideEffect.bind(context2) : sideEffect);
          },
          join: function(separator) {
            assertNotInfinite(this.size);
            separator = separator !== void 0 ? "" + separator : ",";
            var joined = "";
            var isFirst = true;
            this.__iterate(function(v) {
              isFirst ? isFirst = false : joined += separator;
              joined += v !== null && v !== void 0 ? v.toString() : "";
            });
            return joined;
          },
          keys: function() {
            return this.__iterator(ITERATE_KEYS);
          },
          map: function(mapper, context2) {
            return reify(this, mapFactory(this, mapper, context2));
          },
          reduce: function(reducer, initialReduction, context2) {
            assertNotInfinite(this.size);
            var reduction;
            var useFirst;
            if (arguments.length < 2) {
              useFirst = true;
            } else {
              reduction = initialReduction;
            }
            this.__iterate(function(v, k, c) {
              if (useFirst) {
                useFirst = false;
                reduction = v;
              } else {
                reduction = reducer.call(context2, reduction, v, k, c);
              }
            });
            return reduction;
          },
          reduceRight: function(reducer, initialReduction, context2) {
            var reversed = this.toKeyedSeq().reverse();
            return reversed.reduce.apply(reversed, arguments);
          },
          reverse: function() {
            return reify(this, reverseFactory(this, true));
          },
          slice: function(begin, end) {
            return reify(this, sliceFactory(this, begin, end, true));
          },
          some: function(predicate, context2) {
            return !this.every(not(predicate), context2);
          },
          sort: function(comparator) {
            return reify(this, sortFactory(this, comparator));
          },
          values: function() {
            return this.__iterator(ITERATE_VALUES);
          },
          butLast: function() {
            return this.slice(0, -1);
          },
          isEmpty: function() {
            return this.size !== void 0 ? this.size === 0 : !this.some(function() {
              return true;
            });
          },
          count: function(predicate, context2) {
            return ensureSize(
              predicate ? this.toSeq().filter(predicate, context2) : this
            );
          },
          countBy: function(grouper, context2) {
            return countByFactory(this, grouper, context2);
          },
          equals: function(other) {
            return deepEqual2(this, other);
          },
          entrySeq: function() {
            var iterable = this;
            if (iterable._cache) {
              return new ArraySeq(iterable._cache);
            }
            var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();
            entriesSequence.fromEntrySeq = function() {
              return iterable.toSeq();
            };
            return entriesSequence;
          },
          filterNot: function(predicate, context2) {
            return this.filter(not(predicate), context2);
          },
          findEntry: function(predicate, context2, notSetValue) {
            var found = notSetValue;
            this.__iterate(function(v, k, c) {
              if (predicate.call(context2, v, k, c)) {
                found = [k, v];
                return false;
              }
            });
            return found;
          },
          findKey: function(predicate, context2) {
            var entry = this.findEntry(predicate, context2);
            return entry && entry[0];
          },
          findLast: function(predicate, context2, notSetValue) {
            return this.toKeyedSeq().reverse().find(predicate, context2, notSetValue);
          },
          findLastEntry: function(predicate, context2, notSetValue) {
            return this.toKeyedSeq().reverse().findEntry(predicate, context2, notSetValue);
          },
          findLastKey: function(predicate, context2) {
            return this.toKeyedSeq().reverse().findKey(predicate, context2);
          },
          first: function() {
            return this.find(returnTrue);
          },
          flatMap: function(mapper, context2) {
            return reify(this, flatMapFactory(this, mapper, context2));
          },
          flatten: function(depth) {
            return reify(this, flattenFactory(this, depth, true));
          },
          fromEntrySeq: function() {
            return new FromEntriesSequence(this);
          },
          get: function(searchKey, notSetValue) {
            return this.find(function(_, key) {
              return is2(key, searchKey);
            }, void 0, notSetValue);
          },
          getIn: function(searchKeyPath, notSetValue) {
            var nested = this;
            var iter = forceIterator(searchKeyPath);
            var step;
            while (!(step = iter.next()).done) {
              var key = step.value;
              nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;
              if (nested === NOT_SET) {
                return notSetValue;
              }
            }
            return nested;
          },
          groupBy: function(grouper, context2) {
            return groupByFactory(this, grouper, context2);
          },
          has: function(searchKey) {
            return this.get(searchKey, NOT_SET) !== NOT_SET;
          },
          hasIn: function(searchKeyPath) {
            return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;
          },
          isSubset: function(iter) {
            iter = typeof iter.includes === "function" ? iter : Iterable(iter);
            return this.every(function(value2) {
              return iter.includes(value2);
            });
          },
          isSuperset: function(iter) {
            iter = typeof iter.isSubset === "function" ? iter : Iterable(iter);
            return iter.isSubset(this);
          },
          keyOf: function(searchValue) {
            return this.findKey(function(value2) {
              return is2(value2, searchValue);
            });
          },
          keySeq: function() {
            return this.toSeq().map(keyMapper).toIndexedSeq();
          },
          last: function() {
            return this.toSeq().reverse().first();
          },
          lastKeyOf: function(searchValue) {
            return this.toKeyedSeq().reverse().keyOf(searchValue);
          },
          max: function(comparator) {
            return maxFactory(this, comparator);
          },
          maxBy: function(mapper, comparator) {
            return maxFactory(this, comparator, mapper);
          },
          min: function(comparator) {
            return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);
          },
          minBy: function(mapper, comparator) {
            return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);
          },
          rest: function() {
            return this.slice(1);
          },
          skip: function(amount) {
            return this.slice(Math.max(0, amount));
          },
          skipLast: function(amount) {
            return reify(this, this.toSeq().reverse().skip(amount).reverse());
          },
          skipWhile: function(predicate, context2) {
            return reify(this, skipWhileFactory(this, predicate, context2, true));
          },
          skipUntil: function(predicate, context2) {
            return this.skipWhile(not(predicate), context2);
          },
          sortBy: function(mapper, comparator) {
            return reify(this, sortFactory(this, comparator, mapper));
          },
          take: function(amount) {
            return this.slice(0, Math.max(0, amount));
          },
          takeLast: function(amount) {
            return reify(this, this.toSeq().reverse().take(amount).reverse());
          },
          takeWhile: function(predicate, context2) {
            return reify(this, takeWhileFactory(this, predicate, context2));
          },
          takeUntil: function(predicate, context2) {
            return this.takeWhile(not(predicate), context2);
          },
          valueSeq: function() {
            return this.toIndexedSeq();
          },
          hashCode: function() {
            return this.__hash || (this.__hash = hashIterable(this));
          }
        });
        var IterablePrototype = Iterable.prototype;
        IterablePrototype[IS_ITERABLE_SENTINEL] = true;
        IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;
        IterablePrototype.__toJS = IterablePrototype.toArray;
        IterablePrototype.__toStringMapper = quoteString;
        IterablePrototype.inspect = IterablePrototype.toSource = function() {
          return this.toString();
        };
        IterablePrototype.chain = IterablePrototype.flatMap;
        IterablePrototype.contains = IterablePrototype.includes;
        mixin(KeyedIterable, {
          flip: function() {
            return reify(this, flipFactory(this));
          },
          mapEntries: function(mapper, context2) {
            var this$0 = this;
            var iterations = 0;
            return reify(
              this,
              this.toSeq().map(
                function(v, k) {
                  return mapper.call(context2, [k, v], iterations++, this$0);
                }
              ).fromEntrySeq()
            );
          },
          mapKeys: function(mapper, context2) {
            var this$0 = this;
            return reify(
              this,
              this.toSeq().flip().map(
                function(k, v) {
                  return mapper.call(context2, k, v, this$0);
                }
              ).flip()
            );
          }
        });
        var KeyedIterablePrototype = KeyedIterable.prototype;
        KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;
        KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;
        KeyedIterablePrototype.__toJS = IterablePrototype.toObject;
        KeyedIterablePrototype.__toStringMapper = function(v, k) {
          return JSON.stringify(k) + ": " + quoteString(v);
        };
        mixin(IndexedIterable, {
          toKeyedSeq: function() {
            return new ToKeyedSequence(this, false);
          },
          filter: function(predicate, context2) {
            return reify(this, filterFactory(this, predicate, context2, false));
          },
          findIndex: function(predicate, context2) {
            var entry = this.findEntry(predicate, context2);
            return entry ? entry[0] : -1;
          },
          indexOf: function(searchValue) {
            var key = this.keyOf(searchValue);
            return key === void 0 ? -1 : key;
          },
          lastIndexOf: function(searchValue) {
            var key = this.lastKeyOf(searchValue);
            return key === void 0 ? -1 : key;
          },
          reverse: function() {
            return reify(this, reverseFactory(this, false));
          },
          slice: function(begin, end) {
            return reify(this, sliceFactory(this, begin, end, false));
          },
          splice: function(index, removeNum) {
            var numArgs = arguments.length;
            removeNum = Math.max(removeNum | 0, 0);
            if (numArgs === 0 || numArgs === 2 && !removeNum) {
              return this;
            }
            index = resolveBegin(index, index < 0 ? this.count() : this.size);
            var spliced = this.slice(0, index);
            return reify(
              this,
              numArgs === 1 ? spliced : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))
            );
          },
          findLastIndex: function(predicate, context2) {
            var entry = this.findLastEntry(predicate, context2);
            return entry ? entry[0] : -1;
          },
          first: function() {
            return this.get(0);
          },
          flatten: function(depth) {
            return reify(this, flattenFactory(this, depth, false));
          },
          get: function(index, notSetValue) {
            index = wrapIndex(this, index);
            return index < 0 || (this.size === Infinity || this.size !== void 0 && index > this.size) ? notSetValue : this.find(function(_, key) {
              return key === index;
            }, void 0, notSetValue);
          },
          has: function(index) {
            index = wrapIndex(this, index);
            return index >= 0 && (this.size !== void 0 ? this.size === Infinity || index < this.size : this.indexOf(index) !== -1);
          },
          interpose: function(separator) {
            return reify(this, interposeFactory(this, separator));
          },
          interleave: function() {
            var iterables = [this].concat(arrCopy(arguments));
            var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);
            var interleaved = zipped.flatten(true);
            if (zipped.size) {
              interleaved.size = zipped.size * iterables.length;
            }
            return reify(this, interleaved);
          },
          keySeq: function() {
            return Range(0, this.size);
          },
          last: function() {
            return this.get(-1);
          },
          skipWhile: function(predicate, context2) {
            return reify(this, skipWhileFactory(this, predicate, context2, false));
          },
          zip: function() {
            var iterables = [this].concat(arrCopy(arguments));
            return reify(this, zipWithFactory(this, defaultZipper, iterables));
          },
          zipWith: function(zipper) {
            var iterables = arrCopy(arguments);
            iterables[0] = this;
            return reify(this, zipWithFactory(this, zipper, iterables));
          }
        });
        IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;
        IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;
        mixin(SetIterable, {
          get: function(value2, notSetValue) {
            return this.has(value2) ? value2 : notSetValue;
          },
          includes: function(value2) {
            return this.has(value2);
          },
          keySeq: function() {
            return this.valueSeq();
          }
        });
        SetIterable.prototype.has = IterablePrototype.includes;
        SetIterable.prototype.contains = SetIterable.prototype.includes;
        mixin(KeyedSeq, KeyedIterable.prototype);
        mixin(IndexedSeq, IndexedIterable.prototype);
        mixin(SetSeq, SetIterable.prototype);
        mixin(KeyedCollection, KeyedIterable.prototype);
        mixin(IndexedCollection, IndexedIterable.prototype);
        mixin(SetCollection, SetIterable.prototype);
        function keyMapper(v, k) {
          return k;
        }
        function entryMapper(v, k) {
          return [k, v];
        }
        function not(predicate) {
          return function() {
            return !predicate.apply(this, arguments);
          };
        }
        function neg(predicate) {
          return function() {
            return -predicate.apply(this, arguments);
          };
        }
        function quoteString(value2) {
          return typeof value2 === "string" ? JSON.stringify(value2) : String(value2);
        }
        function defaultZipper() {
          return arrCopy(arguments);
        }
        function defaultNegComparator(a, b) {
          return a < b ? 1 : a > b ? -1 : 0;
        }
        function hashIterable(iterable) {
          if (iterable.size === Infinity) {
            return 0;
          }
          var ordered = isOrdered(iterable);
          var keyed = isKeyed(iterable);
          var h = ordered ? 1 : 0;
          var size = iterable.__iterate(
            keyed ? ordered ? function(v, k) {
              h = 31 * h + hashMerge(hash(v), hash(k)) | 0;
            } : function(v, k) {
              h = h + hashMerge(hash(v), hash(k)) | 0;
            } : ordered ? function(v) {
              h = 31 * h + hash(v) | 0;
            } : function(v) {
              h = h + hash(v) | 0;
            }
          );
          return murmurHashOfSize(size, h);
        }
        function murmurHashOfSize(size, h) {
          h = imul(h, 3432918353);
          h = imul(h << 15 | h >>> -15, 461845907);
          h = imul(h << 13 | h >>> -13, 5);
          h = (h + 3864292196 | 0) ^ size;
          h = imul(h ^ h >>> 16, 2246822507);
          h = imul(h ^ h >>> 13, 3266489909);
          h = smi(h ^ h >>> 16);
          return h;
        }
        function hashMerge(a, b) {
          return a ^ b + 2654435769 + (a << 6) + (a >> 2) | 0;
        }
        var Immutable2 = {
          Iterable,
          Seq,
          Collection,
          Map: Map2,
          OrderedMap,
          List,
          Stack: Stack2,
          Set: Set2,
          OrderedSet,
          Record,
          Range,
          Repeat,
          is: is2,
          fromJS
        };
        return Immutable2;
      });
    })(immutable);
    const Immutable = immutable.exports;
    var defaultValue$1 = function defaultValue2(value2, _default) {
      return typeof value2 === "undefined" ? _default : value2;
    };
    var deepEqual = function deepEqual2(v1, v2) {
      if (v1 === v2) {
        return true;
      } else if (immutable.exports.Map.isMap(v1)) {
        return v1.equals(v2);
      } else {
        return JSON.stringify(v1) == JSON.stringify(v2);
      }
    };
    var shallowEqual$2 = function shallowEqual2(a, b) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (a === b) {
        return true;
      } else if (Array.isArray(a))
        return shallowEqualArrays$1(a, b, deep);
      else if (immutable.exports.Map.isMap(a))
        return a.equals(b);
      else if (_typeof$1(a) == "object")
        return shallowEqualObjects$1(a, b, deep);
      else
        return a === b;
    };
    function shallowEqualArrays$1(arrA, arrB) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (arrA === arrB) {
        return true;
      }
      if (!arrA || !arrB) {
        return false;
      }
      var len = arrA.length;
      if (arrB.length !== len) {
        return false;
      }
      for (var i = 0; i < len; i++) {
        var isEqual = deep ? shallowEqual$2(arrA[i], arrB[i], deep) : arrA[i] === arrB[i];
        if (!isEqual) {
          return false;
        }
      }
      return true;
    }
    function shallowEqualObjects$1(objA, objB) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (objA === objB) {
        return true;
      }
      if (!objA || !objB) {
        return false;
      }
      var aKeys = Object.keys(objA);
      var bKeys = Object.keys(objB);
      var len = aKeys.length;
      if (bKeys.length !== len) {
        return false;
      }
      for (var i = 0; i < len; i++) {
        var key = aKeys[i];
        var isEqual = deep ? shallowEqual$2(objA[key], objB[key], deep) : objA[key] === objB[key];
        if (!isEqual) {
          return false;
        }
      }
      return true;
    }
    var isImmutable = function isImmutable2(v) {
      return _typeof$1(v) === "object" && v !== null && typeof v.toJS === "function";
    };
    function toImmutableList(v) {
      return isImmutable(v) ? v : new Immutable.List(v);
    }
    function applyToJS(v) {
      return isImmutable(v) ? v.toJS() : v;
    }
    var escapeRegExp = function escapeRegExp2(string) {
      return string.replace(/[.*+?^${}()|[\]\\/]/g, "\\$&");
    };
    var isJsonLogic = function isJsonLogic2(logic) {
      return _typeof$1(logic) === "object" && logic !== null && !Array.isArray(logic) && Object.keys(logic).length === 1;
    };
    function sleep(delay) {
      return new Promise(function(resolve) {
        setTimeout(resolve, delay);
      });
    }
    function mergeArraysSmart(arr1, arr2) {
      if (!arr1)
        arr1 = [];
      if (!arr2)
        arr2 = [];
      return arr2.map(function(op) {
        return [op, arr1.indexOf(op)];
      }).map(function(_ref, i, orig) {
        var _ref2 = _slicedToArray(_ref, 2), op = _ref2[0], ind = _ref2[1];
        if (ind == -1) {
          var next = orig.slice(i + 1);
          var prev = orig.slice(0, i);
          var after = prev.reverse().find(function(_ref3) {
            var _ref4 = _slicedToArray(_ref3, 2);
            _ref4[0];
            var ci = _ref4[1];
            return ci != -1;
          });
          var before = next.find(function(_ref5) {
            var _ref6 = _slicedToArray(_ref5, 2);
            _ref6[0];
            var ci = _ref6[1];
            return ci != -1;
          });
          if (before)
            return [op, "before", before[0]];
          else if (after)
            return [op, "after", after[0]];
          else
            return [op, "append", null];
        } else {
          return null;
        }
      }).filter(function(x) {
        return x !== null;
      }).reduce(function(acc, _ref7) {
        var _ref8 = _slicedToArray(_ref7, 3), newOp = _ref8[0], rel = _ref8[1], relOp = _ref8[2];
        var ind = acc.indexOf(relOp);
        if (acc.indexOf(newOp) == -1) {
          if (ind > -1) {
            acc.splice(ind + (rel == "after" ? 1 : 0), 0, newOp);
          } else {
            acc.splice(rel == "append" ? Infinity : 0, 0, newOp);
          }
        }
        return acc;
      }, arr1.slice());
    }
    var isDev$1 = function isDev2() {
      return typeof process !== "undefined" && process.env && false;
    };
    var getLogger$1 = function getLogger2() {
      var devMode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      var verbose = devMode != void 0 ? devMode : isDev$1();
      return verbose ? console : {
        error: function error() {
        },
        log: function log() {
        },
        warn: function warn2() {
        },
        debug: function debug() {
        },
        info: function info() {
        }
      };
    };
    var getFirstDefined = function getFirstDefined2() {
      var arr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      var ret;
      for (var i = 0; i < arr.length; i++) {
        var v = arr[i];
        if (v !== void 0) {
          ret = v;
          break;
        }
      }
      return ret;
    };
    var logger$1 = getLogger$1();
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr))
        return _arrayLikeToArray$6(arr);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
        return Array.from(iter);
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$6(arr) || _nonIterableSpread();
    }
    function listCacheClear$1() {
      this.__data__ = [];
      this.size = 0;
    }
    var _listCacheClear = listCacheClear$1;
    function eq$5(value2, other) {
      return value2 === other || value2 !== value2 && other !== other;
    }
    var eq_1 = eq$5;
    var eq$4 = eq_1;
    function assocIndexOf$4(array, key) {
      var length = array.length;
      while (length--) {
        if (eq$4(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    var _assocIndexOf = assocIndexOf$4;
    var assocIndexOf$3 = _assocIndexOf;
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete$1(key) {
      var data = this.__data__, index = assocIndexOf$3(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    var _listCacheDelete = listCacheDelete$1;
    var assocIndexOf$2 = _assocIndexOf;
    function listCacheGet$1(key) {
      var data = this.__data__, index = assocIndexOf$2(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    var _listCacheGet = listCacheGet$1;
    var assocIndexOf$1 = _assocIndexOf;
    function listCacheHas$1(key) {
      return assocIndexOf$1(this.__data__, key) > -1;
    }
    var _listCacheHas = listCacheHas$1;
    var assocIndexOf = _assocIndexOf;
    function listCacheSet$1(key, value2) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value2]);
      } else {
        data[index][1] = value2;
      }
      return this;
    }
    var _listCacheSet = listCacheSet$1;
    var listCacheClear = _listCacheClear, listCacheDelete = _listCacheDelete, listCacheGet = _listCacheGet, listCacheHas = _listCacheHas, listCacheSet = _listCacheSet;
    function ListCache$4(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache$4.prototype.clear = listCacheClear;
    ListCache$4.prototype["delete"] = listCacheDelete;
    ListCache$4.prototype.get = listCacheGet;
    ListCache$4.prototype.has = listCacheHas;
    ListCache$4.prototype.set = listCacheSet;
    var _ListCache = ListCache$4;
    var ListCache$3 = _ListCache;
    function stackClear$1() {
      this.__data__ = new ListCache$3();
      this.size = 0;
    }
    var _stackClear = stackClear$1;
    function stackDelete$1(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    var _stackDelete = stackDelete$1;
    function stackGet$1(key) {
      return this.__data__.get(key);
    }
    var _stackGet = stackGet$1;
    function stackHas$1(key) {
      return this.__data__.has(key);
    }
    var _stackHas = stackHas$1;
    var freeGlobal$1 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
    var _freeGlobal = freeGlobal$1;
    var freeGlobal = _freeGlobal;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root$9 = freeGlobal || freeSelf || Function("return this")();
    var _root = root$9;
    var root$8 = _root;
    var Symbol$7 = root$8.Symbol;
    var _Symbol = Symbol$7;
    var Symbol$6 = _Symbol;
    var objectProto$f = Object.prototype;
    var hasOwnProperty$c = objectProto$f.hasOwnProperty;
    var nativeObjectToString$1 = objectProto$f.toString;
    var symToStringTag$1 = Symbol$6 ? Symbol$6.toStringTag : void 0;
    function getRawTag$1(value2) {
      var isOwn = hasOwnProperty$c.call(value2, symToStringTag$1), tag = value2[symToStringTag$1];
      try {
        value2[symToStringTag$1] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString$1.call(value2);
      if (unmasked) {
        if (isOwn) {
          value2[symToStringTag$1] = tag;
        } else {
          delete value2[symToStringTag$1];
        }
      }
      return result;
    }
    var _getRawTag = getRawTag$1;
    var objectProto$e = Object.prototype;
    var nativeObjectToString = objectProto$e.toString;
    function objectToString$1(value2) {
      return nativeObjectToString.call(value2);
    }
    var _objectToString = objectToString$1;
    var Symbol$5 = _Symbol, getRawTag = _getRawTag, objectToString = _objectToString;
    var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol$5 ? Symbol$5.toStringTag : void 0;
    function baseGetTag$6(value2) {
      if (value2 == null) {
        return value2 === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value2) ? getRawTag(value2) : objectToString(value2);
    }
    var _baseGetTag = baseGetTag$6;
    function isObject$h(value2) {
      var type = typeof value2;
      return value2 != null && (type == "object" || type == "function");
    }
    var isObject_1 = isObject$h;
    var baseGetTag$5 = _baseGetTag, isObject$g = isObject_1;
    var asyncTag = "[object AsyncFunction]", funcTag$2 = "[object Function]", genTag$1 = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
    function isFunction$4(value2) {
      if (!isObject$g(value2)) {
        return false;
      }
      var tag = baseGetTag$5(value2);
      return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
    }
    var isFunction_1 = isFunction$4;
    var root$7 = _root;
    var coreJsData$1 = root$7["__core-js_shared__"];
    var _coreJsData = coreJsData$1;
    var coreJsData = _coreJsData;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked$1(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    var _isMasked = isMasked$1;
    var funcProto$2 = Function.prototype;
    var funcToString$2 = funcProto$2.toString;
    function toSource$2(func) {
      if (func != null) {
        try {
          return funcToString$2.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    var _toSource = toSource$2;
    var isFunction$3 = isFunction_1, isMasked = _isMasked, isObject$f = isObject_1, toSource$1 = _toSource;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto$1 = Function.prototype, objectProto$d = Object.prototype;
    var funcToString$1 = funcProto$1.toString;
    var hasOwnProperty$b = objectProto$d.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString$1.call(hasOwnProperty$b).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative$1(value2) {
      if (!isObject$f(value2) || isMasked(value2)) {
        return false;
      }
      var pattern = isFunction$3(value2) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource$1(value2));
    }
    var _baseIsNative = baseIsNative$1;
    function getValue$1(object, key) {
      return object == null ? void 0 : object[key];
    }
    var _getValue = getValue$1;
    var baseIsNative = _baseIsNative, getValue = _getValue;
    function getNative$7(object, key) {
      var value2 = getValue(object, key);
      return baseIsNative(value2) ? value2 : void 0;
    }
    var _getNative = getNative$7;
    var getNative$6 = _getNative, root$6 = _root;
    var Map$4 = getNative$6(root$6, "Map");
    var _Map = Map$4;
    var getNative$5 = _getNative;
    var nativeCreate$4 = getNative$5(Object, "create");
    var _nativeCreate = nativeCreate$4;
    var nativeCreate$3 = _nativeCreate;
    function hashClear$1() {
      this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
      this.size = 0;
    }
    var _hashClear = hashClear$1;
    function hashDelete$1(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    var _hashDelete = hashDelete$1;
    var nativeCreate$2 = _nativeCreate;
    var HASH_UNDEFINED$2 = "__lodash_hash_undefined__";
    var objectProto$c = Object.prototype;
    var hasOwnProperty$a = objectProto$c.hasOwnProperty;
    function hashGet$1(key) {
      var data = this.__data__;
      if (nativeCreate$2) {
        var result = data[key];
        return result === HASH_UNDEFINED$2 ? void 0 : result;
      }
      return hasOwnProperty$a.call(data, key) ? data[key] : void 0;
    }
    var _hashGet = hashGet$1;
    var nativeCreate$1 = _nativeCreate;
    var objectProto$b = Object.prototype;
    var hasOwnProperty$9 = objectProto$b.hasOwnProperty;
    function hashHas$1(key) {
      var data = this.__data__;
      return nativeCreate$1 ? data[key] !== void 0 : hasOwnProperty$9.call(data, key);
    }
    var _hashHas = hashHas$1;
    var nativeCreate = _nativeCreate;
    var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
    function hashSet$1(key, value2) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value2 === void 0 ? HASH_UNDEFINED$1 : value2;
      return this;
    }
    var _hashSet = hashSet$1;
    var hashClear = _hashClear, hashDelete = _hashDelete, hashGet = _hashGet, hashHas = _hashHas, hashSet = _hashSet;
    function Hash$1(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash$1.prototype.clear = hashClear;
    Hash$1.prototype["delete"] = hashDelete;
    Hash$1.prototype.get = hashGet;
    Hash$1.prototype.has = hashHas;
    Hash$1.prototype.set = hashSet;
    var _Hash = Hash$1;
    var Hash = _Hash, ListCache$2 = _ListCache, Map$3 = _Map;
    function mapCacheClear$1() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map$3 || ListCache$2)(),
        "string": new Hash()
      };
    }
    var _mapCacheClear = mapCacheClear$1;
    function isKeyable$1(value2) {
      var type = typeof value2;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value2 !== "__proto__" : value2 === null;
    }
    var _isKeyable = isKeyable$1;
    var isKeyable = _isKeyable;
    function getMapData$4(map2, key) {
      var data = map2.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    var _getMapData = getMapData$4;
    var getMapData$3 = _getMapData;
    function mapCacheDelete$1(key) {
      var result = getMapData$3(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    var _mapCacheDelete = mapCacheDelete$1;
    var getMapData$2 = _getMapData;
    function mapCacheGet$1(key) {
      return getMapData$2(this, key).get(key);
    }
    var _mapCacheGet = mapCacheGet$1;
    var getMapData$1 = _getMapData;
    function mapCacheHas$1(key) {
      return getMapData$1(this, key).has(key);
    }
    var _mapCacheHas = mapCacheHas$1;
    var getMapData = _getMapData;
    function mapCacheSet$1(key, value2) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value2);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    var _mapCacheSet = mapCacheSet$1;
    var mapCacheClear = _mapCacheClear, mapCacheDelete = _mapCacheDelete, mapCacheGet = _mapCacheGet, mapCacheHas = _mapCacheHas, mapCacheSet = _mapCacheSet;
    function MapCache$3(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache$3.prototype.clear = mapCacheClear;
    MapCache$3.prototype["delete"] = mapCacheDelete;
    MapCache$3.prototype.get = mapCacheGet;
    MapCache$3.prototype.has = mapCacheHas;
    MapCache$3.prototype.set = mapCacheSet;
    var _MapCache = MapCache$3;
    var ListCache$1 = _ListCache, Map$2 = _Map, MapCache$2 = _MapCache;
    var LARGE_ARRAY_SIZE = 200;
    function stackSet$1(key, value2) {
      var data = this.__data__;
      if (data instanceof ListCache$1) {
        var pairs = data.__data__;
        if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value2]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache$2(pairs);
      }
      data.set(key, value2);
      this.size = data.size;
      return this;
    }
    var _stackSet = stackSet$1;
    var ListCache = _ListCache, stackClear = _stackClear, stackDelete = _stackDelete, stackGet = _stackGet, stackHas = _stackHas, stackSet = _stackSet;
    function Stack$4(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    Stack$4.prototype.clear = stackClear;
    Stack$4.prototype["delete"] = stackDelete;
    Stack$4.prototype.get = stackGet;
    Stack$4.prototype.has = stackHas;
    Stack$4.prototype.set = stackSet;
    var _Stack = Stack$4;
    var getNative$4 = _getNative;
    var defineProperty$3 = function() {
      try {
        var func = getNative$4(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    var _defineProperty = defineProperty$3;
    var defineProperty$2 = _defineProperty;
    function baseAssignValue$4(object, key, value2) {
      if (key == "__proto__" && defineProperty$2) {
        defineProperty$2(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value2,
          "writable": true
        });
      } else {
        object[key] = value2;
      }
    }
    var _baseAssignValue = baseAssignValue$4;
    var baseAssignValue$3 = _baseAssignValue, eq$3 = eq_1;
    function assignMergeValue$2(object, key, value2) {
      if (value2 !== void 0 && !eq$3(object[key], value2) || value2 === void 0 && !(key in object)) {
        baseAssignValue$3(object, key, value2);
      }
    }
    var _assignMergeValue = assignMergeValue$2;
    function createBaseFor$1(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    var _createBaseFor = createBaseFor$1;
    var createBaseFor = _createBaseFor;
    var baseFor$2 = createBaseFor();
    var _baseFor = baseFor$2;
    var _cloneBuffer = { exports: {} };
    (function(module2, exports2) {
      var root2 = _root;
      var freeExports = exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root2.Buffer : void 0, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
      function cloneBuffer2(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
        buffer.copy(result);
        return result;
      }
      module2.exports = cloneBuffer2;
    })(_cloneBuffer, _cloneBuffer.exports);
    var root$5 = _root;
    var Uint8Array$2 = root$5.Uint8Array;
    var _Uint8Array = Uint8Array$2;
    var Uint8Array$1 = _Uint8Array;
    function cloneArrayBuffer$3(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
      return result;
    }
    var _cloneArrayBuffer = cloneArrayBuffer$3;
    var cloneArrayBuffer$2 = _cloneArrayBuffer;
    function cloneTypedArray$2(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer$2(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    var _cloneTypedArray = cloneTypedArray$2;
    function copyArray$2(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    var _copyArray = copyArray$2;
    var isObject$e = isObject_1;
    var objectCreate = Object.create;
    var baseCreate$1 = function() {
      function object() {
      }
      return function(proto2) {
        if (!isObject$e(proto2)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto2);
        }
        object.prototype = proto2;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    var _baseCreate = baseCreate$1;
    function overArg$2(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var _overArg = overArg$2;
    var overArg$1 = _overArg;
    var getPrototype$3 = overArg$1(Object.getPrototypeOf, Object);
    var _getPrototype = getPrototype$3;
    var objectProto$a = Object.prototype;
    function isPrototype$3(value2) {
      var Ctor = value2 && value2.constructor, proto2 = typeof Ctor == "function" && Ctor.prototype || objectProto$a;
      return value2 === proto2;
    }
    var _isPrototype = isPrototype$3;
    var baseCreate = _baseCreate, getPrototype$2 = _getPrototype, isPrototype$2 = _isPrototype;
    function initCloneObject$2(object) {
      return typeof object.constructor == "function" && !isPrototype$2(object) ? baseCreate(getPrototype$2(object)) : {};
    }
    var _initCloneObject = initCloneObject$2;
    function isObjectLike$9(value2) {
      return value2 != null && typeof value2 == "object";
    }
    var isObjectLike_1 = isObjectLike$9;
    var baseGetTag$4 = _baseGetTag, isObjectLike$8 = isObjectLike_1;
    var argsTag$3 = "[object Arguments]";
    function baseIsArguments$1(value2) {
      return isObjectLike$8(value2) && baseGetTag$4(value2) == argsTag$3;
    }
    var _baseIsArguments = baseIsArguments$1;
    var baseIsArguments = _baseIsArguments, isObjectLike$7 = isObjectLike_1;
    var objectProto$9 = Object.prototype;
    var hasOwnProperty$8 = objectProto$9.hasOwnProperty;
    var propertyIsEnumerable$1 = objectProto$9.propertyIsEnumerable;
    var isArguments$4 = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value2) {
      return isObjectLike$7(value2) && hasOwnProperty$8.call(value2, "callee") && !propertyIsEnumerable$1.call(value2, "callee");
    };
    var isArguments_1 = isArguments$4;
    var isArray$c = Array.isArray;
    var isArray_1 = isArray$c;
    var MAX_SAFE_INTEGER$1 = 9007199254740991;
    function isLength$3(value2) {
      return typeof value2 == "number" && value2 > -1 && value2 % 1 == 0 && value2 <= MAX_SAFE_INTEGER$1;
    }
    var isLength_1 = isLength$3;
    var isFunction$2 = isFunction_1, isLength$2 = isLength_1;
    function isArrayLike$4(value2) {
      return value2 != null && isLength$2(value2.length) && !isFunction$2(value2);
    }
    var isArrayLike_1 = isArrayLike$4;
    var isArrayLike$3 = isArrayLike_1, isObjectLike$6 = isObjectLike_1;
    function isArrayLikeObject$1(value2) {
      return isObjectLike$6(value2) && isArrayLike$3(value2);
    }
    var isArrayLikeObject_1 = isArrayLikeObject$1;
    var isBuffer$4 = { exports: {} };
    function stubFalse() {
      return false;
    }
    var stubFalse_1 = stubFalse;
    (function(module2, exports2) {
      var root2 = _root, stubFalse2 = stubFalse_1;
      var freeExports = exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root2.Buffer : void 0;
      var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
      var isBuffer2 = nativeIsBuffer || stubFalse2;
      module2.exports = isBuffer2;
    })(isBuffer$4, isBuffer$4.exports);
    var baseGetTag$3 = _baseGetTag, getPrototype$1 = _getPrototype, isObjectLike$5 = isObjectLike_1;
    var objectTag$4 = "[object Object]";
    var funcProto = Function.prototype, objectProto$8 = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty$7 = objectProto$8.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject$4(value2) {
      if (!isObjectLike$5(value2) || baseGetTag$3(value2) != objectTag$4) {
        return false;
      }
      var proto2 = getPrototype$1(value2);
      if (proto2 === null) {
        return true;
      }
      var Ctor = hasOwnProperty$7.call(proto2, "constructor") && proto2.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    var isPlainObject_1 = isPlainObject$4;
    var baseGetTag$2 = _baseGetTag, isLength$1 = isLength_1, isObjectLike$4 = isObjectLike_1;
    var argsTag$2 = "[object Arguments]", arrayTag$2 = "[object Array]", boolTag$3 = "[object Boolean]", dateTag$3 = "[object Date]", errorTag$2 = "[object Error]", funcTag$1 = "[object Function]", mapTag$5 = "[object Map]", numberTag$3 = "[object Number]", objectTag$3 = "[object Object]", regexpTag$3 = "[object RegExp]", setTag$5 = "[object Set]", stringTag$3 = "[object String]", weakMapTag$2 = "[object WeakMap]";
    var arrayBufferTag$3 = "[object ArrayBuffer]", dataViewTag$4 = "[object DataView]", float32Tag$2 = "[object Float32Array]", float64Tag$2 = "[object Float64Array]", int8Tag$2 = "[object Int8Array]", int16Tag$2 = "[object Int16Array]", int32Tag$2 = "[object Int32Array]", uint8Tag$2 = "[object Uint8Array]", uint8ClampedTag$2 = "[object Uint8ClampedArray]", uint16Tag$2 = "[object Uint16Array]", uint32Tag$2 = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
    typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$3] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] = typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$5] = typedArrayTags[numberTag$3] = typedArrayTags[objectTag$3] = typedArrayTags[regexpTag$3] = typedArrayTags[setTag$5] = typedArrayTags[stringTag$3] = typedArrayTags[weakMapTag$2] = false;
    function baseIsTypedArray$1(value2) {
      return isObjectLike$4(value2) && isLength$1(value2.length) && !!typedArrayTags[baseGetTag$2(value2)];
    }
    var _baseIsTypedArray = baseIsTypedArray$1;
    function baseUnary$3(func) {
      return function(value2) {
        return func(value2);
      };
    }
    var _baseUnary = baseUnary$3;
    var _nodeUtil = { exports: {} };
    (function(module2, exports2) {
      var freeGlobal2 = _freeGlobal;
      var freeExports = exports2 && !exports2.nodeType && exports2;
      var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal2.process;
      var nodeUtil2 = function() {
        try {
          var types2 = freeModule && freeModule.require && freeModule.require("util").types;
          if (types2) {
            return types2;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      module2.exports = nodeUtil2;
    })(_nodeUtil, _nodeUtil.exports);
    var baseIsTypedArray = _baseIsTypedArray, baseUnary$2 = _baseUnary, nodeUtil$2 = _nodeUtil.exports;
    var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray;
    var isTypedArray$3 = nodeIsTypedArray ? baseUnary$2(nodeIsTypedArray) : baseIsTypedArray;
    var isTypedArray_1 = isTypedArray$3;
    function safeGet$2(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    var _safeGet = safeGet$2;
    var baseAssignValue$2 = _baseAssignValue, eq$2 = eq_1;
    var objectProto$7 = Object.prototype;
    var hasOwnProperty$6 = objectProto$7.hasOwnProperty;
    function assignValue$3(object, key, value2) {
      var objValue = object[key];
      if (!(hasOwnProperty$6.call(object, key) && eq$2(objValue, value2)) || value2 === void 0 && !(key in object)) {
        baseAssignValue$2(object, key, value2);
      }
    }
    var _assignValue = assignValue$3;
    var assignValue$2 = _assignValue, baseAssignValue$1 = _baseAssignValue;
    function copyObject$6(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue$1(object, key, newValue);
        } else {
          assignValue$2(object, key, newValue);
        }
      }
      return object;
    }
    var _copyObject = copyObject$6;
    function baseTimes$1(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    var _baseTimes = baseTimes$1;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex$4(value2, length) {
      var type = typeof value2;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value2)) && (value2 > -1 && value2 % 1 == 0 && value2 < length);
    }
    var _isIndex = isIndex$4;
    var baseTimes = _baseTimes, isArguments$3 = isArguments_1, isArray$b = isArray_1, isBuffer$3 = isBuffer$4.exports, isIndex$3 = _isIndex, isTypedArray$2 = isTypedArray_1;
    var objectProto$6 = Object.prototype;
    var hasOwnProperty$5 = objectProto$6.hasOwnProperty;
    function arrayLikeKeys$2(value2, inherited) {
      var isArr = isArray$b(value2), isArg = !isArr && isArguments$3(value2), isBuff = !isArr && !isArg && isBuffer$3(value2), isType = !isArr && !isArg && !isBuff && isTypedArray$2(value2), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value2.length, String) : [], length = result.length;
      for (var key in value2) {
        if ((inherited || hasOwnProperty$5.call(value2, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex$3(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    var _arrayLikeKeys = arrayLikeKeys$2;
    function nativeKeysIn$1(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    var _nativeKeysIn = nativeKeysIn$1;
    var isObject$d = isObject_1, isPrototype$1 = _isPrototype, nativeKeysIn = _nativeKeysIn;
    var objectProto$5 = Object.prototype;
    var hasOwnProperty$4 = objectProto$5.hasOwnProperty;
    function baseKeysIn$1(object) {
      if (!isObject$d(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype$1(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty$4.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    var _baseKeysIn = baseKeysIn$1;
    var arrayLikeKeys$1 = _arrayLikeKeys, baseKeysIn = _baseKeysIn, isArrayLike$2 = isArrayLike_1;
    function keysIn$5(object) {
      return isArrayLike$2(object) ? arrayLikeKeys$1(object, true) : baseKeysIn(object);
    }
    var keysIn_1 = keysIn$5;
    var copyObject$5 = _copyObject, keysIn$4 = keysIn_1;
    function toPlainObject$1(value2) {
      return copyObject$5(value2, keysIn$4(value2));
    }
    var toPlainObject_1 = toPlainObject$1;
    var assignMergeValue$1 = _assignMergeValue, cloneBuffer$1 = _cloneBuffer.exports, cloneTypedArray$1 = _cloneTypedArray, copyArray$1 = _copyArray, initCloneObject$1 = _initCloneObject, isArguments$2 = isArguments_1, isArray$a = isArray_1, isArrayLikeObject = isArrayLikeObject_1, isBuffer$2 = isBuffer$4.exports, isFunction$1 = isFunction_1, isObject$c = isObject_1, isPlainObject$3 = isPlainObject_1, isTypedArray$1 = isTypedArray_1, safeGet$1 = _safeGet, toPlainObject = toPlainObject_1;
    function baseMergeDeep$1(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet$1(object, key), srcValue = safeGet$1(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue$1(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray$a(srcValue), isBuff = !isArr && isBuffer$2(srcValue), isTyped = !isArr && !isBuff && isTypedArray$1(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray$a(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray$1(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer$1(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray$1(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject$3(srcValue) || isArguments$2(srcValue)) {
          newValue = objValue;
          if (isArguments$2(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject$c(objValue) || isFunction$1(objValue)) {
            newValue = initCloneObject$1(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue$1(object, key, newValue);
    }
    var _baseMergeDeep = baseMergeDeep$1;
    var Stack$3 = _Stack, assignMergeValue = _assignMergeValue, baseFor$1 = _baseFor, baseMergeDeep = _baseMergeDeep, isObject$b = isObject_1, keysIn$3 = keysIn_1, safeGet = _safeGet;
    function baseMerge$2(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor$1(source, function(srcValue, key) {
        stack || (stack = new Stack$3());
        if (isObject$b(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge$2, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn$3);
    }
    var _baseMerge = baseMerge$2;
    function identity$3(value2) {
      return value2;
    }
    var identity_1 = identity$3;
    function apply$1(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    var _apply = apply$1;
    var apply = _apply;
    var nativeMax$2 = Math.max;
    function overRest$2(func, start, transform) {
      start = nativeMax$2(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax$2(args.length - start, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }
    var _overRest = overRest$2;
    function constant$1(value2) {
      return function() {
        return value2;
      };
    }
    var constant_1 = constant$1;
    var constant = constant_1, defineProperty$1 = _defineProperty, identity$2 = identity_1;
    var baseSetToString$1 = !defineProperty$1 ? identity$2 : function(func, string) {
      return defineProperty$1(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    var _baseSetToString = baseSetToString$1;
    var HOT_COUNT = 800, HOT_SPAN = 16;
    var nativeNow = Date.now;
    function shortOut$1(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    var _shortOut = shortOut$1;
    var baseSetToString = _baseSetToString, shortOut = _shortOut;
    var setToString$2 = shortOut(baseSetToString);
    var _setToString = setToString$2;
    var identity$1 = identity_1, overRest$1 = _overRest, setToString$1 = _setToString;
    function baseRest$1(func, start) {
      return setToString$1(overRest$1(func, start, identity$1), func + "");
    }
    var _baseRest = baseRest$1;
    var eq$1 = eq_1, isArrayLike$1 = isArrayLike_1, isIndex$2 = _isIndex, isObject$a = isObject_1;
    function isIterateeCall$2(value2, index, object) {
      if (!isObject$a(object)) {
        return false;
      }
      var type = typeof index;
      if (type == "number" ? isArrayLike$1(object) && isIndex$2(index, object.length) : type == "string" && index in object) {
        return eq$1(object[index], value2);
      }
      return false;
    }
    var _isIterateeCall = isIterateeCall$2;
    var baseRest = _baseRest, isIterateeCall$1 = _isIterateeCall;
    function createAssigner$2(assigner) {
      return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall$1(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }
    var _createAssigner = createAssigner$2;
    var baseMerge$1 = _baseMerge, createAssigner$1 = _createAssigner;
    var merge = createAssigner$1(function(object, source, srcIndex) {
      baseMerge$1(object, source, srcIndex);
    });
    var merge_1 = merge;
    var query_builder_seed = 0;
    const uuid$2 = function() {
      var timePart = (new Date().getTime().toString(16) + "FF").substr(0, 11);
      var s = "ssssssss-xxxx-4xxx-yxxx-x".replace(/[xys]/g, function(c) {
        var r = c === "s" ? Math.floor(Math.random() * 16) : query_builder_seed++ & 15;
        var v = c === "x" ? r : r & 3 | 8;
        return v.toString(16);
      });
      return s + timePart;
    };
    var baseMerge = _baseMerge, createAssigner = _createAssigner;
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });
    var mergeWith_1 = mergeWith;
    var settings$3 = {
      formatField: function formatField2(field, parts, label2, fieldDefinition, config2, isForDisplay) {
        if (isForDisplay)
          return label2;
        else
          return field;
      },
      valueSourcesInfo: {
        value: {}
      },
      fieldSeparator: ".",
      fieldSeparatorDisplay: ".",
      canReorder: true,
      canRegroup: true,
      canDeleteLocked: false,
      canLeaveEmptyGroup: true,
      shouldCreateEmptyGroup: false,
      canShortMongoQuery: true,
      removeEmptyGroupsOnLoad: true,
      removeIncompleteRulesOnLoad: true,
      removeInvalidMultiSelectValuesOnLoad: true,
      setOpOnChangeField: ["keep", "default"],
      groupOperators: ["some", "all", "none"],
      defaultGroupConjunction: "AND",
      locale: {
        moment: "en"
      },
      valueLabel: "Value",
      valuePlaceholder: "Value",
      fieldLabel: "Field",
      operatorLabel: "Operator",
      funcLabel: "Function",
      fieldPlaceholder: "Select field",
      funcPlaceholder: "Select function",
      operatorPlaceholder: "Select operator",
      lockLabel: "Lock",
      lockedLabel: "Locked",
      deleteLabel: null,
      addGroupLabel: "Add group",
      addCaseLabel: "Add condition",
      addDefaultCaseLabel: "Add default condition",
      defaultCaseLabel: "Default:",
      addRuleLabel: "Add rule",
      addSubRuleLabel: "Add sub rule",
      delGroupLabel: "",
      notLabel: "Not",
      valueSourcesPopupTitle: "Select value source",
      removeRuleConfirmOptions: null,
      removeGroupConfirmOptions: null
    };
    //! moment.js
    //! version : 2.29.4
    //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
    //! license : MIT
    //! momentjs.com
    var hookCallback;
    function hooks() {
      return hookCallback.apply(null, arguments);
    }
    function setHookCallback(callback) {
      hookCallback = callback;
    }
    function isArray$9(input) {
      return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
    }
    function isObject$9(input) {
      return input != null && Object.prototype.toString.call(input) === "[object Object]";
    }
    function hasOwnProp(a, b) {
      return Object.prototype.hasOwnProperty.call(a, b);
    }
    function isObjectEmpty(obj) {
      if (Object.getOwnPropertyNames) {
        return Object.getOwnPropertyNames(obj).length === 0;
      } else {
        var k;
        for (k in obj) {
          if (hasOwnProp(obj, k)) {
            return false;
          }
        }
        return true;
      }
    }
    function isUndefined(input) {
      return input === void 0;
    }
    function isNumber(input) {
      return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
    }
    function isDate$1(input) {
      return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
    }
    function map(arr, fn) {
      var res = [], i, arrLen = arr.length;
      for (i = 0; i < arrLen; ++i) {
        res.push(fn(arr[i], i));
      }
      return res;
    }
    function extend(a, b) {
      for (var i in b) {
        if (hasOwnProp(b, i)) {
          a[i] = b[i];
        }
      }
      if (hasOwnProp(b, "toString")) {
        a.toString = b.toString;
      }
      if (hasOwnProp(b, "valueOf")) {
        a.valueOf = b.valueOf;
      }
      return a;
    }
    function createUTC(input, format2, locale2, strict) {
      return createLocalOrUTC(input, format2, locale2, strict, true).utc();
    }
    function defaultParsingFlags() {
      return {
        empty: false,
        unusedTokens: [],
        unusedInput: [],
        overflow: -2,
        charsLeftOver: 0,
        nullInput: false,
        invalidEra: null,
        invalidMonth: null,
        invalidFormat: false,
        userInvalidated: false,
        iso: false,
        parsedDateParts: [],
        era: null,
        meridiem: null,
        rfc2822: false,
        weekdayMismatch: false
      };
    }
    function getParsingFlags(m) {
      if (m._pf == null) {
        m._pf = defaultParsingFlags();
      }
      return m._pf;
    }
    var some;
    if (Array.prototype.some) {
      some = Array.prototype.some;
    } else {
      some = function(fun) {
        var t = Object(this), len = t.length >>> 0, i;
        for (i = 0; i < len; i++) {
          if (i in t && fun.call(this, t[i], i, t)) {
            return true;
          }
        }
        return false;
      };
    }
    function isValid(m) {
      if (m._isValid == null) {
        var flags = getParsingFlags(m), parsedParts = some.call(flags.parsedDateParts, function(i) {
          return i != null;
        }), isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
        if (m._strict) {
          isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
        }
        if (Object.isFrozen == null || !Object.isFrozen(m)) {
          m._isValid = isNowValid;
        } else {
          return isNowValid;
        }
      }
      return m._isValid;
    }
    function createInvalid(flags) {
      var m = createUTC(NaN);
      if (flags != null) {
        extend(getParsingFlags(m), flags);
      } else {
        getParsingFlags(m).userInvalidated = true;
      }
      return m;
    }
    var momentProperties = hooks.momentProperties = [], updateInProgress = false;
    function copyConfig(to2, from2) {
      var i, prop, val, momentPropertiesLen = momentProperties.length;
      if (!isUndefined(from2._isAMomentObject)) {
        to2._isAMomentObject = from2._isAMomentObject;
      }
      if (!isUndefined(from2._i)) {
        to2._i = from2._i;
      }
      if (!isUndefined(from2._f)) {
        to2._f = from2._f;
      }
      if (!isUndefined(from2._l)) {
        to2._l = from2._l;
      }
      if (!isUndefined(from2._strict)) {
        to2._strict = from2._strict;
      }
      if (!isUndefined(from2._tzm)) {
        to2._tzm = from2._tzm;
      }
      if (!isUndefined(from2._isUTC)) {
        to2._isUTC = from2._isUTC;
      }
      if (!isUndefined(from2._offset)) {
        to2._offset = from2._offset;
      }
      if (!isUndefined(from2._pf)) {
        to2._pf = getParsingFlags(from2);
      }
      if (!isUndefined(from2._locale)) {
        to2._locale = from2._locale;
      }
      if (momentPropertiesLen > 0) {
        for (i = 0; i < momentPropertiesLen; i++) {
          prop = momentProperties[i];
          val = from2[prop];
          if (!isUndefined(val)) {
            to2[prop] = val;
          }
        }
      }
      return to2;
    }
    function Moment(config2) {
      copyConfig(this, config2);
      this._d = new Date(config2._d != null ? config2._d.getTime() : NaN);
      if (!this.isValid()) {
        this._d = new Date(NaN);
      }
      if (updateInProgress === false) {
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
      }
    }
    function isMoment(obj) {
      return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }
    function warn(msg) {
      if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
        console.warn("Deprecation warning: " + msg);
      }
    }
    function deprecate(msg, fn) {
      var firstTime = true;
      return extend(function() {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(null, msg);
        }
        if (firstTime) {
          var args = [], arg, i, key, argLen = arguments.length;
          for (i = 0; i < argLen; i++) {
            arg = "";
            if (typeof arguments[i] === "object") {
              arg += "\n[" + i + "] ";
              for (key in arguments[0]) {
                if (hasOwnProp(arguments[0], key)) {
                  arg += key + ": " + arguments[0][key] + ", ";
                }
              }
              arg = arg.slice(0, -2);
            } else {
              arg = arguments[i];
            }
            args.push(arg);
          }
          warn(
            msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack
          );
          firstTime = false;
        }
        return fn.apply(this, arguments);
      }, fn);
    }
    var deprecations = {};
    function deprecateSimple(name, msg) {
      if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(name, msg);
      }
      if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true;
      }
    }
    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;
    function isFunction(input) {
      return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
    }
    function set(config2) {
      var prop, i;
      for (i in config2) {
        if (hasOwnProp(config2, i)) {
          prop = config2[i];
          if (isFunction(prop)) {
            this[i] = prop;
          } else {
            this["_" + i] = prop;
          }
        }
      }
      this._config = config2;
      this._dayOfMonthOrdinalParseLenient = new RegExp(
        (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
      );
    }
    function mergeConfigs(parentConfig, childConfig) {
      var res = extend({}, parentConfig), prop;
      for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
          if (isObject$9(parentConfig[prop]) && isObject$9(childConfig[prop])) {
            res[prop] = {};
            extend(res[prop], parentConfig[prop]);
            extend(res[prop], childConfig[prop]);
          } else if (childConfig[prop] != null) {
            res[prop] = childConfig[prop];
          } else {
            delete res[prop];
          }
        }
      }
      for (prop in parentConfig) {
        if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject$9(parentConfig[prop])) {
          res[prop] = extend({}, res[prop]);
        }
      }
      return res;
    }
    function Locale(config2) {
      if (config2 != null) {
        this.set(config2);
      }
    }
    var keys$6;
    if (Object.keys) {
      keys$6 = Object.keys;
    } else {
      keys$6 = function(obj) {
        var i, res = [];
        for (i in obj) {
          if (hasOwnProp(obj, i)) {
            res.push(i);
          }
        }
        return res;
      };
    }
    var defaultCalendar = {
      sameDay: "[Today at] LT",
      nextDay: "[Tomorrow at] LT",
      nextWeek: "dddd [at] LT",
      lastDay: "[Yesterday at] LT",
      lastWeek: "[Last] dddd [at] LT",
      sameElse: "L"
    };
    function calendar(key, mom, now2) {
      var output = this._calendar[key] || this._calendar["sameElse"];
      return isFunction(output) ? output.call(mom, now2) : output;
    }
    function zeroFill(number, targetLength, forceSign) {
      var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
      return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }
    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
    function addFormatToken(token2, padded, ordinal2, callback) {
      var func = callback;
      if (typeof callback === "string") {
        func = function() {
          return this[callback]();
        };
      }
      if (token2) {
        formatTokenFunctions[token2] = func;
      }
      if (padded) {
        formatTokenFunctions[padded[0]] = function() {
          return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
      }
      if (ordinal2) {
        formatTokenFunctions[ordinal2] = function() {
          return this.localeData().ordinal(
            func.apply(this, arguments),
            token2
          );
        };
      }
    }
    function removeFormattingTokens(input) {
      if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, "");
      }
      return input.replace(/\\/g, "");
    }
    function makeFormatFunction(format2) {
      var array = format2.match(formattingTokens), i, length;
      for (i = 0, length = array.length; i < length; i++) {
        if (formatTokenFunctions[array[i]]) {
          array[i] = formatTokenFunctions[array[i]];
        } else {
          array[i] = removeFormattingTokens(array[i]);
        }
      }
      return function(mom) {
        var output = "", i2;
        for (i2 = 0; i2 < length; i2++) {
          output += isFunction(array[i2]) ? array[i2].call(mom, format2) : array[i2];
        }
        return output;
      };
    }
    function formatMoment(m, format2) {
      if (!m.isValid()) {
        return m.localeData().invalidDate();
      }
      format2 = expandFormat(format2, m.localeData());
      formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
      return formatFunctions[format2](m);
    }
    function expandFormat(format2, locale2) {
      var i = 5;
      function replaceLongDateFormatTokens(input) {
        return locale2.longDateFormat(input) || input;
      }
      localFormattingTokens.lastIndex = 0;
      while (i >= 0 && localFormattingTokens.test(format2)) {
        format2 = format2.replace(
          localFormattingTokens,
          replaceLongDateFormatTokens
        );
        localFormattingTokens.lastIndex = 0;
        i -= 1;
      }
      return format2;
    }
    var defaultLongDateFormat = {
      LTS: "h:mm:ss A",
      LT: "h:mm A",
      L: "MM/DD/YYYY",
      LL: "MMMM D, YYYY",
      LLL: "MMMM D, YYYY h:mm A",
      LLLL: "dddd, MMMM D, YYYY h:mm A"
    };
    function longDateFormat(key) {
      var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
      if (format2 || !formatUpper) {
        return format2;
      }
      this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
        if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
          return tok.slice(1);
        }
        return tok;
      }).join("");
      return this._longDateFormat[key];
    }
    var defaultInvalidDate = "Invalid date";
    function invalidDate() {
      return this._invalidDate;
    }
    var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
    function ordinal(number) {
      return this._ordinal.replace("%d", number);
    }
    var defaultRelativeTime = {
      future: "in %s",
      past: "%s ago",
      s: "a few seconds",
      ss: "%d seconds",
      m: "a minute",
      mm: "%d minutes",
      h: "an hour",
      hh: "%d hours",
      d: "a day",
      dd: "%d days",
      w: "a week",
      ww: "%d weeks",
      M: "a month",
      MM: "%d months",
      y: "a year",
      yy: "%d years"
    };
    function relativeTime(number, withoutSuffix, string, isFuture) {
      var output = this._relativeTime[string];
      return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }
    function pastFuture(diff2, output) {
      var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
      return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
    }
    var aliases = {};
    function addUnitAlias(unit, shorthand) {
      var lowerCase = unit.toLowerCase();
      aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
    }
    function normalizeUnits(units) {
      return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
    }
    function normalizeObjectUnits(inputObject) {
      var normalizedInput = {}, normalizedProp, prop;
      for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
          normalizedProp = normalizeUnits(prop);
          if (normalizedProp) {
            normalizedInput[normalizedProp] = inputObject[prop];
          }
        }
      }
      return normalizedInput;
    }
    var priorities = {};
    function addUnitPriority(unit, priority) {
      priorities[unit] = priority;
    }
    function getPrioritizedUnits(unitsObj) {
      var units = [], u;
      for (u in unitsObj) {
        if (hasOwnProp(unitsObj, u)) {
          units.push({ unit: u, priority: priorities[u] });
        }
      }
      units.sort(function(a, b) {
        return a.priority - b.priority;
      });
      return units;
    }
    function isLeapYear(year) {
      return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }
    function absFloor(number) {
      if (number < 0) {
        return Math.ceil(number) || 0;
      } else {
        return Math.floor(number);
      }
    }
    function toInt(argumentForCoercion) {
      var coercedNumber = +argumentForCoercion, value2 = 0;
      if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value2 = absFloor(coercedNumber);
      }
      return value2;
    }
    function makeGetSet(unit, keepTime) {
      return function(value2) {
        if (value2 != null) {
          set$1(this, unit, value2);
          hooks.updateOffset(this, keepTime);
          return this;
        } else {
          return get$2(this, unit);
        }
      };
    }
    function get$2(mom, unit) {
      return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
    }
    function set$1(mom, unit, value2) {
      if (mom.isValid() && !isNaN(value2)) {
        if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
          value2 = toInt(value2);
          mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](
            value2,
            mom.month(),
            daysInMonth(value2, mom.month())
          );
        } else {
          mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value2);
        }
      }
    }
    function stringGet(units) {
      units = normalizeUnits(units);
      if (isFunction(this[units])) {
        return this[units]();
      }
      return this;
    }
    function stringSet(units, value2) {
      if (typeof units === "object") {
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units), i, prioritizedLen = prioritized.length;
        for (i = 0; i < prioritizedLen; i++) {
          this[prioritized[i].unit](units[prioritized[i].unit]);
        }
      } else {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
          return this[units](value2);
        }
      }
      return this;
    }
    var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
    regexes = {};
    function addRegexToken(token2, regex, strictRegex) {
      regexes[token2] = isFunction(regex) ? regex : function(isStrict, localeData2) {
        return isStrict && strictRegex ? strictRegex : regex;
      };
    }
    function getParseRegexForToken(token2, config2) {
      if (!hasOwnProp(regexes, token2)) {
        return new RegExp(unescapeFormat(token2));
      }
      return regexes[token2](config2._strict, config2._locale);
    }
    function unescapeFormat(s) {
      return regexEscape(
        s.replace("\\", "").replace(
          /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
          function(matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
          }
        )
      );
    }
    function regexEscape(s) {
      return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
    }
    var tokens = {};
    function addParseToken(token2, callback) {
      var i, func = callback, tokenLen;
      if (typeof token2 === "string") {
        token2 = [token2];
      }
      if (isNumber(callback)) {
        func = function(input, array) {
          array[callback] = toInt(input);
        };
      }
      tokenLen = token2.length;
      for (i = 0; i < tokenLen; i++) {
        tokens[token2[i]] = func;
      }
    }
    function addWeekParseToken(token2, callback) {
      addParseToken(token2, function(input, array, config2, token3) {
        config2._w = config2._w || {};
        callback(input, config2._w, config2, token3);
      });
    }
    function addTimeToArrayFromToken(token2, input, config2) {
      if (input != null && hasOwnProp(tokens, token2)) {
        tokens[token2](input, config2._a, config2, token2);
      }
    }
    var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
    function mod(n, x) {
      return (n % x + x) % x;
    }
    var indexOf;
    if (Array.prototype.indexOf) {
      indexOf = Array.prototype.indexOf;
    } else {
      indexOf = function(o) {
        var i;
        for (i = 0; i < this.length; ++i) {
          if (this[i] === o) {
            return i;
          }
        }
        return -1;
      };
    }
    function daysInMonth(year, month) {
      if (isNaN(year) || isNaN(month)) {
        return NaN;
      }
      var modMonth = mod(month, 12);
      year += (month - modMonth) / 12;
      return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
    }
    addFormatToken("M", ["MM", 2], "Mo", function() {
      return this.month() + 1;
    });
    addFormatToken("MMM", 0, 0, function(format2) {
      return this.localeData().monthsShort(this, format2);
    });
    addFormatToken("MMMM", 0, 0, function(format2) {
      return this.localeData().months(this, format2);
    });
    addUnitAlias("month", "M");
    addUnitPriority("month", 8);
    addRegexToken("M", match1to2);
    addRegexToken("MM", match1to2, match2);
    addRegexToken("MMM", function(isStrict, locale2) {
      return locale2.monthsShortRegex(isStrict);
    });
    addRegexToken("MMMM", function(isStrict, locale2) {
      return locale2.monthsRegex(isStrict);
    });
    addParseToken(["M", "MM"], function(input, array) {
      array[MONTH] = toInt(input) - 1;
    });
    addParseToken(["MMM", "MMMM"], function(input, array, config2, token2) {
      var month = config2._locale.monthsParse(input, token2, config2._strict);
      if (month != null) {
        array[MONTH] = month;
      } else {
        getParsingFlags(config2).invalidMonth = input;
      }
    });
    var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split(
      "_"
    ), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
    function localeMonths(m, format2) {
      if (!m) {
        return isArray$9(this._months) ? this._months : this._months["standalone"];
      }
      return isArray$9(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m.month()];
    }
    function localeMonthsShort(m, format2) {
      if (!m) {
        return isArray$9(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
      }
      return isArray$9(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m.month()];
    }
    function handleStrictParse(monthName, format2, strict) {
      var i, ii, mom, llc = monthName.toLocaleLowerCase();
      if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i = 0; i < 12; ++i) {
          mom = createUTC([2e3, i]);
          this._shortMonthsParse[i] = this.monthsShort(
            mom,
            ""
          ).toLocaleLowerCase();
          this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
        }
      }
      if (strict) {
        if (format2 === "MMM") {
          ii = indexOf.call(this._shortMonthsParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._longMonthsParse, llc);
          return ii !== -1 ? ii : null;
        }
      } else {
        if (format2 === "MMM") {
          ii = indexOf.call(this._shortMonthsParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._longMonthsParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._longMonthsParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._shortMonthsParse, llc);
          return ii !== -1 ? ii : null;
        }
      }
    }
    function localeMonthsParse(monthName, format2, strict) {
      var i, mom, regex;
      if (this._monthsParseExact) {
        return handleStrictParse.call(this, monthName, format2, strict);
      }
      if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
      }
      for (i = 0; i < 12; i++) {
        mom = createUTC([2e3, i]);
        if (strict && !this._longMonthsParse[i]) {
          this._longMonthsParse[i] = new RegExp(
            "^" + this.months(mom, "").replace(".", "") + "$",
            "i"
          );
          this._shortMonthsParse[i] = new RegExp(
            "^" + this.monthsShort(mom, "").replace(".", "") + "$",
            "i"
          );
        }
        if (!strict && !this._monthsParse[i]) {
          regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
          this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
        }
        if (strict && format2 === "MMMM" && this._longMonthsParse[i].test(monthName)) {
          return i;
        } else if (strict && format2 === "MMM" && this._shortMonthsParse[i].test(monthName)) {
          return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
          return i;
        }
      }
    }
    function setMonth(mom, value2) {
      var dayOfMonth;
      if (!mom.isValid()) {
        return mom;
      }
      if (typeof value2 === "string") {
        if (/^\d+$/.test(value2)) {
          value2 = toInt(value2);
        } else {
          value2 = mom.localeData().monthsParse(value2);
          if (!isNumber(value2)) {
            return mom;
          }
        }
      }
      dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value2));
      mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value2, dayOfMonth);
      return mom;
    }
    function getSetMonth(value2) {
      if (value2 != null) {
        setMonth(this, value2);
        hooks.updateOffset(this, true);
        return this;
      } else {
        return get$2(this, "Month");
      }
    }
    function getDaysInMonth() {
      return daysInMonth(this.year(), this.month());
    }
    function monthsShortRegex(isStrict) {
      if (this._monthsParseExact) {
        if (!hasOwnProp(this, "_monthsRegex")) {
          computeMonthsParse.call(this);
        }
        if (isStrict) {
          return this._monthsShortStrictRegex;
        } else {
          return this._monthsShortRegex;
        }
      } else {
        if (!hasOwnProp(this, "_monthsShortRegex")) {
          this._monthsShortRegex = defaultMonthsShortRegex;
        }
        return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
      }
    }
    function monthsRegex(isStrict) {
      if (this._monthsParseExact) {
        if (!hasOwnProp(this, "_monthsRegex")) {
          computeMonthsParse.call(this);
        }
        if (isStrict) {
          return this._monthsStrictRegex;
        } else {
          return this._monthsRegex;
        }
      } else {
        if (!hasOwnProp(this, "_monthsRegex")) {
          this._monthsRegex = defaultMonthsRegex;
        }
        return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
      }
    }
    function computeMonthsParse() {
      function cmpLenRev(a, b) {
        return b.length - a.length;
      }
      var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
      for (i = 0; i < 12; i++) {
        mom = createUTC([2e3, i]);
        shortPieces.push(this.monthsShort(mom, ""));
        longPieces.push(this.months(mom, ""));
        mixedPieces.push(this.months(mom, ""));
        mixedPieces.push(this.monthsShort(mom, ""));
      }
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      for (i = 0; i < 12; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
      }
      for (i = 0; i < 24; i++) {
        mixedPieces[i] = regexEscape(mixedPieces[i]);
      }
      this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
      this._monthsShortRegex = this._monthsRegex;
      this._monthsStrictRegex = new RegExp(
        "^(" + longPieces.join("|") + ")",
        "i"
      );
      this._monthsShortStrictRegex = new RegExp(
        "^(" + shortPieces.join("|") + ")",
        "i"
      );
    }
    addFormatToken("Y", 0, 0, function() {
      var y = this.year();
      return y <= 9999 ? zeroFill(y, 4) : "+" + y;
    });
    addFormatToken(0, ["YY", 2], 0, function() {
      return this.year() % 100;
    });
    addFormatToken(0, ["YYYY", 4], 0, "year");
    addFormatToken(0, ["YYYYY", 5], 0, "year");
    addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
    addUnitAlias("year", "y");
    addUnitPriority("year", 1);
    addRegexToken("Y", matchSigned);
    addRegexToken("YY", match1to2, match2);
    addRegexToken("YYYY", match1to4, match4);
    addRegexToken("YYYYY", match1to6, match6);
    addRegexToken("YYYYYY", match1to6, match6);
    addParseToken(["YYYYY", "YYYYYY"], YEAR);
    addParseToken("YYYY", function(input, array) {
      array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken("YY", function(input, array) {
      array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken("Y", function(input, array) {
      array[YEAR] = parseInt(input, 10);
    });
    function daysInYear(year) {
      return isLeapYear(year) ? 366 : 365;
    }
    hooks.parseTwoDigitYear = function(input) {
      return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
    };
    var getSetYear = makeGetSet("FullYear", true);
    function getIsLeapYear() {
      return isLeapYear(this.year());
    }
    function createDate(y, m, d, h, M, s, ms) {
      var date;
      if (y < 100 && y >= 0) {
        date = new Date(y + 400, m, d, h, M, s, ms);
        if (isFinite(date.getFullYear())) {
          date.setFullYear(y);
        }
      } else {
        date = new Date(y, m, d, h, M, s, ms);
      }
      return date;
    }
    function createUTCDate(y) {
      var date, args;
      if (y < 100 && y >= 0) {
        args = Array.prototype.slice.call(arguments);
        args[0] = y + 400;
        date = new Date(Date.UTC.apply(null, args));
        if (isFinite(date.getUTCFullYear())) {
          date.setUTCFullYear(y);
        }
      } else {
        date = new Date(Date.UTC.apply(null, arguments));
      }
      return date;
    }
    function firstWeekOffset(year, dow, doy) {
      var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
      return -fwdlw + fwd - 1;
    }
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
      var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
      if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear;
      } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year);
      } else {
        resYear = year;
        resDayOfYear = dayOfYear;
      }
      return {
        year: resYear,
        dayOfYear: resDayOfYear
      };
    }
    function weekOfYear(mom, dow, doy) {
      var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
      if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy);
      } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1;
      } else {
        resYear = mom.year();
        resWeek = week;
      }
      return {
        week: resWeek,
        year: resYear
      };
    }
    function weeksInYear(year, dow, doy) {
      var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
      return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }
    addFormatToken("w", ["ww", 2], "wo", "week");
    addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
    addUnitAlias("week", "w");
    addUnitAlias("isoWeek", "W");
    addUnitPriority("week", 5);
    addUnitPriority("isoWeek", 5);
    addRegexToken("w", match1to2);
    addRegexToken("ww", match1to2, match2);
    addRegexToken("W", match1to2);
    addRegexToken("WW", match1to2, match2);
    addWeekParseToken(
      ["w", "ww", "W", "WW"],
      function(input, week, config2, token2) {
        week[token2.substr(0, 1)] = toInt(input);
      }
    );
    function localeWeek(mom) {
      return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }
    var defaultLocaleWeek = {
      dow: 0,
      doy: 6
    };
    function localeFirstDayOfWeek() {
      return this._week.dow;
    }
    function localeFirstDayOfYear() {
      return this._week.doy;
    }
    function getSetWeek(input) {
      var week = this.localeData().week(this);
      return input == null ? week : this.add((input - week) * 7, "d");
    }
    function getSetISOWeek(input) {
      var week = weekOfYear(this, 1, 4).week;
      return input == null ? week : this.add((input - week) * 7, "d");
    }
    addFormatToken("d", 0, "do", "day");
    addFormatToken("dd", 0, 0, function(format2) {
      return this.localeData().weekdaysMin(this, format2);
    });
    addFormatToken("ddd", 0, 0, function(format2) {
      return this.localeData().weekdaysShort(this, format2);
    });
    addFormatToken("dddd", 0, 0, function(format2) {
      return this.localeData().weekdays(this, format2);
    });
    addFormatToken("e", 0, 0, "weekday");
    addFormatToken("E", 0, 0, "isoWeekday");
    addUnitAlias("day", "d");
    addUnitAlias("weekday", "e");
    addUnitAlias("isoWeekday", "E");
    addUnitPriority("day", 11);
    addUnitPriority("weekday", 11);
    addUnitPriority("isoWeekday", 11);
    addRegexToken("d", match1to2);
    addRegexToken("e", match1to2);
    addRegexToken("E", match1to2);
    addRegexToken("dd", function(isStrict, locale2) {
      return locale2.weekdaysMinRegex(isStrict);
    });
    addRegexToken("ddd", function(isStrict, locale2) {
      return locale2.weekdaysShortRegex(isStrict);
    });
    addRegexToken("dddd", function(isStrict, locale2) {
      return locale2.weekdaysRegex(isStrict);
    });
    addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config2, token2) {
      var weekday = config2._locale.weekdaysParse(input, token2, config2._strict);
      if (weekday != null) {
        week.d = weekday;
      } else {
        getParsingFlags(config2).invalidWeekday = input;
      }
    });
    addWeekParseToken(["d", "e", "E"], function(input, week, config2, token2) {
      week[token2] = toInt(input);
    });
    function parseWeekday(input, locale2) {
      if (typeof input !== "string") {
        return input;
      }
      if (!isNaN(input)) {
        return parseInt(input, 10);
      }
      input = locale2.weekdaysParse(input);
      if (typeof input === "number") {
        return input;
      }
      return null;
    }
    function parseIsoWeekday(input, locale2) {
      if (typeof input === "string") {
        return locale2.weekdaysParse(input) % 7 || 7;
      }
      return isNaN(input) ? null : input;
    }
    function shiftWeekdays(ws, n) {
      return ws.slice(n, 7).concat(ws.slice(0, n));
    }
    var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
    function localeWeekdays(m, format2) {
      var weekdays = isArray$9(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
      return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
    }
    function localeWeekdaysShort(m) {
      return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }
    function localeWeekdaysMin(m) {
      return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }
    function handleStrictParse$1(weekdayName, format2, strict) {
      var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
      if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];
        for (i = 0; i < 7; ++i) {
          mom = createUTC([2e3, 1]).day(i);
          this._minWeekdaysParse[i] = this.weekdaysMin(
            mom,
            ""
          ).toLocaleLowerCase();
          this._shortWeekdaysParse[i] = this.weekdaysShort(
            mom,
            ""
          ).toLocaleLowerCase();
          this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
        }
      }
      if (strict) {
        if (format2 === "dddd") {
          ii = indexOf.call(this._weekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else if (format2 === "ddd") {
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._minWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        }
      } else {
        if (format2 === "dddd") {
          ii = indexOf.call(this._weekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._minWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else if (format2 === "ddd") {
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._weekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._minWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        } else {
          ii = indexOf.call(this._minWeekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._weekdaysParse, llc);
          if (ii !== -1) {
            return ii;
          }
          ii = indexOf.call(this._shortWeekdaysParse, llc);
          return ii !== -1 ? ii : null;
        }
      }
    }
    function localeWeekdaysParse(weekdayName, format2, strict) {
      var i, mom, regex;
      if (this._weekdaysParseExact) {
        return handleStrictParse$1.call(this, weekdayName, format2, strict);
      }
      if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
      }
      for (i = 0; i < 7; i++) {
        mom = createUTC([2e3, 1]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) {
          this._fullWeekdaysParse[i] = new RegExp(
            "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
            "i"
          );
          this._shortWeekdaysParse[i] = new RegExp(
            "^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$",
            "i"
          );
          this._minWeekdaysParse[i] = new RegExp(
            "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
            "i"
          );
        }
        if (!this._weekdaysParse[i]) {
          regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
          this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
        }
        if (strict && format2 === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) {
          return i;
        } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) {
          return i;
        } else if (strict && format2 === "dd" && this._minWeekdaysParse[i].test(weekdayName)) {
          return i;
        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
          return i;
        }
      }
    }
    function getSetDayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
      if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, "d");
      } else {
        return day;
      }
    }
    function getSetLocaleDayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
      return input == null ? weekday : this.add(input - weekday, "d");
    }
    function getSetISODayOfWeek(input) {
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      if (input != null) {
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
      } else {
        return this.day() || 7;
      }
    }
    function weekdaysRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysStrictRegex;
        } else {
          return this._weekdaysRegex;
        }
      } else {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          this._weekdaysRegex = defaultWeekdaysRegex;
        }
        return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
      }
    }
    function weekdaysShortRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysShortStrictRegex;
        } else {
          return this._weekdaysShortRegex;
        }
      } else {
        if (!hasOwnProp(this, "_weekdaysShortRegex")) {
          this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        }
        return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
      }
    }
    function weekdaysMinRegex(isStrict) {
      if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, "_weekdaysRegex")) {
          computeWeekdaysParse.call(this);
        }
        if (isStrict) {
          return this._weekdaysMinStrictRegex;
        } else {
          return this._weekdaysMinRegex;
        }
      } else {
        if (!hasOwnProp(this, "_weekdaysMinRegex")) {
          this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        }
        return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
      }
    }
    function computeWeekdaysParse() {
      function cmpLenRev(a, b) {
        return b.length - a.length;
      }
      var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
      for (i = 0; i < 7; i++) {
        mom = createUTC([2e3, 1]).day(i);
        minp = regexEscape(this.weekdaysMin(mom, ""));
        shortp = regexEscape(this.weekdaysShort(mom, ""));
        longp = regexEscape(this.weekdays(mom, ""));
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
      }
      minPieces.sort(cmpLenRev);
      shortPieces.sort(cmpLenRev);
      longPieces.sort(cmpLenRev);
      mixedPieces.sort(cmpLenRev);
      this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
      this._weekdaysShortRegex = this._weekdaysRegex;
      this._weekdaysMinRegex = this._weekdaysRegex;
      this._weekdaysStrictRegex = new RegExp(
        "^(" + longPieces.join("|") + ")",
        "i"
      );
      this._weekdaysShortStrictRegex = new RegExp(
        "^(" + shortPieces.join("|") + ")",
        "i"
      );
      this._weekdaysMinStrictRegex = new RegExp(
        "^(" + minPieces.join("|") + ")",
        "i"
      );
    }
    function hFormat() {
      return this.hours() % 12 || 12;
    }
    function kFormat() {
      return this.hours() || 24;
    }
    addFormatToken("H", ["HH", 2], 0, "hour");
    addFormatToken("h", ["hh", 2], 0, hFormat);
    addFormatToken("k", ["kk", 2], 0, kFormat);
    addFormatToken("hmm", 0, 0, function() {
      return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });
    addFormatToken("hmmss", 0, 0, function() {
      return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    addFormatToken("Hmm", 0, 0, function() {
      return "" + this.hours() + zeroFill(this.minutes(), 2);
    });
    addFormatToken("Hmmss", 0, 0, function() {
      return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    function meridiem(token2, lowercase) {
      addFormatToken(token2, 0, 0, function() {
        return this.localeData().meridiem(
          this.hours(),
          this.minutes(),
          lowercase
        );
      });
    }
    meridiem("a", true);
    meridiem("A", false);
    addUnitAlias("hour", "h");
    addUnitPriority("hour", 13);
    function matchMeridiem(isStrict, locale2) {
      return locale2._meridiemParse;
    }
    addRegexToken("a", matchMeridiem);
    addRegexToken("A", matchMeridiem);
    addRegexToken("H", match1to2);
    addRegexToken("h", match1to2);
    addRegexToken("k", match1to2);
    addRegexToken("HH", match1to2, match2);
    addRegexToken("hh", match1to2, match2);
    addRegexToken("kk", match1to2, match2);
    addRegexToken("hmm", match3to4);
    addRegexToken("hmmss", match5to6);
    addRegexToken("Hmm", match3to4);
    addRegexToken("Hmmss", match5to6);
    addParseToken(["H", "HH"], HOUR);
    addParseToken(["k", "kk"], function(input, array, config2) {
      var kInput = toInt(input);
      array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(["a", "A"], function(input, array, config2) {
      config2._isPm = config2._locale.isPM(input);
      config2._meridiem = input;
    });
    addParseToken(["h", "hh"], function(input, array, config2) {
      array[HOUR] = toInt(input);
      getParsingFlags(config2).bigHour = true;
    });
    addParseToken("hmm", function(input, array, config2) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
      getParsingFlags(config2).bigHour = true;
    });
    addParseToken("hmmss", function(input, array, config2) {
      var pos1 = input.length - 4, pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
      getParsingFlags(config2).bigHour = true;
    });
    addParseToken("Hmm", function(input, array, config2) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken("Hmmss", function(input, array, config2) {
      var pos1 = input.length - 4, pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
    });
    function localeIsPM(input) {
      return (input + "").toLowerCase().charAt(0) === "p";
    }
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
    function localeMeridiem(hours2, minutes2, isLower) {
      if (hours2 > 11) {
        return isLower ? "pm" : "PM";
      } else {
        return isLower ? "am" : "AM";
      }
    }
    var baseConfig = {
      calendar: defaultCalendar,
      longDateFormat: defaultLongDateFormat,
      invalidDate: defaultInvalidDate,
      ordinal: defaultOrdinal,
      dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
      relativeTime: defaultRelativeTime,
      months: defaultLocaleMonths,
      monthsShort: defaultLocaleMonthsShort,
      week: defaultLocaleWeek,
      weekdays: defaultLocaleWeekdays,
      weekdaysMin: defaultLocaleWeekdaysMin,
      weekdaysShort: defaultLocaleWeekdaysShort,
      meridiemParse: defaultLocaleMeridiemParse
    };
    var locales = {}, localeFamilies = {}, globalLocale;
    function commonPrefix(arr1, arr2) {
      var i, minl = Math.min(arr1.length, arr2.length);
      for (i = 0; i < minl; i += 1) {
        if (arr1[i] !== arr2[i]) {
          return i;
        }
      }
      return minl;
    }
    function normalizeLocale(key) {
      return key ? key.toLowerCase().replace("_", "-") : key;
    }
    function chooseLocale(names) {
      var i = 0, j, next, locale2, split;
      while (i < names.length) {
        split = normalizeLocale(names[i]).split("-");
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split("-") : null;
        while (j > 0) {
          locale2 = loadLocale(split.slice(0, j).join("-"));
          if (locale2) {
            return locale2;
          }
          if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
            break;
          }
          j--;
        }
        i++;
      }
      return globalLocale;
    }
    function isLocaleNameSane(name) {
      return name.match("^[^/\\\\]*$") != null;
    }
    function loadLocale(name) {
      var oldLocale = null, aliasedRequire;
      if (locales[name] === void 0 && typeof module !== "undefined" && module && module.exports && isLocaleNameSane(name)) {
        try {
          oldLocale = globalLocale._abbr;
          aliasedRequire = require;
          aliasedRequire("./locale/" + name);
          getSetGlobalLocale(oldLocale);
        } catch (e) {
          locales[name] = null;
        }
      }
      return locales[name];
    }
    function getSetGlobalLocale(key, values) {
      var data;
      if (key) {
        if (isUndefined(values)) {
          data = getLocale(key);
        } else {
          data = defineLocale(key, values);
        }
        if (data) {
          globalLocale = data;
        } else {
          if (typeof console !== "undefined" && console.warn) {
            console.warn(
              "Locale " + key + " not found. Did you forget to load it?"
            );
          }
        }
      }
      return globalLocale._abbr;
    }
    function defineLocale(name, config2) {
      if (config2 !== null) {
        var locale2, parentConfig = baseConfig;
        config2.abbr = name;
        if (locales[name] != null) {
          deprecateSimple(
            "defineLocaleOverride",
            "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
          );
          parentConfig = locales[name]._config;
        } else if (config2.parentLocale != null) {
          if (locales[config2.parentLocale] != null) {
            parentConfig = locales[config2.parentLocale]._config;
          } else {
            locale2 = loadLocale(config2.parentLocale);
            if (locale2 != null) {
              parentConfig = locale2._config;
            } else {
              if (!localeFamilies[config2.parentLocale]) {
                localeFamilies[config2.parentLocale] = [];
              }
              localeFamilies[config2.parentLocale].push({
                name,
                config: config2
              });
              return null;
            }
          }
        }
        locales[name] = new Locale(mergeConfigs(parentConfig, config2));
        if (localeFamilies[name]) {
          localeFamilies[name].forEach(function(x) {
            defineLocale(x.name, x.config);
          });
        }
        getSetGlobalLocale(name);
        return locales[name];
      } else {
        delete locales[name];
        return null;
      }
    }
    function updateLocale(name, config2) {
      if (config2 != null) {
        var locale2, tmpLocale, parentConfig = baseConfig;
        if (locales[name] != null && locales[name].parentLocale != null) {
          locales[name].set(mergeConfigs(locales[name]._config, config2));
        } else {
          tmpLocale = loadLocale(name);
          if (tmpLocale != null) {
            parentConfig = tmpLocale._config;
          }
          config2 = mergeConfigs(parentConfig, config2);
          if (tmpLocale == null) {
            config2.abbr = name;
          }
          locale2 = new Locale(config2);
          locale2.parentLocale = locales[name];
          locales[name] = locale2;
        }
        getSetGlobalLocale(name);
      } else {
        if (locales[name] != null) {
          if (locales[name].parentLocale != null) {
            locales[name] = locales[name].parentLocale;
            if (name === getSetGlobalLocale()) {
              getSetGlobalLocale(name);
            }
          } else if (locales[name] != null) {
            delete locales[name];
          }
        }
      }
      return locales[name];
    }
    function getLocale(key) {
      var locale2;
      if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
      }
      if (!key) {
        return globalLocale;
      }
      if (!isArray$9(key)) {
        locale2 = loadLocale(key);
        if (locale2) {
          return locale2;
        }
        key = [key];
      }
      return chooseLocale(key);
    }
    function listLocales() {
      return keys$6(locales);
    }
    function checkOverflow(m) {
      var overflow, a = m._a;
      if (a && getParsingFlags(m).overflow === -2) {
        overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
          overflow = DATE;
        }
        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
          overflow = WEEK;
        }
        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
          overflow = WEEKDAY;
        }
        getParsingFlags(m).overflow = overflow;
      }
      return m;
    }
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
      ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
      ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
      ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
      ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
      ["YYYY-DDD", /\d{4}-\d{3}/],
      ["YYYY-MM", /\d{4}-\d\d/, false],
      ["YYYYYYMMDD", /[+-]\d{10}/],
      ["YYYYMMDD", /\d{8}/],
      ["GGGG[W]WWE", /\d{4}W\d{3}/],
      ["GGGG[W]WW", /\d{4}W\d{2}/, false],
      ["YYYYDDD", /\d{7}/],
      ["YYYYMM", /\d{6}/, false],
      ["YYYY", /\d{4}/, false]
    ], isoTimes = [
      ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
      ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
      ["HH:mm:ss", /\d\d:\d\d:\d\d/],
      ["HH:mm", /\d\d:\d\d/],
      ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
      ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
      ["HHmmss", /\d\d\d\d\d\d/],
      ["HHmm", /\d\d\d\d/],
      ["HH", /\d\d/]
    ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
      UT: 0,
      GMT: 0,
      EDT: -4 * 60,
      EST: -5 * 60,
      CDT: -5 * 60,
      CST: -6 * 60,
      MDT: -6 * 60,
      MST: -7 * 60,
      PDT: -7 * 60,
      PST: -8 * 60
    };
    function configFromISO(config2) {
      var i, l, string = config2._i, match5 = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
      if (match5) {
        getParsingFlags(config2).iso = true;
        for (i = 0, l = isoDatesLen; i < l; i++) {
          if (isoDates[i][1].exec(match5[1])) {
            dateFormat = isoDates[i][0];
            allowTime = isoDates[i][2] !== false;
            break;
          }
        }
        if (dateFormat == null) {
          config2._isValid = false;
          return;
        }
        if (match5[3]) {
          for (i = 0, l = isoTimesLen; i < l; i++) {
            if (isoTimes[i][1].exec(match5[3])) {
              timeFormat = (match5[2] || " ") + isoTimes[i][0];
              break;
            }
          }
          if (timeFormat == null) {
            config2._isValid = false;
            return;
          }
        }
        if (!allowTime && timeFormat != null) {
          config2._isValid = false;
          return;
        }
        if (match5[4]) {
          if (tzRegex.exec(match5[4])) {
            tzFormat = "Z";
          } else {
            config2._isValid = false;
            return;
          }
        }
        config2._f = dateFormat + (timeFormat || "") + (tzFormat || "");
        configFromStringAndFormat(config2);
      } else {
        config2._isValid = false;
      }
    }
    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
      var result = [
        untruncateYear(yearStr),
        defaultLocaleMonthsShort.indexOf(monthStr),
        parseInt(dayStr, 10),
        parseInt(hourStr, 10),
        parseInt(minuteStr, 10)
      ];
      if (secondStr) {
        result.push(parseInt(secondStr, 10));
      }
      return result;
    }
    function untruncateYear(yearStr) {
      var year = parseInt(yearStr, 10);
      if (year <= 49) {
        return 2e3 + year;
      } else if (year <= 999) {
        return 1900 + year;
      }
      return year;
    }
    function preprocessRFC2822(s) {
      return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
    }
    function checkWeekday(weekdayStr, parsedInput, config2) {
      if (weekdayStr) {
        var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(
          parsedInput[0],
          parsedInput[1],
          parsedInput[2]
        ).getDay();
        if (weekdayProvided !== weekdayActual) {
          getParsingFlags(config2).weekdayMismatch = true;
          config2._isValid = false;
          return false;
        }
      }
      return true;
    }
    function calculateOffset(obsOffset, militaryOffset, numOffset) {
      if (obsOffset) {
        return obsOffsets[obsOffset];
      } else if (militaryOffset) {
        return 0;
      } else {
        var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
        return h * 60 + m;
      }
    }
    function configFromRFC2822(config2) {
      var match5 = rfc2822.exec(preprocessRFC2822(config2._i)), parsedArray;
      if (match5) {
        parsedArray = extractFromRFC2822Strings(
          match5[4],
          match5[3],
          match5[2],
          match5[5],
          match5[6],
          match5[7]
        );
        if (!checkWeekday(match5[1], parsedArray, config2)) {
          return;
        }
        config2._a = parsedArray;
        config2._tzm = calculateOffset(match5[8], match5[9], match5[10]);
        config2._d = createUTCDate.apply(null, config2._a);
        config2._d.setUTCMinutes(config2._d.getUTCMinutes() - config2._tzm);
        getParsingFlags(config2).rfc2822 = true;
      } else {
        config2._isValid = false;
      }
    }
    function configFromString(config2) {
      var matched = aspNetJsonRegex.exec(config2._i);
      if (matched !== null) {
        config2._d = new Date(+matched[1]);
        return;
      }
      configFromISO(config2);
      if (config2._isValid === false) {
        delete config2._isValid;
      } else {
        return;
      }
      configFromRFC2822(config2);
      if (config2._isValid === false) {
        delete config2._isValid;
      } else {
        return;
      }
      if (config2._strict) {
        config2._isValid = false;
      } else {
        hooks.createFromInputFallback(config2);
      }
    }
    hooks.createFromInputFallback = deprecate(
      "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
      function(config2) {
        config2._d = new Date(config2._i + (config2._useUTC ? " UTC" : ""));
      }
    );
    function defaults(a, b, c) {
      if (a != null) {
        return a;
      }
      if (b != null) {
        return b;
      }
      return c;
    }
    function currentDateArray(config2) {
      var nowValue = new Date(hooks.now());
      if (config2._useUTC) {
        return [
          nowValue.getUTCFullYear(),
          nowValue.getUTCMonth(),
          nowValue.getUTCDate()
        ];
      }
      return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }
    function configFromArray(config2) {
      var i, date, input = [], currentDate, expectedWeekday, yearToUse;
      if (config2._d) {
        return;
      }
      currentDate = currentDateArray(config2);
      if (config2._w && config2._a[DATE] == null && config2._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config2);
      }
      if (config2._dayOfYear != null) {
        yearToUse = defaults(config2._a[YEAR], currentDate[YEAR]);
        if (config2._dayOfYear > daysInYear(yearToUse) || config2._dayOfYear === 0) {
          getParsingFlags(config2)._overflowDayOfYear = true;
        }
        date = createUTCDate(yearToUse, 0, config2._dayOfYear);
        config2._a[MONTH] = date.getUTCMonth();
        config2._a[DATE] = date.getUTCDate();
      }
      for (i = 0; i < 3 && config2._a[i] == null; ++i) {
        config2._a[i] = input[i] = currentDate[i];
      }
      for (; i < 7; i++) {
        config2._a[i] = input[i] = config2._a[i] == null ? i === 2 ? 1 : 0 : config2._a[i];
      }
      if (config2._a[HOUR] === 24 && config2._a[MINUTE] === 0 && config2._a[SECOND] === 0 && config2._a[MILLISECOND] === 0) {
        config2._nextDay = true;
        config2._a[HOUR] = 0;
      }
      config2._d = (config2._useUTC ? createUTCDate : createDate).apply(
        null,
        input
      );
      expectedWeekday = config2._useUTC ? config2._d.getUTCDay() : config2._d.getDay();
      if (config2._tzm != null) {
        config2._d.setUTCMinutes(config2._d.getUTCMinutes() - config2._tzm);
      }
      if (config2._nextDay) {
        config2._a[HOUR] = 24;
      }
      if (config2._w && typeof config2._w.d !== "undefined" && config2._w.d !== expectedWeekday) {
        getParsingFlags(config2).weekdayMismatch = true;
      }
    }
    function dayOfYearFromWeekInfo(config2) {
      var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
      w = config2._w;
      if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;
        weekYear = defaults(
          w.GG,
          config2._a[YEAR],
          weekOfYear(createLocal(), 1, 4).year
        );
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
        if (weekday < 1 || weekday > 7) {
          weekdayOverflow = true;
        }
      } else {
        dow = config2._locale._week.dow;
        doy = config2._locale._week.doy;
        curWeek = weekOfYear(createLocal(), dow, doy);
        weekYear = defaults(w.gg, config2._a[YEAR], curWeek.year);
        week = defaults(w.w, curWeek.week);
        if (w.d != null) {
          weekday = w.d;
          if (weekday < 0 || weekday > 6) {
            weekdayOverflow = true;
          }
        } else if (w.e != null) {
          weekday = w.e + dow;
          if (w.e < 0 || w.e > 6) {
            weekdayOverflow = true;
          }
        } else {
          weekday = dow;
        }
      }
      if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config2)._overflowWeeks = true;
      } else if (weekdayOverflow != null) {
        getParsingFlags(config2)._overflowWeekday = true;
      } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config2._a[YEAR] = temp.year;
        config2._dayOfYear = temp.dayOfYear;
      }
    }
    hooks.ISO_8601 = function() {
    };
    hooks.RFC_2822 = function() {
    };
    function configFromStringAndFormat(config2) {
      if (config2._f === hooks.ISO_8601) {
        configFromISO(config2);
        return;
      }
      if (config2._f === hooks.RFC_2822) {
        configFromRFC2822(config2);
        return;
      }
      config2._a = [];
      getParsingFlags(config2).empty = true;
      var string = "" + config2._i, i, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
      tokens2 = expandFormat(config2._f, config2._locale).match(formattingTokens) || [];
      tokenLen = tokens2.length;
      for (i = 0; i < tokenLen; i++) {
        token2 = tokens2[i];
        parsedInput = (string.match(getParseRegexForToken(token2, config2)) || [])[0];
        if (parsedInput) {
          skipped = string.substr(0, string.indexOf(parsedInput));
          if (skipped.length > 0) {
            getParsingFlags(config2).unusedInput.push(skipped);
          }
          string = string.slice(
            string.indexOf(parsedInput) + parsedInput.length
          );
          totalParsedInputLength += parsedInput.length;
        }
        if (formatTokenFunctions[token2]) {
          if (parsedInput) {
            getParsingFlags(config2).empty = false;
          } else {
            getParsingFlags(config2).unusedTokens.push(token2);
          }
          addTimeToArrayFromToken(token2, parsedInput, config2);
        } else if (config2._strict && !parsedInput) {
          getParsingFlags(config2).unusedTokens.push(token2);
        }
      }
      getParsingFlags(config2).charsLeftOver = stringLength - totalParsedInputLength;
      if (string.length > 0) {
        getParsingFlags(config2).unusedInput.push(string);
      }
      if (config2._a[HOUR] <= 12 && getParsingFlags(config2).bigHour === true && config2._a[HOUR] > 0) {
        getParsingFlags(config2).bigHour = void 0;
      }
      getParsingFlags(config2).parsedDateParts = config2._a.slice(0);
      getParsingFlags(config2).meridiem = config2._meridiem;
      config2._a[HOUR] = meridiemFixWrap(
        config2._locale,
        config2._a[HOUR],
        config2._meridiem
      );
      era = getParsingFlags(config2).era;
      if (era !== null) {
        config2._a[YEAR] = config2._locale.erasConvertYear(era, config2._a[YEAR]);
      }
      configFromArray(config2);
      checkOverflow(config2);
    }
    function meridiemFixWrap(locale2, hour, meridiem2) {
      var isPm;
      if (meridiem2 == null) {
        return hour;
      }
      if (locale2.meridiemHour != null) {
        return locale2.meridiemHour(hour, meridiem2);
      } else if (locale2.isPM != null) {
        isPm = locale2.isPM(meridiem2);
        if (isPm && hour < 12) {
          hour += 12;
        }
        if (!isPm && hour === 12) {
          hour = 0;
        }
        return hour;
      } else {
        return hour;
      }
    }
    function configFromStringAndArray(config2) {
      var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config2._f.length;
      if (configfLen === 0) {
        getParsingFlags(config2).invalidFormat = true;
        config2._d = new Date(NaN);
        return;
      }
      for (i = 0; i < configfLen; i++) {
        currentScore = 0;
        validFormatFound = false;
        tempConfig = copyConfig({}, config2);
        if (config2._useUTC != null) {
          tempConfig._useUTC = config2._useUTC;
        }
        tempConfig._f = config2._f[i];
        configFromStringAndFormat(tempConfig);
        if (isValid(tempConfig)) {
          validFormatFound = true;
        }
        currentScore += getParsingFlags(tempConfig).charsLeftOver;
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
        getParsingFlags(tempConfig).score = currentScore;
        if (!bestFormatIsValid) {
          if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
            if (validFormatFound) {
              bestFormatIsValid = true;
            }
          }
        } else {
          if (currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
          }
        }
      }
      extend(config2, bestMoment || tempConfig);
    }
    function configFromObject(config2) {
      if (config2._d) {
        return;
      }
      var i = normalizeObjectUnits(config2._i), dayOrDate = i.day === void 0 ? i.date : i.day;
      config2._a = map(
        [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
        function(obj) {
          return obj && parseInt(obj, 10);
        }
      );
      configFromArray(config2);
    }
    function createFromConfig(config2) {
      var res = new Moment(checkOverflow(prepareConfig(config2)));
      if (res._nextDay) {
        res.add(1, "d");
        res._nextDay = void 0;
      }
      return res;
    }
    function prepareConfig(config2) {
      var input = config2._i, format2 = config2._f;
      config2._locale = config2._locale || getLocale(config2._l);
      if (input === null || format2 === void 0 && input === "") {
        return createInvalid({ nullInput: true });
      }
      if (typeof input === "string") {
        config2._i = input = config2._locale.preparse(input);
      }
      if (isMoment(input)) {
        return new Moment(checkOverflow(input));
      } else if (isDate$1(input)) {
        config2._d = input;
      } else if (isArray$9(format2)) {
        configFromStringAndArray(config2);
      } else if (format2) {
        configFromStringAndFormat(config2);
      } else {
        configFromInput(config2);
      }
      if (!isValid(config2)) {
        config2._d = null;
      }
      return config2;
    }
    function configFromInput(config2) {
      var input = config2._i;
      if (isUndefined(input)) {
        config2._d = new Date(hooks.now());
      } else if (isDate$1(input)) {
        config2._d = new Date(input.valueOf());
      } else if (typeof input === "string") {
        configFromString(config2);
      } else if (isArray$9(input)) {
        config2._a = map(input.slice(0), function(obj) {
          return parseInt(obj, 10);
        });
        configFromArray(config2);
      } else if (isObject$9(input)) {
        configFromObject(config2);
      } else if (isNumber(input)) {
        config2._d = new Date(input);
      } else {
        hooks.createFromInputFallback(config2);
      }
    }
    function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
      var c = {};
      if (format2 === true || format2 === false) {
        strict = format2;
        format2 = void 0;
      }
      if (locale2 === true || locale2 === false) {
        strict = locale2;
        locale2 = void 0;
      }
      if (isObject$9(input) && isObjectEmpty(input) || isArray$9(input) && input.length === 0) {
        input = void 0;
      }
      c._isAMomentObject = true;
      c._useUTC = c._isUTC = isUTC;
      c._l = locale2;
      c._i = input;
      c._f = format2;
      c._strict = strict;
      return createFromConfig(c);
    }
    function createLocal(input, format2, locale2, strict) {
      return createLocalOrUTC(input, format2, locale2, strict, false);
    }
    var prototypeMin = deprecate(
      "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
      function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other < this ? this : other;
        } else {
          return createInvalid();
        }
      }
    ), prototypeMax = deprecate(
      "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
      function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other > this ? this : other;
        } else {
          return createInvalid();
        }
      }
    );
    function pickBy$1(fn, moments) {
      var res, i;
      if (moments.length === 1 && isArray$9(moments[0])) {
        moments = moments[0];
      }
      if (!moments.length) {
        return createLocal();
      }
      res = moments[0];
      for (i = 1; i < moments.length; ++i) {
        if (!moments[i].isValid() || moments[i][fn](res)) {
          res = moments[i];
        }
      }
      return res;
    }
    function min() {
      var args = [].slice.call(arguments, 0);
      return pickBy$1("isBefore", args);
    }
    function max() {
      var args = [].slice.call(arguments, 0);
      return pickBy$1("isAfter", args);
    }
    var now$2 = function() {
      return Date.now ? Date.now() : +new Date();
    };
    var ordering = [
      "year",
      "quarter",
      "month",
      "week",
      "day",
      "hour",
      "minute",
      "second",
      "millisecond"
    ];
    function isDurationValid(m) {
      var key, unitHasDecimal = false, i, orderLen = ordering.length;
      for (key in m) {
        if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
          return false;
        }
      }
      for (i = 0; i < orderLen; ++i) {
        if (m[ordering[i]]) {
          if (unitHasDecimal) {
            return false;
          }
          if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
            unitHasDecimal = true;
          }
        }
      }
      return true;
    }
    function isValid$1() {
      return this._isValid;
    }
    function createInvalid$1() {
      return createDuration(NaN);
    }
    function Duration(duration) {
      var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
      this._isValid = isDurationValid(normalizedInput);
      this._milliseconds = +milliseconds2 + seconds2 * 1e3 + minutes2 * 6e4 + hours2 * 1e3 * 60 * 60;
      this._days = +days2 + weeks2 * 7;
      this._months = +months2 + quarters * 3 + years2 * 12;
      this._data = {};
      this._locale = getLocale();
      this._bubble();
    }
    function isDuration(obj) {
      return obj instanceof Duration;
    }
    function absRound(number) {
      if (number < 0) {
        return Math.round(-1 * number) * -1;
      } else {
        return Math.round(number);
      }
    }
    function compareArrays(array1, array2, dontConvert) {
      var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
      for (i = 0; i < len; i++) {
        if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
          diffs++;
        }
      }
      return diffs + lengthDiff;
    }
    function offset(token2, separator) {
      addFormatToken(token2, 0, 0, function() {
        var offset2 = this.utcOffset(), sign2 = "+";
        if (offset2 < 0) {
          offset2 = -offset2;
          sign2 = "-";
        }
        return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
      });
    }
    offset("Z", ":");
    offset("ZZ", "");
    addRegexToken("Z", matchShortOffset);
    addRegexToken("ZZ", matchShortOffset);
    addParseToken(["Z", "ZZ"], function(input, array, config2) {
      config2._useUTC = true;
      config2._tzm = offsetFromString(matchShortOffset, input);
    });
    var chunkOffset = /([\+\-]|\d\d)/gi;
    function offsetFromString(matcher, string) {
      var matches = (string || "").match(matcher), chunk, parts, minutes2;
      if (matches === null) {
        return null;
      }
      chunk = matches[matches.length - 1] || [];
      parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
      minutes2 = +(parts[1] * 60) + toInt(parts[2]);
      return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
    }
    function cloneWithOffset(input, model) {
      var res, diff2;
      if (model._isUTC) {
        res = model.clone();
        diff2 = (isMoment(input) || isDate$1(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        res._d.setTime(res._d.valueOf() + diff2);
        hooks.updateOffset(res, false);
        return res;
      } else {
        return createLocal(input).local();
      }
    }
    function getDateOffset(m) {
      return -Math.round(m._d.getTimezoneOffset());
    }
    hooks.updateOffset = function() {
    };
    function getSetOffset(input, keepLocalTime, keepMinutes) {
      var offset2 = this._offset || 0, localAdjust;
      if (!this.isValid()) {
        return input != null ? this : NaN;
      }
      if (input != null) {
        if (typeof input === "string") {
          input = offsetFromString(matchShortOffset, input);
          if (input === null) {
            return this;
          }
        } else if (Math.abs(input) < 16 && !keepMinutes) {
          input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
          localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
          this.add(localAdjust, "m");
        }
        if (offset2 !== input) {
          if (!keepLocalTime || this._changeInProgress) {
            addSubtract(
              this,
              createDuration(input - offset2, "m"),
              1,
              false
            );
          } else if (!this._changeInProgress) {
            this._changeInProgress = true;
            hooks.updateOffset(this, true);
            this._changeInProgress = null;
          }
        }
        return this;
      } else {
        return this._isUTC ? offset2 : getDateOffset(this);
      }
    }
    function getSetZone(input, keepLocalTime) {
      if (input != null) {
        if (typeof input !== "string") {
          input = -input;
        }
        this.utcOffset(input, keepLocalTime);
        return this;
      } else {
        return -this.utcOffset();
      }
    }
    function setOffsetToUTC(keepLocalTime) {
      return this.utcOffset(0, keepLocalTime);
    }
    function setOffsetToLocal(keepLocalTime) {
      if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;
        if (keepLocalTime) {
          this.subtract(getDateOffset(this), "m");
        }
      }
      return this;
    }
    function setOffsetToParsedOffset() {
      if (this._tzm != null) {
        this.utcOffset(this._tzm, false, true);
      } else if (typeof this._i === "string") {
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) {
          this.utcOffset(tZone);
        } else {
          this.utcOffset(0, true);
        }
      }
      return this;
    }
    function hasAlignedHourOffset(input) {
      if (!this.isValid()) {
        return false;
      }
      input = input ? createLocal(input).utcOffset() : 0;
      return (this.utcOffset() - input) % 60 === 0;
    }
    function isDaylightSavingTime() {
      return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }
    function isDaylightSavingTimeShifted() {
      if (!isUndefined(this._isDSTShifted)) {
        return this._isDSTShifted;
      }
      var c = {}, other;
      copyConfig(c, this);
      c = prepareConfig(c);
      if (c._a) {
        other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
        this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
      } else {
        this._isDSTShifted = false;
      }
      return this._isDSTShifted;
    }
    function isLocal() {
      return this.isValid() ? !this._isUTC : false;
    }
    function isUtcOffset() {
      return this.isValid() ? this._isUTC : false;
    }
    function isUtc() {
      return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    function createDuration(input, key) {
      var duration = input, match5 = null, sign2, ret, diffRes;
      if (isDuration(input)) {
        duration = {
          ms: input._milliseconds,
          d: input._days,
          M: input._months
        };
      } else if (isNumber(input) || !isNaN(+input)) {
        duration = {};
        if (key) {
          duration[key] = +input;
        } else {
          duration.milliseconds = +input;
        }
      } else if (match5 = aspNetRegex.exec(input)) {
        sign2 = match5[1] === "-" ? -1 : 1;
        duration = {
          y: 0,
          d: toInt(match5[DATE]) * sign2,
          h: toInt(match5[HOUR]) * sign2,
          m: toInt(match5[MINUTE]) * sign2,
          s: toInt(match5[SECOND]) * sign2,
          ms: toInt(absRound(match5[MILLISECOND] * 1e3)) * sign2
        };
      } else if (match5 = isoRegex.exec(input)) {
        sign2 = match5[1] === "-" ? -1 : 1;
        duration = {
          y: parseIso(match5[2], sign2),
          M: parseIso(match5[3], sign2),
          w: parseIso(match5[4], sign2),
          d: parseIso(match5[5], sign2),
          h: parseIso(match5[6], sign2),
          m: parseIso(match5[7], sign2),
          s: parseIso(match5[8], sign2)
        };
      } else if (duration == null) {
        duration = {};
      } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
        diffRes = momentsDifference(
          createLocal(duration.from),
          createLocal(duration.to)
        );
        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
      }
      ret = new Duration(duration);
      if (isDuration(input) && hasOwnProp(input, "_locale")) {
        ret._locale = input._locale;
      }
      if (isDuration(input) && hasOwnProp(input, "_isValid")) {
        ret._isValid = input._isValid;
      }
      return ret;
    }
    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;
    function parseIso(inp, sign2) {
      var res = inp && parseFloat(inp.replace(",", "."));
      return (isNaN(res) ? 0 : res) * sign2;
    }
    function positiveMomentsDifference(base, other) {
      var res = {};
      res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
      if (base.clone().add(res.months, "M").isAfter(other)) {
        --res.months;
      }
      res.milliseconds = +other - +base.clone().add(res.months, "M");
      return res;
    }
    function momentsDifference(base, other) {
      var res;
      if (!(base.isValid() && other.isValid())) {
        return { milliseconds: 0, months: 0 };
      }
      other = cloneWithOffset(other, base);
      if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
      } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
      }
      return res;
    }
    function createAdder(direction, name) {
      return function(val, period) {
        var dur, tmp;
        if (period !== null && !isNaN(+period)) {
          deprecateSimple(
            name,
            "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
          );
          tmp = val;
          val = period;
          period = tmp;
        }
        dur = createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
      };
    }
    function addSubtract(mom, duration, isAdding, updateOffset) {
      var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
      if (!mom.isValid()) {
        return;
      }
      updateOffset = updateOffset == null ? true : updateOffset;
      if (months2) {
        setMonth(mom, get$2(mom, "Month") + months2 * isAdding);
      }
      if (days2) {
        set$1(mom, "Date", get$2(mom, "Date") + days2 * isAdding);
      }
      if (milliseconds2) {
        mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
      }
      if (updateOffset) {
        hooks.updateOffset(mom, days2 || months2);
      }
    }
    var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
    function isString(input) {
      return typeof input === "string" || input instanceof String;
    }
    function isMomentInput(input) {
      return isMoment(input) || isDate$1(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
    }
    function isMomentInputObject(input) {
      var objectTest = isObject$9(input) && !isObjectEmpty(input), propertyTest = false, properties = [
        "years",
        "year",
        "y",
        "months",
        "month",
        "M",
        "days",
        "day",
        "d",
        "dates",
        "date",
        "D",
        "hours",
        "hour",
        "h",
        "minutes",
        "minute",
        "m",
        "seconds",
        "second",
        "s",
        "milliseconds",
        "millisecond",
        "ms"
      ], i, property2, propertyLen = properties.length;
      for (i = 0; i < propertyLen; i += 1) {
        property2 = properties[i];
        propertyTest = propertyTest || hasOwnProp(input, property2);
      }
      return objectTest && propertyTest;
    }
    function isNumberOrStringArray(input) {
      var arrayTest = isArray$9(input), dataTypeTest = false;
      if (arrayTest) {
        dataTypeTest = input.filter(function(item) {
          return !isNumber(item) && isString(input);
        }).length === 0;
      }
      return arrayTest && dataTypeTest;
    }
    function isCalendarSpec(input) {
      var objectTest = isObject$9(input) && !isObjectEmpty(input), propertyTest = false, properties = [
        "sameDay",
        "nextDay",
        "lastDay",
        "nextWeek",
        "lastWeek",
        "sameElse"
      ], i, property2;
      for (i = 0; i < properties.length; i += 1) {
        property2 = properties[i];
        propertyTest = propertyTest || hasOwnProp(input, property2);
      }
      return objectTest && propertyTest;
    }
    function getCalendarFormat(myMoment, now2) {
      var diff2 = myMoment.diff(now2, "days", true);
      return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
    }
    function calendar$1(time, formats) {
      if (arguments.length === 1) {
        if (!arguments[0]) {
          time = void 0;
          formats = void 0;
        } else if (isMomentInput(arguments[0])) {
          time = arguments[0];
          formats = void 0;
        } else if (isCalendarSpec(arguments[0])) {
          formats = arguments[0];
          time = void 0;
        }
      }
      var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
      return this.format(
        output || this.localeData().calendar(format2, this, createLocal(now2))
      );
    }
    function clone$5() {
      return new Moment(this);
    }
    function isAfter(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || "millisecond";
      if (units === "millisecond") {
        return this.valueOf() > localInput.valueOf();
      } else {
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
      }
    }
    function isBefore(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input);
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || "millisecond";
      if (units === "millisecond") {
        return this.valueOf() < localInput.valueOf();
      } else {
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
      }
    }
    function isBetween(from2, to2, units, inclusivity) {
      var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
      if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
        return false;
      }
      inclusivity = inclusivity || "()";
      return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }
    function isSame(input, units) {
      var localInput = isMoment(input) ? input : createLocal(input), inputMs;
      if (!(this.isValid() && localInput.isValid())) {
        return false;
      }
      units = normalizeUnits(units) || "millisecond";
      if (units === "millisecond") {
        return this.valueOf() === localInput.valueOf();
      } else {
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
      }
    }
    function isSameOrAfter(input, units) {
      return this.isSame(input, units) || this.isAfter(input, units);
    }
    function isSameOrBefore(input, units) {
      return this.isSame(input, units) || this.isBefore(input, units);
    }
    function diff(input, units, asFloat) {
      var that, zoneDelta, output;
      if (!this.isValid()) {
        return NaN;
      }
      that = cloneWithOffset(input, this);
      if (!that.isValid()) {
        return NaN;
      }
      zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
      units = normalizeUnits(units);
      switch (units) {
        case "year":
          output = monthDiff(this, that) / 12;
          break;
        case "month":
          output = monthDiff(this, that);
          break;
        case "quarter":
          output = monthDiff(this, that) / 3;
          break;
        case "second":
          output = (this - that) / 1e3;
          break;
        case "minute":
          output = (this - that) / 6e4;
          break;
        case "hour":
          output = (this - that) / 36e5;
          break;
        case "day":
          output = (this - that - zoneDelta) / 864e5;
          break;
        case "week":
          output = (this - that - zoneDelta) / 6048e5;
          break;
        default:
          output = this - that;
      }
      return asFloat ? output : absFloor(output);
    }
    function monthDiff(a, b) {
      if (a.date() < b.date()) {
        return -monthDiff(b, a);
      }
      var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
      if (b - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
        adjust = (b - anchor) / (anchor - anchor2);
      } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
        adjust = (b - anchor) / (anchor2 - anchor);
      }
      return -(wholeMonthDiff + adjust) || 0;
    }
    hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
    hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
    function toString$3() {
      return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
    }
    function toISOString(keepOffset) {
      if (!this.isValid()) {
        return null;
      }
      var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
      if (m.year() < 0 || m.year() > 9999) {
        return formatMoment(
          m,
          utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
        );
      }
      if (isFunction(Date.prototype.toISOString)) {
        if (utc) {
          return this.toDate().toISOString();
        } else {
          return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m, "Z"));
        }
      }
      return formatMoment(
        m,
        utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
      );
    }
    function inspect() {
      if (!this.isValid()) {
        return "moment.invalid(/* " + this._i + " */)";
      }
      var func = "moment", zone = "", prefix, year, datetime, suffix;
      if (!this.isLocal()) {
        func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
        zone = "Z";
      }
      prefix = "[" + func + '("]';
      year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
      datetime = "-MM-DD[T]HH:mm:ss.SSS";
      suffix = zone + '[")]';
      return this.format(prefix + year + datetime + suffix);
    }
    function format(inputString) {
      if (!inputString) {
        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
      }
      var output = formatMoment(this, inputString);
      return this.localeData().postformat(output);
    }
    function from(time, withoutSuffix) {
      if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
        return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
      } else {
        return this.localeData().invalidDate();
      }
    }
    function fromNow(withoutSuffix) {
      return this.from(createLocal(), withoutSuffix);
    }
    function to(time, withoutSuffix) {
      if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
        return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
      } else {
        return this.localeData().invalidDate();
      }
    }
    function toNow(withoutSuffix) {
      return this.to(createLocal(), withoutSuffix);
    }
    function locale(key) {
      var newLocaleData;
      if (key === void 0) {
        return this._locale._abbr;
      } else {
        newLocaleData = getLocale(key);
        if (newLocaleData != null) {
          this._locale = newLocaleData;
        }
        return this;
      }
    }
    var lang = deprecate(
      "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
      function(key) {
        if (key === void 0) {
          return this.localeData();
        } else {
          return this.locale(key);
        }
      }
    );
    function localeData() {
      return this._locale;
    }
    var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
    function mod$1(dividend, divisor) {
      return (dividend % divisor + divisor) % divisor;
    }
    function localStartOfDate(y, m, d) {
      if (y < 100 && y >= 0) {
        return new Date(y + 400, m, d) - MS_PER_400_YEARS;
      } else {
        return new Date(y, m, d).valueOf();
      }
    }
    function utcStartOfDate(y, m, d) {
      if (y < 100 && y >= 0) {
        return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
      } else {
        return Date.UTC(y, m, d);
      }
    }
    function startOf(units) {
      var time, startOfDate;
      units = normalizeUnits(units);
      if (units === void 0 || units === "millisecond" || !this.isValid()) {
        return this;
      }
      startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
      switch (units) {
        case "year":
          time = startOfDate(this.year(), 0, 1);
          break;
        case "quarter":
          time = startOfDate(
            this.year(),
            this.month() - this.month() % 3,
            1
          );
          break;
        case "month":
          time = startOfDate(this.year(), this.month(), 1);
          break;
        case "week":
          time = startOfDate(
            this.year(),
            this.month(),
            this.date() - this.weekday()
          );
          break;
        case "isoWeek":
          time = startOfDate(
            this.year(),
            this.month(),
            this.date() - (this.isoWeekday() - 1)
          );
          break;
        case "day":
        case "date":
          time = startOfDate(this.year(), this.month(), this.date());
          break;
        case "hour":
          time = this._d.valueOf();
          time -= mod$1(
            time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
            MS_PER_HOUR
          );
          break;
        case "minute":
          time = this._d.valueOf();
          time -= mod$1(time, MS_PER_MINUTE);
          break;
        case "second":
          time = this._d.valueOf();
          time -= mod$1(time, MS_PER_SECOND);
          break;
      }
      this._d.setTime(time);
      hooks.updateOffset(this, true);
      return this;
    }
    function endOf(units) {
      var time, startOfDate;
      units = normalizeUnits(units);
      if (units === void 0 || units === "millisecond" || !this.isValid()) {
        return this;
      }
      startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
      switch (units) {
        case "year":
          time = startOfDate(this.year() + 1, 0, 1) - 1;
          break;
        case "quarter":
          time = startOfDate(
            this.year(),
            this.month() - this.month() % 3 + 3,
            1
          ) - 1;
          break;
        case "month":
          time = startOfDate(this.year(), this.month() + 1, 1) - 1;
          break;
        case "week":
          time = startOfDate(
            this.year(),
            this.month(),
            this.date() - this.weekday() + 7
          ) - 1;
          break;
        case "isoWeek":
          time = startOfDate(
            this.year(),
            this.month(),
            this.date() - (this.isoWeekday() - 1) + 7
          ) - 1;
          break;
        case "day":
        case "date":
          time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
          break;
        case "hour":
          time = this._d.valueOf();
          time += MS_PER_HOUR - mod$1(
            time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
            MS_PER_HOUR
          ) - 1;
          break;
        case "minute":
          time = this._d.valueOf();
          time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
          break;
        case "second":
          time = this._d.valueOf();
          time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
          break;
      }
      this._d.setTime(time);
      hooks.updateOffset(this, true);
      return this;
    }
    function valueOf() {
      return this._d.valueOf() - (this._offset || 0) * 6e4;
    }
    function unix() {
      return Math.floor(this.valueOf() / 1e3);
    }
    function toDate() {
      return new Date(this.valueOf());
    }
    function toArray() {
      var m = this;
      return [
        m.year(),
        m.month(),
        m.date(),
        m.hour(),
        m.minute(),
        m.second(),
        m.millisecond()
      ];
    }
    function toObject() {
      var m = this;
      return {
        years: m.year(),
        months: m.month(),
        date: m.date(),
        hours: m.hours(),
        minutes: m.minutes(),
        seconds: m.seconds(),
        milliseconds: m.milliseconds()
      };
    }
    function toJSON() {
      return this.isValid() ? this.toISOString() : null;
    }
    function isValid$2() {
      return isValid(this);
    }
    function parsingFlags() {
      return extend({}, getParsingFlags(this));
    }
    function invalidAt() {
      return getParsingFlags(this).overflow;
    }
    function creationData() {
      return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
      };
    }
    addFormatToken("N", 0, 0, "eraAbbr");
    addFormatToken("NN", 0, 0, "eraAbbr");
    addFormatToken("NNN", 0, 0, "eraAbbr");
    addFormatToken("NNNN", 0, 0, "eraName");
    addFormatToken("NNNNN", 0, 0, "eraNarrow");
    addFormatToken("y", ["y", 1], "yo", "eraYear");
    addFormatToken("y", ["yy", 2], 0, "eraYear");
    addFormatToken("y", ["yyy", 3], 0, "eraYear");
    addFormatToken("y", ["yyyy", 4], 0, "eraYear");
    addRegexToken("N", matchEraAbbr);
    addRegexToken("NN", matchEraAbbr);
    addRegexToken("NNN", matchEraAbbr);
    addRegexToken("NNNN", matchEraName);
    addRegexToken("NNNNN", matchEraNarrow);
    addParseToken(
      ["N", "NN", "NNN", "NNNN", "NNNNN"],
      function(input, array, config2, token2) {
        var era = config2._locale.erasParse(input, token2, config2._strict);
        if (era) {
          getParsingFlags(config2).era = era;
        } else {
          getParsingFlags(config2).invalidEra = input;
        }
      }
    );
    addRegexToken("y", matchUnsigned);
    addRegexToken("yy", matchUnsigned);
    addRegexToken("yyy", matchUnsigned);
    addRegexToken("yyyy", matchUnsigned);
    addRegexToken("yo", matchEraYearOrdinal);
    addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
    addParseToken(["yo"], function(input, array, config2, token2) {
      var match5;
      if (config2._locale._eraYearOrdinalRegex) {
        match5 = input.match(config2._locale._eraYearOrdinalRegex);
      }
      if (config2._locale.eraYearOrdinalParse) {
        array[YEAR] = config2._locale.eraYearOrdinalParse(input, match5);
      } else {
        array[YEAR] = parseInt(input, 10);
      }
    });
    function localeEras(m, format2) {
      var i, l, date, eras = this._eras || getLocale("en")._eras;
      for (i = 0, l = eras.length; i < l; ++i) {
        switch (typeof eras[i].since) {
          case "string":
            date = hooks(eras[i].since).startOf("day");
            eras[i].since = date.valueOf();
            break;
        }
        switch (typeof eras[i].until) {
          case "undefined":
            eras[i].until = Infinity;
            break;
          case "string":
            date = hooks(eras[i].until).startOf("day").valueOf();
            eras[i].until = date.valueOf();
            break;
        }
      }
      return eras;
    }
    function localeErasParse(eraName, format2, strict) {
      var i, l, eras = this.eras(), name, abbr, narrow;
      eraName = eraName.toUpperCase();
      for (i = 0, l = eras.length; i < l; ++i) {
        name = eras[i].name.toUpperCase();
        abbr = eras[i].abbr.toUpperCase();
        narrow = eras[i].narrow.toUpperCase();
        if (strict) {
          switch (format2) {
            case "N":
            case "NN":
            case "NNN":
              if (abbr === eraName) {
                return eras[i];
              }
              break;
            case "NNNN":
              if (name === eraName) {
                return eras[i];
              }
              break;
            case "NNNNN":
              if (narrow === eraName) {
                return eras[i];
              }
              break;
          }
        } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
          return eras[i];
        }
      }
    }
    function localeErasConvertYear(era, year) {
      var dir = era.since <= era.until ? 1 : -1;
      if (year === void 0) {
        return hooks(era.since).year();
      } else {
        return hooks(era.since).year() + (year - era.offset) * dir;
      }
    }
    function getEraName() {
      var i, l, val, eras = this.localeData().eras();
      for (i = 0, l = eras.length; i < l; ++i) {
        val = this.clone().startOf("day").valueOf();
        if (eras[i].since <= val && val <= eras[i].until) {
          return eras[i].name;
        }
        if (eras[i].until <= val && val <= eras[i].since) {
          return eras[i].name;
        }
      }
      return "";
    }
    function getEraNarrow() {
      var i, l, val, eras = this.localeData().eras();
      for (i = 0, l = eras.length; i < l; ++i) {
        val = this.clone().startOf("day").valueOf();
        if (eras[i].since <= val && val <= eras[i].until) {
          return eras[i].narrow;
        }
        if (eras[i].until <= val && val <= eras[i].since) {
          return eras[i].narrow;
        }
      }
      return "";
    }
    function getEraAbbr() {
      var i, l, val, eras = this.localeData().eras();
      for (i = 0, l = eras.length; i < l; ++i) {
        val = this.clone().startOf("day").valueOf();
        if (eras[i].since <= val && val <= eras[i].until) {
          return eras[i].abbr;
        }
        if (eras[i].until <= val && val <= eras[i].since) {
          return eras[i].abbr;
        }
      }
      return "";
    }
    function getEraYear() {
      var i, l, dir, val, eras = this.localeData().eras();
      for (i = 0, l = eras.length; i < l; ++i) {
        dir = eras[i].since <= eras[i].until ? 1 : -1;
        val = this.clone().startOf("day").valueOf();
        if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
          return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
        }
      }
      return this.year();
    }
    function erasNameRegex(isStrict) {
      if (!hasOwnProp(this, "_erasNameRegex")) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasNameRegex : this._erasRegex;
    }
    function erasAbbrRegex(isStrict) {
      if (!hasOwnProp(this, "_erasAbbrRegex")) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }
    function erasNarrowRegex(isStrict) {
      if (!hasOwnProp(this, "_erasNarrowRegex")) {
        computeErasParse.call(this);
      }
      return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }
    function matchEraAbbr(isStrict, locale2) {
      return locale2.erasAbbrRegex(isStrict);
    }
    function matchEraName(isStrict, locale2) {
      return locale2.erasNameRegex(isStrict);
    }
    function matchEraNarrow(isStrict, locale2) {
      return locale2.erasNarrowRegex(isStrict);
    }
    function matchEraYearOrdinal(isStrict, locale2) {
      return locale2._eraYearOrdinalRegex || matchUnsigned;
    }
    function computeErasParse() {
      var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, eras = this.eras();
      for (i = 0, l = eras.length; i < l; ++i) {
        namePieces.push(regexEscape(eras[i].name));
        abbrPieces.push(regexEscape(eras[i].abbr));
        narrowPieces.push(regexEscape(eras[i].narrow));
        mixedPieces.push(regexEscape(eras[i].name));
        mixedPieces.push(regexEscape(eras[i].abbr));
        mixedPieces.push(regexEscape(eras[i].narrow));
      }
      this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
      this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
      this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
      this._erasNarrowRegex = new RegExp(
        "^(" + narrowPieces.join("|") + ")",
        "i"
      );
    }
    addFormatToken(0, ["gg", 2], 0, function() {
      return this.weekYear() % 100;
    });
    addFormatToken(0, ["GG", 2], 0, function() {
      return this.isoWeekYear() % 100;
    });
    function addWeekYearFormatToken(token2, getter) {
      addFormatToken(0, [token2, token2.length], 0, getter);
    }
    addWeekYearFormatToken("gggg", "weekYear");
    addWeekYearFormatToken("ggggg", "weekYear");
    addWeekYearFormatToken("GGGG", "isoWeekYear");
    addWeekYearFormatToken("GGGGG", "isoWeekYear");
    addUnitAlias("weekYear", "gg");
    addUnitAlias("isoWeekYear", "GG");
    addUnitPriority("weekYear", 1);
    addUnitPriority("isoWeekYear", 1);
    addRegexToken("G", matchSigned);
    addRegexToken("g", matchSigned);
    addRegexToken("GG", match1to2, match2);
    addRegexToken("gg", match1to2, match2);
    addRegexToken("GGGG", match1to4, match4);
    addRegexToken("gggg", match1to4, match4);
    addRegexToken("GGGGG", match1to6, match6);
    addRegexToken("ggggg", match1to6, match6);
    addWeekParseToken(
      ["gggg", "ggggg", "GGGG", "GGGGG"],
      function(input, week, config2, token2) {
        week[token2.substr(0, 2)] = toInt(input);
      }
    );
    addWeekParseToken(["gg", "GG"], function(input, week, config2, token2) {
      week[token2] = hooks.parseTwoDigitYear(input);
    });
    function getSetWeekYear(input) {
      return getSetWeekYearHelper.call(
        this,
        input,
        this.week(),
        this.weekday(),
        this.localeData()._week.dow,
        this.localeData()._week.doy
      );
    }
    function getSetISOWeekYear(input) {
      return getSetWeekYearHelper.call(
        this,
        input,
        this.isoWeek(),
        this.isoWeekday(),
        1,
        4
      );
    }
    function getISOWeeksInYear() {
      return weeksInYear(this.year(), 1, 4);
    }
    function getISOWeeksInISOWeekYear() {
      return weeksInYear(this.isoWeekYear(), 1, 4);
    }
    function getWeeksInYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }
    function getWeeksInWeekYear() {
      var weekInfo = this.localeData()._week;
      return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }
    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
      var weeksTarget;
      if (input == null) {
        return weekOfYear(this, dow, doy).year;
      } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
          week = weeksTarget;
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy);
      }
    }
    function setWeekAll(weekYear, week, weekday, dow, doy) {
      var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
      this.year(date.getUTCFullYear());
      this.month(date.getUTCMonth());
      this.date(date.getUTCDate());
      return this;
    }
    addFormatToken("Q", 0, "Qo", "quarter");
    addUnitAlias("quarter", "Q");
    addUnitPriority("quarter", 7);
    addRegexToken("Q", match1);
    addParseToken("Q", function(input, array) {
      array[MONTH] = (toInt(input) - 1) * 3;
    });
    function getSetQuarter(input) {
      return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }
    addFormatToken("D", ["DD", 2], "Do", "date");
    addUnitAlias("date", "D");
    addUnitPriority("date", 9);
    addRegexToken("D", match1to2);
    addRegexToken("DD", match1to2, match2);
    addRegexToken("Do", function(isStrict, locale2) {
      return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
    });
    addParseToken(["D", "DD"], DATE);
    addParseToken("Do", function(input, array) {
      array[DATE] = toInt(input.match(match1to2)[0]);
    });
    var getSetDayOfMonth = makeGetSet("Date", true);
    addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
    addUnitAlias("dayOfYear", "DDD");
    addUnitPriority("dayOfYear", 4);
    addRegexToken("DDD", match1to3);
    addRegexToken("DDDD", match3);
    addParseToken(["DDD", "DDDD"], function(input, array, config2) {
      config2._dayOfYear = toInt(input);
    });
    function getSetDayOfYear(input) {
      var dayOfYear = Math.round(
        (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
      ) + 1;
      return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
    }
    addFormatToken("m", ["mm", 2], 0, "minute");
    addUnitAlias("minute", "m");
    addUnitPriority("minute", 14);
    addRegexToken("m", match1to2);
    addRegexToken("mm", match1to2, match2);
    addParseToken(["m", "mm"], MINUTE);
    var getSetMinute = makeGetSet("Minutes", false);
    addFormatToken("s", ["ss", 2], 0, "second");
    addUnitAlias("second", "s");
    addUnitPriority("second", 15);
    addRegexToken("s", match1to2);
    addRegexToken("ss", match1to2, match2);
    addParseToken(["s", "ss"], SECOND);
    var getSetSecond = makeGetSet("Seconds", false);
    addFormatToken("S", 0, 0, function() {
      return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, ["SS", 2], 0, function() {
      return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, ["SSS", 3], 0, "millisecond");
    addFormatToken(0, ["SSSS", 4], 0, function() {
      return this.millisecond() * 10;
    });
    addFormatToken(0, ["SSSSS", 5], 0, function() {
      return this.millisecond() * 100;
    });
    addFormatToken(0, ["SSSSSS", 6], 0, function() {
      return this.millisecond() * 1e3;
    });
    addFormatToken(0, ["SSSSSSS", 7], 0, function() {
      return this.millisecond() * 1e4;
    });
    addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
      return this.millisecond() * 1e5;
    });
    addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
      return this.millisecond() * 1e6;
    });
    addUnitAlias("millisecond", "ms");
    addUnitPriority("millisecond", 16);
    addRegexToken("S", match1to3, match1);
    addRegexToken("SS", match1to3, match2);
    addRegexToken("SSS", match1to3, match3);
    var token, getSetMillisecond;
    for (token = "SSSS"; token.length <= 9; token += "S") {
      addRegexToken(token, matchUnsigned);
    }
    function parseMs(input, array) {
      array[MILLISECOND] = toInt(("0." + input) * 1e3);
    }
    for (token = "S"; token.length <= 9; token += "S") {
      addParseToken(token, parseMs);
    }
    getSetMillisecond = makeGetSet("Milliseconds", false);
    addFormatToken("z", 0, 0, "zoneAbbr");
    addFormatToken("zz", 0, 0, "zoneName");
    function getZoneAbbr() {
      return this._isUTC ? "UTC" : "";
    }
    function getZoneName() {
      return this._isUTC ? "Coordinated Universal Time" : "";
    }
    var proto = Moment.prototype;
    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone$5;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== "undefined" && Symbol.for != null) {
      proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return "Moment<" + this.format() + ">";
      };
    }
    proto.toJSON = toJSON;
    proto.toString = toString$3;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate(
      "dates accessor is deprecated. Use date instead.",
      getSetDayOfMonth
    );
    proto.months = deprecate(
      "months accessor is deprecated. Use month instead",
      getSetMonth
    );
    proto.years = deprecate(
      "years accessor is deprecated. Use year instead",
      getSetYear
    );
    proto.zone = deprecate(
      "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
      getSetZone
    );
    proto.isDSTShifted = deprecate(
      "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
      isDaylightSavingTimeShifted
    );
    function createUnix(input) {
      return createLocal(input * 1e3);
    }
    function createInZone() {
      return createLocal.apply(null, arguments).parseZone();
    }
    function preParsePostFormat(string) {
      return string;
    }
    var proto$1 = Locale.prototype;
    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;
    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;
    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;
    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;
    function get$1$1(format2, index, field, setter) {
      var locale2 = getLocale(), utc = createUTC().set(setter, index);
      return locale2[field](utc, format2);
    }
    function listMonthsImpl(format2, index, field) {
      if (isNumber(format2)) {
        index = format2;
        format2 = void 0;
      }
      format2 = format2 || "";
      if (index != null) {
        return get$1$1(format2, index, field, "month");
      }
      var i, out = [];
      for (i = 0; i < 12; i++) {
        out[i] = get$1$1(format2, i, field, "month");
      }
      return out;
    }
    function listWeekdaysImpl(localeSorted, format2, index, field) {
      if (typeof localeSorted === "boolean") {
        if (isNumber(format2)) {
          index = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
      } else {
        format2 = localeSorted;
        index = format2;
        localeSorted = false;
        if (isNumber(format2)) {
          index = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
      }
      var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i, out = [];
      if (index != null) {
        return get$1$1(format2, (index + shift) % 7, field, "day");
      }
      for (i = 0; i < 7; i++) {
        out[i] = get$1$1(format2, (i + shift) % 7, field, "day");
      }
      return out;
    }
    function listMonths(format2, index) {
      return listMonthsImpl(format2, index, "months");
    }
    function listMonthsShort(format2, index) {
      return listMonthsImpl(format2, index, "monthsShort");
    }
    function listWeekdays(localeSorted, format2, index) {
      return listWeekdaysImpl(localeSorted, format2, index, "weekdays");
    }
    function listWeekdaysShort(localeSorted, format2, index) {
      return listWeekdaysImpl(localeSorted, format2, index, "weekdaysShort");
    }
    function listWeekdaysMin(localeSorted, format2, index) {
      return listWeekdaysImpl(localeSorted, format2, index, "weekdaysMin");
    }
    getSetGlobalLocale("en", {
      eras: [
        {
          since: "0001-01-01",
          until: Infinity,
          offset: 1,
          name: "Anno Domini",
          narrow: "AD",
          abbr: "AD"
        },
        {
          since: "0000-12-31",
          until: -Infinity,
          offset: 1,
          name: "Before Christ",
          narrow: "BC",
          abbr: "BC"
        }
      ],
      dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal: function(number) {
        var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
        return number + output;
      }
    });
    hooks.lang = deprecate(
      "moment.lang is deprecated. Use moment.locale instead.",
      getSetGlobalLocale
    );
    hooks.langData = deprecate(
      "moment.langData is deprecated. Use moment.localeData instead.",
      getLocale
    );
    var mathAbs = Math.abs;
    function abs() {
      var data = this._data;
      this._milliseconds = mathAbs(this._milliseconds);
      this._days = mathAbs(this._days);
      this._months = mathAbs(this._months);
      data.milliseconds = mathAbs(data.milliseconds);
      data.seconds = mathAbs(data.seconds);
      data.minutes = mathAbs(data.minutes);
      data.hours = mathAbs(data.hours);
      data.months = mathAbs(data.months);
      data.years = mathAbs(data.years);
      return this;
    }
    function addSubtract$1(duration, input, value2, direction) {
      var other = createDuration(input, value2);
      duration._milliseconds += direction * other._milliseconds;
      duration._days += direction * other._days;
      duration._months += direction * other._months;
      return duration._bubble();
    }
    function add$1(input, value2) {
      return addSubtract$1(this, input, value2, 1);
    }
    function subtract$1(input, value2) {
      return addSubtract$1(this, input, value2, -1);
    }
    function absCeil(number) {
      if (number < 0) {
        return Math.floor(number);
      } else {
        return Math.ceil(number);
      }
    }
    function bubble() {
      var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
      if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
        milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
        days2 = 0;
        months2 = 0;
      }
      data.milliseconds = milliseconds2 % 1e3;
      seconds2 = absFloor(milliseconds2 / 1e3);
      data.seconds = seconds2 % 60;
      minutes2 = absFloor(seconds2 / 60);
      data.minutes = minutes2 % 60;
      hours2 = absFloor(minutes2 / 60);
      data.hours = hours2 % 24;
      days2 += absFloor(hours2 / 24);
      monthsFromDays = absFloor(daysToMonths(days2));
      months2 += monthsFromDays;
      days2 -= absCeil(monthsToDays(monthsFromDays));
      years2 = absFloor(months2 / 12);
      months2 %= 12;
      data.days = days2;
      data.months = months2;
      data.years = years2;
      return this;
    }
    function daysToMonths(days2) {
      return days2 * 4800 / 146097;
    }
    function monthsToDays(months2) {
      return months2 * 146097 / 4800;
    }
    function as(units) {
      if (!this.isValid()) {
        return NaN;
      }
      var days2, months2, milliseconds2 = this._milliseconds;
      units = normalizeUnits(units);
      if (units === "month" || units === "quarter" || units === "year") {
        days2 = this._days + milliseconds2 / 864e5;
        months2 = this._months + daysToMonths(days2);
        switch (units) {
          case "month":
            return months2;
          case "quarter":
            return months2 / 3;
          case "year":
            return months2 / 12;
        }
      } else {
        days2 = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
          case "week":
            return days2 / 7 + milliseconds2 / 6048e5;
          case "day":
            return days2 + milliseconds2 / 864e5;
          case "hour":
            return days2 * 24 + milliseconds2 / 36e5;
          case "minute":
            return days2 * 1440 + milliseconds2 / 6e4;
          case "second":
            return days2 * 86400 + milliseconds2 / 1e3;
          case "millisecond":
            return Math.floor(days2 * 864e5) + milliseconds2;
          default:
            throw new Error("Unknown unit " + units);
        }
      }
    }
    function valueOf$1() {
      if (!this.isValid()) {
        return NaN;
      }
      return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
    }
    function makeAs(alias) {
      return function() {
        return this.as(alias);
      };
    }
    var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
    function clone$1$1() {
      return createDuration(this);
    }
    function get$2$1(units) {
      units = normalizeUnits(units);
      return this.isValid() ? this[units + "s"]() : NaN;
    }
    function makeGetter(name) {
      return function() {
        return this.isValid() ? this._data[name] : NaN;
      };
    }
    var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
    function weeks() {
      return absFloor(this.days() / 7);
    }
    var round = Math.round, thresholds = {
      ss: 44,
      s: 45,
      m: 45,
      h: 22,
      d: 26,
      w: null,
      M: 11
    };
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
      return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }
    function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
      var duration = createDuration(posNegDuration).abs(), seconds2 = round(duration.as("s")), minutes2 = round(duration.as("m")), hours2 = round(duration.as("h")), days2 = round(duration.as("d")), months2 = round(duration.as("M")), weeks2 = round(duration.as("w")), years2 = round(duration.as("y")), a = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
      if (thresholds2.w != null) {
        a = a || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
      }
      a = a || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
      a[2] = withoutSuffix;
      a[3] = +posNegDuration > 0;
      a[4] = locale2;
      return substituteTimeAgo.apply(null, a);
    }
    function getSetRelativeTimeRounding(roundingFunction) {
      if (roundingFunction === void 0) {
        return round;
      }
      if (typeof roundingFunction === "function") {
        round = roundingFunction;
        return true;
      }
      return false;
    }
    function getSetRelativeTimeThreshold(threshold, limit) {
      if (thresholds[threshold] === void 0) {
        return false;
      }
      if (limit === void 0) {
        return thresholds[threshold];
      }
      thresholds[threshold] = limit;
      if (threshold === "s") {
        thresholds.ss = limit - 1;
      }
      return true;
    }
    function humanize(argWithSuffix, argThresholds) {
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      var withSuffix = false, th = thresholds, locale2, output;
      if (typeof argWithSuffix === "object") {
        argThresholds = argWithSuffix;
        argWithSuffix = false;
      }
      if (typeof argWithSuffix === "boolean") {
        withSuffix = argWithSuffix;
      }
      if (typeof argThresholds === "object") {
        th = Object.assign({}, thresholds, argThresholds);
        if (argThresholds.s != null && argThresholds.ss == null) {
          th.ss = argThresholds.s - 1;
        }
      }
      locale2 = this.localeData();
      output = relativeTime$1(this, !withSuffix, th, locale2);
      if (withSuffix) {
        output = locale2.pastFuture(+this, output);
      }
      return locale2.postformat(output);
    }
    var abs$1 = Math.abs;
    function sign(x) {
      return (x > 0) - (x < 0) || +x;
    }
    function toISOString$1() {
      if (!this.isValid()) {
        return this.localeData().invalidDate();
      }
      var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
      if (!total) {
        return "P0D";
      }
      minutes2 = absFloor(seconds2 / 60);
      hours2 = absFloor(minutes2 / 60);
      seconds2 %= 60;
      minutes2 %= 60;
      years2 = absFloor(months2 / 12);
      months2 %= 12;
      s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
      totalSign = total < 0 ? "-" : "";
      ymSign = sign(this._months) !== sign(total) ? "-" : "";
      daysSign = sign(this._days) !== sign(total) ? "-" : "";
      hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
      return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s + "S" : "");
    }
    var proto$2 = Duration.prototype;
    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1$1;
    proto$2.get = get$2$1;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;
    proto$2.toIsoString = deprecate(
      "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
      toISOString$1
    );
    proto$2.lang = lang;
    addFormatToken("X", 0, 0, "unix");
    addFormatToken("x", 0, 0, "valueOf");
    addRegexToken("x", matchSigned);
    addRegexToken("X", matchTimestamp);
    addParseToken("X", function(input, array, config2) {
      config2._d = new Date(parseFloat(input) * 1e3);
    });
    addParseToken("x", function(input, array, config2) {
      config2._d = new Date(toInt(input));
    });
    //! moment.js
    hooks.version = "2.29.4";
    setHookCallback(createLocal);
    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now$2;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate$1;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;
    hooks.HTML5_FMT = {
      DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
      DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
      DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
      DATE: "YYYY-MM-DD",
      TIME: "HH:mm",
      TIME_SECONDS: "HH:mm:ss",
      TIME_MS: "HH:mm:ss.SSS",
      WEEK: "GGGG-[W]WW",
      MONTH: "YYYY-MM"
    };
    function _createForOfIteratorHelper$5(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$5(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$5(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$5(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$5(o, minLen);
    }
    function _arrayLikeToArray$5(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    var isObject$8 = function isObject2(v) {
      return _typeof$1(v) == "object" && v !== null;
    };
    var listValue = function listValue2(v, title) {
      return isObject$8(v) ? v : {
        value: v,
        title: title !== void 0 ? title : v
      };
    };
    var listValuesToArray = function listValuesToArray2(listValuesObj) {
      if (!isObject$8(listValuesObj))
        return listValuesObj;
      if (Array.isArray(listValuesObj))
        return listValuesObj.map(function(v2) {
          return listValue(v2);
        });
      var listValuesArr = [];
      for (var v in listValuesObj) {
        var title = listValuesObj[v];
        listValuesArr.push(listValue(v, title));
      }
      return listValuesArr;
    };
    var getItemInListValues = function getItemInListValues2(listValues2, value2) {
      if (Array.isArray(listValues2)) {
        var values = listValues2.map(function(v) {
          return listValue(v);
        });
        return values.find(function(v) {
          return v.value === value2;
        }) || values.find(function(v) {
          return "".concat(v.value) === value2;
        });
      } else {
        return listValues2[value2] !== void 0 ? listValue(value2, listValues2[value2]) : void 0;
      }
    };
    var getTitleInListValues$1 = function getTitleInListValues2(listValues2, value2) {
      if (listValues2 == void 0)
        return value2;
      var it = getItemInListValues(listValues2, value2);
      return it !== void 0 ? it.title : value2;
    };
    var getValueInListValues = function getValueInListValues2(listValues2, value2) {
      if (listValues2 == void 0)
        return value2;
      var it = getItemInListValues(listValues2, value2);
      return it !== void 0 ? it.value : value2;
    };
    var mapListValues$2 = function mapListValues2(listValues2, mapFn) {
      var ret = [];
      if (Array.isArray(listValues2)) {
        var _iterator = _createForOfIteratorHelper$5(listValues2), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var v = _step.value;
            var lv = mapFn(listValue(v));
            if (lv != null)
              ret.push(lv);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } else {
        for (var value2 in listValues2) {
          var _lv = mapFn(listValue(value2, listValues2[value2]));
          if (_lv != null)
            ret.push(_lv);
        }
      }
      return ret;
    };
    const listValues = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      listValuesToArray,
      getItemInListValues,
      getTitleInListValues: getTitleInListValues$1,
      getValueInListValues,
      mapListValues: mapListValues$2
    }, Symbol.toStringTag, { value: "Module" }));
    function ownKeys$q(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$q(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$q(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$q(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var defaultField = function defaultField2(config2) {
      var canGetFirst = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var parentRuleGroupPath = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      return typeof config2.settings.defaultField === "function" ? config2.settings.defaultField(parentRuleGroupPath) : config2.settings.defaultField || (canGetFirst ? getFirstField(config2, parentRuleGroupPath) : null);
    };
    var defaultOperator = function defaultOperator2(config2, field) {
      var canGetFirst = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var fieldConfig = getFieldConfig$8(config2, field);
      var fieldOperators = fieldConfig && fieldConfig.operators || [];
      var fieldDefaultOperator = fieldConfig && fieldConfig.defaultOperator;
      if (!fieldOperators.includes(fieldDefaultOperator))
        fieldDefaultOperator = null;
      if (!fieldDefaultOperator && canGetFirst)
        fieldDefaultOperator = getFirstOperator(config2, field);
      var op = typeof config2.settings.defaultOperator === "function" ? config2.settings.defaultOperator(field, fieldConfig) : fieldDefaultOperator;
      return op;
    };
    var defaultOperatorOptions = function defaultOperatorOptions2(config2, operator, field) {
      var operatorConfig = operator ? getOperatorConfig$4(config2, operator, field) : null;
      if (!operatorConfig)
        return null;
      return operatorConfig.options ? new Immutable.Map(operatorConfig.options && operatorConfig.options.defaults || {}) : null;
    };
    var defaultRuleProperties = function defaultRuleProperties2(config2) {
      var parentRuleGroupPath = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var item = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var field = null, operator = null;
      var _config$settings = config2.settings, setDefaultFieldAndOp = _config$settings.setDefaultFieldAndOp, showErrorMessage = _config$settings.showErrorMessage;
      if (item) {
        var _item$properties, _item$properties2;
        field = item === null || item === void 0 ? void 0 : (_item$properties = item.properties) === null || _item$properties === void 0 ? void 0 : _item$properties.field;
        operator = item === null || item === void 0 ? void 0 : (_item$properties2 = item.properties) === null || _item$properties2 === void 0 ? void 0 : _item$properties2.operator;
      } else if (setDefaultFieldAndOp) {
        field = defaultField(config2, true, parentRuleGroupPath);
        operator = defaultOperator(config2, field);
      }
      var current = new Immutable.Map({
        field,
        operator,
        value: new Immutable.List(),
        valueSrc: new Immutable.List(),
        operatorOptions: defaultOperatorOptions(config2, operator, field)
      });
      if (showErrorMessage) {
        current = current.set("valueError", new Immutable.List());
      }
      if (field && operator) {
        var _getNewValueForFieldO = getNewValueForFieldOp(config2, config2, current, field, operator, "operator", false), newValue = _getNewValueForFieldO.newValue, newValueSrc = _getNewValueForFieldO.newValueSrc, newValueType = _getNewValueForFieldO.newValueType, newValueError = _getNewValueForFieldO.newValueError;
        current = current.set("value", newValue).set("valueSrc", newValueSrc).set("valueType", newValueType);
        if (showErrorMessage) {
          current = current.set("valueError", newValueError);
        }
      }
      return current;
    };
    var defaultGroupConjunction$1 = function defaultGroupConjunction2(config2) {
      var fieldConfig = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      fieldConfig = getFieldConfig$8(config2, fieldConfig);
      var conjs = fieldConfig && fieldConfig.conjunctions || Object.keys(config2.conjunctions);
      if (conjs.length == 1)
        return conjs[0];
      return config2.settings.defaultGroupConjunction || config2.settings.defaultConjunction || conjs[0];
    };
    var defaultConjunction = function defaultConjunction2(config2) {
      return config2.settings.defaultConjunction || Object.keys(config2.conjunctions)[0];
    };
    var defaultGroupProperties = function defaultGroupProperties2(config2) {
      var fieldConfig = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      return new Immutable.Map({
        conjunction: defaultGroupConjunction$1(config2, fieldConfig),
        not: false
      });
    };
    var defaultItemProperties = function defaultItemProperties2(config2, item) {
      var _item$properties3;
      return item && item.type == "group" ? defaultGroupProperties(config2, item === null || item === void 0 ? void 0 : (_item$properties3 = item.properties) === null || _item$properties3 === void 0 ? void 0 : _item$properties3.field) : defaultRuleProperties(config2, null, item);
    };
    var defaultRule = function defaultRule2(id, config2) {
      return _defineProperty$1({}, id, new Immutable.Map({
        type: "rule",
        id,
        properties: defaultRuleProperties(config2)
      }));
    };
    var defaultRoot$1 = function defaultRoot2(config2) {
      return new Immutable.Map({
        type: "group",
        id: uuid$2(),
        children1: new Immutable.OrderedMap(_objectSpread$q({}, defaultRule(uuid$2(), config2))),
        properties: defaultGroupProperties(config2)
      });
    };
    var createListFromArray$2 = function createListFromArray2(ids) {
      return new Immutable.List(ids);
    };
    var emptyProperies$1 = function emptyProperies2() {
      return new Immutable.Map();
    };
    const defaultUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      defaultField,
      defaultOperator,
      defaultOperatorOptions,
      defaultRuleProperties,
      defaultGroupConjunction: defaultGroupConjunction$1,
      defaultConjunction,
      defaultGroupProperties,
      defaultItemProperties,
      defaultRule,
      defaultRoot: defaultRoot$1,
      createListFromArray: createListFromArray$2,
      emptyProperies: emptyProperies$1
    }, Symbol.toStringTag, { value: "Module" }));
    var expandTreePath = function expandTreePath2(path) {
      for (var _len = arguments.length, suffix = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        suffix[_key - 1] = arguments[_key];
      }
      return path.interpose("children1").withMutations(function(list) {
        list.skip(1);
        list.push.apply(list, suffix);
        return list;
      });
    };
    var expandTreeSubpath = function expandTreeSubpath2(path) {
      for (var _len2 = arguments.length, suffix = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        suffix[_key2 - 1] = arguments[_key2];
      }
      return path.interpose("children1").withMutations(function(list) {
        list.push.apply(list, suffix);
        return list;
      });
    };
    var getItemByPath = function getItemByPath2(tree2, path) {
      var children = new Immutable.OrderedMap(_defineProperty$1({}, tree2.get("id"), tree2));
      var res = tree2;
      path.forEach(function(id) {
        res = children.get(id);
        children = res.get("children1");
      });
      return res;
    };
    var removePathsInTree = function removePathsInTree2(tree2) {
      var newTree = tree2;
      function _processNode(item, path) {
        var itemPath = path.push(item.get("id"));
        if (item.get("path")) {
          newTree = newTree.removeIn(expandTreePath(itemPath, "path"));
        }
        var children = item.get("children1");
        if (children) {
          children.map(function(child, _childId) {
            _processNode(child, itemPath);
          });
        }
      }
      _processNode(tree2, new Immutable.List());
      return newTree;
    };
    var removeIsLockedInTree = function removeIsLockedInTree2(tree2) {
      var newTree = tree2;
      function _processNode(item, path) {
        var isParentLocked = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
        var itemPath = path.push(item.get("id"));
        var isLocked = item.getIn(["properties", "isLocked"]);
        if (isParentLocked && isLocked) {
          newTree = newTree.deleteIn(expandTreePath(itemPath, "properties", "isLocked"));
        }
        var children = item.get("children1");
        if (children) {
          children.map(function(child, _childId) {
            _processNode(child, itemPath, isLocked || isParentLocked);
          });
        }
      }
      _processNode(tree2, new Immutable.List());
      return newTree;
    };
    var fixPathsInTree = function fixPathsInTree2(tree2) {
      var newTree = tree2;
      function _processNode(item, path, lev, nodeId) {
        if (!item)
          return;
        var currPath = item.get("path");
        var currId = item.get("id");
        var itemId = currId || nodeId;
        var itemPath = path.push(itemId);
        if (!currPath || !currPath.equals(itemPath)) {
          newTree = newTree.setIn(expandTreePath(itemPath, "path"), itemPath);
        }
        if (!currId) {
          newTree = newTree.setIn(expandTreePath(itemPath, "id"), itemId);
        }
        var children = item.get("children1");
        if (children) {
          if (children.constructor.name == "Map") {
            newTree = newTree.setIn(expandTreePath(itemPath, "children1"), new Immutable.OrderedMap(children));
          }
          children.map(function(child, childId) {
            _processNode(child, itemPath, lev + 1, childId);
          });
        }
      }
      _processNode(tree2, new Immutable.List(), 0);
      return newTree;
    };
    var fixEmptyGroupsInTree = function fixEmptyGroupsInTree2(tree2) {
      var newTree = tree2;
      function _processNode(item, path, lev, nodeId) {
        if (!item)
          return false;
        var itemId = item.get("id") || nodeId;
        var itemPath = path.push(itemId);
        var children = item.get("children1");
        if (children) {
          var allChildrenGone = children.map(function(child, childId) {
            return _processNode(child, itemPath, lev + 1, childId);
          }).reduce(function(curr, v) {
            return curr && v;
          }, true);
          if ((children.size == 0 || allChildrenGone) && lev > 0) {
            newTree = newTree.deleteIn(expandTreePath(itemPath));
            return true;
          }
        }
        return false;
      }
      _processNode(tree2, new Immutable.List(), 0);
      return newTree;
    };
    var getFlatTree$1 = function getFlatTree2(tree2) {
      var flat = [];
      var items = {};
      var realHeight = 0;
      function _flatizeTree(item2, path, insideCollapsed, insideLocked, insideRuleGroup, lev, info, parentType, caseId) {
        var type = item2.get("type");
        var collapsed = item2.get("collapsed");
        var id = item2.get("id");
        var children = item2.get("children1");
        var isLocked = item2.getIn(["properties", "isLocked"]);
        var childrenIds = children ? children.map(function(_child, childId) {
          return childId;
        }) : null;
        var isRuleGroup = type == "rule_group";
        var isLeaf = !insideRuleGroup && (!children || isRuleGroup);
        var itemsBefore = flat.length;
        var top = realHeight;
        flat.push(id);
        if (!insideCollapsed)
          realHeight += 1;
        info.height = (info.height || 0) + 1;
        items[id] = {
          type,
          parent: path.length ? path[path.length - 1] : null,
          parentType,
          caseId: type == "case_group" ? id : caseId,
          isDefaultCase: type == "case_group" && !children,
          path: path.concat(id),
          lev,
          leaf: !children,
          index: itemsBefore,
          id,
          children: childrenIds,
          leafsCount: 0,
          _top: itemsBefore,
          top: insideCollapsed ? null : top,
          collapsed,
          node: item2,
          isLocked: isLocked || insideLocked
        };
        if (children) {
          var subinfo = {};
          children.map(function(child, _childId) {
            _flatizeTree(child, path.concat(id), insideCollapsed || collapsed, insideLocked || isLocked, insideRuleGroup || isRuleGroup, lev + 1, subinfo, type, type == "case_group" ? id : caseId);
          });
          if (!collapsed) {
            info.height = (info.height || 0) + (subinfo.height || 0);
          }
        }
        if (caseId && isLeaf) {
          items[caseId].leafsCount++;
        }
        var itemsAfter = flat.length;
        var height = info.height;
        Object.assign(items[id], {
          _height: itemsAfter - itemsBefore,
          height,
          bottom: (insideCollapsed ? null : top) + height
        });
      }
      _flatizeTree(tree2, [], false, false, false, 0, {}, null, null);
      for (var i = 0; i < flat.length; i++) {
        var prevId = i > 0 ? flat[i - 1] : null;
        var nextId = i < flat.length - 1 ? flat[i + 1] : null;
        var item = items[flat[i]];
        item.prev = prevId;
        item.next = nextId;
      }
      return {
        flat,
        items
      };
    };
    var getTotalReordableNodesCountInTree$2 = function getTotalReordableNodesCountInTree2(tree2) {
      if (!tree2)
        return -1;
      var cnt = 0;
      function _processNode(item, path, lev) {
        var id, children, type;
        if (typeof item.get === "function") {
          id = item.get("id");
          children = item.get("children1");
          type = item.get("type");
        } else {
          id = item.id;
          children = item.children1;
          type = item.type;
        }
        var isRuleGroup = type == "rule_group";
        cnt++;
        if (children && !isRuleGroup) {
          children.map(function(child, _childId) {
            _processNode(child, path.concat(id));
          });
        }
      }
      _processNode(tree2, []);
      return cnt - 1;
    };
    var getTotalRulesCountInTree$2 = function getTotalRulesCountInTree2(tree2) {
      if (!tree2)
        return -1;
      var cnt = 0;
      function _processNode(item, path, lev) {
        var id, children, type;
        if (typeof item.get === "function") {
          id = item.get("id");
          children = item.get("children1");
          type = item.get("type");
        } else {
          id = item.id;
          children = item.children1;
          type = item.type;
        }
        if (type == "rule" || type == "rule_group") {
          cnt++;
        } else if (children) {
          children.map(function(child, _childId) {
            _processNode(child, path.concat(id));
          });
        }
      }
      _processNode(tree2, []);
      return cnt;
    };
    var getTreeBadFields = function getTreeBadFields2(tree2) {
      var badFields = [];
      function _processNode(item, path, lev) {
        var id = item.get("id");
        var children = item.get("children1");
        var valueError = item.getIn(["properties", "valueError"]);
        var field = item.getIn(["properties", "field"]);
        if (valueError && valueError.size > 0 && valueError.filter(function(v) {
          return v != null;
        }).size > 0) {
          badFields.push(field);
        }
        if (children) {
          children.map(function(child, _childId) {
            _processNode(child, path.concat(id));
          });
        }
      }
      if (tree2)
        _processNode(tree2, []);
      return Array.from(new Set(badFields));
    };
    var getLightTree = function getLightTree2(tree2) {
      var children1AsArray = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var newTree = tree2;
      function _processNode(item, itemId) {
        if (item.path)
          delete item.path;
        if (!children1AsArray && itemId)
          delete item.id;
        var properties = item.properties;
        if (properties) {
          if (properties.operatorOptions == null)
            delete properties.operatorOptions;
        }
        var children = item.children1;
        if (children) {
          for (var id in children) {
            _processNode(children[id], id);
          }
          if (children1AsArray) {
            item.children1 = Object.values(children);
          }
        }
      }
      _processNode(tree2, null);
      return newTree;
    };
    var getSwitchValues = function getSwitchValues2(tree2) {
      var vals = [];
      var children = tree2.get("children1");
      if (children) {
        children.map(function(child) {
          var value2 = child.getIn(["properties", "value"]);
          var caseValue;
          if (value2 && value2.size == 1) {
            caseValue = value2.get(0);
            if (Array.isArray(caseValue) && caseValue.length == 0) {
              caseValue = null;
            }
          } else {
            caseValue = null;
          }
          vals = [].concat(_toConsumableArray(vals), [caseValue]);
        });
      }
      return vals;
    };
    var isEmptyTree = function isEmptyTree2(tree2) {
      return !tree2.get("children1") || tree2.get("children1").size == 0;
    };
    var hasChildren = function hasChildren2(tree2, path) {
      return tree2.getIn(expandTreePath(path, "children1")).size > 0;
    };
    const treeUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      expandTreePath,
      expandTreeSubpath,
      getItemByPath,
      removePathsInTree,
      removeIsLockedInTree,
      fixPathsInTree,
      fixEmptyGroupsInTree,
      getFlatTree: getFlatTree$1,
      getTotalReordableNodesCountInTree: getTotalReordableNodesCountInTree$2,
      getTotalRulesCountInTree: getTotalRulesCountInTree$2,
      getTreeBadFields,
      getLightTree,
      getSwitchValues,
      isEmptyTree,
      hasChildren
    }, Symbol.toStringTag, { value: "Module" }));
    function arrayMap$3(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    var _arrayMap = arrayMap$3;
    function arrayEach$1(array, iteratee) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }
    var _arrayEach = arrayEach$1;
    var overArg = _overArg;
    var nativeKeys$1 = overArg(Object.keys, Object);
    var _nativeKeys = nativeKeys$1;
    var isPrototype = _isPrototype, nativeKeys = _nativeKeys;
    var objectProto$4 = Object.prototype;
    var hasOwnProperty$3 = objectProto$4.hasOwnProperty;
    function baseKeys$1(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty$3.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    var _baseKeys = baseKeys$1;
    var arrayLikeKeys = _arrayLikeKeys, baseKeys = _baseKeys, isArrayLike = isArrayLike_1;
    function keys$5(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    var keys_1 = keys$5;
    var copyObject$4 = _copyObject, keys$4 = keys_1;
    function baseAssign$1(object, source) {
      return object && copyObject$4(source, keys$4(source), object);
    }
    var _baseAssign = baseAssign$1;
    var copyObject$3 = _copyObject, keysIn$2 = keysIn_1;
    function baseAssignIn$1(object, source) {
      return object && copyObject$3(source, keysIn$2(source), object);
    }
    var _baseAssignIn = baseAssignIn$1;
    function arrayFilter$1(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value2 = array[index];
        if (predicate(value2, index, array)) {
          result[resIndex++] = value2;
        }
      }
      return result;
    }
    var _arrayFilter = arrayFilter$1;
    function stubArray$2() {
      return [];
    }
    var stubArray_1 = stubArray$2;
    var arrayFilter = _arrayFilter, stubArray$1 = stubArray_1;
    var objectProto$3 = Object.prototype;
    var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;
    var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
    var getSymbols$3 = !nativeGetSymbols$1 ? stubArray$1 : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols$1(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    var _getSymbols = getSymbols$3;
    var copyObject$2 = _copyObject, getSymbols$2 = _getSymbols;
    function copySymbols$1(source, object) {
      return copyObject$2(source, getSymbols$2(source), object);
    }
    var _copySymbols = copySymbols$1;
    function arrayPush$3(array, values) {
      var index = -1, length = values.length, offset2 = array.length;
      while (++index < length) {
        array[offset2 + index] = values[index];
      }
      return array;
    }
    var _arrayPush = arrayPush$3;
    var arrayPush$2 = _arrayPush, getPrototype = _getPrototype, getSymbols$1 = _getSymbols, stubArray = stubArray_1;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush$2(result, getSymbols$1(object));
        object = getPrototype(object);
      }
      return result;
    };
    var _getSymbolsIn = getSymbolsIn$2;
    var copyObject$1 = _copyObject, getSymbolsIn$1 = _getSymbolsIn;
    function copySymbolsIn$1(source, object) {
      return copyObject$1(source, getSymbolsIn$1(source), object);
    }
    var _copySymbolsIn = copySymbolsIn$1;
    var arrayPush$1 = _arrayPush, isArray$8 = isArray_1;
    function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray$8(object) ? result : arrayPush$1(result, symbolsFunc(object));
    }
    var _baseGetAllKeys = baseGetAllKeys$2;
    var baseGetAllKeys$1 = _baseGetAllKeys, getSymbols = _getSymbols, keys$3 = keys_1;
    function getAllKeys$2(object) {
      return baseGetAllKeys$1(object, keys$3, getSymbols);
    }
    var _getAllKeys = getAllKeys$2;
    var baseGetAllKeys = _baseGetAllKeys, getSymbolsIn = _getSymbolsIn, keysIn$1 = keysIn_1;
    function getAllKeysIn$3(object) {
      return baseGetAllKeys(object, keysIn$1, getSymbolsIn);
    }
    var _getAllKeysIn = getAllKeysIn$3;
    var getNative$3 = _getNative, root$4 = _root;
    var DataView$1 = getNative$3(root$4, "DataView");
    var _DataView = DataView$1;
    var getNative$2 = _getNative, root$3 = _root;
    var Promise$2 = getNative$2(root$3, "Promise");
    var _Promise = Promise$2;
    var getNative$1 = _getNative, root$2 = _root;
    var Set$2 = getNative$1(root$2, "Set");
    var _Set = Set$2;
    var getNative = _getNative, root$1 = _root;
    var WeakMap$2 = getNative(root$1, "WeakMap");
    var _WeakMap = WeakMap$2;
    var DataView = _DataView, Map$1 = _Map, Promise$1 = _Promise, Set$1 = _Set, WeakMap$1 = _WeakMap, baseGetTag$1 = _baseGetTag, toSource = _toSource;
    var mapTag$4 = "[object Map]", objectTag$2 = "[object Object]", promiseTag = "[object Promise]", setTag$4 = "[object Set]", weakMapTag$1 = "[object WeakMap]";
    var dataViewTag$3 = "[object DataView]";
    var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map$1), promiseCtorString = toSource(Promise$1), setCtorString = toSource(Set$1), weakMapCtorString = toSource(WeakMap$1);
    var getTag$4 = baseGetTag$1;
    if (DataView && getTag$4(new DataView(new ArrayBuffer(1))) != dataViewTag$3 || Map$1 && getTag$4(new Map$1()) != mapTag$4 || Promise$1 && getTag$4(Promise$1.resolve()) != promiseTag || Set$1 && getTag$4(new Set$1()) != setTag$4 || WeakMap$1 && getTag$4(new WeakMap$1()) != weakMapTag$1) {
      getTag$4 = function(value2) {
        var result = baseGetTag$1(value2), Ctor = result == objectTag$2 ? value2.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag$3;
            case mapCtorString:
              return mapTag$4;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag$4;
            case weakMapCtorString:
              return weakMapTag$1;
          }
        }
        return result;
      };
    }
    var _getTag = getTag$4;
    var objectProto$2 = Object.prototype;
    var hasOwnProperty$2 = objectProto$2.hasOwnProperty;
    function initCloneArray$1(array) {
      var length = array.length, result = new array.constructor(length);
      if (length && typeof array[0] == "string" && hasOwnProperty$2.call(array, "index")) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }
    var _initCloneArray = initCloneArray$1;
    var cloneArrayBuffer$1 = _cloneArrayBuffer;
    function cloneDataView$1(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer$1(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }
    var _cloneDataView = cloneDataView$1;
    var reFlags = /\w*$/;
    function cloneRegExp$1(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }
    var _cloneRegExp = cloneRegExp$1;
    var Symbol$4 = _Symbol;
    var symbolProto$2 = Symbol$4 ? Symbol$4.prototype : void 0, symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : void 0;
    function cloneSymbol$1(symbol) {
      return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
    }
    var _cloneSymbol = cloneSymbol$1;
    var cloneArrayBuffer = _cloneArrayBuffer, cloneDataView = _cloneDataView, cloneRegExp = _cloneRegExp, cloneSymbol = _cloneSymbol, cloneTypedArray = _cloneTypedArray;
    var boolTag$2 = "[object Boolean]", dateTag$2 = "[object Date]", mapTag$3 = "[object Map]", numberTag$2 = "[object Number]", regexpTag$2 = "[object RegExp]", setTag$3 = "[object Set]", stringTag$2 = "[object String]", symbolTag$3 = "[object Symbol]";
    var arrayBufferTag$2 = "[object ArrayBuffer]", dataViewTag$2 = "[object DataView]", float32Tag$1 = "[object Float32Array]", float64Tag$1 = "[object Float64Array]", int8Tag$1 = "[object Int8Array]", int16Tag$1 = "[object Int16Array]", int32Tag$1 = "[object Int32Array]", uint8Tag$1 = "[object Uint8Array]", uint8ClampedTag$1 = "[object Uint8ClampedArray]", uint16Tag$1 = "[object Uint16Array]", uint32Tag$1 = "[object Uint32Array]";
    function initCloneByTag$1(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag$2:
          return cloneArrayBuffer(object);
        case boolTag$2:
        case dateTag$2:
          return new Ctor(+object);
        case dataViewTag$2:
          return cloneDataView(object, isDeep);
        case float32Tag$1:
        case float64Tag$1:
        case int8Tag$1:
        case int16Tag$1:
        case int32Tag$1:
        case uint8Tag$1:
        case uint8ClampedTag$1:
        case uint16Tag$1:
        case uint32Tag$1:
          return cloneTypedArray(object, isDeep);
        case mapTag$3:
          return new Ctor();
        case numberTag$2:
        case stringTag$2:
          return new Ctor(object);
        case regexpTag$2:
          return cloneRegExp(object);
        case setTag$3:
          return new Ctor();
        case symbolTag$3:
          return cloneSymbol(object);
      }
    }
    var _initCloneByTag = initCloneByTag$1;
    var getTag$3 = _getTag, isObjectLike$3 = isObjectLike_1;
    var mapTag$2 = "[object Map]";
    function baseIsMap$1(value2) {
      return isObjectLike$3(value2) && getTag$3(value2) == mapTag$2;
    }
    var _baseIsMap = baseIsMap$1;
    var baseIsMap = _baseIsMap, baseUnary$1 = _baseUnary, nodeUtil$1 = _nodeUtil.exports;
    var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;
    var isMap$1 = nodeIsMap ? baseUnary$1(nodeIsMap) : baseIsMap;
    var isMap_1 = isMap$1;
    var getTag$2 = _getTag, isObjectLike$2 = isObjectLike_1;
    var setTag$2 = "[object Set]";
    function baseIsSet$1(value2) {
      return isObjectLike$2(value2) && getTag$2(value2) == setTag$2;
    }
    var _baseIsSet = baseIsSet$1;
    var baseIsSet = _baseIsSet, baseUnary = _baseUnary, nodeUtil = _nodeUtil.exports;
    var nodeIsSet = nodeUtil && nodeUtil.isSet;
    var isSet$1 = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
    var isSet_1 = isSet$1;
    var Stack$2 = _Stack, arrayEach = _arrayEach, assignValue$1 = _assignValue, baseAssign = _baseAssign, baseAssignIn = _baseAssignIn, cloneBuffer = _cloneBuffer.exports, copyArray = _copyArray, copySymbols = _copySymbols, copySymbolsIn = _copySymbolsIn, getAllKeys$1 = _getAllKeys, getAllKeysIn$2 = _getAllKeysIn, getTag$1 = _getTag, initCloneArray = _initCloneArray, initCloneByTag = _initCloneByTag, initCloneObject = _initCloneObject, isArray$7 = isArray_1, isBuffer$1 = isBuffer$4.exports, isMap = isMap_1, isObject$7 = isObject_1, isSet = isSet_1, keys$2 = keys_1, keysIn = keysIn_1;
    var CLONE_DEEP_FLAG$1 = 1, CLONE_FLAT_FLAG$1 = 2, CLONE_SYMBOLS_FLAG$1 = 4;
    var argsTag$1 = "[object Arguments]", arrayTag$1 = "[object Array]", boolTag$1 = "[object Boolean]", dateTag$1 = "[object Date]", errorTag$1 = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag$1 = "[object Map]", numberTag$1 = "[object Number]", objectTag$1 = "[object Object]", regexpTag$1 = "[object RegExp]", setTag$1 = "[object Set]", stringTag$1 = "[object String]", symbolTag$2 = "[object Symbol]", weakMapTag = "[object WeakMap]";
    var arrayBufferTag$1 = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
    var cloneableTags = {};
    cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] = cloneableTags[boolTag$1] = cloneableTags[dateTag$1] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag$1] = cloneableTags[numberTag$1] = cloneableTags[objectTag$1] = cloneableTags[regexpTag$1] = cloneableTags[setTag$1] = cloneableTags[stringTag$1] = cloneableTags[symbolTag$2] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag$1] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    function baseClone$1(value2, bitmask, customizer, key, object, stack) {
      var result, isDeep = bitmask & CLONE_DEEP_FLAG$1, isFlat = bitmask & CLONE_FLAT_FLAG$1, isFull = bitmask & CLONE_SYMBOLS_FLAG$1;
      if (customizer) {
        result = object ? customizer(value2, key, object, stack) : customizer(value2);
      }
      if (result !== void 0) {
        return result;
      }
      if (!isObject$7(value2)) {
        return value2;
      }
      var isArr = isArray$7(value2);
      if (isArr) {
        result = initCloneArray(value2);
        if (!isDeep) {
          return copyArray(value2, result);
        }
      } else {
        var tag = getTag$1(value2), isFunc = tag == funcTag || tag == genTag;
        if (isBuffer$1(value2)) {
          return cloneBuffer(value2, isDeep);
        }
        if (tag == objectTag$1 || tag == argsTag$1 || isFunc && !object) {
          result = isFlat || isFunc ? {} : initCloneObject(value2);
          if (!isDeep) {
            return isFlat ? copySymbolsIn(value2, baseAssignIn(result, value2)) : copySymbols(value2, baseAssign(result, value2));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value2 : {};
          }
          result = initCloneByTag(value2, tag, isDeep);
        }
      }
      stack || (stack = new Stack$2());
      var stacked = stack.get(value2);
      if (stacked) {
        return stacked;
      }
      stack.set(value2, result);
      if (isSet(value2)) {
        value2.forEach(function(subValue) {
          result.add(baseClone$1(subValue, bitmask, customizer, subValue, value2, stack));
        });
      } else if (isMap(value2)) {
        value2.forEach(function(subValue, key2) {
          result.set(key2, baseClone$1(subValue, bitmask, customizer, key2, value2, stack));
        });
      }
      var keysFunc = isFull ? isFlat ? getAllKeysIn$2 : getAllKeys$1 : isFlat ? keysIn : keys$2;
      var props = isArr ? void 0 : keysFunc(value2);
      arrayEach(props || value2, function(subValue, key2) {
        if (props) {
          key2 = subValue;
          subValue = value2[key2];
        }
        assignValue$1(result, key2, baseClone$1(subValue, bitmask, customizer, key2, value2, stack));
      });
      return result;
    }
    var _baseClone = baseClone$1;
    var baseGetTag = _baseGetTag, isObjectLike$1 = isObjectLike_1;
    var symbolTag$1 = "[object Symbol]";
    function isSymbol$4(value2) {
      return typeof value2 == "symbol" || isObjectLike$1(value2) && baseGetTag(value2) == symbolTag$1;
    }
    var isSymbol_1 = isSymbol$4;
    var isArray$6 = isArray_1, isSymbol$3 = isSymbol_1;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
    function isKey$3(value2, object) {
      if (isArray$6(value2)) {
        return false;
      }
      var type = typeof value2;
      if (type == "number" || type == "symbol" || type == "boolean" || value2 == null || isSymbol$3(value2)) {
        return true;
      }
      return reIsPlainProp.test(value2) || !reIsDeepProp.test(value2) || object != null && value2 in Object(object);
    }
    var _isKey = isKey$3;
    var MapCache$1 = _MapCache;
    var FUNC_ERROR_TEXT$2 = "Expected a function";
    function memoize$1(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT$2);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize$1.Cache || MapCache$1)();
      return memoized;
    }
    memoize$1.Cache = MapCache$1;
    var memoize_1 = memoize$1;
    var memoize = memoize_1;
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped$1(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });
      var cache = result.cache;
      return result;
    }
    var _memoizeCapped = memoizeCapped$1;
    var memoizeCapped = _memoizeCapped;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath$1 = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46) {
        result.push("");
      }
      string.replace(rePropName, function(match5, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match5);
      });
      return result;
    });
    var _stringToPath = stringToPath$1;
    var Symbol$3 = _Symbol, arrayMap$2 = _arrayMap, isArray$5 = isArray_1, isSymbol$2 = isSymbol_1;
    var INFINITY$2 = 1 / 0;
    var symbolProto$1 = Symbol$3 ? Symbol$3.prototype : void 0, symbolToString = symbolProto$1 ? symbolProto$1.toString : void 0;
    function baseToString$2(value2) {
      if (typeof value2 == "string") {
        return value2;
      }
      if (isArray$5(value2)) {
        return arrayMap$2(value2, baseToString$2) + "";
      }
      if (isSymbol$2(value2)) {
        return symbolToString ? symbolToString.call(value2) : "";
      }
      var result = value2 + "";
      return result == "0" && 1 / value2 == -INFINITY$2 ? "-0" : result;
    }
    var _baseToString = baseToString$2;
    var baseToString$1 = _baseToString;
    function toString$2(value2) {
      return value2 == null ? "" : baseToString$1(value2);
    }
    var toString_1 = toString$2;
    var isArray$4 = isArray_1, isKey$2 = _isKey, stringToPath = _stringToPath, toString$1 = toString_1;
    function castPath$6(value2, object) {
      if (isArray$4(value2)) {
        return value2;
      }
      return isKey$2(value2, object) ? [value2] : stringToPath(toString$1(value2));
    }
    var _castPath = castPath$6;
    function last$1(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : void 0;
    }
    var last_1 = last$1;
    var isSymbol$1 = isSymbol_1;
    var INFINITY$1 = 1 / 0;
    function toKey$6(value2) {
      if (typeof value2 == "string" || isSymbol$1(value2)) {
        return value2;
      }
      var result = value2 + "";
      return result == "0" && 1 / value2 == -INFINITY$1 ? "-0" : result;
    }
    var _toKey = toKey$6;
    var castPath$5 = _castPath, toKey$5 = _toKey;
    function baseGet$4(object, path) {
      path = castPath$5(path, object);
      var index = 0, length = path.length;
      while (object != null && index < length) {
        object = object[toKey$5(path[index++])];
      }
      return index && index == length ? object : void 0;
    }
    var _baseGet = baseGet$4;
    function baseSlice$1(array, start, end) {
      var index = -1, length = array.length;
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;
      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }
    var _baseSlice = baseSlice$1;
    var baseGet$3 = _baseGet, baseSlice = _baseSlice;
    function parent$1(object, path) {
      return path.length < 2 ? object : baseGet$3(object, baseSlice(path, 0, -1));
    }
    var _parent = parent$1;
    var castPath$4 = _castPath, last = last_1, parent = _parent, toKey$4 = _toKey;
    function baseUnset$1(object, path) {
      path = castPath$4(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey$4(last(path))];
    }
    var _baseUnset = baseUnset$1;
    var isPlainObject$2 = isPlainObject_1;
    function customOmitClone$1(value2) {
      return isPlainObject$2(value2) ? void 0 : value2;
    }
    var _customOmitClone = customOmitClone$1;
    var Symbol$2 = _Symbol, isArguments$1 = isArguments_1, isArray$3 = isArray_1;
    var spreadableSymbol = Symbol$2 ? Symbol$2.isConcatSpreadable : void 0;
    function isFlattenable$1(value2) {
      return isArray$3(value2) || isArguments$1(value2) || !!(spreadableSymbol && value2 && value2[spreadableSymbol]);
    }
    var _isFlattenable = isFlattenable$1;
    var arrayPush = _arrayPush, isFlattenable = _isFlattenable;
    function baseFlatten$1(array, depth, predicate, isStrict, result) {
      var index = -1, length = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index < length) {
        var value2 = array[index];
        if (depth > 0 && predicate(value2)) {
          if (depth > 1) {
            baseFlatten$1(value2, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value2);
          }
        } else if (!isStrict) {
          result[result.length] = value2;
        }
      }
      return result;
    }
    var _baseFlatten = baseFlatten$1;
    var baseFlatten = _baseFlatten;
    function flatten$1(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }
    var flatten_1 = flatten$1;
    var flatten = flatten_1, overRest = _overRest, setToString = _setToString;
    function flatRest$2(func) {
      return setToString(overRest(func, void 0, flatten), func + "");
    }
    var _flatRest = flatRest$2;
    var arrayMap$1 = _arrayMap, baseClone = _baseClone, baseUnset = _baseUnset, castPath$3 = _castPath, copyObject = _copyObject, customOmitClone = _customOmitClone, flatRest$1 = _flatRest, getAllKeysIn$1 = _getAllKeysIn;
    var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
    var omit = flatRest$1(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap$1(paths, function(path) {
        path = castPath$3(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn$1(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });
    var omit_1 = omit;
    var typeOf = function typeOf2(v) {
      if (_typeof$1(v) == "object" && v !== null && Array.isArray(v))
        return "array";
      else
        return _typeof$1(v);
    };
    var isTypeOf = function isTypeOf2(v, type) {
      if (typeOf(v) == type)
        return true;
      if (type == "number" && !isNaN(v))
        return true;
      return false;
    };
    var validateAndFixTree$1 = function validateAndFixTree2(newTree, _oldTree, newConfig, oldConfig) {
      var tree2 = validateTree(newTree, _oldTree, newConfig, oldConfig);
      tree2 = fixPathsInTree(tree2);
      return tree2;
    };
    var validateTree = function validateTree2(tree2, _oldTree, config2, oldConfig, removeEmptyGroups, removeIncompleteRules) {
      if (removeEmptyGroups === void 0) {
        removeEmptyGroups = config2.settings.removeEmptyGroupsOnLoad;
      }
      if (removeIncompleteRules === void 0) {
        removeIncompleteRules = config2.settings.removeIncompleteRulesOnLoad;
      }
      var c = {
        config: config2,
        oldConfig,
        removeEmptyGroups,
        removeIncompleteRules
      };
      return validateItem(tree2, [], null, {}, c);
    };
    function validateItem(item, path, itemId, meta, c) {
      var type = item.get("type");
      var children = item.get("children1");
      if ((type === "group" || type === "rule_group" || type == "case_group" || type == "switch_group") && children && children.size) {
        return validateGroup(item, path, itemId, meta, c);
      } else if (type === "rule") {
        return validateRule(item, path, itemId, meta, c);
      } else {
        return item;
      }
    }
    function validateGroup(item, path, itemId, meta, c) {
      var removeEmptyGroups = c.removeEmptyGroups;
      var id = item.get("id");
      var children = item.get("children1");
      var oldChildren = children;
      if (!id && itemId) {
        id = itemId;
        item = item.set("id", id);
        meta.sanitized = true;
      }
      var submeta = {};
      children = children.map(function(currentChild, childId) {
        return validateItem(currentChild, path.concat(id), childId, submeta, c);
      });
      if (removeEmptyGroups)
        children = children.filter(function(currentChild) {
          return currentChild != void 0;
        });
      var sanitized = submeta.sanitized || oldChildren.size != children.size;
      if (!children.size && removeEmptyGroups && path.length) {
        sanitized = true;
        item = void 0;
      }
      if (sanitized)
        meta.sanitized = true;
      if (sanitized && item)
        item = item.set("children1", children);
      return item;
    }
    function validateRule(item, path, itemId, meta, c) {
      var removeIncompleteRules = c.removeIncompleteRules, config2 = c.config, oldConfig = c.oldConfig;
      var showErrorMessage = config2.settings.showErrorMessage;
      var id = item.get("id");
      var properties = item.get("properties");
      var field = properties.get("field") || null;
      var operator = properties.get("operator") || null;
      var operatorOptions = properties.get("operatorOptions");
      var valueSrc = properties.get("valueSrc");
      var value2 = properties.get("value");
      var valueError = properties.get("valueError");
      var oldSerialized = {
        field,
        operator,
        operatorOptions: operatorOptions ? operatorOptions.toJS() : {},
        valueSrc: valueSrc ? valueSrc.toJS() : null,
        value: value2 ? value2.toJS() : null,
        valueError: valueError ? valueError.toJS() : null
      };
      field && operator && value2 && !value2.includes(void 0);
      if (!id && itemId) {
        id = itemId;
        item = item.set("id", id);
        meta.sanitized = true;
      }
      var fieldDefinition = field ? getFieldConfig$8(config2, field) : null;
      if (field && !fieldDefinition) {
        logger$1.warn("No config for field ".concat(field));
        field = null;
      }
      if (field == null) {
        properties = ["operator", "operatorOptions", "valueSrc", "value"].reduce(function(map2, key) {
          return map2["delete"](key);
        }, properties);
        operator = null;
      }
      if (operator == "range_between" || operator == "range_not_between") {
        operator = operator == "range_between" ? "between" : "not_between";
        console.info("Fixed operator ".concat(properties.get("operator"), " to ").concat(operator));
        properties = properties.set("operator", operator);
      }
      var operatorDefinition = operator ? getOperatorConfig$4(config2, operator, field) : null;
      if (operator && !operatorDefinition) {
        console.warn("No config for operator ".concat(operator));
        operator = null;
      }
      var availOps = field ? getOperatorsForField(config2, field) : [];
      if (!availOps) {
        console.warn("Type of field ".concat(field, " is not supported"));
        operator = null;
      } else if (operator && availOps.indexOf(operator) == -1) {
        if (operator == "is_empty" || operator == "is_not_empty") {
          operator = operator == "is_empty" ? "is_null" : "is_not_null";
          console.info("Fixed operator ".concat(properties.get("operator"), " to ").concat(operator, " for ").concat(field));
          properties = properties.set("operator", operator);
        } else {
          console.warn("Operator ".concat(operator, " is not supported for field ").concat(field));
          operator = null;
        }
      }
      if (operator == null) {
        properties = properties["delete"]("operatorOptions");
        properties = properties["delete"]("valueSrc");
        properties = properties["delete"]("value");
      }
      operatorOptions = properties.get("operatorOptions");
      operator ? defaultValue$1(operatorDefinition.cardinality, 1) : null;
      if (!operator || operatorOptions && !operatorDefinition.options) {
        operatorOptions = null;
        properties = properties["delete"]("operatorOptions");
      } else if (operator && !operatorOptions && operatorDefinition.options) {
        operatorOptions = defaultOperatorOptions(config2, operator, field);
        properties = properties.set("operatorOptions", operatorOptions);
      }
      valueSrc = properties.get("valueSrc");
      value2 = properties.get("value");
      var canFix = !showErrorMessage;
      var isEndValue = true;
      var _getNewValueForFieldO = getNewValueForFieldOp(config2, oldConfig, properties, field, operator, null, canFix, isEndValue), newValue = _getNewValueForFieldO.newValue, newValueSrc = _getNewValueForFieldO.newValueSrc, newValueError = _getNewValueForFieldO.newValueError;
      value2 = newValue;
      valueSrc = newValueSrc;
      valueError = newValueError;
      properties = properties.set("value", value2);
      properties = properties.set("valueSrc", valueSrc);
      if (showErrorMessage) {
        properties = properties.set("valueError", valueError);
      }
      var newSerialized = {
        field,
        operator,
        operatorOptions: operatorOptions ? operatorOptions.toJS() : {},
        valueSrc: valueSrc ? valueSrc.toJS() : null,
        value: value2 ? value2.toJS() : null,
        valueError: valueError ? valueError.toJS() : null
      };
      var sanitized = !deepEqual(oldSerialized, newSerialized);
      var isComplete = field && operator && value2 && !value2.includes(void 0);
      if (sanitized)
        meta.sanitized = true;
      if (!isComplete && removeIncompleteRules)
        item = void 0;
      else if (sanitized)
        item = item.set("properties", properties);
      return item;
    }
    var validateValue = function validateValue2(config2, leftField, field, operator, value2, valueType, valueSrc, asyncListValues) {
      var canFix = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : false;
      var isEndValue = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : false;
      var isRawValue = arguments.length > 10 && arguments[10] !== void 0 ? arguments[10] : true;
      var validError = null;
      var fixedValue = value2;
      if (value2 != null) {
        if (valueSrc == "field") {
          var _validateFieldValue = validateFieldValue(leftField, field, value2, valueSrc, valueType, asyncListValues, config2);
          var _validateFieldValue2 = _slicedToArray(_validateFieldValue, 2);
          validError = _validateFieldValue2[0];
          fixedValue = _validateFieldValue2[1];
        } else if (valueSrc == "func") {
          var _validateFuncValue = validateFuncValue(leftField, field, value2, valueSrc, valueType, asyncListValues, config2, operator, isEndValue, canFix);
          var _validateFuncValue2 = _slicedToArray(_validateFuncValue, 2);
          validError = _validateFuncValue2[0];
          fixedValue = _validateFuncValue2[1];
        } else if (valueSrc == "value" || !valueSrc) {
          var _validateNormalValue = validateNormalValue(leftField, field, value2, valueSrc, valueType, asyncListValues, config2, operator, isEndValue, canFix);
          var _validateNormalValue2 = _slicedToArray(_validateNormalValue, 2);
          validError = _validateNormalValue2[0];
          fixedValue = _validateNormalValue2[1];
        }
        if (!validError) {
          getFieldConfig$8(config2, field);
          var w = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
          var operatorDefinition = operator ? getOperatorConfig$4(config2, operator, field) : null;
          var fieldWidgetDefinition = omit_1(getFieldWidgetConfig$3(config2, field, operator, w, valueSrc), ["factory"]);
          var rightFieldDefinition = valueSrc == "field" ? getFieldConfig$8(config2, value2) : null;
          var fieldSettings = fieldWidgetDefinition;
          var fn = fieldWidgetDefinition.validateValue;
          if (typeof fn == "function") {
            var args = [fixedValue, fieldSettings, operator, operatorDefinition];
            if (valueSrc == "field")
              args.push(rightFieldDefinition);
            var validResult = fn.apply(void 0, args);
            if (typeof validResult == "boolean") {
              if (validResult == false)
                validError = "Invalid value";
            } else {
              validError = validResult;
            }
          }
        }
      }
      if (isRawValue && validError) {
        console.warn("[RAQB validate]", "Field ".concat(field, ": ").concat(validError));
      }
      return [validError, fixedValue];
    };
    var validateValueInList = function validateValueInList2(value2, listValues2, canFix, isEndValue, removeInvalidMultiSelectValuesOnLoad) {
      var values = immutable.exports.List.isList(value2) ? value2.toJS() : value2 instanceof Array ? _toConsumableArray(value2) : void 0;
      if (values) {
        var _values$reduce = values.reduce(function(_ref, val) {
          var _ref2 = _slicedToArray(_ref, 2), goodVals = _ref2[0], badVals = _ref2[1];
          var vv2 = getItemInListValues(listValues2, val);
          if (vv2 == void 0) {
            return [goodVals, [].concat(_toConsumableArray(badVals), [val])];
          } else {
            return [[].concat(_toConsumableArray(goodVals), [vv2.value]), badVals];
          }
        }, [[], []]), _values$reduce2 = _slicedToArray(_values$reduce, 2), goodValues = _values$reduce2[0], badValues = _values$reduce2[1];
        var plural = badValues.length > 1;
        var err = badValues.length ? "".concat(plural ? "Values" : "Value", " ").concat(badValues.join(", "), " ").concat(plural ? "are" : "is", " not in list of values") : null;
        if (removeInvalidMultiSelectValuesOnLoad !== void 0) {
          canFix = removeInvalidMultiSelectValuesOnLoad;
        } else {
          canFix = canFix || isEndValue;
        }
        return [err, canFix ? goodValues : value2];
      } else {
        var vv = getItemInListValues(listValues2, value2);
        if (vv == void 0) {
          return ["Value ".concat(value2, " is not in list of values"), value2];
        } else {
          value2 = vv.value;
        }
        return [null, value2];
      }
    };
    var validateNormalValue = function validateNormalValue2(leftField, field, value2, valueSrc, valueType, asyncListValues, config2) {
      var operator = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : null;
      var isEndValue = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : false;
      var canFix = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : false;
      if (field) {
        var fieldConfig = getFieldConfig$8(config2, field);
        var w = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
        var wConfig = config2.widgets[w];
        var wType = wConfig.type;
        var jsType = wConfig.jsType;
        var fieldSettings = fieldConfig.fieldSettings;
        if (valueType && valueType != wType)
          return ["Value should have type ".concat(wType, ", but got value of type ").concat(valueType), value2];
        if (jsType && !isTypeOf(value2, jsType) && !fieldSettings.listValues) {
          return ["Value should have JS type ".concat(jsType, ", but got value of type ").concat(_typeof$1(value2)), value2];
        }
        if (fieldSettings) {
          var listValues2 = asyncListValues || fieldSettings.listValues;
          if (listValues2 && !fieldSettings.allowCustomValues) {
            return validateValueInList(value2, listValues2, canFix, isEndValue, config2.settings.removeInvalidMultiSelectValuesOnLoad);
          }
          if (fieldSettings.min != null && value2 < fieldSettings.min) {
            return ["Value ".concat(value2, " < min ").concat(fieldSettings.min), canFix ? fieldSettings.min : value2];
          }
          if (fieldSettings.max != null && value2 > fieldSettings.max) {
            return ["Value ".concat(value2, " > max ").concat(fieldSettings.max), canFix ? fieldSettings.max : value2];
          }
        }
      }
      return [null, value2];
    };
    var validateFieldValue = function validateFieldValue2(leftField, field, value2, _valueSrc, valueType, asyncListValues, config2) {
      var fieldSeparator = config2.settings.fieldSeparator;
      var isFuncArg = _typeof$1(field) == "object" && (field === null || field === void 0 ? void 0 : field._isFuncArg);
      var leftFieldStr = Array.isArray(leftField) ? leftField.join(fieldSeparator) : leftField;
      var rightFieldStr = Array.isArray(value2) ? value2.join(fieldSeparator) : value2;
      var rightFieldDefinition = getFieldConfig$8(config2, value2);
      if (!rightFieldDefinition)
        return ["Unknown field ".concat(value2), value2];
      if (rightFieldStr == leftFieldStr && !isFuncArg)
        return ["Can't compare field ".concat(leftField, " with itself"), value2];
      if (valueType && valueType != rightFieldDefinition.type)
        return ["Field ".concat(value2, " is of type ").concat(rightFieldDefinition.type, ", but expected ").concat(valueType), value2];
      return [null, value2];
    };
    var validateFuncValue = function validateFuncValue2(leftField, field, value2, _valueSrc, valueType, asyncListValues, config2) {
      var operator = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : null;
      var isEndValue = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : false;
      var canFix = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : false;
      var fixedValue = value2;
      if (value2) {
        var funcKey = value2.get("func");
        if (funcKey) {
          var funcConfig = getFuncConfig$2(config2, funcKey);
          if (funcConfig) {
            if (valueType && funcConfig.returnType != valueType)
              return ["Function ".concat(funcKey, " should return value of type ").concat(funcConfig.returnType, ", but got ").concat(valueType), value2];
            for (var argKey in funcConfig.args) {
              var argConfig = funcConfig.args[argKey];
              var args = fixedValue.get("args");
              var argVal = args ? args.get(argKey) : void 0;
              var fieldDef = getFieldConfig$8(config2, argConfig);
              var argValue = argVal ? argVal.get("value") : void 0;
              var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
              if (argValue !== void 0) {
                var _validateValue = validateValue(config2, leftField, fieldDef, operator, argValue, argConfig.type, argValueSrc, asyncListValues, canFix, isEndValue, false), _validateValue2 = _slicedToArray(_validateValue, 2), argValidError = _validateValue2[0], fixedArgVal = _validateValue2[1];
                if (argValidError !== null) {
                  if (canFix) {
                    fixedValue = fixedValue.deleteIn(["args", argKey]);
                    if (argConfig.defaultValue !== void 0) {
                      fixedValue = fixedValue.setIn(["args", argKey, "value"], argConfig.defaultValue);
                      fixedValue = fixedValue.setIn(["args", argKey, "valueSrc"], "value");
                    }
                  } else {
                    return ["Invalid value of arg ".concat(argKey, " for func ").concat(funcKey, ": ").concat(argValidError), value2];
                  }
                } else if (fixedArgVal !== argValue) {
                  fixedValue = fixedValue.setIn(["args", argKey, "value"], fixedArgVal);
                }
              } else if (isEndValue && argConfig.defaultValue === void 0 && !canFix) {
                return ["Value of arg ".concat(argKey, " for func ").concat(funcKey, " is required"), value2];
              }
            }
          } else
            return ["Unknown function ".concat(funcKey), value2];
        }
      }
      return [null, fixedValue];
    };
    var selectTypes = ["select", "multiselect", "treeselect", "treemultiselect"];
    var getNewValueForFieldOp = function getNewValueForFieldOp2(config2) {
      var oldConfig = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var current = arguments.length > 2 ? arguments[2] : void 0;
      var newField = arguments.length > 3 ? arguments[3] : void 0;
      var newOperator = arguments.length > 4 ? arguments[4] : void 0;
      var changedProp = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var canFix = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : true;
      var isEndValue = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : false;
      if (!oldConfig)
        oldConfig = config2;
      var currentField = current.get("field");
      var currentOperator = current.get("operator");
      var currentValue = current.get("value");
      var currentValueSrc = current.get("valueSrc", new Immutable.List());
      var currentValueType = current.get("valueType", new Immutable.List());
      var currentAsyncListValues = current.get("asyncListValues");
      var _config$settings = config2.settings, convertableWidgets = _config$settings.convertableWidgets, clearValueOnChangeField = _config$settings.clearValueOnChangeField, clearValueOnChangeOp = _config$settings.clearValueOnChangeOp, showErrorMessage = _config$settings.showErrorMessage;
      var newOperatorConfig = getOperatorConfig$4(config2, newOperator, newField);
      var operatorCardinality = newOperator ? defaultValue$1(newOperatorConfig.cardinality, 1) : null;
      var currentFieldConfig = getFieldConfig$8(oldConfig, currentField);
      var newFieldConfig = getFieldConfig$8(config2, newField);
      var canReuseValue = currentField && currentOperator && newOperator && currentValue != void 0 && (!changedProp || changedProp == "field" && !clearValueOnChangeField || changedProp == "operator" && !clearValueOnChangeOp) && currentFieldConfig && newFieldConfig && currentFieldConfig.type == newFieldConfig.type;
      if (canReuseValue && selectTypes.includes(currentFieldConfig.type) && changedProp == "field") {
        canReuseValue = false;
      }
      for (var i = 0; i < operatorCardinality; i++) {
        var vs = currentValueSrc.get(i) || null;
        var currentWidget = getWidgetForFieldOp$3(oldConfig, currentField, currentOperator, vs);
        var newWidget = getWidgetForFieldOp$3(config2, newField, newOperator, vs);
        var currentValueWidget = vs == "value" ? currentWidget : getWidgetForFieldOp$3(oldConfig, currentField, currentOperator, "value");
        var newValueWidget = vs == "value" ? newWidget : getWidgetForFieldOp$3(config2, newField, newOperator, "value");
        var canReuseWidget = newValueWidget == currentValueWidget || (convertableWidgets[currentValueWidget] || []).includes(newValueWidget);
        if (!canReuseWidget)
          canReuseValue = false;
      }
      if (currentOperator != newOperator && [currentOperator, newOperator].includes("proximity"))
        canReuseValue = false;
      var firstWidgetConfig = getFieldWidgetConfig$3(config2, newField, newOperator, null, currentValueSrc.first());
      var valueSources = getValueSourcesForFieldOp$1(config2, newField, newOperator);
      var valueFixes = {};
      var valueErrors = Array.from({
        length: operatorCardinality
      }, function() {
        return null;
      });
      if (canReuseValue) {
        var _loop = function _loop2() {
          var v = currentValue.get(_i);
          var vType = currentValueType.get(_i) || null;
          var vSrc = currentValueSrc.get(_i) || null;
          var isValidSrc = valueSources.find(function(v2) {
            return v2 == vSrc;
          }) != null;
          if (!isValidSrc && _i > 0 && vSrc == null)
            isValidSrc = true;
          var asyncListValues = currentAsyncListValues;
          var _validateValue = validateValue(config2, newField, newField, newOperator, v, vType, vSrc, asyncListValues, canFix, isEndValue), _validateValue2 = _slicedToArray(_validateValue, 2), validateError = _validateValue2[0], fixedValue = _validateValue2[1];
          var isValid2 = !validateError;
          var fixValue = fixedValue !== v;
          var dropValue = !isValidSrc || !isValid2 && (changedProp == "field" || !showErrorMessage && !fixValue);
          var showValueError = !!validateError && showErrorMessage && !dropValue && !fixValue;
          if (showValueError) {
            valueErrors[_i] = validateError;
          }
          if (fixValue) {
            valueFixes[_i] = fixedValue;
          }
          if (dropValue) {
            canReuseValue = false;
            return "break";
          }
        };
        for (var _i = 0; _i < operatorCardinality; _i++) {
          var _ret = _loop();
          if (_ret === "break")
            break;
        }
      }
      var newValue = null, newValueSrc = null, newValueType = null, newValueError = null;
      newValue = new Immutable.List(Array.from({
        length: operatorCardinality
      }, function(_ignore, i2) {
        var v = void 0;
        if (canReuseValue) {
          if (i2 < currentValue.size) {
            v = currentValue.get(i2);
            if (valueFixes[i2] !== void 0) {
              v = valueFixes[i2];
            }
          }
        } else if (operatorCardinality == 1) {
          var _newFieldConfig$field;
          v = getFirstDefined([newFieldConfig === null || newFieldConfig === void 0 ? void 0 : newFieldConfig.defaultValue, newFieldConfig === null || newFieldConfig === void 0 ? void 0 : (_newFieldConfig$field = newFieldConfig.fieldSettings) === null || _newFieldConfig$field === void 0 ? void 0 : _newFieldConfig$field.defaultValue, firstWidgetConfig === null || firstWidgetConfig === void 0 ? void 0 : firstWidgetConfig.defaultValue]);
        }
        return v;
      }));
      newValueSrc = new Immutable.List(Array.from({
        length: operatorCardinality
      }, function(_ignore, i2) {
        var vs2 = null;
        if (canReuseValue) {
          if (i2 < currentValueSrc.size)
            vs2 = currentValueSrc.get(i2);
        } else if (valueSources.length == 1) {
          vs2 = valueSources[0];
        } else if (valueSources.length > 1) {
          vs2 = valueSources[0];
        }
        return vs2;
      }));
      if (showErrorMessage) {
        if (newOperatorConfig && newOperatorConfig.validateValues && newValueSrc.toJS().filter(function(vs2) {
          return vs2 == "value" || vs2 == null;
        }).length == operatorCardinality) {
          var jsValues = firstWidgetConfig && firstWidgetConfig.toJS ? newValue.toJS().map(function(v) {
            return firstWidgetConfig.toJS(v, firstWidgetConfig);
          }) : newValue.toJS();
          var rangeValidateError = newOperatorConfig.validateValues(jsValues);
          if (showErrorMessage) {
            valueErrors.push(rangeValidateError);
          }
        }
        newValueError = new Immutable.List(valueErrors);
      }
      newValueType = new Immutable.List(Array.from({
        length: operatorCardinality
      }, function(_ignore, i2) {
        var vt = null;
        if (canReuseValue) {
          if (i2 < currentValueType.size)
            vt = currentValueType.get(i2);
        } else if (operatorCardinality == 1 && firstWidgetConfig && firstWidgetConfig.type !== void 0) {
          vt = firstWidgetConfig.type;
        } else if (operatorCardinality == 1 && newFieldConfig && newFieldConfig.type !== void 0) {
          vt = newFieldConfig.type == "!group" ? "number" : newFieldConfig.type;
        }
        return vt;
      }));
      return {
        canReuseValue,
        newValue,
        newValueSrc,
        newValueType,
        newValueError,
        operatorCardinality
      };
    };
    var getFirstField = function getFirstField2(config2) {
      var parentRuleGroupPath = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var fieldSeparator = config2.settings.fieldSeparator;
      var parentPathArr = typeof parentRuleGroupPath == "string" ? parentRuleGroupPath.split(fieldSeparator) : parentRuleGroupPath;
      var parentField = parentRuleGroupPath ? getFieldRawConfig(config2, parentRuleGroupPath) : config2;
      var firstField = parentField, key = null, keysPath = [];
      do {
        var subfields = firstField === config2 ? config2.fields : firstField.subfields;
        if (!subfields || !Object.keys(subfields).length) {
          firstField = key = null;
          break;
        }
        key = Object.keys(subfields)[0];
        keysPath.push(key);
        firstField = subfields[key];
      } while (firstField.type == "!struct" || firstField.type == "!group");
      return (parentPathArr || []).concat(keysPath).join(fieldSeparator);
    };
    var getOperatorsForField = function getOperatorsForField2(config2, field) {
      var fieldConfig = getFieldConfig$8(config2, field);
      var fieldOps = fieldConfig ? fieldConfig.operators : [];
      return fieldOps;
    };
    var getFirstOperator = function getFirstOperator2(config2, field) {
      var fieldOps = getOperatorsForField(config2, field);
      return fieldOps ? fieldOps[0] : null;
    };
    var getFieldPath$3 = function getFieldPath2(field, config2) {
      var onlyKeys = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (!field)
        return null;
      var fieldSeparator = config2.settings.fieldSeparator;
      var parts = Array.isArray(field) ? field : field.split(fieldSeparator);
      if (onlyKeys)
        return parts;
      else
        return parts.map(function(_curr, ind, arr) {
          return arr.slice(0, ind + 1);
        }).map(function(parts2) {
          return parts2.join(fieldSeparator);
        });
    };
    var getFuncPathLabels$1 = function getFuncPathLabels2(field, config2) {
      var parentField = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      return getFieldPathLabels$3(field, config2, parentField, "funcs", "subfields");
    };
    var getFieldPathLabels$3 = function getFieldPathLabels2(field, config2) {
      var parentField = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var fieldsKey = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "fields";
      var subfieldsKey = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : "subfields";
      if (!field)
        return null;
      var fieldSeparator = config2.settings.fieldSeparator;
      var parts = Array.isArray(field) ? field : field.split(fieldSeparator);
      var parentParts = parentField ? Array.isArray(parentField) ? parentField : parentField.split(fieldSeparator) : [];
      return parts.slice(parentParts.length).map(function(_curr, ind, arr) {
        return arr.slice(0, ind + 1);
      }).map(function(parts2) {
        return [].concat(_toConsumableArray(parentParts), _toConsumableArray(parts2)).join(fieldSeparator);
      }).map(function(part) {
        var cnf = getFieldRawConfig(config2, part, fieldsKey, subfieldsKey);
        return cnf && cnf.label || cnf && last_1(part.split(fieldSeparator));
      }).filter(function(label) {
        return label != null;
      });
    };
    var getFieldPartsConfigs = function getFieldPartsConfigs2(field, config2) {
      var parentField = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      if (!field)
        return null;
      var parentFieldDef = parentField && getFieldRawConfig(config2, parentField) || null;
      var fieldSeparator = config2.settings.fieldSeparator;
      var parts = Array.isArray(field) ? field : field.split(fieldSeparator);
      var parentParts = parentField ? Array.isArray(parentField) ? parentField : parentField.split(fieldSeparator) : [];
      return parts.slice(parentParts.length).map(function(_curr, ind, arr) {
        return arr.slice(0, ind + 1);
      }).map(function(parts2) {
        return {
          part: [].concat(_toConsumableArray(parentParts), _toConsumableArray(parts2)).join(fieldSeparator),
          key: parts2[parts2.length - 1]
        };
      }).map(function(_ref) {
        var part = _ref.part, key = _ref.key;
        var cnf = getFieldRawConfig(config2, part);
        return {
          key,
          cnf
        };
      }).map(function(_ref2, ind, arr) {
        var key = _ref2.key, cnf = _ref2.cnf;
        var parentCnf = ind > 0 ? arr[ind - 1].cnf : parentFieldDef;
        return [key, cnf, parentCnf];
      });
    };
    var getValueLabel$1 = function getValueLabel2(config2, field, operator, delta) {
      var valueSrc = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var isSpecialRange = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : false;
      var isFuncArg = field && _typeof$1(field) == "object" && !!field.func && !!field.arg;
      var showLabels = config2.settings.showLabels;
      var fieldConfig = getFieldConfig$8(config2, field);
      var fieldWidgetConfig = getFieldWidgetConfig$3(config2, field, operator, null, valueSrc) || {};
      var mergedOpConfig = getOperatorConfig$4(config2, operator, field) || {};
      var cardinality = isSpecialRange ? 1 : mergedOpConfig.cardinality;
      var ret = null;
      if (cardinality > 1) {
        var valueLabels = fieldWidgetConfig.valueLabels || mergedOpConfig.valueLabels;
        if (valueLabels)
          ret = valueLabels[delta];
        if (ret && _typeof$1(ret) != "object") {
          ret = {
            label: ret,
            placeholder: ret
          };
        }
        if (!ret) {
          ret = {
            label: config2.settings.valueLabel + " " + (delta + 1),
            placeholder: config2.settings.valuePlaceholder + " " + (delta + 1)
          };
        }
      } else {
        var label = fieldWidgetConfig.valueLabel;
        var placeholder = fieldWidgetConfig.valuePlaceholder;
        if (isFuncArg) {
          if (!label)
            label = fieldConfig.label || field.arg;
          if (!placeholder && !showLabels)
            placeholder = fieldConfig.label || field.arg;
        }
        ret = {
          label: label || config2.settings.valueLabel,
          placeholder: placeholder || config2.settings.valuePlaceholder
        };
      }
      return ret;
    };
    function _getWidgetsAndSrcsForFieldOp(config2, field) {
      var operator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var valueSrc = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var widgets2 = [];
      var valueSrcs = [];
      if (!field)
        return {
          widgets: widgets2,
          valueSrcs
        };
      var isFuncArg = _typeof$1(field) == "object" && (!!field.func && !!field.arg || field._isFuncArg);
      var fieldConfig = getFieldConfig$8(config2, field);
      var opConfig = operator ? config2.operators[operator] : null;
      if (fieldConfig && fieldConfig.widgets) {
        var _loop2 = function _loop22() {
          var widgetConfig = fieldConfig.widgets[widget];
          var widgetValueSrc = config2.widgets[widget].valueSrc || "value";
          var canAdd = true;
          if (widget == "field") {
            canAdd = canAdd && filterValueSourcesForField(config2, ["field"], fieldConfig).length > 0;
          }
          if (widget == "func") {
            canAdd = canAdd && filterValueSourcesForField(config2, ["func"], fieldConfig).length > 0;
          }
          if (valueSrc == "value" && !widgetConfig.operators && !isFuncArg && field != "!case_value")
            canAdd = false;
          if (widgetConfig.operators && operator)
            canAdd = canAdd && widgetConfig.operators.indexOf(operator) != -1;
          if (valueSrc && valueSrc != widgetValueSrc && valueSrc != "const")
            canAdd = false;
          if (opConfig && opConfig.cardinality == 0 && widgetValueSrc != "value")
            canAdd = false;
          if (canAdd) {
            widgets2.push(widget);
            var canAddValueSrc = fieldConfig.valueSources && fieldConfig.valueSources.indexOf(widgetValueSrc) != -1;
            if (opConfig && opConfig.valueSources && opConfig.valueSources.indexOf(widgetValueSrc) == -1)
              canAddValueSrc = false;
            if (canAddValueSrc && !valueSrcs.find(function(v) {
              return v == widgetValueSrc;
            }))
              valueSrcs.push(widgetValueSrc);
          }
        };
        for (var widget in fieldConfig.widgets) {
          _loop2();
        }
      }
      var widgetWeight = function widgetWeight2(w) {
        var wg = 0;
        if (fieldConfig.preferWidgets) {
          if (fieldConfig.preferWidgets.includes(w))
            wg += 10 - fieldConfig.preferWidgets.indexOf(w);
        } else if (w == fieldConfig.mainWidget) {
          wg += 100;
        }
        if (w == "field") {
          wg -= 1;
        }
        if (w == "func") {
          wg -= 2;
        }
        return wg;
      };
      widgets2.sort(function(w1, w2) {
        return widgetWeight(w2) - widgetWeight(w1);
      });
      return {
        widgets: widgets2,
        valueSrcs
      };
    }
    var getWidgetsForFieldOp$1 = function getWidgetsForFieldOp2(config2, field, operator) {
      var valueSrc = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var _getWidgetsAndSrcsFor = _getWidgetsAndSrcsForFieldOp(config2, field, operator, valueSrc), widgets2 = _getWidgetsAndSrcsFor.widgets;
      return widgets2;
    };
    var filterValueSourcesForField = function filterValueSourcesForField2(config2, valueSrcs, fieldDefinition) {
      if (!fieldDefinition)
        return valueSrcs;
      return valueSrcs.filter(function(vs) {
        var canAdd = true;
        if (vs == "field") {
          if (config2._fieldsCntByType) {
            var minCnt = fieldDefinition._isFuncArg ? 0 : 1;
            canAdd = canAdd && config2._fieldsCntByType[fieldDefinition.type] > minCnt;
          }
        }
        if (vs == "func") {
          if (config2._funcsCntByType)
            canAdd = canAdd && !!config2._funcsCntByType[fieldDefinition.type];
          if (fieldDefinition.funcs)
            canAdd = canAdd && fieldDefinition.funcs.length > 0;
        }
        return canAdd;
      });
    };
    var getValueSourcesForFieldOp$1 = function getValueSourcesForFieldOp2(config2, field, operator) {
      var fieldDefinition = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var _getWidgetsAndSrcsFor2 = _getWidgetsAndSrcsForFieldOp(config2, field, operator, null), valueSrcs = _getWidgetsAndSrcsFor2.valueSrcs;
      var filteredValueSrcs = filterValueSourcesForField(config2, valueSrcs, fieldDefinition);
      return filteredValueSrcs;
    };
    var getWidgetForFieldOp$3 = function getWidgetForFieldOp2(config2, field, operator) {
      var valueSrc = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var _getWidgetsAndSrcsFor3 = _getWidgetsAndSrcsForFieldOp(config2, field, operator, valueSrc), widgets2 = _getWidgetsAndSrcsFor3.widgets;
      var widget = null;
      if (widgets2.length)
        widget = widgets2[0];
      return widget;
    };
    var formatFieldName$1 = function formatFieldName2(field, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      if (!field)
        return;
      var fieldDef = getFieldConfig$8(config2, field) || {};
      var fieldSeparator = config2.settings.fieldSeparator;
      var fieldParts = Array.isArray(field) ? field : field.split(fieldSeparator);
      var fieldName = Array.isArray(field) ? field.join(fieldSeparator) : field;
      if (fieldDef.tableName) {
        var fieldPartsCopy = _toConsumableArray(fieldParts);
        fieldPartsCopy[0] = fieldDef.tableName;
        fieldName = fieldPartsCopy.join(fieldSeparator);
      }
      if (fieldDef.fieldName) {
        fieldName = fieldDef.fieldName;
      }
      if (parentField) {
        var parentFieldDef = getFieldConfig$8(config2, parentField) || {};
        var parentFieldName = parentField;
        if (parentFieldDef.fieldName) {
          parentFieldName = parentFieldDef.fieldName;
        }
        if (fieldName.indexOf(parentFieldName + fieldSeparator) == 0) {
          fieldName = fieldName.slice((parentFieldName + fieldSeparator).length);
        } else {
          meta.errors.push("Can't cut group ".concat(parentFieldName, " from field ").concat(fieldName));
        }
      }
      return fieldName;
    };
    const ruleUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      getNewValueForFieldOp,
      getFirstField,
      getOperatorsForField,
      getFirstOperator,
      getFieldPath: getFieldPath$3,
      getFuncPathLabels: getFuncPathLabels$1,
      getFieldPathLabels: getFieldPathLabels$3,
      getFieldPartsConfigs,
      getValueLabel: getValueLabel$1,
      getWidgetsForFieldOp: getWidgetsForFieldOp$1,
      filterValueSourcesForField,
      getValueSourcesForFieldOp: getValueSourcesForFieldOp$1,
      getWidgetForFieldOp: getWidgetForFieldOp$3,
      formatFieldName: formatFieldName$1
    }, Symbol.toStringTag, { value: "Module" }));
    var clone$4 = { exports: {} };
    (function(module2) {
      var clone2 = function() {
        function _instanceof(obj, type) {
          return type != null && obj instanceof type;
        }
        var nativeMap;
        try {
          nativeMap = Map;
        } catch (_) {
          nativeMap = function() {
          };
        }
        var nativeSet;
        try {
          nativeSet = Set;
        } catch (_) {
          nativeSet = function() {
          };
        }
        var nativePromise;
        try {
          nativePromise = Promise;
        } catch (_) {
          nativePromise = function() {
          };
        }
        function clone3(parent2, circular, depth, prototype, includeNonEnumerable) {
          if (typeof circular === "object") {
            depth = circular.depth;
            prototype = circular.prototype;
            includeNonEnumerable = circular.includeNonEnumerable;
            circular = circular.circular;
          }
          var allParents = [];
          var allChildren = [];
          var useBuffer = typeof Buffer != "undefined";
          if (typeof circular == "undefined")
            circular = true;
          if (typeof depth == "undefined")
            depth = Infinity;
          function _clone(parent3, depth2) {
            if (parent3 === null)
              return null;
            if (depth2 === 0)
              return parent3;
            var child;
            var proto2;
            if (typeof parent3 != "object") {
              return parent3;
            }
            if (_instanceof(parent3, nativeMap)) {
              child = new nativeMap();
            } else if (_instanceof(parent3, nativeSet)) {
              child = new nativeSet();
            } else if (_instanceof(parent3, nativePromise)) {
              child = new nativePromise(function(resolve, reject) {
                parent3.then(function(value2) {
                  resolve(_clone(value2, depth2 - 1));
                }, function(err) {
                  reject(_clone(err, depth2 - 1));
                });
              });
            } else if (clone3.__isArray(parent3)) {
              child = [];
            } else if (clone3.__isRegExp(parent3)) {
              child = new RegExp(parent3.source, __getRegExpFlags(parent3));
              if (parent3.lastIndex)
                child.lastIndex = parent3.lastIndex;
            } else if (clone3.__isDate(parent3)) {
              child = new Date(parent3.getTime());
            } else if (useBuffer && Buffer.isBuffer(parent3)) {
              if (Buffer.allocUnsafe) {
                child = Buffer.allocUnsafe(parent3.length);
              } else {
                child = new Buffer(parent3.length);
              }
              parent3.copy(child);
              return child;
            } else if (_instanceof(parent3, Error)) {
              child = Object.create(parent3);
            } else {
              if (typeof prototype == "undefined") {
                proto2 = Object.getPrototypeOf(parent3);
                child = Object.create(proto2);
              } else {
                child = Object.create(prototype);
                proto2 = prototype;
              }
            }
            if (circular) {
              var index = allParents.indexOf(parent3);
              if (index != -1) {
                return allChildren[index];
              }
              allParents.push(parent3);
              allChildren.push(child);
            }
            if (_instanceof(parent3, nativeMap)) {
              parent3.forEach(function(value2, key) {
                var keyChild = _clone(key, depth2 - 1);
                var valueChild = _clone(value2, depth2 - 1);
                child.set(keyChild, valueChild);
              });
            }
            if (_instanceof(parent3, nativeSet)) {
              parent3.forEach(function(value2) {
                var entryChild = _clone(value2, depth2 - 1);
                child.add(entryChild);
              });
            }
            for (var i in parent3) {
              var attrs;
              if (proto2) {
                attrs = Object.getOwnPropertyDescriptor(proto2, i);
              }
              if (attrs && attrs.set == null) {
                continue;
              }
              child[i] = _clone(parent3[i], depth2 - 1);
            }
            if (Object.getOwnPropertySymbols) {
              var symbols = Object.getOwnPropertySymbols(parent3);
              for (var i = 0; i < symbols.length; i++) {
                var symbol = symbols[i];
                var descriptor = Object.getOwnPropertyDescriptor(parent3, symbol);
                if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
                  continue;
                }
                child[symbol] = _clone(parent3[symbol], depth2 - 1);
                if (!descriptor.enumerable) {
                  Object.defineProperty(child, symbol, {
                    enumerable: false
                  });
                }
              }
            }
            if (includeNonEnumerable) {
              var allPropertyNames = Object.getOwnPropertyNames(parent3);
              for (var i = 0; i < allPropertyNames.length; i++) {
                var propertyName = allPropertyNames[i];
                var descriptor = Object.getOwnPropertyDescriptor(parent3, propertyName);
                if (descriptor && descriptor.enumerable) {
                  continue;
                }
                child[propertyName] = _clone(parent3[propertyName], depth2 - 1);
                Object.defineProperty(child, propertyName, {
                  enumerable: false
                });
              }
            }
            return child;
          }
          return _clone(parent2, depth);
        }
        clone3.clonePrototype = function clonePrototype(parent2) {
          if (parent2 === null)
            return null;
          var c = function() {
          };
          c.prototype = parent2;
          return new c();
        };
        function __objToStr(o) {
          return Object.prototype.toString.call(o);
        }
        clone3.__objToStr = __objToStr;
        function __isDate(o) {
          return typeof o === "object" && __objToStr(o) === "[object Date]";
        }
        clone3.__isDate = __isDate;
        function __isArray(o) {
          return typeof o === "object" && __objToStr(o) === "[object Array]";
        }
        clone3.__isArray = __isArray;
        function __isRegExp(o) {
          return typeof o === "object" && __objToStr(o) === "[object RegExp]";
        }
        clone3.__isRegExp = __isRegExp;
        function __getRegExpFlags(re) {
          var flags = "";
          if (re.global)
            flags += "g";
          if (re.ignoreCase)
            flags += "i";
          if (re.multiline)
            flags += "m";
          return flags;
        }
        clone3.__getRegExpFlags = __getRegExpFlags;
        return clone3;
      }();
      if (module2.exports) {
        module2.exports = clone2;
      }
    })(clone$4);
    const clone$3 = clone$4.exports;
    function _createForOfIteratorHelper$4(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$4(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$4(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$4(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$4(o, minLen);
    }
    function _arrayLikeToArray$4(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$p(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$p(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$p(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$p(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var extendConfig$1 = function extendConfig2(config2, configId) {
      if (config2.__configId) {
        return config2;
      }
      config2 = _objectSpread$p({}, config2);
      config2.settings = merge_1({}, settings$3, config2.settings);
      config2._fieldsCntByType = {};
      config2._funcsCntByType = {};
      config2.types = clone$3(config2.types);
      _extendTypesConfig(config2.types, config2);
      config2.fields = clone$3(config2.fields);
      config2.__fieldNames = {};
      _extendFieldsConfig(config2.fields, config2);
      config2.funcs = clone$3(config2.funcs);
      _extendFuncArgsConfig(config2.funcs, config2);
      hooks.locale(config2.settings.locale.moment);
      Object.defineProperty(config2, "__configId", {
        enumerable: false,
        writable: false,
        value: configId || uuid$2()
      });
      return config2;
    };
    function _extendTypesConfig(typesConfig, config2) {
      for (var type in typesConfig) {
        var typeConfig = typesConfig[type];
        _extendTypeConfig(type, typeConfig, config2);
      }
    }
    function _extendTypeConfig(type, typeConfig, config2) {
      var operators2 = null, defaultOperator2 = null;
      typeConfig.mainWidget = typeConfig.mainWidget || Object.keys(typeConfig.widgets).filter(function(w) {
        return w != "field" && w != "func";
      })[0];
      for (var widget in typeConfig.widgets) {
        var typeWidgetConfig = typeConfig.widgets[widget];
        if (typeWidgetConfig.operators) {
          var typeWidgetOperators = typeWidgetConfig.operators;
          if (typeConfig.excludeOperators) {
            typeWidgetOperators = typeWidgetOperators.filter(function(op) {
              return !typeConfig.excludeOperators.includes(op);
            });
          }
          operators2 = mergeArraysSmart(operators2, typeWidgetOperators);
        }
        if (typeWidgetConfig.defaultOperator)
          defaultOperator2 = typeWidgetConfig.defaultOperator;
        if (widget == typeConfig.mainWidget) {
          typeWidgetConfig = merge_1({}, {
            widgetProps: typeConfig.mainWidgetProps || {}
          }, typeWidgetConfig);
        }
        typeConfig.widgets[widget] = typeWidgetConfig;
      }
      if (!typeConfig.valueSources)
        typeConfig.valueSources = Object.keys(config2.settings.valueSourcesInfo);
      var _iterator = _createForOfIteratorHelper$4(typeConfig.valueSources), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var valueSrc = _step.value;
          if (valueSrc != "value" && !typeConfig.widgets[valueSrc]) {
            typeConfig.widgets[valueSrc] = {};
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (!typeConfig.operators && operators2)
        typeConfig.operators = Array.from(new Set(operators2));
      if (!typeConfig.defaultOperator && defaultOperator2)
        typeConfig.defaultOperator = defaultOperator2;
    }
    function _extendFieldsConfig(subconfig, config2) {
      var path = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
      for (var field in subconfig) {
        _extendFieldConfig(subconfig[field], config2, [].concat(_toConsumableArray(path), [field]));
        if (subconfig[field].subfields) {
          _extendFieldsConfig(subconfig[field].subfields, config2, [].concat(_toConsumableArray(path), [field]));
        }
      }
    }
    function _extendFuncArgsConfig(subconfig, config2) {
      if (!subconfig)
        return;
      for (var funcKey in subconfig) {
        var funcDef = subconfig[funcKey];
        if (funcDef.returnType) {
          if (!config2._funcsCntByType[funcDef.returnType])
            config2._funcsCntByType[funcDef.returnType] = 0;
          config2._funcsCntByType[funcDef.returnType]++;
        }
        for (var argKey in funcDef.args) {
          _extendFieldConfig(funcDef.args[argKey], config2, null, true);
        }
        if (funcDef.args) {
          var argKeys = Object.keys(funcDef.args);
          var tmpIsOptional = true;
          var _iterator2 = _createForOfIteratorHelper$4(argKeys.reverse()), _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
              var _argKey = _step2.value;
              var argDef = funcDef.args[_argKey];
              if (!tmpIsOptional && argDef.isOptional) {
                delete argDef.isOptional;
              }
              if (!argDef.isOptional)
                tmpIsOptional = false;
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
        if (funcDef.subfields) {
          _extendFuncArgsConfig(funcDef.subfields, config2);
        }
      }
    }
    function _extendFieldConfig(fieldConfig, config2) {
      var path = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var isFuncArg = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var operators2 = null, defaultOperator2 = null;
      var typeConfig = config2.types[fieldConfig.type];
      var excludeOperatorsForField = fieldConfig.excludeOperators || [];
      if (fieldConfig.type != "!struct" && fieldConfig.type != "!group") {
        var keysToPutInFieldSettings = ["listValues", "allowCustomValues", "validateValue"];
        if (!fieldConfig.fieldSettings)
          fieldConfig.fieldSettings = {};
        for (var _i = 0, _keysToPutInFieldSett = keysToPutInFieldSettings; _i < _keysToPutInFieldSett.length; _i++) {
          var k = _keysToPutInFieldSett[_i];
          if (fieldConfig[k]) {
            fieldConfig.fieldSettings[k] = fieldConfig[k];
            delete fieldConfig[k];
          }
        }
        if (fieldConfig.fieldSettings.listValues) {
          if (config2.settings.normalizeListValues) {
            fieldConfig.fieldSettings.listValues = config2.settings.normalizeListValues(fieldConfig.fieldSettings.listValues, fieldConfig.type, fieldConfig.fieldSettings);
          }
        }
        if (!typeConfig) {
          fieldConfig.disabled = true;
          return;
        }
        if (!isFuncArg) {
          if (!config2._fieldsCntByType[fieldConfig.type])
            config2._fieldsCntByType[fieldConfig.type] = 0;
          config2._fieldsCntByType[fieldConfig.type]++;
        }
        if (!fieldConfig.widgets)
          fieldConfig.widgets = {};
        if (isFuncArg)
          fieldConfig._isFuncArg = true;
        fieldConfig.mainWidget = fieldConfig.mainWidget || typeConfig.mainWidget;
        fieldConfig.valueSources = fieldConfig.valueSources || typeConfig.valueSources;
        var excludeOperatorsForType = typeConfig.excludeOperators || [];
        var _loop = function _loop2() {
          var fieldWidgetConfig = fieldConfig.widgets[widget] || {};
          var typeWidgetConfig = typeConfig.widgets[widget] || {};
          if (!isFuncArg) {
            var excludeOperators = [].concat(_toConsumableArray(excludeOperatorsForField), _toConsumableArray(excludeOperatorsForType));
            var shouldIncludeOperators = fieldConfig.preferWidgets && (widget == "field" || fieldConfig.preferWidgets.includes(widget)) || excludeOperators.length > 0;
            if (fieldWidgetConfig.operators) {
              var addOperators = fieldWidgetConfig.operators.filter(function(o) {
                return !excludeOperators.includes(o);
              });
              operators2 = [].concat(_toConsumableArray(operators2 || []), _toConsumableArray(addOperators));
            } else if (shouldIncludeOperators && typeWidgetConfig.operators) {
              var _addOperators = typeWidgetConfig.operators.filter(function(o) {
                return !excludeOperators.includes(o);
              });
              operators2 = [].concat(_toConsumableArray(operators2 || []), _toConsumableArray(_addOperators));
            }
            if (fieldWidgetConfig.defaultOperator)
              defaultOperator2 = fieldWidgetConfig.defaultOperator;
          }
          if (widget == fieldConfig.mainWidget) {
            fieldWidgetConfig = merge_1({}, {
              widgetProps: fieldConfig.mainWidgetProps || {}
            }, fieldWidgetConfig);
          }
          fieldConfig.widgets[widget] = fieldWidgetConfig;
        };
        for (var widget in typeConfig.widgets) {
          _loop();
        }
        if (!isFuncArg) {
          if (!fieldConfig.operators && operators2)
            fieldConfig.operators = Array.from(new Set(operators2));
          if (!fieldConfig.defaultOperator && defaultOperator2)
            fieldConfig.defaultOperator = defaultOperator2;
        }
      }
      var computedFieldName = computeFieldName(config2, path);
      if (computedFieldName) {
        fieldConfig.fieldName = computedFieldName;
      }
      if (path && fieldConfig.fieldName) {
        config2.__fieldNames[fieldConfig.fieldName] = path;
      }
    }
    var getFieldRawConfig = function getFieldRawConfig2(config2, field) {
      var fieldsKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "fields";
      var subfieldsKey = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "subfields";
      if (!field)
        return null;
      if (field == "!case_value") {
        return {
          type: "case_value",
          mainWidget: "case_value",
          widgets: {
            "case_value": config2.widgets["case_value"]
          }
        };
      }
      var fieldSeparator = config2.settings.fieldSeparator;
      var parts = Array.isArray(field) ? field : field.split(fieldSeparator);
      var targetFields = config2[fieldsKey];
      if (!targetFields)
        return null;
      var fields2 = targetFields;
      var fieldConfig = null;
      var path = [];
      for (var i = 0; i < parts.length; i++) {
        var part = parts[i];
        path.push(part);
        var pathKey = path.join(fieldSeparator);
        fieldConfig = fields2[pathKey];
        if (i < parts.length - 1) {
          if (fieldConfig && fieldConfig[subfieldsKey]) {
            fields2 = fieldConfig[subfieldsKey];
            path = [];
          } else {
            fieldConfig = null;
          }
        }
      }
      return fieldConfig;
    };
    var computeFieldName = function computeFieldName2(config2, path) {
      if (!path)
        return null;
      var fieldSeparator = config2.settings.fieldSeparator;
      var l = _toConsumableArray(path), r = [], f, fConfig;
      while ((f = l.pop()) !== void 0 && l.length > 0) {
        r.unshift(f);
        fConfig = getFieldRawConfig(config2, l);
        if (fConfig.fieldName) {
          return [fConfig.fieldName].concat(r).join(fieldSeparator);
        }
      }
      return null;
    };
    var normalizeField = function normalizeField2(config2, field) {
      var fieldSeparator = config2.settings.fieldSeparator;
      var fieldStr = Array.isArray(field) ? field.join(fieldSeparator) : field;
      if (config2.__fieldNames[fieldStr]) {
        return config2.__fieldNames[fieldStr].join(fieldSeparator);
      }
      return fieldStr;
    };
    var getFuncConfig$2 = function getFuncConfig2(config2, func) {
      if (!func)
        return null;
      var funcConfig = getFieldRawConfig(config2, func, "funcs", "subfields");
      if (!funcConfig)
        return null;
      return funcConfig;
    };
    var getFuncArgConfig = function getFuncArgConfig2(config2, funcKey, argKey) {
      var funcConfig = getFuncConfig$2(config2, funcKey);
      if (!funcConfig)
        return null;
      var argConfig = funcConfig.args && funcConfig.args[argKey] || null;
      if (!argConfig)
        return null;
      var typeConfig = config2.types[argConfig.type] || {};
      var ret = mergeWith_1({}, typeConfig, argConfig || {}, function(objValue, srcValue, _key, _object, _source, _stack) {
        if (Array.isArray(objValue)) {
          return srcValue;
        }
      });
      return ret;
    };
    var getFieldConfig$8 = function getFieldConfig2(config2, field) {
      if (!field)
        return null;
      if (_typeof$1(field) == "object" && !field.func && !!field.type)
        return field;
      if (_typeof$1(field) == "object" && field.func && field.arg)
        return getFuncArgConfig(config2, field.func, field.arg);
      var fieldConfig = getFieldRawConfig(config2, field);
      if (!fieldConfig)
        return null;
      var typeConfig = config2.types[fieldConfig.type] || {};
      var ret = mergeWith_1({}, typeConfig, fieldConfig || {}, function(objValue, srcValue, _key, _object, _source, _stack) {
        if (Array.isArray(objValue)) {
          return srcValue;
        }
      });
      return ret;
    };
    var getOperatorConfig$4 = function getOperatorConfig2(config2, operator) {
      var field = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      if (!operator)
        return null;
      var opConfig = config2.operators[operator];
      if (field) {
        var fieldConfig = getFieldConfig$8(config2, field);
        var widget = getWidgetForFieldOp$3(config2, field, operator);
        var widgetConfig = config2.widgets[widget] || {};
        var fieldWidgetConfig = (fieldConfig && fieldConfig.widgets ? fieldConfig.widgets[widget] : {}) || {};
        var widgetOpProps = (widgetConfig.opProps || {})[operator];
        var fieldWidgetOpProps = (fieldWidgetConfig.opProps || {})[operator];
        var mergedOpConfig = merge_1({}, opConfig, widgetOpProps, fieldWidgetOpProps);
        return mergedOpConfig;
      } else {
        return opConfig;
      }
    };
    var getFieldWidgetConfig$3 = function getFieldWidgetConfig2(config2, field, operator) {
      var widget = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var valueSrc = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      if (!field)
        return null;
      if (!(operator || widget) && valueSrc != "const" && field != "!case_value")
        return null;
      var fieldConfig = getFieldConfig$8(config2, field);
      if (!widget)
        widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
      var widgetConfig = config2.widgets[widget] || {};
      var fieldWidgetConfig = (fieldConfig && fieldConfig.widgets ? fieldConfig.widgets[widget] : {}) || {};
      var fieldWidgetProps = fieldWidgetConfig.widgetProps || {};
      var valueFieldSettings = (valueSrc == "value" || !valueSrc) && fieldConfig && fieldConfig.fieldSettings || {};
      var mergedConfig = merge_1({}, widgetConfig, fieldWidgetProps, valueFieldSettings);
      return mergedConfig;
    };
    const configUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      extendConfig: extendConfig$1,
      getFieldRawConfig,
      normalizeField,
      getFuncConfig: getFuncConfig$2,
      getFuncArgConfig,
      getFieldConfig: getFieldConfig$8,
      getOperatorConfig: getOperatorConfig$4,
      getFieldWidgetConfig: getFieldWidgetConfig$3
    }, Symbol.toStringTag, { value: "Module" }));
    var isObject$6 = function isObject2(v) {
      return _typeof$1(v) == "object" && v !== null && !Array.isArray(v);
    };
    var completeValue = function completeValue2(value2, valueSrc, config2) {
      if (valueSrc == "func")
        return completeFuncValue(value2, config2);
      else
        return value2;
    };
    var completeFuncValue = function completeFuncValue2(value2, config2) {
      var _checkFuncValue = function _checkFuncValue2(value3) {
        if (!value3)
          return void 0;
        var funcKey = value3.get("func");
        var funcConfig = funcKey && getFuncConfig$2(config2, funcKey);
        if (!funcConfig)
          return void 0;
        var complValue = value3;
        var tmpHasOptional = false;
        for (var argKey in funcConfig.args) {
          var argConfig = funcConfig.args[argKey];
          var valueSources = argConfig.valueSources, isOptional = argConfig.isOptional, defaultValue2 = argConfig.defaultValue;
          var filteredValueSources = filterValueSourcesForField(config2, valueSources, argConfig);
          var args = complValue.get("args");
          var argDefaultValueSrc = filteredValueSources.length == 1 ? filteredValueSources[0] : void 0;
          var argVal = args ? args.get(argKey) : void 0;
          var argValue = argVal ? argVal.get("value") : void 0;
          var argValueSrc = (argVal ? argVal.get("valueSrc") : void 0) || argDefaultValueSrc;
          if (argValue !== void 0) {
            var completeArgValue = completeValue(argValue, argValueSrc, config2);
            if (completeArgValue === void 0) {
              return void 0;
            } else if (completeArgValue !== argValue) {
              complValue = complValue.setIn(["args", argKey, "value"], completeArgValue);
            }
            if (tmpHasOptional) {
              return void 0;
            }
          } else if (defaultValue2 !== void 0 && !isObject$6(defaultValue2)) {
            complValue = complValue.setIn(["args", argKey, "value"], getDefaultArgValue(argConfig));
            complValue = complValue.setIn(["args", argKey, "valueSrc"], "value");
          } else if (isOptional) {
            tmpHasOptional = true;
          } else {
            return void 0;
          }
        }
        return complValue;
      };
      return _checkFuncValue(value2);
    };
    var setFunc$1 = function setFunc2(value2, funcKey, config2) {
      var fieldSeparator = config2.settings.fieldSeparator;
      value2 = value2 || new Immutable.Map();
      if (Array.isArray(funcKey)) {
        funcKey = funcKey.join(fieldSeparator);
      }
      value2 = value2.set("func", funcKey);
      value2 = value2.set("args", new Immutable.Map());
      var funcConfig = funcKey && getFuncConfig$2(config2, funcKey);
      if (funcConfig) {
        for (var argKey in funcConfig.args) {
          var argConfig = funcConfig.args[argKey];
          var valueSources = argConfig.valueSources, defaultValue2 = argConfig.defaultValue;
          var filteredValueSources = filterValueSourcesForField(config2, valueSources, argConfig);
          var firstValueSrc = filteredValueSources.length ? filteredValueSources[0] : void 0;
          var defaultValueSrc = defaultValue2 ? isObject$6(defaultValue2) && !!defaultValue2.func ? "func" : "value" : void 0;
          var argDefaultValueSrc = defaultValueSrc || firstValueSrc;
          if (defaultValue2 !== void 0) {
            value2 = value2.setIn(["args", argKey, "value"], getDefaultArgValue(argConfig));
          }
          if (argDefaultValueSrc) {
            value2 = value2.setIn(["args", argKey, "valueSrc"], argDefaultValueSrc);
          }
        }
      }
      return value2;
    };
    var getDefaultArgValue = function getDefaultArgValue2(_ref) {
      var value2 = _ref.defaultValue;
      if (isObject$6(value2) && !Immutable.Map.isMap(value2) && value2.func) {
        return Immutable.fromJS(value2, function(k, v) {
          return Immutable.Iterable.isIndexed(v) ? v.toList() : v.toOrderedMap();
        });
      }
      return value2;
    };
    var setArgValue$1 = function setArgValue2(value2, argKey, argVal, argConfig, config2) {
      if (value2 && value2.get("func")) {
        value2 = value2.setIn(["args", argKey, "value"], argVal);
        var valueSources = argConfig.valueSources;
        var filteredValueSources = filterValueSourcesForField(config2, valueSources, argConfig);
        var argDefaultValueSrc = filteredValueSources.length == 1 ? filteredValueSources[0] : void 0;
        if (argDefaultValueSrc) {
          value2 = value2.setIn(["args", argKey, "valueSrc"], argDefaultValueSrc);
        }
      }
      return value2;
    };
    var setArgValueSrc$1 = function setArgValueSrc2(value2, argKey, argValSrc, _argConfig, _config) {
      if (value2 && value2.get("func")) {
        value2 = value2.setIn(["args", argKey], new Immutable.Map({
          valueSrc: argValSrc
        }));
      }
      return value2;
    };
    const funcUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      completeValue,
      completeFuncValue,
      setFunc: setFunc$1,
      setArgValue: setArgValue$1,
      setArgValueSrc: setArgValueSrc$1
    }, Symbol.toStringTag, { value: "Module" }));
    function ownKeys$o(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$o(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$o(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$o(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var queryBuilderFormat = function queryBuilderFormat2(item, config2) {
      var meta = {
        usedFields: []
      };
      var res = formatItem$5(item, config2, meta);
      if (!res)
        return void 0;
      return _objectSpread$o(_objectSpread$o({}, res), meta);
    };
    var formatItem$5 = function formatItem2(item, config2, meta) {
      if (!item)
        return void 0;
      var type = item.get("type");
      var children = item.get("children1");
      if ((type === "group" || type === "rule_group") && children && children.size) {
        return formatGroup$5(item, config2, meta);
      } else if (type === "rule") {
        return formatRule$5(item, config2, meta);
      }
      return void 0;
    };
    var formatGroup$5 = function formatGroup2(item, config2, meta) {
      var properties = item.get("properties") || new immutable.exports.Map();
      var children = item.get("children1");
      var id = item.get("id");
      var list = children.map(function(currentChild) {
        return formatItem$5(currentChild, config2, meta);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      if (!list.size)
        return void 0;
      var conjunction = properties.get("conjunction");
      if (!conjunction)
        conjunction = defaultConjunction(config2);
      var not = properties.get("not");
      var resultQuery = {
        id,
        rules: list.toList(),
        condition: conjunction.toUpperCase(),
        not
      };
      return resultQuery;
    };
    var formatRule$5 = function formatRule2(item, config2, meta) {
      var properties = item.get("properties") || new immutable.exports.Map();
      var id = item.get("id");
      var operator = properties.get("operator");
      var options = properties.get("operatorOptions");
      var field = properties.get("field");
      var value2 = properties.get("value");
      var valueSrc = properties.get("valueSrc");
      var valueType = properties.get("valueType");
      var hasUndefinedValues = value2.filter(function(v) {
        return v === void 0;
      }).size > 0;
      if (field == null || operator == null || hasUndefinedValues)
        return void 0;
      var fieldDefinition = getFieldConfig$8(config2, field) || {};
      var operatorDefinition = getOperatorConfig$4(config2, operator, field) || {};
      var fieldType = fieldDefinition.type || "undefined";
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      var typeConfig = config2.types[fieldDefinition.type] || {};
      var fieldName = formatFieldName$1(field, config2, meta);
      if (value2.size < cardinality)
        return void 0;
      if (meta.usedFields.indexOf(field) == -1)
        meta.usedFields.push(field);
      value2 = value2.toArray();
      valueSrc = valueSrc.toArray();
      valueType = valueType.toArray();
      var values = [];
      for (var i = 0; i < value2.length; i++) {
        var val = {
          type: valueType[i],
          value: value2[i]
        };
        values.push(val);
        if (valueSrc[i] == "field") {
          var secondField = value2[i];
          if (meta.usedFields.indexOf(secondField) == -1)
            meta.usedFields.push(secondField);
        }
      }
      var operatorOptions = options ? options.toJS() : null;
      if (operatorOptions && !Object.keys(operatorOptions).length)
        operatorOptions = null;
      var ruleQuery = {
        id,
        fieldName,
        type: fieldType,
        input: typeConfig.mainWidget,
        operator
      };
      if (operatorOptions)
        ruleQuery.operatorOptions = operatorOptions;
      ruleQuery.values = values;
      return ruleQuery;
    };
    var assignValue = _assignValue, castPath$2 = _castPath, isIndex$1 = _isIndex, isObject$5 = isObject_1, toKey$3 = _toKey;
    function baseSet$1(object, path, value2, customizer) {
      if (!isObject$5(object)) {
        return object;
      }
      path = castPath$2(path, object);
      var index = -1, length = path.length, lastIndex = length - 1, nested = object;
      while (nested != null && ++index < length) {
        var key = toKey$3(path[index]), newValue = value2;
        if (key === "__proto__" || key === "constructor" || key === "prototype") {
          return object;
        }
        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : void 0;
          if (newValue === void 0) {
            newValue = isObject$5(objValue) ? objValue : isIndex$1(path[index + 1]) ? [] : {};
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }
    var _baseSet = baseSet$1;
    var baseGet$2 = _baseGet, baseSet = _baseSet, castPath$1 = _castPath;
    function basePickBy$2(object, paths, predicate) {
      var index = -1, length = paths.length, result = {};
      while (++index < length) {
        var path = paths[index], value2 = baseGet$2(object, path);
        if (predicate(value2, path)) {
          baseSet(result, castPath$1(path, object), value2);
        }
      }
      return result;
    }
    var _basePickBy = basePickBy$2;
    function baseHasIn$1(object, key) {
      return object != null && key in Object(object);
    }
    var _baseHasIn = baseHasIn$1;
    var castPath = _castPath, isArguments = isArguments_1, isArray$2 = isArray_1, isIndex = _isIndex, isLength = isLength_1, toKey$2 = _toKey;
    function hasPath$1(object, path, hasFunc) {
      path = castPath(path, object);
      var index = -1, length = path.length, result = false;
      while (++index < length) {
        var key = toKey$2(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) && (isArray$2(object) || isArguments(object));
    }
    var _hasPath = hasPath$1;
    var baseHasIn = _baseHasIn, hasPath = _hasPath;
    function hasIn$2(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }
    var hasIn_1 = hasIn$2;
    var basePickBy$1 = _basePickBy, hasIn$1 = hasIn_1;
    function basePick$1(object, paths) {
      return basePickBy$1(object, paths, function(value2, path) {
        return hasIn$1(object, path);
      });
    }
    var _basePick = basePick$1;
    var basePick = _basePick, flatRest = _flatRest;
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });
    var pick_1 = pick;
    function ownKeys$n(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$n(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$n(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$n(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createForOfIteratorHelper$3(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$3(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$3(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$3(o, minLen);
    }
    function _arrayLikeToArray$3(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    var jsonLogicFormat$1 = function jsonLogicFormat2(item, config2) {
      var meta = {
        usedFields: [],
        errors: []
      };
      var logic = formatItem$4(item, config2, meta, true);
      var errors = meta.errors, usedFields = meta.usedFields;
      var fieldSeparator = config2.settings.fieldSeparator;
      var data = {};
      var _iterator = _createForOfIteratorHelper$3(usedFields), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var ff = _step.value;
          var def = getFieldConfig$8(config2, ff) || {};
          var parts = ff.split(fieldSeparator);
          var tmp = data;
          for (var i = 0; i < parts.length; i++) {
            var p = parts[i];
            var pdef = getFieldConfig$8(config2, parts.slice(0, i + 1)) || {};
            if (i != parts.length - 1) {
              if (pdef.type == "!group" && pdef.mode != "struct") {
                if (!tmp[p])
                  tmp[p] = [{}];
                tmp = tmp[p][0];
              } else {
                if (!tmp[p])
                  tmp[p] = {};
                tmp = tmp[p];
              }
            } else {
              if (!tmp[p])
                tmp[p] = null;
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return {
        errors,
        logic,
        data
      };
    };
    var formatItem$4 = function formatItem2(item, config2, meta, isRoot) {
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      if (!item)
        return void 0;
      var type = item.get("type");
      var properties = item.get("properties") || new immutable.exports.Map();
      var isLocked = properties.get("isLocked");
      var lockedOp = config2.settings.jsonLogic.lockedOp;
      var ret;
      if (type === "group" || type === "rule_group") {
        ret = formatGroup$4(item, config2, meta, isRoot, parentField);
      } else if (type === "rule") {
        ret = formatRule$4(item, config2, meta, parentField);
      }
      if (isLocked && ret && lockedOp) {
        ret = _defineProperty$1({}, lockedOp, ret);
      }
      return ret;
    };
    var formatGroup$4 = function formatGroup2(item, config2, meta, isRoot) {
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var type = item.get("type");
      var properties = item.get("properties") || new immutable.exports.Map();
      var mode = properties.get("mode");
      var children = item.get("children1") || new immutable.exports.List();
      var field = properties.get("field");
      var conjunction = properties.get("conjunction");
      if (!conjunction)
        conjunction = defaultConjunction(config2);
      var conjunctionDefinition = config2.conjunctions[conjunction];
      var conj = conjunctionDefinition.jsonLogicConj || conjunction.toLowerCase();
      var not = properties.get("not");
      if (conj != "and" && conj != "or") {
        meta.errors.push("Conjunction ".concat(conj, " is not supported"));
        return void 0;
      }
      var isRuleGroup = type === "rule_group" && !isRoot;
      var groupField = isRuleGroup && mode != "struct" ? field : parentField;
      var groupOperator = properties.get("operator");
      var groupOperatorDefinition = groupOperator && getOperatorConfig$4(config2, groupOperator, field) || null;
      var formattedValue = formatItemValue$2(config2, properties, meta, groupOperator, parentField);
      var isGroup0 = isRuleGroup && (!groupOperator || groupOperatorDefinition.cardinality == 0);
      var list = children.map(function(currentChild) {
        return formatItem$4(currentChild, config2, meta, false, groupField);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      if (isRuleGroup && mode != "struct" && !isGroup0) {
        if (formattedValue == void 0)
          return void 0;
      } else {
        if (!list.size)
          return void 0;
      }
      var resultQuery = {};
      if (list.size == 1 && !isRoot)
        resultQuery = list.first();
      else
        resultQuery[conj] = list.toList().toJS();
      if (not) {
        resultQuery = {
          "!": resultQuery
        };
      }
      if (isRuleGroup && mode != "struct") {
        var formattedField = formatField$3(meta, config2, field, parentField);
        if (isGroup0) {
          var op = groupOperator || "some";
          resultQuery = _defineProperty$1({}, op, [formattedField, resultQuery]);
        } else {
          var filter = !list.size ? formattedField : {
            "filter": [formattedField, resultQuery]
          };
          var count = {
            "reduce": [filter, {
              "+": [1, {
                "var": "accumulator"
              }]
            }, 0]
          };
          resultQuery = formatLogic(config2, properties, count, formattedValue, groupOperator);
        }
      }
      return resultQuery;
    };
    var formatRule$4 = function formatRule2(item, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var properties = item.get("properties") || new immutable.exports.Map();
      var field = properties.get("field");
      var operator = properties.get("operator");
      var operatorOptions = properties.get("operatorOptions");
      operatorOptions = operatorOptions ? operatorOptions.toJS() : null;
      if (operatorOptions && !Object.keys(operatorOptions).length)
        operatorOptions = null;
      if (field == null || operator == null)
        return void 0;
      var fieldDefinition = getFieldConfig$8(config2, field) || {};
      var operatorDefinition = getOperatorConfig$4(config2, operator, field) || {};
      var reversedOp = operatorDefinition.reversedOp;
      var revOperatorDefinition = getOperatorConfig$4(config2, reversedOp, field) || {};
      var isRev = false;
      if (!operatorDefinition.jsonLogic && !revOperatorDefinition.jsonLogic) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      if (!operatorDefinition.jsonLogic && revOperatorDefinition.jsonLogic) {
        isRev = true;
        var _ref = [reversedOp, operator];
        operator = _ref[0];
        reversedOp = _ref[1];
        var _ref2 = [revOperatorDefinition, operatorDefinition];
        operatorDefinition = _ref2[0];
        revOperatorDefinition = _ref2[1];
      }
      var formattedValue = formatItemValue$2(config2, properties, meta, operator, parentField);
      if (formattedValue === void 0)
        return void 0;
      var formattedField = formatField$3(meta, config2, field, parentField);
      return formatLogic(config2, properties, formattedField, formattedValue, operator, operatorOptions, fieldDefinition, isRev);
    };
    var formatItemValue$2 = function formatItemValue2(config2, properties, meta, operator, parentField) {
      var field = properties.get("field");
      var iValueSrc = properties.get("valueSrc");
      var iValueType = properties.get("valueType");
      var fieldDefinition = getFieldConfig$8(config2, field) || {};
      var operatorDefinition = getOperatorConfig$4(config2, operator, field) || {};
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      var iValue = properties.get("value");
      var asyncListValues = properties.get("asyncListValues");
      if (iValue == void 0)
        return void 0;
      var oldUsedFields = meta.usedFields;
      var fvalue = iValue.map(function(currentValue, ind) {
        var valueSrc = iValueSrc ? iValueSrc.get(ind) : null;
        var valueType = iValueType ? iValueType.get(ind) : null;
        var cValue = completeValue(currentValue, valueSrc, config2);
        var widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
        var fieldWidgetDef = omit_1(getFieldWidgetConfig$3(config2, field, operator, widget, valueSrc), ["factory"]);
        var fv = formatValue$4(meta, config2, cValue, valueSrc, valueType, fieldWidgetDef, fieldDefinition, operator, operatorDefinition, parentField, asyncListValues);
        return fv;
      });
      var hasUndefinedValues = fvalue.filter(function(v) {
        return v === void 0;
      }).size > 0;
      if (fvalue.size < cardinality || hasUndefinedValues) {
        meta.usedFields = oldUsedFields;
        return void 0;
      }
      return cardinality > 1 ? fvalue.toArray() : cardinality == 1 ? fvalue.first() : null;
    };
    var formatValue$4 = function formatValue2(meta, config2, currentValue, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, operatorDef) {
      var parentField = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : null;
      var asyncListValues = arguments.length > 10 ? arguments[10] : void 0;
      if (currentValue === void 0)
        return void 0;
      var ret;
      if (valueSrc == "field") {
        ret = formatField$3(meta, config2, currentValue, parentField);
      } else if (valueSrc == "func") {
        ret = formatFunc$4(meta, config2, currentValue, parentField);
      } else if (typeof fieldWidgetDef.jsonLogic === "function") {
        var fn = fieldWidgetDef.jsonLogic;
        var args = [
          currentValue,
          _objectSpread$n(_objectSpread$n({}, pick_1(fieldDef, ["fieldSettings", "listValues"])), {}, {
            asyncListValues
          }),
          omit_1(fieldWidgetDef, ["formatValue", "mongoFormatValue", "sqlFormatValue", "jsonLogic", "elasticSearchFormatValue", "spelFormatValue"])
        ];
        if (operator) {
          args.push(operator);
          args.push(operatorDef);
        }
        ret = fn.apply(void 0, args);
      } else {
        ret = currentValue;
      }
      return ret;
    };
    var formatFunc$4 = function formatFunc2(meta, config2, currentValue) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var funcKey = currentValue.get("func");
      var args = currentValue.get("args");
      var funcConfig = getFuncConfig$2(config2, funcKey);
      if (!funcConfig.jsonLogic) {
        meta.errors.push("Func ".concat(funcKey, " is not supported"));
        return void 0;
      }
      var formattedArgs = {};
      for (var argKey in funcConfig.args) {
        var argConfig = funcConfig.args[argKey];
        var fieldDef = getFieldConfig$8(config2, argConfig);
        var argVal = args ? args.get(argKey) : void 0;
        var argValue = argVal ? argVal.get("value") : void 0;
        var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
        var formattedArgVal = formatValue$4(meta, config2, argValue, argValueSrc, argConfig.type, fieldDef, argConfig, null, null, parentField);
        if (argValue != void 0 && formattedArgVal === void 0) {
          meta.errors.push("Can't format value of arg ".concat(argKey, " for func ").concat(funcKey));
          return void 0;
        }
        if (formattedArgVal !== void 0) {
          formattedArgs[argKey] = formattedArgVal;
        }
      }
      var formattedArgsArr = Object.values(formattedArgs);
      var ret;
      if (typeof funcConfig.jsonLogic === "function") {
        var fn = funcConfig.jsonLogic;
        var _args = [formattedArgs];
        ret = fn.apply(void 0, _args);
      } else {
        var funcName = funcConfig.jsonLogic || funcKey;
        var isMethod = !!funcConfig.jsonLogicIsMethod;
        if (isMethod) {
          var obj = formattedArgsArr[0], params = formattedArgsArr.slice(1);
          if (params.length) {
            ret = {
              "method": [obj, funcName, params]
            };
          } else {
            ret = {
              "method": [obj, funcName]
            };
          }
        } else {
          ret = _defineProperty$1({}, funcName, formattedArgsArr);
        }
      }
      return ret;
    };
    var formatField$3 = function formatField2(meta, config2, field) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var _config$settings = config2.settings, fieldSeparator = _config$settings.fieldSeparator, jsonLogic = _config$settings.jsonLogic;
      var ret;
      if (field) {
        if (Array.isArray(field))
          field = field.join(fieldSeparator);
        var fieldDef = getFieldConfig$8(config2, field) || {};
        var fieldName = field;
        if (fieldDef.fieldName) {
          fieldName = fieldDef.fieldName;
        }
        if (parentField) {
          var parentFieldDef = getFieldConfig$8(config2, parentField) || {};
          var parentFieldName = parentField;
          if (parentFieldDef.fieldName) {
            parentFieldName = parentFieldDef.fieldName;
          }
          if (fieldName.indexOf(parentFieldName + fieldSeparator) == 0) {
            fieldName = fieldName.slice((parentFieldName + fieldSeparator).length);
          } else {
            meta.errors.push("Can't cut group ".concat(parentFieldName, " from field ").concat(fieldName));
          }
        }
        var varName = fieldDef.jsonLogicVar || (fieldDef.type == "!group" ? jsonLogic.groupVarKey : "var");
        ret = _defineProperty$1({}, varName, fieldName);
        if (meta.usedFields.indexOf(field) == -1)
          meta.usedFields.push(field);
      }
      return ret;
    };
    var buildFnToFormatOp$3 = function buildFnToFormatOp2(operator, operatorDefinition, formattedField, formattedValue) {
      var formatteOp = operator;
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      var isReverseArgs = defaultValue$1(operatorDefinition._jsonLogicIsRevArgs, false);
      if (typeof operatorDefinition.jsonLogic == "string")
        formatteOp = operatorDefinition.jsonLogic;
      var rangeOps = ["<", "<=", ">", ">="];
      var eqOps = ["==", "!="];
      var fn = function fn2(field, op, val, opDef, opOpts) {
        if (cardinality == 0 && eqOps.includes(formatteOp))
          return _defineProperty$1({}, formatteOp, [formattedField, null]);
        else if (cardinality == 0)
          return _defineProperty$1({}, formatteOp, formattedField);
        else if (cardinality == 1 && isReverseArgs)
          return _defineProperty$1({}, formatteOp, [formattedValue, formattedField]);
        else if (cardinality == 1)
          return _defineProperty$1({}, formatteOp, [formattedField, formattedValue]);
        else if (cardinality == 2 && rangeOps.includes(formatteOp))
          return _defineProperty$1({}, formatteOp, [formattedValue[0], formattedField, formattedValue[1]]);
        else
          return _defineProperty$1({}, formatteOp, [formattedField].concat(_toConsumableArray(formattedValue)));
      };
      return fn;
    };
    var formatLogic = function formatLogic2(config2, properties, formattedField, formattedValue, operator) {
      var operatorOptions = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var fieldDefinition = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      var isRev = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : false;
      var field = properties.get("field");
      var operatorDefinition = getOperatorConfig$4(config2, operator, field) || {};
      var fn = typeof operatorDefinition.jsonLogic == "function" ? operatorDefinition.jsonLogic : buildFnToFormatOp$3(operator, operatorDefinition, formattedField, formattedValue);
      var args = [formattedField, operator, formattedValue, omit_1(operatorDefinition, ["formatOp", "mongoFormatOp", "sqlFormatOp", "jsonLogic", "spelFormatOp"]), operatorOptions, fieldDefinition];
      var ruleQuery = fn.apply(void 0, args);
      if (isRev) {
        ruleQuery = {
          "!": ruleQuery
        };
      }
      return ruleQuery;
    };
    function ownKeys$m(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$m(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$m(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$m(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var isObject$4 = function isObject2(v) {
      return _typeof$1(v) == "object" && v !== null && !Array.isArray(v);
    };
    var mongodbFormat$1 = function mongodbFormat2(tree2, config2) {
      return _mongodbFormat(tree2, config2, false);
    };
    var _mongodbFormat = function _mongodbFormat2(tree2, config2) {
      var returnErrors = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var meta = {
        errors: []
      };
      var res = formatItem$3([], tree2, config2, meta);
      if (returnErrors) {
        return [res, meta.errors];
      } else {
        if (meta.errors.length)
          console.warn("Errors while exporting to MongoDb:", meta.errors);
        return res;
      }
    };
    var formatItem$3 = function formatItem2(parents, item, config2, meta) {
      var _not = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      var _canWrapExpr = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
      var _fieldName = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : void 0;
      var _value = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : void 0;
      if (!item)
        return void 0;
      var type = item.get("type");
      if (type === "group" || type === "rule_group") {
        return formatGroup$3(parents, item, config2, meta, _not, _canWrapExpr, _fieldName, _value);
      } else if (type === "rule") {
        return formatRule$3(parents, item, config2, meta, _not, _canWrapExpr, _fieldName, _value);
      }
      return void 0;
    };
    var formatGroup$3 = function formatGroup2(parents, item, config2, meta) {
      var _not = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      var type = item.get("type");
      var properties = item.get("properties") || new immutable.exports.Map();
      var children = item.get("children1") || new immutable.exports.List();
      var canShortMongoQuery = config2.settings.canShortMongoQuery;
      var hasParentRuleGroup = parents.filter(function(it) {
        return it.get("type") == "rule_group";
      }).length > 0;
      var parentPath = parents.filter(function(it) {
        return it.get("type") == "rule_group";
      }).map(function(it) {
        return it.get("properties").get("field");
      }).slice(-1).pop();
      var realParentPath = hasParentRuleGroup && parentPath;
      var groupField = type === "rule_group" ? properties.get("field") : null;
      var groupFieldName = formatFieldName(groupField, config2, meta, realParentPath);
      var groupFieldDef = getFieldConfig$8(config2, groupField) || {};
      var mode = groupFieldDef.mode;
      var canHaveEmptyChildren = groupField && mode == "array";
      var not = _not ? !properties.get("not") : properties.get("not");
      var list = children.map(function(currentChild) {
        return formatItem$3([].concat(_toConsumableArray(parents), [item]), currentChild, config2, meta, not, true, mode == "array" ? function(f) {
          return "$$el.".concat(f);
        } : void 0);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      if (!canHaveEmptyChildren && !list.size)
        return void 0;
      var conjunction = properties.get("conjunction");
      if (!conjunction)
        conjunction = defaultConjunction(config2);
      var conjunctionDefinition = config2.conjunctions[conjunction];
      var reversedConj = conjunctionDefinition.reversedConj;
      if (not && reversedConj) {
        conjunction = reversedConj;
        conjunctionDefinition = config2.conjunctions[conjunction];
      }
      var mongoConj = conjunctionDefinition.mongoConj;
      var resultQuery;
      if (list.size == 1) {
        resultQuery = list.first();
      } else if (list.size > 1) {
        var rules = list.toList().toJS();
        var canShort = canShortMongoQuery && mongoConj == "$and";
        if (canShort) {
          resultQuery = rules.reduce(function(acc, rule2) {
            if (!acc)
              return void 0;
            for (var k in rule2) {
              if (k[0] == "$") {
                acc = void 0;
                break;
              }
              if (acc[k] == void 0) {
                acc[k] = rule2[k];
              } else {
                var prev = acc[k], next = rule2[k];
                if (!isObject$4(prev)) {
                  prev = {
                    "$eq": prev
                  };
                }
                if (!isObject$4(next)) {
                  next = {
                    "$eq": next
                  };
                }
                var prevOp = Object.keys(prev)[0], nextOp = Object.keys(next)[0];
                if (prevOp == nextOp) {
                  acc = void 0;
                  break;
                }
                acc[k] = Object.assign({}, prev, next);
              }
            }
            return acc;
          }, {});
        }
        if (!resultQuery)
          resultQuery = _defineProperty$1({}, mongoConj, rules);
      }
      if (groupField) {
        if (mode == "array") {
          var totalQuery = {
            "$size": groupFieldName
          };
          var filterQuery = resultQuery ? {
            "$size": {
              "$filter": {
                input: "$" + groupFieldName,
                as: "el",
                cond: resultQuery
              }
            }
          } : totalQuery;
          resultQuery = formatItem$3(parents, item.set("type", "rule"), config2, meta, false, false, function(_f) {
            return filterQuery;
          }, totalQuery);
          resultQuery = {
            "$expr": resultQuery
          };
        } else {
          resultQuery = _defineProperty$1({}, groupFieldName, {
            "$elemMatch": resultQuery
          });
        }
      }
      return resultQuery;
    };
    var formatRule$3 = function formatRule2(parents, item, config2, meta) {
      var _not = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
      var _canWrapExpr = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
      var _fieldName = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : void 0;
      var _value = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : void 0;
      var properties = item.get("properties") || new immutable.exports.Map();
      var hasParentRuleGroup = parents.filter(function(it) {
        return it.get("type") == "rule_group";
      }).length > 0;
      var parentPath = parents.filter(function(it) {
        return it.get("type") == "rule_group";
      }).map(function(it) {
        return it.get("properties").get("field");
      }).slice(-1).pop();
      var realParentPath = hasParentRuleGroup && parentPath;
      var operator = properties.get("operator");
      var operatorOptions = properties.get("operatorOptions");
      var field = properties.get("field");
      var iValue = properties.get("value");
      var iValueSrc = properties.get("valueSrc");
      var iValueType = properties.get("valueType");
      var asyncListValues = properties.get("asyncListValues");
      if (field == null || operator == null || iValue === void 0)
        return void 0;
      var fieldDef = getFieldConfig$8(config2, field) || {};
      var operatorDefinition = getOperatorConfig$4(config2, operator, field) || {};
      var reversedOp = operatorDefinition.reversedOp;
      var revOperatorDefinition = getOperatorConfig$4(config2, reversedOp, field) || {};
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      var not = _not;
      if (not && reversedOp) {
        var _ref = [reversedOp, operator];
        operator = _ref[0];
        reversedOp = _ref[1];
        var _ref2 = [revOperatorDefinition, operatorDefinition];
        operatorDefinition = _ref2[0];
        revOperatorDefinition = _ref2[1];
        not = false;
      }
      var fieldName = formatFieldName(field, config2, meta, realParentPath);
      var valueSrcs = [];
      var valueTypes = [];
      var useExpr = false;
      var fvalue = iValue.map(function(currentValue, ind) {
        var valueSrc = iValueSrc ? iValueSrc.get(ind) : null;
        var valueType = iValueType ? iValueType.get(ind) : null;
        var cValue = completeValue(currentValue, valueSrc, config2);
        var widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
        var fieldWidgetDef = omit_1(getFieldWidgetConfig$3(config2, field, operator, widget, valueSrc), ["factory"]);
        var _formatValue = formatValue$3(meta, config2, cValue, valueSrc, valueType, fieldWidgetDef, fieldDef, realParentPath, operator, operatorDefinition, asyncListValues), _formatValue2 = _slicedToArray(_formatValue, 2), fv = _formatValue2[0], fvUseExpr = _formatValue2[1];
        if (fv !== void 0) {
          useExpr = useExpr || fvUseExpr;
          valueSrcs.push(valueSrc);
          valueTypes.push(valueType);
        }
        return fv;
      });
      if (_fieldName)
        useExpr = true;
      var wrapExpr = useExpr && _canWrapExpr;
      var hasUndefinedValues = fvalue.filter(function(v) {
        return v === void 0;
      }).size > 0;
      if (fvalue.size < cardinality || hasUndefinedValues)
        return void 0;
      var formattedValue = cardinality > 1 ? fvalue.toArray() : cardinality == 1 ? fvalue.first() : null;
      var fn = operatorDefinition.mongoFormatOp;
      if (!fn) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      var args = [_fieldName ? _fieldName(fieldName) : fieldName, operator, _value !== void 0 && formattedValue == null ? _value : formattedValue, useExpr, valueSrcs.length > 1 ? valueSrcs : valueSrcs[0], valueTypes.length > 1 ? valueTypes : valueTypes[0], omit_1(operatorDefinition, ["formatOp", "mongoFormatOp", "sqlFormatOp", "jsonLogic", "spelFormatOp"]), operatorOptions, fieldDef];
      var ruleQuery = fn.apply(void 0, args);
      if (wrapExpr) {
        ruleQuery = {
          "$expr": ruleQuery
        };
      }
      if (not) {
        ruleQuery = {
          "$not": ruleQuery
        };
      }
      return ruleQuery;
    };
    var formatValue$3 = function formatValue2(meta, config2, currentValue, valueSrc, valueType, fieldWidgetDef, fieldDef, parentPath, operator, operatorDef, asyncListValues) {
      if (currentValue === void 0)
        return [void 0, false];
      var ret;
      var useExpr = false;
      if (valueSrc == "field") {
        var _formatRightField = formatRightField(meta, config2, currentValue, parentPath);
        var _formatRightField2 = _slicedToArray(_formatRightField, 2);
        ret = _formatRightField2[0];
        useExpr = _formatRightField2[1];
      } else if (valueSrc == "func") {
        var _formatFunc = formatFunc$3(meta, config2, currentValue, parentPath);
        var _formatFunc2 = _slicedToArray(_formatFunc, 2);
        ret = _formatFunc2[0];
        useExpr = _formatFunc2[1];
      } else {
        if (typeof fieldWidgetDef.mongoFormatValue === "function") {
          var fn = fieldWidgetDef.mongoFormatValue;
          var args = [
            currentValue,
            _objectSpread$m(_objectSpread$m({}, pick_1(fieldDef, ["fieldSettings", "listValues"])), {}, {
              asyncListValues
            }),
            omit_1(fieldWidgetDef, ["formatValue", "mongoFormatValue", "sqlFormatValue", "jsonLogic", "elasticSearchFormatValue", "spelFormatValue"])
          ];
          if (operator) {
            args.push(operator);
            args.push(operatorDef);
          }
          ret = fn.apply(void 0, args);
        } else {
          ret = currentValue;
        }
      }
      return [ret, useExpr];
    };
    var formatFieldName = function formatFieldName2(field, config2, meta, parentPath) {
      if (!field)
        return;
      var fieldDef = getFieldConfig$8(config2, field) || {};
      var fieldSeparator = config2.settings.fieldSeparator;
      Array.isArray(field) ? field : field.split(fieldSeparator);
      var fieldName = Array.isArray(field) ? field.join(fieldSeparator) : field;
      if (fieldDef.fieldName) {
        fieldName = fieldDef.fieldName;
      }
      if (parentPath) {
        var parentFieldDef = getFieldConfig$8(config2, parentPath) || {};
        var parentFieldName = parentPath;
        if (parentFieldDef.fieldName) {
          parentFieldName = parentFieldDef.fieldName;
        }
        if (fieldName.indexOf(parentFieldName + ".") == 0) {
          fieldName = fieldName.slice((parentFieldName + ".").length);
        } else {
          meta.errors.push("Can't cut group ".concat(parentFieldName, " from field ").concat(fieldName));
        }
      }
      return fieldName;
    };
    var formatRightField = function formatRightField2(meta, config2, rightField, parentPath) {
      var fieldSeparator = config2.settings.fieldSeparator;
      var ret;
      var useExpr = true;
      if (rightField) {
        var rightFieldDefinition = getFieldConfig$8(config2, rightField) || {};
        var fieldParts = Array.isArray(rightField) ? rightField : rightField.split(fieldSeparator);
        getFieldPath$3(rightField, config2);
        var fieldPartsLabels = getFieldPathLabels$3(rightField, config2);
        var fieldFullLabel = fieldPartsLabels ? fieldPartsLabels.join(fieldSeparator) : null;
        var formatFieldFn = config2.settings.formatField;
        var rightFieldName = formatFieldName(rightField, config2, meta, parentPath);
        var formattedField = formatFieldFn(rightFieldName, fieldParts, fieldFullLabel, rightFieldDefinition, config2, false);
        ret = "$" + formattedField;
      }
      return [ret, useExpr];
    };
    var formatFunc$3 = function formatFunc2(meta, config2, currentValue, parentPath) {
      var useExpr = true;
      var ret;
      var funcKey = currentValue.get("func");
      var args = currentValue.get("args");
      var funcConfig = getFuncConfig$2(config2, funcKey);
      var funcName = funcConfig.mongoFunc || funcKey;
      var mongoArgsAsObject = funcConfig.mongoArgsAsObject;
      var formattedArgs = {};
      var argsCnt = 0;
      var lastArg = void 0;
      for (var argKey in funcConfig.args) {
        var argConfig = funcConfig.args[argKey];
        var fieldDef = getFieldConfig$8(config2, argConfig);
        var argVal = args ? args.get(argKey) : void 0;
        var argValue = argVal ? argVal.get("value") : void 0;
        var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
        var argAsyncListValues = argVal ? argVal.get("asyncListValues") : void 0;
        var widget = getWidgetForFieldOp$3(config2, fieldDef, null, argValueSrc);
        var fieldWidgetDef = omit_1(getFieldWidgetConfig$3(config2, fieldDef, null, widget, argValueSrc), ["factory"]);
        var _formatValue3 = formatValue$3(meta, config2, argValue, argValueSrc, argConfig.type, fieldWidgetDef, fieldDef, parentPath, null, null, argAsyncListValues), _formatValue4 = _slicedToArray(_formatValue3, 2), formattedArgVal = _formatValue4[0];
        _formatValue4[1];
        if (argValue != void 0 && formattedArgVal === void 0) {
          meta.errors.push("Can't format value of arg ".concat(argKey, " for func ").concat(funcKey));
          return [void 0, false];
        }
        argsCnt++;
        if (formattedArgVal !== void 0) {
          formattedArgs[argKey] = formattedArgVal;
          lastArg = formattedArgVal;
        }
      }
      if (typeof funcConfig.mongoFormatFunc === "function") {
        var fn = funcConfig.mongoFormatFunc;
        var _args = [formattedArgs];
        ret = fn.apply(void 0, _args);
      } else if (funcConfig.mongoFormatFunc === null) {
        meta.errors.push("Functon ".concat(funcName, " is not supported"));
        return [void 0, false];
      } else {
        if (mongoArgsAsObject)
          ret = _defineProperty$1({}, funcName, formattedArgs);
        else if (argsCnt == 1 && lastArg !== void 0)
          ret = _defineProperty$1({}, funcName, lastArg);
        else
          ret = _defineProperty$1({}, funcName, Object.values(formattedArgs));
      }
      return [ret, useExpr];
    };
    var sqlstring = { exports: {} };
    var SqlString$1 = {};
    (function(exports2) {
      var SqlString2 = exports2;
      var ID_GLOBAL_REGEXP = /`/g;
      var QUAL_GLOBAL_REGEXP = /\./g;
      var CHARS_GLOBAL_REGEXP = /[\0\b\t\n\r\x1a\"\'\\]/g;
      var CHARS_ESCAPE_MAP = {
        "\0": "\\0",
        "\b": "\\b",
        "	": "\\t",
        "\n": "\\n",
        "\r": "\\r",
        "": "\\Z",
        '"': '\\"',
        "'": "\\'",
        "\\": "\\\\"
      };
      SqlString2.escapeId = function escapeId(val, forbidQualified) {
        if (Array.isArray(val)) {
          var sql = "";
          for (var i = 0; i < val.length; i++) {
            sql += (i === 0 ? "" : ", ") + SqlString2.escapeId(val[i], forbidQualified);
          }
          return sql;
        } else if (forbidQualified) {
          return "`" + String(val).replace(ID_GLOBAL_REGEXP, "``") + "`";
        } else {
          return "`" + String(val).replace(ID_GLOBAL_REGEXP, "``").replace(QUAL_GLOBAL_REGEXP, "`.`") + "`";
        }
      };
      SqlString2.escape = function escape(val, stringifyObjects, timeZone) {
        if (val === void 0 || val === null) {
          return "NULL";
        }
        switch (typeof val) {
          case "boolean":
            return val ? "true" : "false";
          case "number":
            return val + "";
          case "object":
            if (Object.prototype.toString.call(val) === "[object Date]") {
              return SqlString2.dateToString(val, timeZone || "local");
            } else if (Array.isArray(val)) {
              return SqlString2.arrayToList(val, timeZone);
            } else if (Buffer.isBuffer(val)) {
              return SqlString2.bufferToString(val);
            } else if (typeof val.toSqlString === "function") {
              return String(val.toSqlString());
            } else if (stringifyObjects) {
              return escapeString(val.toString());
            } else {
              return SqlString2.objectToValues(val, timeZone);
            }
          default:
            return escapeString(val);
        }
      };
      SqlString2.arrayToList = function arrayToList(array, timeZone) {
        var sql = "";
        for (var i = 0; i < array.length; i++) {
          var val = array[i];
          if (Array.isArray(val)) {
            sql += (i === 0 ? "" : ", ") + "(" + SqlString2.arrayToList(val, timeZone) + ")";
          } else {
            sql += (i === 0 ? "" : ", ") + SqlString2.escape(val, true, timeZone);
          }
        }
        return sql;
      };
      SqlString2.format = function format2(sql, values, stringifyObjects, timeZone) {
        if (values == null) {
          return sql;
        }
        if (!Array.isArray(values)) {
          values = [values];
        }
        var chunkIndex = 0;
        var placeholdersRegex = /\?+/g;
        var result = "";
        var valuesIndex = 0;
        var match5;
        while (valuesIndex < values.length && (match5 = placeholdersRegex.exec(sql))) {
          var len = match5[0].length;
          if (len > 2) {
            continue;
          }
          var value2 = len === 2 ? SqlString2.escapeId(values[valuesIndex]) : SqlString2.escape(values[valuesIndex], stringifyObjects, timeZone);
          result += sql.slice(chunkIndex, match5.index) + value2;
          chunkIndex = placeholdersRegex.lastIndex;
          valuesIndex++;
        }
        if (chunkIndex === 0) {
          return sql;
        }
        if (chunkIndex < sql.length) {
          return result + sql.slice(chunkIndex);
        }
        return result;
      };
      SqlString2.dateToString = function dateToString(date, timeZone) {
        var dt = new Date(date);
        if (isNaN(dt.getTime())) {
          return "NULL";
        }
        var year;
        var month;
        var day;
        var hour;
        var minute;
        var second;
        var millisecond;
        if (timeZone === "local") {
          year = dt.getFullYear();
          month = dt.getMonth() + 1;
          day = dt.getDate();
          hour = dt.getHours();
          minute = dt.getMinutes();
          second = dt.getSeconds();
          millisecond = dt.getMilliseconds();
        } else {
          var tz = convertTimezone(timeZone);
          if (tz !== false && tz !== 0) {
            dt.setTime(dt.getTime() + tz * 6e4);
          }
          year = dt.getUTCFullYear();
          month = dt.getUTCMonth() + 1;
          day = dt.getUTCDate();
          hour = dt.getUTCHours();
          minute = dt.getUTCMinutes();
          second = dt.getUTCSeconds();
          millisecond = dt.getUTCMilliseconds();
        }
        var str = zeroPad(year, 4) + "-" + zeroPad(month, 2) + "-" + zeroPad(day, 2) + " " + zeroPad(hour, 2) + ":" + zeroPad(minute, 2) + ":" + zeroPad(second, 2) + "." + zeroPad(millisecond, 3);
        return escapeString(str);
      };
      SqlString2.bufferToString = function bufferToString(buffer) {
        return "X" + escapeString(buffer.toString("hex"));
      };
      SqlString2.objectToValues = function objectToValues(object, timeZone) {
        var sql = "";
        for (var key in object) {
          var val = object[key];
          if (typeof val === "function") {
            continue;
          }
          sql += (sql.length === 0 ? "" : ", ") + SqlString2.escapeId(key) + " = " + SqlString2.escape(val, true, timeZone);
        }
        return sql;
      };
      SqlString2.raw = function raw(sql) {
        if (typeof sql !== "string") {
          throw new TypeError("argument sql must be a string");
        }
        return {
          toSqlString: function toSqlString() {
            return sql;
          }
        };
      };
      function escapeString(val) {
        var chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex = 0;
        var escapedVal = "";
        var match5;
        while (match5 = CHARS_GLOBAL_REGEXP.exec(val)) {
          escapedVal += val.slice(chunkIndex, match5.index) + CHARS_ESCAPE_MAP[match5[0]];
          chunkIndex = CHARS_GLOBAL_REGEXP.lastIndex;
        }
        if (chunkIndex === 0) {
          return "'" + val + "'";
        }
        if (chunkIndex < val.length) {
          return "'" + escapedVal + val.slice(chunkIndex) + "'";
        }
        return "'" + escapedVal + "'";
      }
      function zeroPad(number, length) {
        number = number.toString();
        while (number.length < length) {
          number = "0" + number;
        }
        return number;
      }
      function convertTimezone(tz) {
        if (tz === "Z") {
          return 0;
        }
        var m = tz.match(/([\+\-\s])(\d\d):?(\d\d)?/);
        if (m) {
          return (m[1] === "-" ? -1 : 1) * (parseInt(m[2], 10) + (m[3] ? parseInt(m[3], 10) : 0) / 60) * 60;
        }
        return false;
      }
    })(SqlString$1);
    (function(module2) {
      module2.exports = SqlString$1;
    })(sqlstring);
    const SqlStringOrig = /* @__PURE__ */ getDefaultExportFromCjs(sqlstring.exports);
    var SqlString = SqlStringOrig;
    SqlString.trim = function(val) {
      if (val.charAt(0) == "'")
        return val.substring(1, val.length - 1);
      else
        return val;
    };
    SqlString.escapeLike = function(val) {
      var any_start = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var any_end = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var res = SqlString.escape(val);
      res = SqlString.trim(res);
      res = res.replace(/[%_]/g, "\\$&");
      res = (any_start ? "%" : "") + res + (any_end ? "%" : "");
      res = "'" + res + "'";
      return res;
    };
    var sqlEmptyValue = function sqlEmptyValue2(fieldDef) {
      var v = "''";
      var type = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.type;
      if (type == "date") {
        v = "'0000-00-00'";
      } else if (type == "datetime") {
        v = "'0000-00-00 00:00'";
      } else if (type == "time") {
        v = "'00:00'";
      } else if (type == "number") {
        v = "0";
      }
      return v;
    };
    var mongoEmptyValue = function mongoEmptyValue2(fieldDef) {
      var v = "";
      var type = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.type;
      if (type == "number") {
        v = 0;
      }
      return v;
    };
    var spelEscapeString = function spelEscapeString2(val) {
      return "'" + val.replace(/'/g, "''") + "'";
    };
    var spelInlineList = function spelInlineList2(vals) {
      var toArray2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var javaType;
      var jt;
      var numberJavaTypes = ["int", "float"];
      vals.map(function(v) {
        if (v !== void 0 && v !== null) {
          if (typeof v === "string") {
            jt = "String";
          } else if (typeof v === "number") {
            jt = Number.isInteger(v) ? "int" : "float";
          } else
            throw new Error("spelEscape: Can't use value ".concat(v, " in array"));
          if (!javaType) {
            javaType = jt;
          } else if (javaType != jt) {
            if (numberJavaTypes.includes(javaType) && numberJavaTypes.includes(jt)) {
              javaType = "float";
            } else
              throw new Error("spelEscape: Can't use different types in array: found ".concat(javaType, " and ").concat(jt));
          }
        }
      });
      if (!javaType) {
        javaType = "String";
      }
      var escapedVals;
      if (javaType == "float") {
        escapedVals = vals.map(function(v) {
          return spelEscape(v, true);
        });
      } else {
        escapedVals = vals.map(function(v) {
          return spelEscape(v);
        });
      }
      var res;
      if (toArray2) {
        res = "new ".concat(javaType, "[]{").concat(escapedVals.join(", "), "}");
      } else {
        res = "{".concat(escapedVals.join(", "), "}");
      }
      return res;
    };
    var spelFixList = function spelFixList2(val) {
      return "".concat(val, ".?[true]");
    };
    var spelEscape = function spelEscape2(val) {
      var numberToFloat = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
      var arrayToArray = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (val === void 0 || val === null) {
        return "null";
      }
      switch (_typeof$1(val)) {
        case "boolean":
          return val ? "true" : "false";
        case "number":
          if (!Number.isFinite(val) || isNaN(val))
            return void 0;
          return val + (!Number.isInteger(val) || numberToFloat ? "f" : "");
        case "object":
          if (Array.isArray(val)) {
            return spelInlineList(val, arrayToArray);
          } else {
            throw new Error("spelEscape: Object is not supported");
          }
        default:
          return spelEscapeString(val);
      }
    };
    var spelFormatConcat = function spelFormatConcat2(parts) {
      if (parts && Array.isArray(parts) && parts.length) {
        return parts.map(function(part) {
          if (part.type == "const") {
            return spelEscape(part.value);
          } else if (part.type == "property") {
            return "" + part.value;
          } else if (part.type == "variable") {
            return "#" + part.value;
          }
          return void 0;
        }).filter(function(r) {
          return r != void 0;
        }).join(" + ");
      } else {
        return "null";
      }
    };
    var spelImportConcat = function spelImportConcat2(val) {
      if (val == void 0)
        return [void 0, []];
      var errors = [];
      var parts = val.valueType == "case_value" ? val.value : [val];
      var res = parts.map(function(child) {
        if (child.valueSrc == "value") {
          if (child.value === null) {
            return void 0;
          } else {
            return {
              type: "const",
              value: child.value
            };
          }
        } else if (child.valueSrc == "field") {
          return {
            type: child.isVariable ? "variable" : "property",
            value: child.value
          };
        } else {
          errors.push("Unsupported valueSrc ".concat(child.valueSrc, " in concatenation"));
        }
      }).filter(function(v) {
        return v != void 0;
      });
      return [res, errors];
    };
    var stringifyForDisplay = function stringifyForDisplay2(v) {
      return v == null ? "NULL" : v.toString();
    };
    const _export = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      SqlString,
      sqlEmptyValue,
      mongoEmptyValue,
      spelFixList,
      spelEscape,
      spelFormatConcat,
      spelImportConcat,
      stringifyForDisplay
    }, Symbol.toStringTag, { value: "Module" }));
    function ownKeys$l(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$l(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$l(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$l(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var sqlFormat$1 = function sqlFormat2(tree2, config2) {
      return _sqlFormat(tree2, config2, false);
    };
    var _sqlFormat = function _sqlFormat2(tree2, config2) {
      var returnErrors = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var meta = {
        errors: []
      };
      var res = formatItem$2(tree2, config2, meta);
      if (returnErrors) {
        return [res, meta.errors];
      } else {
        if (meta.errors.length)
          console.warn("Errors while exporting to SQL:", meta.errors);
        return res;
      }
    };
    var formatItem$2 = function formatItem2(item, config2, meta) {
      if (!item)
        return void 0;
      var type = item.get("type");
      item.get("children1");
      if (type === "group" || type === "rule_group") {
        return formatGroup$2(item, config2, meta);
      } else if (type === "rule") {
        return formatRule$2(item, config2, meta);
      }
      return void 0;
    };
    var formatGroup$2 = function formatGroup2(item, config2, meta) {
      var type = item.get("type");
      var properties = item.get("properties") || new immutable.exports.Map();
      var children = item.get("children1") || new immutable.exports.List();
      var isRuleGroup = type === "rule_group";
      var groupField = isRuleGroup ? properties.get("field") : null;
      var groupFieldDef = getFieldConfig$8(config2, groupField) || {};
      var mode = groupFieldDef.mode;
      if (mode == "array") {
        meta.errors.push("Aggregation is not supported for ".concat(groupField));
      }
      var not = properties.get("not");
      var list = children.map(function(currentChild) {
        return formatItem$2(currentChild, config2, meta);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      if (!list.size)
        return void 0;
      var conjunction = properties.get("conjunction");
      if (!conjunction)
        conjunction = defaultConjunction(config2);
      var conjunctionDefinition = config2.conjunctions[conjunction];
      return conjunctionDefinition.sqlFormatConj(list, conjunction, not);
    };
    var buildFnToFormatOp$2 = function buildFnToFormatOp2(operator, operatorDefinition) {
      var sqlOp = operatorDefinition.sqlOp || operator;
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      var fn;
      if (cardinality == 0) {
        fn = function fn2(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " ").concat(sqlOp);
        };
      } else if (cardinality == 1) {
        fn = function fn2(field, op, value2, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " ").concat(sqlOp, " ").concat(value2);
        };
      } else if (cardinality == 2) {
        fn = function fn2(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          var valFrom = values.first();
          var valTo = values.get(1);
          return "".concat(field, " ").concat(sqlOp, " ").concat(valFrom, " AND ").concat(valTo);
        };
      }
      return fn;
    };
    var formatRule$2 = function formatRule2(item, config2, meta) {
      var properties = item.get("properties") || new immutable.exports.Map();
      var field = properties.get("field");
      var operator = properties.get("operator");
      var operatorOptions = properties.get("operatorOptions");
      var iValueSrc = properties.get("valueSrc");
      var iValueType = properties.get("valueType");
      var iValue = properties.get("value");
      var asyncListValues = properties.get("asyncListValues");
      if (field == null || operator == null)
        return void 0;
      var fieldDefinition = getFieldConfig$8(config2, field) || {};
      var opDef = getOperatorConfig$4(config2, operator, field) || {};
      var reversedOp = opDef.reversedOp;
      var revOpDef = getOperatorConfig$4(config2, reversedOp, field) || {};
      var cardinality = defaultValue$1(opDef.cardinality, 1);
      var isRev = false;
      var canFormatOp = opDef.sqlOp || opDef.sqlFormatOp;
      var canFormatRevOp = revOpDef.sqlOp || revOpDef.sqlFormatOp;
      if (!canFormatOp && !canFormatRevOp) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      if (!canFormatRevOp && canFormatRevOp) {
        isRev = true;
        var _ref = [reversedOp, operator];
        operator = _ref[0];
        reversedOp = _ref[1];
        var _ref2 = [revOpDef, opDef];
        opDef = _ref2[0];
        revOpDef = _ref2[1];
      }
      var valueSrcs = [];
      var valueTypes = [];
      var fvalue = iValue.map(function(currentValue, ind) {
        var valueSrc = iValueSrc ? iValueSrc.get(ind) : null;
        var valueType = iValueType ? iValueType.get(ind) : null;
        var cValue = completeValue(currentValue, valueSrc, config2);
        var widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
        var fieldWidgetDefinition = omit_1(getFieldWidgetConfig$3(config2, field, operator, widget, valueSrc), ["factory"]);
        var fv = formatValue$2(meta, config2, cValue, valueSrc, valueType, fieldWidgetDefinition, fieldDefinition, operator, opDef, asyncListValues);
        if (fv !== void 0) {
          valueSrcs.push(valueSrc);
          valueTypes.push(valueType);
        }
        return fv;
      });
      var hasUndefinedValues = fvalue.filter(function(v) {
        return v === void 0;
      }).size > 0;
      if (hasUndefinedValues || fvalue.size < cardinality)
        return void 0;
      var formattedValue = cardinality == 1 ? fvalue.first() : fvalue;
      var fn = opDef.sqlFormatOp || buildFnToFormatOp$2(operator, opDef);
      if (!fn) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      var formattedField = formatField$2(meta, config2, field);
      var args = [formattedField, operator, formattedValue, valueSrcs.length > 1 ? valueSrcs : valueSrcs[0], valueTypes.length > 1 ? valueTypes : valueTypes[0], omit_1(opDef, ["formatOp", "mongoFormatOp", "sqlFormatOp", "jsonLogic", "spelFormatOp"]), operatorOptions, fieldDefinition];
      var ret;
      ret = fn.apply(void 0, args);
      if (isRev) {
        ret = config2.settings.sqlFormatReverse(ret);
      }
      if (ret === void 0) {
        meta.errors.push("Operator ".concat(operator, " is not supported for value source ").concat(valueSrcs.join(", ")));
        return void 0;
      }
      return ret;
    };
    var formatValue$2 = function formatValue2(meta, config2, currentValue, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, operatorDef, asyncListValues) {
      if (currentValue === void 0)
        return void 0;
      var ret;
      if (valueSrc == "field") {
        ret = formatField$2(meta, config2, currentValue);
      } else if (valueSrc == "func") {
        ret = formatFunc$2(meta, config2, currentValue);
      } else {
        if (typeof fieldWidgetDef.sqlFormatValue === "function") {
          var fn = fieldWidgetDef.sqlFormatValue;
          var args = [
            currentValue,
            _objectSpread$l(_objectSpread$l({}, pick_1(fieldDef, ["fieldSettings", "listValues"])), {}, {
              asyncListValues
            }),
            omit_1(fieldWidgetDef, ["formatValue", "mongoFormatValue", "sqlFormatValue", "jsonLogic", "elasticSearchFormatValue", "spelFormatValue"])
          ];
          if (operator) {
            args.push(operator);
            args.push(operatorDef);
          }
          if (valueSrc == "field") {
            var valFieldDefinition = getFieldConfig$8(config2, currentValue) || {};
            args.push(valFieldDefinition);
          }
          ret = fn.apply(void 0, args);
        } else {
          if (Array.isArray(currentValue)) {
            ret = currentValue.map(function(v) {
              return SqlString.escape(v);
            });
          } else {
            ret = SqlString.escape(currentValue);
          }
        }
      }
      return ret;
    };
    var formatField$2 = function formatField2(meta, config2, field) {
      if (!field)
        return;
      var fieldSeparator = config2.settings.fieldSeparator;
      var fieldDefinition = getFieldConfig$8(config2, field) || {};
      var fieldParts = Array.isArray(field) ? field : field.split(fieldSeparator);
      getFieldPath$3(field, config2);
      var fieldPartsLabels = getFieldPathLabels$3(field, config2);
      var fieldFullLabel = fieldPartsLabels ? fieldPartsLabels.join(fieldSeparator) : null;
      var formatFieldFn = config2.settings.formatField;
      var fieldName = formatFieldName$1(field, config2, meta);
      var formattedField = formatFieldFn(fieldName, fieldParts, fieldFullLabel, fieldDefinition, config2);
      return formattedField;
    };
    var formatFunc$2 = function formatFunc2(meta, config2, currentValue) {
      var funcKey = currentValue.get("func");
      var args = currentValue.get("args");
      var funcConfig = getFuncConfig$2(config2, funcKey);
      var funcName = funcConfig.sqlFunc || funcKey;
      var formattedArgs = {};
      for (var argKey in funcConfig.args) {
        var argConfig = funcConfig.args[argKey];
        var fieldDef = getFieldConfig$8(config2, argConfig);
        var argVal = args ? args.get(argKey) : void 0;
        var argValue = argVal ? argVal.get("value") : void 0;
        var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
        var argAsyncListValues = argVal ? argVal.get("asyncListValues") : void 0;
        var formattedArgVal = formatValue$2(meta, config2, argValue, argValueSrc, argConfig.type, fieldDef, argConfig, null, null, argAsyncListValues);
        if (argValue != void 0 && formattedArgVal === void 0) {
          meta.errors.push("Can't format value of arg ".concat(argKey, " for func ").concat(funcKey));
          return void 0;
        }
        if (formattedArgVal !== void 0) {
          formattedArgs[argKey] = formattedArgVal;
        }
      }
      var ret;
      if (typeof funcConfig.sqlFormatFunc === "function") {
        var fn = funcConfig.sqlFormatFunc;
        var _args = [formattedArgs];
        ret = fn.apply(void 0, _args);
      } else {
        var argsStr = Object.entries(formattedArgs).map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2);
          _ref4[0];
          var v = _ref4[1];
          return v;
        }).join(", ");
        ret = "".concat(funcName, "(").concat(argsStr, ")");
      }
      return ret;
    };
    function _toArray(arr) {
      return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$6(arr) || _nonIterableRest();
    }
    function ownKeys$k(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$k(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$k(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$k(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var spelFormat = function spelFormat2(tree2, config2) {
      return _spelFormat(tree2, config2, false);
    };
    var _spelFormat = function _spelFormat2(tree2, config2) {
      var returnErrors = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var meta = {
        errors: []
      };
      var res = formatItem$1(tree2, config2, meta, null);
      if (returnErrors) {
        return [res, meta.errors];
      } else {
        if (meta.errors.length)
          console.warn("Errors while exporting to SpEL:", meta.errors);
        return res;
      }
    };
    var formatItem$1 = function formatItem2(item, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      if (!item)
        return void 0;
      var type = item.get("type");
      if (type === "group" || type === "rule_group") {
        return formatGroup$1(item, config2, meta, parentField);
      } else if (type === "rule") {
        return formatRule$1(item, config2, meta, parentField);
      } else if (type == "switch_group") {
        return formatSwitch(item, config2, meta);
      } else if (type == "case_group") {
        return formatCase(item, config2, meta, parentField);
      }
      return void 0;
    };
    var formatCase = function formatCase2(item, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var type = item.get("type");
      if (type != "case_group") {
        meta.errors.push("Unexpected child of type ".concat(type, " inside switch"));
        return void 0;
      }
      var properties = item.get("properties") || new immutable.exports.Map();
      var _formatItemValue = formatItemValue$1(config2, properties, meta, null, parentField, "!case_value"), _formatItemValue2 = _slicedToArray(_formatItemValue, 3), formattedValue = _formatItemValue2[0];
      _formatItemValue2[1];
      _formatItemValue2[2];
      var cond = formatGroup$1(item, config2, meta, parentField);
      return [cond, formattedValue];
    };
    var formatSwitch = function formatSwitch2(item, config2, meta) {
      item.get("properties") || new immutable.exports.Map();
      var children = item.get("children1");
      if (!children)
        return void 0;
      var cases = children.map(function(currentChild) {
        return formatCase(currentChild, config2, meta, null);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      }).toArray();
      if (!cases.length)
        return void 0;
      if (cases.length == 1 && !cases[0][0]) {
        return cases[0][1];
      }
      var filteredCases = [];
      for (var i = 0; i < cases.length; i++) {
        if (i != cases.length - 1 && !cases[i][0]) {
          meta.errors.push("No condition for case ".concat(i));
        } else {
          filteredCases.push(cases[i]);
          if (i == cases.length - 1 && cases[i][0]) {
            filteredCases.push([void 0, null]);
          }
        }
      }
      var left = "", right = "";
      for (var _i = 0; _i < filteredCases.length; _i++) {
        var _filteredCases$_i = _slicedToArray(filteredCases[_i], 2), cond = _filteredCases$_i[0], value2 = _filteredCases$_i[1];
        if (value2 == void 0)
          value2 = "null";
        if (cond == void 0)
          cond = "true";
        if (_i != filteredCases.length - 1) {
          left += "(".concat(cond, " ? ").concat(value2, " : ");
          right += ")";
        } else {
          left += "".concat(value2);
        }
      }
      return left + right;
    };
    var formatGroup$1 = function formatGroup2(item, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var type = item.get("type");
      var properties = item.get("properties") || new immutable.exports.Map();
      var mode = properties.get("mode");
      var children = item.get("children1") || new immutable.exports.List();
      var field = properties.get("field");
      var conjunction = properties.get("conjunction");
      if (!conjunction)
        conjunction = defaultConjunction(config2);
      var conjunctionDefinition = config2.conjunctions[conjunction];
      var not = properties.get("not");
      var isRuleGroup = type === "rule_group";
      var isRuleGroupArray = isRuleGroup && mode != "struct";
      var groupField = isRuleGroupArray ? field : parentField;
      var groupFieldDef = getFieldConfig$8(config2, groupField) || {};
      var isSpelArray = groupFieldDef.isSpelArray;
      var groupOperator = properties.get("operator");
      if (!groupOperator && (!mode || mode == "some")) {
        groupOperator = "some";
      }
      var realGroupOperator = checkOp(config2, groupOperator, field);
      var isGroupOpRev = realGroupOperator != groupOperator;
      var realGroupOperatorDefinition = groupOperator && getOperatorConfig$4(config2, realGroupOperator, field) || null;
      var isGroup0 = isRuleGroup && (!realGroupOperator || realGroupOperatorDefinition.cardinality == 0);
      var _formatItemValue3 = formatItemValue$1(config2, properties, meta, realGroupOperator, parentField, null), _formatItemValue4 = _slicedToArray(_formatItemValue3, 3), formattedValue = _formatItemValue4[0], valueSrc = _formatItemValue4[1], valueType = _formatItemValue4[2];
      var list = children.map(function(currentChild) {
        return formatItem$1(currentChild, config2, meta, groupField);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      if (isRuleGroupArray && !isGroup0) {
        if (formattedValue == void 0)
          return void 0;
      } else {
        if (!list.size)
          return void 0;
      }
      var omitBrackets = isRuleGroup;
      var filter = list.size ? conjunctionDefinition.spelFormatConj(list, conjunction, not, omitBrackets) : null;
      var ret;
      if (isRuleGroupArray) {
        var formattedField = formatField$1(meta, config2, field, parentField);
        var getSize = isSpelArray ? ".length" : ".size()";
        var fullSize = "".concat(formattedField).concat(getSize);
        var filteredSize = filter ? "".concat(formattedField, ".?[").concat(filter, "]").concat(getSize) : fullSize;
        var groupValue = isGroup0 ? fullSize : formattedValue;
        ret = formatExpression(meta, config2, properties, filteredSize, groupValue, realGroupOperator, valueSrc, valueType, isGroupOpRev);
      } else {
        ret = filter;
      }
      return ret;
    };
    var buildFnToFormatOp$1 = function buildFnToFormatOp2(operator, operatorDefinition) {
      var spelOp = operatorDefinition.spelOp;
      if (!spelOp)
        return void 0;
      var objectIsFirstArg = spelOp[0] == "$";
      var isMethod = spelOp[0] == "." || objectIsFirstArg;
      var isFunction2 = spelOp.substring(spelOp.length - 2) == "()";
      var sop = isMethod ? spelOp.slice(1) : isFunction2 ? spelOp.substring(0, spelOp.length - 2) : spelOp;
      var fn;
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      if (cardinality == 0) {
        fn = function fn2(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          if (isMethod)
            return "".concat(field, ".").concat(sop, "()");
          else
            return "".concat(field, " ").concat(sop);
        };
      } else if (cardinality == 1) {
        fn = function fn2(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          if (objectIsFirstArg)
            return "".concat(values, ".").concat(sop, "(").concat(field, ")");
          else if (isFunction2)
            return "".concat(sop, "(").concat(field, ", ").concat(values, ")");
          else if (isMethod)
            return "".concat(field, ".").concat(sop, "(").concat(values, ")");
          else
            return "".concat(field, " ").concat(sop, " ").concat(values);
        };
      }
      return fn;
    };
    var formatExpression = function formatExpression2(meta, config2, properties, formattedField, formattedValue, operator, valueSrc, valueType) {
      var isRev = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : false;
      var field = properties.get("field");
      var opDef = getOperatorConfig$4(config2, operator, field) || {};
      var fieldDef = getFieldConfig$8(config2, field) || {};
      var operatorOptions = properties.get("operatorOptions");
      var fn = opDef.spelFormatOp || buildFnToFormatOp$1(operator, opDef);
      if (!fn) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      var args = [formattedField, operator, formattedValue, valueSrc, valueType, omit_1(opDef, ["formatOp", "mongoFormatOp", "sqlFormatOp", "jsonLogic", "spelFormatOp"]), operatorOptions, fieldDef];
      var ret;
      ret = fn.apply(void 0, args);
      if (isRev) {
        ret = config2.settings.spelFormatReverse(ret);
      }
      if (ret === void 0) {
        meta.errors.push("Operator ".concat(operator, " is not supported for value source ").concat(valueSrc));
      }
      return ret;
    };
    var checkOp = function checkOp2(config2, operator, field) {
      if (!operator)
        return void 0;
      var opDef = getOperatorConfig$4(config2, operator, field) || {};
      var reversedOp = opDef.reversedOp;
      var revOpDef = getOperatorConfig$4(config2, reversedOp, field) || {};
      var canFormatOp = opDef.spelOp || opDef.spelFormatOp;
      var canFormatRevOp = revOpDef.spelOp || revOpDef.spelFormatOp;
      if (!canFormatOp && !canFormatRevOp) {
        return void 0;
      }
      if (!canFormatOp && canFormatRevOp) {
        var _ref = [reversedOp, operator];
        operator = _ref[0];
        reversedOp = _ref[1];
        var _ref2 = [revOpDef, opDef];
        opDef = _ref2[0];
        revOpDef = _ref2[1];
      }
      return operator;
    };
    var formatRule$1 = function formatRule2(item, config2, meta) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var properties = item.get("properties") || new immutable.exports.Map();
      var field = properties.get("field");
      var operator = properties.get("operator");
      if (field == null || operator == null)
        return void 0;
      var realOp = checkOp(config2, operator, field);
      if (!realOp) {
        meta.errors.push("Operator ".concat(operator, " is not supported"));
        return void 0;
      }
      var isRev = realOp != operator;
      var _formatItemValue5 = formatItemValue$1(config2, properties, meta, realOp, parentField, null), _formatItemValue6 = _slicedToArray(_formatItemValue5, 3), formattedValue = _formatItemValue6[0], valueSrc = _formatItemValue6[1], valueType = _formatItemValue6[2];
      if (formattedValue === void 0)
        return void 0;
      var formattedField = formatField$1(meta, config2, field, parentField);
      var res = formatExpression(meta, config2, properties, formattedField, formattedValue, realOp, valueSrc, valueType, isRev);
      return res;
    };
    var formatItemValue$1 = function formatItemValue2(config2, properties, meta, operator, parentField) {
      var expectedValueType = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var field = properties.get("field");
      var iValueSrc = properties.get("valueSrc");
      var iValueType = properties.get("valueType");
      if (expectedValueType == "!case_value" || iValueType && iValueType.get(0) == "case_value") {
        field = "!case_value";
      }
      var fieldDef = getFieldConfig$8(config2, field) || {};
      var operatorDefinition = getOperatorConfig$4(config2, operator, field) || {};
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      var iValue = properties.get("value");
      var asyncListValues = properties.get("asyncListValues");
      var valueSrcs = [];
      var valueTypes = [];
      var formattedValue;
      if (iValue != void 0) {
        var fvalue = iValue.map(function(currentValue, ind) {
          var valueSrc = iValueSrc ? iValueSrc.get(ind) : null;
          var valueType = iValueType ? iValueType.get(ind) : null;
          var cValue = completeValue(currentValue, valueSrc, config2);
          var widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
          var fieldWidgetDef = omit_1(getFieldWidgetConfig$3(config2, field, operator, widget, valueSrc), ["factory"]);
          var fv = formatValue$1(meta, config2, cValue, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, operatorDefinition, parentField, asyncListValues);
          if (fv !== void 0) {
            valueSrcs.push(valueSrc);
            valueTypes.push(valueType);
          }
          return fv;
        });
        var hasUndefinedValues = fvalue.filter(function(v) {
          return v === void 0;
        }).size > 0;
        if (!(fvalue.size < cardinality || hasUndefinedValues)) {
          formattedValue = cardinality > 1 ? fvalue.toArray() : cardinality == 1 ? fvalue.first() : null;
        }
      }
      return [formattedValue, valueSrcs.length > 1 ? valueSrcs : valueSrcs[0], valueTypes.length > 1 ? valueTypes : valueTypes[0]];
    };
    var formatValue$1 = function formatValue2(meta, config2, currentValue, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, operatorDef) {
      var parentField = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : null;
      var asyncListValues = arguments.length > 10 ? arguments[10] : void 0;
      if (currentValue === void 0)
        return void 0;
      var ret;
      if (valueSrc == "field") {
        ret = formatField$1(meta, config2, currentValue, parentField);
      } else if (valueSrc == "func") {
        ret = formatFunc$1(meta, config2, currentValue, parentField);
      } else {
        if (typeof fieldWidgetDef.spelFormatValue === "function") {
          var fn = fieldWidgetDef.spelFormatValue;
          var args = [
            currentValue,
            _objectSpread$k(_objectSpread$k({}, pick_1(fieldDef, ["fieldSettings", "listValues"])), {}, {
              asyncListValues
            }),
            omit_1(fieldWidgetDef, ["formatValue", "mongoFormatValue", "sqlFormatValue", "jsonLogic", "elasticSearchFormatValue", "spelFormatValue"])
          ];
          if (operator) {
            args.push(operator);
            args.push(operatorDef);
          }
          if (valueSrc == "field") {
            var valFieldDefinition = getFieldConfig$8(config2, currentValue) || {};
            args.push(valFieldDefinition);
          }
          ret = fn.apply(void 0, args);
        } else {
          ret = spelEscape(currentValue);
        }
      }
      return ret;
    };
    var formatField$1 = function formatField2(meta, config2, field) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      if (!field)
        return;
      var fieldSeparator = config2.settings.fieldSeparator;
      var fieldDefinition = getFieldConfig$8(config2, field) || {};
      var fieldParts = Array.isArray(field) ? field : field.split(fieldSeparator);
      getFieldPath$3(field, config2, parentField);
      var fieldPartsConfigs = getFieldPartsConfigs(field, config2, parentField);
      var formatFieldFn = config2.settings.formatSpelField;
      var fieldName = formatFieldName$1(field, config2, meta);
      if (parentField) {
        var parentFieldDef = getFieldConfig$8(config2, parentField) || {};
        var parentFieldName = parentField;
        if (parentFieldDef.fieldName) {
          parentFieldName = parentFieldDef.fieldName;
        }
        if (fieldName.indexOf(parentFieldName + fieldSeparator) == 0) {
          fieldName = fieldName.slice((parentFieldName + fieldSeparator).length);
        } else {
          meta.errors.push("Can't cut group ".concat(parentFieldName, " from field ").concat(fieldName));
        }
      }
      var fieldPartsMeta = fieldPartsConfigs.map(function(_ref3) {
        var _ref4 = _slicedToArray(_ref3, 3), key = _ref4[0], cnf = _ref4[1], parentCnf = _ref4[2];
        var parent2;
        if (parentCnf) {
          if (parentCnf.type == "!struct" || parentCnf.type == "!group" && parentCnf.mode == "struct")
            parent2 = cnf.isSpelMap ? "map" : "class";
          else if (parentCnf.type == "!group")
            parent2 = cnf.isSpelItemMap ? "[map]" : "[class]";
          else
            parent2 = "class";
        }
        var isSpelVariable = cnf === null || cnf === void 0 ? void 0 : cnf.isSpelVariable;
        return {
          key,
          parent: parent2,
          isSpelVariable
        };
      });
      var formattedField = formatFieldFn(fieldName, parentField, fieldParts, fieldPartsMeta, fieldDefinition, config2);
      return formattedField;
    };
    var formatFunc$1 = function formatFunc2(meta, config2, currentValue) {
      var parentField = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      var funcKey = currentValue.get("func");
      var args = currentValue.get("args");
      var funcConfig = getFuncConfig$2(config2, funcKey);
      var funcName = funcConfig.spelFunc || funcKey;
      var formattedArgs = {};
      for (var argKey in funcConfig.args) {
        var argConfig = funcConfig.args[argKey];
        var fieldDef = getFieldConfig$8(config2, argConfig);
        var argVal = args ? args.get(argKey) : void 0;
        var argValue = argVal ? argVal.get("value") : void 0;
        var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
        var argAsyncListValues = argVal ? argVal.get("asyncListValues") : void 0;
        var formattedArgVal = formatValue$1(meta, config2, argValue, argValueSrc, argConfig.type, fieldDef, argConfig, null, null, parentField, argAsyncListValues);
        if (argValue != void 0 && formattedArgVal === void 0) {
          meta.errors.push("Can't format value of arg ".concat(argKey, " for func ").concat(funcKey));
          return void 0;
        }
        if (formattedArgVal !== void 0) {
          formattedArgs[argKey] = formattedArgVal;
        }
      }
      var ret;
      if (typeof funcConfig.spelFormatFunc === "function") {
        var fn = funcConfig.spelFormatFunc;
        var _args = [formattedArgs];
        ret = fn.apply(void 0, _args);
      } else {
        var _args2 = Object.entries(formattedArgs).map(function(_ref5) {
          var _ref6 = _slicedToArray(_ref5, 2);
          _ref6[0];
          var v = _ref6[1];
          return v;
        });
        if (funcName[0] == "." && _args2.length) {
          var _args3 = _toArray(_args2), obj = _args3[0], params = _args3.slice(1);
          ret = "".concat(obj).concat(funcName, "(").concat(params.join(", "), ")");
        } else {
          ret = "".concat(funcName, "(").concat(_args2.join(", "), ")");
        }
      }
      return ret;
    };
    function ownKeys$j(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$j(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$j(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$j(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var queryString$1 = function queryString2(item, config2) {
      var isForDisplay = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var meta = {
        errors: []
      };
      var res = formatItem(item, config2, meta, isForDisplay, null);
      if (meta.errors.length)
        console.warn("Errors while exporting to string:", meta.errors);
      return res;
    };
    var formatItem = function formatItem2(item, config2, meta) {
      var isForDisplay = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      if (!item)
        return void 0;
      var type = item.get("type");
      item.get("children1");
      if (type === "group" || type === "rule_group") {
        return formatGroup(item, config2, meta, isForDisplay, parentField);
      } else if (type === "rule") {
        return formatRule(item, config2, meta, isForDisplay, parentField);
      }
      return void 0;
    };
    var formatGroup = function formatGroup2(item, config2, meta) {
      var isForDisplay = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var type = item.get("type");
      var properties = item.get("properties") || new immutable.exports.Map();
      var mode = properties.get("mode");
      var children = item.get("children1") || new immutable.exports.List();
      var isRuleGroup = type === "rule_group";
      var groupField = isRuleGroup && mode == "array" ? properties.get("field") : null;
      var canHaveEmptyChildren = isRuleGroup && mode == "array";
      var not = properties.get("not");
      var list = children.map(function(currentChild) {
        return formatItem(currentChild, config2, meta, isForDisplay, groupField);
      }).filter(function(currentChild) {
        return typeof currentChild !== "undefined";
      });
      if (!canHaveEmptyChildren && !list.size)
        return void 0;
      var conjunction = properties.get("conjunction");
      if (!conjunction)
        conjunction = defaultConjunction(config2);
      var conjunctionDefinition = config2.conjunctions[conjunction];
      var conjStr = list.size ? conjunctionDefinition.formatConj(list, conjunction, not, isForDisplay) : null;
      var ret;
      if (groupField) {
        var aggrArgs = formatRule(item, config2, meta, isForDisplay, parentField, true);
        if (aggrArgs) {
          var _config$settings;
          var isRev = aggrArgs.pop();
          var args = [conjStr].concat(_toConsumableArray(aggrArgs));
          ret = (_config$settings = config2.settings).formatAggr.apply(_config$settings, _toConsumableArray(args));
          if (isRev) {
            ret = config2.settings.formatReverse(ret, null, null, null, null, isForDisplay);
          }
        }
      } else {
        ret = conjStr;
      }
      return ret;
    };
    var formatItemValue = function formatItemValue2(config2, properties, meta, _operator, isForDisplay, parentField) {
      var field = properties.get("field");
      var iValueSrc = properties.get("valueSrc");
      var iValueType = properties.get("valueType");
      var fieldDef = getFieldConfig$8(config2, field) || {};
      var operator = _operator || properties.get("operator");
      var operatorDef = getOperatorConfig$4(config2, operator, field) || {};
      var cardinality = defaultValue$1(operatorDef.cardinality, 1);
      var iValue = properties.get("value");
      var asyncListValues = properties.get("asyncListValues");
      var valueSrcs = [];
      var valueTypes = [];
      var formattedValue;
      if (iValue != void 0) {
        var fvalue = iValue.map(function(currentValue, ind) {
          var valueSrc = iValueSrc ? iValueSrc.get(ind) : null;
          var valueType = iValueType ? iValueType.get(ind) : null;
          var cValue = completeValue(currentValue, valueSrc, config2);
          var widget = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
          var fieldWidgetDef = omit_1(getFieldWidgetConfig$3(config2, field, operator, widget, valueSrc), ["factory"]);
          var fv = formatValue(config2, meta, cValue, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, operatorDef, isForDisplay, parentField, asyncListValues);
          if (fv !== void 0) {
            valueSrcs.push(valueSrc);
            valueTypes.push(valueType);
          }
          return fv;
        });
        var hasUndefinedValues = fvalue.filter(function(v) {
          return v === void 0;
        }).size > 0;
        if (!(hasUndefinedValues || fvalue.size < cardinality)) {
          formattedValue = cardinality == 1 ? fvalue.first() : fvalue;
        }
      }
      return [formattedValue, valueSrcs.length > 1 ? valueSrcs : valueSrcs[0], valueTypes.length > 1 ? valueTypes : valueTypes[0]];
    };
    var buildFnToFormatOp = function buildFnToFormatOp2(operator, operatorDefinition) {
      var fop = operatorDefinition.labelForFormat || operator;
      var cardinality = defaultValue$1(operatorDefinition.cardinality, 1);
      var fn;
      if (cardinality == 0) {
        fn = function fn2(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return "".concat(field, " ").concat(fop);
        };
      } else if (cardinality == 1) {
        fn = function fn2(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return "".concat(field, " ").concat(fop, " ").concat(values);
        };
      } else if (cardinality == 2) {
        fn = function fn2(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          var valFrom = values.first();
          var valTo = values.get(1);
          return "".concat(field, " ").concat(fop, " ").concat(valFrom, " AND ").concat(valTo);
        };
      }
      return fn;
    };
    var formatRule = function formatRule2(item, config2, meta) {
      var isForDisplay = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var returnArgs = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : false;
      var properties = item.get("properties") || new immutable.exports.Map();
      var field = properties.get("field");
      var operator = properties.get("operator");
      var operatorOptions = properties.get("operatorOptions");
      if (field == null || operator == null)
        return void 0;
      var fieldDef = getFieldConfig$8(config2, field) || {};
      var operatorDef = getOperatorConfig$4(config2, operator, field) || {};
      var reversedOp = operatorDef.reversedOp;
      var revOperatorDef = getOperatorConfig$4(config2, reversedOp, field) || {};
      var isRev = false;
      var fn = operatorDef.formatOp;
      if (!fn && reversedOp) {
        fn = revOperatorDef.formatOp;
        if (fn) {
          isRev = true;
          var _ref = [reversedOp, operator];
          operator = _ref[0];
          reversedOp = _ref[1];
          var _ref2 = [revOperatorDef, operatorDef];
          operatorDef = _ref2[0];
          revOperatorDef = _ref2[1];
        }
      }
      if (!fn)
        fn = buildFnToFormatOp(operator, operatorDef);
      if (!fn)
        return void 0;
      var formattedField = formatField(config2, meta, field, isForDisplay, parentField);
      var _formatItemValue = formatItemValue(config2, properties, meta, operator, isForDisplay, parentField), _formatItemValue2 = _slicedToArray(_formatItemValue, 3), formattedValue = _formatItemValue2[0], valueSrc = _formatItemValue2[1], valueType = _formatItemValue2[2];
      if (formattedValue === void 0)
        return void 0;
      var args = [formattedField, operator, formattedValue, valueSrc, valueType, omit_1(operatorDef, ["formatOp", "mongoFormatOp", "sqlFormatOp", "jsonLogic", "spelFormatOp"]), operatorOptions, isForDisplay, fieldDef, isRev];
      if (returnArgs) {
        return args;
      } else {
        var ret = fn.apply(void 0, args);
        if (isRev) {
          ret = config2.settings.formatReverse(ret, operator, reversedOp, operatorDef, revOperatorDef, isForDisplay);
        }
        return ret;
      }
    };
    var formatValue = function formatValue2(config2, meta, value2, valueSrc, valueType, fieldWidgetDef, fieldDef, operator, opDef, isForDisplay) {
      var parentField = arguments.length > 10 && arguments[10] !== void 0 ? arguments[10] : null;
      var asyncListValues = arguments.length > 11 ? arguments[11] : void 0;
      if (value2 === void 0)
        return void 0;
      var ret;
      if (valueSrc == "field") {
        ret = formatField(config2, meta, value2, isForDisplay, parentField);
      } else if (valueSrc == "func") {
        ret = formatFunc(config2, meta, value2, isForDisplay, parentField);
      } else {
        if (typeof fieldWidgetDef.formatValue === "function") {
          var fn = fieldWidgetDef.formatValue;
          var args = [
            value2,
            _objectSpread$j(_objectSpread$j({}, pick_1(fieldDef, ["fieldSettings", "listValues"])), {}, {
              asyncListValues
            }),
            omit_1(fieldWidgetDef, ["formatValue", "mongoFormatValue", "sqlFormatValue", "jsonLogic", "elasticSearchFormatValue", "spelFormatValue"]),
            isForDisplay
          ];
          if (operator) {
            args.push(operator);
            args.push(opDef);
          }
          if (valueSrc == "field") {
            var valFieldDefinition = getFieldConfig$8(config2, value2) || {};
            args.push(valFieldDefinition);
          }
          ret = fn.apply(void 0, args);
        } else {
          ret = value2;
        }
      }
      return ret;
    };
    var formatField = function formatField2(config2, meta, field, isForDisplay) {
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var cutParentField = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : true;
      var _config$settings2 = config2.settings, fieldSeparator = _config$settings2.fieldSeparator, fieldSeparatorDisplay = _config$settings2.fieldSeparatorDisplay;
      var ret = null;
      if (field) {
        var fieldDefinition = getFieldConfig$8(config2, field) || {};
        var fieldParts = Array.isArray(field) ? field : field.split(fieldSeparator);
        getFieldPath$3(field, config2);
        var fieldPartsLabels = getFieldPathLabels$3(field, config2, cutParentField ? parentField : null);
        var fieldFullLabel = fieldPartsLabels ? fieldPartsLabels.join(fieldSeparatorDisplay) : null;
        var fieldLabel2 = fieldDefinition.label2 || fieldFullLabel;
        var formatFieldFn = config2.settings.formatField;
        var fieldName = formatFieldName$1(field, config2, meta, cutParentField ? parentField : null);
        ret = formatFieldFn(fieldName, fieldParts, fieldLabel2, fieldDefinition, config2, isForDisplay);
      }
      return ret;
    };
    var formatFunc = function formatFunc2(config2, meta, funcValue, isForDisplay) {
      var parentField = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var funcKey = funcValue.get("func");
      var args = funcValue.get("args");
      var funcConfig = getFuncConfig$2(config2, funcKey);
      var funcName = isForDisplay && funcConfig.label || funcKey;
      var formattedArgs = {};
      var formattedArgsWithNames = {};
      for (var argKey in funcConfig.args) {
        var argConfig = funcConfig.args[argKey];
        var fieldDef = getFieldConfig$8(config2, argConfig);
        var argVal = args ? args.get(argKey) : void 0;
        var argValue = argVal ? argVal.get("value") : void 0;
        var argValueSrc = argVal ? argVal.get("valueSrc") : void 0;
        var argAsyncListValues = argVal ? argVal.get("asyncListValues") : void 0;
        var formattedArgVal = formatValue(config2, meta, argValue, argValueSrc, argConfig.type, fieldDef, argConfig, null, null, isForDisplay, parentField, argAsyncListValues);
        var argName = isForDisplay && argConfig.label || argKey;
        if (formattedArgVal !== void 0) {
          formattedArgs[argKey] = formattedArgVal;
          formattedArgsWithNames[argName] = formattedArgVal;
        }
      }
      var ret = null;
      if (typeof funcConfig.formatFunc === "function") {
        var fn = funcConfig.formatFunc;
        var _args = [formattedArgs, isForDisplay];
        ret = fn.apply(void 0, _args);
      } else {
        var argsStr = Object.entries(formattedArgsWithNames).map(function(_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2), k = _ref4[0], v = _ref4[1];
          return isForDisplay ? "".concat(k, ": ").concat(v) : "".concat(v);
        }).join(", ");
        ret = "".concat(funcName, "(").concat(argsStr, ")");
      }
      return ret;
    };
    function ownKeys$i(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$i(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$i(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$i(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function buildEsGeoPoint(geoPointString) {
      if (geoPointString == null) {
        return null;
      }
      var coordsNumberArray = geoPointString.split(",").map(Number);
      return {
        top_left: {
          lat: coordsNumberArray[0],
          lon: coordsNumberArray[1]
        },
        bottom_right: {
          lat: coordsNumberArray[2],
          lon: coordsNumberArray[3]
        }
      };
    }
    function buildEsRangeParameters(value2, operator) {
      if (value2.length > 1) {
        return {
          gte: "".concat(value2[0]),
          lte: "".concat(value2[1])
        };
      }
      var dateTime = value2[0];
      switch (operator) {
        case "on_date":
        case "not_on_date":
        case "equal":
        case "select_equals":
        case "not_equal":
          return {
            gte: "".concat(dateTime, "||/d"),
            lte: "".concat(dateTime, "||+1d")
          };
        case "less_or_equal":
          return {
            lte: "".concat(dateTime)
          };
        case "greater_or_equal":
          return {
            gte: "".concat(dateTime)
          };
        case "less":
          return {
            lt: "".concat(dateTime)
          };
        case "greater":
          return {
            gt: "".concat(dateTime)
          };
        default:
          return void 0;
      }
    }
    function buildEsWildcardParameters(value2) {
      return {
        value: "*" + value2 + "*"
      };
    }
    function determineOccurrence(combinator, not) {
      switch (combinator) {
        case "AND":
          return not ? "must_not" : "must";
        case "OR":
          return not ? "should_not" : "should";
        case "NOT":
          return not ? "must" : "must_not";
        default:
          return void 0;
      }
    }
    function buildRegexpParameters(value2) {
      return {
        value: value2
      };
    }
    function determineField(fieldName, config2) {
      return fieldName;
    }
    function buildParameters(queryType, value2, operator, fieldName, config2) {
      var textField = determineField(fieldName);
      switch (queryType) {
        case "filter":
          return {
            script: config2.operators[operator].elasticSearchScript(fieldName, value2)
          };
        case "exists":
          return {
            field: fieldName
          };
        case "match":
          return _defineProperty$1({}, textField, value2[0]);
        case "term":
          return _defineProperty$1({}, fieldName, value2[0]);
        case "geo_bounding_box":
          return _defineProperty$1({}, fieldName, buildEsGeoPoint(value2[0]));
        case "range":
          return _defineProperty$1({}, fieldName, buildEsRangeParameters(value2, operator));
        case "wildcard":
          return _defineProperty$1({}, fieldName, buildEsWildcardParameters(value2[0]));
        case "regexp":
          return _defineProperty$1({}, fieldName, buildRegexpParameters(value2[0]));
        default:
          return void 0;
      }
    }
    function buildEsRule(fieldName, value2, operator, config2, valueSrc) {
      if (!fieldName || !operator || value2 == void 0)
        return void 0;
      var op = operator;
      var opConfig = config2.operators[op];
      if (!opConfig)
        return void 0;
      var _opConfig = opConfig, elasticSearchQueryType = _opConfig.elasticSearchQueryType;
      var not = false;
      if (!elasticSearchQueryType && opConfig.reversedOp) {
        not = true;
        op = opConfig.reversedOp;
        opConfig = config2.operators[op];
        var _opConfig2 = opConfig;
        elasticSearchQueryType = _opConfig2.elasticSearchQueryType;
      }
      var widget = getWidgetForFieldOp$3(config2, fieldName, op, valueSrc);
      var widgetConfig = config2.widgets[widget];
      if (!widgetConfig)
        return void 0;
      var elasticSearchFormatValue = widgetConfig.elasticSearchFormatValue;
      var queryType;
      if (typeof elasticSearchQueryType === "function") {
        queryType = elasticSearchQueryType(widget);
      } else {
        queryType = elasticSearchQueryType;
      }
      if (!queryType) {
        return void 0;
      }
      var parameters;
      if (typeof elasticSearchFormatValue === "function") {
        parameters = elasticSearchFormatValue(queryType, value2, op, fieldName, config2);
      } else {
        parameters = buildParameters(queryType, value2, op, fieldName, config2);
      }
      if (not) {
        return {
          bool: {
            must_not: _defineProperty$1({}, queryType, _objectSpread$i({}, parameters))
          }
        };
      } else {
        return _defineProperty$1({}, queryType, _objectSpread$i({}, parameters));
      }
    }
    function buildEsGroup(children, conjunction, not, recursiveFxn, config2) {
      if (!children || !children.size)
        return void 0;
      var childrenArray = children.valueSeq().toArray();
      var occurrence = determineOccurrence(conjunction, not);
      var result = childrenArray.map(function(c) {
        return recursiveFxn(c, config2);
      }).filter(function(v) {
        return v !== void 0;
      });
      if (!result.length)
        return void 0;
      var resultFlat = result.flat(Infinity);
      return {
        bool: _defineProperty$1({}, occurrence, resultFlat)
      };
    }
    function elasticSearchFormat(tree2, config2) {
      if (!tree2)
        return void 0;
      var type = tree2.get("type");
      var properties = tree2.get("properties") || /* @__PURE__ */ new Map();
      if (type === "rule" && properties.get("field")) {
        var _properties$get, _properties$get2;
        var operator = properties.get("operator");
        var field = properties.get("field");
        var value2 = properties.get("value").toJS();
        (_properties$get = properties.get("valueType")) === null || _properties$get === void 0 ? void 0 : _properties$get.get(0);
        var valueSrc = (_properties$get2 = properties.get("valueSrc")) === null || _properties$get2 === void 0 ? void 0 : _properties$get2.get(0);
        if (valueSrc === "func") {
          return;
        }
        if (value2 && Array.isArray(value2[0])) {
          return value2[0].map(function(val) {
            return buildEsRule(field, [val], operator, config2, valueSrc);
          });
        } else {
          return buildEsRule(field, value2, operator, config2, valueSrc);
        }
      }
      if (type === "group" || type === "rule_group") {
        var not = properties.get("not");
        var conjunction = properties.get("conjunction");
        if (!conjunction)
          conjunction = defaultConjunction(config2);
        var children = tree2.get("children1");
        return buildEsGroup(children, conjunction, not, elasticSearchFormat, config2);
      }
    }
    const Export = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      queryBuilderFormat,
      jsonLogicFormat: jsonLogicFormat$1,
      mongodbFormat: mongodbFormat$1,
      _mongodbFormat,
      sqlFormat: sqlFormat$1,
      _sqlFormat,
      spelFormat,
      _spelFormat,
      queryString: queryString$1,
      elasticSearchFormat
    }, Symbol.toStringTag, { value: "Module" }));
    var getTree$1 = function getTree2(immutableTree) {
      var light = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      var children1AsArray = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      if (!immutableTree)
        return void 0;
      var tree2 = immutableTree;
      tree2 = tree2.toJS();
      if (light)
        tree2 = getLightTree(tree2, children1AsArray);
      return tree2;
    };
    var loadTree$1 = function loadTree2(serTree) {
      if (isImmutableTree(serTree)) {
        return serTree;
      } else if (isTree(serTree)) {
        return jsTreeToImmutable(serTree);
      } else if (typeof serTree == "string" && serTree.startsWith('["~#iM"')) {
        throw "You are trying to load query in obsolete serialization format (Immutable string) which is not supported in versions starting from 2.1.17";
      } else if (typeof serTree == "string") {
        return jsTreeToImmutable(JSON.parse(serTree));
      } else
        throw "Can't load tree!";
    };
    var checkTree$1 = function checkTree2(tree2, config2) {
      if (!tree2)
        return void 0;
      var extendedConfig = extendConfig$1(config2);
      return validateTree(tree2, null, extendedConfig, extendedConfig);
    };
    var isValidTree = function isValidTree2(tree2) {
      return getTreeBadFields(tree2).length == 0;
    };
    var isImmutableTree = function isImmutableTree2(tree2) {
      return immutable.exports.Map.isMap(tree2);
    };
    var isTree = function isTree2(tree2) {
      return _typeof$1(tree2) == "object" && (tree2.type == "group" || tree2.type == "switch_group");
    };
    function jsTreeToImmutable(tree2) {
      return immutable.exports.fromJS(tree2, function(key, value2) {
        var outValue;
        if (key == "properties") {
          outValue = value2.toOrderedMap();
          for (var i = 0; i < 2; i++) {
            var _outValue$get;
            if (((_outValue$get = outValue.get("value")) === null || _outValue$get === void 0 ? void 0 : _outValue$get.get(i)) === null) {
              outValue = outValue.setIn(["value", i], void 0);
            }
          }
        } else if (key == "value" && value2.get(0) && value2.get(0).toJS !== void 0) {
          var valueJs = value2.get(0).toJS();
          if (valueJs.func) {
            outValue = value2.toOrderedMap();
          } else {
            outValue = Immutable.List.of(valueJs);
          }
        } else if (key == "asyncListValues") {
          outValue = value2.toJS();
        } else if (key == "children1" && Immutable.Iterable.isIndexed(value2)) {
          outValue = new Immutable.OrderedMap(value2.map(function(child) {
            return [child.get("id"), child];
          }));
        } else {
          outValue = Immutable.Iterable.isIndexed(value2) ? value2.toList() : value2.toOrderedMap();
        }
        return outValue;
      });
    }
    function ownKeys$h(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$h(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$h(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$h(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var arrayUniq = function arrayUniq2(arr) {
      return Array.from(new Set(arr));
    };
    var loadFromJsonLogic$1 = function loadFromJsonLogic2(logicTree, config2) {
      return _loadFromJsonLogic(logicTree, config2, false);
    };
    var _loadFromJsonLogic = function _loadFromJsonLogic2(logicTree, config2) {
      var returnErrors = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var meta = {
        errors: []
      };
      var extendedConfig = extendConfig$1(config2);
      var conv = buildConv$1(extendedConfig);
      var jsTree = logicTree ? convertFromLogic(logicTree, conv, extendedConfig, "rule", meta) : void 0;
      if (jsTree && jsTree.type != "group") {
        jsTree = wrapInDefaultConj$1(jsTree, extendedConfig);
      }
      var immTree = jsTree ? loadTree$1(jsTree) : void 0;
      if (returnErrors) {
        return [immTree, meta.errors];
      } else {
        if (meta.errors.length)
          console.warn("Errors while importing from JsonLogic:", meta.errors);
        return immTree;
      }
    };
    var buildConv$1 = function buildConv2(config2) {
      var operators2 = {};
      for (var opKey in config2.operators) {
        var opConfig = config2.operators[opKey];
        if (typeof opConfig.jsonLogic == "string") {
          var opk = (opConfig._jsonLogicIsRevArgs ? "#" : "") + opConfig.jsonLogic + "/" + defaultValue$1(opConfig.cardinality, 1);
          if (!operators2[opk])
            operators2[opk] = [];
          operators2[opk].push(opKey);
        } else if (typeof opConfig.jsonLogic2 == "string") {
          var _opk = opConfig.jsonLogic2 + "/" + defaultValue$1(opConfig.cardinality, 1);
          if (!operators2[_opk])
            operators2[_opk] = [];
          operators2[_opk].push(opKey);
        }
      }
      var conjunctions2 = {};
      for (var conjKey in config2.conjunctions) {
        var conjunctionDefinition = config2.conjunctions[conjKey];
        var ck = conjunctionDefinition.jsonLogicConj || conjKey.toLowerCase();
        conjunctions2[ck] = conjKey;
      }
      var funcs2 = {};
      for (var funcKey in config2.funcs) {
        var funcConfig = config2.funcs[funcKey];
        var fk = void 0;
        if (funcConfig.jsonLogicIsMethod) {
          fk = "#" + funcConfig.jsonLogic;
        } else if (typeof funcConfig.jsonLogic == "string") {
          fk = funcConfig.jsonLogic;
        }
        if (fk) {
          if (!funcs2[fk])
            funcs2[fk] = [];
          funcs2[fk].push(funcKey);
        }
      }
      var _config$settings$json = config2.settings.jsonLogic, groupVarKey = _config$settings$json.groupVarKey, altVarKey = _config$settings$json.altVarKey;
      return {
        operators: operators2,
        conjunctions: conjunctions2,
        funcs: funcs2,
        varKeys: ["var", groupVarKey, altVarKey]
      };
    };
    var convertFromLogic = function convertFromLogic2(logic, conv, config2, expectedType, meta) {
      var not = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : false;
      var fieldConfig = arguments.length > 6 ? arguments[6] : void 0;
      var widget = arguments.length > 7 ? arguments[7] : void 0;
      var parentField = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : null;
      var op, vals;
      if (isJsonLogic(logic)) {
        op = Object.keys(logic)[0];
        vals = logic[op];
        if (!Array.isArray(vals))
          vals = [vals];
      }
      var ret;
      var beforeErrorsCnt = meta.errors.length;
      var lockedOp = config2.settings.jsonLogic.lockedOp;
      var isEmptyOp = op == "!" && vals.length == 1 && vals[0] && isJsonLogic(vals[0]) && conv.varKeys.includes(Object.keys(vals[0])[0]);
      var isRev = op == "!" && !isEmptyOp;
      var isLocked = lockedOp && op == lockedOp;
      if (isLocked) {
        ret = convertFromLogic2(vals[0], conv, config2, expectedType, meta, not, fieldConfig, widget, parentField, true);
      } else if (isRev) {
        ret = convertFromLogic2(vals[0], conv, config2, expectedType, meta, !not, fieldConfig, widget, parentField);
      } else if (expectedType == "val") {
        ret = convertField(op, vals, conv, config2, not, meta, parentField) || convertFunc(op, vals, conv, config2, not, fieldConfig, meta, parentField) || convertVal(logic, fieldConfig, widget, config2, meta);
      } else if (expectedType == "rule") {
        ret = convertConj(op, vals, conv, config2, not, meta, parentField, false) || convertOp(op, vals, conv, config2, not, meta, parentField);
      }
      var afterErrorsCnt = meta.errors.length;
      if (op != "!" && ret === void 0 && afterErrorsCnt == beforeErrorsCnt) {
        meta.errors.push("Can't parse logic ".concat(JSON.stringify(logic)));
      }
      if (isLocked) {
        ret.properties.isLocked = true;
      }
      return ret;
    };
    var convertVal = function convertVal2(val, fieldConfig, widget, config2, meta) {
      if (val === void 0)
        return void 0;
      var widgetConfig = config2.widgets[widget || fieldConfig.mainWidget];
      if (!widgetConfig) {
        meta.errors.push("No widget for type ".concat(fieldConfig.type));
        return void 0;
      }
      if (isJsonLogic(val)) {
        meta.errors.push("Unexpected logic in value: ".concat(JSON.stringify(val)));
        return void 0;
      }
      if (fieldConfig && fieldConfig.type == "time" && typeof val == "number") {
        var h = Math.floor(val / 60 / 60) % 24, m = Math.floor(val / 60) % 60, s = val % 60;
        var valueFormat = widgetConfig.valueFormat;
        if (valueFormat) {
          var dateVal = new Date(val);
          dateVal.setMilliseconds(0);
          dateVal.setHours(h);
          dateVal.setMinutes(m);
          dateVal.setSeconds(s);
          val = hooks(dateVal).format(valueFormat);
        } else {
          val = "".concat(h, ":").concat(m, ":").concat(s);
        }
      }
      if (fieldConfig && ["date", "datetime"].includes(fieldConfig.type) && val && !(val instanceof Date)) {
        try {
          var _dateVal = new Date(val);
          if (_dateVal instanceof Date && _dateVal.toISOString() === val) {
            val = _dateVal;
          }
        } catch (e) {
          meta.errors.push("Can't convert value ".concat(val, " as Date"));
          val = void 0;
        }
      }
      if (val instanceof Date && fieldConfig) {
        var _valueFormat = widgetConfig.valueFormat;
        if (_valueFormat) {
          val = hooks(val).format(_valueFormat);
        }
      }
      var asyncListValues;
      if (val && fieldConfig.fieldSettings && fieldConfig.fieldSettings.asyncFetch) {
        var vals = Array.isArray(val) ? val : [val];
        asyncListValues = vals;
      }
      return {
        valueSrc: "value",
        value: val,
        valueType: widgetConfig.type,
        asyncListValues
      };
    };
    var convertField = function convertField2(op, vals, conv, config2, not, meta) {
      var parentField = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      var fieldSeparator = config2.settings.fieldSeparator;
      if (conv.varKeys.includes(op) && typeof vals[0] == "string") {
        var field = vals[0];
        if (parentField)
          field = [parentField, field].join(fieldSeparator);
        field = normalizeField(config2, field);
        var fieldConfig = getFieldConfig$8(config2, field);
        if (!fieldConfig) {
          meta.errors.push("No config for field ".concat(field));
          return void 0;
        }
        return {
          valueSrc: "field",
          value: field,
          valueType: fieldConfig.type
        };
      }
      return void 0;
    };
    var convertFunc = function convertFunc2(op, vals, conv, config2, not, fieldConfig, meta) {
      var parentField = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : null;
      if (!op)
        return void 0;
      var func, argsArr, funcKey;
      var jsonLogicIsMethod = op == "method";
      if (jsonLogicIsMethod) {
        var obj, opts;
        var _vals = _toArray(vals);
        obj = _vals[0];
        func = _vals[1];
        opts = _vals.slice(2);
        argsArr = [obj].concat(_toConsumableArray(opts));
      } else {
        func = op;
        argsArr = vals;
      }
      var fk = (jsonLogicIsMethod ? "#" : "") + func;
      var funcKeys = (conv.funcs[fk] || []).filter(function(k) {
        return fieldConfig ? config2.funcs[k].returnType == fieldConfig.type : true;
      });
      if (funcKeys.length) {
        funcKey = funcKeys[0];
      } else {
        var v = _defineProperty$1({}, op, vals);
        for (var _i = 0, _Object$entries = Object.entries(config2.funcs || {}); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), f = _Object$entries$_i[0], fc = _Object$entries$_i[1];
          if (fc.jsonLogicImport && fc.returnType == fieldConfig.type) {
            var parsed = void 0;
            try {
              parsed = fc.jsonLogicImport(v);
            } catch (_e) {
            }
            if (parsed) {
              funcKey = f;
              argsArr = parsed;
            }
          }
        }
      }
      if (!funcKey)
        return void 0;
      if (funcKey) {
        var funcConfig = config2.funcs[funcKey];
        var argKeys = Object.keys(funcConfig.args || {});
        var args = argsArr.reduce(function(acc, val, ind) {
          var argKey = argKeys[ind];
          var argConfig = funcConfig.args[argKey];
          var argVal = convertFromLogic(val, conv, config2, "val", meta, false, argConfig, null, parentField);
          if (argVal === void 0) {
            argVal = argConfig.defaultValue;
            if (argVal === void 0) {
              meta.errors.push("No value for arg ".concat(argKey, " of func ").concat(funcKey));
              return void 0;
            }
          }
          return _objectSpread$h(_objectSpread$h({}, acc), {}, _defineProperty$1({}, argKey, argVal));
        }, {});
        return {
          valueSrc: "func",
          value: {
            func: funcKey,
            args
          },
          valueType: funcConfig.returnType
        };
      }
      return void 0;
    };
    var convertConj = function convertConj2(op, vals, conv, config2, not, meta) {
      var parentField = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      var conjKey = conv.conjunctions[op];
      var fieldSeparator = config2.settings.fieldSeparator;
      var parentFieldConfig = parentField ? getFieldConfig$8(config2, parentField) : null;
      (parentFieldConfig === null || parentFieldConfig === void 0 ? void 0 : parentFieldConfig.type) == "!group";
      if (conjKey) {
        var type = "group";
        var children = vals.map(function(v) {
          return convertFromLogic(v, conv, config2, "rule", meta, false, null, null, parentField);
        }).filter(function(r) {
          return r !== void 0;
        }).reduce(function(acc, r) {
          return _objectSpread$h(_objectSpread$h({}, acc), {}, _defineProperty$1({}, r.id, r));
        }, {});
        var complexFields = Object.values(children).map(function(v) {
          var _v$properties;
          return v === null || v === void 0 ? void 0 : (_v$properties = v.properties) === null || _v$properties === void 0 ? void 0 : _v$properties.field;
        }).filter(function(f) {
          return f && f.includes(fieldSeparator);
        });
        var complexFieldsGroupAncestors = Object.fromEntries(arrayUniq(complexFields).map(function(f) {
          var parts = f.split(fieldSeparator);
          var ancs = Object.fromEntries(parts.slice(0, -1).map(function(f2, i, parts2) {
            return [].concat(_toConsumableArray(parts2.slice(0, i)), [f2]);
          }).map(function(fp) {
            return [fp.join(fieldSeparator), getFieldConfig$8(config2, fp)];
          }).filter(function(_ref3) {
            var _ref4 = _slicedToArray(_ref3, 2);
            _ref4[0];
            var fc = _ref4[1];
            return fc.type == "!group";
          }));
          return [f, Object.keys(ancs)];
        }));
        Object.values(children).map(function(v) {
          var _v$properties2;
          return v === null || v === void 0 ? void 0 : (_v$properties2 = v.properties) === null || _v$properties2 === void 0 ? void 0 : _v$properties2.field;
        }).map(function(f) {
          return complexFieldsGroupAncestors[f];
        }).filter(function(ancs) {
          return ancs && ancs.length;
        });
        var usedRuleGroups = arrayUniq(Object.values(complexFieldsGroupAncestors).flat());
        topLevelFieldsFilter(usedRuleGroups);
        var properties = {
          conjunction: conjKey,
          not
        };
        var id = uuid$2();
        var children1 = {};
        var groupToId = {};
        Object.entries(children).map(function(_ref5) {
          var _ref6 = _slicedToArray(_ref5, 2), k = _ref6[0], v = _ref6[1];
          if (v.type == "group" || v.type == "rule_group") {
            children1[k] = v;
          } else {
            var _v$properties3;
            var field = v === null || v === void 0 ? void 0 : (_v$properties3 = v.properties) === null || _v$properties3 === void 0 ? void 0 : _v$properties3.field;
            var groupAncestors = complexFieldsGroupAncestors[field];
            var groupField = groupAncestors === null || groupAncestors === void 0 ? void 0 : groupAncestors.at(-1);
            if (!groupField) {
              children1[k] = v;
            } else {
              var ch = children1;
              var parentFieldParts = parentField ? parentField.split(fieldSeparator) : [];
              var isInParent = shallowEqual$2(parentFieldParts, groupField.split(fieldSeparator).slice(0, parentFieldParts.length));
              if (!isInParent)
                parentFieldParts = [];
              var traverseGroupFields = groupField.split(fieldSeparator).slice(parentFieldParts.length).map(function(f, i, parts) {
                return [].concat(_toConsumableArray(parentFieldParts), _toConsumableArray(parts.slice(0, i)), [f]).join(fieldSeparator);
              }).map(function(f) {
                return normalizeField(config2, f);
              }).map(function(f) {
                return {
                  f,
                  fc: getFieldConfig$8(config2, f) || {}
                };
              }).filter(function(_ref7) {
                var fc = _ref7.fc;
                return fc.type != "!struct";
              });
              traverseGroupFields.map(function(_ref8, i) {
                var gf = _ref8.f, gfc = _ref8.fc;
                var groupId = groupToId[gf];
                if (!groupId) {
                  groupId = uuid$2();
                  groupToId[gf] = groupId;
                  ch[groupId] = {
                    type: "rule_group",
                    id: groupId,
                    children1: {},
                    properties: {
                      conjunction: conjKey,
                      not: false,
                      field: gf,
                      mode: gfc.mode
                    }
                  };
                }
                ch = ch[groupId].children1;
              });
              ch[k] = v;
            }
          }
        });
        return {
          type,
          id,
          children1,
          properties
        };
      }
      return void 0;
    };
    var topLevelFieldsFilter = function topLevelFieldsFilter2(fields2) {
      var arr = _toConsumableArray(fields2).sort(function(a, b) {
        return a.length - b.length;
      });
      for (var i = 0; i < arr.length; i++) {
        for (var j = i + 1; j < arr.length; j++) {
          if (arr[j].indexOf(arr[i]) == 0) {
            arr.splice(j, 1);
            j--;
          }
        }
      }
      return arr;
    };
    var wrapInDefaultConjRuleGroup = function wrapInDefaultConjRuleGroup2(rule2, parentField, parentFieldConfig, config2, conj) {
      if (!rule2)
        return void 0;
      return {
        type: "rule_group",
        id: uuid$2(),
        children1: _defineProperty$1({}, rule2.id, rule2),
        properties: {
          conjunction: conj || defaultGroupConjunction$1(config2, parentFieldConfig),
          not: false,
          field: parentField
        }
      };
    };
    var wrapInDefaultConj$1 = function wrapInDefaultConj2(rule2, config2) {
      var not = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      return {
        type: "group",
        id: uuid$2(),
        children1: _defineProperty$1({}, rule2.id, rule2),
        properties: {
          conjunction: defaultConjunction(config2),
          not
        }
      };
    };
    var parseRule = function parseRule2(op, arity, vals, parentField, conv, config2, meta) {
      var errors = [];
      var res = _parseRule(op, arity, vals, parentField, conv, config2, errors, false) || _parseRule(op, arity, vals, parentField, conv, config2, errors, true);
      if (!res) {
        meta.errors.push(errors.join("; ") || "Unknown op ".concat(op, "/").concat(arity));
        return void 0;
      }
      return res;
    };
    var _parseRule = function _parseRule2(op, arity, vals, parentField, conv, config2, errors, isRevArgs) {
      var isAllOrSomeInForMultiselect = (op == "all" || op == "some") && isJsonLogic(vals[1]) && Object.keys(vals[1])[0] == "in";
      var isGroup0 = !isAllOrSomeInForMultiselect && config2.settings.groupOperators.includes(op);
      var eqOps = ["==", "!="];
      var cardinality = isGroup0 ? 0 : arity - 1;
      if (isGroup0)
        cardinality = 0;
      else if (eqOps.includes(op) && cardinality == 1 && vals[1] === null)
        cardinality = 0;
      var opk = op + "/" + cardinality;
      var fieldSeparator = config2.settings.fieldSeparator;
      var opKeys = conv.operators[(isRevArgs ? "#" : "") + opk];
      if (!opKeys)
        return;
      var jlField, args = [];
      var rangeOps = ["<", "<=", ">", ">="];
      if (rangeOps.includes(op) && arity == 3) {
        jlField = vals[1];
        args = [vals[0], vals[2]];
      } else if (isRevArgs) {
        jlField = vals[1];
        args = [vals[0]];
      } else {
        var _vals2 = _toArray(vals);
        jlField = _vals2[0];
        args = _vals2.slice(1);
      }
      if (!isJsonLogic(jlField)) {
        errors.push("Incorrect operands for ".concat(op, ": ").concat(JSON.stringify(vals)));
        return;
      }
      var k = Object.keys(jlField)[0];
      var v = Object.values(jlField)[0];
      var field, having;
      if (conv.varKeys.includes(k) && typeof v == "string") {
        field = v;
      }
      if (isGroup0) {
        having = args[0];
        args = [];
      }
      if (k == "reduce" && Array.isArray(v) && v.length == 3) {
        var _v2 = v, _v3 = _slicedToArray(_v2, 3), filter = _v3[0], acc = _v3[1], init = _v3[2];
        if (isJsonLogic(filter) && init == 0 && isJsonLogic(acc) && Array.isArray(acc["+"]) && acc["+"][0] == 1 && isJsonLogic(acc["+"][1]) && acc["+"][1]["var"] == "accumulator") {
          k = Object.keys(filter)[0];
          v = Object.values(filter)[0];
          if (k == "filter") {
            var _v4 = v, _v5 = _slicedToArray(_v4, 2), group2 = _v5[0], _filter = _v5[1];
            if (isJsonLogic(group2)) {
              k = Object.keys(group2)[0];
              v = Object.values(group2)[0];
              if (conv.varKeys.includes(k) && typeof v == "string") {
                field = v;
                having = _filter;
              }
            }
          } else if (conv.varKeys.includes(k) && typeof v == "string") {
            field = v;
          }
        }
      }
      if (!field) {
        errors.push("Unknown field ".concat(JSON.stringify(jlField)));
        return;
      }
      if (parentField)
        field = [parentField, field].join(fieldSeparator);
      field = normalizeField(config2, field);
      var fieldConfig = getFieldConfig$8(config2, field);
      if (!fieldConfig) {
        errors.push("No config for field ".concat(field));
        return;
      }
      var opKey = opKeys[0];
      if (opKeys.length > 1 && fieldConfig && fieldConfig.operators) {
        opKeys = opKeys.filter(function(k2) {
          return fieldConfig.operators.includes(k2);
        });
        if (opKeys.length == 0) {
          errors.push("No corresponding ops for field ".concat(field));
          return;
        }
        opKey = opKeys[0];
      }
      return {
        field,
        fieldConfig,
        opKey,
        args,
        having
      };
    };
    var convertOp = function convertOp2(op, vals, conv, config2, not, meta) {
      var parentField = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      if (!op)
        return void 0;
      var arity = vals.length;
      if ((op == "all" || op == "some") && isJsonLogic(vals[1])) {
        var op2 = Object.keys(vals[1])[0];
        if (op2 == "in") {
          vals = [vals[0], vals[1][op2][1]];
          op = op + "-" + op2;
        }
      }
      var parseRes = parseRule(op, arity, vals, parentField, conv, config2, meta);
      if (!parseRes)
        return void 0;
      var field = parseRes.field, fieldConfig = parseRes.fieldConfig, opKey = parseRes.opKey, args = parseRes.args, having = parseRes.having;
      var opConfig = config2.operators[opKey];
      fieldConfig.showNot !== void 0 ? fieldConfig.showNot : config2.settings.showNot;
      var canRev = true;
      var conj;
      var havingVals;
      var havingNot = false;
      if (fieldConfig.type == "!group" && having) {
        conj = Object.keys(having)[0];
        havingVals = having[conj];
        if (!Array.isArray(havingVals))
          havingVals = [havingVals];
        var isEmptyOp = conj == "!" && havingVals.length == 1 && havingVals[0] && isJsonLogic(havingVals[0]) && conv.varKeys.includes(Object.keys(havingVals[0])[0]);
        if (conj == "!" && !isEmptyOp) {
          havingNot = true;
          having = having["!"];
          conj = Object.keys(having)[0];
          havingVals = having[conj];
          if (!Array.isArray(havingVals))
            havingVals = [havingVals];
        }
      }
      if (not && canRev && opConfig.reversedOp) {
        not = false;
        opKey = opConfig.reversedOp;
        opConfig = config2.operators[opKey];
      }
      var widget = getWidgetForFieldOp$3(config2, field, opKey);
      var convertedArgs = args.map(function(v) {
        return convertFromLogic(v, conv, config2, "val", meta, false, fieldConfig, widget, parentField);
      });
      if (convertedArgs.filter(function(v) {
        return v === void 0;
      }).length) {
        return void 0;
      }
      var res;
      if (fieldConfig.type == "!group" && having) {
        if (conv.conjunctions[conj] !== void 0) {
          res = convertConj(conj, havingVals, conv, config2, havingNot, meta, field, true);
          havingNot = false;
        } else {
          var rule2 = convertOp2(conj, havingVals, conv, config2, havingNot, meta, field);
          havingNot = false;
          res = wrapInDefaultConjRuleGroup(rule2, field, fieldConfig, config2, conv.conjunctions["and"]);
        }
        if (!res)
          return void 0;
        res.type = "rule_group";
        Object.assign(res.properties, {
          field,
          mode: fieldConfig.mode,
          operator: opKey
        });
        if (fieldConfig.mode == "array") {
          Object.assign(res.properties, {
            value: convertedArgs.map(function(v) {
              return v.value;
            }),
            valueSrc: convertedArgs.map(function(v) {
              return v.valueSrc;
            }),
            valueType: convertedArgs.map(function(v) {
              return v.valueType;
            })
          });
        }
        if (not) {
          res = wrapInDefaultConj$1(res, config2, not);
        }
      } else if (fieldConfig.type == "!group" && !having) {
        res = {
          type: "rule_group",
          id: uuid$2(),
          children1: {},
          properties: {
            conjunction: defaultGroupConjunction$1(config2, fieldConfig),
            not,
            mode: fieldConfig.mode,
            field,
            operator: opKey
          }
        };
        if (fieldConfig.mode == "array") {
          Object.assign(res.properties, {
            value: convertedArgs.map(function(v) {
              return v.value;
            }),
            valueSrc: convertedArgs.map(function(v) {
              return v.valueSrc;
            }),
            valueType: convertedArgs.map(function(v) {
              return v.valueType;
            })
          });
        }
      } else {
        var asyncListValuesArr = convertedArgs.map(function(v) {
          return v.asyncListValues;
        }).filter(function(v) {
          return v != void 0;
        });
        var asyncListValues = asyncListValuesArr.length ? asyncListValuesArr[0] : void 0;
        res = {
          type: "rule",
          id: uuid$2(),
          properties: {
            field,
            operator: opKey,
            value: convertedArgs.map(function(v) {
              return v.value;
            }),
            valueSrc: convertedArgs.map(function(v) {
              return v.valueSrc;
            }),
            valueType: convertedArgs.map(function(v) {
              return v.valueType;
            }),
            asyncListValues
          }
        };
        if (not) {
          res = wrapInDefaultConj$1(res, config2, not);
        }
      }
      return res;
    };
    var spel2js = { exports: {} };
    (function(module2, exports2) {
      (function webpackUniversalModuleDefinition(root2, factory) {
        module2.exports = factory();
      })(commonjsGlobal, function() {
        return function(modules) {
          var installedModules = {};
          function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
              return installedModules[moduleId].exports;
            }
            var module3 = installedModules[moduleId] = {
              i: moduleId,
              l: false,
              exports: {}
            };
            modules[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
            module3.l = true;
            return module3.exports;
          }
          __webpack_require__.m = modules;
          __webpack_require__.c = installedModules;
          __webpack_require__.d = function(exports3, name, getter) {
            if (!__webpack_require__.o(exports3, name)) {
              Object.defineProperty(exports3, name, {
                configurable: false,
                enumerable: true,
                get: getter
              });
            }
          };
          __webpack_require__.n = function(module3) {
            var getter = module3 && module3.__esModule ? function getDefault() {
              return module3["default"];
            } : function getModuleExports() {
              return module3;
            };
            __webpack_require__.d(getter, "a", getter);
            return getter;
          };
          __webpack_require__.o = function(object, property2) {
            return Object.prototype.hasOwnProperty.call(object, property2);
          };
          __webpack_require__.p = "";
          return __webpack_require__(__webpack_require__.s = 3);
        }([
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            function createSpelNode(nodeType, position) {
              var node = {}, type = nodeType || "Abstract", children = [], parent2 = null, activeContext;
              node._type = type;
              node.getType = function() {
                return type;
              };
              node.setType = function(nodeType2) {
                type = nodeType2;
              };
              node.getChildren = function() {
                return children;
              };
              node.addChild = function(childNode) {
                if (!childNode) {
                  return;
                }
                if (!childNode.setParent) {
                  throw {
                    name: "Error",
                    message: "Trying to add a child which is not a node: " + JSON.stringify(childNode)
                  };
                }
                childNode.setParent(node);
                children.push(childNode);
              };
              node.getParent = function() {
                return parent2;
              };
              node.setParent = function(parentNode) {
                parent2 = parentNode;
              };
              node.getContext = function(state) {
                return activeContext || state.activeContext.peek();
              };
              node.setContext = function(nodeContext) {
                activeContext = nodeContext;
              };
              node.getStartPosition = function() {
                return position >> 16;
              };
              node.getEndPosition = function() {
                return position & 65535;
              };
              node.getValue = function() {
                throw {
                  name: "MethodNotImplementedException",
                  message: "SpelNode#getValue() must be overridden."
                };
              };
              node.toString = function() {
                var s = "Kind: " + node.getType();
                s += ", Children: [";
                for (var i = 0, l = node.getChildren().length; i < l; i += 1) {
                  s += "{" + node.getChildren()[i] + "}, ";
                }
                s += "]";
                return s;
              };
              if (position === 0) {
                throw {
                  name: "Error",
                  message: "Position cannot be 0"
                };
              }
              for (var _len = arguments.length, operands = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                operands[_key - 2] = arguments[_key];
              }
              if (operands) {
                operands.forEach(function(operand) {
                  node.addChild(operand);
                });
              }
              return node;
            }
            exports3.SpelNode = {
              create: createSpelNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.Stack = Stack2;
            function Stack2(startingElements) {
              this.elements = startingElements || [];
            }
            Stack2.prototype.push = function(el) {
              this.elements.push(el);
              return el;
            };
            Stack2.prototype.pop = function() {
              return this.elements.pop();
            };
            Stack2.prototype.peek = function() {
              return this.elements[this.elements.length - 1];
            };
            Stack2.prototype.empty = function() {
              return this.elements.length > 0;
            };
            Stack2.prototype.search = function(el) {
              return this.elements.length - this.elements.indexOf(el);
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            var types2 = {
              LITERAL_INT: 1,
              LITERAL_LONG: 2,
              LITERAL_HEXINT: 3,
              LITERAL_HEXLONG: 4,
              LITERAL_STRING: 5,
              LITERAL_REAL: 6,
              LITERAL_REAL_FLOAT: 7,
              LPAREN: "(",
              RPAREN: ")",
              COMMA: ",",
              IDENTIFIER: 0,
              COLON: ":",
              HASH: "#",
              RSQUARE: "]",
              LSQUARE: "[",
              LCURLY: "{",
              RCURLY: "}",
              DOT: ".",
              PLUS: "+",
              STAR: "*",
              MINUS: "-",
              SELECT_FIRST: "^[",
              SELECT_LAST: "$[",
              QMARK: "?",
              PROJECT: "![",
              DIV: "/",
              GE: ">=",
              GT: ">",
              LE: "<=",
              LT: "<",
              EQ: "==",
              NE: "!=",
              MOD: "%",
              NOT: "!",
              ASSIGN: "=",
              INSTANCEOF: "instanceof",
              MATCHES: "matches",
              BETWEEN: "between",
              SELECT: "?[",
              POWER: "^",
              ELVIS: "?:",
              SAFE_NAVI: "?.",
              BEAN_REF: "@",
              SYMBOLIC_OR: "||",
              SYMBOLIC_AND: "&&",
              INC: "++",
              DEC: "--"
            };
            function TokenKind(type) {
              this.type = type;
              this.tokenChars = types2[type];
              this._hasPayload = typeof types2[type] !== "string";
              if (typeof types2[type] === "number") {
                this._ordinal = types2[type];
              }
            }
            for (var t in types2) {
              if (types2.hasOwnProperty(t)) {
                TokenKind[t] = new TokenKind(t);
              }
            }
            TokenKind.prototype.toString = function() {
              return this.type + (this.tokenChars.length !== 0 ? "(" + this.tokenChars + ")" : "");
            };
            TokenKind.prototype.getLength = function() {
              return this.tokenChars.length;
            };
            TokenKind.prototype.hasPayload = function() {
              return this._hasPayload;
            };
            TokenKind.prototype.valueOf = function(id) {
              for (var t2 in types2) {
                if (types2.hasOwnProperty(t2) && types2[t2] === id) {
                  return TokenKind[t2];
                }
              }
            };
            TokenKind.prototype.ordinal = function() {
              return this._ordinal;
            };
            exports3.TokenKind = TokenKind;
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.StandardContext = exports3.SpelExpressionEvaluator = void 0;
            var _SpelExpressionEvaluator = __webpack_require__(4);
            var _StandardContext = __webpack_require__(50);
            exports3.SpelExpressionEvaluator = _SpelExpressionEvaluator.SpelExpressionEvaluator;
            exports3.StandardContext = _StandardContext.StandardContext;
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.SpelExpressionEvaluator = void 0;
            var _SpelExpressionParser = __webpack_require__(5);
            var _Stack2 = __webpack_require__(1);
            var spelExpressionEvaluator = {};
            function evalCompiled(compiledExpression, context2, locals) {
              var activeContext = new _Stack2.Stack(), state;
              if (!context2) {
                context2 = {};
              }
              activeContext.push(context2);
              state = {
                rootContext: context2,
                activeContext,
                locals
              };
              return compiledExpression.getValue(state);
            }
            spelExpressionEvaluator.compile = function(expression) {
              var compiledExpression = (0, _SpelExpressionParser.SpelExpressionParser)().parse(expression);
              return {
                eval: function _eval(context2, locals) {
                  return evalCompiled(compiledExpression, context2, locals);
                },
                _compiledExpression: compiledExpression
              };
            };
            spelExpressionEvaluator.eval = function(expression, context2, locals) {
              return spelExpressionEvaluator.compile(expression).eval(context2, locals);
            };
            exports3.SpelExpressionEvaluator = spelExpressionEvaluator;
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.SpelExpressionParser = void 0;
            var _TokenKind = __webpack_require__(2);
            var _Tokenizer = __webpack_require__(6);
            var _BooleanLiteral = __webpack_require__(8);
            var _NumberLiteral = __webpack_require__(9);
            var _StringLiteral = __webpack_require__(10);
            var _NullLiteral = __webpack_require__(11);
            var _FunctionReference = __webpack_require__(12);
            var _MethodReference = __webpack_require__(13);
            var _PropertyReference = __webpack_require__(14);
            var _VariableReference = __webpack_require__(15);
            var _CompoundExpression = __webpack_require__(16);
            var _Indexer = __webpack_require__(17);
            var _Assign = __webpack_require__(18);
            var _OpEQ = __webpack_require__(19);
            var _OpNE = __webpack_require__(20);
            var _OpGE = __webpack_require__(21);
            var _OpGT = __webpack_require__(22);
            var _OpLE = __webpack_require__(23);
            var _OpLT = __webpack_require__(24);
            var _OpPlus = __webpack_require__(25);
            var _OpMinus = __webpack_require__(26);
            var _OpMultiply = __webpack_require__(27);
            var _OpDivide = __webpack_require__(28);
            var _OpModulus = __webpack_require__(29);
            var _OpPower = __webpack_require__(30);
            var _OpInc = __webpack_require__(31);
            var _OpDec = __webpack_require__(32);
            var _OpNot = __webpack_require__(33);
            var _OpAnd = __webpack_require__(34);
            var _OpOr = __webpack_require__(35);
            var _OpMatches = __webpack_require__(36);
            var _Ternary = __webpack_require__(37);
            var _Elvis = __webpack_require__(38);
            var _InlineList = __webpack_require__(39);
            var _InlineMap = __webpack_require__(40);
            var _Selection = __webpack_require__(41);
            var _Projection = __webpack_require__(42);
            var _OpInstanceof = __webpack_require__(43);
            var _OpBetween = __webpack_require__(44);
            var _TypeReference = __webpack_require__(45);
            var _BeanReference = __webpack_require__(46);
            var _Identifier = __webpack_require__(47);
            var _QualifiedIdentifier = __webpack_require__(48);
            var _ConstructorReference = __webpack_require__(49);
            exports3.SpelExpressionParser = function SpelExpressionParser() {
              var VALID_QUALIFIED_ID_PATTERN = new RegExp("[\\p{L}\\p{N}_$]+");
              var constructedNodes = [];
              var expressionString;
              var tokenStream;
              var tokenStreamLength;
              var tokenStreamPointer;
              function setConfiguration(config2) {
              }
              function parse(expression, context2) {
                try {
                  expressionString = expression;
                  tokenStream = _Tokenizer.Tokenizer.tokenize(expression);
                  tokenStreamLength = tokenStream.length;
                  tokenStreamPointer = 0;
                  constructedNodes = [];
                  var ast = eatExpression();
                  if (moreTokens()) {
                    raiseInternalException(peekToken().startPos, "MORE_INPUT", nextToken().toString());
                  }
                  return ast;
                } catch (e) {
                  throw e.message;
                }
              }
              function eatExpression() {
                var expr = eatLogicalOrExpression();
                if (moreTokens()) {
                  var token2 = peekToken();
                  if (token2.getKind() === _TokenKind.TokenKind.ASSIGN) {
                    if (expr === null) {
                      expr = _NullLiteral.NullLiteral.create(toPosBounds(token2.startPos - 1, token2.endPos - 1));
                    }
                    nextToken();
                    var assignedValue = eatLogicalOrExpression();
                    return _Assign.Assign.create(toPosToken(token2), expr, assignedValue);
                  }
                  if (token2.getKind() === _TokenKind.TokenKind.ELVIS) {
                    if (expr === null) {
                      expr = _NullLiteral.NullLiteral.create(toPosBounds(token2.startPos - 1, token2.endPos - 2));
                    }
                    nextToken();
                    var valueIfNull = eatExpression();
                    if (valueIfNull === null) {
                      valueIfNull = _NullLiteral.NullLiteral.create(toPosBounds(token2.startPos + 1, token2.endPos + 1));
                    }
                    return _Elvis.Elvis.create(toPosToken(token2), expr, valueIfNull);
                  }
                  if (token2.getKind() === _TokenKind.TokenKind.QMARK) {
                    if (expr === null) {
                      expr = _NullLiteral.NullLiteral.create(toPosBounds(token2.startPos - 1, token2.endPos - 1));
                    }
                    nextToken();
                    var ifTrueExprValue = eatExpression();
                    eatToken(_TokenKind.TokenKind.COLON);
                    var ifFalseExprValue = eatExpression();
                    return _Ternary.Ternary.create(toPosToken(token2), expr, ifTrueExprValue, ifFalseExprValue);
                  }
                }
                return expr;
              }
              function eatLogicalOrExpression() {
                var expr = eatLogicalAndExpression();
                while (peekIdentifierToken("or") || peekTokenOne(_TokenKind.TokenKind.SYMBOLIC_OR)) {
                  var token2 = nextToken();
                  var rhExpr = eatLogicalAndExpression();
                  checkOperands(token2, expr, rhExpr);
                  expr = _OpOr.OpOr.create(toPosToken(token2), expr, rhExpr);
                }
                return expr;
              }
              function eatLogicalAndExpression() {
                var expr = eatRelationalExpression();
                while (peekIdentifierToken("and") || peekTokenOne(_TokenKind.TokenKind.SYMBOLIC_AND)) {
                  var token2 = nextToken();
                  var rhExpr = eatRelationalExpression();
                  checkOperands(token2, expr, rhExpr);
                  expr = _OpAnd.OpAnd.create(toPosToken(token2), expr, rhExpr);
                }
                return expr;
              }
              function eatRelationalExpression() {
                var expr = eatSumExpression();
                var relationalOperatorToken = maybeEatRelationalOperator();
                if (relationalOperatorToken !== null) {
                  var token2 = nextToken();
                  var rhExpr = eatSumExpression();
                  checkOperands(token2, expr, rhExpr);
                  var tk = relationalOperatorToken.kind;
                  if (relationalOperatorToken.isNumericRelationalOperator()) {
                    var pos = toPosToken(token2);
                    if (tk === _TokenKind.TokenKind.GT) {
                      return _OpGT.OpGT.create(pos, expr, rhExpr);
                    }
                    if (tk === _TokenKind.TokenKind.LT) {
                      return _OpLT.OpLT.create(pos, expr, rhExpr);
                    }
                    if (tk === _TokenKind.TokenKind.LE) {
                      return _OpLE.OpLE.create(pos, expr, rhExpr);
                    }
                    if (tk === _TokenKind.TokenKind.GE) {
                      return _OpGE.OpGE.create(pos, expr, rhExpr);
                    }
                    if (tk === _TokenKind.TokenKind.EQ) {
                      return _OpEQ.OpEQ.create(pos, expr, rhExpr);
                    }
                    return _OpNE.OpNE.create(pos, expr, rhExpr);
                  }
                  if (tk === _TokenKind.TokenKind.INSTANCEOF) {
                    return _OpInstanceof.OpInstanceof.create(toPosToken(token2), expr, rhExpr);
                  }
                  if (tk === _TokenKind.TokenKind.MATCHES) {
                    return _OpMatches.OpMatches.create(toPosToken(token2), expr, rhExpr);
                  }
                  return _OpBetween.OpBetween.create(toPosToken(token2), expr, rhExpr);
                }
                return expr;
              }
              function eatSumExpression() {
                var expr = eatProductExpression();
                while (peekTokenAny(_TokenKind.TokenKind.PLUS, _TokenKind.TokenKind.MINUS, _TokenKind.TokenKind.INC)) {
                  var token2 = nextToken();
                  var rhExpr = eatProductExpression();
                  checkRightOperand(token2, rhExpr);
                  if (token2.getKind() === _TokenKind.TokenKind.PLUS) {
                    expr = _OpPlus.OpPlus.create(toPosToken(token2), expr, rhExpr);
                  } else if (token2.getKind() === _TokenKind.TokenKind.MINUS) {
                    expr = _OpMinus.OpMinus.create(toPosToken(token2), expr, rhExpr);
                  }
                }
                return expr;
              }
              function eatProductExpression() {
                var expr = eatPowerIncDecExpression();
                while (peekTokenAny(_TokenKind.TokenKind.STAR, _TokenKind.TokenKind.DIV, _TokenKind.TokenKind.MOD)) {
                  var token2 = nextToken();
                  var rhExpr = eatPowerIncDecExpression();
                  checkOperands(token2, expr, rhExpr);
                  if (token2.getKind() === _TokenKind.TokenKind.STAR) {
                    expr = _OpMultiply.OpMultiply.create(toPosToken(token2), expr, rhExpr);
                  } else if (token2.getKind() === _TokenKind.TokenKind.DIV) {
                    expr = _OpDivide.OpDivide.create(toPosToken(token2), expr, rhExpr);
                  } else {
                    expr = _OpModulus.OpModulus.create(toPosToken(token2), expr, rhExpr);
                  }
                }
                return expr;
              }
              function eatPowerIncDecExpression() {
                var expr = eatUnaryExpression(), token2;
                if (peekTokenOne(_TokenKind.TokenKind.POWER)) {
                  token2 = nextToken();
                  var rhExpr = eatUnaryExpression();
                  checkRightOperand(token2, rhExpr);
                  return _OpPower.OpPower.create(toPosToken(token2), expr, rhExpr);
                }
                if (expr !== null && peekTokenAny(_TokenKind.TokenKind.INC, _TokenKind.TokenKind.DEC)) {
                  token2 = nextToken();
                  if (token2.getKind() === _TokenKind.TokenKind.INC) {
                    return _OpInc.OpInc.create(toPosToken(token2), true, expr);
                  }
                  return _OpDec.OpDec.create(toPosToken(token2), true, expr);
                }
                return expr;
              }
              function eatUnaryExpression() {
                var token2, expr;
                if (peekTokenAny(_TokenKind.TokenKind.PLUS, _TokenKind.TokenKind.MINUS, _TokenKind.TokenKind.NOT)) {
                  token2 = nextToken();
                  expr = eatUnaryExpression();
                  if (token2.getKind() === _TokenKind.TokenKind.NOT) {
                    return _OpNot.OpNot.create(toPosToken(token2), expr);
                  }
                  if (token2.getKind() === _TokenKind.TokenKind.PLUS) {
                    return _OpPlus.OpPlus.create(toPosToken(token2), expr);
                  }
                  return _OpMinus.OpMinus.create(toPosToken(token2), expr);
                }
                if (peekTokenAny(_TokenKind.TokenKind.INC, _TokenKind.TokenKind.DEC)) {
                  token2 = nextToken();
                  expr = eatUnaryExpression();
                  if (token2.getKind() === _TokenKind.TokenKind.INC) {
                    return _OpInc.OpInc.create(toPosToken(token2), false, expr);
                  }
                  return _OpDec.OpDec.create(toPosToken(token2), false, expr);
                }
                return eatPrimaryExpression();
              }
              function eatPrimaryExpression() {
                var nodes = [];
                var start = eatStartNode();
                nodes.push(start);
                while (maybeEatNode()) {
                  nodes.push(pop());
                }
                if (nodes.length === 1) {
                  return nodes[0];
                }
                return _CompoundExpression.CompoundExpression.create(toPosBounds(start.getStartPosition(), nodes[nodes.length - 1].getEndPosition()), nodes);
              }
              function maybeEatNode() {
                var expr = null;
                if (peekTokenAny(_TokenKind.TokenKind.DOT, _TokenKind.TokenKind.SAFE_NAVI)) {
                  expr = eatDottedNode();
                } else {
                  expr = maybeEatNonDottedNode();
                }
                if (expr === null) {
                  return false;
                } else {
                  push(expr);
                  return true;
                }
              }
              function maybeEatNonDottedNode() {
                if (peekTokenOne(_TokenKind.TokenKind.LSQUARE)) {
                  if (maybeEatIndexer()) {
                    return pop();
                  }
                }
                return null;
              }
              function eatDottedNode() {
                var token2 = nextToken();
                var nullSafeNavigation = token2.getKind() === _TokenKind.TokenKind.SAFE_NAVI;
                if (maybeEatMethodOrProperty(nullSafeNavigation) || maybeEatFunctionOrVar() || maybeEatProjection(nullSafeNavigation) || maybeEatSelection(nullSafeNavigation)) {
                  return pop();
                }
                if (peekToken() === null) {
                  raiseInternalException(token2.startPos, "OOD");
                } else {
                  raiseInternalException(token2.startPos, "UNEXPECTED_DATA_AFTER_DOT", toString2(peekToken()));
                }
                return null;
              }
              function maybeEatFunctionOrVar() {
                if (!peekTokenOne(_TokenKind.TokenKind.HASH)) {
                  return false;
                }
                var token2 = nextToken();
                var functionOrVariableName = eatToken(_TokenKind.TokenKind.IDENTIFIER);
                var args = maybeEatMethodArgs();
                if (args === null) {
                  push(_VariableReference.VariableReference.create(functionOrVariableName.data, toPosBounds(token2.startPos, functionOrVariableName.endPos)));
                  return true;
                }
                push(_FunctionReference.FunctionReference.create(functionOrVariableName.data, toPosBounds(token2.startPos, functionOrVariableName.endPos), args));
                return true;
              }
              function maybeEatMethodArgs() {
                if (!peekTokenOne(_TokenKind.TokenKind.LPAREN)) {
                  return null;
                }
                var args = [];
                consumeArguments(args);
                eatToken(_TokenKind.TokenKind.RPAREN);
                return args;
              }
              function eatConstructorArgs(accumulatedArguments) {
                if (!peekTokenOne(_TokenKind.TokenKind.LPAREN)) {
                  raiseInternalException(toPosToken(peekToken()), "MISSING_CONSTRUCTOR_ARGS");
                }
                consumeArguments(accumulatedArguments);
                eatToken(_TokenKind.TokenKind.RPAREN);
              }
              function consumeArguments(accumulatedArguments) {
                var pos = peekToken().startPos;
                var next;
                do {
                  nextToken();
                  var token2 = peekToken();
                  if (token2 === null) {
                    raiseInternalException(pos, "RUN_OUT_OF_ARGUMENTS");
                  }
                  if (token2.getKind() !== _TokenKind.TokenKind.RPAREN) {
                    accumulatedArguments.push(eatExpression());
                  }
                  next = peekToken();
                } while (next !== null && next.kind === _TokenKind.TokenKind.COMMA);
                if (next === null) {
                  raiseInternalException(pos, "RUN_OUT_OF_ARGUMENTS");
                }
              }
              function eatStartNode() {
                if (maybeEatLiteral()) {
                  return pop();
                } else if (maybeEatParenExpression()) {
                  return pop();
                } else if (maybeEatTypeReference() || maybeEatNullReference() || maybeEatConstructorReference() || maybeEatMethodOrProperty(false) || maybeEatFunctionOrVar()) {
                  return pop();
                } else if (maybeEatBeanReference()) {
                  return pop();
                } else if (maybeEatProjection(false) || maybeEatSelection(false) || maybeEatIndexer()) {
                  return pop();
                } else if (maybeEatInlineListOrMap()) {
                  return pop();
                } else {
                  return null;
                }
              }
              function maybeEatBeanReference() {
                if (peekTokenOne(_TokenKind.TokenKind.BEAN_REF)) {
                  var beanRefToken = nextToken();
                  var beanNameToken = null;
                  var beanName = null;
                  if (peekTokenOne(_TokenKind.TokenKind.IDENTIFIER)) {
                    beanNameToken = eatToken(_TokenKind.TokenKind.IDENTIFIER);
                    beanName = beanNameToken.data;
                  } else if (peekTokenOne(_TokenKind.TokenKind.LITERAL_STRING)) {
                    beanNameToken = eatToken(_TokenKind.TokenKind.LITERAL_STRING);
                    beanName = beanNameToken.stringValue();
                    beanName = beanName.substring(1, beanName.length() - 1);
                  } else {
                    raiseInternalException(beanRefToken.startPos, "INVALID_BEAN_REFERENCE");
                  }
                  var beanReference = _BeanReference.BeanReference.create(toPosToken(beanNameToken), beanName);
                  push(beanReference);
                  return true;
                }
                return false;
              }
              function maybeEatTypeReference() {
                if (peekTokenOne(_TokenKind.TokenKind.IDENTIFIER)) {
                  var typeName = peekToken();
                  if (typeName.stringValue() !== "T") {
                    return false;
                  }
                  var token2 = nextToken();
                  if (peekTokenOne(_TokenKind.TokenKind.RSQUARE)) {
                    push(_PropertyReference.PropertyReference.create(token2.stringValue(), toPosToken(token2)));
                    return true;
                  }
                  eatToken(_TokenKind.TokenKind.LPAREN);
                  var node = eatPossiblyQualifiedId();
                  var dims = 0;
                  while (peekTokenConsumeIfMatched(_TokenKind.TokenKind.LSQUARE, true)) {
                    eatToken(_TokenKind.TokenKind.RSQUARE);
                    dims++;
                  }
                  eatToken(_TokenKind.TokenKind.RPAREN);
                  push(_TypeReference.TypeReference.create(toPosToken(typeName), node, dims));
                  return true;
                }
                return false;
              }
              function maybeEatNullReference() {
                if (peekTokenOne(_TokenKind.TokenKind.IDENTIFIER)) {
                  var nullToken = peekToken();
                  if (nullToken.stringValue().toLowerCase() !== "null") {
                    return false;
                  }
                  nextToken();
                  push(_NullLiteral.NullLiteral.create(toPosToken(nullToken)));
                  return true;
                }
                return false;
              }
              function maybeEatProjection(nullSafeNavigation) {
                var token2 = peekToken();
                if (!peekTokenConsumeIfMatched(_TokenKind.TokenKind.PROJECT, true)) {
                  return false;
                }
                var expr = eatExpression();
                eatToken(_TokenKind.TokenKind.RSQUARE);
                push(_Projection.Projection.create(nullSafeNavigation, toPosToken(token2), expr));
                return true;
              }
              function maybeEatInlineListOrMap() {
                var token2 = peekToken(), listElements = [];
                if (!peekTokenConsumeIfMatched(_TokenKind.TokenKind.LCURLY, true)) {
                  return false;
                }
                var expr = null;
                var closingCurly = peekToken();
                if (peekTokenConsumeIfMatched(_TokenKind.TokenKind.RCURLY, true)) {
                  expr = _InlineList.InlineList.create(toPosBounds(token2.startPos, closingCurly.endPos));
                } else if (peekTokenConsumeIfMatched(_TokenKind.TokenKind.COLON, true)) {
                  closingCurly = eatToken(_TokenKind.TokenKind.RCURLY);
                  expr = _InlineMap.InlineMap.create(toPosBounds(token2.startPos, closingCurly.endPos));
                } else {
                  var firstExpression = eatExpression();
                  if (peekTokenOne(_TokenKind.TokenKind.RCURLY)) {
                    listElements.push(firstExpression);
                    closingCurly = eatToken(_TokenKind.TokenKind.RCURLY);
                    expr = _InlineList.InlineList.create(toPosBounds(token2.startPos, closingCurly.endPos), listElements);
                  } else if (peekTokenConsumeIfMatched(_TokenKind.TokenKind.COMMA, true)) {
                    listElements.push(firstExpression);
                    do {
                      listElements.push(eatExpression());
                    } while (peekTokenConsumeIfMatched(_TokenKind.TokenKind.COMMA, true));
                    closingCurly = eatToken(_TokenKind.TokenKind.RCURLY);
                    expr = _InlineList.InlineList.create(toPosToken(token2.startPos, closingCurly.endPos), listElements);
                  } else if (peekTokenConsumeIfMatched(_TokenKind.TokenKind.COLON, true)) {
                    var mapElements = [];
                    mapElements.push(firstExpression);
                    mapElements.push(eatExpression());
                    while (peekTokenConsumeIfMatched(_TokenKind.TokenKind.COMMA, true)) {
                      mapElements.push(eatExpression());
                      eatToken(_TokenKind.TokenKind.COLON);
                      mapElements.push(eatExpression());
                    }
                    closingCurly = eatToken(_TokenKind.TokenKind.RCURLY);
                    expr = _InlineMap.InlineMap.create(toPosBounds(token2.startPos, closingCurly.endPos), mapElements);
                  } else {
                    raiseInternalException(token2.startPos, "OOD");
                  }
                }
                push(expr);
                return true;
              }
              function maybeEatIndexer() {
                var token2 = peekToken();
                if (!peekTokenConsumeIfMatched(_TokenKind.TokenKind.LSQUARE, true)) {
                  return false;
                }
                var expr = eatExpression();
                eatToken(_TokenKind.TokenKind.RSQUARE);
                push(_Indexer.Indexer.create(toPosToken(token2), expr));
                return true;
              }
              function maybeEatSelection(nullSafeNavigation) {
                var token2 = peekToken();
                if (!peekSelectToken()) {
                  return false;
                }
                nextToken();
                var expr = eatExpression();
                if (expr === null) {
                  raiseInternalException(toPosToken(token2), "MISSING_SELECTION_EXPRESSION");
                }
                eatToken(_TokenKind.TokenKind.RSQUARE);
                if (token2.getKind() === _TokenKind.TokenKind.SELECT_FIRST) {
                  push(_Selection.Selection.create(nullSafeNavigation, _Selection.Selection.FIRST, toPosToken(token2), expr));
                } else if (token2.getKind() === _TokenKind.TokenKind.SELECT_LAST) {
                  push(_Selection.Selection.create(nullSafeNavigation, _Selection.Selection.LAST, toPosToken(token2), expr));
                } else {
                  push(_Selection.Selection.create(nullSafeNavigation, _Selection.Selection.ALL, toPosToken(token2), expr));
                }
                return true;
              }
              function eatPossiblyQualifiedId() {
                var qualifiedIdPieces = [];
                var node = peekToken();
                while (isValidQualifiedId(node)) {
                  nextToken();
                  if (node.kind !== _TokenKind.TokenKind.DOT) {
                    qualifiedIdPieces.push(_Identifier.Identifier.create(node.stringValue(), toPosToken(node)));
                  }
                  node = peekToken();
                }
                if (!qualifiedIdPieces.length) {
                  if (node === null) {
                    raiseInternalException(expressionString.length(), "OOD");
                  }
                  raiseInternalException(node.startPos, "NOT_EXPECTED_TOKEN", "qualified ID", node.getKind().toString().toLowerCase());
                }
                var pos = toPosBounds(qualifiedIdPieces[0].getStartPosition(), qualifiedIdPieces[qualifiedIdPieces.length - 1].getEndPosition());
                return _QualifiedIdentifier.QualifiedIdentifier.create(pos, qualifiedIdPieces);
              }
              function isValidQualifiedId(node) {
                if (node === null || node.kind === _TokenKind.TokenKind.LITERAL_STRING) {
                  return false;
                }
                if (node.kind === _TokenKind.TokenKind.DOT || node.kind === _TokenKind.TokenKind.IDENTIFIER) {
                  return true;
                }
                var value2 = node.stringValue();
                return value2 && value2.length && VALID_QUALIFIED_ID_PATTERN.test(value2);
              }
              function maybeEatMethodOrProperty(nullSafeNavigation) {
                if (peekTokenOne(_TokenKind.TokenKind.IDENTIFIER)) {
                  var methodOrPropertyName = nextToken();
                  var args = maybeEatMethodArgs();
                  if (args === null) {
                    push(_PropertyReference.PropertyReference.create(nullSafeNavigation, methodOrPropertyName.stringValue(), toPosToken(methodOrPropertyName)));
                    return true;
                  }
                  push(_MethodReference.MethodReference.create(nullSafeNavigation, methodOrPropertyName.stringValue(), toPosToken(methodOrPropertyName), args));
                  return true;
                }
                return false;
              }
              function maybeEatConstructorReference() {
                if (peekIdentifierToken("new")) {
                  var newToken = nextToken();
                  if (peekTokenOne(_TokenKind.TokenKind.RSQUARE)) {
                    push(_PropertyReference.PropertyReference.create(newToken.stringValue(), toPosToken(newToken)));
                    return true;
                  }
                  var possiblyQualifiedConstructorName = eatPossiblyQualifiedId();
                  var nodes = [];
                  nodes.push(possiblyQualifiedConstructorName);
                  if (peekTokenOne(_TokenKind.TokenKind.LSQUARE)) {
                    var dimensions = [];
                    while (peekTokenConsumeIfMatched(_TokenKind.TokenKind.LSQUARE, true)) {
                      if (!peekTokenOne(_TokenKind.TokenKind.RSQUARE)) {
                        dimensions.push(eatExpression());
                      } else {
                        dimensions.push(null);
                      }
                      eatToken(_TokenKind.TokenKind.RSQUARE);
                    }
                    if (maybeEatInlineListOrMap()) {
                      nodes.push(pop());
                    }
                    push(_ConstructorReference.ConstructorReference.create(toPosToken(newToken), dimensions, nodes));
                  } else {
                    eatConstructorArgs(nodes);
                    push(_ConstructorReference.ConstructorReference.create(toPosToken(newToken), nodes));
                  }
                  return true;
                }
                return false;
              }
              function push(newNode) {
                constructedNodes.push(newNode);
              }
              function pop() {
                return constructedNodes.pop();
              }
              function maybeEatLiteral() {
                var token2 = peekToken();
                if (token2 === null) {
                  return false;
                }
                if (token2.getKind() === _TokenKind.TokenKind.LITERAL_INT || token2.getKind() === _TokenKind.TokenKind.LITERAL_LONG) {
                  push(_NumberLiteral.NumberLiteral.create(parseInt(token2.stringValue(), 10), toPosToken(token2)));
                } else if (token2.getKind() === _TokenKind.TokenKind.LITERAL_REAL || token2.getKind() === _TokenKind.TokenKind.LITERAL_REAL_FLOAT) {
                  push(_NumberLiteral.NumberLiteral.create(parseFloat(token2.stringValue()), toPosToken(token2)));
                } else if (token2.getKind() === _TokenKind.TokenKind.LITERAL_HEXINT || token2.getKind() === _TokenKind.TokenKind.LITERAL_HEXLONG) {
                  push(_NumberLiteral.NumberLiteral.create(parseInt(token2.stringValue(), 16), toPosToken(token2)));
                } else if (peekIdentifierToken("true")) {
                  push(_BooleanLiteral.BooleanLiteral.create(true, toPosToken(token2)));
                } else if (peekIdentifierToken("false")) {
                  push(_BooleanLiteral.BooleanLiteral.create(false, toPosToken(token2)));
                } else if (token2.getKind() === _TokenKind.TokenKind.LITERAL_STRING) {
                  push(_StringLiteral.StringLiteral.create(token2.stringValue(), toPosToken(token2)));
                } else {
                  return false;
                }
                nextToken();
                return true;
              }
              function maybeEatParenExpression() {
                if (peekTokenOne(_TokenKind.TokenKind.LPAREN)) {
                  nextToken();
                  var expr = eatExpression();
                  eatToken(_TokenKind.TokenKind.RPAREN);
                  push(expr);
                  return true;
                } else {
                  return false;
                }
              }
              function maybeEatRelationalOperator() {
                var token2 = peekToken();
                if (token2 === null) {
                  return null;
                }
                if (token2.isNumericRelationalOperator()) {
                  return token2;
                }
                if (token2.isIdentifier()) {
                  var idString = token2.stringValue();
                  if (idString.toLowerCase() === "instanceof") {
                    return token2.asInstanceOfToken();
                  }
                  if (idString.toLowerCase() === "matches") {
                    return token2.asMatchesToken();
                  }
                  if (idString.toLowerCase() === "between") {
                    return token2.asBetweenToken();
                  }
                }
                return null;
              }
              function eatToken(expectedKind) {
                var token2 = nextToken();
                if (token2 === null) {
                  raiseInternalException(expressionString.length, "OOD");
                }
                if (token2.getKind() !== expectedKind) {
                  raiseInternalException(token2.startPos, "NOT_EXPECTED_TOKEN", expectedKind.toString().toLowerCase(), token2.getKind().toString().toLowerCase());
                }
                return token2;
              }
              function peekTokenOne(desiredTokenKind) {
                return peekTokenConsumeIfMatched(desiredTokenKind, false);
              }
              function peekTokenConsumeIfMatched(desiredTokenKind, consumeIfMatched) {
                if (!moreTokens()) {
                  return false;
                }
                var token2 = peekToken();
                if (token2.getKind() === desiredTokenKind) {
                  if (consumeIfMatched) {
                    tokenStreamPointer++;
                  }
                  return true;
                }
                if (desiredTokenKind === _TokenKind.TokenKind.IDENTIFIER) {
                  if (token2.getKind().ordinal() >= _TokenKind.TokenKind.DIV.ordinal() && token2.getKind().ordinal() <= _TokenKind.TokenKind.NOT.ordinal() && token2.data !== null) {
                    return true;
                  }
                }
                return false;
              }
              function peekTokenAny() {
                if (!moreTokens()) {
                  return false;
                }
                var token2 = peekToken();
                var args = Array.prototype.slice.call(arguments);
                for (var i = 0, l = args.length; i < l; i += 1) {
                  if (token2.getKind() === args[i]) {
                    return true;
                  }
                }
                return false;
              }
              function peekIdentifierToken(identifierString) {
                if (!moreTokens()) {
                  return false;
                }
                var token2 = peekToken();
                return token2.getKind() === _TokenKind.TokenKind.IDENTIFIER && token2.stringValue().toLowerCase() === identifierString.toLowerCase();
              }
              function peekSelectToken() {
                if (!moreTokens()) {
                  return false;
                }
                var token2 = peekToken();
                return token2.getKind() === _TokenKind.TokenKind.SELECT || token2.getKind() === _TokenKind.TokenKind.SELECT_FIRST || token2.getKind() === _TokenKind.TokenKind.SELECT_LAST;
              }
              function moreTokens() {
                return tokenStreamPointer < tokenStream.length;
              }
              function nextToken() {
                if (tokenStreamPointer >= tokenStreamLength) {
                  return null;
                }
                return tokenStream[tokenStreamPointer++];
              }
              function peekToken() {
                if (tokenStreamPointer >= tokenStreamLength) {
                  return null;
                }
                return tokenStream[tokenStreamPointer];
              }
              function raiseInternalException(pos, message, expected, actual) {
                if (expected) {
                  message += "\nExpected: " + expected;
                }
                if (actual) {
                  message += "\nActual: " + actual;
                }
                throw {
                  name: "InternalParseException",
                  message: "Error occurred while attempting to parse expression '" + expressionString + "' at position " + pos + ". Message: " + message
                };
              }
              function toString2(token2) {
                if (token2.getKind().hasPayload()) {
                  return token2.stringValue();
                }
                return token2.getKind().toString().toLowerCase();
              }
              function checkOperands(token2, left, right) {
                checkLeftOperand(token2, left);
                checkRightOperand(token2, right);
              }
              function checkLeftOperand(token2, operandExpression) {
                if (operandExpression === null) {
                  raiseInternalException(token2.startPos, "LEFT_OPERAND_PROBLEM");
                }
              }
              function checkRightOperand(token2, operandExpression) {
                if (operandExpression === null) {
                  raiseInternalException(token2.startPos, "RIGHT_OPERAND_PROBLEM");
                }
              }
              function toPosToken(token2) {
                return (token2.startPos << 16) + token2.endPos;
              }
              function toPosBounds(start, end) {
                return (start << 16) + end;
              }
              return {
                setConfiguration,
                parse
              };
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.Tokenizer = void 0;
            var _Token = __webpack_require__(7);
            var _TokenKind = __webpack_require__(2);
            var ALTERNATIVE_OPERATOR_NAMES = ["DIV", "EQ", "GE", "GT", "LE", "LT", "MOD", "NE", "NOT"], FLAGS = [], IS_DIGIT = 1, IS_HEXDIGIT = 2, IS_ALPHA = 4;
            function init() {
              var ch;
              for (ch = "0".charCodeAt(0); ch <= "9".charCodeAt(0); ch += 1) {
                FLAGS[ch] |= IS_DIGIT | IS_HEXDIGIT;
              }
              for (ch = "A".charCodeAt(0); ch <= "F".charCodeAt(0); ch += 1) {
                FLAGS[ch] |= IS_HEXDIGIT;
              }
              for (ch = "a".charCodeAt(0); ch <= "f".charCodeAt(0); ch += 1) {
                FLAGS[ch] |= IS_HEXDIGIT;
              }
              for (ch = "A".charCodeAt(0); ch <= "Z".charCodeAt(0); ch += 1) {
                FLAGS[ch] |= IS_ALPHA;
              }
              for (ch = "a".charCodeAt(0); ch <= "z".charCodeAt(0); ch += 1) {
                FLAGS[ch] |= IS_ALPHA;
              }
            }
            init();
            function tokenize(inputData) {
              var expressionString = inputData, toProcess = inputData + "\0", max2 = toProcess.length, pos = 0, tokens2 = [];
              function process2() {
                var ch;
                while (pos < max2) {
                  ch = toProcess[pos];
                  if (isAlphabetic(ch)) {
                    lexIdentifier();
                  } else {
                    switch (ch) {
                      case "+":
                        if (isTwoCharToken(_TokenKind.TokenKind.INC)) {
                          pushPairToken(_TokenKind.TokenKind.INC);
                        } else {
                          pushCharToken(_TokenKind.TokenKind.PLUS);
                        }
                        break;
                      case "_":
                        lexIdentifier();
                        break;
                      case "-":
                        if (isTwoCharToken(_TokenKind.TokenKind.DEC)) {
                          pushPairToken(_TokenKind.TokenKind.DEC);
                        } else {
                          pushCharToken(_TokenKind.TokenKind.MINUS);
                        }
                        break;
                      case ":":
                        pushCharToken(_TokenKind.TokenKind.COLON);
                        break;
                      case ".":
                        pushCharToken(_TokenKind.TokenKind.DOT);
                        break;
                      case ",":
                        pushCharToken(_TokenKind.TokenKind.COMMA);
                        break;
                      case "*":
                        pushCharToken(_TokenKind.TokenKind.STAR);
                        break;
                      case "/":
                        pushCharToken(_TokenKind.TokenKind.DIV);
                        break;
                      case "%":
                        pushCharToken(_TokenKind.TokenKind.MOD);
                        break;
                      case "(":
                        pushCharToken(_TokenKind.TokenKind.LPAREN);
                        break;
                      case ")":
                        pushCharToken(_TokenKind.TokenKind.RPAREN);
                        break;
                      case "[":
                        pushCharToken(_TokenKind.TokenKind.LSQUARE);
                        break;
                      case "#":
                        pushCharToken(_TokenKind.TokenKind.HASH);
                        break;
                      case "]":
                        pushCharToken(_TokenKind.TokenKind.RSQUARE);
                        break;
                      case "{":
                        pushCharToken(_TokenKind.TokenKind.LCURLY);
                        break;
                      case "}":
                        pushCharToken(_TokenKind.TokenKind.RCURLY);
                        break;
                      case "@":
                        pushCharToken(_TokenKind.TokenKind.BEAN_REF);
                        break;
                      case "^":
                        if (isTwoCharToken(_TokenKind.TokenKind.SELECT_FIRST)) {
                          pushPairToken(_TokenKind.TokenKind.SELECT_FIRST);
                        } else {
                          pushCharToken(_TokenKind.TokenKind.POWER);
                        }
                        break;
                      case "!":
                        if (isTwoCharToken(_TokenKind.TokenKind.NE)) {
                          pushPairToken(_TokenKind.TokenKind.NE);
                        } else if (isTwoCharToken(_TokenKind.TokenKind.PROJECT)) {
                          pushPairToken(_TokenKind.TokenKind.PROJECT);
                        } else {
                          pushCharToken(_TokenKind.TokenKind.NOT);
                        }
                        break;
                      case "=":
                        if (isTwoCharToken(_TokenKind.TokenKind.EQ)) {
                          pushPairToken(_TokenKind.TokenKind.EQ);
                        } else {
                          pushCharToken(_TokenKind.TokenKind.ASSIGN);
                        }
                        break;
                      case "&":
                        if (!isTwoCharToken(_TokenKind.TokenKind.SYMBOLIC_AND)) {
                          throw {
                            name: "SpelParseException",
                            message: "Missing character '&' in expression (" + expressionString + ") at position " + pos
                          };
                        }
                        pushPairToken(_TokenKind.TokenKind.SYMBOLIC_AND);
                        break;
                      case "|":
                        if (!isTwoCharToken(_TokenKind.TokenKind.SYMBOLIC_OR)) {
                          throw {
                            name: "SpelParseException",
                            message: "Missing character '|' in expression (" + expressionString + ") at position " + pos
                          };
                        }
                        pushPairToken(_TokenKind.TokenKind.SYMBOLIC_OR);
                        break;
                      case "?":
                        if (isTwoCharToken(_TokenKind.TokenKind.SELECT)) {
                          pushPairToken(_TokenKind.TokenKind.SELECT);
                        } else if (isTwoCharToken(_TokenKind.TokenKind.ELVIS)) {
                          pushPairToken(_TokenKind.TokenKind.ELVIS);
                        } else if (isTwoCharToken(_TokenKind.TokenKind.SAFE_NAVI)) {
                          pushPairToken(_TokenKind.TokenKind.SAFE_NAVI);
                        } else {
                          pushCharToken(_TokenKind.TokenKind.QMARK);
                        }
                        break;
                      case "$":
                        if (isTwoCharToken(_TokenKind.TokenKind.SELECT_LAST)) {
                          pushPairToken(_TokenKind.TokenKind.SELECT_LAST);
                        } else {
                          lexIdentifier();
                        }
                        break;
                      case ">":
                        if (isTwoCharToken(_TokenKind.TokenKind.GE)) {
                          pushPairToken(_TokenKind.TokenKind.GE);
                        } else {
                          pushCharToken(_TokenKind.TokenKind.GT);
                        }
                        break;
                      case "<":
                        if (isTwoCharToken(_TokenKind.TokenKind.LE)) {
                          pushPairToken(_TokenKind.TokenKind.LE);
                        } else {
                          pushCharToken(_TokenKind.TokenKind.LT);
                        }
                        break;
                      case "0":
                      case "1":
                      case "2":
                      case "3":
                      case "4":
                      case "5":
                      case "6":
                      case "7":
                      case "8":
                      case "9":
                        lexNumericLiteral(ch === "0");
                        break;
                      case " ":
                      case "	":
                      case "\r":
                      case "\n":
                        pos += 1;
                        break;
                      case "'":
                        lexQuotedStringLiteral();
                        break;
                      case '"':
                        lexDoubleQuotedStringLiteral();
                        break;
                      case "\0":
                        pos += 1;
                        break;
                      case "\\":
                        throw {
                          name: "SpelParseException",
                          message: "Unexpected escape character in expression (" + expressionString + ") at position " + pos
                        };
                      default:
                        throw {
                          name: "SpelParseException",
                          message: "Cannot handle character '" + ch + "' in expression (" + expressionString + ") at position " + pos
                        };
                    }
                  }
                }
              }
              function lexQuotedStringLiteral() {
                var start = pos, terminated = false, ch;
                while (!terminated) {
                  pos += 1;
                  ch = toProcess[pos];
                  if (ch === "'") {
                    if (toProcess[pos + 1] === "'") {
                      pos += 1;
                    } else {
                      terminated = true;
                    }
                  }
                  if (ch.charCodeAt(0) === 0) {
                    throw {
                      name: "SpelParseException",
                      message: "Non-terminating quoted string in expression (" + expressionString + ") at position " + pos
                    };
                  }
                }
                pos += 1;
                tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_STRING, subarray(start, pos), start, pos));
              }
              function lexDoubleQuotedStringLiteral() {
                var start = pos, terminated = false, ch;
                while (!terminated) {
                  pos += 1;
                  ch = toProcess[pos];
                  if (ch === '"') {
                    if (toProcess[pos + 1] === '"') {
                      pos += 1;
                    } else {
                      terminated = true;
                    }
                  }
                  if (ch.charCodeAt(0) === 0) {
                    throw {
                      name: "SpelParseException",
                      message: "Non-terminating double-quoted string in expression (" + expressionString + ") at position " + pos
                    };
                  }
                }
                pos += 1;
                tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_STRING, subarray(start, pos), start, pos));
              }
              function lexNumericLiteral(firstCharIsZero) {
                var isReal = false, start = pos, ch = toProcess[pos + 1], isHex = ch === "x" || ch === "X", dotpos, endOfNumber, possibleSign, isFloat;
                if (firstCharIsZero && isHex) {
                  pos = pos + 1;
                  do {
                    pos += 1;
                  } while (isHexadecimalDigit(toProcess[pos]));
                  if (isChar("L", "l")) {
                    pushHexIntToken(subarray(start + 2, pos), true, start, pos);
                    pos += 1;
                  } else {
                    pushHexIntToken(subarray(start + 2, pos), false, start, pos);
                  }
                  return;
                }
                do {
                  pos += 1;
                } while (isDigit(toProcess[pos]));
                ch = toProcess[pos];
                if (ch === ".") {
                  isReal = true;
                  dotpos = pos;
                  do {
                    pos += 1;
                  } while (isDigit(toProcess[pos]));
                  if (pos === dotpos + 1) {
                    pos = dotpos;
                    pushIntToken(subarray(start, pos), false, start, pos);
                    return;
                  }
                }
                endOfNumber = pos;
                if (isChar("L", "l")) {
                  if (isReal) {
                    throw {
                      name: "SpelParseException",
                      message: "Real cannot be long in expression (" + expressionString + ") at position " + pos
                    };
                  }
                  pushIntToken(subarray(start, endOfNumber), true, start, endOfNumber);
                  pos += 1;
                } else if (isExponentChar(toProcess[pos])) {
                  isReal = true;
                  pos += 1;
                  possibleSign = toProcess[pos];
                  if (isSign(possibleSign)) {
                    pos += 1;
                  }
                  do {
                    pos += 1;
                  } while (isDigit(toProcess[pos]));
                  isFloat = false;
                  if (isFloatSuffix(toProcess[pos])) {
                    isFloat = true;
                    pos += 1;
                    endOfNumber = pos;
                  } else if (isDoubleSuffix(toProcess[pos])) {
                    pos += 1;
                    endOfNumber = pos;
                  }
                  pushRealToken(subarray(start, pos), isFloat, start, pos);
                } else {
                  ch = toProcess[pos];
                  isFloat = false;
                  if (isFloatSuffix(ch)) {
                    isReal = true;
                    isFloat = true;
                    pos += 1;
                    endOfNumber = pos;
                  } else if (isDoubleSuffix(ch)) {
                    isReal = true;
                    pos += 1;
                    endOfNumber = pos;
                  }
                  if (isReal) {
                    pushRealToken(subarray(start, endOfNumber), isFloat, start, endOfNumber);
                  } else {
                    pushIntToken(subarray(start, endOfNumber), false, start, endOfNumber);
                  }
                }
              }
              function lexIdentifier() {
                var start = pos, substring, asString, idx;
                do {
                  pos += 1;
                } while (isIdentifier(toProcess[pos]));
                substring = subarray(start, pos);
                if (pos - start === 2 || pos - start === 3) {
                  asString = substring.toUpperCase();
                  idx = ALTERNATIVE_OPERATOR_NAMES.indexOf(asString);
                  if (idx >= 0) {
                    pushOneCharOrTwoCharToken(_TokenKind.TokenKind.valueOf(asString), start, substring);
                    return;
                  }
                }
                tokens2.push(new _Token.Token(_TokenKind.TokenKind.IDENTIFIER, substring.replace("\0", ""), start, pos));
              }
              function pushIntToken(data, isLong, start, end) {
                if (isLong) {
                  tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_LONG, data, start, end));
                } else {
                  tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_INT, data, start, end));
                }
              }
              function pushHexIntToken(data, isLong, start, end) {
                if (data.length === 0) {
                  if (isLong) {
                    throw {
                      name: "SpelParseException",
                      message: "Not a long in expression (" + expressionString + ") at position " + pos
                    };
                  } else {
                    throw {
                      name: "SpelParseException",
                      message: "Not an int in expression (" + expressionString + ") at position " + pos
                    };
                  }
                }
                if (isLong) {
                  tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_HEXLONG, data, start, end));
                } else {
                  tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_HEXINT, data, start, end));
                }
              }
              function pushRealToken(data, isFloat, start, end) {
                if (isFloat) {
                  tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_REAL_FLOAT, data, start, end));
                } else {
                  tokens2.push(new _Token.Token(_TokenKind.TokenKind.LITERAL_REAL, data, start, end));
                }
              }
              function subarray(start, end) {
                return toProcess.substring(start, end);
              }
              function isTwoCharToken(kind) {
                if (kind.tokenChars.length === 2 && toProcess[pos] === kind.tokenChars[0]) {
                  return toProcess[pos + 1] === kind.tokenChars[1];
                }
                return false;
              }
              function pushCharToken(kind) {
                tokens2.push(new _Token.Token(kind, null, pos, pos + 1));
                pos += 1;
              }
              function pushPairToken(kind) {
                tokens2.push(new _Token.Token(kind, null, pos, pos + 2));
                pos += 2;
              }
              function pushOneCharOrTwoCharToken(kind, pos2, data) {
                tokens2.push(new _Token.Token(kind, data, pos2, pos2 + kind.getLength()));
              }
              function isIdentifier(ch) {
                return isAlphabetic(ch) || isDigit(ch) || ch === "_" || ch === "$";
              }
              function isChar(a, b) {
                var ch = toProcess[pos];
                return ch === a || ch === b;
              }
              function isExponentChar(ch) {
                return ch === "e" || ch === "E";
              }
              function isFloatSuffix(ch) {
                return ch === "f" || ch === "F";
              }
              function isDoubleSuffix(ch) {
                return ch === "d" || ch === "D";
              }
              function isSign(ch) {
                return ch === "+" || ch === "-";
              }
              function isDigit(ch) {
                if (ch.charCodeAt(0) > 255) {
                  return false;
                }
                return (FLAGS[ch.charCodeAt(0)] & IS_DIGIT) !== 0;
              }
              function isAlphabetic(ch) {
                if (ch.charCodeAt(0) > 255) {
                  return false;
                }
                return (FLAGS[ch.charCodeAt(0)] & IS_ALPHA) !== 0;
              }
              function isHexadecimalDigit(ch) {
                if (ch.charCodeAt(0) > 255) {
                  return false;
                }
                return (FLAGS[ch.charCodeAt(0)] & IS_HEXDIGIT) !== 0;
              }
              process2();
              return tokens2;
            }
            exports3.Tokenizer = {
              tokenize
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.Token = void 0;
            var _TokenKind = __webpack_require__(2);
            function Token(tokenKind, tokenData, startPos, endPos) {
              this.kind = tokenKind;
              this.startPos = startPos;
              this.endPos = endPos;
              if (tokenData) {
                this.data = tokenData;
              }
            }
            Token.prototype.getKind = function() {
              return this.kind;
            };
            Token.prototype.toString = function() {
              var s = "[";
              s += this.kind.toString();
              if (this.kind.hasPayload()) {
                s += ":" + this.data;
              }
              s += "]";
              s += "(" + this.startPos + "," + this.endPos + ")";
              return s;
            };
            Token.prototype.isIdentifier = function() {
              return this.kind === _TokenKind.TokenKind.IDENTIFIER;
            };
            Token.prototype.isNumericRelationalOperator = function() {
              return this.kind === _TokenKind.TokenKind.GT || this.kind === _TokenKind.TokenKind.GE || this.kind === _TokenKind.TokenKind.LT || this.kind === _TokenKind.TokenKind.LE || this.kind === _TokenKind.TokenKind.EQ || this.kind === _TokenKind.TokenKind.NE;
            };
            Token.prototype.stringValue = function() {
              return this.data;
            };
            Token.prototype.asInstanceOfToken = function() {
              return new Token(_TokenKind.TokenKind.INSTANCEOF, this.startPos, this.endPos);
            };
            Token.prototype.asMatchesToken = function() {
              return new Token(_TokenKind.TokenKind.MATCHES, this.startPos, this.endPos);
            };
            Token.prototype.asBetweenToken = function() {
              return new Token(_TokenKind.TokenKind.BETWEEN, this.startPos, this.endPos);
            };
            Token.prototype.getStartPosition = function() {
              return this.startPos;
            };
            Token.prototype.getEndPosition = function() {
              return this.endPos;
            };
            exports3.Token = Token;
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.BooleanLiteral = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(value2, position) {
              var node = _SpelNode.SpelNode.create("boolean", position);
              node.getValue = function() {
                return value2;
              };
              node.setValue = function(newValue) {
                return value2 = newValue;
              };
              return node;
            }
            exports3.BooleanLiteral = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.NumberLiteral = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(value2, position) {
              var node = _SpelNode.SpelNode.create("number", position);
              node.getValue = function() {
                return value2;
              };
              node.setValue = function(newValue) {
                return value2 = newValue;
              };
              return node;
            }
            exports3.NumberLiteral = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.StringLiteral = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(value2, position) {
              var node = _SpelNode.SpelNode.create("string", position);
              function stripQuotes(value3) {
                if (value3[0] === "'" && value3[value3.length - 1] === "'" || value3[0] === '"' && value3[value3.length - 1] === '"') {
                  value3 = value3.substring(1, value3.length - 1);
                }
                return value3.replace(/''/g, "'").replace(/""/g, '"');
              }
              value2 = stripQuotes(value2);
              node.getValue = function() {
                return value2;
              };
              node.setValue = function(newValue) {
                return value2 = newValue;
              };
              return node;
            }
            exports3.StringLiteral = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.NullLiteral = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(value2, position) {
              var node = _SpelNode.SpelNode.create("null", position);
              node.getValue = function() {
                return null;
              };
              return node;
            }
            exports3.NullLiteral = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.FunctionReference = void 0;
            var _SpelNode = __webpack_require__(0);
            var _Stack2 = __webpack_require__(1);
            function createNode(functionName, position, args) {
              var node = _SpelNode.SpelNode.create("function", position);
              node.getRaw = function() {
                return {
                  functionName,
                  args
                };
              };
              node.getValue = function(state) {
                var locals = state.locals || {}, context2 = state.rootContext, compiledArgs = [];
                args.forEach(function(arg) {
                  var currentActiveContext = state.activeContext;
                  state.activeContext = new _Stack2.Stack();
                  state.activeContext.push(state.rootContext);
                  compiledArgs.push(arg.getValue(state));
                  state.activeContext = currentActiveContext;
                });
                if (locals[functionName]) {
                  return locals[functionName].apply(context2, compiledArgs);
                }
                throw {
                  name: "FunctionDoesNotExistException",
                  message: "Function '" + functionName + "' does not exist."
                };
              };
              return node;
            }
            exports3.FunctionReference = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.MethodReference = void 0;
            var _SpelNode = __webpack_require__(0);
            var _Stack2 = __webpack_require__(1);
            function createNode(nullSafeNavigation, methodName, position, args) {
              var node = _SpelNode.SpelNode.create("method", position);
              node.getRaw = function() {
                return {
                  methodName,
                  args
                };
              };
              node.getValue = function(state) {
                var context2 = state.activeContext.peek(), compiledArgs = [], method;
                if (!context2) {
                  throw {
                    name: "ContextDoesNotExistException",
                    message: "Attempting to look up property '" + methodName + "' for an undefined context."
                  };
                }
                function maybeHandleNullSafeNavigation(member) {
                  if (member === void 0 || member === null) {
                    if (nullSafeNavigation) {
                      return null;
                    }
                    throw {
                      name: "NullPointerException",
                      message: "Method " + methodName + " does not exist."
                    };
                  }
                  return member;
                }
                args.forEach(function(arg) {
                  var currentActiveContext = state.activeContext;
                  state.activeContext = new _Stack2.Stack();
                  state.activeContext.push(state.rootContext);
                  compiledArgs.push(arg.getValue(state));
                  state.activeContext = currentActiveContext;
                });
                if (methodName.substr(0, 3) === "get" && !context2[methodName]) {
                  return maybeHandleNullSafeNavigation(context2[methodName.charAt(3).toLowerCase() + methodName.substring(4)]);
                }
                if (methodName.substr(0, 3) === "set" && !context2[methodName]) {
                  return context2[methodName.charAt(3).toLowerCase() + methodName.substring(4)] = compiledArgs[0];
                }
                if (Array.isArray(context2)) {
                  if (methodName === "size") {
                    return context2.length;
                  }
                  if (methodName === "contains") {
                    return context2.includes(compiledArgs[0]);
                  }
                }
                method = maybeHandleNullSafeNavigation(context2[methodName]);
                if (method) {
                  return method.apply(context2, compiledArgs);
                }
                return null;
              };
              return node;
            }
            exports3.MethodReference = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.PropertyReference = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(nullSafeNavigation, propertyName, position) {
              var node = _SpelNode.SpelNode.create("property", position);
              node.getRaw = function() {
                return propertyName;
              };
              node.getValue = function(state) {
                var context2 = state.activeContext.peek();
                if (!context2) {
                  if (nullSafeNavigation) {
                    return null;
                  }
                  throw {
                    name: "ContextDoesNotExistException",
                    message: "Attempting to look up property '" + propertyName + "' for an undefined context."
                  };
                }
                if (context2[propertyName] === void 0 || context2[propertyName] === null) {
                  if (nullSafeNavigation) {
                    return null;
                  }
                  if (propertyName === "size" && Array.isArray(context2)) {
                    return context2.length;
                  }
                  throw {
                    name: "NullPointerException",
                    message: "Property '" + propertyName + "' does not exist."
                  };
                }
                return context2[propertyName];
              };
              node.setValue = function(value2, state) {
                var context2 = state.activeContext.peek();
                if (!context2) {
                  throw {
                    name: "ContextDoesNotExistException",
                    message: "Attempting to assign property '" + propertyName + "' for an undefined context."
                  };
                }
                return context2[propertyName] = value2;
              };
              node.getName = function() {
                return propertyName;
              };
              return node;
            }
            exports3.PropertyReference = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.VariableReference = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(variableName, position) {
              var node = _SpelNode.SpelNode.create("variable", position);
              node.getRaw = function() {
                return variableName;
              };
              node.getValue = function(state) {
                var context2 = state.activeContext.peek(), locals = state.locals;
                if (!context2) {
                  throw {
                    name: "ContextDoesNotExistException",
                    message: "Attempting to look up variable '" + variableName + "' for an undefined context."
                  };
                }
                if (variableName === "this") {
                  return context2;
                }
                if (variableName === "root") {
                  return state.rootContext;
                }
                return locals[variableName];
              };
              node.setValue = function(value2, state) {
                var locals = state.locals;
                return locals[variableName] = value2;
              };
              return node;
            }
            exports3.VariableReference = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.CompoundExpression = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, expressionComponents) {
              var node = _SpelNode.SpelNode.create.apply(null, ["compound", position].concat(expressionComponents));
              function buildContextStack(state) {
                var childrenCount = node.getChildren().length, i;
                for (i = 0; i < childrenCount; i += 1) {
                  if (node.getChildren()[i].getType() === "indexer") {
                    state.activeContext.push(state.activeContext.peek()[node.getChildren()[i].getValue(state)]);
                  } else {
                    state.activeContext.push(node.getChildren()[i].getValue(state));
                  }
                }
                return function unbuildContextStack() {
                  for (i = 0; i < childrenCount; i += 1) {
                    state.activeContext.pop();
                  }
                };
              }
              node.getValue = function(state) {
                var context2 = state.activeContext.peek(), value2;
                if (!context2) {
                  throw {
                    name: "ContextDoesNotExistException",
                    message: "Attempting to evaluate compound expression with an undefined context."
                  };
                }
                var unbuildContextStack = buildContextStack(state);
                value2 = state.activeContext.peek();
                unbuildContextStack();
                return value2;
              };
              node.setValue = function(value2, state) {
                var unbuildContextStack = buildContextStack(state), childCount = node.getChildren().length;
                state.activeContext.pop();
                value2 = node.getChildren()[childCount - 1].setValue(value2, state);
                state.activeContext.push(null);
                unbuildContextStack();
                return value2;
              };
              return node;
            }
            exports3.CompoundExpression = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.Indexer = void 0;
            var _SpelNode = __webpack_require__(0);
            var _Stack2 = __webpack_require__(1);
            function createNode(position, expressionComponents) {
              var node = _SpelNode.SpelNode.create.apply(null, ["indexer", position].concat(expressionComponents));
              node.getValue = function(state) {
                var activeContext = state.activeContext, context2, childrenCount = node.getChildren().length, i, value2;
                state.activeContext = new _Stack2.Stack();
                state.activeContext.push(state.rootContext);
                context2 = state.activeContext.peek();
                if (!context2) {
                  throw {
                    name: "ContextDoesNotExistException",
                    message: "Attempting to evaluate compound expression with an undefined context."
                  };
                }
                for (i = 0; i < childrenCount; i += 1) {
                  state.activeContext.push(node.getChildren()[i].getValue(state));
                }
                value2 = state.activeContext.peek();
                for (i = 0; i < childrenCount; i += 1) {
                  state.activeContext.pop();
                }
                state.activeContext = activeContext;
                return value2;
              };
              return node;
            }
            exports3.Indexer = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.Assign = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, property2, assignedValue) {
              var node = _SpelNode.SpelNode.create("assign", position, property2, assignedValue);
              node.getValue = function(state) {
                var context2 = state.activeContext.peek();
                if (!context2) {
                  throw {
                    name: "ContextDoesNotExistException",
                    message: "Attempting to assign property '" + property2.getValue(state) + "' for an undefined context."
                  };
                }
                return property2.setValue(assignedValue.getValue(state), state);
              };
              return node;
            }
            exports3.Assign = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpEQ = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, left, right) {
              var node = _SpelNode.SpelNode.create("op-eq", position, left, right);
              node.getValue = function(state) {
                return left.getValue(state) === right.getValue(state);
              };
              return node;
            }
            exports3.OpEQ = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpNE = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, left, right) {
              var node = _SpelNode.SpelNode.create("op-ne", position, left, right);
              node.getValue = function(state) {
                return left.getValue(state) !== right.getValue(state);
              };
              return node;
            }
            exports3.OpNE = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpGE = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, left, right) {
              var node = _SpelNode.SpelNode.create("op-ge", position, left, right);
              node.getValue = function(state) {
                return left.getValue(state) >= right.getValue(state);
              };
              return node;
            }
            exports3.OpGE = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpGT = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, left, right) {
              var node = _SpelNode.SpelNode.create("op-gt", position, left, right);
              node.getValue = function(state) {
                return left.getValue(state) > right.getValue(state);
              };
              return node;
            }
            exports3.OpGT = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpLE = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, left, right) {
              var node = _SpelNode.SpelNode.create("op-le", position, left, right);
              node.getValue = function(state) {
                return left.getValue(state) <= right.getValue(state);
              };
              return node;
            }
            exports3.OpLE = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpLT = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, left, right) {
              var node = _SpelNode.SpelNode.create("op-lt", position, left, right);
              node.getValue = function(state) {
                return left.getValue(state) < right.getValue(state);
              };
              return node;
            }
            exports3.OpLT = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpPlus = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, left, right) {
              var node = _SpelNode.SpelNode.create("op-plus", position, left, right);
              node.getValue = function(state) {
                if (!right) {
                  return +left.getValue(state);
                }
                return left.getValue(state) + right.getValue(state);
              };
              return node;
            }
            exports3.OpPlus = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpMinus = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, left, right) {
              var node = _SpelNode.SpelNode.create("op-minus", position, left, right);
              node.getValue = function(state) {
                if (!right) {
                  return -left.getValue(state);
                }
                return left.getValue(state) - right.getValue(state);
              };
              return node;
            }
            exports3.OpMinus = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpMultiply = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, left, right) {
              var node = _SpelNode.SpelNode.create("op-multiply", position, left, right);
              node.getValue = function(state) {
                var leftValue = left.getValue(state), rightValue = right.getValue(state);
                if (typeof leftValue === "number" && typeof rightValue === "number") {
                  return leftValue * rightValue;
                }
                if (typeof leftValue === "string" && typeof rightValue === "number") {
                  var s = "", i = 0;
                  for (; i < rightValue; i += 1) {
                    s += leftValue;
                  }
                  return s;
                }
                return null;
              };
              return node;
            }
            exports3.OpMultiply = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpDivide = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, left, right) {
              var node = _SpelNode.SpelNode.create("op-divide", position, left, right);
              node.getValue = function(state) {
                return left.getValue(state) / right.getValue(state);
              };
              return node;
            }
            exports3.OpDivide = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpModulus = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, left, right) {
              var node = _SpelNode.SpelNode.create("op-modulus", position, left, right);
              node.getValue = function(state) {
                return left.getValue(state) % right.getValue(state);
              };
              return node;
            }
            exports3.OpModulus = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpPower = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, base, exp) {
              var node = _SpelNode.SpelNode.create("op-power", position, base, exp);
              node.getValue = function(state) {
                return Math.pow(base.getValue(state), exp.getValue(state));
              };
              return node;
            }
            exports3.OpPower = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpInc = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, postfix, int) {
              var node = _SpelNode.SpelNode.create("op-inc", position, int);
              node.getValue = function(state) {
                var cur = int.getValue(state);
                int.setValue(cur + 1, state);
                if (postfix) {
                  return cur;
                }
                return cur + 1;
              };
              return node;
            }
            exports3.OpInc = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpDec = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, postfix, int) {
              var node = _SpelNode.SpelNode.create("op-dec", position, int);
              node.getValue = function(state) {
                var cur = int.getValue(state);
                int.setValue(cur - 1, state);
                if (postfix) {
                  return cur;
                }
                return cur - 1;
              };
              return node;
            }
            exports3.OpDec = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpNot = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, expr) {
              var node = _SpelNode.SpelNode.create("op-not", position, expr);
              node.getValue = function(state) {
                return !expr.getValue(state);
              };
              return node;
            }
            exports3.OpNot = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpAnd = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, left, right) {
              var node = _SpelNode.SpelNode.create("op-and", position, left, right);
              node.getValue = function(state) {
                return !!left.getValue(state) && !!right.getValue(state);
              };
              return node;
            }
            exports3.OpAnd = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpOr = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, left, right) {
              var node = _SpelNode.SpelNode.create("op-or", position, left, right);
              node.getValue = function(state) {
                return !!left.getValue(state) || !!right.getValue(state);
              };
              return node;
            }
            exports3.OpOr = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpMatches = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, left, right) {
              var node = _SpelNode.SpelNode.create("matches", position, left, right);
              node.getValue = function(state) {
                var data = left.getValue(state);
                var regexpString = right.getValue(state);
                try {
                  var regexp = new RegExp(regexpString);
                  return !!regexp.exec(data);
                } catch (error) {
                  throw {
                    name: "EvaluationException",
                    message: error.toString()
                  };
                }
              };
              return node;
            }
            exports3.OpMatches = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.Ternary = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, expression, ifTrue, ifFalse) {
              var node = _SpelNode.SpelNode.create("ternary", position, expression, ifTrue, ifFalse);
              node.getValue = function(state) {
                return expression.getValue(state) ? ifTrue.getValue(state) : ifFalse.getValue(state);
              };
              return node;
            }
            exports3.Ternary = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.Elvis = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, expression, ifFalse) {
              var node = _SpelNode.SpelNode.create("elvis", position, expression, ifFalse);
              node.getValue = function(state) {
                return expression.getValue(state) !== null ? expression.getValue(state) : ifFalse.getValue(state);
              };
              return node;
            }
            exports3.Elvis = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.InlineList = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, elements) {
              var node = _SpelNode.SpelNode.create("list", position), list = [].concat(elements || []);
              node.getRaw = function() {
                return list;
              };
              node.getValue = function(state) {
                return list.map(function(element) {
                  return element.getValue(state);
                });
              };
              return node;
            }
            exports3.InlineList = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.InlineMap = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, elements) {
              var node = _SpelNode.SpelNode.create("map", position), mapPieces = [].concat(elements || []);
              node.getValue = function(state) {
                var key = true, keyValue = null, map2 = {};
                mapPieces.forEach(function(piece) {
                  if (key) {
                    if (piece.getType() === "property") {
                      keyValue = piece.getName();
                    } else {
                      keyValue = piece.getValue(state);
                    }
                  } else {
                    map2[keyValue] = piece.getValue(state);
                  }
                  key = !key;
                });
                return map2;
              };
              return node;
            }
            exports3.InlineMap = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.Selection = void 0;
            var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
              return typeof obj;
            } : function(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            var _SpelNode = __webpack_require__(0);
            function matches(element, expr, state) {
              var doesMatch = false;
              state.activeContext.push(element);
              doesMatch = expr.getValue(state);
              state.activeContext.pop();
              return doesMatch;
            }
            function selectFromArray(collection, whichElement, expr, state) {
              var newCollection = collection.filter(function(element) {
                return matches(element, expr, state);
              });
              switch (whichElement) {
                case "ALL":
                  return newCollection;
                case "FIRST":
                  return newCollection[0] || null;
                case "LAST":
                  if (newCollection.length) {
                    return newCollection[newCollection.length - 1];
                  }
                  return null;
              }
            }
            function selectFromMap(collection, whichElement, expr, state) {
              var newCollection = {}, entry, key, entries = [], returnValue = {};
              for (key in collection) {
                if (collection.hasOwnProperty(key)) {
                  entry = {
                    key,
                    value: collection[key]
                  };
                  if (matches(entry, expr, state)) {
                    entries.push(entry);
                  }
                }
              }
              switch (whichElement) {
                case "ALL":
                  entries.forEach(function(entry2) {
                    newCollection[entry2.key] = entry2.value;
                  });
                  return newCollection;
                case "FIRST":
                  if (entries.length) {
                    returnValue[entries[0].key] = entries[0].value;
                    return returnValue;
                  }
                  return null;
                case "LAST":
                  if (entries.length) {
                    returnValue[entries[entries.length - 1].key] = entries[entries.length - 1].value;
                    return returnValue;
                  }
                  return null;
              }
              entries.forEach(function(entry2) {
                newCollection[entry2.key] = entry2.value;
              });
            }
            function createNode(nullSafeNavigation, whichElement, position, expr) {
              var node = _SpelNode.SpelNode.create("selection", position, expr);
              node.getValue = function(state) {
                var collection = state.activeContext.peek();
                if (collection) {
                  if (Array.isArray(collection)) {
                    return selectFromArray(collection, whichElement, expr, state);
                  } else if ((typeof collection === "undefined" ? "undefined" : _typeof2(collection)) === "object") {
                    return selectFromMap(collection, whichElement, expr, state);
                  }
                }
                return null;
              };
              return node;
            }
            exports3.Selection = {
              create: createNode,
              FIRST: "FIRST",
              LAST: "LAST",
              ALL: "ALL"
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.Projection = void 0;
            var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
              return typeof obj;
            } : function(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            var _SpelNode = __webpack_require__(0);
            function projectCollection(collection, expr, state) {
              return collection.map(function(element) {
                var matches;
                state.activeContext.push(element);
                matches = expr.getValue(state);
                state.activeContext.pop();
                return matches;
              });
            }
            function createNode(nullSafeNavigation, position, expr) {
              var node = _SpelNode.SpelNode.create("projection", position, expr);
              node.getValue = function(state) {
                var collection = state.activeContext.peek(), entries = [], key;
                if (Array.isArray(collection)) {
                  return projectCollection(collection, expr, state);
                } else if ((typeof collection === "undefined" ? "undefined" : _typeof2(collection)) === "object") {
                  for (key in collection) {
                    if (collection.hasOwnProperty(key)) {
                      entries.push(collection[key]);
                    }
                  }
                  return projectCollection(entries, expr, state);
                }
                return null;
              };
              return node;
            }
            exports3.Projection = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpInstanceof = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, left, right) {
              var node = _SpelNode.SpelNode.create("instanceof", position, left, right);
              node.getValue = function(state) {
                throw {
                  name: "MethodNotImplementedException",
                  message: "OpInstanceOf: Not implemented"
                };
              };
              return node;
            }
            exports3.OpInstanceof = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.OpBetween = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, left, right) {
              var node = _SpelNode.SpelNode.create("between", position, left, right);
              node.getValue = function(state) {
                throw {
                  name: "MethodNotImplementedException",
                  message: "OpBetween: Not implemented"
                };
              };
              return node;
            }
            exports3.OpBetween = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.TypeReference = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, node, _dims) {
              var node = _SpelNode.SpelNode.create("typeref", position, node);
              node.getValue = function(state) {
                throw {
                  name: "MethodNotImplementedException",
                  message: "TypeReference: Not implemented"
                };
              };
              return node;
            }
            exports3.TypeReference = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.BeanReference = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(position, beanName) {
              var node = _SpelNode.SpelNode.create("beanref", position);
              node.getValue = function(state) {
                throw {
                  name: "MethodNotImplementedException",
                  message: "BeanReference: Not implemented"
                };
              };
              return node;
            }
            exports3.BeanReference = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.Identifier = void 0;
            var _SpelNode = __webpack_require__(0);
            function createNode(identifierName, position) {
              var node = _SpelNode.SpelNode.create("identifier", position);
              node.getRaw = function() {
                return identifierName;
              };
              node.getValue = function(state) {
                throw {
                  name: "MethodNotImplementedException",
                  message: "Identifier: Not implemented"
                };
              };
              return node;
            }
            exports3.Identifier = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.QualifiedIdentifier = void 0;
            var _SpelNode = __webpack_require__(0);
            function _toConsumableArray2(arr) {
              if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              } else {
                return Array.from(arr);
              }
            }
            function createNode(position, pieces) {
              var node = _SpelNode.SpelNode.create.apply(_SpelNode.SpelNode, ["qualifiedidentifier", position].concat(_toConsumableArray2(pieces)));
              node.getRaw = function() {
                return pieces.map(function(p) {
                  return p.getRaw();
                });
              };
              node.getValue = function(state) {
                throw {
                  name: "MethodNotImplementedException",
                  message: "QualifiedIdentifier: Not implemented"
                };
              };
              return node;
            }
            exports3.QualifiedIdentifier = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            exports3.ConstructorReference = void 0;
            var _SpelNode = __webpack_require__(0);
            var _Stack2 = __webpack_require__(1);
            function _toConsumableArray2(arr) {
              if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              } else {
                return Array.from(arr);
              }
            }
            function _toArray2(arr) {
              return Array.isArray(arr) ? arr : Array.from(arr);
            }
            function createNode(position, dimensions, nodes) {
              var isArray2 = nodes !== void 0;
              var dimension;
              if (isArray2) {
                dimension = dimensions.length && dimensions[0] && dimensions[0].getType() === "number" ? dimensions[0].getValue() : null;
              } else {
                nodes = dimensions;
                dimensions = void 0;
              }
              var _nodes = nodes, _nodes2 = _toArray2(_nodes);
              _nodes2[0];
              var args = _nodes2.slice(1);
              var node = _SpelNode.SpelNode.create.apply(_SpelNode.SpelNode, ["constructorref", position].concat(_toConsumableArray2(nodes)));
              node.getRaw = function() {
                return dimension;
              };
              node.getValue = function(state) {
                if (isArray2 && args.length <= 1) {
                  var compiledArgs = [];
                  args.forEach(function(arg) {
                    var currentActiveContext = state.activeContext;
                    state.activeContext = new _Stack2.Stack();
                    state.activeContext.push(state.rootContext);
                    compiledArgs.push(arg.getValue(state));
                    state.activeContext = currentActiveContext;
                  });
                  if (args.length === 1) {
                    return compiledArgs[0];
                  } else {
                    return dimension ? new Array(dimension) : [];
                  }
                }
                throw {
                  name: "MethodNotImplementedException",
                  message: "ConstructorReference: Not implemented"
                };
              };
              return node;
            }
            exports3.ConstructorReference = {
              create: createNode
            };
          },
          function(module3, exports3, __webpack_require__) {
            Object.defineProperty(exports3, "__esModule", {
              value: true
            });
            function create(authentication, principal) {
              var context2 = {};
              context2.authentication = authentication || {};
              context2.principal = principal || {};
              context2.hasRole = function(role) {
                var hasRole = false;
                if (!role) {
                  return false;
                }
                if (!context2.authentication && !Array.isArray(context2.authentication.authorities)) {
                  return false;
                }
                context2.authentication.authorities.forEach(function(grantedAuthority) {
                  if (grantedAuthority.authority.toLowerCase() === role.toLowerCase()) {
                    hasRole = true;
                  }
                });
                return hasRole;
              };
              context2.hasPermission = function() {
                var args = Array.prototype.slice.call(arguments);
                if (args.length === 1) {
                  return context2.hasRole(args[0]);
                }
              };
              return context2;
            }
            exports3.StandardContext = {
              create
            };
          }
        ]);
      });
    })(spel2js);
    function ownKeys$g(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$g(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$g(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$g(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var loadFromSpel = function loadFromSpel2(logicTree, config2) {
      return _loadFromSpel(logicTree, config2, true);
    };
    var _loadFromSpel = function _loadFromSpel2(spelStr, config2) {
      var returnErrors = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
      var meta = {
        errors: []
      };
      var extendedConfig = extendConfig$1(config2);
      var conv = buildConv(extendedConfig);
      var compiledExpression;
      var convertedObj;
      var jsTree = void 0;
      try {
        var compileRes = spel2js.exports.SpelExpressionEvaluator.compile(spelStr);
        compiledExpression = compileRes._compiledExpression;
      } catch (e) {
        meta.errors.push(e);
      }
      if (compiledExpression) {
        logger$1.debug("compiledExpression:", compiledExpression);
        convertedObj = convertCompiled(compiledExpression, meta);
        logger$1.debug("convertedObj:", convertedObj, meta);
        jsTree = convertToTree(convertedObj, conv, extendedConfig, meta);
        if (jsTree && jsTree.type != "group" && jsTree.type != "switch_group") {
          jsTree = wrapInDefaultConj(jsTree, extendedConfig, convertedObj["not"]);
        }
        logger$1.debug("jsTree:", jsTree);
      }
      var immTree = jsTree ? loadTree$1(jsTree) : void 0;
      if (returnErrors) {
        return [immTree, meta.errors];
      } else {
        if (meta.errors.length)
          console.warn("Errors while importing from SpEL:", meta.errors);
        return immTree;
      }
    };
    var convertCompiled = function convertCompiled2(expr, meta) {
      var parentExpr = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var type = expr.getType();
      var children = expr.getChildren().map(function(child) {
        return convertCompiled2(child, meta, expr);
      });
      if (type == "op-or" || type == "op-and") {
        children = children.reduce(function(acc, child) {
          var canFlatize = child.type == type && !child.not;
          var flat = canFlatize ? child.children : [child];
          return [].concat(_toConsumableArray(acc), _toConsumableArray(flat));
        }, []);
      }
      if (type == "op-not") {
        if (children.length != 1) {
          meta.errors.push("Operator NOT should have 1 child, but got ".concat(children.length, "}"));
        }
        return _objectSpread$g(_objectSpread$g({}, children[0]), {}, {
          not: !(children[0].not || false)
        });
      }
      if (type == "compound") {
        children = children.filter(function(child) {
          var isListFix = child.type == "selection" && child.children.length == 1 && child.children[0].type == "boolean" && child.children[0].val == true;
          return !isListFix;
        });
        var selection = children.find(function(child) {
          return child.type == "selection";
        });
        if (selection && selection.children.length != 1) {
          meta.errors.push("Selection should have 1 child, but got ".concat(selection.children.length));
        }
        var filter = selection ? selection.children[0] : null;
        var lastChild = children[children.length - 1];
        var isSize = lastChild.type == "method" && lastChild.val.methodName == "size" || lastChild.type == "!func" && lastChild.methodName == "size";
        var isLength2 = lastChild.type == "property" && lastChild.val == "length";
        var sourceParts = children.filter(function(child) {
          return child !== selection && child !== lastChild;
        });
        var source = {
          type: "compound",
          children: sourceParts
        };
        if (isSize || isLength2) {
          return {
            type: "!aggr",
            filter,
            source
          };
        }
        children = children.filter(function(child) {
          var isThis = child.type == "variable" && child.val == "this";
          var isRoot = child.type == "variable" && child.val == "root";
          return !(isThis || isRoot);
        });
        children = children.map(function(child) {
          if (child.type == "indexer" && child.children.length == 1) {
            return {
              type: "indexer",
              val: child.children[0].val,
              itype: child.children[0].type
            };
          } else {
            return child;
          }
        });
        if (lastChild.type == "method") {
          var obj = children.filter(function(child) {
            return child !== lastChild;
          });
          return {
            type: "!func",
            obj,
            methodName: lastChild.val.methodName,
            args: lastChild.val.args
          };
        }
        if (lastChild.type == "!func") {
          var _obj = children.filter(function(child) {
            return child !== lastChild;
          });
          return _objectSpread$g(_objectSpread$g({}, lastChild), {}, {
            obj: _obj
          });
        }
      }
      var val;
      try {
        if (expr.getRaw) {
          val = expr.getRaw();
        } else if (expr.getValue.length == 0) {
          val = expr.getValue();
        }
      } catch (e) {
        logger$1.error("[spel2js] Error in getValue()", e);
      }
      if (type == "ternary") {
        val = flatizeTernary(children);
      }
      if (_typeof$1(val) === "object" && val !== null) {
        if (val.methodName || val.functionName) {
          val.args = val.args.map(function(child) {
            return convertCompiled2(child, meta, expr);
          });
        }
      }
      if (type == "list") {
        val = val.map(function(item) {
          return convertCompiled2(item, meta, expr);
        });
        if (!parentExpr && val.length == 1) {
          return val[0];
        }
      }
      if (type == "constructorref") {
        var qid = children.find(function(child) {
          return child.type == "qualifiedidentifier";
        });
        var cls = qid === null || qid === void 0 ? void 0 : qid.val;
        if (!cls) {
          meta.errors.push("Can't find qualifiedidentifier in constructorref children: ".concat(JSON.stringify(children)));
          return void 0;
        }
        var args = children.filter(function(child) {
          return child.type != "qualifiedidentifier";
        });
        return {
          type: "!new",
          cls,
          args
        };
      }
      if (type == "typeref") {
        var _qid = children.find(function(child) {
          return child.type == "qualifiedidentifier";
        });
        var _cls = _qid === null || _qid === void 0 ? void 0 : _qid.val;
        if (!_cls) {
          meta.errors.push("Can't find qualifiedidentifier in typeref children: ".concat(JSON.stringify(children)));
          return void 0;
        }
        children.filter(function(child) {
          return child.type != "qualifiedidentifier";
        });
        return {
          type: "!type",
          cls: _cls
        };
      }
      if (type == "function" || type == "method") {
        var _val = val, functionName = _val.functionName, methodName = _val.methodName, _args2 = _val.args;
        return {
          type: "!func",
          methodName: functionName || methodName,
          isVar: type == "function",
          args: _args2
        };
      }
      return {
        type,
        children,
        val
      };
    };
    var flatizeTernary = function flatizeTernary2(children) {
      var flat = [];
      function _processTernaryChildren(tern) {
        var _tern = _slicedToArray(tern, 3), cond = _tern[0], if_val = _tern[1], else_val = _tern[2];
        flat.push([cond, if_val]);
        if ((else_val === null || else_val === void 0 ? void 0 : else_val.type) == "ternary") {
          _processTernaryChildren(else_val.children);
        } else {
          flat.push([void 0, else_val]);
        }
      }
      _processTernaryChildren(children);
      return flat;
    };
    var buildConv = function buildConv2(config2) {
      var operators2 = {};
      var _loop = function _loop2(opKey2) {
        var opConfig = config2.operators[opKey2];
        if (opConfig.spelOps) {
          opConfig.spelOps.forEach(function(spelOp) {
            var opk2 = spelOp;
            if (!operators2[opk2])
              operators2[opk2] = [];
            operators2[opk2].push(opKey2);
          });
        } else if (opConfig.spelOp) {
          var opk = opConfig.spelOp;
          if (!operators2[opk])
            operators2[opk] = [];
          operators2[opk].push(opKey2);
        } else {
          logger$1.log("[spel] No spelOp for operator ".concat(opKey2));
        }
      };
      for (var opKey in config2.operators) {
        _loop(opKey);
      }
      var conjunctions2 = {};
      for (var conjKey in config2.conjunctions) {
        var conjunctionDefinition = config2.conjunctions[conjKey];
        var ck = conjunctionDefinition.spelConj || conjKey.toLowerCase();
        conjunctions2[ck] = conjKey;
      }
      var funcs2 = {};
      for (var funcKey in config2.funcs) {
        var funcConfig = config2.funcs[funcKey];
        var fk = void 0;
        if (typeof funcConfig.spelFunc == "string") {
          fk = funcConfig.spelFunc;
        }
        if (fk) {
          if (!funcs2[fk])
            funcs2[fk] = [];
          funcs2[fk].push(funcKey);
        }
      }
      return {
        operators: operators2,
        conjunctions: conjunctions2,
        funcs: funcs2
      };
    };
    var convertPath = function convertPath2(parts, meta) {
      var isError2 = false;
      var res = parts.map(function(c) {
        if (c.type == "variable" || c.type == "property" || c.type == "indexer" && c.itype == "string") {
          return c.val;
        } else {
          isError2 = true;
          meta.errors.push("Unexpected item in compound: ".concat(JSON.stringify(c)));
        }
      });
      return !isError2 ? res : void 0;
    };
    var convertArg = function convertArg2(spel, conv, config2, meta, parentSpel) {
      if (spel == void 0)
        return void 0;
      var fieldSeparator = config2.settings.fieldSeparator;
      var literalTypes = {
        number: "number",
        string: "text",
        "boolean": "boolean",
        "null": "null"
      };
      var groupFieldParts = parentSpel !== null && parentSpel !== void 0 && parentSpel._groupField ? [parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField] : [];
      if (spel.type == "compound") {
        var _spel$children, _spel$children$;
        var parts = convertPath(spel.children, meta);
        if (!parts) {
          return void 0;
        }
        var fullParts = [].concat(groupFieldParts, _toConsumableArray(parts));
        var isVariable = ((_spel$children = spel.children) === null || _spel$children === void 0 ? void 0 : (_spel$children$ = _spel$children[0]) === null || _spel$children$ === void 0 ? void 0 : _spel$children$.type) == "variable";
        return {
          valueSrc: "field",
          isVariable,
          value: fullParts.join(fieldSeparator)
        };
      } else if (spel.type == "variable" || spel.type == "property") {
        var _fullParts = [].concat(groupFieldParts, [spel.val]);
        var _isVariable = spel.type == "variable";
        return {
          valueSrc: "field",
          isVariable: _isVariable,
          value: _fullParts.join(fieldSeparator)
        };
      } else if (literalTypes[spel.type]) {
        var value2 = spel.val;
        var valueType = literalTypes[spel.type];
        if (parentSpel !== null && parentSpel !== void 0 && parentSpel.isUnary) {
          value2 = -value2;
        }
        return {
          valueSrc: "value",
          valueType,
          value: value2
        };
      } else if (spel.type == "list") {
        var _values$;
        var values = spel.val.map(function(v) {
          return convertArg2(v, conv, config2, meta, spel);
        });
        values.length ? (_values$ = values[0]) === null || _values$ === void 0 ? void 0 : _values$.valueType : null;
        var _value = values.map(function(v) {
          return v === null || v === void 0 ? void 0 : v.value;
        });
        var _valueType = "multiselect";
        return {
          valueSrc: "value",
          valueType: _valueType,
          value: _value
        };
      } else if (spel.type == "!func") {
        var _funcToOpMap;
        var obj = spel.obj, methodName = spel.methodName, args = spel.args;
        spel.isVar;
        var funcToOpMap = (_funcToOpMap = {}, _defineProperty$1(_funcToOpMap, ".contains", "like"), _defineProperty$1(_funcToOpMap, ".startsWith", "starts_with"), _defineProperty$1(_funcToOpMap, ".endsWith", "ends_with"), _defineProperty$1(_funcToOpMap, "$contains", "select_any_in"), _defineProperty$1(_funcToOpMap, ".equals", "multiselect_equals"), _defineProperty$1(_funcToOpMap, "CollectionUtils.containsAny()", "multiselect_contains"), _funcToOpMap);
        var convertedArgs = args.map(function(v) {
          return convertArg2(v, conv, config2, meta, _objectSpread$g(_objectSpread$g({}, spel), {}, {
            _groupField: parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField
          }));
        });
        if (methodName == "contains" && obj && obj[0].type == "list") {
          var convertedObj = obj.map(function(v) {
            return convertArg2(v, conv, config2, meta, spel);
          });
          if (!(convertedArgs.length == 1 && convertedArgs[0].valueSrc == "field")) {
            meta.errors.push("Expected arg to method ".concat(methodName, " to be field but got: ").concat(JSON.stringify(convertedArgs)));
            return void 0;
          }
          var field = convertedArgs[0].value;
          if (!(convertedObj.length == 1 && convertedObj[0].valueType == "multiselect")) {
            meta.errors.push("Expected object of method ".concat(methodName, " to be inline list but got: ").concat(JSON.stringify(convertedObj)));
            return void 0;
          }
          var opKey = funcToOpMap["$" + methodName];
          var list = convertedObj[0];
          return buildRule(config2, meta, field, opKey, [list], spel);
        } else if (obj && obj[0].type == "property" && funcToOpMap[obj[0].val + "." + methodName + "()"]) {
          var _opKey = funcToOpMap[obj[0].val + "." + methodName + "()"];
          var _field = convertedArgs[0].value;
          var _args3 = convertedArgs.slice(1);
          return buildRule(config2, meta, _field, _opKey, _args3, spel);
        } else if (funcToOpMap["." + methodName]) {
          var _opKey2 = funcToOpMap["." + methodName];
          var _parts = convertPath(obj, meta);
          if (_parts && convertedArgs.length == 1) {
            var _fullParts2 = [].concat(groupFieldParts, _toConsumableArray(_parts));
            var _field2 = _fullParts2.join(fieldSeparator);
            return buildRule(config2, meta, _field2, _opKey2, convertedArgs, spel);
          }
        } else if (methodName == "parse" && obj && obj[0].type == "!new" && obj[0].cls.at(-1) == "SimpleDateFormat") {
          var _args4 = obj[0].args.map(function(v) {
            return convertArg2(v, conv, config2, meta, _objectSpread$g(_objectSpread$g({}, spel), {}, {
              _groupField: parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField
            }));
          });
          if (!(_args4.length == 1 && _args4[0].valueType == "text")) {
            meta.errors.push("Expected args of ".concat(obj[0].cls.join("."), ".").concat(methodName, " to be 1 string but got: ").concat(JSON.stringify(_args4)));
            return void 0;
          }
          if (!(convertedArgs.length == 1 && convertedArgs[0].valueType == "text")) {
            meta.errors.push("Expected args of ".concat(obj[0].cls.join("."), " to be 1 string but got: ").concat(JSON.stringify(convertedArgs)));
            return void 0;
          }
          var dateFormat = _args4[0].value;
          var dateString = convertedArgs[0].value;
          var _valueType2 = dateFormat.includes(" ") ? "datetime" : "date";
          var _field3 = null;
          var widget = _valueType2;
          var fieldConfig = getFieldConfig$8(config2, _field3);
          var widgetConfig = config2.widgets[widget || (fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.mainWidget)];
          var valueFormat = widgetConfig.valueFormat;
          var dateVal = hooks(dateString, hooks.ISO_8601);
          var _value2 = dateVal.isValid() ? dateVal.format(valueFormat) : void 0;
          return {
            valueSrc: "value",
            valueType: _valueType2,
            value: _value2
          };
        } else if (methodName == "parse" && obj && obj[0].type == "!type" && obj[0].cls.at(-1) == "LocalTime") {
          if (!(convertedArgs.length == 1 && convertedArgs[0].valueType == "text")) {
            meta.errors.push("Expected args of ".concat(obj[0].cls.join("."), " to be 1 string but got: ").concat(JSON.stringify(convertedArgs)));
            return void 0;
          }
          var timeString = convertedArgs[0].value;
          var _valueType3 = "time";
          var _field4 = null;
          var _widget = _valueType3;
          var _fieldConfig = getFieldConfig$8(config2, _field4);
          var _widgetConfig = config2.widgets[_widget || (_fieldConfig === null || _fieldConfig === void 0 ? void 0 : _fieldConfig.mainWidget)];
          var _valueFormat = _widgetConfig.valueFormat;
          var _dateVal = hooks(timeString, "HH:mm:ss");
          var _value3 = _dateVal.isValid() ? _dateVal.format(_valueFormat) : void 0;
          return {
            valueSrc: "value",
            valueType: _valueType3,
            value: _value3
          };
        } else {
          meta.errors.push("Unsupported method ".concat(methodName));
        }
      } else if (spel.type == "op-plus" && (parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel.type) == "ternary") {
        return buildCaseValueConcat(spel, conv, config2, meta);
      } else {
        meta.errors.push("Can't convert arg of type ".concat(spel.type));
      }
      return void 0;
    };
    var buildRule = function buildRule2(config2, meta, field, opKey, convertedArgs, spel) {
      if (convertedArgs.filter(function(v) {
        return v === void 0;
      }).length) {
        return void 0;
      }
      var fieldConfig = getFieldConfig$8(config2, field);
      if (!fieldConfig) {
        meta.errors.push("No config for field ".concat(field));
        return void 0;
      }
      var canRev = true;
      var needWrapReverse = false;
      if (spel !== null && spel !== void 0 && spel.not && canRev) {
        var opConfig = config2.operators[opKey];
        if (opConfig.reversedOp) {
          opKey = opConfig.reversedOp;
          spel.not = false;
        } else {
          needWrapReverse = true;
        }
      }
      var widget = getWidgetForFieldOp$3(config2, field, opKey);
      var widgetConfig = config2.widgets[widget || fieldConfig.mainWidget];
      var asyncListValuesArr = convertedArgs.map(function(v) {
        return v.asyncListValues;
      }).filter(function(v) {
        return v != void 0;
      });
      var asyncListValues = asyncListValuesArr.length ? asyncListValuesArr[0] : void 0;
      var res = {
        type: "rule",
        id: uuid$2(),
        properties: {
          field,
          operator: opKey,
          value: convertedArgs.map(function(v) {
            return v.value;
          }),
          valueSrc: convertedArgs.map(function(v) {
            return v.valueSrc;
          }),
          valueType: convertedArgs.map(function(v) {
            if (v.valueSrc == "value") {
              return (widgetConfig === null || widgetConfig === void 0 ? void 0 : widgetConfig.type) || (fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.type) || v.valueType;
            }
            return v.valueType;
          }),
          asyncListValues
        }
      };
      if (needWrapReverse) {
        res = wrapInDefaultConj(res, config2, spel === null || spel === void 0 ? void 0 : spel.not);
        if (spel !== null && spel !== void 0 && spel.not) {
          spel.not = false;
        }
      }
      return res;
    };
    var buildRuleGroup = function buildRuleGroup2(_ref, opKey, convertedArgs, config2, meta) {
      var groupFilter = _ref.groupFilter, groupFieldValue = _ref.groupFieldValue;
      if (groupFieldValue.valueSrc != "field")
        throw "Bad groupFieldValue: ".concat(JSON.stringify(groupFieldValue));
      var groupField = groupFieldValue.value;
      var groupOpRule = buildRule(config2, meta, groupField, opKey, convertedArgs);
      if (!groupOpRule)
        return void 0;
      var fieldConfig = getFieldConfig$8(config2, groupField);
      var mode = fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.mode;
      var res = _objectSpread$g(_objectSpread$g({}, groupFilter || {}), {}, {
        type: "rule_group",
        properties: _objectSpread$g(_objectSpread$g(_objectSpread$g({}, groupOpRule.properties), (groupFilter === null || groupFilter === void 0 ? void 0 : groupFilter.properties) || {}), {}, {
          mode
        })
      });
      if (!res.id)
        res.id = uuid$2();
      return res;
    };
    var compareArgs = function compareArgs2(left, right, spel, conv, config2, meta) {
      var parentSpel = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      if (left.type == right.type) {
        if (left.type == "!aggr") {
          var _map = [left.source, right.source].map(function(v) {
            return convertArg(v, conv, config2, meta, _objectSpread$g(_objectSpread$g({}, spel), {}, {
              _groupField: parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField
            }));
          }), _map2 = _slicedToArray(_map, 2), leftSource = _map2[0], rightSource = _map2[1];
          return leftSource.value == rightSource.value;
        } else {
          var _map3 = [left, right].map(function(v) {
            return convertArg(v, conv, config2, meta, _objectSpread$g(_objectSpread$g({}, spel), {}, {
              _groupField: parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField
            }));
          }), _map4 = _slicedToArray(_map3, 2), leftVal = _map4[0], rightVal = _map4[1];
          return leftVal.value == rightVal.value;
        }
      }
      return false;
    };
    var convertToTree = function convertToTree2(spel, conv, config2, meta) {
      var parentSpel = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      if (!spel)
        return void 0;
      var res;
      if (spel.type.indexOf("op-") == 0) {
        var op = spel.type.slice("op-".length);
        var isUnary = (op == "minus" || op == "plus") && spel.children.length == 1;
        if (isUnary) {
          spel.isUnary = true;
          return convertToTree2(spel.children[0], conv, config2, meta, spel);
        }
        var isBetweenNormal = op == "and" && spel.children.length == 2 && spel.children[0].type == "op-ge" && spel.children[1].type == "op-le";
        var isBetweenRev = op == "or" && spel.children.length == 2 && spel.children[0].type == "op-lt" && spel.children[1].type == "op-gt";
        var isBetween2 = isBetweenNormal || isBetweenRev;
        if (isBetween2) {
          var _spel$children$0$chil = _slicedToArray(spel.children[0].children, 2), left = _spel$children$0$chil[0], from2 = _spel$children$0$chil[1];
          var _spel$children$1$chil = _slicedToArray(spel.children[1].children, 2), right = _spel$children$1$chil[0], to2 = _spel$children$1$chil[1];
          var isNumbers = from2.type == "number" && to2.type == "number";
          var isSameSource = compareArgs(left, right, spel, conv, config2, meta, parentSpel);
          if (isNumbers && isSameSource) {
            from2.val;
            to2.val;
            var oneSpel = {
              type: "op-between",
              children: [left, from2, to2]
            };
            return convertToTree2(oneSpel, conv, config2, meta, parentSpel);
          }
        }
        var opKeys = conv.operators[op];
        if (op == "eq" && spel.children[1].type == "null") {
          opKeys = ["is_null"];
        } else if (op == "ne" && spel.children[1].type == "null") {
          opKeys = ["is_not_null"];
        } else if (op == "le" && spel.children[1].type == "string" && spel.children[1].val == "") {
          opKeys = ["is_empty"];
        } else if (op == "gt" && spel.children[1].type == "string" && spel.children[1].val == "") {
          opKeys = ["is_not_empty"];
        } else if (op == "between") {
          opKeys = ["between"];
        }
        var convertChildren = function convertChildren2() {
          return spel.children.map(function(child) {
            return convertToTree2(child, conv, config2, meta, _objectSpread$g(_objectSpread$g({}, spel), {}, {
              _groupField: parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField
            }));
          });
        };
        if (op == "and" || op == "or") {
          var children1 = {};
          var vals = convertChildren();
          vals.forEach(function(v) {
            if (v) {
              var id = uuid$2();
              v.id = id;
              if (v.type != void 0) {
                children1[id] = v;
              } else {
                meta.errors.push("Bad item in AND/OR: ".concat(JSON.stringify(v)));
              }
            }
          });
          res = {
            type: "group",
            id: uuid$2(),
            children1,
            properties: {
              conjunction: conv.conjunctions[op],
              not: spel.not
            }
          };
        } else if (opKeys) {
          var _fieldObj$groupFieldV, _convertedArgs;
          var _vals = convertChildren();
          var fieldObj = _vals[0];
          var convertedArgs = _vals.slice(1);
          var groupField = fieldObj === null || fieldObj === void 0 ? void 0 : (_fieldObj$groupFieldV = fieldObj.groupFieldValue) === null || _fieldObj$groupFieldV === void 0 ? void 0 : _fieldObj$groupFieldV.value;
          var opArg = (_convertedArgs = convertedArgs) === null || _convertedArgs === void 0 ? void 0 : _convertedArgs[0];
          var opKey = opKeys[0];
          if (opKeys.length > 1) {
            logger$1.warn("[spel] Spel operator ".concat(op, " can be mapped to ").concat(opKeys));
            var field = fieldObj === null || fieldObj === void 0 ? void 0 : fieldObj.value;
            var widgets2 = opKeys.map(function(op2) {
              return {
                op: op2,
                widget: getWidgetForFieldOp$3(config2, field, op2)
              };
            });
            if (op == "eq" || op == "ne") {
              var ws = widgets2.find(function(_ref2) {
                _ref2.op;
                var widget = _ref2.widget;
                return widget && widget != "field";
              });
              if (ws) {
                opKey = ws.op;
              }
            }
          }
          if (fieldObj !== null && fieldObj !== void 0 && fieldObj.groupFieldValue) {
            if (opArg && opArg.groupFieldValue && opArg.groupFieldValue.valueSrc == "field" && opArg.groupFieldValue.value == groupField) {
              opKey = "all";
              convertedArgs = [];
            } else if (opKey == "equal" && opArg.valueSrc == "value" && opArg.valueType == "number" && opArg.value == 0) {
              opKey = "none";
              convertedArgs = [];
            } else if (opKey == "greater" && opArg.valueSrc == "value" && opArg.valueType == "number" && opArg.value == 0) {
              opKey = "some";
              convertedArgs = [];
            }
          }
          var canRev = true;
          var needWrapReverse = false;
          if (spel.not && canRev) {
            var opConfig = config2.operators[opKey];
            if (opConfig.reversedOp) {
              opKey = opConfig.reversedOp;
              spel.not = false;
            } else {
              needWrapReverse = true;
            }
          }
          if (!fieldObj)
            ;
          else if (fieldObj.groupFieldValue) {
            if (fieldObj.groupFieldValue.valueSrc != "field") {
              meta.errors.push("Expected group field ".concat(JSON.stringify(fieldObj)));
            }
            res = buildRuleGroup(fieldObj, opKey, convertedArgs, config2, meta);
          } else {
            if (fieldObj.valueSrc != "field") {
              meta.errors.push("Expected field ".concat(JSON.stringify(fieldObj)));
            }
            var _field5 = fieldObj.value;
            res = buildRule(config2, meta, _field5, opKey, convertedArgs);
          }
          if (needWrapReverse) {
            if (res.type !== "group") {
              res = wrapInDefaultConj(res, config2, spel.not);
            } else {
              res.properties.not = !res.properties.not;
            }
          }
        } else {
          if (!parentSpel) {
            res = buildSimpleSwitch(spel, conv, config2, meta);
          }
          if (!res) {
            meta.errors.push("Can't convert op ".concat(op));
          }
        }
      } else if (spel.type == "!aggr") {
        var _groupFilter;
        var groupFieldValue = convertToTree2(spel.source, conv, config2, meta, _objectSpread$g(_objectSpread$g({}, spel), {}, {
          _groupField: parentSpel === null || parentSpel === void 0 ? void 0 : parentSpel._groupField
        }));
        var groupFilter = convertToTree2(spel.filter, conv, config2, meta, _objectSpread$g(_objectSpread$g({}, spel), {}, {
          _groupField: groupFieldValue === null || groupFieldValue === void 0 ? void 0 : groupFieldValue.value
        }));
        if (((_groupFilter = groupFilter) === null || _groupFilter === void 0 ? void 0 : _groupFilter.type) == "rule") {
          groupFilter = wrapInDefaultConj(groupFilter, config2, spel.filter.not);
        }
        res = {
          groupFilter,
          groupFieldValue
        };
        if (!parentSpel) {
          res = void 0;
          meta.errors.push("Unexpected !aggr in root");
        }
      } else if (spel.type == "ternary") {
        var _children = {};
        spel.val.forEach(function(v) {
          var _v = _slicedToArray(v, 2), cond = _v[0], val = _v[1];
          var caseI = buildCase(cond, val, conv, config2, meta, spel);
          if (caseI) {
            _children[caseI.id] = caseI;
          }
        });
        res = {
          type: "switch_group",
          id: uuid$2(),
          children1: _children,
          properties: {}
        };
      } else {
        res = convertArg(spel, conv, config2, meta, parentSpel);
        if (res && !res.type && !parentSpel) {
          var sw = buildSimpleSwitch(spel, conv, config2, meta);
          if (sw) {
            res = sw;
          } else {
            res = void 0;
            meta.errors.push("Can't convert rule of type ".concat(spel.type, ", it looks like var/literal"));
          }
        }
      }
      return res;
    };
    var buildSimpleSwitch = function buildSimpleSwitch2(val, conv, config2, meta) {
      var children1 = {};
      var cond = null;
      var caseI = buildCase(cond, val, conv, config2, meta);
      if (caseI) {
        children1[caseI.id] = caseI;
      }
      var res = {
        type: "switch_group",
        id: uuid$2(),
        children1,
        properties: {}
      };
      return res;
    };
    var buildCase = function buildCase2(cond, val, conv, config2, meta) {
      var spel = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : null;
      var valProperties = buildCaseValProperties(config2, meta, conv, val, spel);
      var caseI;
      if (cond) {
        caseI = convertToTree(cond, conv, config2, meta, spel);
        if (caseI && caseI.type) {
          if (caseI.type != "group") {
            caseI = wrapInDefaultConj(caseI, config2);
          }
          caseI.type = "case_group";
        } else {
          meta.errors.push("Unexpected case: ".concat(JSON.stringify(caseI)));
          caseI = void 0;
        }
      } else {
        caseI = {
          id: uuid$2(),
          type: "case_group",
          properties: {}
        };
      }
      if (caseI) {
        caseI.properties = _objectSpread$g(_objectSpread$g({}, caseI.properties), valProperties);
      }
      return caseI;
    };
    var buildCaseValueConcat = function buildCaseValueConcat2(spel, conv, config2, meta) {
      var flat = [];
      function _processConcatChildren(children) {
        children.map(function(child) {
          if (child.type == "op-plus") {
            _processConcatChildren(child.children);
          } else {
            var convertedChild = convertArg(child, conv, config2, meta, spel);
            if (convertedChild) {
              flat.push(convertedChild);
            } else {
              meta.errors.push("Can't convert ".concat(child.type, " in concatenation"));
            }
          }
        });
      }
      _processConcatChildren(spel.children);
      return {
        valueSrc: "value",
        valueType: "case_value",
        value: flat
      };
    };
    var buildCaseValProperties = function buildCaseValProperties2(config2, meta, conv, val) {
      var spel = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      var valProperties = {};
      var convVal;
      if ((val === null || val === void 0 ? void 0 : val.type) == "op-plus") {
        convVal = buildCaseValueConcat(val, conv, config2, meta);
      } else {
        convVal = convertArg(val, conv, config2, meta, spel);
      }
      var widgetDef = config2.widgets["case_value"];
      var importCaseValue = widgetDef === null || widgetDef === void 0 ? void 0 : widgetDef.spelImportValue;
      if (importCaseValue) {
        var _importCaseValue = importCaseValue(convVal), _importCaseValue2 = _slicedToArray(_importCaseValue, 2), normVal = _importCaseValue2[0], normErrors = _importCaseValue2[1];
        normErrors.map(function(e) {
          return meta.errors.push(e);
        });
        if (normVal) {
          valProperties = {
            value: [normVal],
            valueSrc: ["value"],
            valueType: ["case_value"]
          };
        }
      } else {
        meta.errors.push("No fucntion to import case value");
      }
      return valProperties;
    };
    var wrapInDefaultConj = function wrapInDefaultConj2(rule2, config2) {
      var not = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      return {
        type: "group",
        id: uuid$2(),
        children1: _defineProperty$1({}, rule2.id, rule2),
        properties: {
          conjunction: defaultConjunction(config2),
          not: not || false
        }
      };
    };
    const Import = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      getTree: getTree$1,
      loadTree: loadTree$1,
      checkTree: checkTree$1,
      isValidTree,
      isImmutableTree,
      isTree,
      isJsonLogic,
      loadFromJsonLogic: loadFromJsonLogic$1,
      _loadFromJsonLogic,
      loadFromSpel,
      _loadFromSpel
    }, Symbol.toStringTag, { value: "Module" }));
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value2 = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve(value2);
      } else {
        Promise.resolve(value2).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn) {
      return function() {
        var self2 = this, args = arguments;
        return new Promise(function(resolve, reject) {
          var gen = fn.apply(self2, args);
          function _next(value2) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value2);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    var regeneratorRuntime$1 = { exports: {} };
    var _typeof = { exports: {} };
    (function(module2) {
      function _typeof2(obj) {
        "@babel/helpers - typeof";
        return module2.exports = _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports, _typeof2(obj);
      }
      module2.exports = _typeof2, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    })(_typeof);
    (function(module2) {
      var _typeof$12 = _typeof.exports["default"];
      function _regeneratorRuntime() {
        module2.exports = _regeneratorRuntime = function _regeneratorRuntime2() {
          return exports2;
        }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
        var exports2 = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty2 = Object.defineProperty || function(obj, key, desc) {
          obj[key] = desc.value;
        }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
        function define(obj, key, value2) {
          return Object.defineProperty(obj, key, {
            value: value2,
            enumerable: true,
            configurable: true,
            writable: true
          }), obj[key];
        }
        try {
          define({}, "");
        } catch (err) {
          define = function define2(obj, key, value2) {
            return obj[key] = value2;
          };
        }
        function wrap(innerFn, outerFn, self2, tryLocsList) {
          var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context2 = new Context(tryLocsList || []);
          return defineProperty2(generator, "_invoke", {
            value: makeInvokeMethod(innerFn, self2, context2)
          }), generator;
        }
        function tryCatch(fn, obj, arg) {
          try {
            return {
              type: "normal",
              arg: fn.call(obj, arg)
            };
          } catch (err) {
            return {
              type: "throw",
              arg: err
            };
          }
        }
        exports2.wrap = wrap;
        var ContinueSentinel = {};
        function Generator() {
        }
        function GeneratorFunction() {
        }
        function GeneratorFunctionPrototype() {
        }
        var IteratorPrototype = {};
        define(IteratorPrototype, iteratorSymbol, function() {
          return this;
        });
        var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([])));
        NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
        var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
        function defineIteratorMethods(prototype) {
          ["next", "throw", "return"].forEach(function(method) {
            define(prototype, method, function(arg) {
              return this._invoke(method, arg);
            });
          });
        }
        function AsyncIterator(generator, PromiseImpl) {
          function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if ("throw" !== record.type) {
              var result = record.arg, value2 = result.value;
              return value2 && "object" == _typeof$12(value2) && hasOwn.call(value2, "__await") ? PromiseImpl.resolve(value2.__await).then(function(value3) {
                invoke("next", value3, resolve, reject);
              }, function(err) {
                invoke("throw", err, resolve, reject);
              }) : PromiseImpl.resolve(value2).then(function(unwrapped) {
                result.value = unwrapped, resolve(result);
              }, function(error) {
                return invoke("throw", error, resolve, reject);
              });
            }
            reject(record.arg);
          }
          var previousPromise;
          defineProperty2(this, "_invoke", {
            value: function value2(method, arg) {
              function callInvokeWithMethodAndArg() {
                return new PromiseImpl(function(resolve, reject) {
                  invoke(method, arg, resolve, reject);
                });
              }
              return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
            }
          });
        }
        function makeInvokeMethod(innerFn, self2, context2) {
          var state = "suspendedStart";
          return function(method, arg) {
            if ("executing" === state)
              throw new Error("Generator is already running");
            if ("completed" === state) {
              if ("throw" === method)
                throw arg;
              return doneResult();
            }
            for (context2.method = method, context2.arg = arg; ; ) {
              var delegate = context2.delegate;
              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context2);
                if (delegateResult) {
                  if (delegateResult === ContinueSentinel)
                    continue;
                  return delegateResult;
                }
              }
              if ("next" === context2.method)
                context2.sent = context2._sent = context2.arg;
              else if ("throw" === context2.method) {
                if ("suspendedStart" === state)
                  throw state = "completed", context2.arg;
                context2.dispatchException(context2.arg);
              } else
                "return" === context2.method && context2.abrupt("return", context2.arg);
              state = "executing";
              var record = tryCatch(innerFn, self2, context2);
              if ("normal" === record.type) {
                if (state = context2.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel)
                  continue;
                return {
                  value: record.arg,
                  done: context2.done
                };
              }
              "throw" === record.type && (state = "completed", context2.method = "throw", context2.arg = record.arg);
            }
          };
        }
        function maybeInvokeDelegate(delegate, context2) {
          var methodName = context2.method, method = delegate.iterator[methodName];
          if (void 0 === method)
            return context2.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context2.method = "return", context2.arg = void 0, maybeInvokeDelegate(delegate, context2), "throw" === context2.method) || "return" !== methodName && (context2.method = "throw", context2.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
          var record = tryCatch(method, delegate.iterator, context2.arg);
          if ("throw" === record.type)
            return context2.method = "throw", context2.arg = record.arg, context2.delegate = null, ContinueSentinel;
          var info = record.arg;
          return info ? info.done ? (context2[delegate.resultName] = info.value, context2.next = delegate.nextLoc, "return" !== context2.method && (context2.method = "next", context2.arg = void 0), context2.delegate = null, ContinueSentinel) : info : (context2.method = "throw", context2.arg = new TypeError("iterator result is not an object"), context2.delegate = null, ContinueSentinel);
        }
        function pushTryEntry(locs) {
          var entry = {
            tryLoc: locs[0]
          };
          1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
        }
        function resetTryEntry(entry) {
          var record = entry.completion || {};
          record.type = "normal", delete record.arg, entry.completion = record;
        }
        function Context(tryLocsList) {
          this.tryEntries = [{
            tryLoc: "root"
          }], tryLocsList.forEach(pushTryEntry, this), this.reset(true);
        }
        function values(iterable) {
          if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod)
              return iteratorMethod.call(iterable);
            if ("function" == typeof iterable.next)
              return iterable;
            if (!isNaN(iterable.length)) {
              var i = -1, next = function next2() {
                for (; ++i < iterable.length; )
                  if (hasOwn.call(iterable, i))
                    return next2.value = iterable[i], next2.done = false, next2;
                return next2.value = void 0, next2.done = true, next2;
              };
              return next.next = next;
            }
          }
          return {
            next: doneResult
          };
        }
        function doneResult() {
          return {
            value: void 0,
            done: true
          };
        }
        return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty2(Gp, "constructor", {
          value: GeneratorFunctionPrototype,
          configurable: true
        }), defineProperty2(GeneratorFunctionPrototype, "constructor", {
          value: GeneratorFunction,
          configurable: true
        }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports2.isGeneratorFunction = function(genFun) {
          var ctor = "function" == typeof genFun && genFun.constructor;
          return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
        }, exports2.mark = function(genFun) {
          return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
        }, exports2.awrap = function(arg) {
          return {
            __await: arg
          };
        }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
          return this;
        }), exports2.AsyncIterator = AsyncIterator, exports2.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
          void 0 === PromiseImpl && (PromiseImpl = Promise);
          var iter = new AsyncIterator(wrap(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
          return exports2.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
        }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function() {
          return this;
        }), define(Gp, "toString", function() {
          return "[object Generator]";
        }), exports2.keys = function(val) {
          var object = Object(val), keys2 = [];
          for (var key in object)
            keys2.push(key);
          return keys2.reverse(), function next() {
            for (; keys2.length; ) {
              var key2 = keys2.pop();
              if (key2 in object)
                return next.value = key2, next.done = false, next;
            }
            return next.done = true, next;
          };
        }, exports2.values = values, Context.prototype = {
          constructor: Context,
          reset: function reset(skipTempReset) {
            if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(resetTryEntry), !skipTempReset)
              for (var name in this)
                "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = void 0);
          },
          stop: function stop() {
            this.done = true;
            var rootRecord = this.tryEntries[0].completion;
            if ("throw" === rootRecord.type)
              throw rootRecord.arg;
            return this.rval;
          },
          dispatchException: function dispatchException(exception) {
            if (this.done)
              throw exception;
            var context2 = this;
            function handle(loc, caught) {
              return record.type = "throw", record.arg = exception, context2.next = loc, caught && (context2.method = "next", context2.arg = void 0), !!caught;
            }
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i], record = entry.completion;
              if ("root" === entry.tryLoc)
                return handle("end");
              if (entry.tryLoc <= this.prev) {
                var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc");
                if (hasCatch && hasFinally) {
                  if (this.prev < entry.catchLoc)
                    return handle(entry.catchLoc, true);
                  if (this.prev < entry.finallyLoc)
                    return handle(entry.finallyLoc);
                } else if (hasCatch) {
                  if (this.prev < entry.catchLoc)
                    return handle(entry.catchLoc, true);
                } else {
                  if (!hasFinally)
                    throw new Error("try statement without catch or finally");
                  if (this.prev < entry.finallyLoc)
                    return handle(entry.finallyLoc);
                }
              }
            }
          },
          abrupt: function abrupt(type, arg) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                var finallyEntry = entry;
                break;
              }
            }
            finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
            var record = finallyEntry ? finallyEntry.completion : {};
            return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
          },
          complete: function complete(record, afterLoc) {
            if ("throw" === record.type)
              throw record.arg;
            return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
          },
          finish: function finish(finallyLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.finallyLoc === finallyLoc)
                return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
            }
          },
          "catch": function _catch(tryLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.tryLoc === tryLoc) {
                var record = entry.completion;
                if ("throw" === record.type) {
                  var thrown = record.arg;
                  resetTryEntry(entry);
                }
                return thrown;
              }
            }
            throw new Error("illegal catch attempt");
          },
          delegateYield: function delegateYield(iterable, resultName, nextLoc) {
            return this.delegate = {
              iterator: values(iterable),
              resultName,
              nextLoc
            }, "next" === this.method && (this.arg = void 0), ContinueSentinel;
          }
        }, exports2;
      }
      module2.exports = _regeneratorRuntime, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    })(regeneratorRuntime$1);
    var runtime = regeneratorRuntime$1.exports();
    var regenerator = runtime;
    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
    var simulateAsyncFetch = function simulateAsyncFetch2(all) {
      var cPageSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      var delay = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1e3;
      return /* @__PURE__ */ function() {
        var _ref = _asyncToGenerator(/* @__PURE__ */ regenerator.mark(function _callee(search, offset2, meta) {
          var pageSize, filtered, currentOffset, values, newOffset, hasMore;
          return regenerator.wrap(function _callee$(_context) {
            while (1)
              switch (_context.prev = _context.next) {
                case 0:
                  pageSize = meta.pageSize != void 0 ? meta.pageSize : cPageSize;
                  filtered = listValuesToArray(all).filter(function(_ref2) {
                    var title = _ref2.title;
                    return search == null ? true : title.toUpperCase().indexOf(search.toUpperCase()) != -1;
                  });
                  pageSize ? Math.ceil(filtered.length / pageSize) : 0;
                  currentOffset = offset2 || 0;
                  values = pageSize ? filtered.slice(currentOffset, currentOffset + pageSize) : filtered;
                  newOffset = pageSize ? currentOffset + values.length : null;
                  hasMore = pageSize ? newOffset < filtered.length : false;
                  console.debug("simulateAsyncFetch", {
                    search,
                    offset: offset2,
                    values,
                    hasMore,
                    filtered
                  });
                  _context.next = 11;
                  return sleep(delay);
                case 11:
                  return _context.abrupt("return", {
                    values,
                    hasMore
                  });
                case 12:
                case "end":
                  return _context.stop();
              }
          }, _callee);
        }));
        return function(_x, _x2, _x3) {
          return _ref.apply(this, arguments);
        };
      }();
    };
    var mergeListValues = function mergeListValues2(values, newValues) {
      var toStart = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (!newValues)
        return values;
      var old = values || [];
      var newFiltered = newValues.filter(function(v) {
        return old.find(function(av) {
          return av.value == v.value;
        }) == void 0;
      });
      var merged = toStart ? [].concat(_toConsumableArray(newFiltered), _toConsumableArray(old)) : [].concat(_toConsumableArray(old), _toConsumableArray(newFiltered));
      return merged;
    };
    var listValueToOption = function listValueToOption2(lv) {
      if (lv == null)
        return null;
      var title = lv.title, value2 = lv.value, disabled = lv.disabled, groupTitle = lv.groupTitle, renderTitle = lv.renderTitle;
      var option = {
        title,
        value: value2
      };
      if (disabled)
        option.disabled = disabled;
      if (groupTitle)
        option.groupTitle = groupTitle;
      if (renderTitle)
        option.renderTitle = renderTitle;
      return option;
    };
    var getListValue = function getListValue2(selectedValue, listValues2) {
      return mapListValues$2(listValues2, function(lv) {
        return lv.value === selectedValue ? lv : null;
      }).filter(function(v) {
        return v !== null;
      }).shift();
    };
    const autocomplete = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      simulateAsyncFetch,
      mergeListValues,
      listValueToOption,
      getListValue
    }, Symbol.toStringTag, { value: "Module" }));
    const BasicUtils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      ConfigUtils: configUtils,
      RuleUtils: ruleUtils,
      FuncUtils: funcUtils,
      DefaultUtils: defaultUtils,
      TreeUtils: treeUtils,
      ExportUtils: _export,
      ListUtils: listValues,
      Autocomplete: autocomplete,
      clone: clone$3,
      moment: hooks,
      validateTree,
      validateAndFixTree: validateAndFixTree$1,
      uuid: uuid$2,
      getSwitchValues
    }, Symbol.toStringTag, { value: "Module" }));
    function ownKeys$f(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$f(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$f(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$f(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var conjunctions$2 = {
      AND: {
        label: "And",
        mongoConj: "$and",
        jsonLogicConj: "and",
        sqlConj: "AND",
        spelConj: "and",
        spelConjs: ["and", "&&"],
        reversedConj: "OR",
        formatConj: function formatConj(children, conj, not, isForDisplay) {
          return children.size > 1 ? (not ? "NOT " : "") + "(" + children.join(" " + (isForDisplay ? "AND" : "&&") + " ") + ")" : (not ? "NOT (" : "") + children.first() + (not ? ")" : "");
        },
        sqlFormatConj: function sqlFormatConj(children, conj, not) {
          return children.size > 1 ? (not ? "NOT " : "") + "(" + children.join(" AND ") + ")" : (not ? "NOT (" : "") + children.first() + (not ? ")" : "");
        },
        spelFormatConj: function spelFormatConj(children, conj, not, omitBrackets) {
          if (not)
            omitBrackets = false;
          return children.size > 1 ? (not ? "!" : "") + (omitBrackets ? "" : "(") + children.join(" && ") + (omitBrackets ? "" : ")") : (not ? "!(" : "") + children.first() + (not ? ")" : "");
        }
      },
      OR: {
        label: "Or",
        mongoConj: "$or",
        jsonLogicConj: "or",
        sqlConj: "OR",
        spelConj: "or",
        spelConjs: ["or", "||"],
        reversedConj: "AND",
        formatConj: function formatConj(children, conj, not, isForDisplay) {
          return children.size > 1 ? (not ? "NOT " : "") + "(" + children.join(" " + (isForDisplay ? "OR" : "||") + " ") + ")" : (not ? "NOT (" : "") + children.first() + (not ? ")" : "");
        },
        sqlFormatConj: function sqlFormatConj(children, conj, not) {
          return children.size > 1 ? (not ? "NOT " : "") + "(" + children.join(" OR ") + ")" : (not ? "NOT (" : "") + children.first() + (not ? ")" : "");
        },
        spelFormatConj: function spelFormatConj(children, conj, not, omitBrackets) {
          if (not)
            omitBrackets = false;
          return children.size > 1 ? (not ? "!" : "") + (omitBrackets ? "" : "(") + children.join(" || ") + (omitBrackets ? "" : ")") : (not ? "!(" : "") + children.first() + (not ? ")" : "");
        }
      }
    };
    var mongoFormatOp1 = function mongoFormatOp12(mop, mc, not, field, _op, value2, useExpr, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
      var $field = typeof field == "string" && !field.startsWith("$") ? "$" + field : field;
      var mv = mc(value2, fieldDef);
      if (mv === void 0)
        return void 0;
      if (not) {
        if (!useExpr && (!mop || mop == "$eq"))
          return _defineProperty$1({}, field, {
            "$ne": mv
          });
        return !useExpr ? _defineProperty$1({}, field, {
          "$not": _defineProperty$1({}, mop, mv)
        }) : {
          "$not": _defineProperty$1({}, mop, [$field, mv])
        };
      } else {
        if (!useExpr && (!mop || mop == "$eq"))
          return _defineProperty$1({}, field, mv);
        return !useExpr ? _defineProperty$1({}, field, _defineProperty$1({}, mop, mv)) : _defineProperty$1({}, mop, [$field, mv]);
      }
    };
    var mongoFormatOp2 = function mongoFormatOp22(mops, not, field, _op, values, useExpr, valueSrcs, valueTypes, opDef, operatorOptions, fieldDef) {
      var $field = typeof field == "string" && !field.startsWith("$") ? "$" + field : field;
      if (not) {
        var _$not3;
        return !useExpr ? _defineProperty$1({}, field, {
          "$not": (_$not3 = {}, _defineProperty$1(_$not3, mops[0], values[0]), _defineProperty$1(_$not3, mops[1], values[1]), _$not3)
        }) : {
          "$not": {
            "$and": [_defineProperty$1({}, mops[0], [$field, values[0]]), _defineProperty$1({}, mops[1], [$field, values[1]])]
          }
        };
      } else {
        var _field2;
        return !useExpr ? _defineProperty$1({}, field, (_field2 = {}, _defineProperty$1(_field2, mops[0], values[0]), _defineProperty$1(_field2, mops[1], values[1]), _field2)) : {
          "$and": [_defineProperty$1({}, mops[0], [$field, values[0]]), _defineProperty$1({}, mops[1], [$field, values[1]])]
        };
      }
    };
    var operators$2 = {
      equal: {
        label: "==",
        labelForFormat: "==",
        sqlOp: "=",
        spelOp: "==",
        spelOps: ["==", "eq"],
        reversedOp: "not_equal",
        formatOp: function formatOp(field, op, value2, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay, fieldDef) {
          var opStr = isForDisplay ? "=" : opDef.label;
          if (valueTypes == "boolean" && isForDisplay)
            return value2 == "No" ? "NOT ".concat(field) : "".concat(field);
          else
            return "".concat(field, " ").concat(opStr, " ").concat(value2);
        },
        mongoFormatOp: mongoFormatOp1.bind(null, "$eq", function(v) {
          return v;
        }, false),
        jsonLogic: "==",
        elasticSearchQueryType: "term"
      },
      not_equal: {
        isNotOp: true,
        label: "!=",
        labelForFormat: "!=",
        sqlOp: "<>",
        spelOp: "!=",
        spelOps: ["!=", "ne"],
        reversedOp: "equal",
        formatOp: function formatOp(field, op, value2, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay, fieldDef) {
          if (valueTypes == "boolean" && isForDisplay)
            return value2 == "No" ? "".concat(field) : "NOT ".concat(field);
          else
            return "".concat(field, " ").concat(opDef.label, " ").concat(value2);
        },
        mongoFormatOp: mongoFormatOp1.bind(null, "$ne", function(v) {
          return v;
        }, false),
        jsonLogic: "!="
      },
      less: {
        label: "<",
        labelForFormat: "<",
        sqlOp: "<",
        spelOp: "<",
        spelOps: ["<", "lt"],
        reversedOp: "greater_or_equal",
        mongoFormatOp: mongoFormatOp1.bind(null, "$lt", function(v) {
          return v;
        }, false),
        jsonLogic: "<",
        elasticSearchQueryType: "range"
      },
      less_or_equal: {
        label: "<=",
        labelForFormat: "<=",
        sqlOp: "<=",
        spelOp: "<=",
        spelOps: ["<=", "le"],
        reversedOp: "greater",
        mongoFormatOp: mongoFormatOp1.bind(null, "$lte", function(v) {
          return v;
        }, false),
        jsonLogic: "<=",
        elasticSearchQueryType: "range"
      },
      greater: {
        label: ">",
        labelForFormat: ">",
        sqlOp: ">",
        spelOp: ">",
        spelOps: [">", "gt"],
        reversedOp: "less_or_equal",
        mongoFormatOp: mongoFormatOp1.bind(null, "$gt", function(v) {
          return v;
        }, false),
        jsonLogic: ">",
        elasticSearchQueryType: "range"
      },
      greater_or_equal: {
        label: ">=",
        labelForFormat: ">=",
        sqlOp: ">=",
        spelOp: ">=",
        spelOps: [">=", "ge"],
        reversedOp: "less",
        mongoFormatOp: mongoFormatOp1.bind(null, "$gte", function(v) {
          return v;
        }, false),
        jsonLogic: ">=",
        elasticSearchQueryType: "range"
      },
      like: {
        label: "Contains",
        labelForFormat: "Contains",
        reversedOp: "not_like",
        sqlOp: "LIKE",
        spelOp: ".contains",
        spelOps: ["matches", ".contains"],
        mongoFormatOp: mongoFormatOp1.bind(null, "$regex", function(v) {
          return typeof v == "string" ? escapeRegExp(v) : void 0;
        }, false),
        jsonLogic: "in",
        _jsonLogicIsRevArgs: true,
        valueSources: ["value"],
        elasticSearchQueryType: "regexp"
      },
      not_like: {
        isNotOp: true,
        label: "Not contains",
        reversedOp: "like",
        labelForFormat: "Not Contains",
        sqlOp: "NOT LIKE",
        mongoFormatOp: mongoFormatOp1.bind(null, "$regex", function(v) {
          return typeof v == "string" ? escapeRegExp(v) : void 0;
        }, true),
        valueSources: ["value"]
      },
      starts_with: {
        label: "Starts with",
        labelForFormat: "Starts with",
        sqlOp: "LIKE",
        spelOp: ".startsWith",
        spelOps: ["matches", ".startsWith"],
        mongoFormatOp: mongoFormatOp1.bind(null, "$regex", function(v) {
          return typeof v == "string" ? "^" + escapeRegExp(v) : void 0;
        }, false),
        jsonLogic: void 0,
        valueSources: ["value"]
      },
      ends_with: {
        label: "Ends with",
        labelForFormat: "Ends with",
        sqlOp: "LIKE",
        spelOp: ".endsWith",
        spelOps: ["matches", ".endsWith"],
        mongoFormatOp: mongoFormatOp1.bind(null, "$regex", function(v) {
          return typeof v == "string" ? escapeRegExp(v) + "$" : void 0;
        }, false),
        jsonLogic: void 0,
        valueSources: ["value"]
      },
      between: {
        label: "Between",
        labelForFormat: "BETWEEN",
        sqlOp: "BETWEEN",
        cardinality: 2,
        formatOp: function formatOp(field, op, values, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay) {
          var valFrom = values.first();
          var valTo = values.get(1);
          if (isForDisplay)
            return "".concat(field, " BETWEEN ").concat(valFrom, " AND ").concat(valTo);
          else
            return "".concat(field, " >= ").concat(valFrom, " && ").concat(field, " <= ").concat(valTo);
        },
        spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          var valFrom = values[0];
          var valTo = values[1];
          return "".concat(field, " >= ").concat(valFrom, " && ").concat(field, " <= ").concat(valTo);
        },
        mongoFormatOp: mongoFormatOp2.bind(null, ["$gte", "$lte"], false),
        valueLabels: ["Value from", "Value to"],
        textSeparators: [null, "and"],
        reversedOp: "not_between",
        jsonLogic: "<=",
        validateValues: function validateValues(values) {
          if (values[0] != void 0 && values[1] != void 0) {
            return values[0] <= values[1] ? null : "Invalid range";
          }
          return null;
        },
        elasticSearchQueryType: function elasticSearchQueryType(type) {
          return type === "time" ? "filter" : "range";
        }
      },
      not_between: {
        isNotOp: true,
        label: "Not between",
        labelForFormat: "NOT BETWEEN",
        sqlOp: "NOT BETWEEN",
        cardinality: 2,
        formatOp: function formatOp(field, op, values, valueSrcs, valueTypes, opDef, operatorOptions, isForDisplay) {
          var valFrom = values.first();
          var valTo = values.get(1);
          if (isForDisplay)
            return "".concat(field, " NOT BETWEEN ").concat(valFrom, " AND ").concat(valTo);
          else
            return "(".concat(field, " < ").concat(valFrom, " || ").concat(field, " > ").concat(valTo, ")");
        },
        spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          var valFrom = values[0];
          var valTo = values[1];
          return "(".concat(field, " < ").concat(valFrom, " || ").concat(field, " > ").concat(valTo, ")");
        },
        mongoFormatOp: mongoFormatOp2.bind(null, ["$gte", "$lte"], true),
        valueLabels: ["Value from", "Value to"],
        textSeparators: [null, "and"],
        reversedOp: "between",
        validateValues: function validateValues(values) {
          if (values[0] != void 0 && values[1] != void 0) {
            return values[0] <= values[1] ? null : "Invalid range";
          }
          return null;
        }
      },
      is_empty: {
        label: "Is empty",
        labelForFormat: "IS EMPTY",
        cardinality: 0,
        reversedOp: "is_not_empty",
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return isForDisplay ? "".concat(field, " IS EMPTY") : "!".concat(field);
        },
        sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          var empty = sqlEmptyValue(fieldDef);
          return "COALESCE(".concat(field, ", ").concat(empty, ") = ").concat(empty);
        },
        spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " <= ''");
        },
        mongoFormatOp: mongoFormatOp1.bind(null, "$in", function(v, fieldDef) {
          return [mongoEmptyValue(fieldDef), null];
        }, false),
        jsonLogic: "!"
      },
      is_not_empty: {
        isNotOp: true,
        label: "Is not empty",
        labelForFormat: "IS NOT EMPTY",
        cardinality: 0,
        reversedOp: "is_empty",
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return isForDisplay ? "".concat(field, " IS NOT EMPTY") : "!!".concat(field);
        },
        sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          var empty = sqlEmptyValue(fieldDef);
          return "COALESCE(".concat(field, ", ").concat(empty, ") <> ").concat(empty);
        },
        spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " > ''");
        },
        mongoFormatOp: mongoFormatOp1.bind(null, "$nin", function(v, fieldDef) {
          return [mongoEmptyValue(fieldDef), null];
        }, false),
        jsonLogic: "!!",
        elasticSearchQueryType: "exists"
      },
      is_null: {
        label: "Is null",
        labelForFormat: "IS NULL",
        sqlOp: "IS NULL",
        cardinality: 0,
        reversedOp: "is_not_null",
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return isForDisplay ? "".concat(field, " IS NULL") : "!".concat(field);
        },
        spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " == null");
        },
        mongoFormatOp: mongoFormatOp1.bind(null, "$eq", function(v) {
          return null;
        }, false),
        jsonLogic: "=="
      },
      is_not_null: {
        label: "Is not null",
        labelForFormat: "IS NOT NULL",
        sqlOp: "IS NOT NULL",
        cardinality: 0,
        reversedOp: "is_null",
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return isForDisplay ? "".concat(field, " IS NOT NULL") : "!!".concat(field);
        },
        spelFormatOp: function spelFormatOp(field, op, values, valueSrc, valueTypes, opDef, operatorOptions, fieldDef) {
          return "".concat(field, " != null");
        },
        mongoFormatOp: mongoFormatOp1.bind(null, "$ne", function(v) {
          return null;
        }, false),
        jsonLogic: "!=",
        elasticSearchQueryType: "exists"
      },
      select_equals: {
        label: "==",
        labelForFormat: "==",
        sqlOp: "=",
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          var opStr = isForDisplay ? "=" : "==";
          return "".concat(field, " ").concat(opStr, " ").concat(value2);
        },
        spelOp: "==",
        spelOps: ["==", "eq"],
        mongoFormatOp: mongoFormatOp1.bind(null, "$eq", function(v) {
          return v;
        }, false),
        reversedOp: "select_not_equals",
        jsonLogic: "==",
        elasticSearchQueryType: "term"
      },
      select_not_equals: {
        isNotOp: true,
        label: "!=",
        labelForFormat: "!=",
        sqlOp: "<>",
        formatOp: function formatOp(field, op, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          return "".concat(field, " != ").concat(value2);
        },
        spelOp: "!=",
        spelOps: ["!=", "ne"],
        mongoFormatOp: mongoFormatOp1.bind(null, "$ne", function(v) {
          return v;
        }, false),
        reversedOp: "select_equals",
        jsonLogic: "!="
      },
      select_any_in: {
        label: "Any in",
        labelForFormat: "IN",
        sqlOp: "IN",
        formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          if (valueSrc == "value")
            return "".concat(field, " IN (").concat(values.join(", "), ")");
          else
            return "".concat(field, " IN (").concat(values, ")");
        },
        sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          if (valueSrc == "value") {
            return "".concat(field, " IN (").concat(values.join(", "), ")");
          } else
            return void 0;
        },
        spelOp: "$contains",
        mongoFormatOp: mongoFormatOp1.bind(null, "$in", function(v) {
          return v;
        }, false),
        reversedOp: "select_not_any_in",
        jsonLogic: "in",
        elasticSearchQueryType: "term"
      },
      select_not_any_in: {
        isNotOp: true,
        label: "Not in",
        labelForFormat: "NOT IN",
        sqlOp: "NOT IN",
        formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          if (valueSrc == "value")
            return "".concat(field, " NOT IN (").concat(values.join(", "), ")");
          else
            return "".concat(field, " NOT IN (").concat(values, ")");
        },
        sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          if (valueSrc == "value") {
            return "".concat(field, " NOT IN (").concat(values.join(", "), ")");
          } else
            return void 0;
        },
        mongoFormatOp: mongoFormatOp1.bind(null, "$nin", function(v) {
          return v;
        }, false),
        reversedOp: "select_any_in"
      },
      multiselect_contains: {
        label: "Contains",
        labelForFormat: "CONTAINS",
        formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          if (valueSrc == "value")
            return "".concat(field, " CONTAINS [").concat(values.join(", "), "]");
          else
            return "".concat(field, " CONTAINS ").concat(values);
        },
        reversedOp: "multiselect_not_contains",
        jsonLogic2: "some-in",
        jsonLogic: function jsonLogic(field, op, vals) {
          return {
            "some": [field, {
              "in": [{
                "var": ""
              }, vals]
            }]
          };
        },
        spelOp: "CollectionUtils.containsAny()",
        elasticSearchQueryType: "term",
        mongoFormatOp: mongoFormatOp1.bind(null, "$in", function(v) {
          return v;
        }, false)
      },
      multiselect_not_contains: {
        isNotOp: true,
        label: "Not contains",
        labelForFormat: "NOT CONTAINS",
        formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          if (valueSrc == "value")
            return "".concat(field, " NOT CONTAINS [").concat(values.join(", "), "]");
          else
            return "".concat(field, " NOT CONTAINS ").concat(values);
        },
        reversedOp: "multiselect_contains"
      },
      multiselect_equals: {
        label: "Equals",
        labelForFormat: "==",
        sqlOp: "=",
        formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          var opStr = isForDisplay ? "=" : "==";
          if (valueSrc == "value")
            return "".concat(field, " ").concat(opStr, " [").concat(values.join(", "), "]");
          else
            return "".concat(field, " ").concat(opStr, " ").concat(values);
        },
        sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          if (valueSrc == "value")
            return "".concat(field, " = '").concat(values.map(function(v) {
              return SqlString.trim(v);
            }).join(","), "'");
          else
            return void 0;
        },
        spelOp: ".equals",
        mongoFormatOp: mongoFormatOp1.bind(null, "$eq", function(v) {
          return v;
        }, false),
        reversedOp: "multiselect_not_equals",
        jsonLogic2: "all-in",
        jsonLogic: function jsonLogic(field, op, vals) {
          return {
            "all": [field, {
              "in": [{
                "var": ""
              }, vals]
            }]
          };
        },
        elasticSearchQueryType: "term"
      },
      multiselect_not_equals: {
        isNotOp: true,
        label: "Not equals",
        labelForFormat: "!=",
        sqlOp: "<>",
        formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          if (valueSrc == "value")
            return "".concat(field, " != [").concat(values.join(", "), "]");
          else
            return "".concat(field, " != ").concat(values);
        },
        sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          if (valueSrc == "value")
            return "".concat(field, " != '").concat(values.map(function(v) {
              return SqlString.trim(v);
            }).join(","), "'");
          else
            return void 0;
        },
        mongoFormatOp: mongoFormatOp1.bind(null, "$ne", function(v) {
          return v;
        }, false),
        reversedOp: "multiselect_equals"
      },
      proximity: {
        label: "Proximity search",
        cardinality: 2,
        valueLabels: [{
          label: "Word 1",
          placeholder: "Enter first word"
        }, {
          label: "Word 2",
          placeholder: "Enter second word"
        }],
        textSeparators: [],
        formatOp: function formatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, isForDisplay) {
          var val1 = values.first();
          var val2 = values.get(1);
          var prox = operatorOptions.get("proximity");
          return "".concat(field, " ").concat(val1, " NEAR/").concat(prox, " ").concat(val2);
        },
        sqlFormatOp: function sqlFormatOp(field, op, values, valueSrc, valueType, opDef, operatorOptions, fieldDef) {
          var val1 = values.first();
          var val2 = values.get(1);
          var aVal1 = SqlString.trim(val1);
          var aVal2 = SqlString.trim(val2);
          var prox = operatorOptions.get("proximity");
          return "CONTAINS(".concat(field, ", 'NEAR((").concat(aVal1, ", ").concat(aVal2, "), ").concat(prox, ")')");
        },
        mongoFormatOp: void 0,
        jsonLogic: void 0,
        options: {
          optionLabel: "Near",
          optionTextBefore: "Near",
          optionPlaceholder: "Select words between",
          minProximity: 2,
          maxProximity: 10,
          defaults: {
            proximity: 2
          }
        }
      },
      some: {
        label: "Some",
        labelForFormat: "SOME",
        cardinality: 0,
        jsonLogic: "some",
        spelFormatOp: function spelFormatOp(filteredSize) {
          return "".concat(filteredSize, " > 0");
        },
        mongoFormatOp: mongoFormatOp1.bind(null, "$gt", function(v) {
          return 0;
        }, false)
      },
      all: {
        label: "All",
        labelForFormat: "ALL",
        cardinality: 0,
        jsonLogic: "all",
        spelFormatOp: function spelFormatOp(filteredSize, op, fullSize) {
          return "".concat(filteredSize, " == ").concat(fullSize);
        },
        mongoFormatOp: mongoFormatOp1.bind(null, "$eq", function(v) {
          return v;
        }, false)
      },
      none: {
        label: "None",
        labelForFormat: "NONE",
        cardinality: 0,
        jsonLogic: "none",
        spelFormatOp: function spelFormatOp(filteredSize) {
          return "".concat(filteredSize, " == 0");
        },
        mongoFormatOp: mongoFormatOp1.bind(null, "$eq", function(v) {
          return 0;
        }, false)
      }
    };
    var widgets$2 = {
      text: {
        type: "text",
        jsType: "string",
        valueSrc: "value",
        valueLabel: "String",
        valuePlaceholder: "Enter string",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          return isForDisplay ? stringifyForDisplay(val) : JSON.stringify(val);
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          if (opDef.spelOp == "matches" && op != "regex") {
            var regex;
            if (op == "starts_with") {
              regex = "(?s)^".concat(escapeRegExp(val), ".*");
            } else if (op == "ends_with") {
              regex = "(?s).*".concat(escapeRegExp(val), "$");
            } else {
              regex = "(?s).*".concat(escapeRegExp(val), ".*");
            }
            return spelEscape(regex);
          } else {
            return spelEscape(val);
          }
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          if (opDef.sqlOp == "LIKE" || opDef.sqlOp == "NOT LIKE") {
            return SqlString.escapeLike(val, op != "starts_with", op != "ends_with");
          } else {
            return SqlString.escape(val);
          }
        },
        toJS: function toJS(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      textarea: {
        type: "text",
        jsType: "string",
        valueSrc: "value",
        valueLabel: "Text",
        valuePlaceholder: "Enter text",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          return isForDisplay ? stringifyForDisplay(val) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          if (opDef.sqlOp == "LIKE" || opDef.sqlOp == "NOT LIKE") {
            return SqlString.escapeLike(val, op != "starts_with", op != "ends_with");
          } else {
            return SqlString.escape(val);
          }
        },
        spelFormatValue: function spelFormatValue(val) {
          return spelEscape(val);
        },
        toJS: function toJS(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        },
        fullWidth: true
      },
      number: {
        type: "number",
        jsType: "number",
        valueSrc: "value",
        valueLabel: "Number",
        valuePlaceholder: "Enter number",
        valueLabels: [{
          label: "Number from",
          placeholder: "Enter number from"
        }, {
          label: "Number to",
          placeholder: "Enter number to"
        }],
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          return isForDisplay ? stringifyForDisplay(val) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return SqlString.escape(val);
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef) {
          var isFloat = wgtDef.step && !Number.isInteger(wgtDef.step);
          return spelEscape(val, isFloat);
        },
        toJS: function toJS(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      slider: {
        type: "number",
        jsType: "number",
        valueSrc: "value",
        valueLabel: "Number",
        valuePlaceholder: "Enter number or move slider",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          return isForDisplay ? stringifyForDisplay(val) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return SqlString.escape(val);
        },
        spelFormatValue: function spelFormatValue(val) {
          return spelEscape(val);
        },
        toJS: function toJS(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      select: {
        type: "select",
        jsType: "string",
        valueSrc: "value",
        valueLabel: "Value",
        valuePlaceholder: "Select value",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          var valLabel = getTitleInListValues$1(fieldDef.fieldSettings.listValues || fieldDef.asyncListValues, val);
          return isForDisplay ? stringifyForDisplay(valLabel) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return SqlString.escape(val);
        },
        spelFormatValue: function spelFormatValue(val) {
          return spelEscape(val);
        },
        toJS: function toJS(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      multiselect: {
        type: "multiselect",
        jsType: "array",
        valueSrc: "value",
        valueLabel: "Values",
        valuePlaceholder: "Select values",
        formatValue: function formatValue2(vals, fieldDef, wgtDef, isForDisplay) {
          var valsLabels = vals.map(function(v) {
            return getTitleInListValues$1(fieldDef.fieldSettings.listValues || fieldDef.asyncListValues, v);
          });
          return isForDisplay ? valsLabels.map(stringifyForDisplay) : vals.map(JSON.stringify);
        },
        sqlFormatValue: function sqlFormatValue(vals, fieldDef, wgtDef, op, opDef) {
          return vals.map(function(v) {
            return SqlString.escape(v);
          });
        },
        spelFormatValue: function spelFormatValue(vals, fieldDef, wgtDef, op, opDef) {
          var isCallable = opDef.spelOp && opDef.spelOp[0] == "$";
          var res = spelEscape(vals);
          if (isCallable) {
            res = spelFixList(res);
          }
          return res;
        },
        toJS: function toJS(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      date: {
        type: "date",
        jsType: "string",
        valueSrc: "value",
        dateFormat: "DD.MM.YYYY",
        valueFormat: "YYYY-MM-DD",
        useKeyboard: true,
        valueLabel: "Date",
        valuePlaceholder: "Enter date",
        valueLabels: [{
          label: "Date from",
          placeholder: "Enter date from"
        }, {
          label: "Date to",
          placeholder: "Enter date to"
        }],
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          var dateVal = hooks(val, wgtDef.valueFormat);
          return isForDisplay ? dateVal.format(wgtDef.dateFormat) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = hooks(val, wgtDef.valueFormat);
          return SqlString.escape(dateVal.format("YYYY-MM-DD"));
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = hooks(val, wgtDef.valueFormat);
          return "new java.text.SimpleDateFormat('yyyy-MM-dd').parse('".concat(dateVal.format("YYYY-MM-DD"), "')");
        },
        jsonLogic: function jsonLogic(val, fieldDef, wgtDef) {
          return hooks(val, wgtDef.valueFormat).toDate();
        },
        toJS: function toJS(val, fieldSettings) {
          var dateVal = hooks(val, fieldSettings.valueFormat);
          return dateVal.isValid() ? dateVal.toDate() : void 0;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          var dateVal = hooks(val, wgtDef.valueFormat);
          return dateVal.isValid() ? dateVal.toDate() : void 0;
        }
      },
      time: {
        type: "time",
        jsType: "string",
        valueSrc: "value",
        timeFormat: "HH:mm",
        valueFormat: "HH:mm:ss",
        use12Hours: false,
        useKeyboard: true,
        valueLabel: "Time",
        valuePlaceholder: "Enter time",
        valueLabels: [{
          label: "Time from",
          placeholder: "Enter time from"
        }, {
          label: "Time to",
          placeholder: "Enter time to"
        }],
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          var dateVal = hooks(val, wgtDef.valueFormat);
          return isForDisplay ? dateVal.format(wgtDef.timeFormat) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = hooks(val, wgtDef.valueFormat);
          return SqlString.escape(dateVal.format("HH:mm:ss"));
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = hooks(val, wgtDef.valueFormat);
          return "T(java.time.LocalTime).parse('".concat(dateVal.format("HH:mm:ss"), "')");
        },
        jsonLogic: function jsonLogic(val, fieldDef, wgtDef) {
          var dateVal = hooks(val, wgtDef.valueFormat);
          return dateVal.get("hour") * 60 * 60 + dateVal.get("minute") * 60 + dateVal.get("second");
        },
        toJS: function toJS(val, fieldSettings) {
          var dateVal = hooks(val, fieldSettings.valueFormat);
          return dateVal.isValid() ? dateVal.get("hour") * 60 * 60 + dateVal.get("minute") * 60 + dateVal.get("second") : void 0;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          var dateVal = hooks(val, wgtDef.valueFormat);
          return dateVal.get("hour") * 60 * 60 + dateVal.get("minute") * 60 + dateVal.get("second");
        },
        elasticSearchFormatValue: function elasticSearchFormatValue(queryType, value2, operator, fieldName) {
          return {
            script: {
              script: {
                source: "doc[".concat(fieldName, "][0].getHour() >== params.min && doc[").concat(fieldName, "][0].getHour() <== params.max"),
                params: {
                  min: value2[0],
                  max: value2[1]
                }
              }
            }
          };
        }
      },
      datetime: {
        type: "datetime",
        jsType: "string",
        valueSrc: "value",
        timeFormat: "HH:mm",
        dateFormat: "DD.MM.YYYY",
        valueFormat: "YYYY-MM-DD HH:mm:ss",
        use12Hours: false,
        useKeyboard: true,
        valueLabel: "Datetime",
        valuePlaceholder: "Enter datetime",
        valueLabels: [{
          label: "Datetime from",
          placeholder: "Enter datetime from"
        }, {
          label: "Datetime to",
          placeholder: "Enter datetime to"
        }],
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          var dateVal = hooks(val, wgtDef.valueFormat);
          return isForDisplay ? dateVal.format(wgtDef.dateFormat + " " + wgtDef.timeFormat) : JSON.stringify(val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = hooks(val, wgtDef.valueFormat);
          return SqlString.escape(dateVal.toDate());
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          var dateVal = hooks(val, wgtDef.valueFormat);
          return "new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss').parse('".concat(dateVal.format("YYYY-MM-DD HH:mm:ss"), "')");
        },
        jsonLogic: function jsonLogic(val, fieldDef, wgtDef) {
          return hooks(val, wgtDef.valueFormat).toDate();
        },
        toJS: function toJS(val, fieldSettings) {
          var dateVal = hooks(val, fieldSettings.valueFormat);
          return dateVal.isValid() ? dateVal.toDate() : void 0;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          var dateVal = hooks(val, wgtDef.valueFormat);
          return dateVal.isValid() ? dateVal.toDate() : void 0;
        }
      },
      "boolean": {
        type: "boolean",
        jsType: "boolean",
        valueSrc: "value",
        labelYes: "Yes",
        labelNo: "No",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay) {
          return isForDisplay ? val ? "Yes" : "No" : JSON.stringify(!!val);
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return SqlString.escape(val);
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return spelEscape(val);
        },
        defaultValue: false,
        toJS: function toJS(val, fieldSettings) {
          return val;
        },
        mongoFormatValue: function mongoFormatValue(val, fieldDef, wgtDef) {
          return val;
        }
      },
      field: {
        valueSrc: "field",
        formatValue: function formatValue2(val, fieldDef, wgtDef, isForDisplay, op, opDef, rightFieldDef) {
          return isForDisplay ? rightFieldDef.label || val : val;
        },
        sqlFormatValue: function sqlFormatValue(val, fieldDef, wgtDef, op, opDef, rightFieldDef) {
          return val;
        },
        spelFormatValue: function spelFormatValue(val, fieldDef, wgtDef, op, opDef) {
          return val;
        },
        valueLabel: "Field to compare",
        valuePlaceholder: "Select field to compare"
      },
      func: {
        valueSrc: "func",
        valueLabel: "Function",
        valuePlaceholder: "Select function"
      },
      case_value: {
        valueSrc: "value",
        type: "case_value",
        spelFormatValue: function spelFormatValue(val) {
          return spelEscape(val === "" ? null : val);
        },
        spelImportValue: function spelImportValue(val) {
          return [val.value, []];
        }
      }
    };
    var types$3 = {
      text: {
        defaultOperator: "equal",
        mainWidget: "text",
        widgets: {
          text: {
            operators: ["equal", "not_equal", "like", "not_like", "starts_with", "ends_with", "proximity", "is_empty", "is_not_empty", "is_null", "is_not_null"],
            widgetProps: {},
            opProps: {}
          },
          textarea: {
            operators: ["equal", "not_equal", "like", "not_like", "starts_with", "ends_with", "is_empty", "is_not_empty", "is_null", "is_not_null"],
            widgetProps: {},
            opProps: {}
          },
          field: {
            operators: [
              "equal",
              "not_equal",
              "proximity"
            ]
          }
        }
      },
      number: {
        defaultOperator: "equal",
        mainWidget: "number",
        widgets: {
          number: {
            operators: [
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              "between",
              "not_between",
              "is_null",
              "is_not_null"
            ]
          },
          slider: {
            operators: [
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      date: {
        defaultOperator: "equal",
        widgets: {
          date: {
            operators: [
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              "between",
              "not_between",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      time: {
        defaultOperator: "equal",
        widgets: {
          time: {
            operators: [
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              "between",
              "not_between",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      datetime: {
        defaultOperator: "equal",
        widgets: {
          datetime: {
            operators: [
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              "between",
              "not_between",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      select: {
        mainWidget: "select",
        defaultOperator: "select_equals",
        widgets: {
          select: {
            operators: [
              "select_equals",
              "select_not_equals",
              "is_null",
              "is_not_null"
            ]
          },
          multiselect: {
            operators: [
              "select_any_in",
              "select_not_any_in",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      multiselect: {
        defaultOperator: "multiselect_equals",
        widgets: {
          multiselect: {
            operators: [
              "multiselect_contains",
              "multiselect_not_contains",
              "multiselect_equals",
              "multiselect_not_equals",
              "is_null",
              "is_not_null"
            ]
          }
        }
      },
      "boolean": {
        defaultOperator: "equal",
        widgets: {
          "boolean": {
            operators: ["equal", "not_equal", "is_null", "is_not_null"],
            widgetProps: {}
          },
          field: {
            operators: ["equal", "not_equal"]
          }
        }
      },
      "!group": {
        defaultOperator: "some",
        mainWidget: "number",
        widgets: {
          number: {
            widgetProps: {
              min: 0
            },
            operators: [
              "some",
              "all",
              "none",
              "equal",
              "not_equal",
              "less",
              "less_or_equal",
              "greater",
              "greater_or_equal",
              "between",
              "not_between"
            ],
            opProps: {
              equal: {
                label: "Count =="
              },
              not_equal: {
                label: "Count !="
              },
              less: {
                label: "Count <"
              },
              less_or_equal: {
                label: "Count <="
              },
              greater: {
                label: "Count >"
              },
              greater_or_equal: {
                label: "Count >="
              },
              between: {
                label: "Count between"
              },
              not_between: {
                label: "Count not between"
              }
            }
          }
        }
      },
      "case_value": {
        mainWidget: "case_value",
        widgets: {
          case_value: {}
        }
      }
    };
    var settings$2 = _objectSpread$f(_objectSpread$f({}, settings$3), {}, {
      convertableWidgets: {
        "number": ["slider", "rangeslider"],
        "slider": ["number", "rangeslider"],
        "rangeslider": ["number", "slider"],
        "text": ["textarea"],
        "textarea": ["text"]
      },
      formatSpelField: function formatSpelField(field, parentField, parts, partsExt, fieldDefinition, config2) {
        var fieldName = partsExt.map(function(_ref12, ind) {
          var key = _ref12.key, parent2 = _ref12.parent;
          if (ind == 0) {
            if (parent2 == "[map]")
              return "#this[".concat(spelEscape(key), "]");
            else if (parent2 == "[class]")
              return key;
            else
              return key;
          } else {
            if (parent2 == "map" || parent2 == "[map]")
              return "[".concat(spelEscape(key), "]");
            else if (parent2 == "class" || parent2 == "[class]")
              return ".".concat(key);
            else
              return ".".concat(key);
          }
        }).join("");
        if (fieldDefinition.isSpelVariable) {
          fieldName = "#" + fieldName;
        }
        return fieldName;
      },
      sqlFormatReverse: function sqlFormatReverse(q) {
        if (q == void 0)
          return void 0;
        return "NOT(" + q + ")";
      },
      spelFormatReverse: function spelFormatReverse(q) {
        if (q == void 0)
          return void 0;
        return "!(" + q + ")";
      },
      formatReverse: function formatReverse(q, operator, reversedOp, operatorDefinition, revOperatorDefinition, isForDisplay) {
        if (q == void 0)
          return void 0;
        if (isForDisplay)
          return "NOT (" + q + ")";
        else
          return "!(" + q + ")";
      },
      formatAggr: function formatAggr(whereStr, aggrField, operator, value2, valueSrc, valueType, opDef, operatorOptions, isForDisplay, aggrFieldDef) {
        var labelForFormat = opDef.labelForFormat, cardinality = opDef.cardinality;
        if (cardinality == 0) {
          var cond = whereStr ? " HAVE ".concat(whereStr) : "";
          return "".concat(labelForFormat, " OF ").concat(aggrField).concat(cond);
        } else if (cardinality == void 0 || cardinality == 1) {
          var _cond = whereStr ? " WHERE ".concat(whereStr) : "";
          return "COUNT OF ".concat(aggrField).concat(_cond, " ").concat(labelForFormat, " ").concat(value2);
        } else if (cardinality == 2) {
          var _cond2 = whereStr ? " WHERE ".concat(whereStr) : "";
          var valFrom = value2.first();
          var valTo = value2.get(1);
          return "COUNT OF ".concat(aggrField).concat(_cond2, " ").concat(labelForFormat, " ").concat(valFrom, " AND ").concat(valTo);
        }
      },
      jsonLogic: {
        groupVarKey: "var",
        altVarKey: "var",
        lockedOp: "locked"
      },
      canCompareFieldWithField: function canCompareFieldWithField(leftField, leftFieldConfig, rightField, rightFieldConfig) {
        return true;
      },
      valueSourcesInfo: {
        value: {
          label: "Value"
        },
        field: {
          label: "Field",
          widget: "field"
        },
        func: {
          label: "Function",
          widget: "func"
        }
      }
    });
    const CoreConfig = {
      conjunctions: conjunctions$2,
      operators: operators$2,
      widgets: widgets$2,
      types: types$3,
      settings: settings$2
    };
    var ADD_GROUP = "ADD_GROUP";
    var ADD_CASE_GROUP = "ADD_CASE_GROUP";
    var REMOVE_GROUP = "REMOVE_GROUP";
    var SET_CONJUNCTION = "SET_CONJUNCTION";
    var SET_NOT = "SET_NOT";
    var ADD_RULE = "ADD_RULE";
    var REMOVE_RULE = "REMOVE_RULE";
    var SET_FIELD = "SET_FIELD";
    var SET_OPERATOR = "SET_OPERATOR";
    var SET_VALUE = "SET_VALUE";
    var SET_VALUE_SRC = "SET_VALUE_SRC";
    var SET_OPERATOR_OPTION = "SET_OPERATOR_OPTION";
    var SET_LOCK = "SET_LOCK";
    var SET_TREE = "SET_TREE";
    var MOVE_ITEM = "MOVE_ITEM";
    var PLACEMENT_AFTER$1 = "after";
    var PLACEMENT_BEFORE$1 = "before";
    var PLACEMENT_APPEND$1 = "append";
    var PLACEMENT_PREPEND$1 = "prepend";
    var SET_DRAG_PROGRESS$1 = "SET_DRAG_PROGRESS";
    var SET_DRAG_START$1 = "SET_DRAG_START";
    var SET_DRAG_END$1 = "SET_DRAG_END";
    var baseFor = _baseFor, keys$1 = keys_1;
    function baseForOwn$1(object, iteratee) {
      return object && baseFor(object, iteratee, keys$1);
    }
    var _baseForOwn = baseForOwn$1;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd$1(value2) {
      this.__data__.set(value2, HASH_UNDEFINED);
      return this;
    }
    var _setCacheAdd = setCacheAdd$1;
    function setCacheHas$1(value2) {
      return this.__data__.has(value2);
    }
    var _setCacheHas = setCacheHas$1;
    var MapCache = _MapCache, setCacheAdd = _setCacheAdd, setCacheHas = _setCacheHas;
    function SetCache$1(values) {
      var index = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    SetCache$1.prototype.add = SetCache$1.prototype.push = setCacheAdd;
    SetCache$1.prototype.has = setCacheHas;
    var _SetCache = SetCache$1;
    function arraySome$1(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    var _arraySome = arraySome$1;
    function cacheHas$1(cache, key) {
      return cache.has(key);
    }
    var _cacheHas = cacheHas$1;
    var SetCache = _SetCache, arraySome = _arraySome, cacheHas = _cacheHas;
    var COMPARE_PARTIAL_FLAG$5 = 1, COMPARE_UNORDERED_FLAG$3 = 2;
    function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    var _equalArrays = equalArrays$2;
    function mapToArray$1(map2) {
      var index = -1, result = Array(map2.size);
      map2.forEach(function(value2, key) {
        result[++index] = [key, value2];
      });
      return result;
    }
    var _mapToArray = mapToArray$1;
    function setToArray$1(set2) {
      var index = -1, result = Array(set2.size);
      set2.forEach(function(value2) {
        result[++index] = value2;
      });
      return result;
    }
    var _setToArray = setToArray$1;
    var Symbol$1 = _Symbol, Uint8Array2 = _Uint8Array, eq = eq_1, equalArrays$1 = _equalArrays, mapToArray = _mapToArray, setToArray = _setToArray;
    var COMPARE_PARTIAL_FLAG$4 = 1, COMPARE_UNORDERED_FLAG$2 = 2;
    var boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]";
    var symbolProto = Symbol$1 ? Symbol$1.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG$2;
          stack.set(object, other);
          var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    var _equalByTag = equalByTag$1;
    var getAllKeys = _getAllKeys;
    var COMPARE_PARTIAL_FLAG$3 = 1;
    var objectProto$1 = Object.prototype;
    var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
    function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty$1.call(other, key))) {
          return false;
        }
      }
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    var _equalObjects = equalObjects$1;
    var Stack$1 = _Stack, equalArrays = _equalArrays, equalByTag = _equalByTag, equalObjects = _equalObjects, getTag = _getTag, isArray$1 = isArray_1, isBuffer = isBuffer$4.exports, isTypedArray = isTypedArray_1;
    var COMPARE_PARTIAL_FLAG$2 = 1;
    var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray$1(object), othIsArr = isArray$1(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack$1());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack$1());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack$1());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    var _baseIsEqualDeep = baseIsEqualDeep$1;
    var baseIsEqualDeep = _baseIsEqualDeep, isObjectLike = isObjectLike_1;
    function baseIsEqual$2(value2, other, bitmask, customizer, stack) {
      if (value2 === other) {
        return true;
      }
      if (value2 == null || other == null || !isObjectLike(value2) && !isObjectLike(other)) {
        return value2 !== value2 && other !== other;
      }
      return baseIsEqualDeep(value2, other, bitmask, customizer, baseIsEqual$2, stack);
    }
    var _baseIsEqual = baseIsEqual$2;
    var Stack = _Stack, baseIsEqual$1 = _baseIsEqual;
    var COMPARE_PARTIAL_FLAG$1 = 1, COMPARE_UNORDERED_FLAG$1 = 2;
    function baseIsMatch$1(object, source, matchData, customizer) {
      var index = matchData.length, length = index, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    var _baseIsMatch = baseIsMatch$1;
    var isObject$3 = isObject_1;
    function isStrictComparable$2(value2) {
      return value2 === value2 && !isObject$3(value2);
    }
    var _isStrictComparable = isStrictComparable$2;
    var isStrictComparable$1 = _isStrictComparable, keys = keys_1;
    function getMatchData$1(object) {
      var result = keys(object), length = result.length;
      while (length--) {
        var key = result[length], value2 = object[key];
        result[length] = [key, value2, isStrictComparable$1(value2)];
      }
      return result;
    }
    var _getMatchData = getMatchData$1;
    function matchesStrictComparable$2(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    var _matchesStrictComparable = matchesStrictComparable$2;
    var baseIsMatch = _baseIsMatch, getMatchData = _getMatchData, matchesStrictComparable$1 = _matchesStrictComparable;
    function baseMatches$1(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    var _baseMatches = baseMatches$1;
    var baseGet$1 = _baseGet;
    function get$1(object, path, defaultValue2) {
      var result = object == null ? void 0 : baseGet$1(object, path);
      return result === void 0 ? defaultValue2 : result;
    }
    var get_1 = get$1;
    var baseIsEqual = _baseIsEqual, get = get_1, hasIn = hasIn_1, isKey$1 = _isKey, isStrictComparable = _isStrictComparable, matchesStrictComparable = _matchesStrictComparable, toKey$1 = _toKey;
    var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
    function baseMatchesProperty$1(path, srcValue) {
      if (isKey$1(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey$1(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }
    var _baseMatchesProperty = baseMatchesProperty$1;
    function baseProperty$1(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    var _baseProperty = baseProperty$1;
    var baseGet = _baseGet;
    function basePropertyDeep$1(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }
    var _basePropertyDeep = basePropertyDeep$1;
    var baseProperty = _baseProperty, basePropertyDeep = _basePropertyDeep, isKey = _isKey, toKey = _toKey;
    function property$1(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }
    var property_1 = property$1;
    var baseMatches = _baseMatches, baseMatchesProperty = _baseMatchesProperty, identity = identity_1, isArray = isArray_1, property = property_1;
    function baseIteratee$2(value2) {
      if (typeof value2 == "function") {
        return value2;
      }
      if (value2 == null) {
        return identity;
      }
      if (typeof value2 == "object") {
        return isArray(value2) ? baseMatchesProperty(value2[0], value2[1]) : baseMatches(value2);
      }
      return property(value2);
    }
    var _baseIteratee = baseIteratee$2;
    var baseAssignValue = _baseAssignValue, baseForOwn = _baseForOwn, baseIteratee$1 = _baseIteratee;
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = baseIteratee$1(iteratee);
      baseForOwn(object, function(value2, key, object2) {
        baseAssignValue(result, key, iteratee(value2, key, object2));
      });
      return result;
    }
    var mapValues_1 = mapValues;
    function _createForOfIteratorHelper$2(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$2(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$2(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$2(o, minLen);
    }
    function _arrayLikeToArray$2(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function ownKeys$e(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$e(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$e(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$e(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var addNewGroup = function addNewGroup2(state, path, type, groupUuid, properties, config2) {
      var children = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      var meta = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : {};
      var shouldCreateEmptyGroup = config2.settings.shouldCreateEmptyGroup;
      var groupPath = path.push(groupUuid);
      var canAddNewRule = !shouldCreateEmptyGroup;
      var isDefaultCase = !!(meta !== null && meta !== void 0 && meta.isDefaultCase);
      var origState = state;
      state = addItem(state, path, type, groupUuid, defaultGroupProperties(config2).merge(properties || {}), config2, children);
      if (state !== origState) {
        if (!children && !isDefaultCase) {
          state = state.setIn(expandTreePath(groupPath, "children1"), new Immutable.OrderedMap());
          if (canAddNewRule) {
            state = addItem(state, groupPath, "rule", uuid$2(), defaultRuleProperties(config2), config2);
          }
        }
        state = fixPathsInTree(state);
      }
      return state;
    };
    var removeGroup$1 = function removeGroup2(state, path, config2) {
      state = removeItem(state, path);
      var canLeaveEmptyGroup = config2.settings.canLeaveEmptyGroup;
      var parentPath = path.slice(0, -1);
      var isEmptyParentGroup = !hasChildren(state, parentPath);
      if (isEmptyParentGroup && !canLeaveEmptyGroup) {
        state = fixEmptyGroupsInTree(state);
        if (isEmptyTree(state) && !canLeaveEmptyGroup) {
          state = addItem(state, new Immutable.List(), "rule", uuid$2(), defaultRuleProperties(config2), config2);
        }
      }
      state = fixPathsInTree(state);
      return state;
    };
    var removeRule$1 = function removeRule2(state, path, config2) {
      state = removeItem(state, path);
      var canLeaveEmptyGroup = config2.settings.canLeaveEmptyGroup;
      var parentPath = path.pop();
      var parent2 = state.getIn(expandTreePath(parentPath));
      var parentField = parent2.getIn(["properties", "field"]);
      var parentOperator = parent2.getIn(["properties", "operator"]);
      parent2.getIn(["properties", "value", 0]);
      var parentFieldConfig = parentField ? getFieldConfig$8(config2, parentField) : null;
      var parentOperatorConfig = parentOperator ? getOperatorConfig$4(config2, parentOperator, parentField) : null;
      var hasGroupCountRule = parentField && parentOperator && parentOperatorConfig.cardinality != 0;
      var isParentRuleGroup = parent2.get("type") == "rule_group";
      var isEmptyParentGroup = !hasChildren(state, parentPath);
      var canLeaveEmpty = isParentRuleGroup ? hasGroupCountRule && parentFieldConfig.initialEmptyWhere : canLeaveEmptyGroup;
      if (isEmptyParentGroup && !canLeaveEmpty) {
        if (isParentRuleGroup) {
          state = state.deleteIn(expandTreePath(parentPath));
        }
        state = fixEmptyGroupsInTree(state);
        if (isEmptyTree(state) && !canLeaveEmptyGroup) {
          state = addItem(state, new Immutable.List(), "rule", uuid$2(), defaultRuleProperties(config2), config2);
        }
      }
      state = fixPathsInTree(state);
      return state;
    };
    var setNot$1 = function setNot2(state, path, not) {
      return state.setIn(expandTreePath(path, "properties", "not"), not);
    };
    var setLock$1 = function setLock2(state, path, lock) {
      return removeIsLockedInTree(state.setIn(expandTreePath(path, "properties", "isLocked"), lock));
    };
    var setConjunction$1 = function setConjunction2(state, path, conjunction) {
      return state.setIn(expandTreePath(path, "properties", "conjunction"), conjunction);
    };
    var _addChildren1 = function _addChildren12(config2, item, children) {
      if (children && Array.isArray(children)) {
        item.children1 = new Immutable.OrderedMap(children.reduce(function(map2, it) {
          var id1 = uuid$2();
          var it1 = _objectSpread$e(_objectSpread$e({}, it), {}, {
            properties: defaultItemProperties(config2, it).merge(it.properties || {}),
            id: id1
          });
          _addChildren12(config2, it1, it1.children1);
          return _objectSpread$e(_objectSpread$e({}, map2), {}, _defineProperty$1({}, id1, new Immutable.Map(it1)));
        }, {}));
      }
    };
    var addItem = function addItem2(state, path, type, id, properties, config2) {
      var children = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
      if (type == "switch_group")
        throw new Error("Can't add switch_group programmatically");
      var _config$settings = config2.settings, maxNumberOfCases = _config$settings.maxNumberOfCases, maxNumberOfRules = _config$settings.maxNumberOfRules, maxNesting = _config$settings.maxNesting;
      var rootType = state.get("type");
      var isTernary = rootType == "switch_group";
      var targetItem = state.getIn(expandTreePath(path));
      var caseGroup = isTernary ? state.getIn(expandTreePath(path.take(2))) : null;
      var childrenPath = expandTreePath(path, "children1");
      var targetChildren = state.getIn(childrenPath);
      var hasChildren2 = !!targetChildren && targetChildren.size;
      var targetChildrenSize = hasChildren2 ? targetChildren.size : null;
      var currentNumber, maxNumber;
      if (type == "case_group") {
        currentNumber = targetChildrenSize;
        maxNumber = maxNumberOfCases;
      } else if (type == "group") {
        currentNumber = path.size;
        maxNumber = maxNesting;
      } else if ((targetItem === null || targetItem === void 0 ? void 0 : targetItem.get("type")) == "rule_group")
        ;
      else {
        currentNumber = isTernary ? getTotalRulesCountInTree$2(caseGroup) : getTotalRulesCountInTree$2(state);
        maxNumber = maxNumberOfRules;
      }
      var canAdd = maxNumber && currentNumber ? currentNumber < maxNumber : true;
      var item = {
        type,
        id,
        properties
      };
      _addChildren1(config2, item, children);
      var isLastDefaultCase = type == "case_group" && hasChildren2 && targetChildren.last().get("children1") == null;
      if (canAdd) {
        var newChildren = new Immutable.OrderedMap(_defineProperty$1({}, id, new Immutable.Map(item)));
        if (!hasChildren2) {
          state = state.setIn(childrenPath, newChildren);
        } else if (isLastDefaultCase) {
          var _Immutable$OrderedMap2;
          var last2 = targetChildren.last();
          var newChildrenWithLast = new Immutable.OrderedMap((_Immutable$OrderedMap2 = {}, _defineProperty$1(_Immutable$OrderedMap2, id, new Immutable.Map(item)), _defineProperty$1(_Immutable$OrderedMap2, last2.get("id"), last2), _Immutable$OrderedMap2));
          state = state.deleteIn(expandTreePath(childrenPath, "children1", last2.get("id")));
          state = state.mergeIn(childrenPath, newChildrenWithLast);
        } else {
          state = state.mergeIn(childrenPath, newChildren);
        }
        state = fixPathsInTree(state);
      }
      return state;
    };
    var removeItem = function removeItem2(state, path) {
      state = state.deleteIn(expandTreePath(path));
      state = fixPathsInTree(state);
      return state;
    };
    var moveItem$1 = function moveItem2(state, fromPath, toPath, placement, config2) {
      var from2 = getItemByPath(state, fromPath);
      var sourcePath = fromPath.pop();
      var source = fromPath.size > 1 ? getItemByPath(state, sourcePath) : null;
      var sourceChildren = source ? source.get("children1") : null;
      var to2 = getItemByPath(state, toPath);
      var targetPath = placement == PLACEMENT_APPEND$1 || placement == PLACEMENT_PREPEND$1 ? toPath : toPath.pop();
      var target = placement == PLACEMENT_APPEND$1 || placement == PLACEMENT_PREPEND$1 ? to2 : toPath.size > 1 ? getItemByPath(state, targetPath) : null;
      var targetChildren = target ? target.get("children1") : null;
      if (!source || !target || !from2)
        return state;
      var isSameParent = source.get("id") == target.get("id");
      var isSourceInsideTarget = targetPath.size < sourcePath.size && deepEqual(targetPath.toArray(), sourcePath.toArray().slice(0, targetPath.size));
      var isTargetInsideSource = targetPath.size > sourcePath.size && deepEqual(sourcePath.toArray(), targetPath.toArray().slice(0, sourcePath.size));
      var sourceSubpathFromTarget = null;
      var targetSubpathFromSource = null;
      if (isSourceInsideTarget) {
        sourceSubpathFromTarget = Immutable.List(sourcePath.toArray().slice(targetPath.size));
      } else if (isTargetInsideSource) {
        targetSubpathFromSource = Immutable.List(targetPath.toArray().slice(sourcePath.size));
      }
      var newTargetChildren = targetChildren, newSourceChildren = sourceChildren;
      if (!isTargetInsideSource)
        newSourceChildren = newSourceChildren["delete"](from2.get("id"));
      if (isSameParent) {
        newTargetChildren = newSourceChildren;
      } else if (isSourceInsideTarget) {
        newTargetChildren = newTargetChildren.updateIn(expandTreeSubpath(sourceSubpathFromTarget, "children1"), function(_oldChildren) {
          return newSourceChildren;
        });
      }
      if (placement == PLACEMENT_BEFORE$1 || placement == PLACEMENT_AFTER$1) {
        newTargetChildren = Immutable.OrderedMap().withMutations(function(r) {
          var _iterator = _createForOfIteratorHelper$2(newTargetChildren.entries()), _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
              var _step$value = _slicedToArray(_step.value, 2), itemId = _step$value[0], item = _step$value[1];
              if (itemId == to2.get("id") && placement == PLACEMENT_BEFORE$1) {
                r.set(from2.get("id"), from2);
              }
              r.set(itemId, item);
              if (itemId == to2.get("id") && placement == PLACEMENT_AFTER$1) {
                r.set(from2.get("id"), from2);
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        });
      } else if (placement == PLACEMENT_APPEND$1) {
        newTargetChildren = newTargetChildren.merge(_defineProperty$1({}, from2.get("id"), from2));
      } else if (placement == PLACEMENT_PREPEND$1) {
        newTargetChildren = Immutable.OrderedMap(_defineProperty$1({}, from2.get("id"), from2)).merge(newTargetChildren);
      }
      if (isTargetInsideSource) {
        newSourceChildren = newSourceChildren.updateIn(expandTreeSubpath(targetSubpathFromSource, "children1"), function(_oldChildren) {
          return newTargetChildren;
        });
        newSourceChildren = newSourceChildren["delete"](from2.get("id"));
      }
      if (!isSameParent && !isSourceInsideTarget)
        state = state.updateIn(expandTreePath(sourcePath, "children1"), function(_oldChildren) {
          return newSourceChildren;
        });
      if (!isTargetInsideSource)
        state = state.updateIn(expandTreePath(targetPath, "children1"), function(_oldChildren) {
          return newTargetChildren;
        });
      state = fixPathsInTree(state);
      return state;
    };
    var setField$1 = function setField2(state, path, newField, config2) {
      if (!newField)
        return removeItem(state, path);
      var _config$settings2 = config2.settings, fieldSeparator = _config$settings2.fieldSeparator, setOpOnChangeField = _config$settings2.setOpOnChangeField, showErrorMessage = _config$settings2.showErrorMessage;
      if (Array.isArray(newField))
        newField = newField.join(fieldSeparator);
      var currentType = state.getIn(expandTreePath(path, "type"));
      var currentProperties = state.getIn(expandTreePath(path, "properties"));
      var wasRuleGroup = currentType == "rule_group";
      var newFieldConfig = getFieldConfig$8(config2, newField);
      var isRuleGroup = newFieldConfig.type == "!group";
      var isRuleGroupExt = isRuleGroup && newFieldConfig.mode == "array";
      var isChangeToAnotherType = wasRuleGroup != isRuleGroup;
      var currentOperator = currentProperties.get("operator");
      var currentOperatorOptions = currentProperties.get("operatorOptions");
      currentProperties.get("field");
      currentProperties.get("value");
      currentProperties.get("valueSrc", new Immutable.List());
      currentProperties.get("valueType", new Immutable.List());
      var lastOp = newFieldConfig && newFieldConfig.operators.indexOf(currentOperator) !== -1 ? currentOperator : null;
      var newOperator = null;
      var availOps = getOperatorsForField(config2, newField);
      if (availOps && availOps.length == 1)
        newOperator = availOps[0];
      else if (availOps && availOps.length > 1) {
        var _iterator2 = _createForOfIteratorHelper$2(setOpOnChangeField || []), _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var strategy = _step2.value;
            if (strategy == "keep" && !isChangeToAnotherType)
              newOperator = lastOp;
            else if (strategy == "default")
              newOperator = defaultOperator(config2, newField, false);
            else if (strategy == "first")
              newOperator = getFirstOperator(config2, newField);
            if (newOperator)
              break;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      if (!isRuleGroup && !newFieldConfig.operators) {
        console.warn("Type ".concat(newFieldConfig.type, " is not supported"));
        return state;
      }
      if (wasRuleGroup && !isRuleGroup) {
        state = state.setIn(expandTreePath(path, "type"), "rule");
        state = state.deleteIn(expandTreePath(path, "children1"));
        state = state.setIn(expandTreePath(path, "properties"), new Immutable.OrderedMap());
      }
      if (isRuleGroup) {
        state = state.setIn(expandTreePath(path, "type"), "rule_group");
        var _getNewValueForFieldO = getNewValueForFieldOp(config2, config2, currentProperties, newField, newOperator, "field", true);
        _getNewValueForFieldO.canReuseValue;
        var newValue = _getNewValueForFieldO.newValue, newValueSrc = _getNewValueForFieldO.newValueSrc, newValueType = _getNewValueForFieldO.newValueType, operatorCardinality = _getNewValueForFieldO.operatorCardinality;
        var groupProperties = defaultGroupProperties(config2, newFieldConfig).merge({
          field: newField,
          mode: newFieldConfig.mode
        });
        if (isRuleGroupExt) {
          groupProperties = groupProperties.merge({
            operator: newOperator,
            value: newValue,
            valueSrc: newValueSrc,
            valueType: newValueType
          });
        }
        state = state.setIn(expandTreePath(path, "children1"), new Immutable.OrderedMap());
        state = state.setIn(expandTreePath(path, "properties"), groupProperties);
        if (newFieldConfig.initialEmptyWhere && operatorCardinality == 1)
          ;
        else {
          state = addItem(state, path, "rule", uuid$2(), defaultRuleProperties(config2, newField), config2);
        }
        state = fixPathsInTree(state);
        return state;
      }
      return state.updateIn(expandTreePath(path, "properties"), function(map2) {
        return map2.withMutations(function(current) {
          var _getNewValueForFieldO2 = getNewValueForFieldOp(config2, config2, current, newField, newOperator, "field", true), canReuseValue = _getNewValueForFieldO2.canReuseValue, newValue2 = _getNewValueForFieldO2.newValue, newValueSrc2 = _getNewValueForFieldO2.newValueSrc, newValueType2 = _getNewValueForFieldO2.newValueType, newValueError = _getNewValueForFieldO2.newValueError;
          if (showErrorMessage) {
            current = current.set("valueError", newValueError);
          }
          var newOperatorOptions = canReuseValue ? currentOperatorOptions : defaultOperatorOptions(config2, newOperator, newField);
          return current.set("field", newField).set("operator", newOperator).set("operatorOptions", newOperatorOptions).set("value", newValue2).set("valueSrc", newValueSrc2).set("valueType", newValueType2)["delete"]("asyncListValues");
        });
      });
    };
    var setOperator$1 = function setOperator2(state, path, newOperator, config2) {
      var showErrorMessage = config2.settings.showErrorMessage;
      var properties = state.getIn(expandTreePath(path, "properties"));
      var children = state.getIn(expandTreePath(path, "children1"));
      var currentField = properties.get("field");
      var fieldConfig = getFieldConfig$8(config2, currentField);
      var isRuleGroup = fieldConfig.type == "!group";
      var operatorConfig = getOperatorConfig$4(config2, newOperator, currentField);
      var operatorCardinality = operatorConfig ? defaultValue$1(operatorConfig.cardinality, 1) : null;
      state = state.updateIn(expandTreePath(path, "properties"), function(map2) {
        return map2.withMutations(function(current) {
          var currentField2 = current.get("field");
          var currentOperatorOptions = current.get("operatorOptions");
          current.get("value", new Immutable.List());
          current.get("valueSrc", new Immutable.List());
          current.get("operator");
          var _getNewValueForFieldO3 = getNewValueForFieldOp(config2, config2, current, currentField2, newOperator, "operator", true), canReuseValue = _getNewValueForFieldO3.canReuseValue, newValue = _getNewValueForFieldO3.newValue, newValueSrc = _getNewValueForFieldO3.newValueSrc, newValueType = _getNewValueForFieldO3.newValueType, newValueError = _getNewValueForFieldO3.newValueError;
          if (showErrorMessage) {
            current = current.set("valueError", newValueError);
          }
          var newOperatorOptions = canReuseValue ? currentOperatorOptions : defaultOperatorOptions(config2, newOperator, currentField2);
          if (!canReuseValue) {
            current = current["delete"]("asyncListValues");
          }
          return current.set("operator", newOperator).set("operatorOptions", newOperatorOptions).set("value", newValue).set("valueSrc", newValueSrc).set("valueType", newValueType);
        });
      });
      if (isRuleGroup) {
        if (operatorCardinality == 0 && children.size == 0) {
          state = addItem(state, path, "rule", uuid$2(), defaultRuleProperties(config2, currentField), config2);
        }
      }
      return state;
    };
    var setValue$1 = function setValue2(state, path, delta, value2, valueType, config2, asyncListValues, __isInternal) {
      var _config$settings3 = config2.settings, fieldSeparator = _config$settings3.fieldSeparator, showErrorMessage = _config$settings3.showErrorMessage;
      var isInternalValueChange;
      var valueSrc = state.getIn(expandTreePath(path, "properties", "valueSrc", delta + "")) || null;
      if (valueSrc === "field" && Array.isArray(value2))
        value2 = value2.join(fieldSeparator);
      var field = state.getIn(expandTreePath(path, "properties", "field")) || null;
      var operator = state.getIn(expandTreePath(path, "properties", "operator")) || null;
      var operatorConfig = getOperatorConfig$4(config2, operator, field);
      var operatorCardinality = operator ? defaultValue$1(operatorConfig.cardinality, 1) : null;
      var isEndValue = false;
      var calculatedValueType = valueType || calculateValueType(value2, valueSrc, config2);
      var canFix = false;
      var _validateValue = validateValue(config2, field, field, operator, value2, calculatedValueType, valueSrc, asyncListValues, canFix, isEndValue), _validateValue2 = _slicedToArray(_validateValue, 2), validateError = _validateValue2[0], fixedValue = _validateValue2[1];
      var isValid2 = !validateError;
      if (fixedValue !== value2) {
        value2 = fixedValue;
      }
      if (showErrorMessage) {
        var w = getWidgetForFieldOp$3(config2, field, operator, valueSrc);
        var fieldWidgetDefinition = getFieldWidgetConfig$3(config2, field, operator, w, valueSrc);
        var valueSrcs = Array.from({
          length: operatorCardinality
        }, function(_, i) {
          return state.getIn(expandTreePath(path, "properties", "valueSrc", i + "")) || null;
        });
        if (operatorConfig && operatorConfig.validateValues && valueSrcs.filter(function(vs) {
          return vs == "value" || vs == null;
        }).length == operatorCardinality) {
          var values = Array.from({
            length: operatorCardinality
          }, function(_, i) {
            return i == delta ? value2 : state.getIn(expandTreePath(path, "properties", "value", i + "")) || null;
          });
          var jsValues = fieldWidgetDefinition && fieldWidgetDefinition.toJS ? values.map(function(v) {
            return fieldWidgetDefinition.toJS(v, fieldWidgetDefinition);
          }) : values;
          var rangeValidateError = operatorConfig.validateValues(jsValues);
          state = state.setIn(expandTreePath(path, "properties", "valueError", operatorCardinality), rangeValidateError);
        }
      }
      var lastValueArr = state.getIn(expandTreePath(path, "properties", "value"));
      if (!lastValueArr) {
        state = state.setIn(expandTreePath(path, "properties", "value"), new Immutable.List(new Array(operatorCardinality))).setIn(expandTreePath(path, "properties", "valueType"), new Immutable.List(new Array(operatorCardinality))).setIn(expandTreePath(path, "properties", "valueError"), new Immutable.List(new Array(operatorCardinality)));
      }
      var lastValue = state.getIn(expandTreePath(path, "properties", "value", delta + ""));
      var lastError = state.getIn(expandTreePath(path, "properties", "valueError", delta));
      var isLastEmpty = lastValue == void 0;
      var isLastError = !!lastError;
      if (isValid2 || showErrorMessage) {
        state = state.deleteIn(expandTreePath(path, "properties", "asyncListValues"));
        if (typeof value2 === "undefined") {
          state = state.setIn(expandTreePath(path, "properties", "value", delta + ""), void 0);
          state = state.setIn(expandTreePath(path, "properties", "valueType", delta + ""), null);
        } else {
          if (asyncListValues) {
            state = state.setIn(expandTreePath(path, "properties", "asyncListValues"), asyncListValues);
          }
          state = state.setIn(expandTreePath(path, "properties", "value", delta + ""), value2);
          state = state.setIn(expandTreePath(path, "properties", "valueType", delta + ""), calculatedValueType);
          isInternalValueChange = __isInternal && !isLastEmpty && !isLastError;
        }
      }
      if (showErrorMessage) {
        state = state.setIn(expandTreePath(path, "properties", "valueError", delta), validateError);
      }
      if (__isInternal && (isValid2 && isLastError || !isValid2 && !isLastError)) {
        state = state.setIn(expandTreePath(path, "properties", "valueError", delta), validateError);
        isInternalValueChange = false;
      }
      return {
        tree: state,
        isInternalValueChange
      };
    };
    var setValueSrc$1 = function setValueSrc2(state, path, delta, srcKey, config2) {
      var showErrorMessage = config2.settings.showErrorMessage;
      var field = state.getIn(expandTreePath(path, "properties", "field")) || null;
      var operator = state.getIn(expandTreePath(path, "properties", "operator")) || null;
      state = state.setIn(expandTreePath(path, "properties", "value", delta + ""), void 0);
      state = state.setIn(expandTreePath(path, "properties", "valueType", delta + ""), null);
      state = state.deleteIn(expandTreePath(path, "properties", "asyncListValues"));
      if (showErrorMessage) {
        state = state.setIn(expandTreePath(path, "properties", "valueError", delta), null);
        var operatorConfig = getOperatorConfig$4(config2, operator, field);
        var operatorCardinality = operator ? defaultValue$1(operatorConfig.cardinality, 1) : null;
        if (operatorConfig.validateValues) {
          state = state.setIn(expandTreePath(path, "properties", "valueError", operatorCardinality), null);
        }
      }
      if (typeof srcKey === "undefined") {
        state = state.setIn(expandTreePath(path, "properties", "valueSrc", delta + ""), null);
      } else {
        state = state.setIn(expandTreePath(path, "properties", "valueSrc", delta + ""), srcKey);
      }
      if (srcKey) {
        var properties = state.getIn(expandTreePath(path, "properties"));
        var _getNewValueForFieldO4 = getNewValueForFieldOp(config2, config2, properties, field, operator, "valueSrc", true), canReuseValue = _getNewValueForFieldO4.canReuseValue, newValue = _getNewValueForFieldO4.newValue, newValueSrc = _getNewValueForFieldO4.newValueSrc, newValueType = _getNewValueForFieldO4.newValueType;
        _getNewValueForFieldO4.newValueError;
        if (!canReuseValue && newValueSrc.get(delta) == srcKey) {
          state = state.setIn(expandTreePath(path, "properties", "value", delta + ""), newValue.get(delta));
          state = state.setIn(expandTreePath(path, "properties", "valueType", delta + ""), newValueType.get(delta));
        }
      }
      return state;
    };
    var setOperatorOption$1 = function setOperatorOption2(state, path, name, value2) {
      return state.setIn(expandTreePath(path, "properties", "operatorOptions", name), value2);
    };
    var checkEmptyGroups = function checkEmptyGroups2(state, config2) {
      var canLeaveEmptyGroup = config2.settings.canLeaveEmptyGroup;
      if (!canLeaveEmptyGroup) {
        state = fixEmptyGroupsInTree(state);
      }
      return state;
    };
    var calculateValueType = function calculateValueType2(value2, valueSrc, config2) {
      var calculatedValueType = null;
      if (value2) {
        if (valueSrc === "field") {
          var fieldConfig = getFieldConfig$8(config2, value2);
          if (fieldConfig) {
            calculatedValueType = fieldConfig.type;
          }
        } else if (valueSrc === "func") {
          var funcKey = value2.get("func");
          if (funcKey) {
            var funcConfig = getFuncConfig$2(config2, funcKey);
            if (funcConfig) {
              calculatedValueType = funcConfig.returnType;
            }
          }
        }
      }
      return calculatedValueType;
    };
    var getField = function getField2(state, path) {
      var field = state.getIn(expandTreePath(path, "properties", "field")) || null;
      return field;
    };
    var emptyDrag = {
      dragging: {
        id: null,
        x: null,
        y: null,
        w: null,
        h: null
      },
      mousePos: {},
      dragStart: {
        id: null
      }
    };
    var getActionMeta = function getActionMeta2(action, state) {
      if (!action || !action.type)
        return null;
      var actionKeysToOmit = ["config", "asyncListValues", "__isInternal"];
      var actionTypesToIgnore = [SET_TREE, SET_DRAG_START$1, SET_DRAG_PROGRESS$1, SET_DRAG_END$1];
      var meta = mapValues_1(omit_1(action, actionKeysToOmit), applyToJS);
      var affectedField = action.path && getField(state.tree, action.path) || action.field;
      if (affectedField)
        meta.affectedField = affectedField;
      if (actionTypesToIgnore.includes(action.type) || action.type.indexOf("@@redux") == 0)
        meta = null;
      return meta;
    };
    const TreeStore = function(config2, tree2, getMemoizedTree) {
      var emptyTree = defaultRoot$1(config2);
      var initTree2 = tree2 || emptyTree;
      var emptyState = _objectSpread$e({
        tree: initTree2
      }, emptyDrag);
      return function() {
        var state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : emptyState;
        var action = arguments.length > 1 ? arguments[1] : void 0;
        var unset = {
          __isInternalValueChange: void 0,
          __lastAction: void 0
        };
        var set2 = {};
        var actionMeta = getActionMeta(action, state);
        switch (action === null || action === void 0 ? void 0 : action.type) {
          case SET_TREE: {
            var validatedTree = getMemoizedTree(action.config, action.tree);
            set2.tree = validatedTree;
            break;
          }
          case ADD_CASE_GROUP: {
            set2.tree = addNewGroup(state.tree, action.path, "case_group", action.id, action.properties, action.config, action.children, action.meta);
            break;
          }
          case ADD_GROUP: {
            set2.tree = addNewGroup(state.tree, action.path, "group", action.id, action.properties, action.config, action.children, action.meta);
            break;
          }
          case REMOVE_GROUP: {
            set2.tree = removeGroup$1(state.tree, action.path, action.config);
            break;
          }
          case ADD_RULE: {
            set2.tree = addItem(state.tree, action.path, action.ruleType, action.id, action.properties, action.config, action.children);
            break;
          }
          case REMOVE_RULE: {
            set2.tree = removeRule$1(state.tree, action.path, action.config);
            break;
          }
          case SET_CONJUNCTION: {
            set2.tree = setConjunction$1(state.tree, action.path, action.conjunction);
            break;
          }
          case SET_NOT: {
            set2.tree = setNot$1(state.tree, action.path, action.not);
            break;
          }
          case SET_FIELD: {
            set2.tree = setField$1(state.tree, action.path, action.field, action.config);
            break;
          }
          case SET_LOCK: {
            set2.tree = setLock$1(state.tree, action.path, action.lock);
            break;
          }
          case SET_OPERATOR: {
            set2.tree = setOperator$1(state.tree, action.path, action.operator, action.config);
            break;
          }
          case SET_VALUE: {
            var _setValue = setValue$1(state.tree, action.path, action.delta, action.value, action.valueType, action.config, action.asyncListValues, action.__isInternal), _tree = _setValue.tree, isInternalValueChange = _setValue.isInternalValueChange;
            set2.__isInternalValueChange = isInternalValueChange;
            set2.tree = _tree;
            break;
          }
          case SET_VALUE_SRC: {
            set2.tree = setValueSrc$1(state.tree, action.path, action.delta, action.srcKey, action.config);
            break;
          }
          case SET_OPERATOR_OPTION: {
            set2.tree = setOperatorOption$1(state.tree, action.path, action.name, action.value);
            break;
          }
          case MOVE_ITEM: {
            set2.tree = moveItem$1(state.tree, action.fromPath, action.toPath, action.placement, action.config);
            break;
          }
          case SET_DRAG_START$1: {
            set2.dragStart = action.dragStart;
            set2.dragging = action.dragging;
            set2.mousePos = action.mousePos;
            break;
          }
          case SET_DRAG_PROGRESS$1: {
            set2.mousePos = action.mousePos;
            set2.dragging = action.dragging;
            break;
          }
          case SET_DRAG_END$1: {
            set2.tree = checkEmptyGroups(state.tree, config2);
            set2 = _objectSpread$e(_objectSpread$e({}, set2), emptyDrag);
            break;
          }
        }
        if (actionMeta) {
          set2.__lastAction = actionMeta;
        }
        return _objectSpread$e(_objectSpread$e(_objectSpread$e({}, state), unset), set2);
      };
    };
    var setTree = function setTree2(config2, tree2) {
      return {
        type: SET_TREE,
        tree: tree2,
        config: config2
      };
    };
    var addRule = function addRule2(config2, path, properties) {
      var ruleType = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "rule";
      var children = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
      return {
        type: ADD_RULE,
        ruleType,
        children,
        path: toImmutableList(path),
        id: uuid$2(),
        properties: defaultRuleProperties(config2).merge(properties || {}),
        config: config2
      };
    };
    var removeRule = function removeRule2(config2, path) {
      return {
        type: REMOVE_RULE,
        path: toImmutableList(path),
        config: config2
      };
    };
    var addDefaultCaseGroup = function addDefaultCaseGroup2(config2, path, properties) {
      var children = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      return {
        type: ADD_CASE_GROUP,
        path: toImmutableList(path),
        children,
        id: uuid$2(),
        properties: defaultGroupProperties(config2).merge(properties || {}),
        config: config2,
        meta: {
          isDefaultCase: true
        }
      };
    };
    var addCaseGroup = function addCaseGroup2(config2, path, properties) {
      var children = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      return {
        type: ADD_CASE_GROUP,
        path: toImmutableList(path),
        children,
        id: uuid$2(),
        properties: defaultGroupProperties(config2).merge(properties || {}),
        config: config2
      };
    };
    var addGroup = function addGroup2(config2, path, properties) {
      var children = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      return {
        type: ADD_GROUP,
        path: toImmutableList(path),
        children,
        id: uuid$2(),
        properties: defaultGroupProperties(config2).merge(properties || {}),
        config: config2
      };
    };
    var removeGroup = function removeGroup2(config2, path) {
      return {
        type: REMOVE_GROUP,
        path: toImmutableList(path),
        config: config2
      };
    };
    var moveItem = function moveItem2(config2, fromPath, toPath, placement) {
      return {
        type: MOVE_ITEM,
        fromPath: toImmutableList(fromPath),
        toPath: toImmutableList(toPath),
        placement,
        config: config2
      };
    };
    const tree$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      setTree,
      addRule,
      removeRule,
      addDefaultCaseGroup,
      addCaseGroup,
      addGroup,
      removeGroup,
      moveItem
    }, Symbol.toStringTag, { value: "Module" }));
    var setConjunction = function setConjunction2(config2, path, conjunction) {
      return {
        type: SET_CONJUNCTION,
        path: toImmutableList(path),
        conjunction
      };
    };
    var setNot = function setNot2(config2, path, not) {
      return {
        type: SET_NOT,
        path: toImmutableList(path),
        not
      };
    };
    var setLock = function setLock2(config2, path, lock) {
      return {
        type: SET_LOCK,
        path: toImmutableList(path),
        lock
      };
    };
    const group$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      setConjunction,
      setNot,
      setLock
    }, Symbol.toStringTag, { value: "Module" }));
    var setField = function setField2(config2, path, field) {
      return {
        type: SET_FIELD,
        path: toImmutableList(path),
        field,
        config: config2
      };
    };
    var setOperator = function setOperator2(config2, path, operator) {
      return {
        type: SET_OPERATOR,
        path: toImmutableList(path),
        operator,
        config: config2
      };
    };
    var setValue = function setValue2(config2, path, delta, value2, valueType, asyncListValues, __isInternal) {
      return {
        type: SET_VALUE,
        path: toImmutableList(path),
        delta,
        value: value2,
        valueType,
        asyncListValues,
        config: config2,
        __isInternal
      };
    };
    var setValueSrc = function setValueSrc2(config2, path, delta, srcKey) {
      return {
        type: SET_VALUE_SRC,
        path: toImmutableList(path),
        delta,
        srcKey,
        config: config2
      };
    };
    var setOperatorOption = function setOperatorOption2(config2, path, name, value2) {
      return {
        type: SET_OPERATOR_OPTION,
        path: toImmutableList(path),
        name,
        value: value2,
        config: config2
      };
    };
    const rule$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      setField,
      setOperator,
      setValue,
      setValueSrc,
      setOperatorOption
    }, Symbol.toStringTag, { value: "Module" }));
    function ownKeys$d(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$d(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$d(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$d(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var Utils = _objectSpread$d(_objectSpread$d(_objectSpread$d({}, BasicUtils), Export), Import);
    var propTypes = { exports: {} };
    var reactIs$2 = { exports: {} };
    var reactIs_development$1 = {};
    /** @license React v16.13.1
     * react-is.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    {
      (function() {
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf2(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment2 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf2(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf2(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf2(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf2(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf2(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf2(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf2(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf2(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf2(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf2(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf2(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf2(object) === REACT_SUSPENSE_TYPE;
        }
        reactIs_development$1.AsyncMode = AsyncMode;
        reactIs_development$1.ConcurrentMode = ConcurrentMode;
        reactIs_development$1.ContextConsumer = ContextConsumer;
        reactIs_development$1.ContextProvider = ContextProvider;
        reactIs_development$1.Element = Element;
        reactIs_development$1.ForwardRef = ForwardRef;
        reactIs_development$1.Fragment = Fragment2;
        reactIs_development$1.Lazy = Lazy;
        reactIs_development$1.Memo = Memo;
        reactIs_development$1.Portal = Portal;
        reactIs_development$1.Profiler = Profiler;
        reactIs_development$1.StrictMode = StrictMode;
        reactIs_development$1.Suspense = Suspense;
        reactIs_development$1.isAsyncMode = isAsyncMode;
        reactIs_development$1.isConcurrentMode = isConcurrentMode;
        reactIs_development$1.isContextConsumer = isContextConsumer;
        reactIs_development$1.isContextProvider = isContextProvider;
        reactIs_development$1.isElement = isElement;
        reactIs_development$1.isForwardRef = isForwardRef;
        reactIs_development$1.isFragment = isFragment;
        reactIs_development$1.isLazy = isLazy;
        reactIs_development$1.isMemo = isMemo;
        reactIs_development$1.isPortal = isPortal;
        reactIs_development$1.isProfiler = isProfiler;
        reactIs_development$1.isStrictMode = isStrictMode;
        reactIs_development$1.isSuspense = isSuspense;
        reactIs_development$1.isValidElementType = isValidElementType;
        reactIs_development$1.typeOf = typeOf2;
      })();
    }
    (function(module2) {
      {
        module2.exports = reactIs_development$1;
      }
    })(reactIs$2);
    var ReactIs$1 = reactIs$2.exports;
    var assign = objectAssign;
    var ReactPropTypesSecret = ReactPropTypesSecret_1;
    var has = has$2;
    var checkPropTypes = checkPropTypes_1;
    var printWarning = function() {
    };
    {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess2) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is2(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess2) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs$1.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is2(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value2) {
            var type = getPreciseType(value2);
            if (type === "symbol") {
              return String(value2);
            }
            return value2;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          printWarning("Invalid argument supplied to oneOfType, expected an instance of array.");
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol2(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol2(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value2) {
        var type = getPreciseType(value2);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
    {
      var ReactIs = reactIs$2.exports;
      var throwOnDirectAccess = true;
      propTypes.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
    }
    const context = /* @__PURE__ */ React.createContext();
    var $$observable = function() {
      return typeof Symbol === "function" && Symbol.observable || "@@observable";
    }();
    var randomString = function randomString2() {
      return Math.random().toString(36).substring(7).split("").join(".");
    };
    var ActionTypes = {
      INIT: "@@redux/INIT" + randomString(),
      REPLACE: "@@redux/REPLACE" + randomString(),
      PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
        return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
      }
    };
    function isPlainObject$1(obj) {
      if (typeof obj !== "object" || obj === null)
        return false;
      var proto2 = obj;
      while (Object.getPrototypeOf(proto2) !== null) {
        proto2 = Object.getPrototypeOf(proto2);
      }
      return Object.getPrototypeOf(obj) === proto2;
    }
    function miniKindOf(val) {
      if (val === void 0)
        return "undefined";
      if (val === null)
        return "null";
      var type = typeof val;
      switch (type) {
        case "boolean":
        case "string":
        case "number":
        case "symbol":
        case "function": {
          return type;
        }
      }
      if (Array.isArray(val))
        return "array";
      if (isDate(val))
        return "date";
      if (isError(val))
        return "error";
      var constructorName = ctorName(val);
      switch (constructorName) {
        case "Symbol":
        case "Promise":
        case "WeakMap":
        case "WeakSet":
        case "Map":
        case "Set":
          return constructorName;
      }
      return type.slice(8, -1).toLowerCase().replace(/\s/g, "");
    }
    function ctorName(val) {
      return typeof val.constructor === "function" ? val.constructor.name : null;
    }
    function isError(val) {
      return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
    }
    function isDate(val) {
      if (val instanceof Date)
        return true;
      return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
    }
    function kindOf(val) {
      var typeOfVal = typeof val;
      {
        typeOfVal = miniKindOf(val);
      }
      return typeOfVal;
    }
    function createStore(reducer, preloadedState, enhancer) {
      var _ref2;
      if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
        throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
      }
      if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
        enhancer = preloadedState;
        preloadedState = void 0;
      }
      if (typeof enhancer !== "undefined") {
        if (typeof enhancer !== "function") {
          throw new Error("Expected the enhancer to be a function. Instead, received: '" + kindOf(enhancer) + "'");
        }
        return enhancer(createStore)(reducer, preloadedState);
      }
      if (typeof reducer !== "function") {
        throw new Error("Expected the root reducer to be a function. Instead, received: '" + kindOf(reducer) + "'");
      }
      var currentReducer = reducer;
      var currentState = preloadedState;
      var currentListeners = [];
      var nextListeners = currentListeners;
      var isDispatching = false;
      function ensureCanMutateNextListeners() {
        if (nextListeners === currentListeners) {
          nextListeners = currentListeners.slice();
        }
      }
      function getState() {
        if (isDispatching) {
          throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
        }
        return currentState;
      }
      function subscribe(listener) {
        if (typeof listener !== "function") {
          throw new Error("Expected the listener to be a function. Instead, received: '" + kindOf(listener) + "'");
        }
        if (isDispatching) {
          throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
        }
        var isSubscribed = true;
        ensureCanMutateNextListeners();
        nextListeners.push(listener);
        return function unsubscribe() {
          if (!isSubscribed) {
            return;
          }
          if (isDispatching) {
            throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
          }
          isSubscribed = false;
          ensureCanMutateNextListeners();
          var index = nextListeners.indexOf(listener);
          nextListeners.splice(index, 1);
          currentListeners = null;
        };
      }
      function dispatch(action) {
        if (!isPlainObject$1(action)) {
          throw new Error("Actions must be plain objects. Instead, the actual type was: '" + kindOf(action) + "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");
        }
        if (typeof action.type === "undefined") {
          throw new Error('Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
        }
        if (isDispatching) {
          throw new Error("Reducers may not dispatch actions.");
        }
        try {
          isDispatching = true;
          currentState = currentReducer(currentState, action);
        } finally {
          isDispatching = false;
        }
        var listeners = currentListeners = nextListeners;
        for (var i = 0; i < listeners.length; i++) {
          var listener = listeners[i];
          listener();
        }
        return action;
      }
      function replaceReducer(nextReducer) {
        if (typeof nextReducer !== "function") {
          throw new Error("Expected the nextReducer to be a function. Instead, received: '" + kindOf(nextReducer));
        }
        currentReducer = nextReducer;
        dispatch({
          type: ActionTypes.REPLACE
        });
      }
      function observable() {
        var _ref;
        var outerSubscribe = subscribe;
        return _ref = {
          subscribe: function subscribe2(observer) {
            if (typeof observer !== "object" || observer === null) {
              throw new Error("Expected the observer to be an object. Instead, received: '" + kindOf(observer) + "'");
            }
            function observeState() {
              if (observer.next) {
                observer.next(getState());
              }
            }
            observeState();
            var unsubscribe = outerSubscribe(observeState);
            return {
              unsubscribe
            };
          }
        }, _ref[$$observable] = function() {
          return this;
        }, _ref;
      }
      dispatch({
        type: ActionTypes.INIT
      });
      return _ref2 = {
        dispatch,
        subscribe,
        getState,
        replaceReducer
      }, _ref2[$$observable] = observable, _ref2;
    }
    function warning$1(message) {
      if (typeof console !== "undefined" && typeof console.error === "function") {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (e) {
      }
    }
    function isCrushed() {
    }
    if (typeof isCrushed.name === "string" && isCrushed.name !== "isCrushed") {
      warning$1('You are currently using minified code outside of NODE_ENV === "production". This means that you are running a slower development build of Redux. You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) to ensure you have the correct code for your production build.');
    }
    var ReactReduxContext = /* @__PURE__ */ React.createContext(null);
    {
      ReactReduxContext.displayName = "ReactRedux";
    }
    function defaultNoopBatch(callback) {
      callback();
    }
    var batch = defaultNoopBatch;
    var setBatch = function setBatch2(newBatch) {
      return batch = newBatch;
    };
    var getBatch = function getBatch2() {
      return batch;
    };
    function createListenerCollection() {
      var batch2 = getBatch();
      var first = null;
      var last2 = null;
      return {
        clear: function clear() {
          first = null;
          last2 = null;
        },
        notify: function notify() {
          batch2(function() {
            var listener = first;
            while (listener) {
              listener.callback();
              listener = listener.next;
            }
          });
        },
        get: function get2() {
          var listeners = [];
          var listener = first;
          while (listener) {
            listeners.push(listener);
            listener = listener.next;
          }
          return listeners;
        },
        subscribe: function subscribe(callback) {
          var isSubscribed = true;
          var listener = last2 = {
            callback,
            next: null,
            prev: last2
          };
          if (listener.prev) {
            listener.prev.next = listener;
          } else {
            first = listener;
          }
          return function unsubscribe() {
            if (!isSubscribed || first === null)
              return;
            isSubscribed = false;
            if (listener.next) {
              listener.next.prev = listener.prev;
            } else {
              last2 = listener.prev;
            }
            if (listener.prev) {
              listener.prev.next = listener.next;
            } else {
              first = listener.next;
            }
          };
        }
      };
    }
    var nullListeners = {
      notify: function notify() {
      },
      get: function get2() {
        return [];
      }
    };
    function createSubscription(store, parentSub) {
      var unsubscribe;
      var listeners = nullListeners;
      function addNestedSub(listener) {
        trySubscribe();
        return listeners.subscribe(listener);
      }
      function notifyNestedSubs() {
        listeners.notify();
      }
      function handleChangeWrapper() {
        if (subscription.onStateChange) {
          subscription.onStateChange();
        }
      }
      function isSubscribed() {
        return Boolean(unsubscribe);
      }
      function trySubscribe() {
        if (!unsubscribe) {
          unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);
          listeners = createListenerCollection();
        }
      }
      function tryUnsubscribe() {
        if (unsubscribe) {
          unsubscribe();
          unsubscribe = void 0;
          listeners.clear();
          listeners = nullListeners;
        }
      }
      var subscription = {
        addNestedSub,
        notifyNestedSubs,
        handleChangeWrapper,
        isSubscribed,
        trySubscribe,
        tryUnsubscribe,
        getListeners: function getListeners() {
          return listeners;
        }
      };
      return subscription;
    }
    var useIsomorphicLayoutEffect = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? react.exports.useLayoutEffect : react.exports.useEffect;
    var jsxDevRuntime = { exports: {} };
    var reactJsxDevRuntime_development = {};
    /** @license React v16.14.0
     * react-jsx-dev-runtime.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    (function(exports2) {
      {
        (function() {
          var React2 = react.exports;
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports2.Fragment = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports2.Fragment = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            symbolFor("react.scope");
            symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format2) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning2("error", format2, args);
            }
          }
          function printWarning2(level, format2, args) {
            {
              var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = "";
              if (currentlyValidatingElement) {
                var name = getComponentName(currentlyValidatingElement.type);
                var owner = currentlyValidatingElement._owner;
                stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
              }
              stack += ReactDebugCurrentFrame.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === exports2.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
          function describeComponentFrame(name, source, ownerName) {
            var sourceInfo = "";
            if (source) {
              var path = source.fileName;
              var fileName = path.replace(BEFORE_SLASH_RE, "");
              {
                if (/^index\./.test(fileName)) {
                  var match5 = path.match(BEFORE_SLASH_RE);
                  if (match5) {
                    var pathBeforeSlash = match5[1];
                    if (pathBeforeSlash) {
                      var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, "");
                      fileName = folderName + "/" + fileName;
                    }
                  }
                }
              }
              sourceInfo = " (at " + fileName + ":" + source.lineNumber + ")";
            } else if (ownerName) {
              sourceInfo = " (created by " + ownerName + ")";
            }
            return "\n    in " + (name || "Unknown") + sourceInfo;
          }
          var Resolved = 1;
          function refineResolvedLazyComponent(lazyComponent) {
            return lazyComponent._status === Resolved ? lazyComponent._result : null;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case exports2.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  return "Context.Consumer";
                case REACT_PROVIDER_TYPE:
                  return "Context.Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type.render);
                case REACT_LAZY_TYPE: {
                  var thenable = type;
                  var resolvedThenable = refineResolvedLazyComponent(thenable);
                  if (resolvedThenable) {
                    return getComponentName(resolvedThenable);
                  }
                  break;
                }
              }
            }
            return null;
          }
          var loggedTypeFailures2 = {};
          ReactSharedInternals.ReactDebugCurrentFrame;
          var currentlyValidatingElement = null;
          function setCurrentlyValidatingElement(element) {
            currentlyValidatingElement = element;
          }
          function checkPropTypes2(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures2)) {
                    loggedTypeFailures2[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config2) {
            {
              if (hasOwnProperty2.call(config2, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.ref !== void 0;
          }
          function hasValidKey(config2) {
            {
              if (hasOwnProperty2.call(config2, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config2, self2) {
            {
              if (typeof config2.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config2.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV2(type, config2, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                key = "" + maybeKey;
              }
              if (hasValidKey(config2)) {
                key = "" + config2.key;
              }
              if (hasValidRef(config2)) {
                ref = config2.ref;
                warnIfStringRefCannotBeAutoConverted(config2, self2);
              }
              for (propName in config2) {
                if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config2[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            currentlyValidatingElement = element;
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentName(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            {
              if (typeof node !== "object") {
                return;
              }
              if (Array.isArray(node)) {
                for (var i = 0; i < node.length; i++) {
                  var child = node[i];
                  if (isValidElement(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement(node)) {
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes2;
              if (typeof type === "function") {
                propTypes2 = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes2 = type.propTypes;
              } else {
                return;
              }
              if (propTypes2) {
                var name = getComponentName(type);
                checkPropTypes2(propTypes2, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i = 0; i < keys2.length; i++) {
                var key = keys2[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (Array.isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV2(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (Array.isArray(children)) {
                      for (var i = 0; i < children.length; i++) {
                        validateChildKeys(children[i], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === exports2.Fragment) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          var jsxDEV$1 = jsxWithValidation;
          exports2.jsxDEV = jsxDEV$1;
        })();
      }
    })(reactJsxDevRuntime_development);
    (function(module2) {
      {
        module2.exports = reactJsxDevRuntime_development;
      }
    })(jsxDevRuntime);
    const Fragment = jsxDevRuntime.exports.Fragment;
    const jsxDEV = jsxDevRuntime.exports.jsxDEV;
    var _jsxFileName$I = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/node_modules/.pnpm/react-redux@7.2.9_sfoxds7t5ydpegc3knd667wn6m/node_modules/react-redux/es/components/Provider.js";
    function Provider(_ref) {
      var store = _ref.store, context2 = _ref.context, children = _ref.children;
      var contextValue = react.exports.useMemo(function() {
        var subscription = createSubscription(store);
        return {
          store,
          subscription
        };
      }, [store]);
      var previousState = react.exports.useMemo(function() {
        return store.getState();
      }, [store]);
      useIsomorphicLayoutEffect(function() {
        var subscription = contextValue.subscription;
        subscription.onStateChange = subscription.notifyNestedSubs;
        subscription.trySubscribe();
        if (previousState !== store.getState()) {
          subscription.notifyNestedSubs();
        }
        return function() {
          subscription.tryUnsubscribe();
          subscription.onStateChange = null;
        };
      }, [contextValue, previousState]);
      var Context = context2 || ReactReduxContext;
      return /* @__PURE__ */ jsxDEV(Context.Provider, {
        value: contextValue,
        children
      }, void 0, false, {
        fileName: _jsxFileName$I,
        lineNumber: 36,
        columnNumber: 23
      }, this);
    }
    {
      Provider.propTypes = {
        store: propTypes.exports.shape({
          subscribe: propTypes.exports.func.isRequired,
          dispatch: propTypes.exports.func.isRequired,
          getState: propTypes.exports.func.isRequired
        }),
        context: propTypes.exports.object,
        children: propTypes.exports.any
      };
    }
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    var reactIs$1 = reactIs$2.exports;
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      "$$typeof": true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      "$$typeof": true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs$1.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs$1.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs$1.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys2 = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys2 = keys2.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i = 0; i < keys2.length; ++i) {
          var key = keys2[i];
          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
            try {
              defineProperty(targetComponent, key, descriptor);
            } catch (e) {
            }
          }
        }
      }
      return targetComponent;
    }
    var hoistNonReactStatics_cjs = hoistNonReactStatics;
    var reactIs = { exports: {} };
    var reactIs_development = {};
    /** @license React v17.0.2
     * react-is.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    {
      (function() {
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        var REACT_FRAGMENT_TYPE = 60107;
        var REACT_STRICT_MODE_TYPE = 60108;
        var REACT_PROFILER_TYPE = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        var REACT_SUSPENSE_TYPE = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
          REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
          REACT_PROFILER_TYPE = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          symbolFor("react.scope");
          symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var enableScopeAPI = false;
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
              return true;
            }
          }
          return false;
        }
        function typeOf2(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment2 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        var hasWarnedAboutDeprecatedIsConcurrentMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isConcurrentMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
              hasWarnedAboutDeprecatedIsConcurrentMode = true;
              console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isContextConsumer(object) {
          return typeOf2(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf2(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf2(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf2(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf2(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf2(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf2(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf2(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf2(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf2(object) === REACT_SUSPENSE_TYPE;
        }
        reactIs_development.ContextConsumer = ContextConsumer;
        reactIs_development.ContextProvider = ContextProvider;
        reactIs_development.Element = Element;
        reactIs_development.ForwardRef = ForwardRef;
        reactIs_development.Fragment = Fragment2;
        reactIs_development.Lazy = Lazy;
        reactIs_development.Memo = Memo;
        reactIs_development.Portal = Portal;
        reactIs_development.Profiler = Profiler;
        reactIs_development.StrictMode = StrictMode;
        reactIs_development.Suspense = Suspense;
        reactIs_development.isAsyncMode = isAsyncMode;
        reactIs_development.isConcurrentMode = isConcurrentMode;
        reactIs_development.isContextConsumer = isContextConsumer;
        reactIs_development.isContextProvider = isContextProvider;
        reactIs_development.isElement = isElement;
        reactIs_development.isForwardRef = isForwardRef;
        reactIs_development.isFragment = isFragment;
        reactIs_development.isLazy = isLazy;
        reactIs_development.isMemo = isMemo;
        reactIs_development.isPortal = isPortal;
        reactIs_development.isProfiler = isProfiler;
        reactIs_development.isStrictMode = isStrictMode;
        reactIs_development.isSuspense = isSuspense;
        reactIs_development.isValidElementType = isValidElementType;
        reactIs_development.typeOf = typeOf2;
      })();
    }
    (function(module2) {
      {
        module2.exports = reactIs_development;
      }
    })(reactIs);
    var _jsxFileName$H = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/node_modules/.pnpm/react-redux@7.2.9_sfoxds7t5ydpegc3knd667wn6m/node_modules/react-redux/es/components/connectAdvanced.js";
    var _excluded$7 = ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef", "forwardRef", "context"], _excluded2 = ["reactReduxForwardedRef"];
    var EMPTY_ARRAY = [];
    var NO_SUBSCRIPTION_ARRAY = [null, null];
    var stringifyComponent = function stringifyComponent2(Comp) {
      try {
        return JSON.stringify(Comp);
      } catch (err) {
        return String(Comp);
      }
    };
    function storeStateUpdatesReducer(state, action) {
      var updateCount = state[1];
      return [action.payload, updateCount + 1];
    }
    function useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {
      useIsomorphicLayoutEffect(function() {
        return effectFunc.apply(void 0, effectArgs);
      }, dependencies);
    }
    function captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs) {
      lastWrapperProps.current = wrapperProps;
      lastChildProps.current = actualChildProps;
      renderIsScheduled.current = false;
      if (childPropsFromStoreUpdate.current) {
        childPropsFromStoreUpdate.current = null;
        notifyNestedSubs();
      }
    }
    function subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch) {
      if (!shouldHandleStateChanges)
        return;
      var didUnsubscribe = false;
      var lastThrownError = null;
      var checkForUpdates = function checkForUpdates2() {
        if (didUnsubscribe) {
          return;
        }
        var latestStoreState = store.getState();
        var newChildProps, error;
        try {
          newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);
        } catch (e) {
          error = e;
          lastThrownError = e;
        }
        if (!error) {
          lastThrownError = null;
        }
        if (newChildProps === lastChildProps.current) {
          if (!renderIsScheduled.current) {
            notifyNestedSubs();
          }
        } else {
          lastChildProps.current = newChildProps;
          childPropsFromStoreUpdate.current = newChildProps;
          renderIsScheduled.current = true;
          forceComponentUpdateDispatch({
            type: "STORE_UPDATED",
            payload: {
              error
            }
          });
        }
      };
      subscription.onStateChange = checkForUpdates;
      subscription.trySubscribe();
      checkForUpdates();
      var unsubscribeWrapper = function unsubscribeWrapper2() {
        didUnsubscribe = true;
        subscription.tryUnsubscribe();
        subscription.onStateChange = null;
        if (lastThrownError) {
          throw lastThrownError;
        }
      };
      return unsubscribeWrapper;
    }
    var initStateUpdates = function initStateUpdates2() {
      return [null, 0];
    };
    function connectAdvanced(selectorFactory, _ref) {
      if (_ref === void 0) {
        _ref = {};
      }
      var _ref2 = _ref, _ref2$getDisplayName = _ref2.getDisplayName, getDisplayName = _ref2$getDisplayName === void 0 ? function(name) {
        return "ConnectAdvanced(" + name + ")";
      } : _ref2$getDisplayName, _ref2$methodName = _ref2.methodName, methodName = _ref2$methodName === void 0 ? "connectAdvanced" : _ref2$methodName, _ref2$renderCountProp = _ref2.renderCountProp, renderCountProp = _ref2$renderCountProp === void 0 ? void 0 : _ref2$renderCountProp, _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges, shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta, _ref2$storeKey = _ref2.storeKey, storeKey = _ref2$storeKey === void 0 ? "store" : _ref2$storeKey, _ref2$withRef = _ref2.withRef, withRef = _ref2$withRef === void 0 ? false : _ref2$withRef, _ref2$forwardRef = _ref2.forwardRef, forwardRef = _ref2$forwardRef === void 0 ? false : _ref2$forwardRef, _ref2$context = _ref2.context, context2 = _ref2$context === void 0 ? ReactReduxContext : _ref2$context, connectOptions = _objectWithoutPropertiesLoose(_ref2, _excluded$7);
      {
        if (renderCountProp !== void 0) {
          throw new Error("renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension");
        }
        if (withRef) {
          throw new Error("withRef is removed. To access the wrapped instance, use a ref on the connected component");
        }
        var customStoreWarningMessage = "To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect";
        if (storeKey !== "store") {
          throw new Error("storeKey has been removed and does not do anything. " + customStoreWarningMessage);
        }
      }
      var Context = context2;
      return function wrapWithConnect(WrappedComponent) {
        if (!reactIs.exports.isValidElementType(WrappedComponent)) {
          throw new Error("You must pass a component to the function returned by " + (methodName + ". Instead received " + stringifyComponent(WrappedComponent)));
        }
        var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || "Component";
        var displayName = getDisplayName(wrappedComponentName);
        var selectorFactoryOptions = _extends({}, connectOptions, {
          getDisplayName,
          methodName,
          renderCountProp,
          shouldHandleStateChanges,
          storeKey,
          displayName,
          wrappedComponentName,
          WrappedComponent
        });
        var pure = connectOptions.pure;
        function createChildSelector(store) {
          return selectorFactory(store.dispatch, selectorFactoryOptions);
        }
        var usePureOnlyMemo = pure ? react.exports.useMemo : function(callback) {
          return callback();
        };
        function ConnectFunction(props) {
          var _useMemo = react.exports.useMemo(function() {
            var reactReduxForwardedRef2 = props.reactReduxForwardedRef, wrapperProps2 = _objectWithoutPropertiesLoose(props, _excluded2);
            return [props.context, reactReduxForwardedRef2, wrapperProps2];
          }, [props]), propsContext = _useMemo[0], reactReduxForwardedRef = _useMemo[1], wrapperProps = _useMemo[2];
          var ContextToUse = react.exports.useMemo(function() {
            return propsContext && propsContext.Consumer && reactIs.exports.isContextConsumer(/* @__PURE__ */ React.createElement(propsContext.Consumer, null)) ? propsContext : Context;
          }, [propsContext, Context]);
          var contextValue = react.exports.useContext(ContextToUse);
          var didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);
          var didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);
          if (!didStoreComeFromProps && !didStoreComeFromContext) {
            throw new Error('Could not find "store" in the context of ' + ('"' + displayName + '". Either wrap the root component in a <Provider>, ') + "or pass a custom React context provider to <Provider> and the corresponding " + ("React context consumer to " + displayName + " in connect options."));
          }
          var store = didStoreComeFromProps ? props.store : contextValue.store;
          var childPropsSelector = react.exports.useMemo(function() {
            return createChildSelector(store);
          }, [store]);
          var _useMemo2 = react.exports.useMemo(function() {
            if (!shouldHandleStateChanges)
              return NO_SUBSCRIPTION_ARRAY;
            var subscription2 = createSubscription(store, didStoreComeFromProps ? null : contextValue.subscription);
            var notifyNestedSubs2 = subscription2.notifyNestedSubs.bind(subscription2);
            return [subscription2, notifyNestedSubs2];
          }, [store, didStoreComeFromProps, contextValue]), subscription = _useMemo2[0], notifyNestedSubs = _useMemo2[1];
          var overriddenContextValue = react.exports.useMemo(function() {
            if (didStoreComeFromProps) {
              return contextValue;
            }
            return _extends({}, contextValue, {
              subscription
            });
          }, [didStoreComeFromProps, contextValue, subscription]);
          var _useReducer = react.exports.useReducer(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates), _useReducer$ = _useReducer[0], previousStateUpdateResult = _useReducer$[0], forceComponentUpdateDispatch = _useReducer[1];
          if (previousStateUpdateResult && previousStateUpdateResult.error) {
            throw previousStateUpdateResult.error;
          }
          var lastChildProps = react.exports.useRef();
          var lastWrapperProps = react.exports.useRef(wrapperProps);
          var childPropsFromStoreUpdate = react.exports.useRef();
          var renderIsScheduled = react.exports.useRef(false);
          var actualChildProps = usePureOnlyMemo(function() {
            if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {
              return childPropsFromStoreUpdate.current;
            }
            return childPropsSelector(store.getState(), wrapperProps);
          }, [store, previousStateUpdateResult, wrapperProps]);
          useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs]);
          useIsomorphicLayoutEffectWithArgs(subscribeUpdates, [shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch], [store, subscription, childPropsSelector]);
          var renderedWrappedComponent = react.exports.useMemo(function() {
            return /* @__PURE__ */ jsxDEV(WrappedComponent, {
              ...actualChildProps,
              ref: reactReduxForwardedRef
            }, void 0, false, {
              fileName: _jsxFileName$H,
              lineNumber: 338,
              columnNumber: 29
            }, this);
          }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]);
          var renderedChild = react.exports.useMemo(function() {
            if (shouldHandleStateChanges) {
              return /* @__PURE__ */ jsxDEV(ContextToUse.Provider, {
                value: overriddenContextValue,
                children: renderedWrappedComponent
              }, void 0, false, {
                fileName: _jsxFileName$H,
                lineNumber: 349,
                columnNumber: 31
              }, this);
            }
            return renderedWrappedComponent;
          }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);
          return renderedChild;
        }
        var Connect = pure ? React.memo(ConnectFunction) : ConnectFunction;
        Connect.WrappedComponent = WrappedComponent;
        Connect.displayName = ConnectFunction.displayName = displayName;
        if (forwardRef) {
          var forwarded = React.forwardRef(function forwardConnectRef(props, ref) {
            return /* @__PURE__ */ jsxDEV(Connect, {
              ...props,
              reactReduxForwardedRef: ref
            }, void 0, false, {
              fileName: _jsxFileName$H,
              lineNumber: 366,
              columnNumber: 29
            }, this);
          });
          forwarded.displayName = displayName;
          forwarded.WrappedComponent = WrappedComponent;
          return hoistNonReactStatics_cjs(forwarded, WrappedComponent);
        }
        return hoistNonReactStatics_cjs(Connect, WrappedComponent);
      };
    }
    function is(x, y) {
      if (x === y) {
        return x !== 0 || y !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }
    function shallowEqual$1(objA, objB) {
      if (is(objA, objB))
        return true;
      if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
        return false;
      }
      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);
      if (keysA.length !== keysB.length)
        return false;
      for (var i = 0; i < keysA.length; i++) {
        if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
          return false;
        }
      }
      return true;
    }
    function bindActionCreators$1(actionCreators, dispatch) {
      var boundActionCreators = {};
      var _loop = function _loop2(key2) {
        var actionCreator = actionCreators[key2];
        if (typeof actionCreator === "function") {
          boundActionCreators[key2] = function() {
            return dispatch(actionCreator.apply(void 0, arguments));
          };
        }
      };
      for (var key in actionCreators) {
        _loop(key);
      }
      return boundActionCreators;
    }
    function isPlainObject(obj) {
      if (typeof obj !== "object" || obj === null)
        return false;
      var proto2 = Object.getPrototypeOf(obj);
      if (proto2 === null)
        return true;
      var baseProto = proto2;
      while (Object.getPrototypeOf(baseProto) !== null) {
        baseProto = Object.getPrototypeOf(baseProto);
      }
      return proto2 === baseProto;
    }
    function warning(message) {
      if (typeof console !== "undefined" && typeof console.error === "function") {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (e) {
      }
    }
    function verifyPlainObject(value2, displayName, methodName) {
      if (!isPlainObject(value2)) {
        warning(methodName + "() in " + displayName + " must return a plain object. Instead received " + value2 + ".");
      }
    }
    function wrapMapToPropsConstant(getConstant) {
      return function initConstantSelector(dispatch, options) {
        var constant2 = getConstant(dispatch, options);
        function constantSelector() {
          return constant2;
        }
        constantSelector.dependsOnOwnProps = false;
        return constantSelector;
      };
    }
    function getDependsOnOwnProps(mapToProps) {
      return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== void 0 ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
    }
    function wrapMapToPropsFunc(mapToProps, methodName) {
      return function initProxySelector(dispatch, _ref) {
        var displayName = _ref.displayName;
        var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
          return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
        };
        proxy.dependsOnOwnProps = true;
        proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
          proxy.mapToProps = mapToProps;
          proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
          var props = proxy(stateOrDispatch, ownProps);
          if (typeof props === "function") {
            proxy.mapToProps = props;
            proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
            props = proxy(stateOrDispatch, ownProps);
          }
          verifyPlainObject(props, displayName, methodName);
          return props;
        };
        return proxy;
      };
    }
    function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
      return typeof mapDispatchToProps === "function" ? wrapMapToPropsFunc(mapDispatchToProps, "mapDispatchToProps") : void 0;
    }
    function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
      return !mapDispatchToProps ? wrapMapToPropsConstant(function(dispatch) {
        return {
          dispatch
        };
      }) : void 0;
    }
    function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
      return mapDispatchToProps && typeof mapDispatchToProps === "object" ? wrapMapToPropsConstant(function(dispatch) {
        return bindActionCreators$1(mapDispatchToProps, dispatch);
      }) : void 0;
    }
    const defaultMapDispatchToPropsFactories = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];
    function whenMapStateToPropsIsFunction(mapStateToProps) {
      return typeof mapStateToProps === "function" ? wrapMapToPropsFunc(mapStateToProps, "mapStateToProps") : void 0;
    }
    function whenMapStateToPropsIsMissing(mapStateToProps) {
      return !mapStateToProps ? wrapMapToPropsConstant(function() {
        return {};
      }) : void 0;
    }
    const defaultMapStateToPropsFactories = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];
    function defaultMergeProps(stateProps, dispatchProps, ownProps) {
      return _extends({}, ownProps, stateProps, dispatchProps);
    }
    function wrapMergePropsFunc(mergeProps) {
      return function initMergePropsProxy(dispatch, _ref) {
        var displayName = _ref.displayName, pure = _ref.pure, areMergedPropsEqual = _ref.areMergedPropsEqual;
        var hasRunOnce = false;
        var mergedProps;
        return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
          var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);
          if (hasRunOnce) {
            if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps))
              mergedProps = nextMergedProps;
          } else {
            hasRunOnce = true;
            mergedProps = nextMergedProps;
            verifyPlainObject(mergedProps, displayName, "mergeProps");
          }
          return mergedProps;
        };
      };
    }
    function whenMergePropsIsFunction(mergeProps) {
      return typeof mergeProps === "function" ? wrapMergePropsFunc(mergeProps) : void 0;
    }
    function whenMergePropsIsOmitted(mergeProps) {
      return !mergeProps ? function() {
        return defaultMergeProps;
      } : void 0;
    }
    const defaultMergePropsFactories = [whenMergePropsIsFunction, whenMergePropsIsOmitted];
    function verify(selector, methodName, displayName) {
      if (!selector) {
        throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");
      } else if (methodName === "mapStateToProps" || methodName === "mapDispatchToProps") {
        if (!Object.prototype.hasOwnProperty.call(selector, "dependsOnOwnProps")) {
          warning("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");
        }
      }
    }
    function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
      verify(mapStateToProps, "mapStateToProps", displayName);
      verify(mapDispatchToProps, "mapDispatchToProps", displayName);
      verify(mergeProps, "mergeProps", displayName);
    }
    var _excluded$6 = ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"];
    function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
      return function impureFinalPropsSelector(state, ownProps) {
        return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
      };
    }
    function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
      var areStatesEqual = _ref.areStatesEqual, areOwnPropsEqual = _ref.areOwnPropsEqual, areStatePropsEqual = _ref.areStatePropsEqual;
      var hasRunAtLeastOnce = false;
      var state;
      var ownProps;
      var stateProps;
      var dispatchProps;
      var mergedProps;
      function handleFirstCall(firstState, firstOwnProps) {
        state = firstState;
        ownProps = firstOwnProps;
        stateProps = mapStateToProps(state, ownProps);
        dispatchProps = mapDispatchToProps(dispatch, ownProps);
        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        hasRunAtLeastOnce = true;
        return mergedProps;
      }
      function handleNewPropsAndNewState() {
        stateProps = mapStateToProps(state, ownProps);
        if (mapDispatchToProps.dependsOnOwnProps)
          dispatchProps = mapDispatchToProps(dispatch, ownProps);
        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        return mergedProps;
      }
      function handleNewProps() {
        if (mapStateToProps.dependsOnOwnProps)
          stateProps = mapStateToProps(state, ownProps);
        if (mapDispatchToProps.dependsOnOwnProps)
          dispatchProps = mapDispatchToProps(dispatch, ownProps);
        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        return mergedProps;
      }
      function handleNewState() {
        var nextStateProps = mapStateToProps(state, ownProps);
        var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
        stateProps = nextStateProps;
        if (statePropsChanged)
          mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
        return mergedProps;
      }
      function handleSubsequentCalls(nextState, nextOwnProps) {
        var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
        var stateChanged = !areStatesEqual(nextState, state, nextOwnProps, ownProps);
        state = nextState;
        ownProps = nextOwnProps;
        if (propsChanged && stateChanged)
          return handleNewPropsAndNewState();
        if (propsChanged)
          return handleNewProps();
        if (stateChanged)
          return handleNewState();
        return mergedProps;
      }
      return function pureFinalPropsSelector(nextState, nextOwnProps) {
        return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
      };
    }
    function finalPropsSelectorFactory(dispatch, _ref2) {
      var initMapStateToProps = _ref2.initMapStateToProps, initMapDispatchToProps = _ref2.initMapDispatchToProps, initMergeProps = _ref2.initMergeProps, options = _objectWithoutPropertiesLoose(_ref2, _excluded$6);
      var mapStateToProps = initMapStateToProps(dispatch, options);
      var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
      var mergeProps = initMergeProps(dispatch, options);
      {
        verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
      }
      var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
      return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
    }
    var _excluded$5 = ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"];
    function match(arg, factories, name) {
      for (var i = factories.length - 1; i >= 0; i--) {
        var result = factories[i](arg);
        if (result)
          return result;
      }
      return function(dispatch, options) {
        throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
      };
    }
    function strictEqual(a, b) {
      return a === b;
    }
    function createConnect(_temp) {
      var _ref = _temp === void 0 ? {} : _temp, _ref$connectHOC = _ref.connectHOC, connectHOC = _ref$connectHOC === void 0 ? connectAdvanced : _ref$connectHOC, _ref$mapStateToPropsF = _ref.mapStateToPropsFactories, mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? defaultMapStateToPropsFactories : _ref$mapStateToPropsF, _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories, mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? defaultMapDispatchToPropsFactories : _ref$mapDispatchToPro, _ref$mergePropsFactor = _ref.mergePropsFactories, mergePropsFactories = _ref$mergePropsFactor === void 0 ? defaultMergePropsFactories : _ref$mergePropsFactor, _ref$selectorFactory = _ref.selectorFactory, selectorFactory = _ref$selectorFactory === void 0 ? finalPropsSelectorFactory : _ref$selectorFactory;
      return function connect2(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {
        if (_ref2 === void 0) {
          _ref2 = {};
        }
        var _ref3 = _ref2, _ref3$pure = _ref3.pure, pure = _ref3$pure === void 0 ? true : _ref3$pure, _ref3$areStatesEqual = _ref3.areStatesEqual, areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual, _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual, areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? shallowEqual$1 : _ref3$areOwnPropsEqua, _ref3$areStatePropsEq = _ref3.areStatePropsEqual, areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? shallowEqual$1 : _ref3$areStatePropsEq, _ref3$areMergedPropsE = _ref3.areMergedPropsEqual, areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? shallowEqual$1 : _ref3$areMergedPropsE, extraOptions = _objectWithoutPropertiesLoose(_ref3, _excluded$5);
        var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, "mapStateToProps");
        var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, "mapDispatchToProps");
        var initMergeProps = match(mergeProps, mergePropsFactories, "mergeProps");
        return connectHOC(selectorFactory, _extends({
          methodName: "connect",
          getDisplayName: function getDisplayName(name) {
            return "Connect(" + name + ")";
          },
          shouldHandleStateChanges: Boolean(mapStateToProps),
          initMapStateToProps,
          initMapDispatchToProps,
          initMergeProps,
          pure,
          areStatesEqual,
          areOwnPropsEqual,
          areStatePropsEqual,
          areMergedPropsEqual
        }, extraOptions));
      };
    }
    const connect = /* @__PURE__ */ createConnect();
    setBatch(reactDom.exports.unstable_batchedUpdates);
    var PLACEMENT_AFTER = "after";
    var PLACEMENT_BEFORE = "before";
    var PLACEMENT_APPEND = "append";
    var PLACEMENT_PREPEND = "prepend";
    var SET_DRAG_PROGRESS = "SET_DRAG_PROGRESS";
    var SET_DRAG_START = "SET_DRAG_START";
    var SET_DRAG_END = "SET_DRAG_END";
    var setDragProgress = function setDragProgress2(mousePos, dragging) {
      return {
        type: SET_DRAG_PROGRESS,
        mousePos,
        dragging
      };
    };
    var setDragStart = function setDragStart2(dragStart, dragging, mousePos) {
      return {
        type: SET_DRAG_START,
        dragStart,
        dragging,
        mousePos
      };
    };
    var setDragEnd = function setDragEnd2() {
      return {
        type: SET_DRAG_END
      };
    };
    var tree = tree$1, group = group$1, rule = rule$1;
    function _createForOfIteratorHelper$1(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray$1(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray$1(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray$1(o, minLen);
    }
    function _arrayLikeToArray$1(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    var extendConfig = Utils.ConfigUtils.extendConfig;
    var configKeys = ["conjunctions", "fields", "types", "operators", "widgets", "settings", "funcs"];
    var pickConfig = function pickConfig2(props) {
      return pick_1(props, configKeys);
    };
    var createConfigMemo = function createConfigMemo2() {
      var configStore = /* @__PURE__ */ new Map();
      var maxSize = 2;
      var configId = 0;
      var extendAndStore = function extendAndStore2(config2) {
        var extendedConfig = extendConfig(config2, ++configId);
        if (configStore.size + 1 > maxSize) {
          configStore["delete"](configStore.keys()[0]);
        }
        configStore.set(config2, extendedConfig);
        return extendedConfig;
      };
      var findExtended = function findExtended2(findConfig) {
        var _iterator = _createForOfIteratorHelper$1(configStore.keys()), _step;
        try {
          var _loop = function _loop3() {
            var savedConfig = _step.value;
            var found = configKeys.map(function(k) {
              return savedConfig[k] === findConfig[k];
            }).filter(function(v) {
              return !v;
            }).length === 0;
            if (found) {
              return {
                v: configStore.get(savedConfig)
              };
            }
          };
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var _ret = _loop();
            if (_typeof$1(_ret) === "object")
              return _ret.v;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        var _iterator2 = _createForOfIteratorHelper$1(configStore.values()), _step2;
        try {
          var _loop2 = function _loop22() {
            var extendedConfig = _step2.value;
            var found = configKeys.map(function(k) {
              return extendedConfig[k] === findConfig[k];
            }).filter(function(v) {
              return !v;
            }).length === 0;
            if (found) {
              return {
                v: extendedConfig
              };
            }
          };
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var _ret2 = _loop2();
            if (_typeof$1(_ret2) === "object")
              return _ret2.v;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        return null;
      };
      var findOrExtend = function findOrExtend2(config2) {
        return findExtended(config2) || extendAndStore(config2);
      };
      return function(props) {
        return findOrExtend(pickConfig(props));
      };
    };
    var defaultValue = function defaultValue2(value2, _default) {
      return typeof value2 === "undefined" ? _default : value2;
    };
    var truncateString = function truncateString2(str, n, useWordBoundary) {
      if (!n || str.length <= n) {
        return str;
      }
      var subString = str.substr(0, n - 1);
      return (useWordBoundary ? subString.substr(0, subString.lastIndexOf(" ")) : subString) + "...";
    };
    var immutableEqual = function immutableEqual2(v1, v2) {
      if (v1 === v2) {
        return true;
      } else {
        return v1.equals(v2);
      }
    };
    var shallowEqual = function shallowEqual2(a, b) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (a === b) {
        return true;
      } else if (Array.isArray(a))
        return shallowEqualArrays(a, b, deep);
      else if (a && typeof a.equals === "function")
        return a.equals(b);
      else if (_typeof$1(a) === "object")
        return shallowEqualObjects(a, b, deep);
      else
        return a === b;
    };
    function shallowEqualArrays(arrA, arrB) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (arrA === arrB) {
        return true;
      }
      if (!arrA || !arrB) {
        return false;
      }
      var len = arrA.length;
      if (arrB.length !== len) {
        return false;
      }
      for (var i = 0; i < len; i++) {
        var isEqual = deep ? shallowEqual(arrA[i], arrB[i], deep) : arrA[i] === arrB[i];
        if (!isEqual) {
          return false;
        }
      }
      return true;
    }
    function shallowEqualObjects(objA, objB) {
      var deep = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      if (objA === objB) {
        return true;
      }
      if (!objA || !objB) {
        return false;
      }
      var aKeys = Object.keys(objA);
      var bKeys = Object.keys(objB);
      var len = aKeys.length;
      if (bKeys.length !== len) {
        return false;
      }
      for (var i = 0; i < len; i++) {
        var key = aKeys[i];
        var isEqual = deep ? shallowEqual(objA[key], objB[key], deep) : objA[key] === objB[key];
        if (!isEqual) {
          return false;
        }
      }
      return true;
    }
    var isDev = function isDev2() {
      return typeof process !== "undefined" && process.env && false;
    };
    var getLogger = function getLogger2() {
      var devMode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
      var verbose = devMode != void 0 ? devMode : isDev();
      return verbose ? console : {
        error: function error() {
        },
        log: function log() {
        },
        warn: function warn2() {
        },
        debug: function debug() {
        },
        info: function info() {
        }
      };
    };
    var logger = getLogger();
    var validateAndFixTree = Utils.validateAndFixTree;
    var createValidationMemo = function createValidationMemo2() {
      var originalTree;
      var validatedTree;
      var configId;
      return function(config2, tree2, oldConfig) {
        if (!tree2) {
          return null;
        }
        if (config2.__configId === configId && (immutableEqual(tree2, originalTree) || immutableEqual(tree2, validatedTree))) {
          return validatedTree;
        } else {
          configId = config2.__configId;
          originalTree = tree2;
          validatedTree = validateAndFixTree(tree2, null, config2, oldConfig || config2);
          return validatedTree;
        }
      };
    };
    var getReactContainerType = function getReactContainerType2(el) {
      if (el._reactRootContainer) {
        return "root";
      }
      if (Object.getOwnPropertyNames(el).filter(function(k) {
        return k.startsWith("__reactContainer");
      }).length > 0) {
        return "container";
      }
      return void 0;
    };
    var getReactRootNodeType = function getReactRootNodeType2(node) {
      if (!node) {
        return void 0;
      }
      var type = getReactContainerType(node);
      if (type !== void 0) {
        return type;
      } else {
        return getReactRootNodeType2(node.parentNode);
      }
    };
    var isUsingLegacyReactDomRender = function isUsingLegacyReactDomRender2(node) {
      return getReactRootNodeType(node) === "root";
    };
    var liteShouldComponentUpdate = function liteShouldComponentUpdate2(self2, config2) {
      return function(nextProps, nextState) {
        var prevProps = self2.props;
        var prevState = self2.state;
        var should = nextProps != prevProps || nextState != prevState;
        if (should) {
          if (prevState == nextState && prevProps != nextProps) {
            var chs = [];
            for (var k in nextProps) {
              var changed = nextProps[k] != prevProps[k];
              if (changed) {
                if (config2[k] == "ignore")
                  changed = false;
                else if (config2[k] == "shallow_deep")
                  changed = !shallowEqual(nextProps[k], prevProps[k], true);
                else if (config2[k] == "shallow")
                  changed = !shallowEqual(nextProps[k], prevProps[k]);
                else if (typeof config2[k] == "function")
                  changed = config2[k](nextProps[k], prevProps[k], nextState);
              }
              if (changed)
                chs.push(k);
            }
            if (!chs.length)
              should = false;
          }
        }
        return should;
      };
    };
    var pureShouldComponentUpdate = function pureShouldComponentUpdate2(self2) {
      return function(nextProps, nextState) {
        return !shallowEqual(self2.props, nextProps) || !shallowEqual(self2.state, nextState);
      };
    };
    var canUseUnsafe = function canUseUnsafe2() {
      var v = React.version.split(".").map(parseInt.bind(null, 10));
      return v[0] == 16 && v[1] >= 3 || v[0] > 16;
    };
    var useOnPropsChanged = function useOnPropsChanged2(obj) {
      if (canUseUnsafe) {
        obj.UNSAFE_componentWillReceiveProps = function(nextProps) {
          obj.onPropsChanged(nextProps);
        };
      } else {
        obj.componentWillReceiveProps = function(nextProps) {
          obj.onPropsChanged(nextProps);
        };
      }
    };
    var bindActionCreators = function bindActionCreators2(actionCreators, config2, dispatch) {
      return mapValues_1(actionCreators, function(actionCreator) {
        return function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return dispatch(actionCreator.apply(void 0, [config2].concat(args)));
        };
      });
    };
    function ownKeys$c(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$c(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$c(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$c(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$r(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$r();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$r() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var Query = /* @__PURE__ */ function(_Component) {
      _inherits(Query2, _Component);
      var _super = _createSuper$r(Query2);
      function Query2(props) {
        var _this;
        _classCallCheck(this, Query2);
        _this = _super.call(this, props);
        _this.shouldComponentUpdate = liteShouldComponentUpdate(_assertThisInitialized(_this), {
          tree: function tree2(nextValue) {
            if (nextValue === _this.oldValidatedTree && _this.oldValidatedTree === _this.validatedTree) {
              return false;
            }
            return true;
          }
        });
        useOnPropsChanged(_assertThisInitialized(_this));
        _this._updateActions(props);
        _this.validatedTree = props.getMemoizedTree(props.config, props.tree);
        _this.oldValidatedTree = _this.validatedTree;
        return _this;
      }
      _createClass(Query2, [{
        key: "_updateActions",
        value: function _updateActions(props) {
          var config2 = props.config, dispatch = props.dispatch;
          this.actions = bindActionCreators(_objectSpread$c(_objectSpread$c(_objectSpread$c({}, tree), group), rule), config2, dispatch);
        }
      }, {
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var onChange = nextProps.onChange;
          var oldConfig = this.props.config;
          var newTree = nextProps.tree;
          this.props.tree;
          var newConfig = nextProps.config;
          this.oldValidatedTree = this.validatedTree;
          this.validatedTree = newTree;
          if (oldConfig !== newConfig) {
            this._updateActions(nextProps);
            this.validatedTree = nextProps.getMemoizedTree(newConfig, newTree, oldConfig);
          }
          var validatedTreeChanged = !immutableEqual(this.validatedTree, this.oldValidatedTree);
          if (validatedTreeChanged) {
            onChange && onChange(this.validatedTree, newConfig, nextProps.__lastAction);
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, renderBuilder = _this$props.renderBuilder, dispatch = _this$props.dispatch, __isInternalValueChange = _this$props.__isInternalValueChange;
          var builderProps = {
            tree: this.validatedTree,
            actions: this.actions,
            config: config2,
            dispatch,
            __isInternalValueChange
          };
          return renderBuilder(builderProps);
        }
      }]);
      return Query2;
    }(react.exports.Component);
    Query.propTypes = {
      config: propTypes.exports.object.isRequired,
      onChange: propTypes.exports.func,
      renderBuilder: propTypes.exports.func,
      tree: propTypes.exports.any
    };
    var ConnectedQuery = connect(function(state) {
      return {
        tree: state.tree,
        __isInternalValueChange: state.__isInternalValueChange,
        __lastAction: state.__lastAction
      };
    }, null, null, {
      context
    })(Query);
    ConnectedQuery.displayName = "ConnectedQuery";
    var _jsxFileName$G = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/QueryContainer.js";
    function _createSuper$q(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$q();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$q() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var defaultRoot = Utils.DefaultUtils.defaultRoot;
    var QueryContainer = /* @__PURE__ */ function(_Component) {
      _inherits(QueryContainer2, _Component);
      var _super = _createSuper$q(QueryContainer2);
      function QueryContainer2(props, context2) {
        var _this;
        _classCallCheck(this, QueryContainer2);
        _this = _super.call(this, props, context2);
        _this.shouldComponentUpdate = liteShouldComponentUpdate(_assertThisInitialized(_this), {
          value: function value2(nextValue, prevValue, state) {
            return false;
          }
        });
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.getMemoizedConfig = createConfigMemo();
        _this.getMemoizedTree = createValidationMemo();
        var config2 = _this.getMemoizedConfig(props);
        var tree2 = props.value;
        var validatedTree = _this.getMemoizedTree(config2, tree2);
        var reducer = TreeStore(config2, validatedTree, _this.getMemoizedTree);
        var store = createStore(reducer);
        _this.state = {
          store,
          config: config2
        };
        return _this;
      }
      _createClass(QueryContainer2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var _this2 = this;
          var oldConfig = this.state.config;
          var nextConfig = this.getMemoizedConfig(nextProps);
          var isConfigChanged = oldConfig !== nextConfig;
          var storeValue = this.state.store.getState().tree;
          var isTreeChanged = !immutableEqual(nextProps.value, this.props.value) && !immutableEqual(nextProps.value, storeValue);
          var currentTree = isTreeChanged ? nextProps.value || defaultRoot(nextProps) : storeValue;
          if (isConfigChanged) {
            this.setState({
              config: nextConfig
            });
          }
          if (isTreeChanged || isConfigChanged) {
            var validatedTree = this.getMemoizedTree(nextConfig, currentTree, oldConfig);
            return Promise.resolve().then(function() {
              _this2.state.store.dispatch(tree.setTree(nextConfig, validatedTree));
            });
          }
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, renderBuilder = _this$props.renderBuilder, get_children = _this$props.get_children, onChange = _this$props.onChange, settings2 = _this$props.settings;
          var _this$state = this.state, config2 = _this$state.config, store = _this$state.store;
          var QueryWrapper = settings2.renderProvider;
          return /* @__PURE__ */ jsxDEV(QueryWrapper, {
            config: config2,
            children: /* @__PURE__ */ jsxDEV(Provider, {
              store,
              context,
              children: /* @__PURE__ */ jsxDEV(ConnectedQuery, {
                config: config2,
                getMemoizedTree: this.getMemoizedTree,
                onChange,
                renderBuilder: renderBuilder || get_children
              }, void 0, false, {
                fileName: _jsxFileName$G,
                lineNumber: 92,
                columnNumber: 23
              }, this)
            }, void 0, false, {
              fileName: _jsxFileName$G,
              lineNumber: 89,
              columnNumber: 23
            }, this)
          }, void 0, false, {
            fileName: _jsxFileName$G,
            lineNumber: 87,
            columnNumber: 27
          }, this);
        }
      }]);
      return QueryContainer2;
    }(react.exports.Component);
    QueryContainer.propTypes = {
      conjunctions: propTypes.exports.object.isRequired,
      fields: propTypes.exports.object.isRequired,
      types: propTypes.exports.object.isRequired,
      operators: propTypes.exports.object.isRequired,
      widgets: propTypes.exports.object.isRequired,
      settings: propTypes.exports.object.isRequired,
      onChange: propTypes.exports.func,
      renderBuilder: propTypes.exports.func,
      value: propTypes.exports.any
    };
    function _objectWithoutProperties(source, excluded) {
      if (source == null)
        return {};
      var target = _objectWithoutPropertiesLoose(source, excluded);
      var key, i;
      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key))
            continue;
          target[key] = source[key];
        }
      }
      return target;
    }
    var classnames = { exports: {} };
    /*!
    	Copyright (c) 2018 Jed Watson.
    	Licensed under the MIT License (MIT), see
    	http://jedwatson.github.io/classnames
    */
    (function(module2) {
      (function() {
        var hasOwn = {}.hasOwnProperty;
        function classNames2() {
          var classes = [];
          for (var i = 0; i < arguments.length; i++) {
            var arg = arguments[i];
            if (!arg)
              continue;
            var argType = typeof arg;
            if (argType === "string" || argType === "number") {
              classes.push(arg);
            } else if (Array.isArray(arg)) {
              if (arg.length) {
                var inner = classNames2.apply(null, arg);
                if (inner) {
                  classes.push(inner);
                }
              }
            } else if (argType === "object") {
              if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
                classes.push(arg.toString());
                continue;
              }
              for (var key in arg) {
                if (hasOwn.call(arg, key) && arg[key]) {
                  classes.push(key);
                }
              }
            }
          }
          return classes.join(" ");
        }
        if (module2.exports) {
          classNames2.default = classNames2;
          module2.exports = classNames2;
        } else {
          window.classNames = classNames2;
        }
      })();
    })(classnames);
    const classNames = classnames.exports;
    var _jsxFileName$F = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/containers/RuleContainer.js";
    function _createSuper$p(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$p();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$p() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var getFieldConfig$7 = Utils.ConfigUtils.getFieldConfig;
    var createRuleContainer = function createRuleContainer2(Rule2) {
      var _class;
      return _class = /* @__PURE__ */ function(_Component) {
        _inherits(RuleContainer2, _Component);
        var _super = _createSuper$p(RuleContainer2);
        function RuleContainer2(props) {
          var _this;
          _classCallCheck(this, RuleContainer2);
          _this = _super.call(this, props);
          _this.dummyFn = function() {
          };
          _this.removeSelf = function() {
            _this.props.actions.removeRule(_this.props.path);
          };
          _this.setLock = function() {
            var lock = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
            _this.props.actions.setLock(_this.props.path, lock);
          };
          _this.setField = function(field) {
            _this.props.actions.setField(_this.props.path, field);
          };
          _this.setOperator = function(operator) {
            _this.props.actions.setOperator(_this.props.path, operator);
          };
          _this.setOperatorOption = function(name, value2) {
            _this.props.actions.setOperatorOption(_this.props.path, name, value2);
          };
          _this.setValue = function(delta, value2, type, asyncListValues, __isInternal) {
            _this.props.actions.setValue(_this.props.path, delta, value2, type, asyncListValues, __isInternal);
          };
          _this.setValueSrc = function(delta, srcKey) {
            _this.props.actions.setValueSrc(_this.props.path, delta, srcKey);
          };
          _this.dummyFn.isDummyFn = true;
          return _this;
        }
        _createClass(RuleContainer2, [{
          key: "shouldComponentUpdate",
          value: function shouldComponentUpdate(nextProps, nextState) {
            var prevProps = this.props;
            var prevState = this.state;
            var should = pureShouldComponentUpdate(this)(nextProps, nextState);
            if (should) {
              if (prevState == nextState && prevProps != nextProps) {
                var draggingId = nextProps.dragging.id || prevProps.dragging.id;
                var isDraggingMe = draggingId == nextProps.id;
                var chs = [];
                for (var k in nextProps) {
                  var changed = nextProps[k] != prevProps[k];
                  if (k == "dragging" && !isDraggingMe) {
                    changed = false;
                  }
                  if (changed) {
                    chs.push(k);
                  }
                }
                if (!chs.length)
                  should = false;
              }
            }
            return should;
          }
        }, {
          key: "render",
          value: function render() {
            var isDraggingMe = this.props.dragging.id == this.props.id;
            var fieldConfig = getFieldConfig$7(this.props.config, this.props.field);
            var showErrorMessage = this.props.config.settings.showErrorMessage;
            fieldConfig && fieldConfig.type == "!struct";
            var isInDraggingTempo = !isDraggingMe && this.props.isDraggingTempo;
            var valueError = this.props.valueError;
            var oneValueError = valueError && valueError.toArray().filter(function(e) {
              return !!e;
            }).shift() || null;
            var hasError = oneValueError != null && showErrorMessage;
            return /* @__PURE__ */ jsxDEV("div", {
              className: classNames("group-or-rule-container", "rule-container", hasError ? "rule-with-error" : null),
              "data-id": this.props.id,
              children: [
                isDraggingMe ? /* @__PURE__ */ jsxDEV(Rule2, {
                  id: this.props.id,
                  groupId: this.props.groupId,
                  isDraggingMe: true,
                  isDraggingTempo: true,
                  dragging: this.props.dragging,
                  setField: this.dummyFn,
                  setOperator: this.dummyFn,
                  setOperatorOption: this.dummyFn,
                  setLock: this.dummyFn,
                  removeSelf: this.dummyFn,
                  setValue: this.dummyFn,
                  setValueSrc: this.dummyFn,
                  selectedField: this.props.field || null,
                  parentField: this.props.parentField || null,
                  selectedOperator: this.props.operator || null,
                  value: this.props.value || null,
                  valueSrc: this.props.valueSrc || null,
                  valueError: this.props.valueError || null,
                  operatorOptions: this.props.operatorOptions,
                  config: this.props.config,
                  reordableNodesCnt: this.props.reordableNodesCnt,
                  totalRulesCnt: this.props.totalRulesCnt,
                  asyncListValues: this.props.asyncListValues,
                  isLocked: this.props.isLocked,
                  isTrueLocked: this.props.isTrueLocked,
                  parentReordableNodesCnt: this.props.parentReordableNodesCnt
                }, "dragging", false, {
                  fileName: _jsxFileName$F,
                  lineNumber: 93,
                  columnNumber: 41
                }, this) : null,
                /* @__PURE__ */ jsxDEV(Rule2, {
                  id: this.props.id,
                  groupId: this.props.groupId,
                  isDraggingMe,
                  isDraggingTempo: isInDraggingTempo,
                  onDragStart: this.props.onDragStart,
                  setLock: isInDraggingTempo ? this.dummyFn : this.setLock,
                  removeSelf: isInDraggingTempo ? this.dummyFn : this.removeSelf,
                  setField: isInDraggingTempo ? this.dummyFn : this.setField,
                  setOperator: isInDraggingTempo ? this.dummyFn : this.setOperator,
                  setOperatorOption: isInDraggingTempo ? this.dummyFn : this.setOperatorOption,
                  setValue: isInDraggingTempo ? this.dummyFn : this.setValue,
                  setValueSrc: isInDraggingTempo ? this.dummyFn : this.setValueSrc,
                  selectedField: this.props.field || null,
                  parentField: this.props.parentField || null,
                  selectedOperator: this.props.operator || null,
                  value: this.props.value || null,
                  valueSrc: this.props.valueSrc || null,
                  valueError: this.props.valueError || null,
                  operatorOptions: this.props.operatorOptions,
                  config: this.props.config,
                  reordableNodesCnt: this.props.reordableNodesCnt,
                  totalRulesCnt: this.props.totalRulesCnt,
                  asyncListValues: this.props.asyncListValues,
                  isLocked: this.props.isLocked,
                  isTrueLocked: this.props.isTrueLocked,
                  parentReordableNodesCnt: this.props.parentReordableNodesCnt
                }, this.props.id, false, {
                  fileName: _jsxFileName$F,
                  lineNumber: 121,
                  columnNumber: 33
                }, this)
              ]
            }, void 0, false, {
              fileName: _jsxFileName$F,
              lineNumber: 90,
              columnNumber: 29
            }, this);
          }
        }]);
        return RuleContainer2;
      }(react.exports.Component), _class.propTypes = {
        id: propTypes.exports.string.isRequired,
        groupId: propTypes.exports.string,
        config: propTypes.exports.object.isRequired,
        path: propTypes.exports.any.isRequired,
        operator: propTypes.exports.string,
        field: propTypes.exports.string,
        actions: propTypes.exports.object.isRequired,
        onDragStart: propTypes.exports.func,
        value: propTypes.exports.any,
        valueSrc: propTypes.exports.any,
        asyncListValues: propTypes.exports.array,
        valueError: propTypes.exports.any,
        operatorOptions: propTypes.exports.object,
        reordableNodesCnt: propTypes.exports.number,
        parentField: propTypes.exports.string,
        isLocked: propTypes.exports.bool,
        isTrueLocked: propTypes.exports.bool,
        dragging: propTypes.exports.object,
        isDraggingTempo: propTypes.exports.bool
      }, _class;
    };
    const RuleContainer = function(Rule2) {
      var ConnectedRuleContainer = connect(function(state) {
        return {
          dragging: state.dragging
        };
      }, null, null, {
        context
      })(createRuleContainer(Rule2));
      ConnectedRuleContainer.displayName = "ConnectedRuleContainer";
      return ConnectedRuleContainer;
    };
    var _jsxFileName$E = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/containers/SortableContainer.js";
    function _createSuper$o(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$o();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$o() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var clone$2 = Utils.clone;
    var getFlatTree = Utils.TreeUtils.getFlatTree;
    var _isReorderingTree = false;
    var createSortableContainer = function createSortableContainer2(Builder2) {
      var _class;
      var CanMoveFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      return _class = /* @__PURE__ */ function(_Component) {
        _inherits(SortableContainer2, _Component);
        var _super = _createSuper$o(SortableContainer2);
        function SortableContainer2(props) {
          var _this;
          _classCallCheck(this, SortableContainer2);
          _this = _super.call(this, props);
          _this._getEventTarget = function(e, dragStart) {
            return e && e.__mocked_window || document.body || window;
          };
          _this.onDragStart = function(id, dom, e) {
            var treeEl = dom.closest(".query-builder");
            if (_this._isUsingLegacyReactDomRender === void 0) {
              _this._isUsingLegacyReactDomRender = isUsingLegacyReactDomRender(treeEl);
            }
            document.body.classList.add("qb-dragging");
            treeEl.classList.add("qb-dragging");
            var treeElContainer = treeEl.closest(".query-builder-container") || treeEl;
            treeElContainer = _this._getScrollParent(treeElContainer) || document.body;
            var scrollTop = treeElContainer.scrollTop;
            _this._getDraggableNodeEl(treeEl);
            _this._getPlaceholderNodeEl(treeEl);
            var tmpAllGroups = treeEl.querySelectorAll(".group--children");
            var anyGroup = tmpAllGroups.length ? tmpAllGroups[0] : null;
            var groupPadding;
            if (anyGroup) {
              groupPadding = window.getComputedStyle(anyGroup, null).getPropertyValue("padding-left");
              groupPadding = parseInt(groupPadding);
            }
            var dragging = {
              id,
              x: dom.offsetLeft,
              y: dom.offsetTop,
              w: dom.offsetWidth,
              h: dom.offsetHeight,
              itemInfo: _this.tree.items[id],
              paddingLeft: groupPadding
            };
            var dragStart = {
              id,
              x: dom.offsetLeft,
              y: dom.offsetTop,
              scrollTop,
              clientX: e.clientX,
              clientY: e.clientY,
              itemInfo: clone$2(_this.tree.items[id]),
              treeEl,
              treeElContainer
            };
            var mousePos = {
              clientX: e.clientX,
              clientY: e.clientY
            };
            var target = _this._getEventTarget(e, dragStart);
            _this.eventTarget = target;
            target.addEventListener("mousemove", _this.onDrag);
            target.addEventListener("mouseup", _this.onDragEnd);
            _this.props.setDragStart(dragStart, dragging, mousePos);
          };
          _this.onDrag = function(e) {
            var doHandleDrag = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
            var dragging = Object.assign({}, _this.props.dragging);
            var startDragging = _this.props.dragStart;
            var paddingLeft = dragging.paddingLeft;
            var treeElContainer = startDragging.treeElContainer;
            var scrollTop = treeElContainer.scrollTop;
            dragging.itemInfo = _this.tree.items[dragging.id];
            if (!dragging.itemInfo) {
              return;
            }
            var mousePos = {
              clientX: e.clientX,
              clientY: e.clientY
            };
            var startMousePos = {
              clientX: startDragging.clientX,
              clientY: startDragging.clientY
            };
            if (e.__mock_dom) {
              var treeEl = startDragging.treeEl;
              var dragEl = _this._getDraggableNodeEl(treeEl);
              var plhEl = _this._getPlaceholderNodeEl(treeEl);
              e.__mock_dom({
                treeEl,
                dragEl,
                plhEl
              });
            }
            if (!startDragging.plX) {
              var _treeEl = startDragging.treeEl;
              var _plhEl2 = _this._getPlaceholderNodeEl(_treeEl);
              if (_plhEl2) {
                startDragging.plX = _plhEl2.getBoundingClientRect().left + window.scrollX;
                startDragging.plY = _plhEl2.getBoundingClientRect().top + window.scrollY;
              }
            }
            var startX = startDragging.x;
            var startY = startDragging.y;
            var startClientX = startDragging.clientX;
            var startClientY = startDragging.clientY;
            var startScrollTop = startDragging.scrollTop;
            var pos = {
              x: startX + (e.clientX - startClientX),
              y: startY + (e.clientY - startClientY) + (scrollTop - startScrollTop)
            };
            dragging.x = pos.x;
            dragging.y = pos.y;
            dragging.paddingLeft = paddingLeft;
            dragging.mousePos = mousePos;
            dragging.startMousePos = startMousePos;
            _this.props.setDragProgress(mousePos, dragging);
            var moved = doHandleDrag ? _this.handleDrag(dragging, e, CanMoveFn) : false;
            if (!moved) {
              if (e.preventDefault)
                e.preventDefault();
            }
          };
          _this.onDragEnd = function() {
            var treeEl = _this.props.dragStart.treeEl;
            _this.props.setDragEnd();
            treeEl.classList.remove("qb-dragging");
            document.body.classList.remove("qb-dragging");
            _this._cacheEls = {};
            var target = _this.eventTarget || _this._getEventTarget();
            target.removeEventListener("mousemove", _this.onDrag);
            target.removeEventListener("mouseup", _this.onDragEnd);
          };
          useOnPropsChanged(_assertThisInitialized(_this));
          _this.onPropsChanged(props);
          return _this;
        }
        _createClass(SortableContainer2, [{
          key: "onPropsChanged",
          value: function onPropsChanged(nextProps) {
            this.tree = getFlatTree(nextProps.tree);
          }
        }, {
          key: "shouldComponentUpdate",
          value: function shouldComponentUpdate(nextProps, nextState) {
            var prevProps = this.props;
            var prevState = this.state;
            var should = pureShouldComponentUpdate(this)(nextProps, nextState);
            if (should) {
              if (prevState == nextState && prevProps != nextProps) {
                var chs = [];
                for (var k in nextProps) {
                  var changed = nextProps[k] != prevProps[k];
                  if (changed) {
                    if (k != "dragging" && k != "mousePos")
                      chs.push(k);
                  }
                }
                if (!chs.length)
                  should = false;
              }
            }
            return should;
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(_prevProps, _prevState) {
            var dragging = this.props.dragging;
            var startDragging = this.props.dragStart;
            _isReorderingTree = false;
            if (startDragging && startDragging.id) {
              dragging.itemInfo = this.tree.items[dragging.id];
              if (dragging.itemInfo) {
                if (dragging.itemInfo.index != startDragging.itemInfo.index || dragging.itemInfo.parent != startDragging.itemInfo.parent) {
                  var treeEl = startDragging.treeEl;
                  var treeElContainer = startDragging.treeElContainer;
                  var plhEl = this._getPlaceholderNodeEl(treeEl, true);
                  if (plhEl) {
                    var plX = plhEl.getBoundingClientRect().left + window.scrollX;
                    var plY = plhEl.getBoundingClientRect().top + window.scrollY;
                    var oldPlX = startDragging.plX;
                    var oldPlY = startDragging.plY;
                    var scrollTop = treeElContainer.scrollTop;
                    startDragging.plX = plX;
                    startDragging.plY = plY;
                    startDragging.itemInfo = clone$2(dragging.itemInfo);
                    startDragging.y = plhEl.offsetTop;
                    startDragging.x = plhEl.offsetLeft;
                    startDragging.clientY += plY - oldPlY;
                    startDragging.clientX += plX - oldPlX;
                    if (treeElContainer != document.body)
                      startDragging.scrollTop = scrollTop;
                    this.onDrag(this.props.mousePos, false);
                  }
                }
              }
            }
          }
        }, {
          key: "_getNodeElById",
          value: function _getNodeElById(treeEl, indexId) {
            var ignoreCache = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
            if (indexId == null)
              return null;
            if (!this._cacheEls)
              this._cacheEls = {};
            var el = this._cacheEls[indexId];
            if (el && document.contains(el) && !ignoreCache)
              return el;
            el = treeEl.querySelector('.group-or-rule-container[data-id="' + indexId + '"]');
            this._cacheEls[indexId] = el;
            return el;
          }
        }, {
          key: "_getDraggableNodeEl",
          value: function _getDraggableNodeEl(treeEl) {
            var ignoreCache = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
            if (!this._cacheEls)
              this._cacheEls = {};
            var el = this._cacheEls["draggable"];
            if (el && document.contains(el) && !ignoreCache)
              return el;
            var els = treeEl.getElementsByClassName("qb-draggable");
            el = els.length ? els[0] : null;
            this._cacheEls["draggable"] = el;
            return el;
          }
        }, {
          key: "_getPlaceholderNodeEl",
          value: function _getPlaceholderNodeEl(treeEl) {
            var ignoreCache = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
            if (!this._cacheEls)
              this._cacheEls = {};
            var el = this._cacheEls["placeholder"];
            if (el && document.contains(el) && !ignoreCache)
              return el;
            var els = treeEl.getElementsByClassName("qb-placeholder");
            el = els.length ? els[0] : null;
            this._cacheEls["placeholder"] = el;
            return el;
          }
        }, {
          key: "_isScrollable",
          value: function _isScrollable(node) {
            var overflowY = window.getComputedStyle(node)["overflow-y"];
            return (overflowY === "scroll" || overflowY === "auto") && node.scrollHeight > node.offsetHeight;
          }
        }, {
          key: "_getScrollParent",
          value: function _getScrollParent(node) {
            if (node == null)
              return null;
            if (node === document.body || this._isScrollable(node)) {
              return node;
            } else {
              return this._getScrollParent(node.parentNode);
            }
          }
        }, {
          key: "handleDrag",
          value: function handleDrag(dragInfo, e, canMoveFn) {
            var _this2 = this;
            var canMoveBeforeAfterGroup = true;
            var itemInfo = dragInfo.itemInfo;
            var paddingLeft = dragInfo.paddingLeft;
            var moveInfo = null;
            var treeEl = this.props.dragStart.treeEl;
            var dragId = dragInfo.id;
            var dragEl = this._getDraggableNodeEl(treeEl);
            var plhEl = this._getPlaceholderNodeEl(treeEl);
            var dragRect, plhRect, hovRect, treeRect;
            if (dragEl && plhEl) {
              dragRect = dragEl.getBoundingClientRect();
              plhRect = plhEl.getBoundingClientRect();
              if (!plhRect.width) {
                return;
              }
              var dragDirs = {
                hrz: 0,
                vrt: 0
              };
              if (dragRect.top < plhRect.top)
                dragDirs.vrt = -1;
              else if (dragRect.bottom > plhRect.bottom)
                dragDirs.vrt = 1;
              if (dragRect.left > plhRect.left)
                dragDirs.hrz = 1;
              else if (dragRect.left < plhRect.left)
                dragDirs.hrz = -1;
              treeRect = treeEl.getBoundingClientRect();
              var trgCoord = {
                x: treeRect.left + (treeRect.right - treeRect.left) / 2,
                y: dragDirs.vrt >= 0 ? dragRect.bottom : dragRect.top
              };
              var hovCNodeEl;
              if (e.__mocked_hov_container) {
                hovCNodeEl = e.__mocked_hov_container;
              } else {
                var hovNodeEl = document.elementFromPoint(trgCoord.x, trgCoord.y - 1);
                hovCNodeEl = hovNodeEl ? hovNodeEl.closest(".group-or-rule-container") : null;
                if (!hovCNodeEl && hovNodeEl && hovNodeEl.classList.contains("query-builder-container")) {
                  var _hovNodeEl$firstChild;
                  var rootGroupContainer = hovNodeEl === null || hovNodeEl === void 0 ? void 0 : (_hovNodeEl$firstChild = hovNodeEl.firstChild) === null || _hovNodeEl$firstChild === void 0 ? void 0 : _hovNodeEl$firstChild.firstChild;
                  if (rootGroupContainer && rootGroupContainer.classList.contains("group-or-rule-container")) {
                    hovCNodeEl = rootGroupContainer;
                  }
                }
              }
              if (!hovCNodeEl) {
                logger.log("out of tree bounds!");
              } else {
                var isGroup = hovCNodeEl.classList.contains("group-container");
                var hovNodeId = hovCNodeEl.getAttribute("data-id");
                var hovEl = hovCNodeEl;
                var doAppend = false;
                var doPrepend = false;
                if (hovEl) {
                  hovRect = hovEl.getBoundingClientRect();
                  var hovHeight = hovRect.bottom - hovRect.top;
                  var hovII = this.tree.items[hovNodeId];
                  var trgRect = null, trgEl = null, trgII = null, altII = null;
                  if (dragDirs.vrt == 0) {
                    trgII = itemInfo;
                    trgEl = plhEl;
                    if (trgEl)
                      trgRect = trgEl.getBoundingClientRect();
                  } else {
                    if (isGroup) {
                      if (dragDirs.vrt > 0) {
                        var hovInnerEl = hovCNodeEl.getElementsByClassName("group--header");
                        var hovEl2 = hovInnerEl.length ? hovInnerEl[0] : null;
                        if (hovEl2) {
                          var hovRect2 = hovEl2.getBoundingClientRect();
                          var hovHeight2 = hovRect2.bottom - hovRect2.top;
                          var isOverHover = dragRect.bottom - hovRect2.top > hovHeight2 * 3 / 4;
                          if (isOverHover && hovII.top > dragInfo.itemInfo.top) {
                            trgII = hovII;
                            trgRect = hovRect2;
                            trgEl = hovEl2;
                            doPrepend = true;
                          }
                        }
                      } else if (dragDirs.vrt < 0) {
                        if (hovII.lev >= itemInfo.lev) {
                          var isClimbToHover = hovRect.bottom - dragRect.top >= 2;
                          if (isClimbToHover && hovII.top < dragInfo.itemInfo.top) {
                            trgII = hovII;
                            trgRect = hovRect;
                            trgEl = hovEl;
                            doAppend = true;
                          }
                        }
                      }
                      if (!doPrepend && !doAppend || canMoveBeforeAfterGroup) {
                        var _isOverHover = dragDirs.vrt < 0 ? hovRect.bottom - dragRect.top > hovHeight - 5 : dragRect.bottom - hovRect.top > hovHeight - 5;
                        if (_isOverHover) {
                          if (!doPrepend && !doAppend) {
                            trgII = hovII;
                            trgRect = hovRect;
                            trgEl = hovEl;
                          }
                          {
                            altII = hovII;
                          }
                        }
                      }
                    } else {
                      var _isOverHover2 = dragDirs.vrt < 0 ? hovRect.bottom - dragRect.top > hovHeight / 2 : dragRect.bottom - hovRect.top > hovHeight / 2;
                      if (_isOverHover2) {
                        trgII = hovII;
                        trgRect = hovRect;
                        trgEl = hovEl;
                      }
                    }
                  }
                  var isSamePos = trgII && trgII.id == dragId;
                  if (trgRect) {
                    var dragLeftOffset = dragRect.left - treeRect.left;
                    trgRect.left - treeRect.left;
                    var dragLev = Math.max(0, Math.round(dragLeftOffset / paddingLeft));
                    var availMoves = [];
                    var altMoves = [];
                    if (isSamePos)
                      ;
                    else {
                      if (isGroup) {
                        if (doAppend) {
                          availMoves.push([PLACEMENT_APPEND, trgII, trgII.lev + 1]);
                        } else if (doPrepend) {
                          availMoves.push([PLACEMENT_PREPEND, trgII, trgII.lev + 1]);
                        }
                        if (altII) {
                          var isToRoot = altII.lev == 0;
                          var isToCase = altII.type == "case_group" && itemInfo.type != "case_group";
                          var prevCaseId = altII.prev && this.tree.items[altII.prev].caseId;
                          var nextCaseId = altII.next && this.tree.items[altII.next].caseId;
                          if (itemInfo.caseId == prevCaseId)
                            prevCaseId = null;
                          if (itemInfo.caseId == nextCaseId)
                            nextCaseId = null;
                          var prevCase = prevCaseId && this.tree.items[prevCaseId];
                          var nextCase = nextCaseId && this.tree.items[nextCaseId];
                          if (dragDirs.vrt > 0) {
                            if (isToRoot) {
                              altMoves.push([PLACEMENT_APPEND, altII, altII.lev + 1]);
                            } else if (isToCase && nextCase) {
                              altMoves.push([PLACEMENT_PREPEND, nextCase, nextCase.lev + 1]);
                            } else {
                              altMoves.push([PLACEMENT_AFTER, altII, altII.lev]);
                            }
                          } else if (dragDirs.vrt < 0) {
                            if (isToRoot) {
                              altMoves.push([PLACEMENT_PREPEND, altII, altII.lev + 1]);
                            } else if (isToCase && prevCase) {
                              altMoves.push([PLACEMENT_APPEND, prevCase, prevCase.lev + 1]);
                            } else {
                              altMoves.push([PLACEMENT_BEFORE, altII, altII.lev]);
                            }
                          }
                        }
                      }
                      if (!doAppend && !doPrepend) {
                        if (dragDirs.vrt < 0) {
                          availMoves.push([PLACEMENT_BEFORE, trgII, trgII.lev]);
                        } else if (dragDirs.vrt > 0) {
                          availMoves.push([PLACEMENT_AFTER, trgII, trgII.lev]);
                        }
                      }
                    }
                    var addCaseII = function addCaseII2(am) {
                      var toII = am[1];
                      var fromCaseII = itemInfo.caseId ? _this2.tree.items[itemInfo.caseId] : null;
                      var toCaseII = toII.caseId ? _this2.tree.items[toII.caseId] : null;
                      return [].concat(_toConsumableArray(am), [fromCaseII, toCaseII]);
                    };
                    availMoves = availMoves.map(addCaseII);
                    altMoves = altMoves.map(addCaseII);
                    availMoves = availMoves.filter(function(am) {
                      var placement = am[0];
                      var trg = am[1];
                      if ((placement == PLACEMENT_BEFORE || placement == PLACEMENT_AFTER) && trg.parent == null)
                        return false;
                      if (trg.collapsed && (placement == PLACEMENT_APPEND || placement == PLACEMENT_PREPEND))
                        return false;
                      var isInside = trg.id == itemInfo.id;
                      if (!isInside) {
                        var tmp = trg;
                        while (tmp.parent) {
                          tmp = _this2.tree.items[tmp.parent];
                          if (tmp.id == itemInfo.id) {
                            isInside = true;
                            break;
                          }
                        }
                      }
                      return !isInside;
                    }).map(function(am) {
                      var placement = am[0], toII = am[1];
                      am[2];
                      am[3];
                      am[4];
                      var toParentII = null;
                      if (placement == PLACEMENT_APPEND || placement == PLACEMENT_PREPEND)
                        toParentII = toII;
                      else
                        toParentII = _this2.tree.items[toII.parent];
                      if (toParentII && toParentII.parent == null)
                        toParentII = null;
                      am[5] = toParentII;
                      return am;
                    });
                    var bestMode = null;
                    var filteredMoves = availMoves.filter(function(am) {
                      return _this2.canMove(itemInfo, am[1], am[0], am[3], am[4], am[5], canMoveFn);
                    });
                    if (filteredMoves.length == 0 && altMoves.length > 0) {
                      filteredMoves = altMoves.filter(function(am) {
                        return _this2.canMove(itemInfo, am[1], am[0], am[3], am[4], am[5], canMoveFn);
                      });
                    }
                    var levs = filteredMoves.map(function(am) {
                      return am[2];
                    });
                    var curLev = itemInfo.lev;
                    var allLevs = levs.concat(curLev);
                    var closestDragLev = null;
                    if (allLevs.indexOf(dragLev) != -1)
                      closestDragLev = dragLev;
                    else if (dragLev > Math.max.apply(Math, _toConsumableArray(allLevs)))
                      closestDragLev = Math.max.apply(Math, _toConsumableArray(allLevs));
                    else if (dragLev < Math.min.apply(Math, _toConsumableArray(allLevs)))
                      closestDragLev = Math.min.apply(Math, _toConsumableArray(allLevs));
                    bestMode = filteredMoves.find(function(am) {
                      return am[2] == closestDragLev;
                    });
                    if (!isSamePos && !bestMode && filteredMoves.length)
                      bestMode = filteredMoves[0];
                    moveInfo = bestMode;
                  }
                }
              }
            }
            if (moveInfo) {
              this.move(itemInfo, moveInfo[1], moveInfo[0], moveInfo[3]);
              return true;
            }
            return false;
          }
        }, {
          key: "canMove",
          value: function canMove(fromII, toII, placement, fromCaseII, toCaseII, toParentII, canMoveFn) {
            if (!fromII || !toII)
              return false;
            if (fromII.id === toII.id)
              return false;
            var _this$props$config$se = this.props.config.settings, canRegroup = _this$props$config$se.canRegroup, canRegroupCases = _this$props$config$se.canRegroupCases, maxNesting = _this$props$config$se.maxNesting, maxNumberOfRules = _this$props$config$se.maxNumberOfRules, canLeaveEmptyCase = _this$props$config$se.canLeaveEmptyCase;
            var newLev = toParentII ? toParentII.lev + 1 : toII.lev;
            var isBeforeAfter = placement == PLACEMENT_BEFORE || placement == PLACEMENT_AFTER;
            var isPend = placement == PLACEMENT_PREPEND || placement == PLACEMENT_APPEND;
            var isLev1 = isBeforeAfter && toII.lev == 1 || isPend && toII.lev == 0;
            var isParentChange = fromII.parent != toII.parent;
            var isStructChange = isPend || isParentChange;
            var isForbiddenStructChange = fromII.type == "case_group" && !isLev1 || fromII.parentType == "rule_group" || toII.type == "rule_group" || toII.parentType == "rule_group" || fromII.type != "case_group" && toII.type == "case_group" && isBeforeAfter || fromII.type != "case_group" && toII.type == "switch_group" || !canRegroupCases && fromII.caseId != toII.caseId;
            var isLockedChange = toII.isLocked || fromII.isLocked || toParentII && toParentII.isLocked;
            if (maxNesting && newLev > maxNesting)
              return false;
            if (isStructChange && (!canRegroup || isForbiddenStructChange || isLockedChange))
              return false;
            if (fromII.type != "case_group" && fromII.caseId != toII.caseId) {
              var isLastFromCase = fromCaseII ? fromCaseII._height == 2 : false;
              var newRulesInTargetCase = toCaseII ? toCaseII.leafsCount + 1 : 0;
              if (maxNumberOfRules && newRulesInTargetCase > maxNumberOfRules)
                return false;
              if (isLastFromCase && !canLeaveEmptyCase)
                return false;
            }
            if (fromII.type == "case_group" && (fromII.isDefaultCase || toII.isDefaultCase || toII.type == "switch_group" && placement == PLACEMENT_APPEND)) {
              return false;
            }
            var res = true;
            if (canMoveFn) {
              res = canMoveFn(fromII.node.toJS(), toII.node.toJS(), placement, toParentII ? toParentII.node.toJS() : null);
            }
            return res;
          }
        }, {
          key: "move",
          value: function move(fromII, toII, placement, toParentII) {
            if (!this._isUsingLegacyReactDomRender) {
              _isReorderingTree = true;
            }
            this.props.actions.moveItem(fromII.path, toII.path, placement);
          }
        }, {
          key: "render",
          value: function render() {
            return /* @__PURE__ */ jsxDEV(Builder2, {
              ...this.props,
              onDragStart: this.onDragStart
            }, void 0, false, {
              fileName: _jsxFileName$E,
              lineNumber: 594,
              columnNumber: 29
            }, this);
          }
        }]);
        return SortableContainer2;
      }(react.exports.Component), _class.propTypes = {
        tree: propTypes.exports.any.isRequired,
        actions: propTypes.exports.object.isRequired
      }, _class;
    };
    const SortableContainer = function(Builder2) {
      var CanMoveFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      var ConnectedSortableContainer = connect(function(state) {
        return {
          dragging: state.dragging,
          dragStart: state.dragStart,
          mousePos: state.mousePos
        };
      }, {
        setDragStart,
        setDragProgress,
        setDragEnd
      }, null, {
        context
      })(createSortableContainer(Builder2, CanMoveFn));
      ConnectedSortableContainer.displayName = "ConnectedSortableContainer";
      return ConnectedSortableContainer;
    };
    var _jsxFileName$D = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/containers/Draggable.js";
    var _excluded$4 = ["isDraggingTempo", "isDraggingMe", "dragging"];
    function _createSuper$n(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$n();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$n() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    const Draggable = function(className) {
      return function(GroupOrRule) {
        var _class;
        return _class = /* @__PURE__ */ function(_PureComponent) {
          _inherits(Draggable2, _PureComponent);
          var _super = _createSuper$n(Draggable2);
          function Draggable2(props) {
            var _this;
            _classCallCheck(this, Draggable2);
            _this = _super.call(this, props);
            _this.handleDraggerMouseDown = function(e) {
              var nodeId = _this.props.id;
              var dom = _this.wrapper.current;
              if (_this.props.onDragStart) {
                _this.props.onDragStart(nodeId, dom, e);
              }
            };
            _this.wrapper = /* @__PURE__ */ React.createRef();
            return _this;
          }
          _createClass(Draggable2, [{
            key: "render",
            value: function render() {
              var _this$props = this.props, isDraggingTempo = _this$props.isDraggingTempo, isDraggingMe = _this$props.isDraggingMe, dragging = _this$props.dragging, otherProps = _objectWithoutProperties(_this$props, _excluded$4);
              var isTrueLocked = otherProps.isTrueLocked;
              var styles2 = {};
              if (isDraggingMe && isDraggingTempo) {
                if (_isReorderingTree)
                  ;
                else {
                  styles2 = {
                    top: dragging.y,
                    left: dragging.x,
                    width: dragging.w
                  };
                }
              }
              var cn = classNames(className, "group-or-rule", isDraggingMe && isDraggingTempo ? "qb-draggable" : null, isDraggingMe && !isDraggingTempo ? "qb-placeholder" : null, isTrueLocked ? "locked" : null);
              return /* @__PURE__ */ jsxDEV("div", {
                className: cn,
                style: styles2,
                ref: this.wrapper,
                "data-id": this.props.id,
                children: /* @__PURE__ */ jsxDEV(GroupOrRule, {
                  handleDraggerMouseDown: this.handleDraggerMouseDown,
                  isDraggingMe,
                  isDraggingTempo,
                  ...otherProps
                }, void 0, false, {
                  fileName: _jsxFileName$D,
                  lineNumber: 62,
                  columnNumber: 27
                }, this)
              }, void 0, false, {
                fileName: _jsxFileName$D,
                lineNumber: 57,
                columnNumber: 31
              }, this);
            }
          }]);
          return Draggable2;
        }(react.exports.PureComponent), _class.propTypes = {
          isDraggingTempo: propTypes.exports.bool,
          isDraggingMe: propTypes.exports.bool,
          onDragStart: propTypes.exports.func,
          dragging: propTypes.exports.object,
          isLocked: propTypes.exports.bool,
          isTrueLocked: propTypes.exports.bool
        }, _class;
      };
    };
    var arrayMap = _arrayMap, baseIteratee = _baseIteratee, basePickBy = _basePickBy, getAllKeysIn = _getAllKeysIn;
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = baseIteratee(predicate);
      return basePickBy(object, props, function(value2, path) {
        return predicate(value2, path[0]);
      });
    }
    var pickBy_1 = pickBy;
    function ownKeys$b(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$b(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$b(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$b(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$m(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$m();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$m() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var _Utils$ConfigUtils$4 = Utils.ConfigUtils, getFieldConfig$6 = _Utils$ConfigUtils$4.getFieldConfig, getOperatorConfig$3 = _Utils$ConfigUtils$4.getOperatorConfig;
    var Operator = /* @__PURE__ */ function(_PureComponent) {
      _inherits(Operator2, _PureComponent);
      var _super = _createSuper$m(Operator2);
      function Operator2(props) {
        var _this;
        _classCallCheck(this, Operator2);
        _this = _super.call(this, props);
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(Operator2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForMeta = ["config", "selectedField", "selectedOperator"];
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k) {
            return nextProps[k] !== prevProps[k];
          }).filter(function(ch) {
            return ch;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref) {
          var config2 = _ref.config, selectedField = _ref.selectedField, selectedOperator = _ref.selectedOperator;
          var fieldConfig = getFieldConfig$6(config2, selectedField);
          var operators2 = fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.operators;
          var operatorOptions = mapValues_1(pickBy_1(config2.operators, function(item, key) {
            return (operators2 === null || operators2 === void 0 ? void 0 : operators2.indexOf(key)) !== -1;
          }), function(_opts, op) {
            return getOperatorConfig$3(config2, op, selectedField);
          });
          var items = this.buildOptions(config2, operatorOptions, operators2);
          var isOpSelected = !!selectedOperator;
          var currOp = isOpSelected ? operatorOptions[selectedOperator] : null;
          var selectedOpts = currOp || {};
          var placeholder = this.props.config.settings.operatorPlaceholder;
          var selectedKey = selectedOperator;
          var selectedKeys = isOpSelected ? [selectedKey] : null;
          var selectedPath = selectedKeys;
          var selectedLabel = selectedOpts.label;
          return {
            placeholder,
            items,
            selectedKey,
            selectedKeys,
            selectedPath,
            selectedLabel,
            selectedOpts,
            fieldConfig
          };
        }
      }, {
        key: "buildOptions",
        value: function buildOptions(config2, fields2, ops) {
          if (!fields2 || !ops)
            return null;
          return keys_1(fields2).sort(function(a, b) {
            return ops.indexOf(a) - ops.indexOf(b);
          }).map(function(fieldKey) {
            var field = fields2[fieldKey];
            var label = field.label;
            return {
              key: fieldKey,
              path: fieldKey,
              label
            };
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, customProps = _this$props.customProps, setOperator2 = _this$props.setOperator, readonly = _this$props.readonly, id = _this$props.id, groupId = _this$props.groupId;
          var renderOperator = config2.settings.renderOperator;
          var renderProps = _objectSpread$b({
            id,
            groupId,
            config: config2,
            customProps,
            readonly,
            setField: setOperator2
          }, this.meta);
          if (!renderProps.items)
            return null;
          return renderOperator(renderProps);
        }
      }]);
      return Operator2;
    }(react.exports.PureComponent);
    Operator.propTypes = {
      id: propTypes.exports.string,
      groupId: propTypes.exports.string,
      config: propTypes.exports.object.isRequired,
      selectedField: propTypes.exports.string,
      selectedOperator: propTypes.exports.string,
      readonly: propTypes.exports.bool,
      setOperator: propTypes.exports.func.isRequired
    };
    var _jsxFileName$C = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/utils.js";
    var _excluded$3 = ["children"];
    var Col = function Col2(_ref) {
      var children = _ref.children, props = _objectWithoutProperties(_ref, _excluded$3);
      return /* @__PURE__ */ jsxDEV("div", {
        ...props,
        children
      }, void 0, false, {
        fileName: _jsxFileName$C,
        lineNumber: 8,
        columnNumber: 23
      }, this);
    };
    var dummyFn = function dummyFn2() {
    };
    var DragIcon = function DragIcon2() {
      return /* @__PURE__ */ jsxDEV("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        fill: "gray",
        width: "18px",
        height: "18px",
        children: [/* @__PURE__ */ jsxDEV("path", {
          d: "M0 0h24v24H0V0z",
          fill: "none"
        }, void 0, false, {
          fileName: _jsxFileName$C,
          lineNumber: 18,
          columnNumber: 19
        }, this), /* @__PURE__ */ jsxDEV("path", {
          d: "M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
        }, void 0, false, {
          fileName: _jsxFileName$C,
          lineNumber: 21,
          columnNumber: 20
        }, this)]
      }, void 0, true, {
        fileName: _jsxFileName$C,
        lineNumber: 12,
        columnNumber: 23
      }, this);
    };
    var ConfirmFn = function ConfirmFn2(Cmp) {
      return function(props) {
        var useConfirm = props.config.settings.useConfirm;
        var confirmFn = useConfirm ? useConfirm() : null;
        return /* @__PURE__ */ jsxDEV(Cmp, {
          ...props,
          confirmFn
        }, void 0, false, {
          fileName: _jsxFileName$C,
          lineNumber: 29,
          columnNumber: 25
        }, this);
      };
    };
    var _jsxFileName$B = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/rule/OperatorWrapper.js";
    function _createSuper$l(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$l();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$l() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var OperatorWrapper = /* @__PURE__ */ function(_PureComponent) {
      _inherits(OperatorWrapper2, _PureComponent);
      var _super = _createSuper$l(OperatorWrapper2);
      function OperatorWrapper2() {
        _classCallCheck(this, OperatorWrapper2);
        return _super.apply(this, arguments);
      }
      _createClass(OperatorWrapper2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, selectedField = _this$props.selectedField, selectedOperator = _this$props.selectedOperator, setOperator2 = _this$props.setOperator, selectedFieldPartsLabels = _this$props.selectedFieldPartsLabels, showOperator = _this$props.showOperator, showOperatorLabel = _this$props.showOperatorLabel, selectedFieldWidgetConfig = _this$props.selectedFieldWidgetConfig, readonly = _this$props.readonly, id = _this$props.id, groupId = _this$props.groupId;
          var operator = showOperator && /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--operator",
            children: [config2.settings.showLabels && /* @__PURE__ */ jsxDEV("label", {
              className: "rule--label",
              children: config2.settings.operatorLabel
            }, void 0, false, {
              fileName: _jsxFileName$B,
              lineNumber: 36,
              columnNumber: 53
            }, this), /* @__PURE__ */ jsxDEV(Operator, {
              config: config2,
              selectedField,
              selectedOperator,
              setOperator: setOperator2,
              readonly,
              id,
              groupId
            }, "operator", false, {
              fileName: _jsxFileName$B,
              lineNumber: 38,
              columnNumber: 55
            }, this)]
          }, "operators-for-" + (selectedFieldPartsLabels || []).join("_"), true, {
            fileName: _jsxFileName$B,
            lineNumber: 33,
            columnNumber: 51
          }, this);
          var hiddenOperator = showOperatorLabel && /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--operator",
            children: /* @__PURE__ */ jsxDEV("div", {
              className: "rule--operator-wrapper",
              children: [config2.settings.showLabels ? /* @__PURE__ */ jsxDEV("label", {
                className: "rule--label",
                children: "\xA0"
              }, void 0, false, {
                fileName: _jsxFileName$B,
                lineNumber: 53,
                columnNumber: 52
              }, this) : null, /* @__PURE__ */ jsxDEV("div", {
                className: "rule--operator-text-wrapper",
                children: /* @__PURE__ */ jsxDEV("span", {
                  className: "rule--operator-text",
                  children: selectedFieldWidgetConfig.operatorInlineLabel
                }, void 0, false, {
                  fileName: _jsxFileName$B,
                  lineNumber: 57,
                  columnNumber: 23
                }, this)
              }, void 0, false, {
                fileName: _jsxFileName$B,
                lineNumber: 55,
                columnNumber: 39
              }, this)]
            }, void 0, true, {
              fileName: _jsxFileName$B,
              lineNumber: 51,
              columnNumber: 23
            }, this)
          }, "operators-for-" + (selectedFieldPartsLabels || []).join("_"), false, {
            fileName: _jsxFileName$B,
            lineNumber: 48,
            columnNumber: 62
          }, this);
          return [operator, hiddenOperator];
        }
      }]);
      return OperatorWrapper2;
    }(react.exports.PureComponent);
    function ownKeys$a(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$a(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$a(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$a(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$k(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$k();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$k() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var _Utils$RuleUtils$3 = Utils.RuleUtils, getFieldPath$2 = _Utils$RuleUtils$3.getFieldPath, getFieldPathLabels$2 = _Utils$RuleUtils$3.getFieldPathLabels;
    var getFieldConfig$5 = Utils.ConfigUtils.getFieldConfig;
    var Field = /* @__PURE__ */ function(_PureComponent) {
      _inherits(Field2, _PureComponent);
      var _super = _createSuper$k(Field2);
      function Field2(props) {
        var _this;
        _classCallCheck(this, Field2);
        _this = _super.call(this, props);
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(Field2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForMeta = ["selectedField", "config", "parentField"];
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k) {
            return nextProps[k] !== prevProps[k];
          }).filter(function(ch) {
            return ch;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref) {
          var selectedField = _ref.selectedField, config2 = _ref.config, parentField = _ref.parentField;
          var selectedKey = selectedField;
          var _config$settings = config2.settings, maxLabelsLength = _config$settings.maxLabelsLength, fieldSeparatorDisplay = _config$settings.fieldSeparatorDisplay, fieldPlaceholder = _config$settings.fieldPlaceholder, fieldSeparator = _config$settings.fieldSeparator;
          var isFieldSelected = !!selectedField;
          var placeholder = !isFieldSelected ? truncateString(fieldPlaceholder, maxLabelsLength) : null;
          var currField = isFieldSelected ? getFieldConfig$5(config2, selectedKey) : null;
          var selectedOpts = currField || {};
          var selectedKeys = getFieldPath$2(selectedKey, config2);
          var selectedPath = getFieldPath$2(selectedKey, config2, true);
          var selectedLabel = this.getFieldLabel(currField, selectedKey, config2);
          var partsLabels = getFieldPathLabels$2(selectedKey, config2);
          var selectedFullLabel = partsLabels ? partsLabels.join(fieldSeparatorDisplay) : null;
          if (selectedFullLabel == selectedLabel || parentField)
            selectedFullLabel = null;
          var selectedAltLabel = selectedOpts.label2;
          var parentFieldPath = typeof parentField == "string" ? parentField.split(fieldSeparator) : parentField;
          var parentFieldConfig = parentField ? getFieldConfig$5(config2, parentField) : null;
          var sourceFields = parentField ? parentFieldConfig && parentFieldConfig.subfields : config2.fields;
          var items = this.buildOptions(parentFieldPath, config2, sourceFields, parentFieldPath);
          return {
            placeholder,
            items,
            parentField,
            selectedKey,
            selectedKeys,
            selectedPath,
            selectedLabel,
            selectedOpts,
            selectedAltLabel,
            selectedFullLabel
          };
        }
      }, {
        key: "getFieldLabel",
        value: function getFieldLabel(fieldOpts, fieldKey, config2) {
          if (!fieldKey)
            return null;
          var fieldSeparator = config2.settings.fieldSeparator;
          var maxLabelsLength = config2.settings.maxLabelsLength;
          var fieldParts = Array.isArray(fieldKey) ? fieldKey : fieldKey.split(fieldSeparator);
          var label = fieldOpts && fieldOpts.label || last_1(fieldParts);
          label = truncateString(label, maxLabelsLength);
          return label;
        }
      }, {
        key: "buildOptions",
        value: function buildOptions(parentFieldPath, config2, fields2) {
          var _this2 = this;
          var path = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          var optGroupLabel = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
          if (!fields2)
            return null;
          var _config$settings2 = config2.settings, fieldSeparator = _config$settings2.fieldSeparator, fieldSeparatorDisplay = _config$settings2.fieldSeparatorDisplay;
          var prefix = path ? path.join(fieldSeparator) + fieldSeparator : "";
          return keys_1(fields2).map(function(fieldKey) {
            var field = fields2[fieldKey];
            var label = _this2.getFieldLabel(field, fieldKey, config2);
            var partsLabels = getFieldPathLabels$2(prefix + fieldKey, config2);
            var fullLabel = partsLabels.join(fieldSeparatorDisplay);
            if (fullLabel == label || parentFieldPath)
              fullLabel = null;
            var altLabel = field.label2;
            var tooltip = field.tooltip;
            var subpath = (path ? path : []).concat(fieldKey);
            var disabled = field.disabled;
            if (field.hideForSelect)
              return void 0;
            if (field.type == "!struct") {
              return {
                disabled,
                key: fieldKey,
                path: prefix + fieldKey,
                label,
                fullLabel,
                altLabel,
                tooltip,
                items: _this2.buildOptions(parentFieldPath, config2, field.subfields, subpath, label)
              };
            } else {
              return {
                disabled,
                key: fieldKey,
                path: prefix + fieldKey,
                label,
                fullLabel,
                altLabel,
                tooltip,
                grouplabel: optGroupLabel
              };
            }
          }).filter(function(o) {
            return !!o;
          });
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, customProps = _this$props.customProps, setField2 = _this$props.setField, readonly = _this$props.readonly, id = _this$props.id, groupId = _this$props.groupId;
          var renderField = config2.settings.renderField;
          var renderProps = _objectSpread$a({
            id,
            groupId,
            config: config2,
            customProps,
            readonly,
            setField: setField2
          }, this.meta);
          return renderField(renderProps);
        }
      }]);
      return Field2;
    }(react.exports.PureComponent);
    Field.propTypes = {
      id: propTypes.exports.string,
      groupId: propTypes.exports.string,
      config: propTypes.exports.object.isRequired,
      selectedField: propTypes.exports.string,
      parentField: propTypes.exports.string,
      customProps: propTypes.exports.object,
      readonly: propTypes.exports.bool,
      setField: propTypes.exports.func.isRequired
    };
    var _jsxFileName$A = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/rule/FieldWrapper.js";
    function _createSuper$j(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$j();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$j() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var FieldWrapper = /* @__PURE__ */ function(_PureComponent) {
      _inherits(FieldWrapper2, _PureComponent);
      var _super = _createSuper$j(FieldWrapper2);
      function FieldWrapper2() {
        _classCallCheck(this, FieldWrapper2);
        return _super.apply(this, arguments);
      }
      _createClass(FieldWrapper2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, selectedField = _this$props.selectedField, setField2 = _this$props.setField, parentField = _this$props.parentField, classname = _this$props.classname, readonly = _this$props.readonly, id = _this$props.id, groupId = _this$props.groupId;
          return /* @__PURE__ */ jsxDEV(Col, {
            className: classname,
            children: [config2.settings.showLabels && /* @__PURE__ */ jsxDEV("label", {
              className: "rule--label",
              children: config2.settings.fieldLabel
            }, void 0, false, {
              fileName: _jsxFileName$A,
              lineNumber: 32,
              columnNumber: 53
            }, this), /* @__PURE__ */ jsxDEV(Field, {
              config: config2,
              selectedField,
              parentField,
              setField: setField2,
              customProps: config2.settings.customFieldSelectProps,
              readonly,
              id,
              groupId
            }, void 0, false, {
              fileName: _jsxFileName$A,
              lineNumber: 34,
              columnNumber: 52
            }, this)]
          }, void 0, true, {
            fileName: _jsxFileName$A,
            lineNumber: 30,
            columnNumber: 27
          }, this);
        }
      }]);
      return FieldWrapper2;
    }(react.exports.PureComponent);
    var nativeCeil = Math.ceil, nativeMax$1 = Math.max;
    function baseRange$1(start, end, step, fromRight) {
      var index = -1, length = nativeMax$1(nativeCeil((end - start) / (step || 1)), 0), result = Array(length);
      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }
    var _baseRange = baseRange$1;
    var reWhitespace = /\s/;
    function trimmedEndIndex$1(string) {
      var index = string.length;
      while (index-- && reWhitespace.test(string.charAt(index))) {
      }
      return index;
    }
    var _trimmedEndIndex = trimmedEndIndex$1;
    var trimmedEndIndex = _trimmedEndIndex;
    var reTrimStart = /^\s+/;
    function baseTrim$1(string) {
      return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
    }
    var _baseTrim = baseTrim$1;
    var baseTrim = _baseTrim, isObject$2 = isObject_1, isSymbol = isSymbol_1;
    var NAN = 0 / 0;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    function toNumber$2(value2) {
      if (typeof value2 == "number") {
        return value2;
      }
      if (isSymbol(value2)) {
        return NAN;
      }
      if (isObject$2(value2)) {
        var other = typeof value2.valueOf == "function" ? value2.valueOf() : value2;
        value2 = isObject$2(other) ? other + "" : other;
      }
      if (typeof value2 != "string") {
        return value2 === 0 ? value2 : +value2;
      }
      value2 = baseTrim(value2);
      var isBinary = reIsBinary.test(value2);
      return isBinary || reIsOctal.test(value2) ? freeParseInt(value2.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value2) ? NAN : +value2;
    }
    var toNumber_1 = toNumber$2;
    var toNumber$1 = toNumber_1;
    var INFINITY = 1 / 0, MAX_INTEGER = 17976931348623157e292;
    function toFinite$2(value2) {
      if (!value2) {
        return value2 === 0 ? value2 : 0;
      }
      value2 = toNumber$1(value2);
      if (value2 === INFINITY || value2 === -INFINITY) {
        var sign2 = value2 < 0 ? -1 : 1;
        return sign2 * MAX_INTEGER;
      }
      return value2 === value2 ? value2 : 0;
    }
    var toFinite_1 = toFinite$2;
    var baseRange = _baseRange, isIterateeCall = _isIterateeCall, toFinite$1 = toFinite_1;
    function createRange$1(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
          end = step = void 0;
        }
        start = toFinite$1(start);
        if (end === void 0) {
          end = start;
          start = 0;
        } else {
          end = toFinite$1(end);
        }
        step = step === void 0 ? start < end ? 1 : -1 : toFinite$1(step);
        return baseRange(start, end, step, fromRight);
      };
    }
    var _createRange = createRange$1;
    var createRange = _createRange;
    var range = createRange();
    var range_1 = range;
    var _excluded$2 = ["factory"];
    var getTitleInListValues = Utils.ListUtils.getTitleInListValues;
    const WidgetFactory = function(_ref) {
      var delta = _ref.delta, isFuncArg = _ref.isFuncArg;
      _ref.valueSrc;
      var immValue = _ref.value, immValueError = _ref.valueError, asyncListValues = _ref.asyncListValues, isSpecialRange = _ref.isSpecialRange, fieldDefinition = _ref.fieldDefinition;
      _ref.widget;
      var widgetDefinition = _ref.widgetDefinition, widgetValueLabel = _ref.widgetValueLabel, valueLabels = _ref.valueLabels, textSeparators = _ref.textSeparators, setValueHandler = _ref.setValueHandler, config2 = _ref.config, field = _ref.field, operator = _ref.operator, readonly = _ref.readonly, parentField = _ref.parentField, parentFuncs = _ref.parentFuncs, id = _ref.id, groupId = _ref.groupId;
      var widgetFactory = widgetDefinition.factory, fieldWidgetProps = _objectWithoutProperties(widgetDefinition, _excluded$2);
      var isConst = isFuncArg && fieldDefinition.valueSources && fieldDefinition.valueSources.length == 1 && fieldDefinition.valueSources[0] == "const";
      var defaultValue2 = fieldDefinition.defaultValue;
      if (!widgetFactory) {
        return "?";
      }
      var value2 = isSpecialRange ? [immValue.get(0), immValue.get(1)] : immValue ? immValue.get(delta) : void 0;
      var valueError = immValueError && (isSpecialRange ? [immValueError.get(0), immValueError.get(1)] : immValueError.get(delta)) || null;
      if (isSpecialRange && value2[0] === void 0 && value2[1] === void 0)
        value2 = void 0;
      var _ref2 = fieldDefinition || {}, fieldSettings = _ref2.fieldSettings;
      var widgetProps = Object.assign({}, fieldWidgetProps, fieldSettings, {
        config: config2,
        field,
        parentField,
        parentFuncs,
        fieldDefinition,
        operator,
        delta,
        isSpecialRange,
        isFuncArg,
        value: value2,
        valueError,
        label: widgetValueLabel.label,
        placeholder: widgetValueLabel.placeholder,
        placeholders: valueLabels ? valueLabels.placeholder : null,
        textSeparators,
        setValue: setValueHandler,
        readonly,
        asyncListValues,
        id,
        groupId
      });
      if (isConst && defaultValue2) {
        if (typeof defaultValue2 == "boolean") {
          return defaultValue2 ? widgetProps.labelYes || "YES" : widgetProps.labelNo || "NO";
        } else if (fieldSettings.listValues) {
          if (Array.isArray(defaultValue2))
            return defaultValue2.map(function(v) {
              return getTitleInListValues(fieldSettings.listValues, v) || v;
            }).join(", ");
          else
            return getTitleInListValues(fieldSettings.listValues, defaultValue2) || defaultValue2;
        }
        return "" + defaultValue2;
      }
      return widgetFactory(widgetProps);
    };
    var _jsxFileName$z = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/rule/Widget.js";
    function _createSuper$i(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$i();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$i() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var _Utils$ConfigUtils$3 = Utils.ConfigUtils, getFieldConfig$4 = _Utils$ConfigUtils$3.getFieldConfig, getOperatorConfig$2 = _Utils$ConfigUtils$3.getOperatorConfig, getFieldWidgetConfig$2 = _Utils$ConfigUtils$3.getFieldWidgetConfig;
    var _Utils$RuleUtils$2 = Utils.RuleUtils, getValueSourcesForFieldOp = _Utils$RuleUtils$2.getValueSourcesForFieldOp, getWidgetsForFieldOp = _Utils$RuleUtils$2.getWidgetsForFieldOp, getWidgetForFieldOp$2 = _Utils$RuleUtils$2.getWidgetForFieldOp, getValueLabel = _Utils$RuleUtils$2.getValueLabel;
    var createListFromArray$1 = Utils.DefaultUtils.createListFromArray;
    var funcArgDummyOpDef = {
      cardinality: 1
    };
    var Widget = /* @__PURE__ */ function(_PureComponent) {
      _inherits(Widget2, _PureComponent);
      var _super = _createSuper$i(Widget2);
      function Widget2(_props) {
        var _this;
        _classCallCheck(this, Widget2);
        _this = _super.call(this, _props);
        _this._setValue = function(isSpecialRange, delta, widgetType, value2, asyncListValues, __isInternal) {
          if (isSpecialRange && Array.isArray(value2)) {
            var oldRange = [_this.props.value.get(0), _this.props.value.get(1)];
            if (oldRange[0] != value2[0])
              _this.props.setValue(0, value2[0], widgetType, asyncListValues, __isInternal);
            if (oldRange[1] != value2[1])
              _this.props.setValue(1, value2[1], widgetType, asyncListValues, __isInternal);
          } else {
            _this.props.setValue(delta, value2, widgetType, asyncListValues, __isInternal);
          }
        };
        _this._onChangeValueSrc = function(delta, srcKey) {
          _this.props.setValueSrc(delta, srcKey);
        };
        _this.renderWidget = function(delta, meta, props) {
          var config2 = props.config, isFuncArg = props.isFuncArg, leftField = props.leftField, operator = props.operator, values = props.value, valueError = props.valueError, readonly = props.readonly, parentField = props.parentField, parentFuncs = props.parentFuncs, id = props.id, groupId = props.groupId;
          var settings2 = config2.settings;
          var widgets2 = meta.widgets, iValues = meta.iValues, aField = meta.aField;
          var value2 = isFuncArg ? iValues : values;
          var field = isFuncArg ? leftField : aField;
          var _widgets$delta = widgets2[delta], valueSrc = _widgets$delta.valueSrc, valueLabel = _widgets$delta.valueLabel;
          var widgetLabel = settings2.showLabels ? /* @__PURE__ */ jsxDEV("label", {
            className: "rule--label",
            children: valueLabel.label
          }, void 0, false, {
            fileName: _jsxFileName$z,
            lineNumber: 72,
            columnNumber: 60
          }, this) : null;
          return /* @__PURE__ */ jsxDEV("div", {
            className: "widget--widget",
            children: [valueSrc == "func" ? null : widgetLabel, /* @__PURE__ */ jsxDEV(WidgetFactory, {
              id,
              groupId,
              valueSrc,
              delta,
              value: value2,
              valueError,
              isFuncArg,
              ...pick_1(meta, ["isSpecialRange", "fieldDefinition", "asyncListValues"]),
              ...pick_1(widgets2[delta], ["widget", "widgetDefinition", "widgetValueLabel", "valueLabels", "textSeparators", "setValueHandler"]),
              config: config2,
              field,
              parentField,
              parentFuncs,
              operator,
              readonly
            }, void 0, false, {
              fileName: _jsxFileName$z,
              lineNumber: 78,
              columnNumber: 64
            }, this)]
          }, "widget-" + field + "-" + delta, true, {
            fileName: _jsxFileName$z,
            lineNumber: 75,
            columnNumber: 27
          }, this);
        };
        _this.renderValueSources = function(delta, meta, props) {
          var config2 = props.config, isFuncArg = props.isFuncArg, leftField = props.leftField, operator = props.operator, readonly = props.readonly;
          var settings2 = config2.settings;
          var valueSources = meta.valueSources, widgets2 = meta.widgets, aField = meta.aField;
          var field = isFuncArg ? leftField : aField;
          var _widgets$delta2 = widgets2[delta], valueSrc = _widgets$delta2.valueSrc, setValueSrcHandler = _widgets$delta2.setValueSrcHandler;
          var valueSourcesInfo = settings2.valueSourcesInfo, ValueSources = settings2.renderValueSources;
          var valueSourcesOptions = valueSources.map(function(srcKey) {
            return [srcKey, {
              label: valueSourcesInfo[srcKey].label
            }];
          });
          var sourceLabel = settings2.showLabels ? /* @__PURE__ */ jsxDEV("label", {
            className: "rule--label",
            children: "\xA0"
          }, void 0, false, {
            fileName: _jsxFileName$z,
            lineNumber: 116,
            columnNumber: 60
          }, this) : null;
          return valueSources.length > 1 && !readonly && /* @__PURE__ */ jsxDEV("div", {
            className: "widget--valuesrc",
            children: [sourceLabel, /* @__PURE__ */ jsxDEV(ValueSources, {
              delta,
              valueSources: valueSourcesOptions,
              valueSrc,
              config: config2,
              field,
              operator,
              setValueSrc: setValueSrcHandler,
              readonly,
              title: settings2.valueSourcesPopupTitle
            }, "valuesrc-" + delta, false, {
              fileName: _jsxFileName$z,
              lineNumber: 122,
              columnNumber: 36
            }, this)]
          }, "valuesrc-" + field + "-" + delta, true, {
            fileName: _jsxFileName$z,
            lineNumber: 119,
            columnNumber: 67
          }, this);
        };
        _this.renderSep = function(delta, meta, props) {
          var config2 = props.config;
          var widgets2 = meta.widgets;
          var settings2 = config2.settings;
          var sepText = widgets2[delta].sepText;
          var sepLabel = settings2.showLabels ? /* @__PURE__ */ jsxDEV("label", {
            className: "rule--label",
            children: "\xA0"
          }, void 0, false, {
            fileName: _jsxFileName$z,
            lineNumber: 140,
            columnNumber: 57
          }, this) : null;
          return sepText && /* @__PURE__ */ jsxDEV("div", {
            className: "widget--sep",
            children: [sepLabel, /* @__PURE__ */ jsxDEV("span", {
              children: sepText
            }, void 0, false, {
              fileName: _jsxFileName$z,
              lineNumber: 146,
              columnNumber: 33
            }, this)]
          }, "widget-separators-" + delta, true, {
            fileName: _jsxFileName$z,
            lineNumber: 143,
            columnNumber: 38
          }, this);
        };
        _this.renderWidgetDelta = function(delta) {
          var sep = _this.renderSep(delta, _this.meta, _this.props);
          var sources = _this.renderValueSources(delta, _this.meta, _this.props);
          var widgetCmp = _this.renderWidget(delta, _this.meta, _this.props);
          return [sep, sources, widgetCmp];
        };
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(_props);
        return _this;
      }
      _createClass(Widget2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForMeta = ["config", "field", "fieldFunc", "fieldArg", "leftField", "operator", "valueSrc", "isFuncArg", "asyncListValues"];
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k) {
            return nextProps[k] !== prevProps[k] || k == "isFuncArg" && nextProps["isFuncArg"] && nextProps["value"] !== prevProps["value"];
          }).filter(function(ch) {
            return ch;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref) {
          var _this2 = this;
          var config2 = _ref.config, simpleField = _ref.field, fieldFunc = _ref.fieldFunc, fieldArg = _ref.fieldArg, operator = _ref.operator, valueSrcs = _ref.valueSrc, values = _ref.value, isForRuleGruop = _ref.isForRuleGruop, isCaseValue = _ref.isCaseValue, isFuncArg = _ref.isFuncArg, leftField = _ref.leftField, asyncListValues = _ref.asyncListValues;
          var field = isFuncArg ? {
            func: fieldFunc,
            arg: fieldArg
          } : simpleField;
          var iValueSrcs = valueSrcs;
          var iValues = values;
          if (isFuncArg || isForRuleGruop || isCaseValue) {
            iValueSrcs = createListFromArray$1([valueSrcs]);
            iValues = createListFromArray$1([values]);
          }
          var fieldDefinition = getFieldConfig$4(config2, field);
          var defaultWidget = getWidgetForFieldOp$2(config2, field, operator);
          getWidgetsForFieldOp(config2, field, operator);
          var operatorDefinition = isFuncArg ? funcArgDummyOpDef : getOperatorConfig$2(config2, operator, field);
          if ((fieldDefinition == null || operatorDefinition == null) && !isCaseValue) {
            return null;
          }
          var isSpecialRange = operatorDefinition === null || operatorDefinition === void 0 ? void 0 : operatorDefinition.isSpecialRange;
          var isSpecialRangeForSrcField = isSpecialRange && (iValueSrcs.get(0) == "field" || iValueSrcs.get(1) == "field");
          var isTrueSpecialRange = isSpecialRange && !isSpecialRangeForSrcField;
          var cardinality = isTrueSpecialRange ? 1 : defaultValue(operatorDefinition === null || operatorDefinition === void 0 ? void 0 : operatorDefinition.cardinality, 1);
          if (cardinality === 0) {
            return null;
          }
          var valueSources = getValueSourcesForFieldOp(config2, field, operator, fieldDefinition, isFuncArg ? leftField : null);
          var widgets2 = range_1(0, cardinality).map(function(delta) {
            var _widgetDefinition;
            var valueSrc = iValueSrcs.get(delta) || null;
            var widget = getWidgetForFieldOp$2(config2, field, operator, valueSrc);
            var widgetDefinition = getFieldWidgetConfig$2(config2, field, operator, widget, valueSrc);
            if (isSpecialRangeForSrcField) {
              widget = widgetDefinition.singleWidget;
              widgetDefinition = getFieldWidgetConfig$2(config2, field, operator, widget, valueSrc);
            }
            var widgetType = (_widgetDefinition = widgetDefinition) === null || _widgetDefinition === void 0 ? void 0 : _widgetDefinition.type;
            var valueLabel = getValueLabel(config2, field, operator, delta, valueSrc, isTrueSpecialRange);
            var widgetValueLabel = getValueLabel(config2, field, operator, delta, null, isTrueSpecialRange);
            var sepText = operatorDefinition !== null && operatorDefinition !== void 0 && operatorDefinition.textSeparators ? operatorDefinition === null || operatorDefinition === void 0 ? void 0 : operatorDefinition.textSeparators[delta] : null;
            var setValueSrcHandler = _this2._onChangeValueSrc.bind(_this2, delta);
            var valueLabels = null;
            var textSeparators = null;
            if (isSpecialRange) {
              valueLabels = [getValueLabel(config2, field, operator, 0), getValueLabel(config2, field, operator, 1)];
              valueLabels = {
                placeholder: [valueLabels[0].placeholder, valueLabels[1].placeholder],
                label: [valueLabels[0].label, valueLabels[1].label]
              };
              textSeparators = operatorDefinition === null || operatorDefinition === void 0 ? void 0 : operatorDefinition.textSeparators;
            }
            var setValueHandler = _this2._setValue.bind(_this2, isSpecialRange, delta, widgetType);
            return {
              valueSrc,
              valueLabel,
              widget,
              sepText,
              setValueSrcHandler,
              widgetDefinition,
              widgetValueLabel,
              valueLabels,
              textSeparators,
              setValueHandler
            };
          });
          return {
            defaultWidget,
            fieldDefinition,
            operatorDefinition,
            isSpecialRange: isTrueSpecialRange,
            cardinality,
            valueSources,
            widgets: widgets2,
            iValues,
            aField: field,
            asyncListValues
          };
        }
      }, {
        key: "render",
        value: function render() {
          if (!this.meta)
            return null;
          var _this$meta = this.meta, defaultWidget = _this$meta.defaultWidget, cardinality = _this$meta.cardinality;
          if (!defaultWidget)
            return null;
          var name = defaultWidget;
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--widget rule--widget--".concat(name.toUpperCase()),
            children: range_1(0, cardinality).map(this.renderWidgetDelta)
          }, "widget-col-" + name, false, {
            fileName: _jsxFileName$z,
            lineNumber: 277,
            columnNumber: 27
          }, this);
        }
      }]);
      return Widget2;
    }(react.exports.PureComponent);
    Widget.propTypes = {
      config: propTypes.exports.object.isRequired,
      value: propTypes.exports.any,
      valueSrc: propTypes.exports.any,
      valueError: propTypes.exports.any,
      field: propTypes.exports.string,
      operator: propTypes.exports.string,
      readonly: propTypes.exports.bool,
      asyncListValues: propTypes.exports.array,
      id: propTypes.exports.string,
      groupId: propTypes.exports.string,
      setValue: propTypes.exports.func,
      setValueSrc: propTypes.exports.func,
      isFuncArg: propTypes.exports.bool,
      fieldFunc: propTypes.exports.string,
      fieldArg: propTypes.exports.string,
      leftField: propTypes.exports.string,
      isForRuleGruop: propTypes.exports.bool,
      parentField: propTypes.exports.string,
      parentFuncs: propTypes.exports.array,
      isCaseValue: propTypes.exports.bool
    };
    var _jsxFileName$y = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/rule/OperatorOptions.js";
    var _excluded$1 = ["factory"];
    function _createSuper$h(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$h();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$h() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var getOperatorConfig$1 = Utils.ConfigUtils.getOperatorConfig;
    var OperatorOptions = /* @__PURE__ */ function(_PureComponent) {
      _inherits(OperatorOptions2, _PureComponent);
      var _super = _createSuper$h(OperatorOptions2);
      function OperatorOptions2() {
        _classCallCheck(this, OperatorOptions2);
        return _super.apply(this, arguments);
      }
      _createClass(OperatorOptions2, [{
        key: "render",
        value: function render() {
          if (!this.props.selectedOperator)
            return null;
          var operatorDefinitions = getOperatorConfig$1(this.props.config, this.props.selectedOperator, this.props.selectedField);
          if (typeof operatorDefinitions.options === "undefined") {
            return null;
          }
          var _operatorDefinitions$ = operatorDefinitions.options, optionsFactory = _operatorDefinitions$.factory, basicOptionsProps = _objectWithoutProperties(_operatorDefinitions$, _excluded$1);
          var optionsProps = Object.assign({}, basicOptionsProps, {
            config: this.props.config,
            field: this.props.selectedField,
            operator: this.props.selectedOperator,
            options: this.props.operatorOptions,
            setOption: this.props.setOperatorOption,
            readonly: this.props.readonly
          });
          var optionsCmp = optionsFactory(optionsProps);
          var name = this.props.selectedOperator;
          return /* @__PURE__ */ jsxDEV("div", {
            className: "rule--operator rule--operator--".concat(name.toUpperCase()),
            children: optionsCmp
          }, void 0, false, {
            fileName: _jsxFileName$y,
            lineNumber: 42,
            columnNumber: 27
          }, this);
        }
      }]);
      return OperatorOptions2;
    }(react.exports.PureComponent);
    OperatorOptions.propTypes = {
      config: propTypes.exports.object.isRequired,
      operatorOptions: propTypes.exports.any.isRequired,
      selectedField: propTypes.exports.string.isRequired,
      selectedOperator: propTypes.exports.string.isRequired,
      readonly: propTypes.exports.bool,
      setOperatorOption: propTypes.exports.func.isRequired
    };
    var _jsxFileName$x = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/item/Rule.js";
    function ownKeys$9(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$9(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$9(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$9(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$g(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$g();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$g() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var _Utils$ConfigUtils$2 = Utils.ConfigUtils, getFieldConfig$3 = _Utils$ConfigUtils$2.getFieldConfig, getOperatorConfig = _Utils$ConfigUtils$2.getOperatorConfig, getFieldWidgetConfig$1 = _Utils$ConfigUtils$2.getFieldWidgetConfig;
    var getFieldPathLabels$1 = Utils.RuleUtils.getFieldPathLabels;
    var Rule = /* @__PURE__ */ function(_PureComponent) {
      _inherits(Rule2, _PureComponent);
      var _super = _createSuper$g(Rule2);
      function Rule2(props) {
        var _this;
        _classCallCheck(this, Rule2);
        _this = _super.call(this, props);
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.removeSelf = _this.removeSelf.bind(_assertThisInitialized(_this));
        _this.setLock = _this.setLock.bind(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(Rule2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForMeta = ["selectedField", "selectedOperator", "config", "reordableNodesCnt", "isLocked"];
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k) {
            return nextProps[k] !== prevProps[k];
          }).filter(function(ch) {
            return ch;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref) {
          var selectedField = _ref.selectedField, selectedOperator = _ref.selectedOperator, config2 = _ref.config, reordableNodesCnt = _ref.reordableNodesCnt, isLocked = _ref.isLocked;
          var selectedFieldPartsLabels = getFieldPathLabels$1(selectedField, config2);
          var selectedFieldConfig = getFieldConfig$3(config2, selectedField);
          var isSelectedGroup = selectedFieldConfig && selectedFieldConfig.type == "!struct";
          var isFieldAndOpSelected = selectedField && selectedOperator && !isSelectedGroup;
          var selectedOperatorConfig = getOperatorConfig(config2, selectedOperator, selectedField);
          var selectedOperatorHasOptions = selectedOperatorConfig && selectedOperatorConfig.options != null;
          var selectedFieldWidgetConfig = getFieldWidgetConfig$1(config2, selectedField, selectedOperator) || {};
          var hideOperator = selectedFieldWidgetConfig.hideOperator;
          var showDragIcon = config2.settings.canReorder && reordableNodesCnt > 1 && !isLocked;
          var showOperator = selectedField && !hideOperator;
          var showOperatorLabel = selectedField && hideOperator && selectedFieldWidgetConfig.operatorInlineLabel;
          var showWidget = isFieldAndOpSelected;
          var showOperatorOptions = isFieldAndOpSelected && selectedOperatorHasOptions;
          return {
            selectedFieldPartsLabels,
            selectedFieldWidgetConfig,
            showDragIcon,
            showOperator,
            showOperatorLabel,
            showWidget,
            showOperatorOptions
          };
        }
      }, {
        key: "setLock",
        value: function setLock2(lock) {
          this.props.setLock(lock);
        }
      }, {
        key: "removeSelf",
        value: function removeSelf() {
          var _this2 = this;
          var confirmFn = this.props.confirmFn;
          var _this$props$config$se = this.props.config.settings, renderConfirm = _this$props$config$se.renderConfirm, confirmOptions = _this$props$config$se.removeRuleConfirmOptions;
          var doRemove = function doRemove2() {
            _this2.props.removeSelf();
          };
          if (confirmOptions && !this.isEmptyCurrentRule()) {
            renderConfirm(_objectSpread$9(_objectSpread$9({}, confirmOptions), {}, {
              onOk: doRemove,
              onCancel: null,
              confirmFn
            }));
          } else {
            doRemove();
          }
        }
      }, {
        key: "isEmptyCurrentRule",
        value: function isEmptyCurrentRule() {
          return !(this.props.selectedField !== null && this.props.selectedOperator !== null && this.props.value.filter(function(val) {
            return val !== void 0;
          }).size > 0);
        }
      }, {
        key: "renderField",
        value: function renderField() {
          var _this$props = this.props, config2 = _this$props.config, isLocked = _this$props.isLocked;
          var immutableFieldsMode = config2.settings.immutableFieldsMode;
          return /* @__PURE__ */ jsxDEV(FieldWrapper, {
            classname: "rule--field",
            config: config2,
            selectedField: this.props.selectedField,
            setField: !immutableFieldsMode ? this.props.setField : dummyFn,
            parentField: this.props.parentField,
            readonly: immutableFieldsMode || isLocked,
            id: this.props.id,
            groupId: this.props.groupId
          }, "field", false, {
            fileName: _jsxFileName$x,
            lineNumber: 127,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderOperator",
        value: function renderOperator() {
          var _this$props2 = this.props, config2 = _this$props2.config, isLocked = _this$props2.isLocked;
          var _this$meta = this.meta, selectedFieldPartsLabels = _this$meta.selectedFieldPartsLabels, selectedFieldWidgetConfig = _this$meta.selectedFieldWidgetConfig, showOperator = _this$meta.showOperator, showOperatorLabel = _this$meta.showOperatorLabel;
          var immutableOpsMode = config2.settings.immutableOpsMode;
          return /* @__PURE__ */ jsxDEV(OperatorWrapper, {
            config: config2,
            selectedField: this.props.selectedField,
            selectedOperator: this.props.selectedOperator,
            setOperator: !immutableOpsMode ? this.props.setOperator : dummyFn,
            selectedFieldPartsLabels,
            showOperator,
            showOperatorLabel,
            selectedFieldWidgetConfig,
            readonly: immutableOpsMode || isLocked,
            id: this.props.id,
            groupId: this.props.groupId
          }, "operator", false, {
            fileName: _jsxFileName$x,
            lineNumber: 151,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderWidget",
        value: function renderWidget() {
          var _this$props3 = this.props, config2 = _this$props3.config, valueError = _this$props3.valueError, isLocked = _this$props3.isLocked;
          var showWidget = this.meta.showWidget;
          var immutableValuesMode = config2.settings.immutableValuesMode;
          if (!showWidget)
            return null;
          var widget = /* @__PURE__ */ jsxDEV(Widget, {
            field: this.props.selectedField,
            parentField: this.props.parentField,
            operator: this.props.selectedOperator,
            value: this.props.value,
            valueSrc: this.props.valueSrc,
            asyncListValues: this.props.asyncListValues,
            valueError,
            config: config2,
            setValue: !immutableValuesMode ? this.props.setValue : dummyFn,
            setValueSrc: !immutableValuesMode ? this.props.setValueSrc : dummyFn,
            readonly: immutableValuesMode || isLocked,
            id: this.props.id,
            groupId: this.props.groupId
          }, "values", false, {
            fileName: _jsxFileName$x,
            lineNumber: 176,
            columnNumber: 33
          }, this);
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--value",
            children: widget
          }, "widget-for-" + this.props.selectedOperator, false, {
            fileName: _jsxFileName$x,
            lineNumber: 192,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderOperatorOptions",
        value: function renderOperatorOptions() {
          var config2 = this.props.config;
          var showOperatorOptions = this.meta.showOperatorOptions;
          var _config$settings = config2.settings, immutableOpsMode = _config$settings.immutableOpsMode, immutableValuesMode = _config$settings.immutableValuesMode;
          if (!showOperatorOptions)
            return null;
          var opOpts = /* @__PURE__ */ jsxDEV(OperatorOptions, {
            selectedField: this.props.selectedField,
            selectedOperator: this.props.selectedOperator,
            operatorOptions: this.props.operatorOptions,
            setOperatorOption: !immutableOpsMode ? this.props.setOperatorOption : dummyFn,
            config: config2,
            readonly: immutableValuesMode
          }, "operatorOptions", false, {
            fileName: _jsxFileName$x,
            lineNumber: 206,
            columnNumber: 33
          }, this);
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--operator-options",
            children: opOpts
          }, "op-options-for-" + this.props.selectedOperator, false, {
            fileName: _jsxFileName$x,
            lineNumber: 215,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderBeforeWidget",
        value: function renderBeforeWidget() {
          var config2 = this.props.config;
          var renderBeforeWidget2 = config2.settings.renderBeforeWidget;
          return renderBeforeWidget2 && /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--before-widget",
            children: typeof renderBeforeWidget2 === "function" ? renderBeforeWidget2(this.props) : renderBeforeWidget2
          }, "before-widget-for-" + this.props.selectedOperator, false, {
            fileName: _jsxFileName$x,
            lineNumber: 225,
            columnNumber: 49
          }, this);
        }
      }, {
        key: "renderAfterWidget",
        value: function renderAfterWidget() {
          var config2 = this.props.config;
          var renderAfterWidget2 = config2.settings.renderAfterWidget;
          return renderAfterWidget2 && /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--after-widget",
            children: typeof renderAfterWidget2 === "function" ? renderAfterWidget2(this.props) : renderAfterWidget2
          }, "after-widget-for-" + this.props.selectedOperator, false, {
            fileName: _jsxFileName$x,
            lineNumber: 235,
            columnNumber: 48
          }, this);
        }
      }, {
        key: "renderError",
        value: function renderError() {
          var _this$props4 = this.props, config2 = _this$props4.config, valueError = _this$props4.valueError;
          var _config$settings2 = config2.settings, renderRuleError = _config$settings2.renderRuleError, showErrorMessage = _config$settings2.showErrorMessage;
          var oneValueError = valueError && valueError.toArray().filter(function(e) {
            return !!e;
          }).shift() || null;
          return showErrorMessage && oneValueError && /* @__PURE__ */ jsxDEV("div", {
            className: "rule--error",
            children: renderRuleError ? renderRuleError({
              error: oneValueError
            }) : oneValueError
          }, void 0, false, {
            fileName: _jsxFileName$x,
            lineNumber: 252,
            columnNumber: 64
          }, this);
        }
      }, {
        key: "renderDrag",
        value: function renderDrag() {
          var showDragIcon = this.meta.showDragIcon;
          return showDragIcon && /* @__PURE__ */ jsxDEV("span", {
            className: "qb-drag-handler rule--drag-handler",
            onMouseDown: this.props.handleDraggerMouseDown,
            children: [/* @__PURE__ */ jsxDEV(DragIcon, {}, void 0, false, {
              fileName: _jsxFileName$x,
              lineNumber: 266,
              columnNumber: 23
            }, this), " "]
          }, "rule-drag-icon", true, {
            fileName: _jsxFileName$x,
            lineNumber: 262,
            columnNumber: 43
          }, this);
        }
      }, {
        key: "renderDel",
        value: function renderDel() {
          var _this$props5 = this.props, config2 = _this$props5.config, isLocked = _this$props5.isLocked;
          var _config$settings3 = config2.settings, deleteLabel = _config$settings3.deleteLabel, immutableGroupsMode = _config$settings3.immutableGroupsMode, Btn = _config$settings3.renderButton, canDeleteLocked = _config$settings3.canDeleteLocked;
          return !immutableGroupsMode && (!isLocked || isLocked && canDeleteLocked) && /* @__PURE__ */ jsxDEV(Btn, {
            type: "delRule",
            onClick: this.removeSelf,
            label: deleteLabel,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$x,
            lineNumber: 279,
            columnNumber: 97
          }, this);
        }
      }, {
        key: "renderLock",
        value: function renderLock() {
          var _this$props6 = this.props, config2 = _this$props6.config, isLocked = _this$props6.isLocked, isTrueLocked = _this$props6.isTrueLocked, id = _this$props6.id;
          var _config$settings4 = config2.settings, lockLabel = _config$settings4.lockLabel, lockedLabel = _config$settings4.lockedLabel, showLock = _config$settings4.showLock, Switch = _config$settings4.renderSwitch;
          return showLock && !(isLocked && !isTrueLocked) && /* @__PURE__ */ jsxDEV(Switch, {
            type: "lock",
            id,
            value: isLocked,
            setValue: this.setLock,
            label: lockLabel,
            checkedLabel: lockedLabel,
            hideLabel: true,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$x,
            lineNumber: 299,
            columnNumber: 71
          }, this);
        }
      }, {
        key: "render",
        value: function render() {
          var _this$meta2 = this.meta, showOperatorOptions = _this$meta2.showOperatorOptions, selectedFieldWidgetConfig = _this$meta2.selectedFieldWidgetConfig;
          var _this$props7 = this.props, valueSrc = _this$props7.valueSrc, value2 = _this$props7.value, config2 = _this$props7.config;
          var canShrinkValue = valueSrc.first() == "value" && !showOperatorOptions && value2.size == 1 && selectedFieldWidgetConfig.fullWidth;
          var BtnGrp = config2.settings.renderButtonGroup;
          var parts = [this.renderField(), this.renderOperator(), this.renderBeforeWidget(), this.renderWidget(), this.renderAfterWidget(), this.renderOperatorOptions()];
          var body = /* @__PURE__ */ jsxDEV("div", {
            className: classNames("rule--body", canShrinkValue && "can--shrink--value"),
            children: parts
          }, "rule-body", false, {
            fileName: _jsxFileName$x,
            lineNumber: 323,
            columnNumber: 31
          }, this);
          var error = this.renderError();
          var drag = this.renderDrag();
          var lock = this.renderLock();
          var del = this.renderDel();
          return /* @__PURE__ */ jsxDEV(Fragment, {
            children: [drag, /* @__PURE__ */ jsxDEV("div", {
              className: "rule--body--wrapper",
              children: [body, error]
            }, void 0, true, {
              fileName: _jsxFileName$x,
              lineNumber: 331,
              columnNumber: 88
            }, this), /* @__PURE__ */ jsxDEV("div", {
              className: "rule--header",
              children: /* @__PURE__ */ jsxDEV(BtnGrp, {
                config: config2,
                children: [lock, del]
              }, void 0, true, {
                fileName: _jsxFileName$x,
                lineNumber: 335,
                columnNumber: 23
              }, this)
            }, void 0, false, {
              fileName: _jsxFileName$x,
              lineNumber: 333,
              columnNumber: 37
            }, this)]
          }, void 0, true);
        }
      }]);
      return Rule2;
    }(react.exports.PureComponent);
    Rule.propTypes = {
      id: propTypes.exports.string.isRequired,
      groupId: propTypes.exports.string,
      selectedField: propTypes.exports.string,
      selectedOperator: propTypes.exports.string,
      operatorOptions: propTypes.exports.object,
      config: propTypes.exports.object.isRequired,
      value: propTypes.exports.any,
      valueSrc: propTypes.exports.any,
      asyncListValues: propTypes.exports.array,
      isDraggingMe: propTypes.exports.bool,
      isDraggingTempo: propTypes.exports.bool,
      parentField: propTypes.exports.string,
      valueError: propTypes.exports.any,
      isLocked: propTypes.exports.bool,
      isTrueLocked: propTypes.exports.bool,
      handleDraggerMouseDown: propTypes.exports.func,
      setField: propTypes.exports.func,
      setOperator: propTypes.exports.func,
      setOperatorOption: propTypes.exports.func,
      setLock: propTypes.exports.func,
      removeSelf: propTypes.exports.func,
      setValue: propTypes.exports.func,
      setValueSrc: propTypes.exports.func,
      reordableNodesCnt: propTypes.exports.number
    };
    const Rule$1 = RuleContainer(Draggable("rule")(ConfirmFn(Rule)));
    function baseClamp$1(number, lower, upper) {
      if (number === number) {
        if (upper !== void 0) {
          number = number <= upper ? number : upper;
        }
        if (lower !== void 0) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }
    var _baseClamp = baseClamp$1;
    var toFinite = toFinite_1;
    function toInteger$1(value2) {
      var result = toFinite(value2), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    var toInteger_1 = toInteger$1;
    var baseClamp = _baseClamp, baseToString = _baseToString, toInteger = toInteger_1, toString = toString_1;
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }
    var startsWith_1 = startsWith;
    var _jsxFileName$w = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/containers/GroupContainer.js";
    function _createSuper$f(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$f();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$f() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var defaultGroupConjunction = Utils.DefaultUtils.defaultGroupConjunction;
    var createGroupContainer = function createGroupContainer2(Group2) {
      var _class;
      return _class = /* @__PURE__ */ function(_Component) {
        _inherits(GroupContainer2, _Component);
        var _super = _createSuper$f(GroupContainer2);
        function GroupContainer2(_props) {
          var _this;
          _classCallCheck(this, GroupContainer2);
          _this = _super.call(this, _props);
          _this._selectedConjunction = function(props) {
            props = props || _this.props;
            return props.conjunction || defaultGroupConjunction(props.config, props.field);
          };
          _this.setConjunction = function() {
            var conj = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
            _this.props.actions.setConjunction(_this.props.path, conj);
          };
          _this.setNot = function() {
            var not = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
            _this.props.actions.setNot(_this.props.path, not);
          };
          _this.setLock = function() {
            var lock = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
            _this.props.actions.setLock(_this.props.path, lock);
          };
          _this.dummyFn = function() {
          };
          _this.removeSelf = function() {
            _this.props.actions.removeGroup(_this.props.path);
          };
          _this.addGroup = function() {
            _this.props.actions.addGroup(_this.props.path);
          };
          _this.addCaseGroup = function() {
            _this.props.actions.addCaseGroup(_this.props.path);
          };
          _this.addDefaultCaseGroup = function() {
            _this.props.actions.addDefaultCaseGroup(_this.props.path);
          };
          _this.addRule = function() {
            _this.props.actions.addRule(_this.props.path);
          };
          _this.setField = function(field) {
            _this.props.actions.setField(_this.props.path, field);
          };
          _this.setOperator = function(operator) {
            _this.props.actions.setOperator(_this.props.path, operator);
          };
          _this.setValue = function(delta, value2, type) {
            _this.props.actions.setValue(_this.props.path, delta, value2, type);
          };
          useOnPropsChanged(_assertThisInitialized(_this));
          _this.selectedConjunction = _this._selectedConjunction(_props);
          _this.conjunctionOptions = _this._getConjunctionOptions(_props);
          _this.dummyFn.isDummyFn = true;
          return _this;
        }
        _createClass(GroupContainer2, [{
          key: "shouldComponentUpdate",
          value: function shouldComponentUpdate(nextProps, nextState) {
            var prevProps = this.props;
            var prevState = this.state;
            var should = pureShouldComponentUpdate(this)(nextProps, nextState);
            if (should) {
              if (prevState == nextState && prevProps != nextProps) {
                var draggingId = nextProps.dragging.id || prevProps.dragging.id;
                var isDraggingMe = draggingId == nextProps.id;
                var chs = [];
                for (var k in nextProps) {
                  var changed = nextProps[k] != prevProps[k];
                  if (k == "dragging" && !isDraggingMe) {
                    changed = false;
                  }
                  if (changed) {
                    chs.push(k);
                  }
                }
                if (!chs.length)
                  should = false;
              }
            }
            return should;
          }
        }, {
          key: "onPropsChanged",
          value: function onPropsChanged(nextProps) {
            var config2 = nextProps.config;
            nextProps.id;
            var conjunction = nextProps.conjunction;
            var oldConfig = this.props.config;
            var oldConjunction = this.props.conjunction;
            if (oldConfig != config2 || oldConjunction != conjunction) {
              this.selectedConjunction = this._selectedConjunction(nextProps);
              this.conjunctionOptions = this._getConjunctionOptions(nextProps);
            }
          }
        }, {
          key: "_getConjunctionOptions",
          value: function _getConjunctionOptions(props) {
            var _this2 = this;
            return mapValues_1(props.config.conjunctions, function(item, index) {
              return {
                id: "conjunction-".concat(props.id, "-").concat(index),
                name: "conjunction[".concat(props.id, "]"),
                key: index,
                label: item.label,
                checked: index === _this2._selectedConjunction(props)
              };
            });
          }
        }, {
          key: "render",
          value: function render() {
            var isDraggingMe = this.props.dragging.id == this.props.id;
            var currentNesting = this.props.path.size;
            var maxNesting = this.props.config.settings.maxNesting;
            var isInDraggingTempo = !isDraggingMe && this.props.isDraggingTempo;
            var allowFurtherNesting = typeof maxNesting === "undefined" || currentNesting < maxNesting;
            var isRoot = currentNesting == 1;
            return /* @__PURE__ */ jsxDEV("div", {
              className: "group-or-rule-container group-container",
              "data-id": this.props.id,
              children: [
                isDraggingMe ? /* @__PURE__ */ jsxDEV(Group2, {
                  id: this.props.id,
                  groupId: this.props.groupId,
                  isDraggingMe: true,
                  isDraggingTempo: true,
                  dragging: this.props.dragging,
                  isRoot,
                  allowFurtherNesting,
                  conjunctionOptions: this.conjunctionOptions,
                  not: this.props.not,
                  selectedConjunction: this.selectedConjunction,
                  setConjunction: this.dummyFn,
                  setNot: this.dummyFn,
                  setLock: this.dummyFn,
                  removeSelf: this.dummyFn,
                  addGroup: this.dummyFn,
                  addCaseGroup: this.dummyFn,
                  addDefaultCaseGroup: this.dummyFn,
                  addRule: this.dummyFn,
                  setField: this.dummyFn,
                  setOperator: this.dummyFn,
                  setValue: this.dummyFn,
                  value: this.props.value || null,
                  config: this.props.config,
                  children1: this.props.children1,
                  actions: this.props.actions,
                  reordableNodesCnt: this.props.reordableNodesCnt,
                  totalRulesCnt: this.props.totalRulesCnt,
                  selectedField: this.props.field || null,
                  parentField: this.props.parentField || null,
                  selectedOperator: this.props.operator || null,
                  isLocked: this.props.isLocked,
                  isTrueLocked: this.props.isTrueLocked,
                  parentReordableNodesCnt: this.props.parentReordableNodesCnt
                }, "dragging", false, {
                  fileName: _jsxFileName$w,
                  lineNumber: 141,
                  columnNumber: 41
                }, this) : null,
                /* @__PURE__ */ jsxDEV(Group2, {
                  id: this.props.id,
                  groupId: this.props.groupId,
                  isDraggingMe,
                  isDraggingTempo: isInDraggingTempo,
                  onDragStart: this.props.onDragStart,
                  isRoot,
                  allowFurtherNesting,
                  conjunctionOptions: this.conjunctionOptions,
                  not: this.props.not,
                  selectedConjunction: this.selectedConjunction,
                  setConjunction: isInDraggingTempo ? this.dummyFn : this.setConjunction,
                  setNot: isInDraggingTempo ? this.dummyFn : this.setNot,
                  setLock: isInDraggingTempo ? this.dummyFn : this.setLock,
                  removeSelf: isInDraggingTempo ? this.dummyFn : this.removeSelf,
                  addGroup: isInDraggingTempo ? this.dummyFn : this.addGroup,
                  addCaseGroup: isInDraggingTempo ? this.dummyFn : this.addCaseGroup,
                  addDefaultCaseGroup: isInDraggingTempo ? this.dummyFn : this.addDefaultCaseGroup,
                  addRule: isInDraggingTempo ? this.dummyFn : this.addRule,
                  setField: isInDraggingTempo ? this.dummyFn : this.setField,
                  setOperator: isInDraggingTempo ? this.dummyFn : this.setOperator,
                  setValue: isInDraggingTempo ? this.dummyFn : this.setValue,
                  value: this.props.value || null,
                  config: this.props.config,
                  children1: this.props.children1,
                  actions: this.props.actions,
                  reordableNodesCnt: this.props.reordableNodesCnt,
                  totalRulesCnt: this.props.totalRulesCnt,
                  selectedField: this.props.field || null,
                  parentField: this.props.parentField || null,
                  selectedOperator: this.props.operator || null,
                  isLocked: this.props.isLocked,
                  isTrueLocked: this.props.isTrueLocked,
                  parentReordableNodesCnt: this.props.parentReordableNodesCnt
                }, this.props.id, false, {
                  fileName: _jsxFileName$w,
                  lineNumber: 178,
                  columnNumber: 33
                }, this)
              ]
            }, void 0, false, {
              fileName: _jsxFileName$w,
              lineNumber: 138,
              columnNumber: 29
            }, this);
          }
        }]);
        return GroupContainer2;
      }(react.exports.Component), _class.propTypes = {
        config: propTypes.exports.object.isRequired,
        actions: propTypes.exports.object.isRequired,
        path: propTypes.exports.any.isRequired,
        id: propTypes.exports.string.isRequired,
        groupId: propTypes.exports.string,
        not: propTypes.exports.bool,
        conjunction: propTypes.exports.string,
        children1: propTypes.exports.any,
        onDragStart: propTypes.exports.func,
        reordableNodesCnt: propTypes.exports.number,
        field: propTypes.exports.string,
        parentField: propTypes.exports.string,
        isLocked: propTypes.exports.bool,
        isTrueLocked: propTypes.exports.bool,
        dragging: propTypes.exports.object,
        isDraggingTempo: propTypes.exports.bool
      }, _class;
    };
    const GroupContainer = function(Group2) {
      var ConnectedGroupContainer = connect(function(state) {
        return {
          dragging: state.dragging
        };
      }, null, null, {
        context
      })(createGroupContainer(Group2));
      ConnectedGroupContainer.displayName = "ConnectedGroupContainer";
      return ConnectedGroupContainer;
    };
    var _jsxFileName$v = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/item/GroupActions.js";
    function _createSuper$e(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$e();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$e() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var groupActionsPositionList$1 = {
      topLeft: "group--actions--tl",
      topCenter: "group--actions--tc",
      topRight: "group--actions--tr",
      bottomLeft: "group--actions--bl",
      bottomCenter: "group--actions--bc",
      bottomRight: "group--actions--br"
    };
    var defaultPosition$2 = "topRight";
    var GroupActions = /* @__PURE__ */ function(_PureComponent) {
      _inherits(GroupActions2, _PureComponent);
      var _super = _createSuper$e(GroupActions2);
      function GroupActions2() {
        _classCallCheck(this, GroupActions2);
        return _super.apply(this, arguments);
      }
      _createClass(GroupActions2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, addRule2 = _this$props.addRule, addGroup2 = _this$props.addGroup, removeSelf = _this$props.removeSelf, setLock2 = _this$props.setLock, isLocked = _this$props.isLocked, isTrueLocked = _this$props.isTrueLocked, id = _this$props.id, canAddGroup = _this$props.canAddGroup, canAddRule = _this$props.canAddRule, canDeleteGroup = _this$props.canDeleteGroup;
          var _config$settings = config2.settings, immutableGroupsMode = _config$settings.immutableGroupsMode, addRuleLabel = _config$settings.addRuleLabel, addGroupLabel = _config$settings.addGroupLabel, delGroupLabel = _config$settings.delGroupLabel, groupActionsPosition = _config$settings.groupActionsPosition, Btn = _config$settings.renderButton, Switch = _config$settings.renderSwitch, BtnGrp = _config$settings.renderButtonGroup, lockLabel = _config$settings.lockLabel, lockedLabel = _config$settings.lockedLabel, showLock = _config$settings.showLock, canDeleteLocked = _config$settings.canDeleteLocked;
          var position = groupActionsPositionList$1[groupActionsPosition || defaultPosition$2];
          var setLockSwitch = showLock && !(isLocked && !isTrueLocked) && /* @__PURE__ */ jsxDEV(Switch, {
            type: "lock",
            id,
            value: isLocked,
            setValue: setLock2,
            label: lockLabel,
            checkedLabel: lockedLabel,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$v,
            lineNumber: 54,
            columnNumber: 84
          }, this);
          var addRuleBtn = !immutableGroupsMode && canAddRule && !isLocked && /* @__PURE__ */ jsxDEV(Btn, {
            type: "addRule",
            onClick: addRule2,
            label: addRuleLabel,
            readonly: isLocked,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$v,
            lineNumber: 63,
            columnNumber: 88
          }, this);
          var addGroupBtn = !immutableGroupsMode && canAddGroup && !isLocked && /* @__PURE__ */ jsxDEV(Btn, {
            type: "addGroup",
            onClick: addGroup2,
            label: addGroupLabel,
            readonly: isLocked,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$v,
            lineNumber: 70,
            columnNumber: 90
          }, this);
          var delGroupBtn = !immutableGroupsMode && canDeleteGroup && (!isLocked || isLocked && canDeleteLocked) && /* @__PURE__ */ jsxDEV(Btn, {
            type: "delGroup",
            onClick: removeSelf,
            label: delGroupLabel,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$v,
            lineNumber: 77,
            columnNumber: 126
          }, this);
          return /* @__PURE__ */ jsxDEV("div", {
            className: "group--actions ".concat(position),
            children: /* @__PURE__ */ jsxDEV(BtnGrp, {
              config: config2,
              children: [setLockSwitch, addRuleBtn, addGroupBtn, delGroupBtn]
            }, void 0, true, {
              fileName: _jsxFileName$v,
              lineNumber: 85,
              columnNumber: 23
            }, this)
          }, void 0, false, {
            fileName: _jsxFileName$v,
            lineNumber: 83,
            columnNumber: 27
          }, this);
        }
      }]);
      return GroupActions2;
    }(react.exports.PureComponent);
    var _jsxFileName$u = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/item/Group.js";
    function ownKeys$8(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$8(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$8(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$8(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$d(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$d();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$d() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var defaultPosition$1 = "topRight";
    var BasicGroup = /* @__PURE__ */ function(_PureComponent) {
      _inherits(BasicGroup2, _PureComponent);
      var _super = _createSuper$d(BasicGroup2);
      function BasicGroup2(props) {
        var _this;
        _classCallCheck(this, BasicGroup2);
        _this = _super.call(this, props);
        _this.childrenClassName = function() {
          return "";
        };
        _this.renderBeforeActions = function() {
          var BeforeActions = _this.props.config.settings.renderBeforeActions;
          if (BeforeActions == void 0)
            return null;
          return typeof BeforeActions === "function" ? /* @__PURE__ */ jsxDEV(BeforeActions, {
            ..._this.props
          }, void 0, false, {
            fileName: _jsxFileName$u,
            lineNumber: 36,
            columnNumber: 65
          }, this) : BeforeActions;
        };
        _this.renderAfterActions = function() {
          var AfterActions = _this.props.config.settings.renderAfterActions;
          if (AfterActions == void 0)
            return null;
          return typeof AfterActions === "function" ? /* @__PURE__ */ jsxDEV(AfterActions, {
            ..._this.props
          }, void 0, false, {
            fileName: _jsxFileName$u,
            lineNumber: 41,
            columnNumber: 64
          }, this) : AfterActions;
        };
        _this.removeSelf = _this.removeSelf.bind(_assertThisInitialized(_this));
        _this.setLock = _this.setLock.bind(_assertThisInitialized(_this));
        _this.renderItem = _this.renderItem.bind(_assertThisInitialized(_this));
        return _this;
      }
      _createClass(BasicGroup2, [{
        key: "isGroupTopPosition",
        value: function isGroupTopPosition() {
          return startsWith_1(this.props.config.settings.groupActionsPosition || defaultPosition$1, "top");
        }
      }, {
        key: "setLock",
        value: function setLock2(lock) {
          this.props.setLock(lock);
        }
      }, {
        key: "removeSelf",
        value: function removeSelf() {
          var _this2 = this;
          var confirmFn = this.props.confirmFn;
          var _this$props$config$se = this.props.config.settings, renderConfirm = _this$props$config$se.renderConfirm, confirmOptions = _this$props$config$se.removeGroupConfirmOptions;
          var doRemove = function doRemove2() {
            _this2.props.removeSelf();
          };
          if (confirmOptions && !this.isEmptyCurrentGroup()) {
            renderConfirm(_objectSpread$8(_objectSpread$8({}, confirmOptions), {}, {
              onOk: doRemove,
              onCancel: null,
              confirmFn
            }));
          } else {
            doRemove();
          }
        }
      }, {
        key: "isEmptyCurrentGroup",
        value: function isEmptyCurrentGroup() {
          var children = this.props.children1;
          return !children || children.size == 0 || children.size == 1 && this.isEmpty(children.first());
        }
      }, {
        key: "isEmpty",
        value: function isEmpty(item) {
          var isGroup = item.get("type") == "group" || item.get("type") == "rule_group";
          return isGroup ? this.isEmptyGroup(item) : this.isEmptyRule(item);
        }
      }, {
        key: "isEmptyGroup",
        value: function isEmptyGroup(group2) {
          var children = group2.get("children1");
          return !children || children.size == 0 || children.size == 1 && this.isEmpty(children.first());
        }
      }, {
        key: "isEmptyRule",
        value: function isEmptyRule(rule2) {
          var properties = rule2.get("properties");
          return !(properties.get("field") !== null && properties.get("operator") !== null && properties.get("value").filter(function(val) {
            return val !== void 0;
          }).size > 0);
        }
      }, {
        key: "render",
        value: function render() {
          return /* @__PURE__ */ jsxDEV(Fragment, {
            children: [this.renderHeaderWrapper(), this.renderChildrenWrapper(), this.renderFooterWrapper()]
          }, void 0, true);
        }
      }, {
        key: "showNot",
        value: function showNot() {
          var config2 = this.props.config;
          return config2.settings.showNot;
        }
      }, {
        key: "showConjs",
        value: function showConjs() {
          var _this$props = this.props, conjunctionOptions = _this$props.conjunctionOptions;
          _this$props.children1;
          _this$props.config;
          var conjunctionCount = Object.keys(conjunctionOptions).length;
          return conjunctionCount > 1 || this.showNot();
        }
      }, {
        key: "isNoChildren",
        value: function isNoChildren() {
          var children1 = this.props.children1;
          return children1 ? children1.size == 0 : true;
        }
      }, {
        key: "isOneChild",
        value: function isOneChild() {
          var children1 = this.props.children1;
          return children1 ? children1.size < 2 : true;
        }
      }, {
        key: "renderChildrenWrapper",
        value: function renderChildrenWrapper() {
          var children1 = this.props.children1;
          return children1 && /* @__PURE__ */ jsxDEV("div", {
            className: classNames("group--children", !this.showConjs() ? "hide--conjs" : "", this.isOneChild() ? "hide--line" : "", this.isOneChild() ? "one--child" : "", this.childrenClassName()),
            children: this.renderChildren()
          }, "group-children", false, {
            fileName: _jsxFileName$u,
            lineNumber: 144,
            columnNumber: 40
          }, this);
        }
      }, {
        key: "renderHeaderWrapper",
        value: function renderHeaderWrapper() {
          var isGroupTopPosition = this.isGroupTopPosition();
          return /* @__PURE__ */ jsxDEV("div", {
            className: classNames("group--header", this.isOneChild() ? "one--child" : "", !this.showConjs() ? "hide--conjs" : "", this.isOneChild() ? "hide--line" : "", this.isNoChildren() ? "no--children" : ""),
            children: [this.renderHeader(), isGroupTopPosition && this.renderBeforeActions(), isGroupTopPosition && this.renderActions(), isGroupTopPosition && this.renderAfterActions()]
          }, "group-header", true, {
            fileName: _jsxFileName$u,
            lineNumber: 153,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderFooterWrapper",
        value: function renderFooterWrapper() {
          var isGroupTopPosition = this.isGroupTopPosition();
          return !isGroupTopPosition && /* @__PURE__ */ jsxDEV("div", {
            className: "group--footer",
            children: [this.renderBeforeActions(), this.renderActions(), this.renderAfterActions()]
          }, "group-footer", true, {
            fileName: _jsxFileName$u,
            lineNumber: 162,
            columnNumber: 50
          }, this);
        }
      }, {
        key: "renderActions",
        value: function renderActions() {
          var _this$props2 = this.props, config2 = _this$props2.config, addRule2 = _this$props2.addRule, addGroup2 = _this$props2.addGroup, isLocked = _this$props2.isLocked, isTrueLocked = _this$props2.isTrueLocked, id = _this$props2.id;
          return /* @__PURE__ */ jsxDEV(GroupActions, {
            config: config2,
            addRule: addRule2,
            addGroup: addGroup2,
            canAddGroup: this.canAddGroup(),
            canAddRule: this.canAddRule(),
            canDeleteGroup: this.canDeleteGroup(),
            removeSelf: this.removeSelf,
            setLock: this.setLock,
            isLocked,
            isTrueLocked,
            id
          }, void 0, false, {
            fileName: _jsxFileName$u,
            lineNumber: 177,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "canAddGroup",
        value: function canAddGroup() {
          return this.props.allowFurtherNesting;
        }
      }, {
        key: "canAddRule",
        value: function canAddRule() {
          var maxNumberOfRules = this.props.config.settings.maxNumberOfRules;
          var totalRulesCnt = this.props.totalRulesCnt;
          if (maxNumberOfRules) {
            return totalRulesCnt < maxNumberOfRules;
          }
          return true;
        }
      }, {
        key: "canDeleteGroup",
        value: function canDeleteGroup() {
          return !this.props.isRoot;
        }
      }, {
        key: "renderChildren",
        value: function renderChildren() {
          var children1 = this.props.children1;
          return children1 ? children1.map(this.renderItem).toList() : null;
        }
      }, {
        key: "renderItem",
        value: function renderItem(item) {
          var props = this.props;
          var config2 = props.config, actions = props.actions, onDragStart = props.onDragStart, isLocked = props.isLocked;
          var isRuleGroup = item.get("type") == "group" && item.getIn(["properties", "field"]) != null;
          var type = isRuleGroup ? "rule_group" : item.get("type");
          return /* @__PURE__ */ react.exports.createElement(Item, {
            ...this.extraPropsForItem(item),
            key: item.get("id"),
            id: item.get("id"),
            groupId: props.id,
            path: item.get("path"),
            type,
            properties: item.get("properties"),
            config: config2,
            actions,
            children1: item.get("children1"),
            reordableNodesCnt: this.reordableNodesCntForItem(item),
            totalRulesCnt: this.totalRulesCntForItem(item),
            parentReordableNodesCnt: this.reordableNodesCnt(),
            onDragStart,
            isDraggingTempo: this.props.isDraggingTempo,
            isParentLocked: isLocked,
            __self: this,
            __source: {
              fileName: _jsxFileName$u,
              lineNumber: 227,
              columnNumber: 27
            }
          });
        }
      }, {
        key: "extraPropsForItem",
        value: function extraPropsForItem(_item) {
          return {};
        }
      }, {
        key: "reordableNodesCnt",
        value: function reordableNodesCnt() {
          if (this.props.isLocked)
            return 0;
          return this.props.reordableNodesCnt;
        }
      }, {
        key: "totalRulesCntForItem",
        value: function totalRulesCntForItem(_item) {
          return this.props.totalRulesCnt;
        }
      }, {
        key: "reordableNodesCntForItem",
        value: function reordableNodesCntForItem(_item) {
          if (this.props.isLocked)
            return 0;
          return this.reordableNodesCnt();
        }
      }, {
        key: "showDragIcon",
        value: function showDragIcon() {
          var _this$props3 = this.props, config2 = _this$props3.config, isRoot = _this$props3.isRoot, isLocked = _this$props3.isLocked;
          var reordableNodesCnt = this.reordableNodesCnt();
          return config2.settings.canReorder && !isRoot && reordableNodesCnt > 1 && !isLocked;
        }
      }, {
        key: "renderDrag",
        value: function renderDrag() {
          var handleDraggerMouseDown = this.props.handleDraggerMouseDown;
          var drag = this.showDragIcon() && /* @__PURE__ */ jsxDEV("span", {
            className: "qb-drag-handler group--drag-handler",
            onMouseDown: handleDraggerMouseDown,
            children: [/* @__PURE__ */ jsxDEV(DragIcon, {}, void 0, false, {
              fileName: _jsxFileName$u,
              lineNumber: 289,
              columnNumber: 23
            }, this), " "]
          }, "group-drag-icon", true, {
            fileName: _jsxFileName$u,
            lineNumber: 285,
            columnNumber: 54
          }, this);
          return drag;
        }
      }, {
        key: "conjunctionOptions",
        value: function conjunctionOptions() {
          var conjunctionOptions2 = this.props.conjunctionOptions;
          return conjunctionOptions2;
        }
      }, {
        key: "renderConjs",
        value: function renderConjs() {
          var _this$props4 = this.props, config2 = _this$props4.config, children1 = _this$props4.children1, id = _this$props4.id, selectedConjunction = _this$props4.selectedConjunction, setConjunction2 = _this$props4.setConjunction, not = _this$props4.not, setNot2 = _this$props4.setNot, isLocked = _this$props4.isLocked;
          var _config$settings = config2.settings, immutableGroupsMode = _config$settings.immutableGroupsMode, Conjs = _config$settings.renderConjs;
          _config$settings.showNot;
          var notLabel = _config$settings.notLabel;
          var conjunctionOptions = this.conjunctionOptions();
          if (!this.showConjs())
            return null;
          if (!children1 || !children1.size)
            return null;
          var renderProps = {
            disabled: this.isOneChild(),
            readonly: immutableGroupsMode || isLocked,
            selectedConjunction,
            setConjunction: immutableGroupsMode ? dummyFn : setConjunction2,
            conjunctionOptions,
            config: config2,
            not: not || false,
            id,
            setNot: immutableGroupsMode ? dummyFn : setNot2,
            notLabel,
            showNot: this.showNot(),
            isLocked
          };
          return /* @__PURE__ */ jsxDEV(Conjs, {
            ...renderProps
          }, void 0, false, {
            fileName: _jsxFileName$u,
            lineNumber: 332,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderHeader",
        value: function renderHeader() {
          return /* @__PURE__ */ jsxDEV("div", {
            className: "group--conjunctions",
            children: [this.renderConjs(), this.renderDrag()]
          }, void 0, true, {
            fileName: _jsxFileName$u,
            lineNumber: 337,
            columnNumber: 27
          }, this);
        }
      }]);
      return BasicGroup2;
    }(react.exports.PureComponent);
    BasicGroup.propTypes = {
      reordableNodesCnt: propTypes.exports.number,
      conjunctionOptions: propTypes.exports.object.isRequired,
      allowFurtherNesting: propTypes.exports.bool.isRequired,
      isRoot: propTypes.exports.bool.isRequired,
      not: propTypes.exports.bool,
      selectedConjunction: propTypes.exports.string,
      config: propTypes.exports.object.isRequired,
      id: propTypes.exports.string.isRequired,
      groupId: propTypes.exports.string,
      path: propTypes.exports.any,
      children1: propTypes.exports.any,
      isDraggingMe: propTypes.exports.bool,
      isDraggingTempo: propTypes.exports.bool,
      isLocked: propTypes.exports.bool,
      isTrueLocked: propTypes.exports.bool,
      handleDraggerMouseDown: propTypes.exports.func,
      onDragStart: propTypes.exports.func,
      addRule: propTypes.exports.func.isRequired,
      addGroup: propTypes.exports.func.isRequired,
      removeSelf: propTypes.exports.func.isRequired,
      setConjunction: propTypes.exports.func.isRequired,
      setNot: propTypes.exports.func.isRequired,
      setLock: propTypes.exports.func.isRequired,
      actions: propTypes.exports.object.isRequired
    };
    const Group = GroupContainer(Draggable("group")(ConfirmFn(BasicGroup)));
    function _superPropBase(object, property2) {
      while (!Object.prototype.hasOwnProperty.call(object, property2)) {
        object = _getPrototypeOf(object);
        if (object === null)
          break;
      }
      return object;
    }
    function _get() {
      if (typeof Reflect !== "undefined" && Reflect.get) {
        _get = Reflect.get.bind();
      } else {
        _get = function _get2(target, property2, receiver) {
          var base = _superPropBase(target, property2);
          if (!base)
            return;
          var desc = Object.getOwnPropertyDescriptor(base, property2);
          if (desc.get) {
            return desc.get.call(arguments.length < 3 ? target : receiver);
          }
          return desc.value;
        };
      }
      return _get.apply(this, arguments);
    }
    var _jsxFileName$t = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/item/RuleGroupActions.js";
    function _createSuper$c(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$c();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$c() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var RuleGroupActions = /* @__PURE__ */ function(_PureComponent) {
      _inherits(RuleGroupActions2, _PureComponent);
      var _super = _createSuper$c(RuleGroupActions2);
      function RuleGroupActions2() {
        _classCallCheck(this, RuleGroupActions2);
        return _super.apply(this, arguments);
      }
      _createClass(RuleGroupActions2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, addRule2 = _this$props.addRule, canAddRule = _this$props.canAddRule, canDeleteGroup = _this$props.canDeleteGroup, removeSelf = _this$props.removeSelf, setLock2 = _this$props.setLock, isLocked = _this$props.isLocked, isTrueLocked = _this$props.isTrueLocked, id = _this$props.id;
          var _config$settings = config2.settings, immutableGroupsMode = _config$settings.immutableGroupsMode, addRuleLabel = _config$settings.addRuleLabel, delGroupLabel = _config$settings.delGroupLabel, Btn = _config$settings.renderButton, Switch = _config$settings.renderSwitch, BtnGrp = _config$settings.renderButtonGroup, lockLabel = _config$settings.lockLabel, lockedLabel = _config$settings.lockedLabel, showLock = _config$settings.showLock, canDeleteLocked = _config$settings.canDeleteLocked;
          var setLockSwitch = showLock && !(isLocked && !isTrueLocked) && /* @__PURE__ */ jsxDEV(Switch, {
            type: "lock",
            id,
            value: isLocked,
            setValue: setLock2,
            label: lockLabel,
            checkedLabel: lockedLabel,
            hideLabel: true,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$t,
            lineNumber: 40,
            columnNumber: 84
          }, this);
          var addRuleBtn = !immutableGroupsMode && canAddRule && !isLocked && /* @__PURE__ */ jsxDEV(Btn, {
            type: "addRuleGroup",
            onClick: addRule2,
            label: addRuleLabel,
            readonly: isLocked,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$t,
            lineNumber: 50,
            columnNumber: 88
          }, this);
          var delGroupBtn = !immutableGroupsMode && canDeleteGroup && (!isLocked || isLocked && canDeleteLocked) && /* @__PURE__ */ jsxDEV(Btn, {
            type: "delRuleGroup",
            onClick: removeSelf,
            label: delGroupLabel,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$t,
            lineNumber: 57,
            columnNumber: 126
          }, this);
          return /* @__PURE__ */ jsxDEV("div", {
            className: "group--actions",
            children: /* @__PURE__ */ jsxDEV(BtnGrp, {
              config: config2,
              children: [setLockSwitch, addRuleBtn, delGroupBtn]
            }, void 0, true, {
              fileName: _jsxFileName$t,
              lineNumber: 65,
              columnNumber: 23
            }, this)
          }, void 0, false, {
            fileName: _jsxFileName$t,
            lineNumber: 63,
            columnNumber: 27
          }, this);
        }
      }]);
      return RuleGroupActions2;
    }(react.exports.PureComponent);
    var _jsxFileName$s = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/item/RuleGroup.js";
    function ownKeys$7(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$7(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$7(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$7(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$b(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$b();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$b() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var RuleGroup = /* @__PURE__ */ function(_BasicGroup) {
      _inherits(RuleGroup2, _BasicGroup);
      var _super = _createSuper$b(RuleGroup2);
      function RuleGroup2(props) {
        var _this;
        _classCallCheck(this, RuleGroup2);
        _this = _super.call(this, props);
        _this.childrenClassName = function() {
          return "rule_group--children";
        };
        _this.renderHeaderWrapper = function() {
          return null;
        };
        _this.renderFooterWrapper = function() {
          return null;
        };
        _this.renderConjs = function() {
          return null;
        };
        _this.canAddGroup = function() {
          return false;
        };
        _this.canAddRule = function() {
          return true;
        };
        _this.canDeleteGroup = function() {
          return false;
        };
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(RuleGroup2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
        }
      }, {
        key: "reordableNodesCntForItem",
        value: function reordableNodesCntForItem(_item) {
          if (this.props.isLocked)
            return 0;
          var children1 = this.props.children1;
          return (children1 === null || children1 === void 0 ? void 0 : children1.size) || 0;
        }
      }, {
        key: "renderChildrenWrapper",
        value: function renderChildrenWrapper() {
          return /* @__PURE__ */ jsxDEV(Fragment, {
            children: [this.renderDrag(), this.renderField(), this.renderActions(), _get(_getPrototypeOf(RuleGroup2.prototype), "renderChildrenWrapper", this).call(this)]
          }, void 0, true);
        }
      }, {
        key: "renderField",
        value: function renderField() {
          var _this$props = this.props, config2 = _this$props.config, selectedField = _this$props.selectedField, setField2 = _this$props.setField, parentField = _this$props.parentField, id = _this$props.id, groupId = _this$props.groupId, isLocked = _this$props.isLocked;
          var immutableFieldsMode = config2.settings.immutableFieldsMode;
          return /* @__PURE__ */ jsxDEV(FieldWrapper, {
            classname: "group--field",
            config: config2,
            selectedField,
            setField: setField2,
            parentField,
            readonly: immutableFieldsMode || isLocked,
            id,
            groupId
          }, "field", false, {
            fileName: _jsxFileName$s,
            lineNumber: 81,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderActions",
        value: function renderActions() {
          var _this$props2 = this.props, config2 = _this$props2.config, addRule2 = _this$props2.addRule, isLocked = _this$props2.isLocked, isTrueLocked = _this$props2.isTrueLocked, id = _this$props2.id;
          return /* @__PURE__ */ jsxDEV(RuleGroupActions, {
            config: config2,
            addRule: addRule2,
            canAddRule: this.canAddRule(),
            canDeleteGroup: this.canDeleteGroup(),
            removeSelf: this.removeSelf,
            setLock: this.setLock,
            isLocked,
            isTrueLocked,
            id
          }, void 0, false, {
            fileName: _jsxFileName$s,
            lineNumber: 102,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "extraPropsForItem",
        value: function extraPropsForItem(_item) {
          return {
            parentField: this.props.selectedField
          };
        }
      }]);
      return RuleGroup2;
    }(BasicGroup);
    RuleGroup.propTypes = _objectSpread$7(_objectSpread$7({}, BasicGroup.propTypes), {}, {
      selectedField: propTypes.exports.string,
      parentField: propTypes.exports.string,
      setField: propTypes.exports.func
    });
    const RuleGroup$1 = GroupContainer(Draggable("group rule_group")(ConfirmFn(RuleGroup)));
    var _jsxFileName$r = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/item/RuleGroupExtActions.js";
    function _createSuper$a(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$a();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$a() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var RuleGroupExtActions = /* @__PURE__ */ function(_PureComponent) {
      _inherits(RuleGroupExtActions2, _PureComponent);
      var _super = _createSuper$a(RuleGroupExtActions2);
      function RuleGroupExtActions2() {
        _classCallCheck(this, RuleGroupExtActions2);
        return _super.apply(this, arguments);
      }
      _createClass(RuleGroupExtActions2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, addRule2 = _this$props.addRule, canAddRule = _this$props.canAddRule, canDeleteGroup = _this$props.canDeleteGroup, removeSelf = _this$props.removeSelf, setLock2 = _this$props.setLock, isLocked = _this$props.isLocked, isTrueLocked = _this$props.isTrueLocked, id = _this$props.id;
          var _config$settings = config2.settings, immutableGroupsMode = _config$settings.immutableGroupsMode, addSubRuleLabel = _config$settings.addSubRuleLabel, delGroupLabel = _config$settings.delGroupLabel, Btn = _config$settings.renderButton, Switch = _config$settings.renderSwitch, BtnGrp = _config$settings.renderButtonGroup, lockLabel = _config$settings.lockLabel, lockedLabel = _config$settings.lockedLabel, showLock = _config$settings.showLock, canDeleteLocked = _config$settings.canDeleteLocked;
          var setLockSwitch = showLock && !(isLocked && !isTrueLocked) && /* @__PURE__ */ jsxDEV(Switch, {
            type: "lock",
            id,
            value: isLocked,
            setValue: setLock2,
            label: lockLabel,
            checkedLabel: lockedLabel,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$r,
            lineNumber: 40,
            columnNumber: 84
          }, this);
          var addRuleBtn = !immutableGroupsMode && canAddRule && !isLocked && /* @__PURE__ */ jsxDEV(Btn, {
            type: "addRuleGroupExt",
            onClick: addRule2,
            label: addSubRuleLabel,
            readonly: isLocked,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$r,
            lineNumber: 49,
            columnNumber: 88
          }, this);
          var delGroupBtn = !immutableGroupsMode && canDeleteGroup && (!isLocked || isLocked && canDeleteLocked) && /* @__PURE__ */ jsxDEV(Btn, {
            type: "delRuleGroup",
            onClick: removeSelf,
            label: delGroupLabel,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$r,
            lineNumber: 56,
            columnNumber: 126
          }, this);
          return /* @__PURE__ */ jsxDEV("div", {
            className: "group--actions group--actions--tr",
            children: /* @__PURE__ */ jsxDEV(BtnGrp, {
              config: config2,
              children: [setLockSwitch, addRuleBtn, delGroupBtn]
            }, void 0, true, {
              fileName: _jsxFileName$r,
              lineNumber: 64,
              columnNumber: 23
            }, this)
          }, void 0, false, {
            fileName: _jsxFileName$r,
            lineNumber: 62,
            columnNumber: 27
          }, this);
        }
      }]);
      return RuleGroupExtActions2;
    }(react.exports.PureComponent);
    var _jsxFileName$q = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/item/RuleGroupExt.js";
    function ownKeys$6(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$6(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$6(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F = function F2() {
          };
          return {
            s: F,
            n: function n() {
              if (i >= o.length)
                return {
                  done: true
                };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F
          };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it["return"] != null)
              it["return"]();
          } finally {
            if (didErr)
              throw err;
          }
        }
      };
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    function _createSuper$9(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$9();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$9() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var _Utils$ConfigUtils$1 = Utils.ConfigUtils, getFieldConfig$2 = _Utils$ConfigUtils$1.getFieldConfig, getFieldWidgetConfig = _Utils$ConfigUtils$1.getFieldWidgetConfig;
    var RuleGroupExt = /* @__PURE__ */ function(_BasicGroup) {
      _inherits(RuleGroupExt2, _BasicGroup);
      var _super = _createSuper$9(RuleGroupExt2);
      function RuleGroupExt2(props) {
        var _this;
        _classCallCheck(this, RuleGroupExt2);
        _this = _super.call(this, props);
        _this.childrenClassName = function() {
          return "rule_group_ext--children";
        };
        _this.renderFooterWrapper = function() {
          return null;
        };
        _this.canAddGroup = function() {
          return false;
        };
        _this.canAddRule = function() {
          return true;
        };
        _this.canDeleteGroup = function() {
          return true;
        };
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(RuleGroupExt2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
        }
      }, {
        key: "renderHeaderWrapper",
        value: function renderHeaderWrapper() {
          return /* @__PURE__ */ jsxDEV("div", {
            className: classNames("group--header", this.isOneChild() ? "one--child" : "", this.isOneChild() ? "hide--line" : "", this.isNoChildren() ? "no--children" : "", this.showDragIcon() ? "with--drag" : "hide--drag", this.showConjs() && (!this.isOneChild() || this.showNot()) ? "with--conjs" : "hide--conjs"),
            children: [this.renderHeader(), this.renderGroupField(), this.renderActions()]
          }, "group-header", true, {
            fileName: _jsxFileName$q,
            lineNumber: 64,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderHeader",
        value: function renderHeader() {
          return /* @__PURE__ */ jsxDEV("div", {
            className: "group--conjunctions",
            children: [this.renderConjs(), this.renderDrag()]
          }, void 0, true, {
            fileName: _jsxFileName$q,
            lineNumber: 72,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderGroupField",
        value: function renderGroupField() {
          return /* @__PURE__ */ jsxDEV("div", {
            className: "group--field--count--rule",
            children: [this.renderField(), this.renderOperator(), this.renderWidget()]
          }, void 0, true, {
            fileName: _jsxFileName$q,
            lineNumber: 79,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "showNot",
        value: function showNot() {
          var _this$props = this.props, config2 = _this$props.config, selectedField = _this$props.selectedField;
          _this$props.selectedOperator;
          var selectedFieldConfig = getFieldConfig$2(config2, selectedField) || {};
          return selectedFieldConfig.showNot != void 0 ? selectedFieldConfig.showNot : config2.settings.showNot;
        }
      }, {
        key: "conjunctionOptions",
        value: function conjunctionOptions() {
          var _this$props2 = this.props, config2 = _this$props2.config, selectedField = _this$props2.selectedField;
          _this$props2.selectedOperator;
          var selectedFieldConfig = getFieldConfig$2(config2, selectedField) || {};
          var conjunctionOptions2 = _get(_getPrototypeOf(RuleGroupExt2.prototype), "conjunctionOptions", this).call(this);
          if (selectedFieldConfig.conjunctions) {
            var filtered = {};
            var _iterator = _createForOfIteratorHelper(selectedFieldConfig.conjunctions), _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                var k = _step.value;
                filtered[k] = conjunctionOptions2[k];
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            conjunctionOptions2 = filtered;
          }
          return conjunctionOptions2;
        }
      }, {
        key: "renderField",
        value: function renderField() {
          var _this$props3 = this.props, config2 = _this$props3.config, selectedField = _this$props3.selectedField, setField2 = _this$props3.setField, parentField = _this$props3.parentField, id = _this$props3.id, groupId = _this$props3.groupId, isLocked = _this$props3.isLocked;
          var immutableFieldsMode = config2.settings.immutableFieldsMode;
          return /* @__PURE__ */ jsxDEV(FieldWrapper, {
            classname: "rule--field",
            config: config2,
            selectedField,
            setField: setField2,
            parentField,
            readonly: immutableFieldsMode || isLocked,
            id,
            groupId
          }, "field", false, {
            fileName: _jsxFileName$q,
            lineNumber: 132,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderOperator",
        value: function renderOperator() {
          var _this$props4 = this.props, config2 = _this$props4.config, selectedField = _this$props4.selectedField, selectedOperator = _this$props4.selectedOperator, setField2 = _this$props4.setField, setOperator2 = _this$props4.setOperator, isLocked = _this$props4.isLocked;
          var immutableFieldsMode = config2.settings.immutableFieldsMode;
          var selectedFieldWidgetConfig = getFieldWidgetConfig(config2, selectedField, selectedOperator) || {};
          var hideOperator = selectedFieldWidgetConfig.hideOperator;
          var showOperatorLabel = selectedField && hideOperator && selectedFieldWidgetConfig.operatorInlineLabel;
          var showOperator = selectedField && !hideOperator;
          return /* @__PURE__ */ jsxDEV(OperatorWrapper, {
            classname: "group--operator",
            config: config2,
            selectedField,
            selectedOperator,
            setField: setField2,
            setOperator: setOperator2,
            selectedFieldPartsLabels: ["group"],
            showOperator,
            showOperatorLabel,
            selectedFieldWidgetConfig,
            readonly: immutableFieldsMode || isLocked,
            id: this.props.id,
            groupId: this.props.groupId
          }, "operator", false, {
            fileName: _jsxFileName$q,
            lineNumber: 159,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderWidget",
        value: function renderWidget() {
          var _this$props5 = this.props, config2 = _this$props5.config, selectedField = _this$props5.selectedField, selectedOperator = _this$props5.selectedOperator, isLocked = _this$props5.isLocked;
          var immutableValuesMode = config2.settings.immutableValuesMode;
          var isFieldAndOpSelected = selectedField && selectedOperator;
          var showWidget = isFieldAndOpSelected;
          if (!showWidget)
            return null;
          var widget = /* @__PURE__ */ jsxDEV(Widget, {
            isForRuleGruop: true,
            field: this.props.selectedField,
            operator: this.props.selectedOperator,
            value: this.props.value,
            valueSrc: "value",
            valueError: null,
            config: config2,
            setValue: !immutableValuesMode ? this.props.setValue : dummyFn,
            setValueSrc: dummyFn,
            readonly: immutableValuesMode || isLocked,
            id: this.props.id,
            groupId: this.props.groupId
          }, "values", false, {
            fileName: _jsxFileName$q,
            lineNumber: 188,
            columnNumber: 33
          }, this);
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--value",
            children: widget
          }, "widget-for-" + this.props.selectedOperator, false, {
            fileName: _jsxFileName$q,
            lineNumber: 203,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderActions",
        value: function renderActions() {
          var _this$props6 = this.props, config2 = _this$props6.config, addRule2 = _this$props6.addRule, isLocked = _this$props6.isLocked, isTrueLocked = _this$props6.isTrueLocked, id = _this$props6.id;
          return /* @__PURE__ */ jsxDEV(RuleGroupExtActions, {
            config: config2,
            addRule: addRule2,
            canAddRule: this.canAddRule(),
            canDeleteGroup: this.canDeleteGroup(),
            removeSelf: this.removeSelf,
            setLock: this.setLock,
            isLocked,
            isTrueLocked,
            id
          }, void 0, false, {
            fileName: _jsxFileName$q,
            lineNumber: 217,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "reordableNodesCntForItem",
        value: function reordableNodesCntForItem(_item) {
          if (this.props.isLocked)
            return 0;
          var children1 = this.props.children1;
          return (children1 === null || children1 === void 0 ? void 0 : children1.size) || 0;
        }
      }, {
        key: "extraPropsForItem",
        value: function extraPropsForItem(_item) {
          return {
            parentField: this.props.selectedField
          };
        }
      }]);
      return RuleGroupExt2;
    }(BasicGroup);
    RuleGroupExt.propTypes = _objectSpread$6(_objectSpread$6({}, BasicGroup.propTypes), {}, {
      selectedField: propTypes.exports.string,
      selectedOperator: propTypes.exports.string,
      value: propTypes.exports.any,
      parentField: propTypes.exports.string,
      setField: propTypes.exports.func,
      setOperator: propTypes.exports.func,
      setValue: propTypes.exports.func
    });
    const RuleGroupExt$1 = GroupContainer(Draggable("group rule_group_ext")(ConfirmFn(RuleGroupExt)));
    var _jsxFileName$p = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/item/SwitchGroupActions.js";
    function _createSuper$8(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$8();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$8() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var groupActionsPositionList = {
      topLeft: "group--actions--tl",
      topCenter: "group--actions--tc",
      topRight: "group--actions--tr",
      bottomLeft: "group--actions--bl",
      bottomCenter: "group--actions--bc",
      bottomRight: "group--actions--br"
    };
    var defaultPosition = "topRight";
    var SwitchGroupActions = /* @__PURE__ */ function(_PureComponent) {
      _inherits(SwitchGroupActions2, _PureComponent);
      var _super = _createSuper$8(SwitchGroupActions2);
      function SwitchGroupActions2() {
        _classCallCheck(this, SwitchGroupActions2);
        return _super.apply(this, arguments);
      }
      _createClass(SwitchGroupActions2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, addCaseGroup2 = _this$props.addCaseGroup, addDefaultCaseGroup2 = _this$props.addDefaultCaseGroup, setLock2 = _this$props.setLock, isLocked = _this$props.isLocked, isTrueLocked = _this$props.isTrueLocked, id = _this$props.id, canAddGroup = _this$props.canAddGroup, canAddDefault = _this$props.canAddDefault;
          var _config$settings = config2.settings, immutableGroupsMode = _config$settings.immutableGroupsMode, addCaseLabel = _config$settings.addCaseLabel, addDefaultCaseLabel = _config$settings.addDefaultCaseLabel, groupActionsPosition = _config$settings.groupActionsPosition, Btn = _config$settings.renderButton, Switch = _config$settings.renderSwitch, BtnGrp = _config$settings.renderButtonGroup, lockLabel = _config$settings.lockLabel, lockedLabel = _config$settings.lockedLabel, showLock = _config$settings.showLock;
          var position = groupActionsPositionList[groupActionsPosition || defaultPosition];
          var setLockSwitch = showLock && !(isLocked && !isTrueLocked) && /* @__PURE__ */ jsxDEV(Switch, {
            type: "lock",
            id,
            value: isLocked,
            setValue: setLock2,
            label: lockLabel,
            checkedLabel: lockedLabel,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$p,
            lineNumber: 50,
            columnNumber: 84
          }, this);
          var addCaseGroupBtn = !immutableGroupsMode && canAddGroup && !isLocked && /* @__PURE__ */ jsxDEV(Btn, {
            type: "addCaseGroup",
            onClick: addCaseGroup2,
            label: addCaseLabel,
            readonly: isLocked,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$p,
            lineNumber: 59,
            columnNumber: 94
          }, this);
          var addDefaultCaseGroupBtn = !immutableGroupsMode && canAddDefault && !isLocked && /* @__PURE__ */ jsxDEV(Btn, {
            type: "addDefaultCaseGroup",
            onClick: addDefaultCaseGroup2,
            label: addDefaultCaseLabel,
            readonly: isLocked,
            config: config2
          }, void 0, false, {
            fileName: _jsxFileName$p,
            lineNumber: 66,
            columnNumber: 103
          }, this);
          return /* @__PURE__ */ jsxDEV("div", {
            className: "group--actions ".concat(position),
            children: /* @__PURE__ */ jsxDEV(BtnGrp, {
              config: config2,
              children: [setLockSwitch, addCaseGroupBtn, addDefaultCaseGroupBtn]
            }, void 0, true, {
              fileName: _jsxFileName$p,
              lineNumber: 75,
              columnNumber: 23
            }, this)
          }, void 0, false, {
            fileName: _jsxFileName$p,
            lineNumber: 73,
            columnNumber: 27
          }, this);
        }
      }]);
      return SwitchGroupActions2;
    }(react.exports.PureComponent);
    var _jsxFileName$o = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/item/SwitchGroup.js";
    function ownKeys$5(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$5(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$5(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$7(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$7();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$7() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var _Utils$TreeUtils$1 = Utils.TreeUtils, getTotalReordableNodesCountInTree$1 = _Utils$TreeUtils$1.getTotalReordableNodesCountInTree, getTotalRulesCountInTree$1 = _Utils$TreeUtils$1.getTotalRulesCountInTree;
    var SwitchGroup = /* @__PURE__ */ function(_BasicGroup) {
      _inherits(SwitchGroup2, _BasicGroup);
      var _super = _createSuper$7(SwitchGroup2);
      function SwitchGroup2(props) {
        var _this;
        _classCallCheck(this, SwitchGroup2);
        _this = _super.call(this, props);
        _this.childrenClassName = function() {
          return "switch_group--children";
        };
        _this.renderFooterWrapper = function() {
          return null;
        };
        _this.hasDefaultCase = function() {
          var _this$props$children;
          return ((_this$props$children = _this.props.children1) === null || _this$props$children === void 0 ? void 0 : _this$props$children.size) && _this.props.children1.filter(function(c) {
            return c.get("children1") == null;
          }).size > 0;
        };
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(SwitchGroup2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
        }
      }, {
        key: "canAddGroup",
        value: function canAddGroup() {
          var _this$props$children2;
          var maxNumberOfCases = this.props.config.settings.maxNumberOfCases;
          var totalCasesCnt = ((_this$props$children2 = this.props.children1) === null || _this$props$children2 === void 0 ? void 0 : _this$props$children2.size) || 0;
          if (maxNumberOfCases) {
            return totalCasesCnt < maxNumberOfCases;
          }
          return true;
        }
      }, {
        key: "canAddRule",
        value: function canAddRule() {
          return false;
        }
      }, {
        key: "reordableNodesCnt",
        value: function reordableNodesCnt() {
          var _this$props$children3;
          var totalCasesCnt = ((_this$props$children3 = this.props.children1) === null || _this$props$children3 === void 0 ? void 0 : _this$props$children3.size) || 0;
          var casesToReorder = totalCasesCnt;
          if (this.hasDefaultCase()) {
            casesToReorder--;
          }
          return casesToReorder;
        }
      }, {
        key: "totalRulesCntForItem",
        value: function totalRulesCntForItem(item) {
          return getTotalRulesCountInTree$1(item);
        }
      }, {
        key: "reordableNodesCntForItem",
        value: function reordableNodesCntForItem(item) {
          var _this$props$children4;
          if (this.props.isLocked)
            return 0;
          var _this$props$config$se = this.props.config.settings, canLeaveEmptyCase = _this$props$config$se.canLeaveEmptyCase, canRegroupCases = _this$props$config$se.canRegroupCases;
          var totalCasesCnt = ((_this$props$children4 = this.props.children1) === null || _this$props$children4 === void 0 ? void 0 : _this$props$children4.size) || 0;
          var casesToReorder = totalCasesCnt;
          if (this.hasDefaultCase()) {
            casesToReorder--;
          }
          var nodesInCase = getTotalReordableNodesCountInTree$1(item);
          var cnt = nodesInCase;
          if (cnt == 1 && canRegroupCases && canLeaveEmptyCase && casesToReorder > 1)
            cnt = 111;
          return cnt;
        }
      }, {
        key: "renderHeaderWrapper",
        value: function renderHeaderWrapper() {
          return /* @__PURE__ */ jsxDEV("div", {
            className: classNames(
              "group--header",
              this.isOneChild() ? "one--child" : "",
              this.isOneChild() ? "hide--line" : "",
              this.isNoChildren() ? "no--children" : "",
              this.showDragIcon() ? "with--drag" : "hide--drag"
            ),
            children: [this.renderHeader(), this.renderActions()]
          }, "group-header", true, {
            fileName: _jsxFileName$o,
            lineNumber: 105,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderHeader",
        value: function renderHeader() {
          return /* @__PURE__ */ jsxDEV("div", {
            className: "group--conjunctions",
            children: [this.renderConjs(), this.renderDrag()]
          }, void 0, true, {
            fileName: _jsxFileName$o,
            lineNumber: 115,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderConjs",
        value: function renderConjs() {
          var renderSwitchPrefix = this.props.config.settings.renderSwitchPrefix;
          return renderSwitchPrefix ? renderSwitchPrefix() : null;
        }
      }, {
        key: "showNot",
        value: function showNot() {
          return false;
        }
      }, {
        key: "renderActions",
        value: function renderActions() {
          var _this$props = this.props, config2 = _this$props.config, addCaseGroup2 = _this$props.addCaseGroup, addDefaultCaseGroup2 = _this$props.addDefaultCaseGroup, isLocked = _this$props.isLocked, isTrueLocked = _this$props.isTrueLocked, id = _this$props.id;
          return /* @__PURE__ */ jsxDEV(SwitchGroupActions, {
            config: config2,
            addCaseGroup: addCaseGroup2,
            addDefaultCaseGroup: addDefaultCaseGroup2,
            canAddDefault: !this.hasDefaultCase(),
            canAddGroup: this.canAddGroup(),
            setLock: this.setLock,
            isLocked,
            isTrueLocked,
            id
          }, void 0, false, {
            fileName: _jsxFileName$o,
            lineNumber: 140,
            columnNumber: 27
          }, this);
        }
      }]);
      return SwitchGroup2;
    }(BasicGroup);
    SwitchGroup.propTypes = _objectSpread$5({}, BasicGroup.propTypes);
    const SwitchGroup$1 = GroupContainer(Draggable("group switch_group")(ConfirmFn(SwitchGroup)));
    var _jsxFileName$n = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/item/CaseGroup.js";
    function ownKeys$4(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$4(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$4(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$6(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$6();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$6() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var CaseGroup = /* @__PURE__ */ function(_BasicGroup) {
      _inherits(CaseGroup2, _BasicGroup);
      var _super = _createSuper$6(CaseGroup2);
      function CaseGroup2(props) {
        var _this;
        _classCallCheck(this, CaseGroup2);
        _this = _super.call(this, props);
        _this.childrenClassName = function() {
          return "case_group--children";
        };
        _this.renderFooterWrapper = function() {
          return null;
        };
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(CaseGroup2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
        }
      }, {
        key: "isDefaultCase",
        value: function isDefaultCase() {
          return this.props.children1 == void 0;
        }
      }, {
        key: "reordableNodesCnt",
        value: function reordableNodesCnt() {
          return this.props.parentReordableNodesCnt;
        }
      }, {
        key: "reordableNodesCntForItem",
        value: function reordableNodesCntForItem(_item) {
          if (this.props.isLocked)
            return 0;
          return this.props.reordableNodesCnt;
        }
      }, {
        key: "totalRulesCntForItem",
        value: function totalRulesCntForItem(_item) {
          return this.props.totalRulesCnt;
        }
      }, {
        key: "showDragIcon",
        value: function showDragIcon() {
          if (this.isDefaultCase())
            return false;
          return _get(_getPrototypeOf(CaseGroup2.prototype), "showDragIcon", this).call(this);
        }
      }, {
        key: "renderHeaderWrapper",
        value: function renderHeaderWrapper() {
          return /* @__PURE__ */ jsxDEV("div", {
            className: classNames("group--header", this.isOneChild() ? "one--child" : "", this.isOneChild() ? "hide--line" : "", this.isNoChildren() ? "no--children" : "", this.showDragIcon() ? "with--drag" : "hide--drag", this.showConjs() && (!this.isOneChild() || this.showNot()) ? "with--conjs" : "hide--conjs"),
            children: [this.renderHeaderLeft(), this.renderHeaderCenter(), this.renderActions()]
          }, "group-header", true, {
            fileName: _jsxFileName$n,
            lineNumber: 77,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderChildrenWrapper",
        value: function renderChildrenWrapper() {
          if (this.isDefaultCase())
            return null;
          return /* @__PURE__ */ jsxDEV("div", {
            className: "case_group--body",
            children: [this.renderCondition(), this.renderValue()]
          }, void 0, true, {
            fileName: _jsxFileName$n,
            lineNumber: 87,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderHeaderLeft",
        value: function renderHeaderLeft() {
          if (this.isDefaultCase()) {
            var defaultCaseLabel = this.props.config.settings.defaultCaseLabel;
            return defaultCaseLabel || "";
          }
          return /* @__PURE__ */ jsxDEV("div", {
            className: "group--conjunctions",
            children: [this.renderConjs(), this.renderDrag()]
          }, void 0, true, {
            fileName: _jsxFileName$n,
            lineNumber: 99,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderCondition",
        value: function renderCondition() {
          if (this.isDefaultCase())
            return null;
          return _get(_getPrototypeOf(CaseGroup2.prototype), "renderChildrenWrapper", this).call(this);
        }
      }, {
        key: "renderHeaderCenter",
        value: function renderHeaderCenter() {
          if (this.isDefaultCase())
            return this.renderValue();
          else
            return null;
        }
      }, {
        key: "canAddGroup",
        value: function canAddGroup() {
          if (this.isDefaultCase())
            return false;
          return _get(_getPrototypeOf(CaseGroup2.prototype), "canAddGroup", this).call(this);
        }
      }, {
        key: "canAddRule",
        value: function canAddRule() {
          if (this.isDefaultCase())
            return false;
          return _get(_getPrototypeOf(CaseGroup2.prototype), "canAddRule", this).call(this);
        }
      }, {
        key: "renderValue",
        value: function renderValue() {
          var _this$props = this.props, config2 = _this$props.config, isLocked = _this$props.isLocked, value2 = _this$props.value, setValue2 = _this$props.setValue, id = _this$props.id;
          var immutableValuesMode = config2.settings.immutableValuesMode;
          var widget = /* @__PURE__ */ jsxDEV(Widget, {
            isCaseValue: true,
            field: "!case_value",
            operator: null,
            value: value2,
            valueSrc: "value",
            valueError: null,
            config: config2,
            setValue: !immutableValuesMode ? setValue2 : dummyFn,
            setValueSrc: dummyFn,
            readonly: immutableValuesMode || isLocked,
            id,
            groupId: null
          }, "values", false, {
            fileName: _jsxFileName$n,
            lineNumber: 136,
            columnNumber: 33
          }, this);
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "case_group--value",
            children: widget
          }, void 0, false, {
            fileName: _jsxFileName$n,
            lineNumber: 151,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "renderActions",
        value: function renderActions() {
          var _this$props2 = this.props, config2 = _this$props2.config, addGroup2 = _this$props2.addGroup, addRule2 = _this$props2.addRule, isLocked = _this$props2.isLocked, isTrueLocked = _this$props2.isTrueLocked, id = _this$props2.id;
          return /* @__PURE__ */ jsxDEV(GroupActions, {
            config: config2,
            addGroup: addGroup2,
            addRule: addRule2,
            canAddRule: this.canAddRule(),
            canAddGroup: this.canAddGroup(),
            canDeleteGroup: this.canDeleteGroup(),
            removeSelf: this.removeSelf,
            setLock: this.setLock,
            isLocked,
            isTrueLocked,
            id
          }, void 0, false, {
            fileName: _jsxFileName$n,
            lineNumber: 165,
            columnNumber: 27
          }, this);
        }
      }, {
        key: "isEmptyCurrentGroup",
        value: function isEmptyCurrentGroup() {
          var value2 = this.props.value;
          var oneValue = value2 && value2.size ? value2.get(0) : null;
          var hasValue = oneValue != null && (Array.isArray(oneValue) ? oneValue.length > 0 : true);
          return _get(_getPrototypeOf(CaseGroup2.prototype), "isEmptyCurrentGroup", this).call(this) && !hasValue;
        }
      }]);
      return CaseGroup2;
    }(BasicGroup);
    CaseGroup.propTypes = _objectSpread$4(_objectSpread$4({}, BasicGroup.propTypes), {}, {
      parentReordableNodesCnt: propTypes.exports.number,
      value: propTypes.exports.any,
      setValue: propTypes.exports.func
    });
    const CaseGroup$1 = GroupContainer(Draggable("group case_group")(ConfirmFn(CaseGroup)));
    var _jsxFileName$m = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/item/Item.js";
    var _excluded = ["type"];
    function _createSuper$5(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$5();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$5() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function ownKeys$3(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$3(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$3(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var types$2 = ["rule", "group", "rule_group", "switch_group", "case_group"];
    var getProperties = function getProperties2(props) {
      var _props$properties;
      var properties = ((_props$properties = props.properties) === null || _props$properties === void 0 ? void 0 : _props$properties.toObject()) || {};
      var result = _objectSpread$3({}, properties);
      if (props.isParentLocked) {
        result.isLocked = true;
      }
      if (properties.isLocked) {
        result.isTrueLocked = true;
      }
      return result;
    };
    var typeMap = {
      rule: function rule2(props) {
        return /* @__PURE__ */ jsxDEV(Rule$1, {
          ...getProperties(props),
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          config: props.config,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          parentField: props.parentField,
          parentReordableNodesCnt: props.parentReordableNodesCnt
        }, void 0, false, {
          fileName: _jsxFileName$m,
          lineNumber: 37,
          columnNumber: 25
        }, this);
      },
      group: function group2(props) {
        return /* @__PURE__ */ jsxDEV(Group, {
          ...getProperties(props),
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          config: props.config,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          children1: props.children1,
          parentField: null,
          parentReordableNodesCnt: props.parentReordableNodesCnt
        }, void 0, false, {
          fileName: _jsxFileName$m,
          lineNumber: 52,
          columnNumber: 25
        }, this);
      },
      rule_group: function rule_group(props) {
        return /* @__PURE__ */ jsxDEV(RuleGroup$1, {
          ...getProperties(props),
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          config: props.config,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          children1: props.children1,
          parentField: props.parentField,
          parentReordableNodesCnt: props.parentReordableNodesCnt
        }, void 0, false, {
          fileName: _jsxFileName$m,
          lineNumber: 70,
          columnNumber: 25
        }, this);
      },
      rule_group_ext: function rule_group_ext(props) {
        return /* @__PURE__ */ jsxDEV(RuleGroupExt$1, {
          ...getProperties(props),
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          config: props.config,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          children1: props.children1,
          parentField: props.parentField,
          parentReordableNodesCnt: props.parentReordableNodesCnt
        }, void 0, false, {
          fileName: _jsxFileName$m,
          lineNumber: 88,
          columnNumber: 25
        }, this);
      },
      switch_group: function switch_group(props) {
        return /* @__PURE__ */ jsxDEV(SwitchGroup$1, {
          ...getProperties(props),
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          config: props.config,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          children1: props.children1,
          parentField: null,
          parentReordableNodesCnt: props.parentReordableNodesCnt
        }, void 0, false, {
          fileName: _jsxFileName$m,
          lineNumber: 106,
          columnNumber: 25
        }, this);
      },
      case_group: function case_group(props) {
        return /* @__PURE__ */ jsxDEV(CaseGroup$1, {
          ...getProperties(props),
          id: props.id,
          groupId: props.groupId,
          path: props.path,
          actions: props.actions,
          config: props.config,
          reordableNodesCnt: props.reordableNodesCnt,
          totalRulesCnt: props.totalRulesCnt,
          onDragStart: props.onDragStart,
          isDraggingTempo: props.isDraggingTempo,
          children1: props.children1,
          parentField: null,
          parentReordableNodesCnt: props.parentReordableNodesCnt
        }, void 0, false, {
          fileName: _jsxFileName$m,
          lineNumber: 124,
          columnNumber: 25
        }, this);
      }
    };
    var Item = /* @__PURE__ */ function(_PureComponent) {
      _inherits(Item2, _PureComponent);
      var _super = _createSuper$5(Item2);
      function Item2() {
        _classCallCheck(this, Item2);
        return _super.apply(this, arguments);
      }
      _createClass(Item2, [{
        key: "render",
        value: function render() {
          var _props$properties2;
          var _this$props = this.props, type = _this$props.type, props = _objectWithoutProperties(_this$props, _excluded);
          var mode = (_props$properties2 = props.properties) === null || _props$properties2 === void 0 ? void 0 : _props$properties2.get("mode");
          var postfix = mode == "array" ? "_ext" : "";
          var renderItem = props.config.settings.renderItem;
          var Cmp = typeMap[type + postfix];
          if (renderItem) {
            return renderItem(_objectSpread$3(_objectSpread$3({}, props), {}, {
              type,
              itemComponent: Cmp
            }));
          }
          if (!Cmp)
            return null;
          return Cmp(props);
        }
      }]);
      return Item2;
    }(react.exports.PureComponent);
    Item.propTypes = {
      config: propTypes.exports.object.isRequired,
      id: propTypes.exports.string.isRequired,
      groupId: propTypes.exports.string,
      type: propTypes.exports.oneOf(types$2).isRequired,
      path: propTypes.exports.any.isRequired,
      properties: propTypes.exports.any.isRequired,
      children1: propTypes.exports.any,
      actions: propTypes.exports.object.isRequired,
      reordableNodesCnt: propTypes.exports.number,
      onDragStart: propTypes.exports.func,
      parentField: propTypes.exports.string,
      isDraggingTempo: propTypes.exports.bool,
      isParentLocked: propTypes.exports.bool
    };
    var _jsxFileName$l = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/Builder.js";
    function _createSuper$4(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$4();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$4() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var _Utils$TreeUtils = Utils.TreeUtils, getTotalReordableNodesCountInTree = _Utils$TreeUtils.getTotalReordableNodesCountInTree, getTotalRulesCountInTree = _Utils$TreeUtils.getTotalRulesCountInTree;
    var _Utils$DefaultUtils = Utils.DefaultUtils, createListFromArray = _Utils$DefaultUtils.createListFromArray, emptyProperies = _Utils$DefaultUtils.emptyProperies;
    var Builder = /* @__PURE__ */ function(_Component) {
      _inherits(Builder2, _Component);
      var _super = _createSuper$4(Builder2);
      function Builder2(props) {
        var _this;
        _classCallCheck(this, Builder2);
        _this = _super.call(this, props);
        _this._updPath(props);
        return _this;
      }
      _createClass(Builder2, [{
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps, nextState) {
          var prevProps = this.props;
          var should = pureShouldComponentUpdate(this)(nextProps, nextState);
          if (should) {
            var chs = [];
            for (var k in nextProps) {
              var changed = nextProps[k] !== prevProps[k];
              if (changed && k != "__isInternalValueChange") {
                chs.push(k);
              }
            }
            if (!chs.length)
              should = false;
            if (chs.length == 1 && chs[0] == "tree" && nextProps.__isInternalValueChange)
              should = false;
          }
          return should;
        }
      }, {
        key: "_updPath",
        value: function _updPath(props) {
          var id = props.tree.get("id");
          this.path = createListFromArray([id]);
        }
      }, {
        key: "render",
        value: function render() {
          var tree2 = this.props.tree;
          var rootType = tree2.get("type");
          var isTernary = rootType == "switch_group";
          var reordableNodesCnt = isTernary ? null : getTotalReordableNodesCountInTree(tree2);
          var totalRulesCnt = isTernary ? null : getTotalRulesCountInTree(tree2);
          var id = tree2.get("id");
          return /* @__PURE__ */ jsxDEV(Item, {
            id,
            path: this.path,
            type: rootType,
            properties: tree2.get("properties") || emptyProperies(),
            config: this.props.config,
            actions: this.props.actions,
            children1: tree2.get("children1") || emptyProperies(),
            reordableNodesCnt,
            totalRulesCnt,
            parentReordableNodesCnt: 0,
            onDragStart: this.props.onDragStart
          }, id, false, {
            fileName: _jsxFileName$l,
            lineNumber: 64,
            columnNumber: 27
          }, this);
        }
      }]);
      return Builder2;
    }(react.exports.Component);
    Builder.propTypes = {
      tree: propTypes.exports.any.isRequired,
      config: propTypes.exports.object.isRequired,
      actions: propTypes.exports.object.isRequired,
      onDragStart: propTypes.exports.func
    };
    const Builder$1 = SortableContainer(Builder);
    function ownKeys$2(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$2(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$3(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$3();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$3() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var clone$1 = Utils.clone;
    var getFieldConfig$1 = Utils.ConfigUtils.getFieldConfig;
    var _Utils$RuleUtils$1 = Utils.RuleUtils, getFieldPath$1 = _Utils$RuleUtils$1.getFieldPath, getFieldPathLabels = _Utils$RuleUtils$1.getFieldPathLabels, getWidgetForFieldOp$1 = _Utils$RuleUtils$1.getWidgetForFieldOp;
    var ValueField = /* @__PURE__ */ function(_PureComponent) {
      _inherits(ValueField2, _PureComponent);
      var _super = _createSuper$3(ValueField2);
      function ValueField2(props) {
        var _this;
        _classCallCheck(this, ValueField2);
        _this = _super.call(this, props);
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(ValueField2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForItems = ["config", "field", "operator", "isFuncArg", "parentField"];
          var keysForMeta = ["config", "field", "operator", "value", "placeholder", "isFuncArg", "parentField"];
          var needUpdateItems = !this.items || keysForItems.map(function(k) {
            return nextProps[k] !== prevProps[k];
          }).filter(function(ch) {
            return ch;
          }).length > 0;
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k) {
            return nextProps[k] !== prevProps[k];
          }).filter(function(ch) {
            return ch;
          }).length > 0;
          if (needUpdateItems) {
            this.items = this.getItems(nextProps);
          }
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getItems",
        value: function getItems(_ref) {
          var config2 = _ref.config, field = _ref.field, operator = _ref.operator, parentField = _ref.parentField, isFuncArg = _ref.isFuncArg, fieldDefinition = _ref.fieldDefinition;
          var canCompareFieldWithField = config2.settings.canCompareFieldWithField;
          var fieldSeparator = config2.settings.fieldSeparator;
          var parentFieldPath = typeof parentField == "string" ? parentField.split(fieldSeparator) : parentField;
          var parentFieldConfig = parentField ? getFieldConfig$1(config2, parentField) : null;
          var sourceFields = parentField ? parentFieldConfig && parentFieldConfig.subfields : config2.fields;
          var filteredFields = this.filterFields(config2, sourceFields, field, parentField, parentFieldPath, operator, canCompareFieldWithField, isFuncArg, fieldDefinition);
          var items = this.buildOptions(parentFieldPath, config2, filteredFields, parentFieldPath);
          return items;
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref2) {
          var config2 = _ref2.config, field = _ref2.field;
          _ref2.operator;
          var value2 = _ref2.value, customPlaceholder = _ref2.placeholder, isFuncArg = _ref2.isFuncArg, parentField = _ref2.parentField;
          var _config$settings = config2.settings, fieldPlaceholder = _config$settings.fieldPlaceholder, fieldSeparatorDisplay = _config$settings.fieldSeparatorDisplay;
          var selectedKey = value2;
          var isFieldSelected = !!value2;
          var leftFieldConfig = getFieldConfig$1(config2, field);
          var leftFieldWidgetField = leftFieldConfig.widgets.field;
          var leftFieldWidgetFieldProps = leftFieldWidgetField && leftFieldWidgetField.widgetProps || {};
          var placeholder = isFieldSelected ? null : isFuncArg && customPlaceholder || leftFieldWidgetFieldProps.valuePlaceholder || fieldPlaceholder;
          var currField = isFieldSelected ? getFieldConfig$1(config2, selectedKey) : null;
          var selectedOpts = currField || {};
          var selectedKeys = getFieldPath$1(selectedKey, config2);
          var selectedPath = getFieldPath$1(selectedKey, config2, true);
          var selectedLabel = this.getFieldLabel(currField, selectedKey, config2);
          var partsLabels = getFieldPathLabels(selectedKey, config2);
          var selectedFullLabel = partsLabels ? partsLabels.join(fieldSeparatorDisplay) : null;
          if (selectedFullLabel == selectedLabel || parentField)
            selectedFullLabel = null;
          var selectedAltLabel = selectedOpts.label2;
          return {
            placeholder,
            selectedKey,
            selectedKeys,
            selectedPath,
            selectedLabel,
            selectedOpts,
            selectedAltLabel,
            selectedFullLabel
          };
        }
      }, {
        key: "filterFields",
        value: function filterFields(config2, fields2, leftFieldFullkey, parentField, parentFieldPath, operator, canCompareFieldWithField, isFuncArg, fieldDefinition) {
          fields2 = clone$1(fields2);
          var fieldSeparator = config2.settings.fieldSeparator;
          var leftFieldConfig = getFieldConfig$1(config2, leftFieldFullkey);
          var expectedType;
          var widget = getWidgetForFieldOp$1(config2, leftFieldFullkey, operator, "value");
          if (isFuncArg && fieldDefinition) {
            expectedType = fieldDefinition.type;
          } else if (widget) {
            var widgetConfig = config2.widgets[widget];
            var widgetType = widgetConfig.type;
            expectedType = widgetType;
          } else {
            expectedType = leftFieldConfig.type;
          }
          function _filter(list, path) {
            for (var rightFieldKey in list) {
              var subfields = list[rightFieldKey].subfields;
              var subpath = (path ? path : []).concat(rightFieldKey);
              var rightFieldFullkey = subpath.join(fieldSeparator);
              var rightFieldConfig = getFieldConfig$1(config2, rightFieldFullkey);
              if (!rightFieldConfig) {
                delete list[rightFieldKey];
              } else if (rightFieldConfig.type == "!struct" || rightFieldConfig.type == "!group") {
                if (_filter(subfields, subpath) == 0)
                  delete list[rightFieldKey];
              } else {
                var canUse = rightFieldConfig.type == expectedType && (isFuncArg ? true : rightFieldFullkey != leftFieldFullkey);
                var fn = canCompareFieldWithField || config2.settings.canCompareFieldWithField;
                if (fn)
                  canUse = canUse && fn(leftFieldFullkey, leftFieldConfig, rightFieldFullkey, rightFieldConfig, operator);
                if (!canUse)
                  delete list[rightFieldKey];
              }
            }
            return keys_1(list).length;
          }
          _filter(fields2, parentFieldPath || []);
          return fields2;
        }
      }, {
        key: "buildOptions",
        value: function buildOptions(parentFieldPath, config2, fields2) {
          var _this2 = this;
          var path = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          var optGroupLabel = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : null;
          if (!fields2)
            return null;
          var _config$settings2 = config2.settings, fieldSeparator = _config$settings2.fieldSeparator, fieldSeparatorDisplay = _config$settings2.fieldSeparatorDisplay;
          var prefix = path ? path.join(fieldSeparator) + fieldSeparator : "";
          return keys_1(fields2).map(function(fieldKey) {
            var field = fields2[fieldKey];
            var label = _this2.getFieldLabel(field, fieldKey, config2);
            var partsLabels = getFieldPathLabels(fieldKey, config2);
            var fullLabel = partsLabels.join(fieldSeparatorDisplay);
            if (fullLabel == label || parentFieldPath)
              fullLabel = null;
            var altLabel = field.label2;
            var tooltip = field.tooltip;
            var subpath = (path ? path : []).concat(fieldKey);
            if (field.hideForCompare)
              return void 0;
            if (field.type == "!struct" || field.type == "!group") {
              return {
                key: fieldKey,
                path: prefix + fieldKey,
                label,
                fullLabel,
                altLabel,
                tooltip,
                items: _this2.buildOptions(parentFieldPath, config2, field.subfields, subpath, label)
              };
            } else {
              return {
                key: fieldKey,
                path: prefix + fieldKey,
                label,
                fullLabel,
                altLabel,
                tooltip,
                grouplabel: optGroupLabel
              };
            }
          }).filter(function(o) {
            return !!o;
          });
        }
      }, {
        key: "getFieldLabel",
        value: function getFieldLabel(fieldOpts, fieldKey, config2) {
          if (!fieldKey)
            return null;
          var fieldSeparator = config2.settings.fieldSeparator;
          var maxLabelsLength = config2.settings.maxLabelsLength;
          var fieldParts = Array.isArray(fieldKey) ? fieldKey : fieldKey.split(fieldSeparator);
          var label = fieldOpts.label || last_1(fieldParts);
          label = truncateString(label, maxLabelsLength);
          return label;
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, customProps = _this$props.customProps, setValue2 = _this$props.setValue, readonly = _this$props.readonly, id = _this$props.id, groupId = _this$props.groupId;
          var renderField = config2.settings.renderField;
          var renderProps = _objectSpread$2({
            config: config2,
            customProps,
            setField: setValue2,
            readonly,
            items: this.items,
            id,
            groupId
          }, this.meta);
          return renderField(renderProps);
        }
      }]);
      return ValueField2;
    }(react.exports.PureComponent);
    ValueField.propTypes = {
      id: propTypes.exports.string,
      groupId: propTypes.exports.string,
      setValue: propTypes.exports.func.isRequired,
      config: propTypes.exports.object.isRequired,
      field: propTypes.exports.string.isRequired,
      value: propTypes.exports.string,
      operator: propTypes.exports.string,
      customProps: propTypes.exports.object,
      readonly: propTypes.exports.bool,
      parentField: propTypes.exports.string,
      fieldDefinition: propTypes.exports.object,
      isFuncArg: propTypes.exports.bool
    };
    function ownKeys$1(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread$1(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys$1(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _createSuper$2(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$2();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$2() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var clone = Utils.clone;
    var _Utils$ConfigUtils = Utils.ConfigUtils, getFieldConfig = _Utils$ConfigUtils.getFieldConfig, getFuncConfig$1 = _Utils$ConfigUtils.getFuncConfig;
    var _Utils$RuleUtils = Utils.RuleUtils, getFieldPath = _Utils$RuleUtils.getFieldPath, getFuncPathLabels = _Utils$RuleUtils.getFuncPathLabels, getWidgetForFieldOp = _Utils$RuleUtils.getWidgetForFieldOp;
    var FuncSelect = /* @__PURE__ */ function(_PureComponent) {
      _inherits(FuncSelect2, _PureComponent);
      var _super = _createSuper$2(FuncSelect2);
      function FuncSelect2(props) {
        var _this;
        _classCallCheck(this, FuncSelect2);
        _this = _super.call(this, props);
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(FuncSelect2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForItems = ["config", "field", "operator", "isFuncArg"];
          var keysForMeta = ["config", "field", "value"];
          var needUpdateItems = !this.items || keysForItems.map(function(k) {
            return nextProps[k] !== prevProps[k];
          }).filter(function(ch) {
            return ch;
          }).length > 0;
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k) {
            return nextProps[k] !== prevProps[k];
          }).filter(function(ch) {
            return ch;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
          if (needUpdateItems) {
            this.items = this.getItems(nextProps);
          }
        }
      }, {
        key: "getItems",
        value: function getItems(_ref) {
          var config2 = _ref.config, field = _ref.field, operator = _ref.operator, parentFuncs = _ref.parentFuncs, fieldDefinition = _ref.fieldDefinition, isFuncArg = _ref.isFuncArg;
          var canUseFuncForField = config2.settings.canUseFuncForField;
          var filteredFuncs = this.filterFuncs(config2, config2.funcs, field, operator, canUseFuncForField, parentFuncs, isFuncArg, fieldDefinition);
          var items = this.buildOptions(config2, filteredFuncs);
          return items;
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref2) {
          var config2 = _ref2.config, field = _ref2.field, value2 = _ref2.value;
          var _config$settings = config2.settings, funcPlaceholder = _config$settings.funcPlaceholder, fieldSeparatorDisplay = _config$settings.fieldSeparatorDisplay;
          var selectedFuncKey = value2;
          var isFuncSelected = !!value2;
          var leftFieldConfig = getFieldConfig(config2, field);
          var leftFieldWidgetField = leftFieldConfig.widgets.field;
          leftFieldWidgetField && leftFieldWidgetField.widgetProps || {};
          var placeholder = !isFuncSelected ? funcPlaceholder : null;
          var currFunc = isFuncSelected ? getFuncConfig$1(config2, selectedFuncKey) : null;
          var selectedOpts = currFunc || {};
          var selectedKeys = getFieldPath(selectedFuncKey, config2);
          var selectedPath = getFieldPath(selectedFuncKey, config2, true);
          var selectedLabel = this.getFuncLabel(currFunc, selectedFuncKey, config2);
          var partsLabels = getFuncPathLabels(selectedFuncKey, config2);
          var selectedFullLabel = partsLabels ? partsLabels.join(fieldSeparatorDisplay) : null;
          if (selectedFullLabel == selectedLabel)
            selectedFullLabel = null;
          return {
            placeholder,
            selectedKey: selectedFuncKey,
            selectedKeys,
            selectedPath,
            selectedLabel,
            selectedOpts,
            selectedFullLabel
          };
        }
      }, {
        key: "filterFuncs",
        value: function filterFuncs(config2, funcs2, leftFieldFullkey, operator, canUseFuncForField, parentFuncs, isFuncArg, fieldDefinition) {
          funcs2 = clone(funcs2);
          var fieldSeparator = config2.settings.fieldSeparator;
          var leftFieldConfig = getFieldConfig(config2, leftFieldFullkey);
          var expectedType;
          var targetDefinition = leftFieldConfig;
          var widget = getWidgetForFieldOp(config2, leftFieldFullkey, operator, "value");
          if (isFuncArg && fieldDefinition) {
            targetDefinition = fieldDefinition;
            expectedType = fieldDefinition.type;
          } else if (widget) {
            var widgetConfig = config2.widgets[widget];
            var widgetType = widgetConfig.type;
            expectedType = widgetType;
          } else {
            expectedType = leftFieldConfig.type;
          }
          function _filter(list, path) {
            for (var funcKey in list) {
              var subfields = list[funcKey].subfields;
              var subpath = (path ? path : []).concat(funcKey);
              var funcFullkey = subpath.join(fieldSeparator);
              var funcConfig = getFuncConfig$1(config2, funcFullkey);
              if (funcConfig.type == "!struct") {
                if (_filter(subfields, subpath) == 0)
                  delete list[funcKey];
              } else {
                var canUse = funcConfig.returnType == expectedType;
                if (targetDefinition.funcs)
                  canUse = canUse && targetDefinition.funcs.includes(funcFullkey);
                if (canUseFuncForField)
                  canUse = canUse && canUseFuncForField(leftFieldFullkey, leftFieldConfig, funcFullkey, funcConfig, operator);
                if (!funcConfig.allowSelfNesting && parentFuncs && parentFuncs.map(function(_ref3) {
                  var _ref4 = _slicedToArray(_ref3, 2), func = _ref4[0];
                  _ref4[1];
                  return func;
                }).includes(funcFullkey))
                  canUse = false;
                if (!canUse)
                  delete list[funcKey];
              }
            }
            return keys_1(list).length;
          }
          _filter(funcs2, []);
          return funcs2;
        }
      }, {
        key: "buildOptions",
        value: function buildOptions(config2, funcs2) {
          var _this2 = this;
          var path = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          var optGroupLabel = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          if (!funcs2)
            return null;
          var _config$settings2 = config2.settings, fieldSeparator = _config$settings2.fieldSeparator, fieldSeparatorDisplay = _config$settings2.fieldSeparatorDisplay;
          var prefix = path ? path.join(fieldSeparator) + fieldSeparator : "";
          return keys_1(funcs2).map(function(funcKey) {
            var func = funcs2[funcKey];
            var label = _this2.getFuncLabel(func, funcKey, config2);
            var partsLabels = getFuncPathLabels(funcKey, config2);
            var fullLabel = partsLabels.join(fieldSeparatorDisplay);
            if (fullLabel == label)
              fullLabel = null;
            var tooltip = func.tooltip;
            var subpath = (path ? path : []).concat(funcKey);
            if (func.type == "!struct") {
              return {
                key: funcKey,
                path: prefix + funcKey,
                label,
                fullLabel,
                tooltip,
                items: _this2.buildOptions(config2, func.subfields, subpath, label)
              };
            } else {
              return {
                key: funcKey,
                path: prefix + funcKey,
                label,
                fullLabel,
                tooltip,
                grouplabel: optGroupLabel
              };
            }
          });
        }
      }, {
        key: "getFuncLabel",
        value: function getFuncLabel(funcOpts, funcKey, config2) {
          if (!funcKey)
            return null;
          var fieldSeparator = config2.settings.fieldSeparator;
          var maxLabelsLength = config2.settings.maxLabelsLength;
          var funcParts = Array.isArray(funcKey) ? funcKey : funcKey.split(fieldSeparator);
          var label = funcOpts.label || last_1(funcParts);
          label = truncateString(label, maxLabelsLength);
          return label;
        }
      }, {
        key: "render",
        value: function render() {
          var _this$props = this.props, config2 = _this$props.config, customProps = _this$props.customProps, setValue2 = _this$props.setValue, readonly = _this$props.readonly, id = _this$props.id, groupId = _this$props.groupId;
          var renderFunc = config2.settings.renderFunc;
          var renderProps = _objectSpread$1({
            config: config2,
            customProps,
            readonly,
            setField: setValue2,
            items: this.items,
            id,
            groupId
          }, this.meta);
          return renderFunc(renderProps);
        }
      }]);
      return FuncSelect2;
    }(react.exports.PureComponent);
    FuncSelect.propTypes = {
      id: propTypes.exports.string,
      groupId: propTypes.exports.string,
      config: propTypes.exports.object.isRequired,
      field: propTypes.exports.string.isRequired,
      operator: propTypes.exports.string,
      customProps: propTypes.exports.object,
      value: propTypes.exports.string,
      setValue: propTypes.exports.func.isRequired,
      readonly: propTypes.exports.bool,
      parentFuncs: propTypes.exports.array,
      fieldDefinition: propTypes.exports.object,
      isFuncArg: propTypes.exports.bool
    };
    var _jsxFileName$k = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/rule/FuncWidget.js";
    function _createSuper$1(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct$1();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct$1() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var getFuncConfig = Utils.ConfigUtils.getFuncConfig;
    var _Utils$FuncUtils = Utils.FuncUtils, setFunc = _Utils$FuncUtils.setFunc, setArgValue = _Utils$FuncUtils.setArgValue, setArgValueSrc = _Utils$FuncUtils.setArgValueSrc;
    var FuncWidget$1 = /* @__PURE__ */ function(_PureComponent) {
      _inherits(FuncWidget2, _PureComponent);
      var _super = _createSuper$1(FuncWidget2);
      function FuncWidget2(props) {
        var _this;
        _classCallCheck(this, FuncWidget2);
        _this = _super.call(this, props);
        _this.setFunc = function(funcKey) {
          _this.props.setValue(setFunc(_this.props.value, funcKey, _this.props.config));
        };
        _this.setArgValue = function(argKey, argVal) {
          var config2 = _this.props.config;
          var funcDefinition = _this.meta.funcDefinition;
          var args = funcDefinition.args;
          var argDefinition = args[argKey];
          _this.props.setValue(setArgValue(_this.props.value, argKey, argVal, argDefinition, config2));
        };
        _this.setArgValueSrc = function(argKey, argValSrc) {
          var config2 = _this.props.config;
          var funcDefinition = _this.meta.funcDefinition;
          var args = funcDefinition.args;
          var argDefinition = args[argKey];
          _this.props.setValue(setArgValueSrc(_this.props.value, argKey, argValSrc, argDefinition, config2));
        };
        _this.renderFuncSelect = function() {
          var _this$props = _this.props, config2 = _this$props.config, field = _this$props.field, operator = _this$props.operator, customProps = _this$props.customProps, value2 = _this$props.value, readonly = _this$props.readonly, parentFuncs = _this$props.parentFuncs, id = _this$props.id, groupId = _this$props.groupId, isFuncArg = _this$props.isFuncArg, fieldDefinition = _this$props.fieldDefinition;
          var funcKey = value2 ? value2.get("func") : null;
          var selectProps = {
            value: funcKey,
            setValue: _this.setFunc,
            config: config2,
            field,
            operator,
            customProps,
            readonly,
            parentFuncs,
            isFuncArg,
            fieldDefinition,
            id,
            groupId
          };
          var _config$settings = config2.settings, showLabels = _config$settings.showLabels, funcLabel = _config$settings.funcLabel;
          var widgetLabel = showLabels ? /* @__PURE__ */ jsxDEV("label", {
            className: "rule--label",
            children: funcLabel
          }, void 0, false, {
            fileName: _jsxFileName$k,
            lineNumber: 78,
            columnNumber: 51
          }, this) : null;
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--func",
            children: [widgetLabel, /* @__PURE__ */ jsxDEV(FuncSelect, {
              ...selectProps
            }, void 0, false, {
              fileName: _jsxFileName$k,
              lineNumber: 84,
              columnNumber: 36
            }, this)]
          }, "func", true, {
            fileName: _jsxFileName$k,
            lineNumber: 81,
            columnNumber: 27
          }, this);
        };
        _this.renderArgLabel = function(argKey, argDefinition) {
          var valueSources = argDefinition.valueSources, type = argDefinition.type, showPrefix = argDefinition.showPrefix, label = argDefinition.label;
          var config2 = _this.props.config;
          var isConst = valueSources && valueSources.length == 1 && valueSources[0] == "const";
          var forceShow = !config2.settings.showLabels && (type == "boolean" || isConst) && showPrefix;
          if (!forceShow)
            return null;
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--func--arg-label",
            children: label || argKey
          }, void 0, false, {
            fileName: _jsxFileName$k,
            lineNumber: 95,
            columnNumber: 27
          }, this);
        };
        _this.renderArgLabelSep = function(argKey, argDefinition) {
          var valueSources = argDefinition.valueSources, type = argDefinition.type, showPrefix = argDefinition.showPrefix;
          var config2 = _this.props.config;
          var isConst = valueSources && valueSources.length == 1 && valueSources[0] == "const";
          var forceShow = !config2.settings.showLabels && (type == "boolean" || isConst) && showPrefix;
          if (!forceShow)
            return null;
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--func--arg-label-sep",
            children: ":"
          }, void 0, false, {
            fileName: _jsxFileName$k,
            lineNumber: 107,
            columnNumber: 27
          }, this);
        };
        _this.renderArgVal = function(funcKey, argKey, argDefinition) {
          var _this$props2 = _this.props, config2 = _this$props2.config, field = _this$props2.field;
          _this$props2.operator;
          var value2 = _this$props2.value, readonly = _this$props2.readonly, parentFuncs = _this$props2.parentFuncs, id = _this$props2.id, groupId = _this$props2.groupId;
          var arg = value2 ? value2.getIn(["args", argKey]) : null;
          var argVal = arg ? arg.get("value") : void 0;
          var defaultValueSource = argDefinition.valueSources.length == 1 ? argDefinition.valueSources[0] : void 0;
          var argValSrc = arg ? arg.get("valueSrc") || defaultValueSource || "value" : defaultValueSource;
          var widgetProps = {
            config: config2,
            fieldFunc: funcKey,
            fieldArg: argKey,
            leftField: field,
            operator: null,
            value: argVal,
            valueSrc: argValSrc,
            setValue: _this.setArgValue,
            setValueSrc: _this.setArgValueSrc,
            funcKey,
            argKey,
            argDefinition,
            readonly,
            parentFuncs,
            id,
            groupId
          };
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--func--arg-value",
            children: /* @__PURE__ */ jsxDEV(ArgWidget, {
              ...widgetProps
            }, void 0, false, {
              fileName: _jsxFileName$k,
              lineNumber: 147,
              columnNumber: 23
            }, this)
          }, void 0, false, {
            fileName: _jsxFileName$k,
            lineNumber: 145,
            columnNumber: 27
          }, this);
        };
        _this.renderArgSep = function(argKey, argDefinition, argIndex, _ref) {
          var renderSeps = _ref.renderSeps;
          if (!argIndex)
            return null;
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--func--arg-sep",
            children: renderSeps ? renderSeps[argIndex - 1] : ", "
          }, void 0, false, {
            fileName: _jsxFileName$k,
            lineNumber: 152,
            columnNumber: 27
          }, this);
        };
        _this.renderBracketBefore = function(_ref2) {
          var renderBrackets = _ref2.renderBrackets;
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--func--bracket-before",
            children: renderBrackets ? renderBrackets[0] : "("
          }, "before_args", false, {
            fileName: _jsxFileName$k,
            lineNumber: 158,
            columnNumber: 27
          }, this);
        };
        _this.renderBracketAfter = function(_ref3) {
          var renderBrackets = _ref3.renderBrackets;
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--func--bracket-after",
            children: renderBrackets ? renderBrackets[1] : ")"
          }, "after_args", false, {
            fileName: _jsxFileName$k,
            lineNumber: 165,
            columnNumber: 27
          }, this);
        };
        _this.renderFuncArgs = function() {
          var _this$meta = _this.meta, funcDefinition = _this$meta.funcDefinition, funcKey = _this$meta.funcKey;
          if (!funcKey)
            return null;
          var args = funcDefinition.args;
          if (!args)
            return null;
          return /* @__PURE__ */ jsxDEV(Fragment, {
            children: [_this.renderBracketBefore(funcDefinition), /* @__PURE__ */ jsxDEV(Col, {
              className: "rule--func--args",
              children: Object.keys(args).map(function(argKey, argIndex) {
                return /* @__PURE__ */ jsxDEV(Col, {
                  className: "rule--func--arg",
                  children: [_this.renderArgSep(argKey, args[argKey], argIndex, funcDefinition), _this.renderArgLabel(argKey, args[argKey]), _this.renderArgLabelSep(argKey, args[argKey]), _this.renderArgVal(funcKey, argKey, args[argKey])]
                }, "arg-".concat(argKey, "-").concat(argIndex), true, {
                  fileName: _jsxFileName$k,
                  lineNumber: 181,
                  columnNumber: 29
                }, this);
              })
            }, "args", false, {
              fileName: _jsxFileName$k,
              lineNumber: 177,
              columnNumber: 125
            }, this), _this.renderBracketAfter(funcDefinition)]
          }, void 0, true);
        };
        useOnPropsChanged(_assertThisInitialized(_this));
        _this.onPropsChanged(props);
        return _this;
      }
      _createClass(FuncWidget2, [{
        key: "onPropsChanged",
        value: function onPropsChanged(nextProps) {
          var prevProps = this.props;
          var keysForMeta = ["config", "field", "operator", "value"];
          var needUpdateMeta = !this.meta || keysForMeta.map(function(k) {
            return nextProps[k] !== prevProps[k];
          }).filter(function(ch) {
            return ch;
          }).length > 0;
          if (needUpdateMeta) {
            this.meta = this.getMeta(nextProps);
          }
        }
      }, {
        key: "getMeta",
        value: function getMeta(_ref4) {
          var config2 = _ref4.config;
          _ref4.field;
          _ref4.operator;
          var value2 = _ref4.value;
          var funcKey = value2 ? value2.get("func") : null;
          var funcDefinition = funcKey ? getFuncConfig(config2, funcKey) : null;
          return {
            funcDefinition,
            funcKey
          };
        }
      }, {
        key: "render",
        value: function render() {
          return /* @__PURE__ */ jsxDEV(Col, {
            className: "rule--func--wrapper",
            children: [this.renderFuncSelect(), this.renderFuncArgs()]
          }, void 0, true, {
            fileName: _jsxFileName$k,
            lineNumber: 222,
            columnNumber: 27
          }, this);
        }
      }]);
      return FuncWidget2;
    }(react.exports.PureComponent);
    FuncWidget$1.propTypes = {
      id: propTypes.exports.string,
      groupId: propTypes.exports.string,
      config: propTypes.exports.object.isRequired,
      field: propTypes.exports.string.isRequired,
      operator: propTypes.exports.string,
      customProps: propTypes.exports.object,
      value: propTypes.exports.object,
      setValue: propTypes.exports.func.isRequired,
      readonly: propTypes.exports.bool,
      parentFuncs: propTypes.exports.array,
      fieldDefinition: propTypes.exports.object,
      isFuncArg: propTypes.exports.bool
    };
    var ArgWidget = /* @__PURE__ */ function(_PureComponent2) {
      _inherits(ArgWidget2, _PureComponent2);
      var _super2 = _createSuper$1(ArgWidget2);
      function ArgWidget2() {
        var _this2;
        _classCallCheck(this, ArgWidget2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this2 = _super2.call.apply(_super2, [this].concat(args));
        _this2.setValue = function(_delta, value2, _widgetType) {
          var _this2$props = _this2.props, setValue2 = _this2$props.setValue, argKey = _this2$props.argKey;
          setValue2(argKey, value2);
        };
        _this2.setValueSrc = function(_delta, valueSrc, _widgetType) {
          var _this2$props2 = _this2.props, setValueSrc2 = _this2$props2.setValueSrc, argKey = _this2$props2.argKey;
          setValueSrc2(argKey, valueSrc);
        };
        return _this2;
      }
      _createClass(ArgWidget2, [{
        key: "render",
        value: function render() {
          var _this$props3 = this.props, funcKey = _this$props3.funcKey, argKey = _this$props3.argKey, parentFuncs = _this$props3.parentFuncs;
          return /* @__PURE__ */ jsxDEV(Widget, {
            ...this.props,
            setValue: this.setValue,
            setValueSrc: this.setValueSrc,
            isFuncArg: true,
            parentFuncs: [].concat(_toConsumableArray(parentFuncs || []), [[funcKey, argKey]])
          }, void 0, false, {
            fileName: _jsxFileName$k,
            lineNumber: 276,
            columnNumber: 27
          }, this);
        }
      }]);
      return ArgWidget2;
    }(react.exports.PureComponent);
    ArgWidget.propTypes = {
      funcKey: propTypes.exports.string.isRequired,
      argKey: propTypes.exports.string.isRequired,
      setValue: propTypes.exports.func.isRequired,
      setValueSrc: propTypes.exports.func.isRequired,
      readonly: propTypes.exports.bool,
      parentFuncs: propTypes.exports.array,
      id: propTypes.exports.string,
      groupId: propTypes.exports.string
    };
    var _jsxFileName$j = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/value/VanillaBoolean.js";
    var uuid$1 = Utils.uuid;
    const VanillaBoolean = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var labelYes = props.labelYes, labelNo = props.labelNo, readonly = props.readonly, _props$customProps = props.customProps, customProps = _props$customProps === void 0 ? {} : _props$customProps;
      var customRadioYesProps = customProps.radioYes || {};
      var customRadioNoProps = customProps.radioNo || {};
      var onRadioChange = function onRadioChange2(e) {
        return setValue2(e.target.value == "true");
      };
      var id = uuid$1(), id2 = uuid$1();
      return /* @__PURE__ */ jsxDEV(Fragment, {
        children: [/* @__PURE__ */ jsxDEV("input", {
          type: "radio",
          id,
          value: true,
          checked: !!value2,
          disabled: readonly,
          onChange: onRadioChange,
          ...customRadioYesProps
        }, id, false, {
          fileName: _jsxFileName$j,
          lineNumber: 30,
          columnNumber: 78
        }, this), /* @__PURE__ */ jsxDEV("label", {
          style: {
            display: "inline"
          },
          htmlFor: id,
          children: labelYes
        }, id + "label", false, {
          fileName: _jsxFileName$j,
          lineNumber: 38,
          columnNumber: 42
        }, this), /* @__PURE__ */ jsxDEV("input", {
          type: "radio",
          id: id2,
          value: false,
          checked: !value2,
          disabled: readonly,
          onChange: onRadioChange,
          ...customRadioNoProps
        }, id2, false, {
          fileName: _jsxFileName$j,
          lineNumber: 44,
          columnNumber: 30
        }, this), /* @__PURE__ */ jsxDEV("label", {
          style: {
            display: "inline"
          },
          htmlFor: id2,
          children: labelNo
        }, id2 + "label", false, {
          fileName: _jsxFileName$j,
          lineNumber: 52,
          columnNumber: 41
        }, this)]
      }, void 0, true);
    };
    var _jsxFileName$i = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/value/VanillaText.js";
    const VanillaText = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var readonly = props.readonly, placeholder = props.placeholder, maxLength = props.maxLength, customProps = props.customProps;
      var onChange = function onChange2(e) {
        var val = e.target.value;
        if (val === "")
          val = void 0;
        setValue2(val);
      };
      var textValue = value2 || "";
      return /* @__PURE__ */ jsxDEV("input", {
        type: "text",
        value: textValue,
        placeholder,
        disabled: readonly,
        onChange,
        maxLength,
        ...customProps
      }, void 0, false, {
        fileName: _jsxFileName$i,
        lineNumber: 17,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$h = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/value/VanillaTextArea.js";
    const VanillaTextArea = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var readonly = props.readonly, placeholder = props.placeholder, maxLength = props.maxLength;
      props.maxRows;
      var fullWidth = props.fullWidth, customProps = props.customProps;
      var onChange = function onChange2(e) {
        var val = e.target.value;
        if (val === "")
          val = void 0;
        setValue2(val);
      };
      var textValue = value2 || "";
      return /* @__PURE__ */ jsxDEV("textarea", {
        value: textValue,
        placeholder,
        disabled: readonly,
        onChange,
        maxLength,
        style: {
          width: fullWidth ? "100%" : void 0
        },
        ...customProps
      }, void 0, false, {
        fileName: _jsxFileName$h,
        lineNumber: 19,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$g = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/value/VanillaDate.js";
    Utils.moment;
    const VanillaDate = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      props.valueFormat;
      var readonly = props.readonly, customProps = props.customProps;
      var onChange = function onChange2(e) {
        var value3 = e.target.value;
        if (value3 == "")
          value3 = void 0;
        setValue2(value3);
      };
      return /* @__PURE__ */ jsxDEV("input", {
        type: "date",
        value: value2 || "",
        disabled: readonly,
        onChange,
        ...customProps
      }, void 0, false, {
        fileName: _jsxFileName$g,
        lineNumber: 17,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$f = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/value/VanillaTime.js";
    const VanillaTime = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      props.valueFormat;
      props.use12Hours;
      var readonly = props.readonly, customProps = props.customProps;
      var onChange = function onChange2(e) {
        var value3 = e.target.value;
        if (value3 == "")
          value3 = void 0;
        setValue2(value3);
      };
      return /* @__PURE__ */ jsxDEV("input", {
        type: "time",
        value: value2 || "",
        disabled: readonly,
        onChange,
        ...customProps
      }, void 0, false, {
        fileName: _jsxFileName$f,
        lineNumber: 16,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$e = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/value/VanillaDateTime.js";
    var moment = Utils.moment;
    const VanillaDateTime = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var valueFormat = props.valueFormat;
      props.use12Hours;
      var readonly = props.readonly, customProps = props.customProps;
      var onChange = function onChange2(e) {
        var value3 = e.target.value;
        if (value3 == "")
          value3 = void 0;
        else
          value3 = moment(new Date(value3)).format(valueFormat);
        setValue2(value3);
      };
      var dtValue = value2;
      if (!value2)
        dtValue = "";
      else
        dtValue = moment(value2).format("YYYY-MM-DDTHH:mm");
      return /* @__PURE__ */ jsxDEV("input", {
        type: "datetime-local",
        value: dtValue,
        disabled: readonly,
        onChange,
        ...customProps
      }, void 0, false, {
        fileName: _jsxFileName$e,
        lineNumber: 20,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$d = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/value/VanillaMultiSelect.js";
    var mapListValues$1 = Utils.ListUtils.mapListValues;
    const VanillaMultiSelect = function(_ref) {
      var listValues2 = _ref.listValues, value2 = _ref.value, setValue2 = _ref.setValue;
      _ref.allowCustomValues;
      var readonly = _ref.readonly, customProps = _ref.customProps;
      var renderOptions = function renderOptions2() {
        return mapListValues$1(listValues2, function(_ref2) {
          var title = _ref2.title, value3 = _ref2.value;
          return /* @__PURE__ */ jsxDEV("option", {
            value: value3,
            children: title
          }, value3, false, {
            fileName: _jsxFileName$d,
            lineNumber: 17,
            columnNumber: 27
          }, this);
        });
      };
      var getMultiSelectValues = function getMultiSelectValues2(multiselect) {
        var values = [];
        var options = multiselect.options;
        for (var i = 0; i < options.length; i++) {
          var opt = options[i];
          if (opt.selected) {
            values.push(opt.value);
          }
        }
        if (!values.length)
          values = void 0;
        return values;
      };
      var onChange = function onChange2(e) {
        return setValue2(getMultiSelectValues(e.target));
      };
      return /* @__PURE__ */ jsxDEV("select", {
        multiple: true,
        onChange,
        value: value2,
        disabled: readonly,
        ...omit_1(customProps, ["showSearch", "input", "showCheckboxes"]),
        children: renderOptions()
      }, void 0, false, {
        fileName: _jsxFileName$d,
        lineNumber: 38,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$c = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/value/VanillaSelect.js";
    var mapListValues = Utils.ListUtils.mapListValues;
    const VanillaSelect = function(_ref) {
      var listValues2 = _ref.listValues, value2 = _ref.value, setValue2 = _ref.setValue;
      _ref.allowCustomValues;
      var readonly = _ref.readonly, customProps = _ref.customProps;
      var renderOptions = function renderOptions2() {
        return mapListValues(listValues2, function(_ref2) {
          var title = _ref2.title, value3 = _ref2.value;
          return /* @__PURE__ */ jsxDEV("option", {
            value: value3,
            children: title
          }, value3, false, {
            fileName: _jsxFileName$c,
            lineNumber: 17,
            columnNumber: 27
          }, this);
        });
      };
      var onChange = function onChange2(e) {
        return setValue2(e.target.value);
      };
      var hasValue = value2 != null;
      return /* @__PURE__ */ jsxDEV("select", {
        onChange,
        value: hasValue ? value2 : "",
        disabled: readonly,
        ...omit_1(customProps, ["showSearch", "input"]),
        children: [!hasValue && /* @__PURE__ */ jsxDEV("option", {
          disabled: true,
          value: ""
        }, void 0, false, {
          fileName: _jsxFileName$c,
          lineNumber: 31,
          columnNumber: 77
        }, this), renderOptions()]
      }, void 0, true, {
        fileName: _jsxFileName$c,
        lineNumber: 27,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$b = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/value/VanillaNumber.js";
    const VanillaNumber = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var readonly = props.readonly, min2 = props.min, max2 = props.max, step = props.step, placeholder = props.placeholder, customProps = props.customProps;
      var onChange = function onChange2(e) {
        var val = e.target.value;
        if (val === "" || val === null)
          val = void 0;
        else
          val = Number(val);
        setValue2(val);
      };
      var numberValue = value2 == void 0 ? "" : value2;
      return /* @__PURE__ */ jsxDEV("input", {
        type: "number",
        value: numberValue,
        placeholder,
        disabled: readonly,
        min: min2,
        max: max2,
        step,
        onChange,
        ...customProps
      }, void 0, false, {
        fileName: _jsxFileName$b,
        lineNumber: 19,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$a = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/value/VanillaSlider.js";
    const VanillaSlider = function(props) {
      var value2 = props.value, setValue2 = props.setValue;
      props.config;
      var readonly = props.readonly, min2 = props.min, max2 = props.max, step = props.step, placeholder = props.placeholder, _props$customProps = props.customProps, customProps = _props$customProps === void 0 ? {} : _props$customProps;
      var customInputProps = customProps.input || {};
      var customSliderProps = customProps.slider || customProps;
      var onChange = function onChange2(e) {
        var val = e.target.value;
        if (val === "" || val === null)
          val = void 0;
        else
          val = Number(val);
        setValue2(val);
      };
      var numberValue = value2 == void 0 ? "" : value2;
      return /* @__PURE__ */ jsxDEV("div", {
        style: {
          display: "inline-flex"
        },
        children: [/* @__PURE__ */ jsxDEV("input", {
          type: "number",
          value: numberValue,
          placeholder,
          disabled: readonly,
          min: min2,
          max: max2,
          step,
          onChange,
          ...customInputProps
        }, "number", false, {
          fileName: _jsxFileName$a,
          lineNumber: 26,
          columnNumber: 19
        }, this), /* @__PURE__ */ jsxDEV("input", {
          type: "range",
          value: numberValue,
          disabled: readonly,
          min: min2,
          max: max2,
          step,
          onChange,
          ...customSliderProps
        }, "range", false, {
          fileName: _jsxFileName$a,
          lineNumber: 36,
          columnNumber: 39
        }, this)]
      }, void 0, true, {
        fileName: _jsxFileName$a,
        lineNumber: 22,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$9 = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/core/VanillaFieldSelect.js";
    const VanillaFieldSelect$1 = function(_ref) {
      var items = _ref.items, setField2 = _ref.setField, selectedKey = _ref.selectedKey, readonly = _ref.readonly;
      var renderOptions = function renderOptions2(fields2) {
        return fields2.map(function(field) {
          var items2 = field.items, path = field.path, label = field.label, disabled = field.disabled;
          if (items2) {
            return /* @__PURE__ */ jsxDEV("optgroup", {
              disabled,
              label,
              children: renderOptions2(items2)
            }, path, false, {
              fileName: _jsxFileName$9,
              lineNumber: 14,
              columnNumber: 29
            }, this);
          } else {
            return /* @__PURE__ */ jsxDEV("option", {
              disabled,
              value: path,
              children: label
            }, path, false, {
              fileName: _jsxFileName$9,
              lineNumber: 20,
              columnNumber: 29
            }, this);
          }
        });
      };
      var onChange = function onChange2(e) {
        return setField2(e.target.value);
      };
      var hasValue = selectedKey != null;
      return /* @__PURE__ */ jsxDEV("select", {
        onChange,
        value: hasValue ? selectedKey : "",
        disabled: readonly,
        children: [!hasValue && /* @__PURE__ */ jsxDEV("option", {
          disabled: true,
          value: ""
        }, void 0, false, {
          fileName: _jsxFileName$9,
          lineNumber: 36,
          columnNumber: 32
        }, this), renderOptions(items)]
      }, void 0, true, {
        fileName: _jsxFileName$9,
        lineNumber: 32,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$8 = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/core/VanillaConjs.js";
    const VanillaConjs$1 = function(_ref) {
      var id = _ref.id, not = _ref.not, setNot2 = _ref.setNot, conjunctionOptions = _ref.conjunctionOptions, setConjunction2 = _ref.setConjunction, disabled = _ref.disabled, readonly = _ref.readonly, config2 = _ref.config, showNot = _ref.showNot, notLabel = _ref.notLabel;
      var conjsCount = Object.keys(conjunctionOptions).length;
      var lessThenTwo = disabled;
      var forceShowConj = config2.settings.forceShowConj;
      var showConj = forceShowConj || conjsCount > 1 && !lessThenTwo;
      var renderOptions = function renderOptions2() {
        return Object.keys(conjunctionOptions).map(function(key) {
          var _conjunctionOptions$k = conjunctionOptions[key], id2 = _conjunctionOptions$k.id, name = _conjunctionOptions$k.name, label = _conjunctionOptions$k.label, checked = _conjunctionOptions$k.checked;
          var postfix = setConjunction2.isDummyFn ? "__dummy" : "";
          if ((readonly || disabled) && !checked)
            return null;
          return [
            /* @__PURE__ */ jsxDEV("input", {
              type: "radio",
              id: id2 + postfix,
              name: name + postfix,
              checked,
              disabled: readonly || disabled,
              value: key,
              onChange
            }, id2 + postfix, false, {
              fileName: _jsxFileName$8,
              lineNumber: 26,
              columnNumber: 28
            }, this),
            /* @__PURE__ */ jsxDEV("label", {
              htmlFor: id2 + postfix,
              children: label
            }, id2 + postfix + "label", false, {
              fileName: _jsxFileName$8,
              lineNumber: 35,
              columnNumber: 24
            }, this)
          ];
        });
      };
      var renderNot = function renderNot2() {
        var postfix = "not";
        return [
          /* @__PURE__ */ jsxDEV("input", {
            type: "checkbox",
            id: id + postfix,
            checked: not,
            disabled: readonly,
            onChange: onNotChange
          }, id + postfix, false, {
            fileName: _jsxFileName$8,
            lineNumber: 43,
            columnNumber: 26
          }, this),
          /* @__PURE__ */ jsxDEV("label", {
            htmlFor: id + postfix,
            children: notLabel || "NOT"
          }, id + postfix + "label", false, {
            fileName: _jsxFileName$8,
            lineNumber: 50,
            columnNumber: 22
          }, this)
        ];
      };
      var onChange = function onChange2(e) {
        return setConjunction2(e.target.value);
      };
      var onNotChange = function onNotChange2(e) {
        return setNot2(e.target.checked);
      };
      return [showNot && renderNot(), showConj && renderOptions()];
    };
    var _jsxFileName$7 = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/core/VanillaButton.js";
    const VanillaButton$1 = function(_ref) {
      var type = _ref.type, label = _ref.label, onClick = _ref.onClick, readonly = _ref.readonly;
      _ref.config;
      var typeToLabel = {
        "addRuleGroup": "+",
        "addRuleGroupExt": "+",
        "delGroup": "x",
        "delRuleGroup": "x",
        "delRule": "x"
      };
      var btnLabel = label || typeToLabel[type];
      return /* @__PURE__ */ jsxDEV("button", {
        onClick,
        type: "button",
        disabled: readonly,
        children: btnLabel
      }, void 0, false, {
        fileName: _jsxFileName$7,
        lineNumber: 16,
        columnNumber: 23
      }, this);
    };
    const VanillaButtonGroup$1 = function(_ref) {
      var children = _ref.children;
      _ref.config;
      return /* @__PURE__ */ jsxDEV(Fragment, {
        children
      }, void 0, false);
    };
    var _jsxFileName$6 = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/core/VanillaValueSources.js";
    const VanillaValueSources$1 = function(_ref) {
      _ref.config;
      var valueSources = _ref.valueSources, valueSrc = _ref.valueSrc;
      _ref.title;
      var setValueSrc2 = _ref.setValueSrc, readonly = _ref.readonly;
      var renderOptions = function renderOptions2(valueSources2) {
        return valueSources2.map(function(_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2), srcKey = _ref3[0], info = _ref3[1];
          return /* @__PURE__ */ jsxDEV("option", {
            value: srcKey,
            children: info.label
          }, srcKey, false, {
            fileName: _jsxFileName$6,
            lineNumber: 15,
            columnNumber: 27
          }, this);
        });
      };
      var onChange = function onChange2(e) {
        return setValueSrc2(e.target.value);
      };
      return /* @__PURE__ */ jsxDEV("select", {
        onChange,
        value: valueSrc,
        disabled: readonly,
        children: renderOptions(valueSources)
      }, void 0, false, {
        fileName: _jsxFileName$6,
        lineNumber: 24,
        columnNumber: 23
      }, this);
    };
    var _jsxFileName$5 = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/widgets/vanilla/core/VanillaSwitch.js";
    const VanillaSwitch$1 = function(_ref) {
      var value2 = _ref.value, setValue2 = _ref.setValue, label = _ref.label, id = _ref.id;
      _ref.config;
      var type = _ref.type;
      var onChange = function onChange2(e) {
        return setValue2(e.target.checked);
      };
      var postfix = type;
      return [
        /* @__PURE__ */ jsxDEV("input", {
          type: "checkbox",
          id: id + postfix,
          checked: !!value2,
          onChange
        }, id + postfix, false, {
          fileName: _jsxFileName$5,
          lineNumber: 13,
          columnNumber: 24
        }, this),
        /* @__PURE__ */ jsxDEV("label", {
          htmlFor: id + postfix,
          children: label
        }, id + postfix + "label", false, {
          fileName: _jsxFileName$5,
          lineNumber: 19,
          columnNumber: 20
        }, this)
      ];
    };
    const vanillaConfirm$1 = function(_ref) {
      var onOk = _ref.onOk;
      _ref.okText;
      _ref.cancelText;
      var title = _ref.title;
      if (confirm(title)) {
        onOk();
      }
    };
    var VanillaProvider$1 = function VanillaProvider2(_ref) {
      _ref.config;
      var children = _ref.children;
      return children;
    };
    var _jsxFileName$4 = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/components/operators/Proximity.js";
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    var Proximity = /* @__PURE__ */ function(_PureComponent) {
      _inherits(Proximity2, _PureComponent);
      var _super = _createSuper(Proximity2);
      function Proximity2() {
        var _this;
        _classCallCheck(this, Proximity2);
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _super.call.apply(_super, [this].concat(args));
        _this.handleChange = function(value2) {
          _this.props.setOption("proximity", parseInt(value2));
        };
        return _this;
      }
      _createClass(Proximity2, [{
        key: "render",
        value: function render() {
          var _this$props = this.props, defaults2 = _this$props.defaults, options = _this$props.options, config2 = _this$props.config, optionLabel = _this$props.optionLabel, optionPlaceholder = _this$props.optionPlaceholder, customProps = _this$props.customProps, minProximity = _this$props.minProximity, maxProximity = _this$props.maxProximity, optionTextBefore = _this$props.optionTextBefore, readonly = _this$props.readonly;
          var settings2 = config2.settings, widgets2 = config2.widgets;
          var defaultProximity = defaults2 ? defaults2.proximity : void 0;
          var showLabels = settings2.showLabels;
          var selectedProximity = options.get("proximity", defaultProximity);
          var proxValues = range_1(minProximity, maxProximity + 1).map(function(item) {
            return {
              title: item,
              value: item
            };
          });
          var Select = widgets2.select.factory;
          return /* @__PURE__ */ jsxDEV("div", {
            className: "operator--PROXIMITY",
            children: [/* @__PURE__ */ jsxDEV("div", {
              className: "operator--options",
              children: [showLabels && /* @__PURE__ */ jsxDEV("label", {
                className: "rule--label",
                children: optionLabel
              }, void 0, false, {
                fileName: _jsxFileName$4,
                lineNumber: 57,
                columnNumber: 37
              }, this), !showLabels && optionTextBefore && /* @__PURE__ */ jsxDEV("div", {
                className: "operator--options--sep",
                children: /* @__PURE__ */ jsxDEV("span", {
                  children: optionTextBefore
                }, void 0, false, {
                  fileName: _jsxFileName$4,
                  lineNumber: 61,
                  columnNumber: 23
                }, this)
              }, void 0, false, {
                fileName: _jsxFileName$4,
                lineNumber: 59,
                columnNumber: 72
              }, this), /* @__PURE__ */ jsxDEV(Select, {
                config: config2,
                value: selectedProximity,
                listValues: proxValues,
                setValue: this.handleChange,
                readonly,
                placeholder: optionPlaceholder,
                ...customProps
              }, void 0, false, {
                fileName: _jsxFileName$4,
                lineNumber: 61,
                columnNumber: 90
              }, this)]
            }, void 0, true, {
              fileName: _jsxFileName$4,
              lineNumber: 55,
              columnNumber: 23
            }, this), /* @__PURE__ */ jsxDEV("div", {
              className: "operator--widgets",
              children: this.props.children
            }, void 0, false, {
              fileName: _jsxFileName$4,
              lineNumber: 68,
              columnNumber: 39
            }, this)]
          }, void 0, true, {
            fileName: _jsxFileName$4,
            lineNumber: 53,
            columnNumber: 27
          }, this);
        }
      }]);
      return Proximity2;
    }(react.exports.PureComponent);
    Proximity.propTypes = {
      config: propTypes.exports.object.isRequired,
      setOption: propTypes.exports.func.isRequired,
      options: propTypes.exports.any.isRequired,
      minProximity: propTypes.exports.number,
      maxProximity: propTypes.exports.number,
      optionPlaceholder: propTypes.exports.string,
      optionTextBefore: propTypes.exports.string,
      optionLabel: propTypes.exports.string,
      customProps: propTypes.exports.object,
      readonly: propTypes.exports.bool
    };
    Proximity.defaultProps = {
      customProps: {},
      minProximity: 2,
      maxProximity: 10,
      optionPlaceholder: "Select words between",
      optionLabel: "Words between",
      optionTextBefore: null
    };
    var _jsxFileName$3 = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/ui/esm/config/index.js";
    function ownKeys(object, enumerableOnly) {
      var keys2 = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys2.push.apply(keys2, symbols);
      }
      return keys2;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty$1(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    var VanillaBooleanWidget = VanillaBoolean, VanillaTextWidget = VanillaText, VanillaTextAreaWidget = VanillaTextArea, VanillaDateWidget = VanillaDate, VanillaTimeWidget = VanillaTime, VanillaDateTimeWidget = VanillaDateTime, VanillaMultiSelectWidget = VanillaMultiSelect, VanillaSelectWidget = VanillaSelect, VanillaNumberWidget = VanillaNumber, VanillaSliderWidget = VanillaSlider, VanillaFieldSelect = VanillaFieldSelect$1, VanillaConjs = VanillaConjs$1, VanillaButton = VanillaButton$1, VanillaButtonGroup = VanillaButtonGroup$1, VanillaProvider = VanillaProvider$1, VanillaValueSources = VanillaValueSources$1, vanillaConfirm = vanillaConfirm$1, VanillaSwitch = VanillaSwitch$1, ValueFieldWidget = ValueField, FuncWidget = FuncWidget$1;
    var ProximityOperator = Proximity;
    var conjunctions$1 = _objectSpread({}, CoreConfig.conjunctions);
    var operators$1 = _objectSpread(_objectSpread({}, CoreConfig.operators), {}, {
      proximity: _objectSpread(_objectSpread({}, CoreConfig.operators.proximity), {}, {
        options: _objectSpread(_objectSpread({}, CoreConfig.operators.proximity.options), {}, {
          factory: function factory(props) {
            return /* @__PURE__ */ jsxDEV(ProximityOperator, {
              ...props
            }, void 0, false, {
              fileName: _jsxFileName$3,
              lineNumber: 40,
              columnNumber: 29
            }, this);
          }
        })
      })
    });
    var widgets$1 = {
      text: _objectSpread(_objectSpread({}, CoreConfig.widgets.text), {}, {
        factory: function factory(props) {
          return /* @__PURE__ */ jsxDEV(VanillaTextWidget, {
            ...props
          }, void 0, false, {
            fileName: _jsxFileName$3,
            lineNumber: 51,
            columnNumber: 27
          }, this);
        }
      }),
      textarea: _objectSpread(_objectSpread({}, CoreConfig.widgets.textarea), {}, {
        factory: function factory(props) {
          return /* @__PURE__ */ jsxDEV(VanillaTextAreaWidget, {
            ...props
          }, void 0, false, {
            fileName: _jsxFileName$3,
            lineNumber: 56,
            columnNumber: 27
          }, this);
        }
      }),
      number: _objectSpread(_objectSpread({}, CoreConfig.widgets.number), {}, {
        factory: function factory(props) {
          return /* @__PURE__ */ jsxDEV(VanillaNumberWidget, {
            ...props
          }, void 0, false, {
            fileName: _jsxFileName$3,
            lineNumber: 61,
            columnNumber: 27
          }, this);
        }
      }),
      slider: _objectSpread(_objectSpread({}, CoreConfig.widgets.slider), {}, {
        factory: function factory(props) {
          return /* @__PURE__ */ jsxDEV(VanillaSliderWidget, {
            ...props
          }, void 0, false, {
            fileName: _jsxFileName$3,
            lineNumber: 66,
            columnNumber: 27
          }, this);
        }
      }),
      select: _objectSpread(_objectSpread({}, CoreConfig.widgets.select), {}, {
        factory: function factory(props) {
          return /* @__PURE__ */ jsxDEV(VanillaSelectWidget, {
            ...props
          }, void 0, false, {
            fileName: _jsxFileName$3,
            lineNumber: 71,
            columnNumber: 27
          }, this);
        }
      }),
      multiselect: _objectSpread(_objectSpread({}, CoreConfig.widgets.multiselect), {}, {
        factory: function factory(props) {
          return /* @__PURE__ */ jsxDEV(VanillaMultiSelectWidget, {
            ...props
          }, void 0, false, {
            fileName: _jsxFileName$3,
            lineNumber: 76,
            columnNumber: 27
          }, this);
        }
      }),
      date: _objectSpread(_objectSpread({}, CoreConfig.widgets.date), {}, {
        factory: function factory(props) {
          return /* @__PURE__ */ jsxDEV(VanillaDateWidget, {
            ...props
          }, void 0, false, {
            fileName: _jsxFileName$3,
            lineNumber: 81,
            columnNumber: 27
          }, this);
        }
      }),
      time: _objectSpread(_objectSpread({}, CoreConfig.widgets.time), {}, {
        factory: function factory(props) {
          return /* @__PURE__ */ jsxDEV(VanillaTimeWidget, {
            ...props
          }, void 0, false, {
            fileName: _jsxFileName$3,
            lineNumber: 86,
            columnNumber: 27
          }, this);
        }
      }),
      datetime: _objectSpread(_objectSpread({}, CoreConfig.widgets.datetime), {}, {
        factory: function factory(props) {
          return /* @__PURE__ */ jsxDEV(VanillaDateTimeWidget, {
            ...props
          }, void 0, false, {
            fileName: _jsxFileName$3,
            lineNumber: 91,
            columnNumber: 27
          }, this);
        }
      }),
      "boolean": _objectSpread(_objectSpread({}, CoreConfig.widgets["boolean"]), {}, {
        factory: function factory(props) {
          return /* @__PURE__ */ jsxDEV(VanillaBooleanWidget, {
            ...props
          }, void 0, false, {
            fileName: _jsxFileName$3,
            lineNumber: 96,
            columnNumber: 27
          }, this);
        }
      }),
      field: _objectSpread(_objectSpread({}, CoreConfig.widgets.field), {}, {
        factory: function factory(props) {
          return /* @__PURE__ */ jsxDEV(ValueFieldWidget, {
            ...props
          }, void 0, false, {
            fileName: _jsxFileName$3,
            lineNumber: 101,
            columnNumber: 27
          }, this);
        },
        customProps: {
          showSearch: true
        }
      }),
      func: _objectSpread(_objectSpread({}, CoreConfig.widgets.func), {}, {
        factory: function factory(props) {
          return /* @__PURE__ */ jsxDEV(FuncWidget, {
            ...props
          }, void 0, false, {
            fileName: _jsxFileName$3,
            lineNumber: 109,
            columnNumber: 27
          }, this);
        },
        customProps: {}
      }),
      case_value: _objectSpread(_objectSpread({}, CoreConfig.widgets.case_value), {}, {
        factory: function factory(_ref) {
          var value2 = _ref.value, setValue2 = _ref.setValue;
          return /* @__PURE__ */ jsxDEV("input", {
            type: "text",
            value: value2 || "",
            onChange: function onChange(e) {
              return setValue2(e.target.value);
            }
          }, void 0, false, {
            fileName: _jsxFileName$3,
            lineNumber: 119,
            columnNumber: 27
          }, this);
        }
      })
    };
    var types$1 = _objectSpread(_objectSpread({}, CoreConfig.types), {}, {
      select: _objectSpread(_objectSpread({}, CoreConfig.types.select), {}, {
        widgets: _objectSpread(_objectSpread({}, CoreConfig.types.select.widgets), {}, {
          select: _objectSpread(_objectSpread({}, CoreConfig.types.select.widgets.select), {}, {
            widgetProps: {
              customProps: {
                showSearch: true
              }
            }
          })
        })
      })
    });
    var settings$1 = _objectSpread(_objectSpread({}, CoreConfig.settings), {}, {
      renderField: function renderField(props) {
        return /* @__PURE__ */ jsxDEV(VanillaFieldSelect, {
          ...props
        }, void 0, false, {
          fileName: _jsxFileName$3,
          lineNumber: 150,
          columnNumber: 25
        }, this);
      },
      renderOperator: function renderOperator(props) {
        return /* @__PURE__ */ jsxDEV(VanillaFieldSelect, {
          ...props
        }, void 0, false, {
          fileName: _jsxFileName$3,
          lineNumber: 153,
          columnNumber: 25
        }, this);
      },
      renderFunc: function renderFunc(props) {
        return /* @__PURE__ */ jsxDEV(VanillaFieldSelect, {
          ...props
        }, void 0, false, {
          fileName: _jsxFileName$3,
          lineNumber: 156,
          columnNumber: 25
        }, this);
      },
      renderConjs: function renderConjs(props) {
        return /* @__PURE__ */ jsxDEV(VanillaConjs, {
          ...props
        }, void 0, false, {
          fileName: _jsxFileName$3,
          lineNumber: 159,
          columnNumber: 25
        }, this);
      },
      renderSwitch: function renderSwitch(props) {
        return /* @__PURE__ */ jsxDEV(VanillaSwitch, {
          ...props
        }, void 0, false, {
          fileName: _jsxFileName$3,
          lineNumber: 162,
          columnNumber: 25
        }, this);
      },
      renderButton: function renderButton(props) {
        return /* @__PURE__ */ jsxDEV(VanillaButton, {
          ...props
        }, void 0, false, {
          fileName: _jsxFileName$3,
          lineNumber: 165,
          columnNumber: 25
        }, this);
      },
      renderButtonGroup: function renderButtonGroup(props) {
        return /* @__PURE__ */ jsxDEV(VanillaButtonGroup, {
          ...props
        }, void 0, false, {
          fileName: _jsxFileName$3,
          lineNumber: 168,
          columnNumber: 25
        }, this);
      },
      renderProvider: function renderProvider(props) {
        return /* @__PURE__ */ jsxDEV(VanillaProvider, {
          ...props
        }, void 0, false, {
          fileName: _jsxFileName$3,
          lineNumber: 171,
          columnNumber: 25
        }, this);
      },
      renderValueSources: function renderValueSources(props) {
        return /* @__PURE__ */ jsxDEV(VanillaValueSources, {
          ...props
        }, void 0, false, {
          fileName: _jsxFileName$3,
          lineNumber: 174,
          columnNumber: 25
        }, this);
      },
      renderConfirm: vanillaConfirm,
      renderSwitchPrefix: function renderSwitchPrefix() {
        return /* @__PURE__ */ jsxDEV(Fragment, {
          children: "Conditions"
        }, void 0, false);
      },
      customFieldSelectProps: {
        showSearch: true
      },
      defaultSliderWidth: "200px",
      defaultSelectWidth: "200px",
      defaultSearchWidth: "100px",
      defaultMaxRows: 5,
      renderSize: "small",
      maxLabelsLength: 100,
      showLock: false,
      showNot: true,
      forceShowConj: false,
      groupActionsPosition: "topRight"
    });
    const BasicConfig = {
      conjunctions: conjunctions$1,
      operators: operators$1,
      widgets: widgets$1,
      types: types$1,
      settings: settings$1
    };
    var root = _root;
    var now$1 = function() {
      return root.Date.now();
    };
    var now_1 = now$1;
    var isObject$1 = isObject_1, now = now_1, toNumber = toNumber_1;
    var FUNC_ERROR_TEXT$1 = "Expected a function";
    var nativeMax = Math.max, nativeMin = Math.min;
    function debounce$1(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT$1);
      }
      wait = toNumber(wait) || 0;
      if (isObject$1(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    var debounce_1 = debounce$1;
    var _Utils$Autocomplete = Utils.Autocomplete;
    _Utils$Autocomplete.mergeListValues;
    _Utils$Autocomplete.listValueToOption;
    _Utils$Autocomplete.getListValue;
    var _Utils$ListUtils = Utils.ListUtils;
    _Utils$ListUtils.mapListValues;
    _Utils$ListUtils.listValuesToArray;
    var debounce = debounce_1, isObject = isObject_1;
    var FUNC_ERROR_TEXT = "Expected a function";
    function throttle(func, wait, options) {
      var leading = true, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = "leading" in options ? !!options.leading : leading;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
      });
    }
    var throttle_1 = throttle;
    var _jsxFileName$2 = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/sandbox_simple/src/demo/config_simple.jsx";
    const InitialConfig = BasicConfig;
    const fields = {
      user: {
        label: "User",
        tooltip: "Group of fields",
        type: "!struct",
        subfields: {
          firstName: {
            label2: "Username",
            type: "text",
            excludeOperators: ["proximity"],
            mainWidgetProps: {
              valueLabel: "Name",
              valuePlaceholder: "Enter name"
            },
            fieldSettings: {
              validateValue: (val, fieldSettings) => {
                return val.length < 10;
              }
            }
          },
          login: {
            type: "text",
            excludeOperators: ["proximity"],
            fieldSettings: {
              validateValue: (val, fieldSettings) => {
                return val.length < 10 && (val === "" || val.match(/^[A-Za-z0-9_-]+$/) !== null);
              }
            },
            mainWidgetProps: {
              valueLabel: "Login",
              valuePlaceholder: "Enter login"
            }
          }
        }
      },
      num: {
        label: "Number",
        type: "number",
        preferWidgets: ["number"],
        fieldSettings: {
          min: -1,
          max: 5
        }
      },
      slider: {
        label: "Slider",
        type: "number",
        preferWidgets: ["slider", "rangeslider"],
        valueSources: ["value", "field"],
        fieldSettings: {
          min: 0,
          max: 100,
          step: 1,
          marks: {
            0: /* @__PURE__ */ jsxDEV("strong", {
              children: "0%"
            }, void 0, false, {
              fileName: _jsxFileName$2,
              lineNumber: 63,
              columnNumber: 12
            }, void 0),
            100: /* @__PURE__ */ jsxDEV("strong", {
              children: "100%"
            }, void 0, false, {
              fileName: _jsxFileName$2,
              lineNumber: 64,
              columnNumber: 14
            }, void 0)
          }
        },
        widgets: {
          slider: {
            widgetProps: {
              valuePlaceholder: "..Slider"
            }
          }
        }
      },
      date: {
        label: "Date",
        type: "date",
        valueSources: ["value"]
      },
      time: {
        label: "Time",
        type: "time",
        valueSources: ["value"],
        operators: ["greater_or_equal", "less_or_equal", "between"],
        defaultOperator: "between"
      },
      datetime: {
        label: "DateTime",
        type: "datetime",
        valueSources: ["value"]
      },
      datetime2: {
        label: "DateTime2",
        type: "datetime",
        valueSources: ["field"]
      },
      color: {
        label: "Color",
        type: "select",
        valueSources: ["value"],
        fieldSettings: {
          listValues: [{
            value: "yellow",
            title: "Yellow"
          }, {
            value: "green",
            title: "Green"
          }, {
            value: "orange",
            title: "Orange"
          }]
        }
      },
      color2: {
        label: "Color2",
        type: "select",
        fieldSettings: {
          listValues: {
            yellow: "Yellow",
            green: "Green",
            orange: "Orange",
            purple: "Purple"
          }
        }
      },
      multicolor: {
        label: "Colors",
        type: "multiselect",
        fieldSettings: {
          listValues: {
            yellow: "Yellow",
            green: "Green",
            orange: "Orange"
          },
          allowCustomValues: true
        }
      },
      selecttree: {
        label: "Color (tree)",
        type: "treeselect",
        fieldSettings: {
          treeExpandAll: true,
          listValues: [{
            value: "1",
            title: "Warm colors",
            children: [{
              value: "2",
              title: "Red"
            }, {
              value: "3",
              title: "Orange"
            }]
          }, {
            value: "4",
            title: "Cool colors",
            children: [{
              value: "5",
              title: "Green"
            }, {
              value: "6",
              title: "Blue",
              children: [{
                value: "7",
                title: "Sub blue",
                children: [{
                  value: "8",
                  title: "Sub sub blue and a long text"
                }]
              }]
            }]
          }]
        }
      },
      multiselecttree: {
        label: "Colors (tree)",
        type: "treemultiselect",
        fieldSettings: {
          treeExpandAll: true,
          listValues: [{
            value: "1",
            title: "Warm colors",
            children: [{
              value: "2",
              title: "Red"
            }, {
              value: "3",
              title: "Orange"
            }]
          }, {
            value: "4",
            title: "Cool colors",
            children: [{
              value: "5",
              title: "Green"
            }, {
              value: "6",
              title: "Blue",
              children: [{
                value: "7",
                title: "Sub blue",
                children: [{
                  value: "8",
                  title: "Sub sub blue and a long text"
                }]
              }]
            }]
          }]
        }
      },
      stock: {
        label: "In stock",
        type: "boolean",
        defaultValue: true,
        mainWidgetProps: {
          labelYes: "+",
          labelNo: "-"
        }
      }
    };
    const conjunctions = {
      AND: InitialConfig.conjunctions.AND,
      OR: InitialConfig.conjunctions.OR
    };
    const operators = {
      ...InitialConfig.operators,
      between: {
        ...InitialConfig.operators.between,
        textSeparators: ["from", "to"]
      }
    };
    const widgets = {
      ...InitialConfig.widgets,
      slider: {
        ...InitialConfig.widgets.slider,
        customProps: {
          width: "300px"
        }
      },
      rangeslider: {
        ...InitialConfig.widgets.rangeslider,
        customProps: {
          width: "300px"
        }
      },
      date: {
        ...InitialConfig.widgets.date,
        dateFormat: "DD.MM.YYYY",
        valueFormat: "YYYY-MM-DD"
      },
      time: {
        ...InitialConfig.widgets.time,
        timeFormat: "HH:mm",
        valueFormat: "HH:mm:ss"
      },
      datetime: {
        ...InitialConfig.widgets.datetime,
        timeFormat: "HH:mm",
        dateFormat: "DD.MM.YYYY",
        valueFormat: "YYYY-MM-DD HH:mm:ss"
      },
      treeselect: {
        ...InitialConfig.widgets.treeselect,
        customProps: {
          showSearch: true
        }
      }
    };
    const types = {
      ...InitialConfig.types,
      boolean: merge_1(InitialConfig.types.boolean, {
        widgets: {
          boolean: {
            widgetProps: {
              hideOperator: true,
              operatorInlineLabel: "is"
            }
          }
        }
      })
    };
    const localeSettings = {
      locale: {
        moment: "ru"
      },
      valueLabel: "Value",
      valuePlaceholder: "Value",
      fieldLabel: "Field",
      operatorLabel: "Operator",
      fieldPlaceholder: "Select field",
      operatorPlaceholder: "Select operator",
      deleteLabel: null,
      addGroupLabel: "Add group",
      addRuleLabel: "Add rule",
      addSubRuleLabel: "Add sub rule",
      delGroupLabel: null,
      notLabel: "Not",
      valueSourcesPopupTitle: "Select value source",
      removeRuleConfirmOptions: {
        title: "Are you sure delete this rule?",
        okText: "Yes",
        okType: "danger"
      },
      removeGroupConfirmOptions: {
        title: "Are you sure delete this group?",
        okText: "Yes",
        okType: "danger"
      }
    };
    const settings = {
      ...InitialConfig.settings,
      ...localeSettings,
      valueSourcesInfo: {
        value: {
          label: "Value"
        },
        field: {
          label: "Field",
          widget: "field"
        },
        func: {
          label: "Function",
          widget: "func"
        }
      },
      maxNesting: 3,
      canLeaveEmptyGroup: true
    };
    const funcs = {};
    const config = {
      conjunctions,
      operators,
      widgets,
      types,
      settings,
      fields,
      funcs
    };
    const value = {
      "type": "group",
      "id": "9a99988a-0123-4456-b89a-b1607f326fd8",
      "children1": {
        "a98ab9b9-cdef-4012-b456-71607f326fd9": {
          "type": "rule",
          "properties": {
            "field": "user.login",
            "operator": "equal",
            "value": [
              "batman"
            ],
            "valueSrc": [
              "value"
            ],
            "valueType": [
              "text"
            ]
          }
        },
        "98a8a9ba-0123-4456-b89a-b16e721c8cd0": {
          "type": "rule",
          "properties": {
            "field": "stock",
            "operator": "equal",
            "value": [
              false
            ],
            "valueSrc": [
              "value"
            ],
            "valueType": [
              "boolean"
            ]
          }
        },
        "aabbab8a-cdef-4012-b456-716e85c65e9c": {
          "type": "rule",
          "properties": {
            "field": "slider",
            "operator": "equal",
            "value": [
              35
            ],
            "valueSrc": [
              "value"
            ],
            "valueType": [
              "number"
            ]
          }
        }
      },
      "properties": {
        "conjunction": "AND",
        "not": false
      }
    };
    var _jsxFileName$1 = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/sandbox_simple/src/demo/demo.jsx";
    const stringify = JSON.stringify;
    const {
      jsonLogicFormat,
      queryString,
      mongodbFormat,
      sqlFormat,
      getTree,
      checkTree,
      loadTree,
      uuid,
      loadFromJsonLogic
    } = Utils;
    const preStyle = {
      backgroundColor: "darkgrey",
      margin: "10px",
      padding: "10px"
    };
    const preErrorStyle = {
      backgroundColor: "lightpink",
      margin: "10px",
      padding: "10px"
    };
    const emptyInitValue = {
      "id": uuid(),
      "type": "group"
    };
    const initValue = value && Object.keys(value).length > 0 ? value : emptyInitValue;
    const initTree = checkTree(loadTree(initValue), config);
    class DemoQueryBuilder extends react.exports.Component {
      constructor() {
        super(...arguments);
        __publicField(this, "state", {
          tree: initTree,
          config
        });
        __publicField(this, "render", () => /* @__PURE__ */ jsxDEV("div", {
          children: [/* @__PURE__ */ jsxDEV(QueryContainer, {
            ...config,
            value: this.state.tree,
            onChange: this.onChange,
            renderBuilder: this.renderBuilder
          }, void 0, false, {
            fileName: _jsxFileName$1,
            lineNumber: 35,
            columnNumber: 7
          }, this), /* @__PURE__ */ jsxDEV("button", {
            onClick: this.resetValue,
            children: "reset"
          }, void 0, false, {
            fileName: _jsxFileName$1,
            lineNumber: 42,
            columnNumber: 7
          }, this), /* @__PURE__ */ jsxDEV("button", {
            onClick: this.clearValue,
            children: "clear"
          }, void 0, false, {
            fileName: _jsxFileName$1,
            lineNumber: 43,
            columnNumber: 7
          }, this), /* @__PURE__ */ jsxDEV("div", {
            className: "query-builder-result",
            children: this.renderResult(this.state)
          }, void 0, false, {
            fileName: _jsxFileName$1,
            lineNumber: 45,
            columnNumber: 7
          }, this)]
        }, void 0, true, {
          fileName: _jsxFileName$1,
          lineNumber: 34,
          columnNumber: 5
        }, this));
        __publicField(this, "resetValue", () => {
          this.setState({
            tree: initTree
          });
        });
        __publicField(this, "clearValue", () => {
          this.setState({
            tree: loadTree(emptyInitValue)
          });
        });
        __publicField(this, "renderBuilder", (props) => /* @__PURE__ */ jsxDEV("div", {
          className: "query-builder-container",
          style: {
            padding: "10px"
          },
          children: /* @__PURE__ */ jsxDEV("div", {
            className: "query-builder",
            children: /* @__PURE__ */ jsxDEV(Builder$1, {
              ...props
            }, void 0, false, {
              fileName: _jsxFileName$1,
              lineNumber: 66,
              columnNumber: 9
            }, this)
          }, void 0, false, {
            fileName: _jsxFileName$1,
            lineNumber: 65,
            columnNumber: 7
          }, this)
        }, void 0, false, {
          fileName: _jsxFileName$1,
          lineNumber: 64,
          columnNumber: 5
        }, this));
        __publicField(this, "onChange", (immutableTree, config2) => {
          this.immutableTree = immutableTree;
          this.config = config2;
          this.updateResult();
          getTree(immutableTree);
          jsonLogicFormat(immutableTree, config2);
        });
        __publicField(this, "updateResult", throttle_1(() => {
          this.setState({
            tree: this.immutableTree,
            config: this.config
          });
        }, 100));
        __publicField(this, "renderResult", ({
          tree: immutableTree,
          config: config2
        }) => {
          const {
            logic,
            data,
            errors
          } = jsonLogicFormat(immutableTree, config2);
          return /* @__PURE__ */ jsxDEV("div", {
            children: [/* @__PURE__ */ jsxDEV("br", {}, void 0, false, {
              fileName: _jsxFileName$1,
              lineNumber: 90,
              columnNumber: 9
            }, this), /* @__PURE__ */ jsxDEV("div", {
              children: ["stringFormat:", /* @__PURE__ */ jsxDEV("pre", {
                style: preStyle,
                children: stringify(queryString(immutableTree, config2), void 0, 2)
              }, void 0, false, {
                fileName: _jsxFileName$1,
                lineNumber: 93,
                columnNumber: 11
              }, this)]
            }, void 0, true, {
              fileName: _jsxFileName$1,
              lineNumber: 91,
              columnNumber: 9
            }, this), /* @__PURE__ */ jsxDEV("hr", {}, void 0, false, {
              fileName: _jsxFileName$1,
              lineNumber: 97,
              columnNumber: 9
            }, this), /* @__PURE__ */ jsxDEV("div", {
              children: ["humanStringFormat:", /* @__PURE__ */ jsxDEV("pre", {
                style: preStyle,
                children: stringify(queryString(immutableTree, config2, true), void 0, 2)
              }, void 0, false, {
                fileName: _jsxFileName$1,
                lineNumber: 100,
                columnNumber: 11
              }, this)]
            }, void 0, true, {
              fileName: _jsxFileName$1,
              lineNumber: 98,
              columnNumber: 9
            }, this), /* @__PURE__ */ jsxDEV("hr", {}, void 0, false, {
              fileName: _jsxFileName$1,
              lineNumber: 104,
              columnNumber: 9
            }, this), /* @__PURE__ */ jsxDEV("div", {
              children: ["sqlFormat:", /* @__PURE__ */ jsxDEV("pre", {
                style: preStyle,
                children: stringify(sqlFormat(immutableTree, config2), void 0, 2)
              }, void 0, false, {
                fileName: _jsxFileName$1,
                lineNumber: 107,
                columnNumber: 11
              }, this)]
            }, void 0, true, {
              fileName: _jsxFileName$1,
              lineNumber: 105,
              columnNumber: 9
            }, this), /* @__PURE__ */ jsxDEV("hr", {}, void 0, false, {
              fileName: _jsxFileName$1,
              lineNumber: 111,
              columnNumber: 9
            }, this), /* @__PURE__ */ jsxDEV("div", {
              children: ["mongodbFormat:", /* @__PURE__ */ jsxDEV("pre", {
                style: preStyle,
                children: stringify(mongodbFormat(immutableTree, config2), void 0, 2)
              }, void 0, false, {
                fileName: _jsxFileName$1,
                lineNumber: 114,
                columnNumber: 11
              }, this)]
            }, void 0, true, {
              fileName: _jsxFileName$1,
              lineNumber: 112,
              columnNumber: 9
            }, this), /* @__PURE__ */ jsxDEV("hr", {}, void 0, false, {
              fileName: _jsxFileName$1,
              lineNumber: 118,
              columnNumber: 9
            }, this), /* @__PURE__ */ jsxDEV("div", {
              children: [/* @__PURE__ */ jsxDEV("a", {
                href: "http://jsonlogic.com/play.html",
                target: "_blank",
                rel: "noopener noreferrer",
                children: "jsonLogicFormat"
              }, void 0, false, {
                fileName: _jsxFileName$1,
                lineNumber: 120,
                columnNumber: 11
              }, this), ":", errors.length > 0 && /* @__PURE__ */ jsxDEV("pre", {
                style: preErrorStyle,
                children: stringify(errors, void 0, 2)
              }, void 0, false, {
                fileName: _jsxFileName$1,
                lineNumber: 122,
                columnNumber: 18
              }, this), !!logic && /* @__PURE__ */ jsxDEV("pre", {
                style: preStyle,
                children: ["// Rule", ":", /* @__PURE__ */ jsxDEV("br", {}, void 0, false, {
                  fileName: _jsxFileName$1,
                  lineNumber: 128,
                  columnNumber: 29
                }, this), stringify(logic, void 0, 2), /* @__PURE__ */ jsxDEV("br", {}, void 0, false, {
                  fileName: _jsxFileName$1,
                  lineNumber: 130,
                  columnNumber: 17
                }, this), /* @__PURE__ */ jsxDEV("hr", {}, void 0, false, {
                  fileName: _jsxFileName$1,
                  lineNumber: 131,
                  columnNumber: 17
                }, this), "// Data", ":", /* @__PURE__ */ jsxDEV("br", {}, void 0, false, {
                  fileName: _jsxFileName$1,
                  lineNumber: 132,
                  columnNumber: 29
                }, this), stringify(data, void 0, 2)]
              }, void 0, true, {
                fileName: _jsxFileName$1,
                lineNumber: 127,
                columnNumber: 18
              }, this)]
            }, void 0, true, {
              fileName: _jsxFileName$1,
              lineNumber: 119,
              columnNumber: 9
            }, this), /* @__PURE__ */ jsxDEV("hr", {}, void 0, false, {
              fileName: _jsxFileName$1,
              lineNumber: 137,
              columnNumber: 9
            }, this), /* @__PURE__ */ jsxDEV("div", {
              children: ["Tree:", /* @__PURE__ */ jsxDEV("pre", {
                style: preStyle,
                children: stringify(getTree(immutableTree), void 0, 2)
              }, void 0, false, {
                fileName: _jsxFileName$1,
                lineNumber: 140,
                columnNumber: 11
              }, this)]
            }, void 0, true, {
              fileName: _jsxFileName$1,
              lineNumber: 138,
              columnNumber: 9
            }, this)]
          }, void 0, true, {
            fileName: _jsxFileName$1,
            lineNumber: 89,
            columnNumber: 7
          }, this);
        });
      }
    }
    const styles = "";
    var _jsxFileName = "/home/runner/work/react-awesome-query-builder/react-awesome-query-builder/packages/sandbox_simple/src/index.jsx";
    function App() {
      return /* @__PURE__ */ jsxDEV("div", {
        className: "App",
        children: /* @__PURE__ */ jsxDEV(DemoQueryBuilder, {}, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 10,
          columnNumber: 7
        }, this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 9,
        columnNumber: 5
      }, this);
    }
    const rootElement = document.getElementById("root");
    reactDom.exports.render(/* @__PURE__ */ jsxDEV(App, {}, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 16,
      columnNumber: 8
    }, globalThis), rootElement);
  }
});
export default require_index_ee03ee27();
//# sourceMappingURL=index.ee03ee27.js.map
